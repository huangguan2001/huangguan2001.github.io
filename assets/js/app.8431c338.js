(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(n){function e(e){for(var o,i,s=e[0],l=e[1],c=e[2],u=0,p=[];u<s.length;u++)i=s[u],Object.prototype.hasOwnProperty.call(r,i)&&r[i]&&p.push(r[i][0]),r[i]=0;for(o in l)Object.prototype.hasOwnProperty.call(l,o)&&(n[o]=l[o]);for(d&&d(e);p.length;)p.shift()();return a.push.apply(a,c||[]),t()}function t(){for(var n,e=0;e<a.length;e++){for(var t=a[e],o=!0,s=1;s<t.length;s++){var l=t[s];0!==r[l]&&(o=!1)}o&&(a.splice(e--,1),n=i(i.s=t[0]))}return n}var o={},r={1:0},a=[];function i(e){if(o[e])return o[e].exports;var t=o[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,i),t.l=!0,t.exports}i.e=function(n){var e=[],t=r[n];if(0!==t)if(t)e.push(t[2]);else{var o=new Promise((function(e,o){t=r[n]=[e,o]}));e.push(t[2]=o);var a,s=document.createElement("script");s.charset="utf-8",s.timeout=120,i.nc&&s.setAttribute("nonce",i.nc),s.src=function(n){return i.p+"assets/js/"+({}[n]||n)+"."+{2:"57f33dba",3:"0158b1d6",4:"df550fc8",5:"e9ae85a8",6:"96e4ab80",7:"b50201c4",8:"e8c12ed2",9:"a96707eb",10:"241fd0f2",11:"73762beb",12:"f46b409e",13:"751fa0b5",14:"a5aa4ccb",15:"7d22389a",16:"b366e5f3",17:"6d663848",18:"e909e86e",19:"3e69b336",20:"9f2acc5b",21:"7f939899",22:"dd9e0a78",23:"857637a1",24:"4d30b430",25:"391f5830",26:"250b9088",27:"e1b3d3f7",28:"839b367e",29:"f79ec9d9",30:"84e171a9",31:"77fa252a",32:"02ac8f5c",33:"669f6d35",34:"1c39f535",35:"10fc2227",36:"d229a001",37:"3d74bdb1",38:"bb556a49",39:"e4a78b85",40:"4dafef59",41:"5d5e7709",42:"d19d7ec1",43:"2aa6b8bd",44:"25e8921b",45:"7952794d",46:"edb53a51",47:"10f5eed3",48:"8be46123",49:"f35876f7",50:"aef57929",51:"64847ea1",52:"39b49719",53:"46514fe6",54:"c9cd88c7",55:"8d60c4d8",56:"8b8bbdeb",57:"526430bf",58:"9bee51cc",59:"30affc34",60:"a8f2e120",61:"dfaf883a",62:"f1681da7",63:"56b475b1",64:"7b9f13f8",65:"483c9566",66:"91f9af8e",67:"81b951e6",68:"7eb92b66",69:"8dba2253",70:"29c74192",71:"d1916ffa",72:"7156d0d9",73:"fc3c5ee7",74:"9be3a850",75:"69912c68",76:"a6daa5c4",77:"ef1203b6",78:"2bdb3825",79:"77d4561d",80:"abd4c3b8",81:"9398073a",82:"0abe2ba7",83:"a56199a0",84:"3aa802f2",85:"03e84298",86:"bf8c8379",87:"eebb46d3",88:"3e0c9f2f",89:"bce3a5a7",90:"837dd328",91:"c28c5787",92:"d800ceb2",93:"b25e4932",94:"0986d414",95:"c72a4e7f",96:"e4e30e8d",97:"f2b5c4db",98:"96b93faf",99:"d3035fc2",100:"b284143b",101:"db55f035",102:"5854b4f3",103:"1cdf614a",104:"26c5bb4f",105:"11c958c6",106:"155bf13e",107:"f6ac19d9",108:"289135fd",109:"84bd2fc6",110:"1bcb9006",111:"88a7bed6",112:"487bd3d4",113:"96fe1da2",114:"0bfbcdd7",115:"b1a0d42a",116:"903f0c31",117:"22e8cfc3",118:"501c5629",119:"ba4f33c0",120:"647b3d27"}[n]+".js"}(n);var l=new Error;a=function(e){s.onerror=s.onload=null,clearTimeout(c);var t=r[n];if(0!==t){if(t){var o=e&&("load"===e.type?"missing":e.type),a=e&&e.target&&e.target.src;l.message="Loading chunk "+n+" failed.\n("+o+": "+a+")",l.name="ChunkLoadError",l.type=o,l.request=a,t[1](l)}r[n]=void 0}};var c=setTimeout((function(){a({type:"timeout",target:s})}),12e4);s.onerror=s.onload=a,document.head.appendChild(s)}return Promise.all(e)},i.m=n,i.c=o,i.d=function(n,e,t){i.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},i.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},i.t=function(n,e){if(1&e&&(n=i(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(i.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var o in n)i.d(t,o,function(e){return n[e]}.bind(null,o));return t},i.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return i.d(e,"a",e),e},i.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},i.p="/",i.oe=function(n){throw console.error(n),n};var s=window.webpackJsonp=window.webpackJsonp||[],l=s.push.bind(s);s.push=e,s=s.slice();for(var c=0;c<s.length;c++)e(s[c]);var d=l;a.push([241,0]),t()}([function(n,e){var t=function(n){return n&&n.Math==Math&&n};n.exports=t("object"==typeof globalThis&&globalThis)||t("object"==typeof window&&window)||t("object"==typeof self&&self)||t("object"==typeof global&&global)||function(){return this}()||Function("return this")()},function(n,e,t){"use strict";t.r(e);
/*!
 * Vue.js v2.6.14
 * (c) 2014-2021 Evan You
 * Released under the MIT License.
 */
var o=Object.freeze({});function r(n){return null==n}function a(n){return null!=n}function i(n){return!0===n}function s(n){return"string"==typeof n||"number"==typeof n||"symbol"==typeof n||"boolean"==typeof n}function l(n){return null!==n&&"object"==typeof n}var c=Object.prototype.toString;function d(n){return"[object Object]"===c.call(n)}function u(n){return"[object RegExp]"===c.call(n)}function p(n){var e=parseFloat(String(n));return e>=0&&Math.floor(e)===e&&isFinite(n)}function m(n){return a(n)&&"function"==typeof n.then&&"function"==typeof n.catch}function g(n){return null==n?"":Array.isArray(n)||d(n)&&n.toString===c?JSON.stringify(n,null,2):String(n)}function h(n){var e=parseFloat(n);return isNaN(e)?n:e}function f(n,e){for(var t=Object.create(null),o=n.split(","),r=0;r<o.length;r++)t[o[r]]=!0;return e?function(n){return t[n.toLowerCase()]}:function(n){return t[n]}}f("slot,component",!0);var b=f("key,ref,slot,slot-scope,is");function v(n,e){if(n.length){var t=n.indexOf(e);if(t>-1)return n.splice(t,1)}}var y=Object.prototype.hasOwnProperty;function x(n,e){return y.call(n,e)}function k(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var w=/-(\w)/g,E=k((function(n){return n.replace(w,(function(n,e){return e?e.toUpperCase():""}))})),T=k((function(n){return n.charAt(0).toUpperCase()+n.slice(1)})),_=/\B([A-Z])/g,j=k((function(n){return n.replace(_,"-$1").toLowerCase()}));var S=Function.prototype.bind?function(n,e){return n.bind(e)}:function(n,e){function t(t){var o=arguments.length;return o?o>1?n.apply(e,arguments):n.call(e,t):n.call(e)}return t._length=n.length,t};function A(n,e){e=e||0;for(var t=n.length-e,o=new Array(t);t--;)o[t]=n[t+e];return o}function C(n,e){for(var t in e)n[t]=e[t];return n}function I(n){for(var e={},t=0;t<n.length;t++)n[t]&&C(e,n[t]);return e}function D(n,e,t){}var P=function(n,e,t){return!1},z=function(n){return n};function R(n,e){if(n===e)return!0;var t=l(n),o=l(e);if(!t||!o)return!t&&!o&&String(n)===String(e);try{var r=Array.isArray(n),a=Array.isArray(e);if(r&&a)return n.length===e.length&&n.every((function(n,t){return R(n,e[t])}));if(n instanceof Date&&e instanceof Date)return n.getTime()===e.getTime();if(r||a)return!1;var i=Object.keys(n),s=Object.keys(e);return i.length===s.length&&i.every((function(t){return R(n[t],e[t])}))}catch(n){return!1}}function O(n,e){for(var t=0;t<n.length;t++)if(R(n[t],e))return t;return-1}function M(n){var e=!1;return function(){e||(e=!0,n.apply(this,arguments))}}var B=["component","directive","filter"],L=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],$={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:P,isReservedAttr:P,isUnknownElement:P,getTagNamespace:D,parsePlatformTagName:z,mustUseProp:P,async:!0,_lifecycleHooks:L},N=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function q(n,e,t,o){Object.defineProperty(n,e,{value:t,enumerable:!!o,writable:!0,configurable:!0})}var F=new RegExp("[^"+N.source+".$_\\d]");var G,H="__proto__"in{},V="undefined"!=typeof window,U="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,W=U&&WXEnvironment.platform.toLowerCase(),Y=V&&window.navigator.userAgent.toLowerCase(),K=Y&&/msie|trident/.test(Y),J=Y&&Y.indexOf("msie 9.0")>0,Q=Y&&Y.indexOf("edge/")>0,Z=(Y&&Y.indexOf("android"),Y&&/iphone|ipad|ipod|ios/.test(Y)||"ios"===W),X=(Y&&/chrome\/\d+/.test(Y),Y&&/phantomjs/.test(Y),Y&&Y.match(/firefox\/(\d+)/)),nn={}.watch,en=!1;if(V)try{var tn={};Object.defineProperty(tn,"passive",{get:function(){en=!0}}),window.addEventListener("test-passive",null,tn)}catch(n){}var on=function(){return void 0===G&&(G=!V&&!U&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),G},rn=V&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function an(n){return"function"==typeof n&&/native code/.test(n.toString())}var sn,ln="undefined"!=typeof Symbol&&an(Symbol)&&"undefined"!=typeof Reflect&&an(Reflect.ownKeys);sn="undefined"!=typeof Set&&an(Set)?Set:function(){function n(){this.set=Object.create(null)}return n.prototype.has=function(n){return!0===this.set[n]},n.prototype.add=function(n){this.set[n]=!0},n.prototype.clear=function(){this.set=Object.create(null)},n}();var cn=D,dn=0,un=function(){this.id=dn++,this.subs=[]};un.prototype.addSub=function(n){this.subs.push(n)},un.prototype.removeSub=function(n){v(this.subs,n)},un.prototype.depend=function(){un.target&&un.target.addDep(this)},un.prototype.notify=function(){var n=this.subs.slice();for(var e=0,t=n.length;e<t;e++)n[e].update()},un.target=null;var pn=[];function mn(n){pn.push(n),un.target=n}function gn(){pn.pop(),un.target=pn[pn.length-1]}var hn=function(n,e,t,o,r,a,i,s){this.tag=n,this.data=e,this.children=t,this.text=o,this.elm=r,this.ns=void 0,this.context=a,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=i,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},fn={child:{configurable:!0}};fn.child.get=function(){return this.componentInstance},Object.defineProperties(hn.prototype,fn);var bn=function(n){void 0===n&&(n="");var e=new hn;return e.text=n,e.isComment=!0,e};function vn(n){return new hn(void 0,void 0,void 0,String(n))}function yn(n){var e=new hn(n.tag,n.data,n.children&&n.children.slice(),n.text,n.elm,n.context,n.componentOptions,n.asyncFactory);return e.ns=n.ns,e.isStatic=n.isStatic,e.key=n.key,e.isComment=n.isComment,e.fnContext=n.fnContext,e.fnOptions=n.fnOptions,e.fnScopeId=n.fnScopeId,e.asyncMeta=n.asyncMeta,e.isCloned=!0,e}var xn=Array.prototype,kn=Object.create(xn);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(n){var e=xn[n];q(kn,n,(function(){for(var t=[],o=arguments.length;o--;)t[o]=arguments[o];var r,a=e.apply(this,t),i=this.__ob__;switch(n){case"push":case"unshift":r=t;break;case"splice":r=t.slice(2)}return r&&i.observeArray(r),i.dep.notify(),a}))}));var wn=Object.getOwnPropertyNames(kn),En=!0;function Tn(n){En=n}var _n=function(n){this.value=n,this.dep=new un,this.vmCount=0,q(n,"__ob__",this),Array.isArray(n)?(H?function(n,e){n.__proto__=e}(n,kn):function(n,e,t){for(var o=0,r=t.length;o<r;o++){var a=t[o];q(n,a,e[a])}}(n,kn,wn),this.observeArray(n)):this.walk(n)};function jn(n,e){var t;if(l(n)&&!(n instanceof hn))return x(n,"__ob__")&&n.__ob__ instanceof _n?t=n.__ob__:En&&!on()&&(Array.isArray(n)||d(n))&&Object.isExtensible(n)&&!n._isVue&&(t=new _n(n)),e&&t&&t.vmCount++,t}function Sn(n,e,t,o,r){var a=new un,i=Object.getOwnPropertyDescriptor(n,e);if(!i||!1!==i.configurable){var s=i&&i.get,l=i&&i.set;s&&!l||2!==arguments.length||(t=n[e]);var c=!r&&jn(t);Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){var e=s?s.call(n):t;return un.target&&(a.depend(),c&&(c.dep.depend(),Array.isArray(e)&&In(e))),e},set:function(e){var o=s?s.call(n):t;e===o||e!=e&&o!=o||s&&!l||(l?l.call(n,e):t=e,c=!r&&jn(e),a.notify())}})}}function An(n,e,t){if(Array.isArray(n)&&p(e))return n.length=Math.max(n.length,e),n.splice(e,1,t),t;if(e in n&&!(e in Object.prototype))return n[e]=t,t;var o=n.__ob__;return n._isVue||o&&o.vmCount?t:o?(Sn(o.value,e,t),o.dep.notify(),t):(n[e]=t,t)}function Cn(n,e){if(Array.isArray(n)&&p(e))n.splice(e,1);else{var t=n.__ob__;n._isVue||t&&t.vmCount||x(n,e)&&(delete n[e],t&&t.dep.notify())}}function In(n){for(var e=void 0,t=0,o=n.length;t<o;t++)(e=n[t])&&e.__ob__&&e.__ob__.dep.depend(),Array.isArray(e)&&In(e)}_n.prototype.walk=function(n){for(var e=Object.keys(n),t=0;t<e.length;t++)Sn(n,e[t])},_n.prototype.observeArray=function(n){for(var e=0,t=n.length;e<t;e++)jn(n[e])};var Dn=$.optionMergeStrategies;function Pn(n,e){if(!e)return n;for(var t,o,r,a=ln?Reflect.ownKeys(e):Object.keys(e),i=0;i<a.length;i++)"__ob__"!==(t=a[i])&&(o=n[t],r=e[t],x(n,t)?o!==r&&d(o)&&d(r)&&Pn(o,r):An(n,t,r));return n}function zn(n,e,t){return t?function(){var o="function"==typeof e?e.call(t,t):e,r="function"==typeof n?n.call(t,t):n;return o?Pn(o,r):r}:e?n?function(){return Pn("function"==typeof e?e.call(this,this):e,"function"==typeof n?n.call(this,this):n)}:e:n}function Rn(n,e){var t=e?n?n.concat(e):Array.isArray(e)?e:[e]:n;return t?function(n){for(var e=[],t=0;t<n.length;t++)-1===e.indexOf(n[t])&&e.push(n[t]);return e}(t):t}function On(n,e,t,o){var r=Object.create(n||null);return e?C(r,e):r}Dn.data=function(n,e,t){return t?zn(n,e,t):e&&"function"!=typeof e?n:zn(n,e)},L.forEach((function(n){Dn[n]=Rn})),B.forEach((function(n){Dn[n+"s"]=On})),Dn.watch=function(n,e,t,o){if(n===nn&&(n=void 0),e===nn&&(e=void 0),!e)return Object.create(n||null);if(!n)return e;var r={};for(var a in C(r,n),e){var i=r[a],s=e[a];i&&!Array.isArray(i)&&(i=[i]),r[a]=i?i.concat(s):Array.isArray(s)?s:[s]}return r},Dn.props=Dn.methods=Dn.inject=Dn.computed=function(n,e,t,o){if(!n)return e;var r=Object.create(null);return C(r,n),e&&C(r,e),r},Dn.provide=zn;var Mn=function(n,e){return void 0===e?n:e};function Bn(n,e,t){if("function"==typeof e&&(e=e.options),function(n,e){var t=n.props;if(t){var o,r,a={};if(Array.isArray(t))for(o=t.length;o--;)"string"==typeof(r=t[o])&&(a[E(r)]={type:null});else if(d(t))for(var i in t)r=t[i],a[E(i)]=d(r)?r:{type:r};else 0;n.props=a}}(e),function(n,e){var t=n.inject;if(t){var o=n.inject={};if(Array.isArray(t))for(var r=0;r<t.length;r++)o[t[r]]={from:t[r]};else if(d(t))for(var a in t){var i=t[a];o[a]=d(i)?C({from:a},i):{from:i}}else 0}}(e),function(n){var e=n.directives;if(e)for(var t in e){var o=e[t];"function"==typeof o&&(e[t]={bind:o,update:o})}}(e),!e._base&&(e.extends&&(n=Bn(n,e.extends,t)),e.mixins))for(var o=0,r=e.mixins.length;o<r;o++)n=Bn(n,e.mixins[o],t);var a,i={};for(a in n)s(a);for(a in e)x(n,a)||s(a);function s(o){var r=Dn[o]||Mn;i[o]=r(n[o],e[o],t,o)}return i}function Ln(n,e,t,o){if("string"==typeof t){var r=n[e];if(x(r,t))return r[t];var a=E(t);if(x(r,a))return r[a];var i=T(a);return x(r,i)?r[i]:r[t]||r[a]||r[i]}}function $n(n,e,t,o){var r=e[n],a=!x(t,n),i=t[n],s=Gn(Boolean,r.type);if(s>-1)if(a&&!x(r,"default"))i=!1;else if(""===i||i===j(n)){var l=Gn(String,r.type);(l<0||s<l)&&(i=!0)}if(void 0===i){i=function(n,e,t){if(!x(e,"default"))return;var o=e.default;0;if(n&&n.$options.propsData&&void 0===n.$options.propsData[t]&&void 0!==n._props[t])return n._props[t];return"function"==typeof o&&"Function"!==qn(e.type)?o.call(n):o}(o,r,n);var c=En;Tn(!0),jn(i),Tn(c)}return i}var Nn=/^\s*function (\w+)/;function qn(n){var e=n&&n.toString().match(Nn);return e?e[1]:""}function Fn(n,e){return qn(n)===qn(e)}function Gn(n,e){if(!Array.isArray(e))return Fn(e,n)?0:-1;for(var t=0,o=e.length;t<o;t++)if(Fn(e[t],n))return t;return-1}function Hn(n,e,t){mn();try{if(e)for(var o=e;o=o.$parent;){var r=o.$options.errorCaptured;if(r)for(var a=0;a<r.length;a++)try{if(!1===r[a].call(o,n,e,t))return}catch(n){Un(n,o,"errorCaptured hook")}}Un(n,e,t)}finally{gn()}}function Vn(n,e,t,o,r){var a;try{(a=t?n.apply(e,t):n.call(e))&&!a._isVue&&m(a)&&!a._handled&&(a.catch((function(n){return Hn(n,o,r+" (Promise/async)")})),a._handled=!0)}catch(n){Hn(n,o,r)}return a}function Un(n,e,t){if($.errorHandler)try{return $.errorHandler.call(null,n,e,t)}catch(e){e!==n&&Wn(e,null,"config.errorHandler")}Wn(n,e,t)}function Wn(n,e,t){if(!V&&!U||"undefined"==typeof console)throw n;console.error(n)}var Yn,Kn=!1,Jn=[],Qn=!1;function Zn(){Qn=!1;var n=Jn.slice(0);Jn.length=0;for(var e=0;e<n.length;e++)n[e]()}if("undefined"!=typeof Promise&&an(Promise)){var Xn=Promise.resolve();Yn=function(){Xn.then(Zn),Z&&setTimeout(D)},Kn=!0}else if(K||"undefined"==typeof MutationObserver||!an(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Yn="undefined"!=typeof setImmediate&&an(setImmediate)?function(){setImmediate(Zn)}:function(){setTimeout(Zn,0)};else{var ne=1,ee=new MutationObserver(Zn),te=document.createTextNode(String(ne));ee.observe(te,{characterData:!0}),Yn=function(){ne=(ne+1)%2,te.data=String(ne)},Kn=!0}function oe(n,e){var t;if(Jn.push((function(){if(n)try{n.call(e)}catch(n){Hn(n,e,"nextTick")}else t&&t(e)})),Qn||(Qn=!0,Yn()),!n&&"undefined"!=typeof Promise)return new Promise((function(n){t=n}))}var re=new sn;function ae(n){!function n(e,t){var o,r,a=Array.isArray(e);if(!a&&!l(e)||Object.isFrozen(e)||e instanceof hn)return;if(e.__ob__){var i=e.__ob__.dep.id;if(t.has(i))return;t.add(i)}if(a)for(o=e.length;o--;)n(e[o],t);else for(r=Object.keys(e),o=r.length;o--;)n(e[r[o]],t)}(n,re),re.clear()}var ie=k((function(n){var e="&"===n.charAt(0),t="~"===(n=e?n.slice(1):n).charAt(0),o="!"===(n=t?n.slice(1):n).charAt(0);return{name:n=o?n.slice(1):n,once:t,capture:o,passive:e}}));function se(n,e){function t(){var n=arguments,o=t.fns;if(!Array.isArray(o))return Vn(o,null,arguments,e,"v-on handler");for(var r=o.slice(),a=0;a<r.length;a++)Vn(r[a],null,n,e,"v-on handler")}return t.fns=n,t}function le(n,e,t,o,a,s){var l,c,d,u;for(l in n)c=n[l],d=e[l],u=ie(l),r(c)||(r(d)?(r(c.fns)&&(c=n[l]=se(c,s)),i(u.once)&&(c=n[l]=a(u.name,c,u.capture)),t(u.name,c,u.capture,u.passive,u.params)):c!==d&&(d.fns=c,n[l]=d));for(l in e)r(n[l])&&o((u=ie(l)).name,e[l],u.capture)}function ce(n,e,t){var o;n instanceof hn&&(n=n.data.hook||(n.data.hook={}));var s=n[e];function l(){t.apply(this,arguments),v(o.fns,l)}r(s)?o=se([l]):a(s.fns)&&i(s.merged)?(o=s).fns.push(l):o=se([s,l]),o.merged=!0,n[e]=o}function de(n,e,t,o,r){if(a(e)){if(x(e,t))return n[t]=e[t],r||delete e[t],!0;if(x(e,o))return n[t]=e[o],r||delete e[o],!0}return!1}function ue(n){return s(n)?[vn(n)]:Array.isArray(n)?function n(e,t){var o,l,c,d,u=[];for(o=0;o<e.length;o++)r(l=e[o])||"boolean"==typeof l||(c=u.length-1,d=u[c],Array.isArray(l)?l.length>0&&(pe((l=n(l,(t||"")+"_"+o))[0])&&pe(d)&&(u[c]=vn(d.text+l[0].text),l.shift()),u.push.apply(u,l)):s(l)?pe(d)?u[c]=vn(d.text+l):""!==l&&u.push(vn(l)):pe(l)&&pe(d)?u[c]=vn(d.text+l.text):(i(e._isVList)&&a(l.tag)&&r(l.key)&&a(t)&&(l.key="__vlist"+t+"_"+o+"__"),u.push(l)));return u}(n):void 0}function pe(n){return a(n)&&a(n.text)&&!1===n.isComment}function me(n,e){if(n){for(var t=Object.create(null),o=ln?Reflect.ownKeys(n):Object.keys(n),r=0;r<o.length;r++){var a=o[r];if("__ob__"!==a){for(var i=n[a].from,s=e;s;){if(s._provided&&x(s._provided,i)){t[a]=s._provided[i];break}s=s.$parent}if(!s)if("default"in n[a]){var l=n[a].default;t[a]="function"==typeof l?l.call(e):l}else 0}}return t}}function ge(n,e){if(!n||!n.length)return{};for(var t={},o=0,r=n.length;o<r;o++){var a=n[o],i=a.data;if(i&&i.attrs&&i.attrs.slot&&delete i.attrs.slot,a.context!==e&&a.fnContext!==e||!i||null==i.slot)(t.default||(t.default=[])).push(a);else{var s=i.slot,l=t[s]||(t[s]=[]);"template"===a.tag?l.push.apply(l,a.children||[]):l.push(a)}}for(var c in t)t[c].every(he)&&delete t[c];return t}function he(n){return n.isComment&&!n.asyncFactory||" "===n.text}function fe(n){return n.isComment&&n.asyncFactory}function be(n,e,t){var r,a=Object.keys(e).length>0,i=n?!!n.$stable:!a,s=n&&n.$key;if(n){if(n._normalized)return n._normalized;if(i&&t&&t!==o&&s===t.$key&&!a&&!t.$hasNormal)return t;for(var l in r={},n)n[l]&&"$"!==l[0]&&(r[l]=ve(e,l,n[l]))}else r={};for(var c in e)c in r||(r[c]=ye(e,c));return n&&Object.isExtensible(n)&&(n._normalized=r),q(r,"$stable",i),q(r,"$key",s),q(r,"$hasNormal",a),r}function ve(n,e,t){var o=function(){var n=arguments.length?t.apply(null,arguments):t({}),e=(n=n&&"object"==typeof n&&!Array.isArray(n)?[n]:ue(n))&&n[0];return n&&(!e||1===n.length&&e.isComment&&!fe(e))?void 0:n};return t.proxy&&Object.defineProperty(n,e,{get:o,enumerable:!0,configurable:!0}),o}function ye(n,e){return function(){return n[e]}}function xe(n,e){var t,o,r,i,s;if(Array.isArray(n)||"string"==typeof n)for(t=new Array(n.length),o=0,r=n.length;o<r;o++)t[o]=e(n[o],o);else if("number"==typeof n)for(t=new Array(n),o=0;o<n;o++)t[o]=e(o+1,o);else if(l(n))if(ln&&n[Symbol.iterator]){t=[];for(var c=n[Symbol.iterator](),d=c.next();!d.done;)t.push(e(d.value,t.length)),d=c.next()}else for(i=Object.keys(n),t=new Array(i.length),o=0,r=i.length;o<r;o++)s=i[o],t[o]=e(n[s],s,o);return a(t)||(t=[]),t._isVList=!0,t}function ke(n,e,t,o){var r,a=this.$scopedSlots[n];a?(t=t||{},o&&(t=C(C({},o),t)),r=a(t)||("function"==typeof e?e():e)):r=this.$slots[n]||("function"==typeof e?e():e);var i=t&&t.slot;return i?this.$createElement("template",{slot:i},r):r}function we(n){return Ln(this.$options,"filters",n)||z}function Ee(n,e){return Array.isArray(n)?-1===n.indexOf(e):n!==e}function Te(n,e,t,o,r){var a=$.keyCodes[e]||t;return r&&o&&!$.keyCodes[e]?Ee(r,o):a?Ee(a,n):o?j(o)!==e:void 0===n}function _e(n,e,t,o,r){if(t)if(l(t)){var a;Array.isArray(t)&&(t=I(t));var i=function(i){if("class"===i||"style"===i||b(i))a=n;else{var s=n.attrs&&n.attrs.type;a=o||$.mustUseProp(e,s,i)?n.domProps||(n.domProps={}):n.attrs||(n.attrs={})}var l=E(i),c=j(i);l in a||c in a||(a[i]=t[i],r&&((n.on||(n.on={}))["update:"+i]=function(n){t[i]=n}))};for(var s in t)i(s)}else;return n}function je(n,e){var t=this._staticTrees||(this._staticTrees=[]),o=t[n];return o&&!e||Ae(o=t[n]=this.$options.staticRenderFns[n].call(this._renderProxy,null,this),"__static__"+n,!1),o}function Se(n,e,t){return Ae(n,"__once__"+e+(t?"_"+t:""),!0),n}function Ae(n,e,t){if(Array.isArray(n))for(var o=0;o<n.length;o++)n[o]&&"string"!=typeof n[o]&&Ce(n[o],e+"_"+o,t);else Ce(n,e,t)}function Ce(n,e,t){n.isStatic=!0,n.key=e,n.isOnce=t}function Ie(n,e){if(e)if(d(e)){var t=n.on=n.on?C({},n.on):{};for(var o in e){var r=t[o],a=e[o];t[o]=r?[].concat(r,a):a}}else;return n}function De(n,e,t,o){e=e||{$stable:!t};for(var r=0;r<n.length;r++){var a=n[r];Array.isArray(a)?De(a,e,t):a&&(a.proxy&&(a.fn.proxy=!0),e[a.key]=a.fn)}return o&&(e.$key=o),e}function Pe(n,e){for(var t=0;t<e.length;t+=2){var o=e[t];"string"==typeof o&&o&&(n[e[t]]=e[t+1])}return n}function ze(n,e){return"string"==typeof n?e+n:n}function Re(n){n._o=Se,n._n=h,n._s=g,n._l=xe,n._t=ke,n._q=R,n._i=O,n._m=je,n._f=we,n._k=Te,n._b=_e,n._v=vn,n._e=bn,n._u=De,n._g=Ie,n._d=Pe,n._p=ze}function Oe(n,e,t,r,a){var s,l=this,c=a.options;x(r,"_uid")?(s=Object.create(r))._original=r:(s=r,r=r._original);var d=i(c._compiled),u=!d;this.data=n,this.props=e,this.children=t,this.parent=r,this.listeners=n.on||o,this.injections=me(c.inject,r),this.slots=function(){return l.$slots||be(n.scopedSlots,l.$slots=ge(t,r)),l.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return be(n.scopedSlots,this.slots())}}),d&&(this.$options=c,this.$slots=this.slots(),this.$scopedSlots=be(n.scopedSlots,this.$slots)),c._scopeId?this._c=function(n,e,t,o){var a=Fe(s,n,e,t,o,u);return a&&!Array.isArray(a)&&(a.fnScopeId=c._scopeId,a.fnContext=r),a}:this._c=function(n,e,t,o){return Fe(s,n,e,t,o,u)}}function Me(n,e,t,o,r){var a=yn(n);return a.fnContext=t,a.fnOptions=o,e.slot&&((a.data||(a.data={})).slot=e.slot),a}function Be(n,e){for(var t in e)n[E(t)]=e[t]}Re(Oe.prototype);var Le={init:function(n,e){if(n.componentInstance&&!n.componentInstance._isDestroyed&&n.data.keepAlive){var t=n;Le.prepatch(t,t)}else{(n.componentInstance=function(n,e){var t={_isComponent:!0,_parentVnode:n,parent:e},o=n.data.inlineTemplate;a(o)&&(t.render=o.render,t.staticRenderFns=o.staticRenderFns);return new n.componentOptions.Ctor(t)}(n,Qe)).$mount(e?n.elm:void 0,e)}},prepatch:function(n,e){var t=e.componentOptions;!function(n,e,t,r,a){0;var i=r.data.scopedSlots,s=n.$scopedSlots,l=!!(i&&!i.$stable||s!==o&&!s.$stable||i&&n.$scopedSlots.$key!==i.$key||!i&&n.$scopedSlots.$key),c=!!(a||n.$options._renderChildren||l);n.$options._parentVnode=r,n.$vnode=r,n._vnode&&(n._vnode.parent=r);if(n.$options._renderChildren=a,n.$attrs=r.data.attrs||o,n.$listeners=t||o,e&&n.$options.props){Tn(!1);for(var d=n._props,u=n.$options._propKeys||[],p=0;p<u.length;p++){var m=u[p],g=n.$options.props;d[m]=$n(m,g,e,n)}Tn(!0),n.$options.propsData=e}t=t||o;var h=n.$options._parentListeners;n.$options._parentListeners=t,Je(n,t,h),c&&(n.$slots=ge(a,r.context),n.$forceUpdate());0}(e.componentInstance=n.componentInstance,t.propsData,t.listeners,e,t.children)},insert:function(n){var e,t=n.context,o=n.componentInstance;o._isMounted||(o._isMounted=!0,et(o,"mounted")),n.data.keepAlive&&(t._isMounted?((e=o)._inactive=!1,ot.push(e)):nt(o,!0))},destroy:function(n){var e=n.componentInstance;e._isDestroyed||(n.data.keepAlive?function n(e,t){if(t&&(e._directInactive=!0,Xe(e)))return;if(!e._inactive){e._inactive=!0;for(var o=0;o<e.$children.length;o++)n(e.$children[o]);et(e,"deactivated")}}(e,!0):e.$destroy())}},$e=Object.keys(Le);function Ne(n,e,t,s,c){if(!r(n)){var d=t.$options._base;if(l(n)&&(n=d.extend(n)),"function"==typeof n){var u;if(r(n.cid)&&void 0===(n=function(n,e){if(i(n.error)&&a(n.errorComp))return n.errorComp;if(a(n.resolved))return n.resolved;var t=He;t&&a(n.owners)&&-1===n.owners.indexOf(t)&&n.owners.push(t);if(i(n.loading)&&a(n.loadingComp))return n.loadingComp;if(t&&!a(n.owners)){var o=n.owners=[t],s=!0,c=null,d=null;t.$on("hook:destroyed",(function(){return v(o,t)}));var u=function(n){for(var e=0,t=o.length;e<t;e++)o[e].$forceUpdate();n&&(o.length=0,null!==c&&(clearTimeout(c),c=null),null!==d&&(clearTimeout(d),d=null))},p=M((function(t){n.resolved=Ve(t,e),s?o.length=0:u(!0)})),g=M((function(e){a(n.errorComp)&&(n.error=!0,u(!0))})),h=n(p,g);return l(h)&&(m(h)?r(n.resolved)&&h.then(p,g):m(h.component)&&(h.component.then(p,g),a(h.error)&&(n.errorComp=Ve(h.error,e)),a(h.loading)&&(n.loadingComp=Ve(h.loading,e),0===h.delay?n.loading=!0:c=setTimeout((function(){c=null,r(n.resolved)&&r(n.error)&&(n.loading=!0,u(!1))}),h.delay||200)),a(h.timeout)&&(d=setTimeout((function(){d=null,r(n.resolved)&&g(null)}),h.timeout)))),s=!1,n.loading?n.loadingComp:n.resolved}}(u=n,d)))return function(n,e,t,o,r){var a=bn();return a.asyncFactory=n,a.asyncMeta={data:e,context:t,children:o,tag:r},a}(u,e,t,s,c);e=e||{},Et(n),a(e.model)&&function(n,e){var t=n.model&&n.model.prop||"value",o=n.model&&n.model.event||"input";(e.attrs||(e.attrs={}))[t]=e.model.value;var r=e.on||(e.on={}),i=r[o],s=e.model.callback;a(i)?(Array.isArray(i)?-1===i.indexOf(s):i!==s)&&(r[o]=[s].concat(i)):r[o]=s}(n.options,e);var p=function(n,e,t){var o=e.options.props;if(!r(o)){var i={},s=n.attrs,l=n.props;if(a(s)||a(l))for(var c in o){var d=j(c);de(i,l,c,d,!0)||de(i,s,c,d,!1)}return i}}(e,n);if(i(n.options.functional))return function(n,e,t,r,i){var s=n.options,l={},c=s.props;if(a(c))for(var d in c)l[d]=$n(d,c,e||o);else a(t.attrs)&&Be(l,t.attrs),a(t.props)&&Be(l,t.props);var u=new Oe(t,l,i,r,n),p=s.render.call(null,u._c,u);if(p instanceof hn)return Me(p,t,u.parent,s,u);if(Array.isArray(p)){for(var m=ue(p)||[],g=new Array(m.length),h=0;h<m.length;h++)g[h]=Me(m[h],t,u.parent,s,u);return g}}(n,p,e,t,s);var g=e.on;if(e.on=e.nativeOn,i(n.options.abstract)){var h=e.slot;e={},h&&(e.slot=h)}!function(n){for(var e=n.hook||(n.hook={}),t=0;t<$e.length;t++){var o=$e[t],r=e[o],a=Le[o];r===a||r&&r._merged||(e[o]=r?qe(a,r):a)}}(e);var f=n.options.name||c;return new hn("vue-component-"+n.cid+(f?"-"+f:""),e,void 0,void 0,void 0,t,{Ctor:n,propsData:p,listeners:g,tag:c,children:s},u)}}}function qe(n,e){var t=function(t,o){n(t,o),e(t,o)};return t._merged=!0,t}function Fe(n,e,t,o,c,d){return(Array.isArray(t)||s(t))&&(c=o,o=t,t=void 0),i(d)&&(c=2),function(n,e,t,o,s){if(a(t)&&a(t.__ob__))return bn();a(t)&&a(t.is)&&(e=t.is);if(!e)return bn();0;Array.isArray(o)&&"function"==typeof o[0]&&((t=t||{}).scopedSlots={default:o[0]},o.length=0);2===s?o=ue(o):1===s&&(o=function(n){for(var e=0;e<n.length;e++)if(Array.isArray(n[e]))return Array.prototype.concat.apply([],n);return n}(o));var c,d;if("string"==typeof e){var u;d=n.$vnode&&n.$vnode.ns||$.getTagNamespace(e),c=$.isReservedTag(e)?new hn($.parsePlatformTagName(e),t,o,void 0,void 0,n):t&&t.pre||!a(u=Ln(n.$options,"components",e))?new hn(e,t,o,void 0,void 0,n):Ne(u,t,n,o,e)}else c=Ne(e,t,n,o);return Array.isArray(c)?c:a(c)?(a(d)&&function n(e,t,o){e.ns=t,"foreignObject"===e.tag&&(t=void 0,o=!0);if(a(e.children))for(var s=0,l=e.children.length;s<l;s++){var c=e.children[s];a(c.tag)&&(r(c.ns)||i(o)&&"svg"!==c.tag)&&n(c,t,o)}}(c,d),a(t)&&function(n){l(n.style)&&ae(n.style);l(n.class)&&ae(n.class)}(t),c):bn()}(n,e,t,o,c)}var Ge,He=null;function Ve(n,e){return(n.__esModule||ln&&"Module"===n[Symbol.toStringTag])&&(n=n.default),l(n)?e.extend(n):n}function Ue(n){if(Array.isArray(n))for(var e=0;e<n.length;e++){var t=n[e];if(a(t)&&(a(t.componentOptions)||fe(t)))return t}}function We(n,e){Ge.$on(n,e)}function Ye(n,e){Ge.$off(n,e)}function Ke(n,e){var t=Ge;return function o(){var r=e.apply(null,arguments);null!==r&&t.$off(n,o)}}function Je(n,e,t){Ge=n,le(e,t||{},We,Ye,Ke,n),Ge=void 0}var Qe=null;function Ze(n){var e=Qe;return Qe=n,function(){Qe=e}}function Xe(n){for(;n&&(n=n.$parent);)if(n._inactive)return!0;return!1}function nt(n,e){if(e){if(n._directInactive=!1,Xe(n))return}else if(n._directInactive)return;if(n._inactive||null===n._inactive){n._inactive=!1;for(var t=0;t<n.$children.length;t++)nt(n.$children[t]);et(n,"activated")}}function et(n,e){mn();var t=n.$options[e],o=e+" hook";if(t)for(var r=0,a=t.length;r<a;r++)Vn(t[r],n,null,n,o);n._hasHookEvent&&n.$emit("hook:"+e),gn()}var tt=[],ot=[],rt={},at=!1,it=!1,st=0;var lt=0,ct=Date.now;if(V&&!K){var dt=window.performance;dt&&"function"==typeof dt.now&&ct()>document.createEvent("Event").timeStamp&&(ct=function(){return dt.now()})}function ut(){var n,e;for(lt=ct(),it=!0,tt.sort((function(n,e){return n.id-e.id})),st=0;st<tt.length;st++)(n=tt[st]).before&&n.before(),e=n.id,rt[e]=null,n.run();var t=ot.slice(),o=tt.slice();st=tt.length=ot.length=0,rt={},at=it=!1,function(n){for(var e=0;e<n.length;e++)n[e]._inactive=!0,nt(n[e],!0)}(t),function(n){var e=n.length;for(;e--;){var t=n[e],o=t.vm;o._watcher===t&&o._isMounted&&!o._isDestroyed&&et(o,"updated")}}(o),rn&&$.devtools&&rn.emit("flush")}var pt=0,mt=function(n,e,t,o,r){this.vm=n,r&&(n._watcher=this),n._watchers.push(this),o?(this.deep=!!o.deep,this.user=!!o.user,this.lazy=!!o.lazy,this.sync=!!o.sync,this.before=o.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=t,this.id=++pt,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new sn,this.newDepIds=new sn,this.expression="","function"==typeof e?this.getter=e:(this.getter=function(n){if(!F.test(n)){var e=n.split(".");return function(n){for(var t=0;t<e.length;t++){if(!n)return;n=n[e[t]]}return n}}}(e),this.getter||(this.getter=D)),this.value=this.lazy?void 0:this.get()};mt.prototype.get=function(){var n;mn(this);var e=this.vm;try{n=this.getter.call(e,e)}catch(n){if(!this.user)throw n;Hn(n,e,'getter for watcher "'+this.expression+'"')}finally{this.deep&&ae(n),gn(),this.cleanupDeps()}return n},mt.prototype.addDep=function(n){var e=n.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(n),this.depIds.has(e)||n.addSub(this))},mt.prototype.cleanupDeps=function(){for(var n=this.deps.length;n--;){var e=this.deps[n];this.newDepIds.has(e.id)||e.removeSub(this)}var t=this.depIds;this.depIds=this.newDepIds,this.newDepIds=t,this.newDepIds.clear(),t=this.deps,this.deps=this.newDeps,this.newDeps=t,this.newDeps.length=0},mt.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(n){var e=n.id;if(null==rt[e]){if(rt[e]=!0,it){for(var t=tt.length-1;t>st&&tt[t].id>n.id;)t--;tt.splice(t+1,0,n)}else tt.push(n);at||(at=!0,oe(ut))}}(this)},mt.prototype.run=function(){if(this.active){var n=this.get();if(n!==this.value||l(n)||this.deep){var e=this.value;if(this.value=n,this.user){var t='callback for watcher "'+this.expression+'"';Vn(this.cb,this.vm,[n,e],this.vm,t)}else this.cb.call(this.vm,n,e)}}},mt.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},mt.prototype.depend=function(){for(var n=this.deps.length;n--;)this.deps[n].depend()},mt.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||v(this.vm._watchers,this);for(var n=this.deps.length;n--;)this.deps[n].removeSub(this);this.active=!1}};var gt={enumerable:!0,configurable:!0,get:D,set:D};function ht(n,e,t){gt.get=function(){return this[e][t]},gt.set=function(n){this[e][t]=n},Object.defineProperty(n,t,gt)}function ft(n){n._watchers=[];var e=n.$options;e.props&&function(n,e){var t=n.$options.propsData||{},o=n._props={},r=n.$options._propKeys=[];n.$parent&&Tn(!1);var a=function(a){r.push(a);var i=$n(a,e,t,n);Sn(o,a,i),a in n||ht(n,"_props",a)};for(var i in e)a(i);Tn(!0)}(n,e.props),e.methods&&function(n,e){n.$options.props;for(var t in e)n[t]="function"!=typeof e[t]?D:S(e[t],n)}(n,e.methods),e.data?function(n){var e=n.$options.data;d(e=n._data="function"==typeof e?function(n,e){mn();try{return n.call(e,e)}catch(n){return Hn(n,e,"data()"),{}}finally{gn()}}(e,n):e||{})||(e={});var t=Object.keys(e),o=n.$options.props,r=(n.$options.methods,t.length);for(;r--;){var a=t[r];0,o&&x(o,a)||(i=void 0,36!==(i=(a+"").charCodeAt(0))&&95!==i&&ht(n,"_data",a))}var i;jn(e,!0)}(n):jn(n._data={},!0),e.computed&&function(n,e){var t=n._computedWatchers=Object.create(null),o=on();for(var r in e){var a=e[r],i="function"==typeof a?a:a.get;0,o||(t[r]=new mt(n,i||D,D,bt)),r in n||vt(n,r,a)}}(n,e.computed),e.watch&&e.watch!==nn&&function(n,e){for(var t in e){var o=e[t];if(Array.isArray(o))for(var r=0;r<o.length;r++)kt(n,t,o[r]);else kt(n,t,o)}}(n,e.watch)}var bt={lazy:!0};function vt(n,e,t){var o=!on();"function"==typeof t?(gt.get=o?yt(e):xt(t),gt.set=D):(gt.get=t.get?o&&!1!==t.cache?yt(e):xt(t.get):D,gt.set=t.set||D),Object.defineProperty(n,e,gt)}function yt(n){return function(){var e=this._computedWatchers&&this._computedWatchers[n];if(e)return e.dirty&&e.evaluate(),un.target&&e.depend(),e.value}}function xt(n){return function(){return n.call(this,this)}}function kt(n,e,t,o){return d(t)&&(o=t,t=t.handler),"string"==typeof t&&(t=n[t]),n.$watch(e,t,o)}var wt=0;function Et(n){var e=n.options;if(n.super){var t=Et(n.super);if(t!==n.superOptions){n.superOptions=t;var o=function(n){var e,t=n.options,o=n.sealedOptions;for(var r in t)t[r]!==o[r]&&(e||(e={}),e[r]=t[r]);return e}(n);o&&C(n.extendOptions,o),(e=n.options=Bn(t,n.extendOptions)).name&&(e.components[e.name]=n)}}return e}function Tt(n){this._init(n)}function _t(n){n.cid=0;var e=1;n.extend=function(n){n=n||{};var t=this,o=t.cid,r=n._Ctor||(n._Ctor={});if(r[o])return r[o];var a=n.name||t.options.name;var i=function(n){this._init(n)};return(i.prototype=Object.create(t.prototype)).constructor=i,i.cid=e++,i.options=Bn(t.options,n),i.super=t,i.options.props&&function(n){var e=n.options.props;for(var t in e)ht(n.prototype,"_props",t)}(i),i.options.computed&&function(n){var e=n.options.computed;for(var t in e)vt(n.prototype,t,e[t])}(i),i.extend=t.extend,i.mixin=t.mixin,i.use=t.use,B.forEach((function(n){i[n]=t[n]})),a&&(i.options.components[a]=i),i.superOptions=t.options,i.extendOptions=n,i.sealedOptions=C({},i.options),r[o]=i,i}}function jt(n){return n&&(n.Ctor.options.name||n.tag)}function St(n,e){return Array.isArray(n)?n.indexOf(e)>-1:"string"==typeof n?n.split(",").indexOf(e)>-1:!!u(n)&&n.test(e)}function At(n,e){var t=n.cache,o=n.keys,r=n._vnode;for(var a in t){var i=t[a];if(i){var s=i.name;s&&!e(s)&&Ct(t,a,o,r)}}}function Ct(n,e,t,o){var r=n[e];!r||o&&r.tag===o.tag||r.componentInstance.$destroy(),n[e]=null,v(t,e)}!function(n){n.prototype._init=function(n){var e=this;e._uid=wt++,e._isVue=!0,n&&n._isComponent?function(n,e){var t=n.$options=Object.create(n.constructor.options),o=e._parentVnode;t.parent=e.parent,t._parentVnode=o;var r=o.componentOptions;t.propsData=r.propsData,t._parentListeners=r.listeners,t._renderChildren=r.children,t._componentTag=r.tag,e.render&&(t.render=e.render,t.staticRenderFns=e.staticRenderFns)}(e,n):e.$options=Bn(Et(e.constructor),n||{},e),e._renderProxy=e,e._self=e,function(n){var e=n.$options,t=e.parent;if(t&&!e.abstract){for(;t.$options.abstract&&t.$parent;)t=t.$parent;t.$children.push(n)}n.$parent=t,n.$root=t?t.$root:n,n.$children=[],n.$refs={},n._watcher=null,n._inactive=null,n._directInactive=!1,n._isMounted=!1,n._isDestroyed=!1,n._isBeingDestroyed=!1}(e),function(n){n._events=Object.create(null),n._hasHookEvent=!1;var e=n.$options._parentListeners;e&&Je(n,e)}(e),function(n){n._vnode=null,n._staticTrees=null;var e=n.$options,t=n.$vnode=e._parentVnode,r=t&&t.context;n.$slots=ge(e._renderChildren,r),n.$scopedSlots=o,n._c=function(e,t,o,r){return Fe(n,e,t,o,r,!1)},n.$createElement=function(e,t,o,r){return Fe(n,e,t,o,r,!0)};var a=t&&t.data;Sn(n,"$attrs",a&&a.attrs||o,null,!0),Sn(n,"$listeners",e._parentListeners||o,null,!0)}(e),et(e,"beforeCreate"),function(n){var e=me(n.$options.inject,n);e&&(Tn(!1),Object.keys(e).forEach((function(t){Sn(n,t,e[t])})),Tn(!0))}(e),ft(e),function(n){var e=n.$options.provide;e&&(n._provided="function"==typeof e?e.call(n):e)}(e),et(e,"created"),e.$options.el&&e.$mount(e.$options.el)}}(Tt),function(n){var e={get:function(){return this._data}},t={get:function(){return this._props}};Object.defineProperty(n.prototype,"$data",e),Object.defineProperty(n.prototype,"$props",t),n.prototype.$set=An,n.prototype.$delete=Cn,n.prototype.$watch=function(n,e,t){if(d(e))return kt(this,n,e,t);(t=t||{}).user=!0;var o=new mt(this,n,e,t);if(t.immediate){var r='callback for immediate watcher "'+o.expression+'"';mn(),Vn(e,this,[o.value],this,r),gn()}return function(){o.teardown()}}}(Tt),function(n){var e=/^hook:/;n.prototype.$on=function(n,t){var o=this;if(Array.isArray(n))for(var r=0,a=n.length;r<a;r++)o.$on(n[r],t);else(o._events[n]||(o._events[n]=[])).push(t),e.test(n)&&(o._hasHookEvent=!0);return o},n.prototype.$once=function(n,e){var t=this;function o(){t.$off(n,o),e.apply(t,arguments)}return o.fn=e,t.$on(n,o),t},n.prototype.$off=function(n,e){var t=this;if(!arguments.length)return t._events=Object.create(null),t;if(Array.isArray(n)){for(var o=0,r=n.length;o<r;o++)t.$off(n[o],e);return t}var a,i=t._events[n];if(!i)return t;if(!e)return t._events[n]=null,t;for(var s=i.length;s--;)if((a=i[s])===e||a.fn===e){i.splice(s,1);break}return t},n.prototype.$emit=function(n){var e=this,t=e._events[n];if(t){t=t.length>1?A(t):t;for(var o=A(arguments,1),r='event handler for "'+n+'"',a=0,i=t.length;a<i;a++)Vn(t[a],e,o,e,r)}return e}}(Tt),function(n){n.prototype._update=function(n,e){var t=this,o=t.$el,r=t._vnode,a=Ze(t);t._vnode=n,t.$el=r?t.__patch__(r,n):t.__patch__(t.$el,n,e,!1),a(),o&&(o.__vue__=null),t.$el&&(t.$el.__vue__=t),t.$vnode&&t.$parent&&t.$vnode===t.$parent._vnode&&(t.$parent.$el=t.$el)},n.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},n.prototype.$destroy=function(){var n=this;if(!n._isBeingDestroyed){et(n,"beforeDestroy"),n._isBeingDestroyed=!0;var e=n.$parent;!e||e._isBeingDestroyed||n.$options.abstract||v(e.$children,n),n._watcher&&n._watcher.teardown();for(var t=n._watchers.length;t--;)n._watchers[t].teardown();n._data.__ob__&&n._data.__ob__.vmCount--,n._isDestroyed=!0,n.__patch__(n._vnode,null),et(n,"destroyed"),n.$off(),n.$el&&(n.$el.__vue__=null),n.$vnode&&(n.$vnode.parent=null)}}}(Tt),function(n){Re(n.prototype),n.prototype.$nextTick=function(n){return oe(n,this)},n.prototype._render=function(){var n,e=this,t=e.$options,o=t.render,r=t._parentVnode;r&&(e.$scopedSlots=be(r.data.scopedSlots,e.$slots,e.$scopedSlots)),e.$vnode=r;try{He=e,n=o.call(e._renderProxy,e.$createElement)}catch(t){Hn(t,e,"render"),n=e._vnode}finally{He=null}return Array.isArray(n)&&1===n.length&&(n=n[0]),n instanceof hn||(n=bn()),n.parent=r,n}}(Tt);var It=[String,RegExp,Array],Dt={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:It,exclude:It,max:[String,Number]},methods:{cacheVNode:function(){var n=this.cache,e=this.keys,t=this.vnodeToCache,o=this.keyToCache;if(t){var r=t.tag,a=t.componentInstance,i=t.componentOptions;n[o]={name:jt(i),tag:r,componentInstance:a},e.push(o),this.max&&e.length>parseInt(this.max)&&Ct(n,e[0],e,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var n in this.cache)Ct(this.cache,n,this.keys)},mounted:function(){var n=this;this.cacheVNode(),this.$watch("include",(function(e){At(n,(function(n){return St(e,n)}))})),this.$watch("exclude",(function(e){At(n,(function(n){return!St(e,n)}))}))},updated:function(){this.cacheVNode()},render:function(){var n=this.$slots.default,e=Ue(n),t=e&&e.componentOptions;if(t){var o=jt(t),r=this.include,a=this.exclude;if(r&&(!o||!St(r,o))||a&&o&&St(a,o))return e;var i=this.cache,s=this.keys,l=null==e.key?t.Ctor.cid+(t.tag?"::"+t.tag:""):e.key;i[l]?(e.componentInstance=i[l].componentInstance,v(s,l),s.push(l)):(this.vnodeToCache=e,this.keyToCache=l),e.data.keepAlive=!0}return e||n&&n[0]}}};!function(n){var e={get:function(){return $}};Object.defineProperty(n,"config",e),n.util={warn:cn,extend:C,mergeOptions:Bn,defineReactive:Sn},n.set=An,n.delete=Cn,n.nextTick=oe,n.observable=function(n){return jn(n),n},n.options=Object.create(null),B.forEach((function(e){n.options[e+"s"]=Object.create(null)})),n.options._base=n,C(n.options.components,Dt),function(n){n.use=function(n){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(n)>-1)return this;var t=A(arguments,1);return t.unshift(this),"function"==typeof n.install?n.install.apply(n,t):"function"==typeof n&&n.apply(null,t),e.push(n),this}}(n),function(n){n.mixin=function(n){return this.options=Bn(this.options,n),this}}(n),_t(n),function(n){B.forEach((function(e){n[e]=function(n,t){return t?("component"===e&&d(t)&&(t.name=t.name||n,t=this.options._base.extend(t)),"directive"===e&&"function"==typeof t&&(t={bind:t,update:t}),this.options[e+"s"][n]=t,t):this.options[e+"s"][n]}}))}(n)}(Tt),Object.defineProperty(Tt.prototype,"$isServer",{get:on}),Object.defineProperty(Tt.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Tt,"FunctionalRenderContext",{value:Oe}),Tt.version="2.6.14";var Pt=f("style,class"),zt=f("input,textarea,option,select,progress"),Rt=f("contenteditable,draggable,spellcheck"),Ot=f("events,caret,typing,plaintext-only"),Mt=f("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),Bt="http://www.w3.org/1999/xlink",Lt=function(n){return":"===n.charAt(5)&&"xlink"===n.slice(0,5)},$t=function(n){return Lt(n)?n.slice(6,n.length):""},Nt=function(n){return null==n||!1===n};function qt(n){for(var e=n.data,t=n,o=n;a(o.componentInstance);)(o=o.componentInstance._vnode)&&o.data&&(e=Ft(o.data,e));for(;a(t=t.parent);)t&&t.data&&(e=Ft(e,t.data));return function(n,e){if(a(n)||a(e))return Gt(n,Ht(e));return""}(e.staticClass,e.class)}function Ft(n,e){return{staticClass:Gt(n.staticClass,e.staticClass),class:a(n.class)?[n.class,e.class]:e.class}}function Gt(n,e){return n?e?n+" "+e:n:e||""}function Ht(n){return Array.isArray(n)?function(n){for(var e,t="",o=0,r=n.length;o<r;o++)a(e=Ht(n[o]))&&""!==e&&(t&&(t+=" "),t+=e);return t}(n):l(n)?function(n){var e="";for(var t in n)n[t]&&(e&&(e+=" "),e+=t);return e}(n):"string"==typeof n?n:""}var Vt={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Ut=f("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Wt=f("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Yt=function(n){return Ut(n)||Wt(n)};var Kt=Object.create(null);var Jt=f("text,number,password,search,email,tel,url");var Qt=Object.freeze({createElement:function(n,e){var t=document.createElement(n);return"select"!==n||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&t.setAttribute("multiple","multiple"),t},createElementNS:function(n,e){return document.createElementNS(Vt[n],e)},createTextNode:function(n){return document.createTextNode(n)},createComment:function(n){return document.createComment(n)},insertBefore:function(n,e,t){n.insertBefore(e,t)},removeChild:function(n,e){n.removeChild(e)},appendChild:function(n,e){n.appendChild(e)},parentNode:function(n){return n.parentNode},nextSibling:function(n){return n.nextSibling},tagName:function(n){return n.tagName},setTextContent:function(n,e){n.textContent=e},setStyleScope:function(n,e){n.setAttribute(e,"")}}),Zt={create:function(n,e){Xt(e)},update:function(n,e){n.data.ref!==e.data.ref&&(Xt(n,!0),Xt(e))},destroy:function(n){Xt(n,!0)}};function Xt(n,e){var t=n.data.ref;if(a(t)){var o=n.context,r=n.componentInstance||n.elm,i=o.$refs;e?Array.isArray(i[t])?v(i[t],r):i[t]===r&&(i[t]=void 0):n.data.refInFor?Array.isArray(i[t])?i[t].indexOf(r)<0&&i[t].push(r):i[t]=[r]:i[t]=r}}var no=new hn("",{},[]),eo=["create","activate","update","remove","destroy"];function to(n,e){return n.key===e.key&&n.asyncFactory===e.asyncFactory&&(n.tag===e.tag&&n.isComment===e.isComment&&a(n.data)===a(e.data)&&function(n,e){if("input"!==n.tag)return!0;var t,o=a(t=n.data)&&a(t=t.attrs)&&t.type,r=a(t=e.data)&&a(t=t.attrs)&&t.type;return o===r||Jt(o)&&Jt(r)}(n,e)||i(n.isAsyncPlaceholder)&&r(e.asyncFactory.error))}function oo(n,e,t){var o,r,i={};for(o=e;o<=t;++o)a(r=n[o].key)&&(i[r]=o);return i}var ro={create:ao,update:ao,destroy:function(n){ao(n,no)}};function ao(n,e){(n.data.directives||e.data.directives)&&function(n,e){var t,o,r,a=n===no,i=e===no,s=so(n.data.directives,n.context),l=so(e.data.directives,e.context),c=[],d=[];for(t in l)o=s[t],r=l[t],o?(r.oldValue=o.value,r.oldArg=o.arg,co(r,"update",e,n),r.def&&r.def.componentUpdated&&d.push(r)):(co(r,"bind",e,n),r.def&&r.def.inserted&&c.push(r));if(c.length){var u=function(){for(var t=0;t<c.length;t++)co(c[t],"inserted",e,n)};a?ce(e,"insert",u):u()}d.length&&ce(e,"postpatch",(function(){for(var t=0;t<d.length;t++)co(d[t],"componentUpdated",e,n)}));if(!a)for(t in s)l[t]||co(s[t],"unbind",n,n,i)}(n,e)}var io=Object.create(null);function so(n,e){var t,o,r=Object.create(null);if(!n)return r;for(t=0;t<n.length;t++)(o=n[t]).modifiers||(o.modifiers=io),r[lo(o)]=o,o.def=Ln(e.$options,"directives",o.name);return r}function lo(n){return n.rawName||n.name+"."+Object.keys(n.modifiers||{}).join(".")}function co(n,e,t,o,r){var a=n.def&&n.def[e];if(a)try{a(t.elm,n,t,o,r)}catch(o){Hn(o,t.context,"directive "+n.name+" "+e+" hook")}}var uo=[Zt,ro];function po(n,e){var t=e.componentOptions;if(!(a(t)&&!1===t.Ctor.options.inheritAttrs||r(n.data.attrs)&&r(e.data.attrs))){var o,i,s=e.elm,l=n.data.attrs||{},c=e.data.attrs||{};for(o in a(c.__ob__)&&(c=e.data.attrs=C({},c)),c)i=c[o],l[o]!==i&&mo(s,o,i,e.data.pre);for(o in(K||Q)&&c.value!==l.value&&mo(s,"value",c.value),l)r(c[o])&&(Lt(o)?s.removeAttributeNS(Bt,$t(o)):Rt(o)||s.removeAttribute(o))}}function mo(n,e,t,o){o||n.tagName.indexOf("-")>-1?go(n,e,t):Mt(e)?Nt(t)?n.removeAttribute(e):(t="allowfullscreen"===e&&"EMBED"===n.tagName?"true":e,n.setAttribute(e,t)):Rt(e)?n.setAttribute(e,function(n,e){return Nt(e)||"false"===e?"false":"contenteditable"===n&&Ot(e)?e:"true"}(e,t)):Lt(e)?Nt(t)?n.removeAttributeNS(Bt,$t(e)):n.setAttributeNS(Bt,e,t):go(n,e,t)}function go(n,e,t){if(Nt(t))n.removeAttribute(e);else{if(K&&!J&&"TEXTAREA"===n.tagName&&"placeholder"===e&&""!==t&&!n.__ieph){var o=function(e){e.stopImmediatePropagation(),n.removeEventListener("input",o)};n.addEventListener("input",o),n.__ieph=!0}n.setAttribute(e,t)}}var ho={create:po,update:po};function fo(n,e){var t=e.elm,o=e.data,i=n.data;if(!(r(o.staticClass)&&r(o.class)&&(r(i)||r(i.staticClass)&&r(i.class)))){var s=qt(e),l=t._transitionClasses;a(l)&&(s=Gt(s,Ht(l))),s!==t._prevClass&&(t.setAttribute("class",s),t._prevClass=s)}}var bo,vo={create:fo,update:fo};function yo(n,e,t){var o=bo;return function r(){var a=e.apply(null,arguments);null!==a&&wo(n,r,t,o)}}var xo=Kn&&!(X&&Number(X[1])<=53);function ko(n,e,t,o){if(xo){var r=lt,a=e;e=a._wrapper=function(n){if(n.target===n.currentTarget||n.timeStamp>=r||n.timeStamp<=0||n.target.ownerDocument!==document)return a.apply(this,arguments)}}bo.addEventListener(n,e,en?{capture:t,passive:o}:t)}function wo(n,e,t,o){(o||bo).removeEventListener(n,e._wrapper||e,t)}function Eo(n,e){if(!r(n.data.on)||!r(e.data.on)){var t=e.data.on||{},o=n.data.on||{};bo=e.elm,function(n){if(a(n.__r)){var e=K?"change":"input";n[e]=[].concat(n.__r,n[e]||[]),delete n.__r}a(n.__c)&&(n.change=[].concat(n.__c,n.change||[]),delete n.__c)}(t),le(t,o,ko,wo,yo,e.context),bo=void 0}}var To,_o={create:Eo,update:Eo};function jo(n,e){if(!r(n.data.domProps)||!r(e.data.domProps)){var t,o,i=e.elm,s=n.data.domProps||{},l=e.data.domProps||{};for(t in a(l.__ob__)&&(l=e.data.domProps=C({},l)),s)t in l||(i[t]="");for(t in l){if(o=l[t],"textContent"===t||"innerHTML"===t){if(e.children&&(e.children.length=0),o===s[t])continue;1===i.childNodes.length&&i.removeChild(i.childNodes[0])}if("value"===t&&"PROGRESS"!==i.tagName){i._value=o;var c=r(o)?"":String(o);So(i,c)&&(i.value=c)}else if("innerHTML"===t&&Wt(i.tagName)&&r(i.innerHTML)){(To=To||document.createElement("div")).innerHTML="<svg>"+o+"</svg>";for(var d=To.firstChild;i.firstChild;)i.removeChild(i.firstChild);for(;d.firstChild;)i.appendChild(d.firstChild)}else if(o!==s[t])try{i[t]=o}catch(n){}}}}function So(n,e){return!n.composing&&("OPTION"===n.tagName||function(n,e){var t=!0;try{t=document.activeElement!==n}catch(n){}return t&&n.value!==e}(n,e)||function(n,e){var t=n.value,o=n._vModifiers;if(a(o)){if(o.number)return h(t)!==h(e);if(o.trim)return t.trim()!==e.trim()}return t!==e}(n,e))}var Ao={create:jo,update:jo},Co=k((function(n){var e={},t=/:(.+)/;return n.split(/;(?![^(]*\))/g).forEach((function(n){if(n){var o=n.split(t);o.length>1&&(e[o[0].trim()]=o[1].trim())}})),e}));function Io(n){var e=Do(n.style);return n.staticStyle?C(n.staticStyle,e):e}function Do(n){return Array.isArray(n)?I(n):"string"==typeof n?Co(n):n}var Po,zo=/^--/,Ro=/\s*!important$/,Oo=function(n,e,t){if(zo.test(e))n.style.setProperty(e,t);else if(Ro.test(t))n.style.setProperty(j(e),t.replace(Ro,""),"important");else{var o=Bo(e);if(Array.isArray(t))for(var r=0,a=t.length;r<a;r++)n.style[o]=t[r];else n.style[o]=t}},Mo=["Webkit","Moz","ms"],Bo=k((function(n){if(Po=Po||document.createElement("div").style,"filter"!==(n=E(n))&&n in Po)return n;for(var e=n.charAt(0).toUpperCase()+n.slice(1),t=0;t<Mo.length;t++){var o=Mo[t]+e;if(o in Po)return o}}));function Lo(n,e){var t=e.data,o=n.data;if(!(r(t.staticStyle)&&r(t.style)&&r(o.staticStyle)&&r(o.style))){var i,s,l=e.elm,c=o.staticStyle,d=o.normalizedStyle||o.style||{},u=c||d,p=Do(e.data.style)||{};e.data.normalizedStyle=a(p.__ob__)?C({},p):p;var m=function(n,e){var t,o={};if(e)for(var r=n;r.componentInstance;)(r=r.componentInstance._vnode)&&r.data&&(t=Io(r.data))&&C(o,t);(t=Io(n.data))&&C(o,t);for(var a=n;a=a.parent;)a.data&&(t=Io(a.data))&&C(o,t);return o}(e,!0);for(s in u)r(m[s])&&Oo(l,s,"");for(s in m)(i=m[s])!==u[s]&&Oo(l,s,null==i?"":i)}}var $o={create:Lo,update:Lo},No=/\s+/;function qo(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(No).forEach((function(e){return n.classList.add(e)})):n.classList.add(e);else{var t=" "+(n.getAttribute("class")||"")+" ";t.indexOf(" "+e+" ")<0&&n.setAttribute("class",(t+e).trim())}}function Fo(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(No).forEach((function(e){return n.classList.remove(e)})):n.classList.remove(e),n.classList.length||n.removeAttribute("class");else{for(var t=" "+(n.getAttribute("class")||"")+" ",o=" "+e+" ";t.indexOf(o)>=0;)t=t.replace(o," ");(t=t.trim())?n.setAttribute("class",t):n.removeAttribute("class")}}function Go(n){if(n){if("object"==typeof n){var e={};return!1!==n.css&&C(e,Ho(n.name||"v")),C(e,n),e}return"string"==typeof n?Ho(n):void 0}}var Ho=k((function(n){return{enterClass:n+"-enter",enterToClass:n+"-enter-to",enterActiveClass:n+"-enter-active",leaveClass:n+"-leave",leaveToClass:n+"-leave-to",leaveActiveClass:n+"-leave-active"}})),Vo=V&&!J,Uo="transition",Wo="transitionend",Yo="animation",Ko="animationend";Vo&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Uo="WebkitTransition",Wo="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Yo="WebkitAnimation",Ko="webkitAnimationEnd"));var Jo=V?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(n){return n()};function Qo(n){Jo((function(){Jo(n)}))}function Zo(n,e){var t=n._transitionClasses||(n._transitionClasses=[]);t.indexOf(e)<0&&(t.push(e),qo(n,e))}function Xo(n,e){n._transitionClasses&&v(n._transitionClasses,e),Fo(n,e)}function nr(n,e,t){var o=tr(n,e),r=o.type,a=o.timeout,i=o.propCount;if(!r)return t();var s="transition"===r?Wo:Ko,l=0,c=function(){n.removeEventListener(s,d),t()},d=function(e){e.target===n&&++l>=i&&c()};setTimeout((function(){l<i&&c()}),a+1),n.addEventListener(s,d)}var er=/\b(transform|all)(,|$)/;function tr(n,e){var t,o=window.getComputedStyle(n),r=(o[Uo+"Delay"]||"").split(", "),a=(o[Uo+"Duration"]||"").split(", "),i=or(r,a),s=(o[Yo+"Delay"]||"").split(", "),l=(o[Yo+"Duration"]||"").split(", "),c=or(s,l),d=0,u=0;return"transition"===e?i>0&&(t="transition",d=i,u=a.length):"animation"===e?c>0&&(t="animation",d=c,u=l.length):u=(t=(d=Math.max(i,c))>0?i>c?"transition":"animation":null)?"transition"===t?a.length:l.length:0,{type:t,timeout:d,propCount:u,hasTransform:"transition"===t&&er.test(o[Uo+"Property"])}}function or(n,e){for(;n.length<e.length;)n=n.concat(n);return Math.max.apply(null,e.map((function(e,t){return rr(e)+rr(n[t])})))}function rr(n){return 1e3*Number(n.slice(0,-1).replace(",","."))}function ar(n,e){var t=n.elm;a(t._leaveCb)&&(t._leaveCb.cancelled=!0,t._leaveCb());var o=Go(n.data.transition);if(!r(o)&&!a(t._enterCb)&&1===t.nodeType){for(var i=o.css,s=o.type,c=o.enterClass,d=o.enterToClass,u=o.enterActiveClass,p=o.appearClass,m=o.appearToClass,g=o.appearActiveClass,f=o.beforeEnter,b=o.enter,v=o.afterEnter,y=o.enterCancelled,x=o.beforeAppear,k=o.appear,w=o.afterAppear,E=o.appearCancelled,T=o.duration,_=Qe,j=Qe.$vnode;j&&j.parent;)_=j.context,j=j.parent;var S=!_._isMounted||!n.isRootInsert;if(!S||k||""===k){var A=S&&p?p:c,C=S&&g?g:u,I=S&&m?m:d,D=S&&x||f,P=S&&"function"==typeof k?k:b,z=S&&w||v,R=S&&E||y,O=h(l(T)?T.enter:T);0;var B=!1!==i&&!J,L=lr(P),$=t._enterCb=M((function(){B&&(Xo(t,I),Xo(t,C)),$.cancelled?(B&&Xo(t,A),R&&R(t)):z&&z(t),t._enterCb=null}));n.data.show||ce(n,"insert",(function(){var e=t.parentNode,o=e&&e._pending&&e._pending[n.key];o&&o.tag===n.tag&&o.elm._leaveCb&&o.elm._leaveCb(),P&&P(t,$)})),D&&D(t),B&&(Zo(t,A),Zo(t,C),Qo((function(){Xo(t,A),$.cancelled||(Zo(t,I),L||(sr(O)?setTimeout($,O):nr(t,s,$)))}))),n.data.show&&(e&&e(),P&&P(t,$)),B||L||$()}}}function ir(n,e){var t=n.elm;a(t._enterCb)&&(t._enterCb.cancelled=!0,t._enterCb());var o=Go(n.data.transition);if(r(o)||1!==t.nodeType)return e();if(!a(t._leaveCb)){var i=o.css,s=o.type,c=o.leaveClass,d=o.leaveToClass,u=o.leaveActiveClass,p=o.beforeLeave,m=o.leave,g=o.afterLeave,f=o.leaveCancelled,b=o.delayLeave,v=o.duration,y=!1!==i&&!J,x=lr(m),k=h(l(v)?v.leave:v);0;var w=t._leaveCb=M((function(){t.parentNode&&t.parentNode._pending&&(t.parentNode._pending[n.key]=null),y&&(Xo(t,d),Xo(t,u)),w.cancelled?(y&&Xo(t,c),f&&f(t)):(e(),g&&g(t)),t._leaveCb=null}));b?b(E):E()}function E(){w.cancelled||(!n.data.show&&t.parentNode&&((t.parentNode._pending||(t.parentNode._pending={}))[n.key]=n),p&&p(t),y&&(Zo(t,c),Zo(t,u),Qo((function(){Xo(t,c),w.cancelled||(Zo(t,d),x||(sr(k)?setTimeout(w,k):nr(t,s,w)))}))),m&&m(t,w),y||x||w())}}function sr(n){return"number"==typeof n&&!isNaN(n)}function lr(n){if(r(n))return!1;var e=n.fns;return a(e)?lr(Array.isArray(e)?e[0]:e):(n._length||n.length)>1}function cr(n,e){!0!==e.data.show&&ar(e)}var dr=function(n){var e,t,o={},l=n.modules,c=n.nodeOps;for(e=0;e<eo.length;++e)for(o[eo[e]]=[],t=0;t<l.length;++t)a(l[t][eo[e]])&&o[eo[e]].push(l[t][eo[e]]);function d(n){var e=c.parentNode(n);a(e)&&c.removeChild(e,n)}function u(n,e,t,r,s,l,d){if(a(n.elm)&&a(l)&&(n=l[d]=yn(n)),n.isRootInsert=!s,!function(n,e,t,r){var s=n.data;if(a(s)){var l=a(n.componentInstance)&&s.keepAlive;if(a(s=s.hook)&&a(s=s.init)&&s(n,!1),a(n.componentInstance))return p(n,e),m(t,n.elm,r),i(l)&&function(n,e,t,r){var i,s=n;for(;s.componentInstance;)if(s=s.componentInstance._vnode,a(i=s.data)&&a(i=i.transition)){for(i=0;i<o.activate.length;++i)o.activate[i](no,s);e.push(s);break}m(t,n.elm,r)}(n,e,t,r),!0}}(n,e,t,r)){var u=n.data,h=n.children,f=n.tag;a(f)?(n.elm=n.ns?c.createElementNS(n.ns,f):c.createElement(f,n),v(n),g(n,h,e),a(u)&&b(n,e),m(t,n.elm,r)):i(n.isComment)?(n.elm=c.createComment(n.text),m(t,n.elm,r)):(n.elm=c.createTextNode(n.text),m(t,n.elm,r))}}function p(n,e){a(n.data.pendingInsert)&&(e.push.apply(e,n.data.pendingInsert),n.data.pendingInsert=null),n.elm=n.componentInstance.$el,h(n)?(b(n,e),v(n)):(Xt(n),e.push(n))}function m(n,e,t){a(n)&&(a(t)?c.parentNode(t)===n&&c.insertBefore(n,e,t):c.appendChild(n,e))}function g(n,e,t){if(Array.isArray(e)){0;for(var o=0;o<e.length;++o)u(e[o],t,n.elm,null,!0,e,o)}else s(n.text)&&c.appendChild(n.elm,c.createTextNode(String(n.text)))}function h(n){for(;n.componentInstance;)n=n.componentInstance._vnode;return a(n.tag)}function b(n,t){for(var r=0;r<o.create.length;++r)o.create[r](no,n);a(e=n.data.hook)&&(a(e.create)&&e.create(no,n),a(e.insert)&&t.push(n))}function v(n){var e;if(a(e=n.fnScopeId))c.setStyleScope(n.elm,e);else for(var t=n;t;)a(e=t.context)&&a(e=e.$options._scopeId)&&c.setStyleScope(n.elm,e),t=t.parent;a(e=Qe)&&e!==n.context&&e!==n.fnContext&&a(e=e.$options._scopeId)&&c.setStyleScope(n.elm,e)}function y(n,e,t,o,r,a){for(;o<=r;++o)u(t[o],a,n,e,!1,t,o)}function x(n){var e,t,r=n.data;if(a(r))for(a(e=r.hook)&&a(e=e.destroy)&&e(n),e=0;e<o.destroy.length;++e)o.destroy[e](n);if(a(e=n.children))for(t=0;t<n.children.length;++t)x(n.children[t])}function k(n,e,t){for(;e<=t;++e){var o=n[e];a(o)&&(a(o.tag)?(w(o),x(o)):d(o.elm))}}function w(n,e){if(a(e)||a(n.data)){var t,r=o.remove.length+1;for(a(e)?e.listeners+=r:e=function(n,e){function t(){0==--t.listeners&&d(n)}return t.listeners=e,t}(n.elm,r),a(t=n.componentInstance)&&a(t=t._vnode)&&a(t.data)&&w(t,e),t=0;t<o.remove.length;++t)o.remove[t](n,e);a(t=n.data.hook)&&a(t=t.remove)?t(n,e):e()}else d(n.elm)}function E(n,e,t,o){for(var r=t;r<o;r++){var i=e[r];if(a(i)&&to(n,i))return r}}function T(n,e,t,s,l,d){if(n!==e){a(e.elm)&&a(s)&&(e=s[l]=yn(e));var p=e.elm=n.elm;if(i(n.isAsyncPlaceholder))a(e.asyncFactory.resolved)?S(n.elm,e,t):e.isAsyncPlaceholder=!0;else if(i(e.isStatic)&&i(n.isStatic)&&e.key===n.key&&(i(e.isCloned)||i(e.isOnce)))e.componentInstance=n.componentInstance;else{var m,g=e.data;a(g)&&a(m=g.hook)&&a(m=m.prepatch)&&m(n,e);var f=n.children,b=e.children;if(a(g)&&h(e)){for(m=0;m<o.update.length;++m)o.update[m](n,e);a(m=g.hook)&&a(m=m.update)&&m(n,e)}r(e.text)?a(f)&&a(b)?f!==b&&function(n,e,t,o,i){var s,l,d,p=0,m=0,g=e.length-1,h=e[0],f=e[g],b=t.length-1,v=t[0],x=t[b],w=!i;for(0;p<=g&&m<=b;)r(h)?h=e[++p]:r(f)?f=e[--g]:to(h,v)?(T(h,v,o,t,m),h=e[++p],v=t[++m]):to(f,x)?(T(f,x,o,t,b),f=e[--g],x=t[--b]):to(h,x)?(T(h,x,o,t,b),w&&c.insertBefore(n,h.elm,c.nextSibling(f.elm)),h=e[++p],x=t[--b]):to(f,v)?(T(f,v,o,t,m),w&&c.insertBefore(n,f.elm,h.elm),f=e[--g],v=t[++m]):(r(s)&&(s=oo(e,p,g)),r(l=a(v.key)?s[v.key]:E(v,e,p,g))?u(v,o,n,h.elm,!1,t,m):to(d=e[l],v)?(T(d,v,o,t,m),e[l]=void 0,w&&c.insertBefore(n,d.elm,h.elm)):u(v,o,n,h.elm,!1,t,m),v=t[++m]);p>g?y(n,r(t[b+1])?null:t[b+1].elm,t,m,b,o):m>b&&k(e,p,g)}(p,f,b,t,d):a(b)?(a(n.text)&&c.setTextContent(p,""),y(p,null,b,0,b.length-1,t)):a(f)?k(f,0,f.length-1):a(n.text)&&c.setTextContent(p,""):n.text!==e.text&&c.setTextContent(p,e.text),a(g)&&a(m=g.hook)&&a(m=m.postpatch)&&m(n,e)}}}function _(n,e,t){if(i(t)&&a(n.parent))n.parent.data.pendingInsert=e;else for(var o=0;o<e.length;++o)e[o].data.hook.insert(e[o])}var j=f("attrs,class,staticClass,staticStyle,key");function S(n,e,t,o){var r,s=e.tag,l=e.data,c=e.children;if(o=o||l&&l.pre,e.elm=n,i(e.isComment)&&a(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(a(l)&&(a(r=l.hook)&&a(r=r.init)&&r(e,!0),a(r=e.componentInstance)))return p(e,t),!0;if(a(s)){if(a(c))if(n.hasChildNodes())if(a(r=l)&&a(r=r.domProps)&&a(r=r.innerHTML)){if(r!==n.innerHTML)return!1}else{for(var d=!0,u=n.firstChild,m=0;m<c.length;m++){if(!u||!S(u,c[m],t,o)){d=!1;break}u=u.nextSibling}if(!d||u)return!1}else g(e,c,t);if(a(l)){var h=!1;for(var f in l)if(!j(f)){h=!0,b(e,t);break}!h&&l.class&&ae(l.class)}}else n.data!==e.text&&(n.data=e.text);return!0}return function(n,e,t,s){if(!r(e)){var l,d=!1,p=[];if(r(n))d=!0,u(e,p);else{var m=a(n.nodeType);if(!m&&to(n,e))T(n,e,p,null,null,s);else{if(m){if(1===n.nodeType&&n.hasAttribute("data-server-rendered")&&(n.removeAttribute("data-server-rendered"),t=!0),i(t)&&S(n,e,p))return _(e,p,!0),n;l=n,n=new hn(c.tagName(l).toLowerCase(),{},[],void 0,l)}var g=n.elm,f=c.parentNode(g);if(u(e,p,g._leaveCb?null:f,c.nextSibling(g)),a(e.parent))for(var b=e.parent,v=h(e);b;){for(var y=0;y<o.destroy.length;++y)o.destroy[y](b);if(b.elm=e.elm,v){for(var w=0;w<o.create.length;++w)o.create[w](no,b);var E=b.data.hook.insert;if(E.merged)for(var j=1;j<E.fns.length;j++)E.fns[j]()}else Xt(b);b=b.parent}a(f)?k([n],0,0):a(n.tag)&&x(n)}}return _(e,p,d),e.elm}a(n)&&x(n)}}({nodeOps:Qt,modules:[ho,vo,_o,Ao,$o,V?{create:cr,activate:cr,remove:function(n,e){!0!==n.data.show?ir(n,e):e()}}:{}].concat(uo)});J&&document.addEventListener("selectionchange",(function(){var n=document.activeElement;n&&n.vmodel&&vr(n,"input")}));var ur={inserted:function(n,e,t,o){"select"===t.tag?(o.elm&&!o.elm._vOptions?ce(t,"postpatch",(function(){ur.componentUpdated(n,e,t)})):pr(n,e,t.context),n._vOptions=[].map.call(n.options,hr)):("textarea"===t.tag||Jt(n.type))&&(n._vModifiers=e.modifiers,e.modifiers.lazy||(n.addEventListener("compositionstart",fr),n.addEventListener("compositionend",br),n.addEventListener("change",br),J&&(n.vmodel=!0)))},componentUpdated:function(n,e,t){if("select"===t.tag){pr(n,e,t.context);var o=n._vOptions,r=n._vOptions=[].map.call(n.options,hr);if(r.some((function(n,e){return!R(n,o[e])})))(n.multiple?e.value.some((function(n){return gr(n,r)})):e.value!==e.oldValue&&gr(e.value,r))&&vr(n,"change")}}};function pr(n,e,t){mr(n,e,t),(K||Q)&&setTimeout((function(){mr(n,e,t)}),0)}function mr(n,e,t){var o=e.value,r=n.multiple;if(!r||Array.isArray(o)){for(var a,i,s=0,l=n.options.length;s<l;s++)if(i=n.options[s],r)a=O(o,hr(i))>-1,i.selected!==a&&(i.selected=a);else if(R(hr(i),o))return void(n.selectedIndex!==s&&(n.selectedIndex=s));r||(n.selectedIndex=-1)}}function gr(n,e){return e.every((function(e){return!R(e,n)}))}function hr(n){return"_value"in n?n._value:n.value}function fr(n){n.target.composing=!0}function br(n){n.target.composing&&(n.target.composing=!1,vr(n.target,"input"))}function vr(n,e){var t=document.createEvent("HTMLEvents");t.initEvent(e,!0,!0),n.dispatchEvent(t)}function yr(n){return!n.componentInstance||n.data&&n.data.transition?n:yr(n.componentInstance._vnode)}var xr={model:ur,show:{bind:function(n,e,t){var o=e.value,r=(t=yr(t)).data&&t.data.transition,a=n.__vOriginalDisplay="none"===n.style.display?"":n.style.display;o&&r?(t.data.show=!0,ar(t,(function(){n.style.display=a}))):n.style.display=o?a:"none"},update:function(n,e,t){var o=e.value;!o!=!e.oldValue&&((t=yr(t)).data&&t.data.transition?(t.data.show=!0,o?ar(t,(function(){n.style.display=n.__vOriginalDisplay})):ir(t,(function(){n.style.display="none"}))):n.style.display=o?n.__vOriginalDisplay:"none")},unbind:function(n,e,t,o,r){r||(n.style.display=n.__vOriginalDisplay)}}},kr={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function wr(n){var e=n&&n.componentOptions;return e&&e.Ctor.options.abstract?wr(Ue(e.children)):n}function Er(n){var e={},t=n.$options;for(var o in t.propsData)e[o]=n[o];var r=t._parentListeners;for(var a in r)e[E(a)]=r[a];return e}function Tr(n,e){if(/\d-keep-alive$/.test(e.tag))return n("keep-alive",{props:e.componentOptions.propsData})}var _r=function(n){return n.tag||fe(n)},jr=function(n){return"show"===n.name},Sr={name:"transition",props:kr,abstract:!0,render:function(n){var e=this,t=this.$slots.default;if(t&&(t=t.filter(_r)).length){0;var o=this.mode;0;var r=t[0];if(function(n){for(;n=n.parent;)if(n.data.transition)return!0}(this.$vnode))return r;var a=wr(r);if(!a)return r;if(this._leaving)return Tr(n,r);var i="__transition-"+this._uid+"-";a.key=null==a.key?a.isComment?i+"comment":i+a.tag:s(a.key)?0===String(a.key).indexOf(i)?a.key:i+a.key:a.key;var l=(a.data||(a.data={})).transition=Er(this),c=this._vnode,d=wr(c);if(a.data.directives&&a.data.directives.some(jr)&&(a.data.show=!0),d&&d.data&&!function(n,e){return e.key===n.key&&e.tag===n.tag}(a,d)&&!fe(d)&&(!d.componentInstance||!d.componentInstance._vnode.isComment)){var u=d.data.transition=C({},l);if("out-in"===o)return this._leaving=!0,ce(u,"afterLeave",(function(){e._leaving=!1,e.$forceUpdate()})),Tr(n,r);if("in-out"===o){if(fe(a))return c;var p,m=function(){p()};ce(l,"afterEnter",m),ce(l,"enterCancelled",m),ce(u,"delayLeave",(function(n){p=n}))}}return r}}},Ar=C({tag:String,moveClass:String},kr);function Cr(n){n.elm._moveCb&&n.elm._moveCb(),n.elm._enterCb&&n.elm._enterCb()}function Ir(n){n.data.newPos=n.elm.getBoundingClientRect()}function Dr(n){var e=n.data.pos,t=n.data.newPos,o=e.left-t.left,r=e.top-t.top;if(o||r){n.data.moved=!0;var a=n.elm.style;a.transform=a.WebkitTransform="translate("+o+"px,"+r+"px)",a.transitionDuration="0s"}}delete Ar.mode;var Pr={Transition:Sr,TransitionGroup:{props:Ar,beforeMount:function(){var n=this,e=this._update;this._update=function(t,o){var r=Ze(n);n.__patch__(n._vnode,n.kept,!1,!0),n._vnode=n.kept,r(),e.call(n,t,o)}},render:function(n){for(var e=this.tag||this.$vnode.data.tag||"span",t=Object.create(null),o=this.prevChildren=this.children,r=this.$slots.default||[],a=this.children=[],i=Er(this),s=0;s<r.length;s++){var l=r[s];if(l.tag)if(null!=l.key&&0!==String(l.key).indexOf("__vlist"))a.push(l),t[l.key]=l,(l.data||(l.data={})).transition=i;else;}if(o){for(var c=[],d=[],u=0;u<o.length;u++){var p=o[u];p.data.transition=i,p.data.pos=p.elm.getBoundingClientRect(),t[p.key]?c.push(p):d.push(p)}this.kept=n(e,null,c),this.removed=d}return n(e,null,a)},updated:function(){var n=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";n.length&&this.hasMove(n[0].elm,e)&&(n.forEach(Cr),n.forEach(Ir),n.forEach(Dr),this._reflow=document.body.offsetHeight,n.forEach((function(n){if(n.data.moved){var t=n.elm,o=t.style;Zo(t,e),o.transform=o.WebkitTransform=o.transitionDuration="",t.addEventListener(Wo,t._moveCb=function n(o){o&&o.target!==t||o&&!/transform$/.test(o.propertyName)||(t.removeEventListener(Wo,n),t._moveCb=null,Xo(t,e))})}})))},methods:{hasMove:function(n,e){if(!Vo)return!1;if(this._hasMove)return this._hasMove;var t=n.cloneNode();n._transitionClasses&&n._transitionClasses.forEach((function(n){Fo(t,n)})),qo(t,e),t.style.display="none",this.$el.appendChild(t);var o=tr(t);return this.$el.removeChild(t),this._hasMove=o.hasTransform}}}};Tt.config.mustUseProp=function(n,e,t){return"value"===t&&zt(n)&&"button"!==e||"selected"===t&&"option"===n||"checked"===t&&"input"===n||"muted"===t&&"video"===n},Tt.config.isReservedTag=Yt,Tt.config.isReservedAttr=Pt,Tt.config.getTagNamespace=function(n){return Wt(n)?"svg":"math"===n?"math":void 0},Tt.config.isUnknownElement=function(n){if(!V)return!0;if(Yt(n))return!1;if(n=n.toLowerCase(),null!=Kt[n])return Kt[n];var e=document.createElement(n);return n.indexOf("-")>-1?Kt[n]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:Kt[n]=/HTMLUnknownElement/.test(e.toString())},C(Tt.options.directives,xr),C(Tt.options.components,Pr),Tt.prototype.__patch__=V?dr:D,Tt.prototype.$mount=function(n,e){return function(n,e,t){var o;return n.$el=e,n.$options.render||(n.$options.render=bn),et(n,"beforeMount"),o=function(){n._update(n._render(),t)},new mt(n,o,D,{before:function(){n._isMounted&&!n._isDestroyed&&et(n,"beforeUpdate")}},!0),t=!1,null==n.$vnode&&(n._isMounted=!0,et(n,"mounted")),n}(this,n=n&&V?function(n){if("string"==typeof n){var e=document.querySelector(n);return e||document.createElement("div")}return n}(n):void 0,e)},V&&setTimeout((function(){$.devtools&&rn&&rn.emit("init",Tt)}),0),e.default=Tt},function(n,e,t){var o=t(65),r=Function.prototype,a=r.bind,i=r.call,s=o&&a.bind(i,i);n.exports=o?function(n){return n&&s(n)}:function(n){return n&&function(){return i.apply(n,arguments)}}},function(n,e,t){var o=t(0),r=t(40).f,a=t(26),i=t(16),s=t(115),l=t(121),c=t(89);n.exports=function(n,e){var t,d,u,p,m,g=n.target,h=n.global,f=n.stat;if(t=h?o:f?o[g]||s(g,{}):(o[g]||{}).prototype)for(d in e){if(p=e[d],u=n.noTargetGet?(m=r(t,d))&&m.value:t[d],!c(h?d:g+(f?".":"#")+d,n.forced)&&void 0!==u){if(typeof p==typeof u)continue;l(p,u)}(n.sham||u&&u.sham)&&a(p,"sham",!0),i(t,d,p,n)}}},function(n,e){n.exports=function(n){try{return!!n()}catch(n){return!0}}},function(n,e,t){var o=t(124),r=t(16),a=t(257);o||r(Object.prototype,"toString",a,{unsafe:!0})},function(n,e,t){var o=t(0),r=t(80),a=t(12),i=t(81),s=t(116),l=t(157),c=r("wks"),d=o.Symbol,u=d&&d.for,p=l?d:d&&d.withoutSetter||i;n.exports=function(n){if(!a(c,n)||!s&&"string"!=typeof c[n]){var e="Symbol."+n;s&&a(d,n)?c[n]=d[n]:c[n]=l&&u?u(e):p(e)}return c[n]}},function(n,e){n.exports=function(n){return"function"==typeof n}},function(n,e,t){var o=t(4);n.exports=!o((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(n,e,t){var o=t(0),r=t(10),a=o.String,i=o.TypeError;n.exports=function(n){if(r(n))return n;throw i(a(n)+" is not an object")}},function(n,e,t){var o=t(7);n.exports=function(n){return"object"==typeof n?null!==n:o(n)}},function(n,e,t){"use strict";function o(n,e,t,o,r,a,i,s){var l,c="function"==typeof n?n.options:n;if(e&&(c.render=e,c.staticRenderFns=t,c._compiled=!0),o&&(c.functional=!0),a&&(c._scopeId="data-v-"+a),i?(l=function(n){(n=n||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(n=__VUE_SSR_CONTEXT__),r&&r.call(this,n),n&&n._registeredComponents&&n._registeredComponents.add(i)},c._ssrRegister=l):r&&(l=s?function(){r.call(this,(c.functional?this.parent:this).$root.$options.shadowRoot)}:r),l)if(c.functional){c._injectStyles=l;var d=c.render;c.render=function(n,e){return l.call(e),d(n,e)}}else{var u=c.beforeCreate;c.beforeCreate=u?[].concat(u,l):[l]}return{exports:n,options:c}}t.d(e,"a",(function(){return o}))},function(n,e,t){var o=t(2),r=t(18),a=o({}.hasOwnProperty);n.exports=Object.hasOwn||function(n,e){return a(r(n),e)}},function(n,e,t){var o=t(0),r=t(8),a=t(159),i=t(158),s=t(9),l=t(83),c=o.TypeError,d=Object.defineProperty,u=Object.getOwnPropertyDescriptor;e.f=r?i?function(n,e,t){if(s(n),e=l(e),s(t),"function"==typeof n&&"prototype"===e&&"value"in t&&"writable"in t&&!t.writable){var o=u(n,e);o&&o.writable&&(n[e]=t.value,t={configurable:"configurable"in t?t.configurable:o.configurable,enumerable:"enumerable"in t?t.enumerable:o.enumerable,writable:!1})}return d(n,e,t)}:d:function(n,e,t){if(s(n),e=l(e),s(t),a)try{return d(n,e,t)}catch(n){}if("get"in t||"set"in t)throw c("Accessors not supported");return"value"in t&&(n[e]=t.value),n}},function(n,e,t){var o=t(0),r=t(78),a=o.String;n.exports=function(n){if("Symbol"===r(n))throw TypeError("Cannot convert a Symbol value to a string");return a(n)}},function(n,e,t){var o=t(65),r=Function.prototype.call;n.exports=o?r.bind(r):function(){return r.apply(r,arguments)}},function(n,e,t){var o=t(0),r=t(7),a=t(12),i=t(26),s=t(115),l=t(88),c=t(31),d=t(77).CONFIGURABLE,u=c.get,p=c.enforce,m=String(String).split("String");(n.exports=function(n,e,t,l){var c,u=!!l&&!!l.unsafe,g=!!l&&!!l.enumerable,h=!!l&&!!l.noTargetGet,f=l&&void 0!==l.name?l.name:e;r(t)&&("Symbol("===String(f).slice(0,7)&&(f="["+String(f).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!a(t,"name")||d&&t.name!==f)&&i(t,"name",f),(c=p(t)).source||(c.source=m.join("string"==typeof f?f:""))),n!==o?(u?!h&&n[e]&&(g=!0):delete n[e],g?n[e]=t:i(n,e,t)):g?n[e]=t:s(e,t)})(Function.prototype,"toString",(function(){return r(this)&&u(this).source||l(this)}))},function(n,e,t){"use strict";var o=t(3),r=t(95);o({target:"RegExp",proto:!0,forced:/./.exec!==r},{exec:r})},function(n,e,t){var o=t(0),r=t(20),a=o.Object;n.exports=function(n){return a(r(n))}},function(n,e,t){var o=t(0),r=t(7),a=function(n){return r(n)?n:void 0};n.exports=function(n,e){return arguments.length<2?a(o[n]):o[n]&&o[n][e]}},function(n,e,t){var o=t(0).TypeError;n.exports=function(n){if(null==n)throw o("Can't call method on "+n);return n}},function(n,e,t){var o=t(64),r=t(20);n.exports=function(n){return o(r(n))}},function(n,e,t){"use strict";var o=t(3),r=t(184);o({target:"Array",proto:!0,forced:[].forEach!=r},{forEach:r})},function(n,e,t){var o=t(0),r=t(178),a=t(179),i=t(184),s=t(26),l=function(n){if(n&&n.forEach!==i)try{s(n,"forEach",i)}catch(e){n.forEach=i}};for(var c in r)r[c]&&l(o[c]&&o[c].prototype);l(a)},function(n,e,t){"use strict";var o=t(3),r=t(50).filter;o({target:"Array",proto:!0,forced:!t(93)("filter")},{filter:function(n){return r(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){var o=t(2),r=o({}.toString),a=o("".slice);n.exports=function(n){return a(r(n),8,-1)}},function(n,e,t){var o=t(8),r=t(13),a=t(49);n.exports=o?function(n,e,t){return r.f(n,e,a(1,t))}:function(n,e,t){return n[e]=t,n}},function(n,e,t){var o=t(55);n.exports=function(n){return o(n.length)}},function(n,e,t){var o=t(16),r=t(273),a=Error.prototype;a.toString!==r&&o(a,"toString",r)},function(n,e,t){"use strict";var o=t(177).charAt,r=t(14),a=t(31),i=t(163),s=a.set,l=a.getterFor("String Iterator");i(String,"String",(function(n){s(this,{type:"String Iterator",string:r(n),index:0})}),(function(){var n,e=l(this),t=e.string,r=e.index;return r>=t.length?{value:void 0,done:!0}:(n=o(t,r),e.index+=n.length,{value:n,done:!1})}))},function(n,e){n.exports=!1},function(n,e,t){var o,r,a,i=t(243),s=t(0),l=t(2),c=t(10),d=t(26),u=t(12),p=t(114),m=t(87),g=t(66),h=s.TypeError,f=s.WeakMap;if(i||p.state){var b=p.state||(p.state=new f),v=l(b.get),y=l(b.has),x=l(b.set);o=function(n,e){if(y(b,n))throw new h("Object already initialized");return e.facade=n,x(b,n,e),e},r=function(n){return v(b,n)||{}},a=function(n){return y(b,n)}}else{var k=m("state");g[k]=!0,o=function(n,e){if(u(n,k))throw new h("Object already initialized");return e.facade=n,d(n,k,e),e},r=function(n){return u(n,k)?n[k]:{}},a=function(n){return u(n,k)}}n.exports={set:o,get:r,has:a,enforce:function(n){return a(n)?r(n):o(n,{})},getterFor:function(n){return function(e){var t;if(!c(e)||(t=r(e)).type!==n)throw h("Incompatible receiver, "+n+" required");return t}}}},function(n,e){var t=Array.isArray;n.exports=t},function(n,e,t){var o=t(19);n.exports=o("navigator","userAgent")||""},function(n,e,t){var o=t(2);n.exports=o({}.isPrototypeOf)},function(n,e,t){var o=t(193),r="object"==typeof self&&self&&self.Object===Object&&self,a=o||r||Function("return this")();n.exports=a},function(n,e,t){var o=t(0),r=t(178),a=t(179),i=t(147),s=t(26),l=t(6),c=l("iterator"),d=l("toStringTag"),u=i.values,p=function(n,e){if(n){if(n[c]!==u)try{s(n,c,u)}catch(e){n[c]=u}if(n[d]||s(n,d,e),r[e])for(var t in i)if(n[t]!==i[t])try{s(n,t,i[t])}catch(e){n[t]=i[t]}}};for(var m in r)p(o[m]&&o[m].prototype,m);p(a,"DOMTokenList")},function(n,e,t){var o,r=t(9),a=t(117),i=t(119),s=t(66),l=t(162),c=t(82),d=t(87),u=d("IE_PROTO"),p=function(){},m=function(n){return"<script>"+n+"<\/script>"},g=function(n){n.write(m("")),n.close();var e=n.parentWindow.Object;return n=null,e},h=function(){try{o=new ActiveXObject("htmlfile")}catch(n){}var n,e;h="undefined"!=typeof document?document.domain&&o?g(o):((e=c("iframe")).style.display="none",l.appendChild(e),e.src=String("javascript:"),(n=e.contentWindow.document).open(),n.write(m("document.F=Object")),n.close(),n.F):g(o);for(var t=i.length;t--;)delete h.prototype[i[t]];return h()};s[u]=!0,n.exports=Object.create||function(n,e){var t;return null!==n?(p.prototype=r(n),t=new p,p.prototype=null,t[u]=n):t=h(),void 0===e?t:a.f(t,e)}},function(n,e,t){var o=t(65),r=Function.prototype,a=r.apply,i=r.call;n.exports="object"==typeof Reflect&&Reflect.apply||(o?i.bind(a):function(){return i.apply(a,arguments)})},function(n,e,t){var o=t(0),r=t(7),a=t(85),i=o.TypeError;n.exports=function(n){if(r(n))return n;throw i(a(n)+" is not a function")}},function(n,e,t){var o=t(8),r=t(15),a=t(120),i=t(49),s=t(21),l=t(83),c=t(12),d=t(159),u=Object.getOwnPropertyDescriptor;e.f=o?u:function(n,e){if(n=s(n),e=l(e),d)try{return u(n,e)}catch(n){}if(c(n,e))return i(!r(a.f,n,e),n[e])}},function(n,e,t){"use strict";var o=t(3),r=t(50).map;o({target:"Array",proto:!0,forced:!t(93)("map")},{map:function(n){return r(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){var o=t(3),r=t(0),a=t(38),i=t(269),s=r.WebAssembly,l=7!==Error("e",{cause:7}).cause,c=function(n,e){var t={};t[n]=i(n,e,l),o({global:!0,forced:l},t)},d=function(n,e){if(s&&s[n]){var t={};t[n]=i("WebAssembly."+n,e,l),o({target:"WebAssembly",stat:!0,forced:l},t)}};c("Error",(function(n){return function(e){return a(n,this,arguments)}})),c("EvalError",(function(n){return function(e){return a(n,this,arguments)}})),c("RangeError",(function(n){return function(e){return a(n,this,arguments)}})),c("ReferenceError",(function(n){return function(e){return a(n,this,arguments)}})),c("SyntaxError",(function(n){return function(e){return a(n,this,arguments)}})),c("TypeError",(function(n){return function(e){return a(n,this,arguments)}})),c("URIError",(function(n){return function(e){return a(n,this,arguments)}})),d("CompileError",(function(n){return function(e){return a(n,this,arguments)}})),d("LinkError",(function(n){return function(e){return a(n,this,arguments)}})),d("RuntimeError",(function(n){return function(e){return a(n,this,arguments)}}))},function(n,e,t){var o=t(293),r=t(296);n.exports=function(n,e){var t=r(n,e);return o(t)?t:void 0}},function(n,e,t){var o=t(3),r=t(0),a=t(38),i=t(7),s=t(33),l=t(69),c=t(149),d=/MSIE .\./.test(s),u=r.Function,p=function(n){return function(e,t){var o=c(arguments.length,1)>2,r=i(e)?e:u(e),s=o?l(arguments,2):void 0;return n(o?function(){a(r,this,s)}:r,t)}};o({global:!0,bind:!0,forced:d},{setTimeout:p(r.setTimeout),setInterval:p(r.setInterval)})},function(n,e,t){"use strict";t.d(e,"e",(function(){return o})),t.d(e,"b",(function(){return a})),t.d(e,"j",(function(){return i})),t.d(e,"g",(function(){return l})),t.d(e,"h",(function(){return c})),t.d(e,"i",(function(){return d})),t.d(e,"c",(function(){return u})),t.d(e,"f",(function(){return p})),t.d(e,"l",(function(){return m})),t.d(e,"m",(function(){return g})),t.d(e,"d",(function(){return f})),t.d(e,"k",(function(){return b})),t.d(e,"n",(function(){return v})),t.d(e,"a",(function(){return x}));t(17),t(46),t(228),t(58),t(106),t(113),t(41),t(22),t(5),t(23),t(24),t(79),t(145),t(105),t(57),t(155),t(28),t(107);var o=/#.*$/,r=/\.(md|html)$/,a=/\/$/,i=/^[a-z]+:/i;function s(n){return decodeURI(n).replace(o,"").replace(r,"")}function l(n){return i.test(n)}function c(n){return/^mailto:/.test(n)}function d(n){return/^tel:/.test(n)}function u(n){if(l(n))return n;if(!n)return"404";var e=n.match(o),t=e?e[0]:"",r=s(n);return a.test(r)?n:r+".html"+t}function p(n,e){var t=n.hash,r=function(n){var e=n?n.match(o):"";if(e)return e[0]}(e);return(!r||t===r)&&s(n.path)===s(e)}function m(n,e,t){if(l(e))return{type:"external",path:e};t&&(e=function(n,e,t){var o=n.charAt(0);if("/"===o)return n;if("?"===o||"#"===o)return e+n;var r=e.split("/");t&&r[r.length-1]||r.pop();for(var a=n.replace(/^\//,"").split("/"),i=0;i<a.length;i++){var s=a[i];".."===s?r.pop():"."!==s&&r.push(s)}""!==r[0]&&r.unshift("");return r.join("/")}(e,t));for(var o=s(e),r=0;r<n.length;r++)if(s(n[r].regularPath)===o)return Object.assign({},n[r],{type:"page",path:u(n[r].path)});return console.error('[vuepress] No matching page found for sidebar item "'.concat(e,'"')),{}}function g(n,e,t,o){var r=t.pages,a=t.themeConfig,i=o&&a.locales&&a.locales[o]||a;if("auto"===(n.frontmatter.sidebar||i.sidebar||a.sidebar))return h(n);var s=i.sidebar||a.sidebar;if(s){var l=function(n,e){if(Array.isArray(e))return{base:"/",config:e};for(var t in e)if(0===(o=n,/(\.html|\/)$/.test(o)?o:o+"/").indexOf(encodeURI(t)))return{base:t,config:e[t]};var o;return{}}(e,s),c=l.base,d=l.config;return"auto"===d?h(n):d?d.map((function(n){return function n(e,t,o){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1;if("string"==typeof e)return m(t,e,o);if(Array.isArray(e))return Object.assign(m(t,e[0],o),{title:e[1]});r>3&&console.error("[vuepress] detected a too deep nested sidebar group.");var a=e.children||[];return 0===a.length&&e.path?Object.assign(m(t,e.path,o),{title:e.title}):{type:"group",path:e.path,title:e.title,sidebarDepth:e.sidebarDepth,initialOpenGroupIndex:e.initialOpenGroupIndex,children:a.map((function(e){return n(e,t,o,r+1)})),collapsable:!1!==e.collapsable}}(n,r,c)})):[]}return[]}function h(n){var e=f(n.headers||[]);return[{type:"group",collapsable:!1,title:n.title,path:null,children:e.map((function(e){return{type:"auto",title:e.title,basePath:n.path,path:n.path+"#"+e.slug,children:e.children||[]}}))}]}function f(n){var e;return(n=n.map((function(n){return Object.assign({},n)}))).forEach((function(n){2===n.level?e=n:e&&(e.children||(e.children=[])).push(n)})),n.filter((function(n){return 2===n.level}))}function b(n){return Object.assign(n,{type:n.items&&n.items.length?"links":"link"})}function v(n){return Object.prototype.toString.call(n).match(/\[object (.*?)\]/)[1].toLowerCase()}function y(n){var e=n.frontmatter.date||n.lastUpdated||new Date,t=new Date(e);return"Invalid Date"==t&&e&&(t=new Date(e.replace(/-/g,"/"))),t.getTime()}function x(n,e){return y(e)-y(n)}},function(n,e,t){"use strict";var o=t(38),r=t(15),a=t(2),i=t(111),s=t(4),l=t(9),c=t(7),d=t(59),u=t(55),p=t(14),m=t(20),g=t(132),h=t(48),f=t(274),b=t(112),v=t(6)("replace"),y=Math.max,x=Math.min,k=a([].concat),w=a([].push),E=a("".indexOf),T=a("".slice),_="$0"==="a".replace(/./,"$0"),j=!!/./[v]&&""===/./[v]("a","$0");i("replace",(function(n,e,t){var a=j?"$":"$0";return[function(n,t){var o=m(this),a=null==n?void 0:h(n,v);return a?r(a,n,o,t):r(e,p(o),n,t)},function(n,r){var i=l(this),s=p(n);if("string"==typeof r&&-1===E(r,a)&&-1===E(r,"$<")){var m=t(e,i,s,r);if(m.done)return m.value}var h=c(r);h||(r=p(r));var v=i.global;if(v){var _=i.unicode;i.lastIndex=0}for(var j=[];;){var S=b(i,s);if(null===S)break;if(w(j,S),!v)break;""===p(S[0])&&(i.lastIndex=g(s,u(i.lastIndex),_))}for(var A,C="",I=0,D=0;D<j.length;D++){for(var P=p((S=j[D])[0]),z=y(x(d(S.index),s.length),0),R=[],O=1;O<S.length;O++)w(R,void 0===(A=S[O])?A:String(A));var M=S.groups;if(h){var B=k([P],R,z,s);void 0!==M&&w(B,M);var L=p(o(r,void 0,B))}else L=f(P,s,z,R,M,r);z>=I&&(C+=T(s,I,z)+L,I=z+P.length)}return C+T(s,I)}]}),!!s((function(){var n=/./;return n.exec=function(){var n=[];return n.groups={a:"7"},n},"7"!=="".replace(n,"$<a>")}))||!_||j)},function(n,e,t){"use strict";var o=t(4);n.exports=function(n,e){var t=[][n];return!!t&&o((function(){t.call(null,e||function(){return 1},1)}))}},function(n,e,t){var o=t(39);n.exports=function(n,e){var t=n[e];return null==t?void 0:o(t)}},function(n,e){n.exports=function(n,e){return{enumerable:!(1&n),configurable:!(2&n),writable:!(4&n),value:e}}},function(n,e,t){var o=t(60),r=t(2),a=t(64),i=t(18),s=t(27),l=t(150),c=r([].push),d=function(n){var e=1==n,t=2==n,r=3==n,d=4==n,u=6==n,p=7==n,m=5==n||u;return function(g,h,f,b){for(var v,y,x=i(g),k=a(x),w=o(h,f),E=s(k),T=0,_=b||l,j=e?_(g,E):t||p?_(g,0):void 0;E>T;T++)if((m||T in k)&&(y=w(v=k[T],T,x),n))if(e)j[T]=y;else if(y)switch(n){case 3:return!0;case 5:return v;case 6:return T;case 2:c(j,v)}else switch(n){case 4:return!1;case 7:c(j,v)}return u?-1:r||d?d:j}};n.exports={forEach:d(0),map:d(1),filter:d(2),some:d(3),every:d(4),find:d(5),findIndex:d(6),filterReject:d(7)}},function(n,e,t){var o=t(8),r=t(77).EXISTS,a=t(2),i=t(13).f,s=Function.prototype,l=a(s.toString),c=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,d=a(c.exec);o&&!r&&i(s,"name",{configurable:!0,get:function(){try{return d(c,l(this))[1]}catch(n){return""}}})},function(n,e){n.exports=function(n){return null!=n&&"object"==typeof n}},function(n,e,t){"use strict";t.d(e,"a",(function(){return a}));t(76),t(71),t(24),t(5),t(385),t(22),t(23),t(180),t(386),t(102);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,o)}return t}function a(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}},function(n,e,t){var o,r,a=t(0),i=t(33),s=a.process,l=a.Deno,c=s&&s.versions||l&&l.version,d=c&&c.v8;d&&(r=(o=d.split("."))[0]>0&&o[0]<4?1:+(o[0]+o[1])),!r&&i&&(!(o=i.match(/Edge\/(\d+)/))||o[1]>=74)&&(o=i.match(/Chrome\/(\d+)/))&&(r=+o[1]),n.exports=r},function(n,e,t){var o=t(59),r=Math.min;n.exports=function(n){return n>0?r(o(n),9007199254740991):0}},function(n,e,t){var o=t(161),r=t(119).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(n){return o(n,r)}},function(n,e,t){"use strict";var o=t(3),r=t(0),a=t(4),i=t(61),s=t(10),l=t(18),c=t(27),d=t(70),u=t(150),p=t(93),m=t(6),g=t(54),h=m("isConcatSpreadable"),f=r.TypeError,b=g>=51||!a((function(){var n=[];return n[h]=!1,n.concat()[0]!==n})),v=p("concat"),y=function(n){if(!s(n))return!1;var e=n[h];return void 0!==e?!!e:i(n)};o({target:"Array",proto:!0,forced:!b||!v},{concat:function(n){var e,t,o,r,a,i=l(this),s=u(i,0),p=0;for(e=-1,o=arguments.length;e<o;e++)if(y(a=-1===e?i:arguments[e])){if(p+(r=c(a))>9007199254740991)throw f("Maximum allowed index exceeded");for(t=0;t<r;t++,p++)t in a&&d(s,p,a[t])}else{if(p>=9007199254740991)throw f("Maximum allowed index exceeded");d(s,p++,a)}return s.length=p,s}})},function(n,e,t){"use strict";t(17);var o,r,a=t(3),i=t(0),s=t(15),l=t(2),c=t(7),d=t(10),u=(o=!1,(r=/[ac]/).exec=function(){return o=!0,/./.exec.apply(this,arguments)},!0===r.test("abc")&&o),p=i.Error,m=l(/./.test);a({target:"RegExp",proto:!0,forced:!u},{test:function(n){var e=this.exec;if(!c(e))return m(this,n);var t=s(e,this,n);if(null!==t&&!d(t))throw new p("RegExp exec method returned something other than an Object or null");return!!t}})},function(n,e){var t=Math.ceil,o=Math.floor;n.exports=function(n){var e=+n;return e!=e||0===e?0:(e>0?o:t)(e)}},function(n,e,t){var o=t(2),r=t(39),a=t(65),i=o(o.bind);n.exports=function(n,e){return r(n),void 0===e?n:a?i(n,e):function(){return n.apply(e,arguments)}}},function(n,e,t){var o=t(25);n.exports=Array.isArray||function(n){return"Array"==o(n)}},function(n,e,t){var o=t(13).f,r=t(12),a=t(6)("toStringTag");n.exports=function(n,e,t){n&&!t&&(n=n.prototype),n&&!r(n,a)&&o(n,a,{configurable:!0,value:e})}},function(n,e,t){var o=t(72),r=t(278),a=t(279),i=o?o.toStringTag:void 0;n.exports=function(n){return null==n?void 0===n?"[object Undefined]":"[object Null]":i&&i in Object(n)?r(n):a(n)}},function(n,e,t){var o=t(0),r=t(2),a=t(4),i=t(25),s=o.Object,l=r("".split);n.exports=a((function(){return!s("z").propertyIsEnumerable(0)}))?function(n){return"String"==i(n)?l(n,""):s(n)}:s},function(n,e,t){var o=t(4);n.exports=!o((function(){var n=function(){}.bind();return"function"!=typeof n||n.hasOwnProperty("prototype")}))},function(n,e){n.exports={}},function(n,e){n.exports={}},function(n,e,t){var o=t(2),r=t(9),a=t(244);n.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var n,e=!1,t={};try{(n=o(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(t,[]),e=t instanceof Array}catch(n){}return function(t,o){return r(t),a(o),e?n(t,o):t.__proto__=o,t}}():void 0)},function(n,e,t){var o=t(2);n.exports=o([].slice)},function(n,e,t){"use strict";var o=t(83),r=t(13),a=t(49);n.exports=function(n,e,t){var i=o(e);i in n?r.f(n,i,a(0,t)):n[i]=t}},function(n,e,t){"use strict";var o=t(3),r=t(0),a=t(19),i=t(38),s=t(15),l=t(2),c=t(30),d=t(8),u=t(116),p=t(4),m=t(12),g=t(61),h=t(7),f=t(10),b=t(34),v=t(84),y=t(9),x=t(18),k=t(21),w=t(83),E=t(14),T=t(49),_=t(37),j=t(86),S=t(56),A=t(186),C=t(122),I=t(40),D=t(13),P=t(117),z=t(120),R=t(69),O=t(16),M=t(80),B=t(87),L=t(66),$=t(81),N=t(6),q=t(187),F=t(188),G=t(62),H=t(31),V=t(50).forEach,U=B("hidden"),W=N("toPrimitive"),Y=H.set,K=H.getterFor("Symbol"),J=Object.prototype,Q=r.Symbol,Z=Q&&Q.prototype,X=r.TypeError,nn=r.QObject,en=a("JSON","stringify"),tn=I.f,on=D.f,rn=A.f,an=z.f,sn=l([].push),ln=M("symbols"),cn=M("op-symbols"),dn=M("string-to-symbol-registry"),un=M("symbol-to-string-registry"),pn=M("wks"),mn=!nn||!nn.prototype||!nn.prototype.findChild,gn=d&&p((function(){return 7!=_(on({},"a",{get:function(){return on(this,"a",{value:7}).a}})).a}))?function(n,e,t){var o=tn(J,e);o&&delete J[e],on(n,e,t),o&&n!==J&&on(J,e,o)}:on,hn=function(n,e){var t=ln[n]=_(Z);return Y(t,{type:"Symbol",tag:n,description:e}),d||(t.description=e),t},fn=function(n,e,t){n===J&&fn(cn,e,t),y(n);var o=w(e);return y(t),m(ln,o)?(t.enumerable?(m(n,U)&&n[U][o]&&(n[U][o]=!1),t=_(t,{enumerable:T(0,!1)})):(m(n,U)||on(n,U,T(1,{})),n[U][o]=!0),gn(n,o,t)):on(n,o,t)},bn=function(n,e){y(n);var t=k(e),o=j(t).concat(kn(t));return V(o,(function(e){d&&!s(vn,t,e)||fn(n,e,t[e])})),n},vn=function(n){var e=w(n),t=s(an,this,e);return!(this===J&&m(ln,e)&&!m(cn,e))&&(!(t||!m(this,e)||!m(ln,e)||m(this,U)&&this[U][e])||t)},yn=function(n,e){var t=k(n),o=w(e);if(t!==J||!m(ln,o)||m(cn,o)){var r=tn(t,o);return!r||!m(ln,o)||m(t,U)&&t[U][o]||(r.enumerable=!0),r}},xn=function(n){var e=rn(k(n)),t=[];return V(e,(function(n){m(ln,n)||m(L,n)||sn(t,n)})),t},kn=function(n){var e=n===J,t=rn(e?cn:k(n)),o=[];return V(t,(function(n){!m(ln,n)||e&&!m(J,n)||sn(o,ln[n])})),o};(u||(O(Z=(Q=function(){if(b(Z,this))throw X("Symbol is not a constructor");var n=arguments.length&&void 0!==arguments[0]?E(arguments[0]):void 0,e=$(n),t=function(n){this===J&&s(t,cn,n),m(this,U)&&m(this[U],e)&&(this[U][e]=!1),gn(this,e,T(1,n))};return d&&mn&&gn(J,e,{configurable:!0,set:t}),hn(e,n)}).prototype,"toString",(function(){return K(this).tag})),O(Q,"withoutSetter",(function(n){return hn($(n),n)})),z.f=vn,D.f=fn,P.f=bn,I.f=yn,S.f=A.f=xn,C.f=kn,q.f=function(n){return hn(N(n),n)},d&&(on(Z,"description",{configurable:!0,get:function(){return K(this).description}}),c||O(J,"propertyIsEnumerable",vn,{unsafe:!0}))),o({global:!0,wrap:!0,forced:!u,sham:!u},{Symbol:Q}),V(j(pn),(function(n){F(n)})),o({target:"Symbol",stat:!0,forced:!u},{for:function(n){var e=E(n);if(m(dn,e))return dn[e];var t=Q(e);return dn[e]=t,un[t]=e,t},keyFor:function(n){if(!v(n))throw X(n+" is not a symbol");if(m(un,n))return un[n]},useSetter:function(){mn=!0},useSimple:function(){mn=!1}}),o({target:"Object",stat:!0,forced:!u,sham:!d},{create:function(n,e){return void 0===e?_(n):bn(_(n),e)},defineProperty:fn,defineProperties:bn,getOwnPropertyDescriptor:yn}),o({target:"Object",stat:!0,forced:!u},{getOwnPropertyNames:xn,getOwnPropertySymbols:kn}),o({target:"Object",stat:!0,forced:p((function(){C.f(1)}))},{getOwnPropertySymbols:function(n){return C.f(x(n))}}),en)&&o({target:"JSON",stat:!0,forced:!u||p((function(){var n=Q();return"[null]"!=en([n])||"{}"!=en({a:n})||"{}"!=en(Object(n))}))},{stringify:function(n,e,t){var o=R(arguments),r=e;if((f(e)||void 0!==n)&&!v(n))return g(e)||(e=function(n,e){if(h(r)&&(e=s(r,this,n,e)),!v(e))return e}),o[1]=e,i(en,null,o)}});if(!Z[W]){var wn=Z.valueOf;O(Z,W,(function(n){return s(wn,this)}))}G(Q,"Symbol"),L[U]=!0},function(n,e,t){var o=t(35).Symbol;n.exports=o},function(n,e,t){"use strict";t.d(e,"a",(function(){return a}));t(79);var o=t(74);t(71),t(94),t(5),t(128),t(29),t(36),t(151);var r=t(103);t(42),t(28);function a(n){return function(n){if(Array.isArray(n))return Object(o.a)(n)}(n)||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(n)||Object(r.a)(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},function(n,e,t){"use strict";function o(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,o=new Array(e);t<e;t++)o[t]=n[t];return o}t.d(e,"a",(function(){return o}))},function(n,e,t){"use strict";var o=t(3),r=t(0),a=t(61),i=t(90),s=t(10),l=t(109),c=t(27),d=t(21),u=t(70),p=t(6),m=t(93),g=t(69),h=m("slice"),f=p("species"),b=r.Array,v=Math.max;o({target:"Array",proto:!0,forced:!h},{slice:function(n,e){var t,o,r,p=d(this),m=c(p),h=l(n,m),y=l(void 0===e?m:e,m);if(a(p)&&(t=p.constructor,(i(t)&&(t===b||a(t.prototype))||s(t)&&null===(t=t[f]))&&(t=void 0),t===b||void 0===t))return g(p,h,y);for(o=new(void 0===t?b:t)(v(y-h,0)),r=0;h<y;h++,r++)h in p&&u(o,r,p[h]);return o.length=r,o}})},function(n,e,t){var o=t(3),r=t(18),a=t(86);o({target:"Object",stat:!0,forced:t(4)((function(){a(1)}))},{keys:function(n){return a(r(n))}})},function(n,e,t){var o=t(8),r=t(12),a=Function.prototype,i=o&&Object.getOwnPropertyDescriptor,s=r(a,"name"),l=s&&"something"===function(){}.name,c=s&&(!o||o&&i(a,"name").configurable);n.exports={EXISTS:s,PROPER:l,CONFIGURABLE:c}},function(n,e,t){var o=t(0),r=t(124),a=t(7),i=t(25),s=t(6)("toStringTag"),l=o.Object,c="Arguments"==i(function(){return arguments}());n.exports=r?i:function(n){var e,t,o;return void 0===n?"Undefined":null===n?"Null":"string"==typeof(t=function(n,e){try{return n[e]}catch(n){}}(e=l(n),s))?t:c?i(e):"Object"==(o=i(e))&&a(e.callee)?"Arguments":o}},function(n,e,t){t(3)({target:"Array",stat:!0},{isArray:t(61)})},function(n,e,t){var o=t(30),r=t(114);(n.exports=function(n,e){return r[n]||(r[n]=void 0!==e?e:{})})("versions",[]).push({version:"3.21.1",mode:o?"pure":"global",copyright:"© 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.21.1/LICENSE",source:"https://github.com/zloirock/core-js"})},function(n,e,t){var o=t(2),r=0,a=Math.random(),i=o(1..toString);n.exports=function(n){return"Symbol("+(void 0===n?"":n)+")_"+i(++r+a,36)}},function(n,e,t){var o=t(0),r=t(10),a=o.document,i=r(a)&&r(a.createElement);n.exports=function(n){return i?a.createElement(n):{}}},function(n,e,t){var o=t(160),r=t(84);n.exports=function(n){var e=o(n,"string");return r(e)?e:e+""}},function(n,e,t){var o=t(0),r=t(19),a=t(7),i=t(34),s=t(157),l=o.Object;n.exports=s?function(n){return"symbol"==typeof n}:function(n){var e=r("Symbol");return a(e)&&i(e.prototype,l(n))}},function(n,e,t){var o=t(0).String;n.exports=function(n){try{return o(n)}catch(n){return"Object"}}},function(n,e,t){var o=t(161),r=t(119);n.exports=Object.keys||function(n){return o(n,r)}},function(n,e,t){var o=t(80),r=t(81),a=o("keys");n.exports=function(n){return a[n]||(a[n]=r(n))}},function(n,e,t){var o=t(2),r=t(7),a=t(114),i=o(Function.toString);r(a.inspectSource)||(a.inspectSource=function(n){return i(n)}),n.exports=a.inspectSource},function(n,e,t){var o=t(4),r=t(7),a=/#|\.prototype\./,i=function(n,e){var t=l[s(n)];return t==d||t!=c&&(r(e)?o(e):!!e)},s=i.normalize=function(n){return String(n).replace(a,".").toLowerCase()},l=i.data={},c=i.NATIVE="N",d=i.POLYFILL="P";n.exports=i},function(n,e,t){var o=t(2),r=t(4),a=t(7),i=t(78),s=t(19),l=t(88),c=function(){},d=[],u=s("Reflect","construct"),p=/^\s*(?:class|function)\b/,m=o(p.exec),g=!p.exec(c),h=function(n){if(!a(n))return!1;try{return u(c,d,n),!0}catch(n){return!1}},f=function(n){if(!a(n))return!1;switch(i(n)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return g||!!m(p,l(n))}catch(n){return!0}};f.sham=!0,n.exports=!u||r((function(){var n;return h(h.call)||!h(Object)||!h((function(){n=!0}))||n}))?f:h},function(n,e,t){var o=t(25),r=t(0);n.exports="process"==o(r.process)},function(n,e,t){"use strict";t.d(e,"a",(function(){return r}));t(5);function o(n,e,t,o,r,a,i){try{var s=n[a](i),l=s.value}catch(n){return void t(n)}s.done?e(l):Promise.resolve(l).then(o,r)}function r(n){return function(){var e=this,t=arguments;return new Promise((function(r,a){var i=n.apply(e,t);function s(n){o(i,r,a,s,l,"next",n)}function l(n){o(i,r,a,s,l,"throw",n)}s(void 0)}))}}},function(n,e,t){var o=t(4),r=t(6),a=t(54),i=r("species");n.exports=function(n){return a>=51||!o((function(){var e=[];return(e.constructor={})[i]=function(){return{foo:1}},1!==e[n](Boolean).foo}))}},function(n,e,t){"use strict";var o=t(3),r=t(8),a=t(0),i=t(2),s=t(12),l=t(7),c=t(34),d=t(14),u=t(13).f,p=t(121),m=a.Symbol,g=m&&m.prototype;if(r&&l(m)&&(!("description"in g)||void 0!==m().description)){var h={},f=function(){var n=arguments.length<1||void 0===arguments[0]?void 0:d(arguments[0]),e=c(g,this)?new m(n):void 0===n?m():m(n);return""===n&&(h[e]=!0),e};p(f,m),f.prototype=g,g.constructor=f;var b="Symbol(test)"==String(m("test")),v=i(g.toString),y=i(g.valueOf),x=/^Symbol\((.*)\)[^)]+$/,k=i("".replace),w=i("".slice);u(g,"description",{configurable:!0,get:function(){var n=y(this),e=v(n);if(s(h,n))return"";var t=b?w(e,7,-1):k(e,x,"$1");return""===t?void 0:t}}),o({global:!0,forced:!0},{Symbol:f})}},function(n,e,t){"use strict";var o,r,a=t(15),i=t(2),s=t(14),l=t(129),c=t(96),d=t(80),u=t(37),p=t(31).get,m=t(130),g=t(189),h=d("native-string-replace",String.prototype.replace),f=RegExp.prototype.exec,b=f,v=i("".charAt),y=i("".indexOf),x=i("".replace),k=i("".slice),w=(r=/b*/g,a(f,o=/a/,"a"),a(f,r,"a"),0!==o.lastIndex||0!==r.lastIndex),E=c.BROKEN_CARET,T=void 0!==/()??/.exec("")[1];(w||T||E||m||g)&&(b=function(n){var e,t,o,r,i,c,d,m=this,g=p(m),_=s(n),j=g.raw;if(j)return j.lastIndex=m.lastIndex,e=a(b,j,_),m.lastIndex=j.lastIndex,e;var S=g.groups,A=E&&m.sticky,C=a(l,m),I=m.source,D=0,P=_;if(A&&(C=x(C,"y",""),-1===y(C,"g")&&(C+="g"),P=k(_,m.lastIndex),m.lastIndex>0&&(!m.multiline||m.multiline&&"\n"!==v(_,m.lastIndex-1))&&(I="(?: "+I+")",P=" "+P,D++),t=new RegExp("^(?:"+I+")",C)),T&&(t=new RegExp("^"+I+"$(?!\\s)",C)),w&&(o=m.lastIndex),r=a(f,A?t:m,P),A?r?(r.input=k(r.input,D),r[0]=k(r[0],D),r.index=m.lastIndex,m.lastIndex+=r[0].length):m.lastIndex=0:w&&r&&(m.lastIndex=m.global?r.index+r[0].length:o),T&&r&&r.length>1&&a(h,r[0],t,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(r[i]=void 0)})),r&&S)for(r.groups=c=u(null),i=0;i<S.length;i++)c[(d=S[i])[0]]=r[d[1]];return r}),n.exports=b},function(n,e,t){var o=t(4),r=t(0).RegExp,a=o((function(){var n=r("a","y");return n.lastIndex=2,null!=n.exec("abcd")})),i=a||o((function(){return!r("a","y").sticky})),s=a||o((function(){var n=r("^r","gy");return n.lastIndex=2,null!=n.exec("str")}));n.exports={BROKEN_CARET:s,MISSED_STICKY:i,UNSUPPORTED_Y:a}},function(n,e,t){var o=t(283),r=t(284),a=t(285),i=t(286),s=t(287);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var o=n[e];this.set(o[0],o[1])}}l.prototype.clear=o,l.prototype.delete=r,l.prototype.get=a,l.prototype.has=i,l.prototype.set=s,n.exports=l},function(n,e,t){var o=t(195);n.exports=function(n,e){for(var t=n.length;t--;)if(o(n[t][0],e))return t;return-1}},function(n,e,t){var o=t(43)(Object,"create");n.exports=o},function(n,e,t){var o=t(305);n.exports=function(n,e){var t=n.__data__;return o(e)?t["string"==typeof e?"string":"hash"]:t.map}},function(n,e,t){var o=t(140);n.exports=function(n){if("string"==typeof n||o(n))return n;var e=n+"";return"0"==e&&1/n==-1/0?"-0":e}},function(n,e,t){var o=t(3),r=t(8),a=t(13).f;o({target:"Object",stat:!0,forced:Object.defineProperty!==a,sham:!r},{defineProperty:a})},function(n,e,t){"use strict";t.d(e,"a",(function(){return r}));t(75),t(5),t(51),t(151),t(29),t(17),t(58);var o=t(74);function r(n,e){if(n){if("string"==typeof n)return Object(o.a)(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Object(o.a)(n,e):void 0}}},function(n,e,t){var o,r;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(r="function"==typeof(o=function(){var n,e,t={version:"0.2.0"},o=t.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function r(n,e,t){return n<e?e:n>t?t:n}function a(n){return 100*(-1+n)}t.configure=function(n){var e,t;for(e in n)void 0!==(t=n[e])&&n.hasOwnProperty(e)&&(o[e]=t);return this},t.status=null,t.set=function(n){var e=t.isStarted();n=r(n,o.minimum,1),t.status=1===n?null:n;var l=t.render(!e),c=l.querySelector(o.barSelector),d=o.speed,u=o.easing;return l.offsetWidth,i((function(e){""===o.positionUsing&&(o.positionUsing=t.getPositioningCSS()),s(c,function(n,e,t){var r;return(r="translate3d"===o.positionUsing?{transform:"translate3d("+a(n)+"%,0,0)"}:"translate"===o.positionUsing?{transform:"translate("+a(n)+"%,0)"}:{"margin-left":a(n)+"%"}).transition="all "+e+"ms "+t,r}(n,d,u)),1===n?(s(l,{transition:"none",opacity:1}),l.offsetWidth,setTimeout((function(){s(l,{transition:"all "+d+"ms linear",opacity:0}),setTimeout((function(){t.remove(),e()}),d)}),d)):setTimeout(e,d)})),this},t.isStarted=function(){return"number"==typeof t.status},t.start=function(){t.status||t.set(0);var n=function(){setTimeout((function(){t.status&&(t.trickle(),n())}),o.trickleSpeed)};return o.trickle&&n(),this},t.done=function(n){return n||t.status?t.inc(.3+.5*Math.random()).set(1):this},t.inc=function(n){var e=t.status;return e?("number"!=typeof n&&(n=(1-e)*r(Math.random()*e,.1,.95)),e=r(e+n,0,.994),t.set(e)):t.start()},t.trickle=function(){return t.inc(Math.random()*o.trickleRate)},n=0,e=0,t.promise=function(o){return o&&"resolved"!==o.state()?(0===e&&t.start(),n++,e++,o.always((function(){0==--e?(n=0,t.done()):t.set((n-e)/n)})),this):this},t.render=function(n){if(t.isRendered())return document.getElementById("nprogress");c(document.documentElement,"nprogress-busy");var e=document.createElement("div");e.id="nprogress",e.innerHTML=o.template;var r,i=e.querySelector(o.barSelector),l=n?"-100":a(t.status||0),d=document.querySelector(o.parent);return s(i,{transition:"all 0 linear",transform:"translate3d("+l+"%,0,0)"}),o.showSpinner||(r=e.querySelector(o.spinnerSelector))&&p(r),d!=document.body&&c(d,"nprogress-custom-parent"),d.appendChild(e),e},t.remove=function(){d(document.documentElement,"nprogress-busy"),d(document.querySelector(o.parent),"nprogress-custom-parent");var n=document.getElementById("nprogress");n&&p(n)},t.isRendered=function(){return!!document.getElementById("nprogress")},t.getPositioningCSS=function(){var n=document.body.style,e="WebkitTransform"in n?"Webkit":"MozTransform"in n?"Moz":"msTransform"in n?"ms":"OTransform"in n?"O":"";return e+"Perspective"in n?"translate3d":e+"Transform"in n?"translate":"margin"};var i=function(){var n=[];function e(){var t=n.shift();t&&t(e)}return function(t){n.push(t),1==n.length&&e()}}(),s=function(){var n=["Webkit","O","Moz","ms"],e={};function t(t){return t=t.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(n,e){return e.toUpperCase()})),e[t]||(e[t]=function(e){var t=document.body.style;if(e in t)return e;for(var o,r=n.length,a=e.charAt(0).toUpperCase()+e.slice(1);r--;)if((o=n[r]+a)in t)return o;return e}(t))}function o(n,e,o){e=t(e),n.style[e]=o}return function(n,e){var t,r,a=arguments;if(2==a.length)for(t in e)void 0!==(r=e[t])&&e.hasOwnProperty(t)&&o(n,t,r);else o(n,a[1],a[2])}}();function l(n,e){return("string"==typeof n?n:u(n)).indexOf(" "+e+" ")>=0}function c(n,e){var t=u(n),o=t+e;l(t,e)||(n.className=o.substring(1))}function d(n,e){var t,o=u(n);l(n,e)&&(t=o.replace(" "+e+" "," "),n.className=t.substring(1,t.length-1))}function u(n){return(" "+(n.className||"")+" ").replace(/\s+/gi," ")}function p(n){n&&n.parentNode&&n.parentNode.removeChild(n)}return t})?o.call(e,t,e,n):o)||(n.exports=r)},function(n,e,t){var o=t(2),r=t(16),a=Date.prototype,i=o(a.toString),s=o(a.getTime);"Invalid Date"!=String(new Date(NaN))&&r(a,"toString",(function(){var n=s(this);return n==n?i(this):"Invalid Date"}))},function(n,e,t){"use strict";var o=t(38),r=t(15),a=t(2),i=t(111),s=t(126),l=t(9),c=t(20),d=t(125),u=t(132),p=t(55),m=t(14),g=t(48),h=t(127),f=t(112),b=t(95),v=t(96),y=t(4),x=v.UNSUPPORTED_Y,k=Math.min,w=[].push,E=a(/./.exec),T=a(w),_=a("".slice);i("split",(function(n,e,t){var a;return a="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(n,t){var a=m(c(this)),i=void 0===t?4294967295:t>>>0;if(0===i)return[];if(void 0===n)return[a];if(!s(n))return r(e,a,n,i);for(var l,d,u,p=[],g=(n.ignoreCase?"i":"")+(n.multiline?"m":"")+(n.unicode?"u":"")+(n.sticky?"y":""),f=0,v=new RegExp(n.source,g+"g");(l=r(b,v,a))&&!((d=v.lastIndex)>f&&(T(p,_(a,f,l.index)),l.length>1&&l.index<a.length&&o(w,p,h(l,1)),u=l[0].length,f=d,p.length>=i));)v.lastIndex===l.index&&v.lastIndex++;return f===a.length?!u&&E(v,"")||T(p,""):T(p,_(a,f)),p.length>i?h(p,0,i):p}:"0".split(void 0,0).length?function(n,t){return void 0===n&&0===t?[]:r(e,this,n,t)}:e,[function(e,t){var o=c(this),i=null==e?void 0:g(e,n);return i?r(i,e,o,t):r(a,m(o),e,t)},function(n,o){var r=l(this),i=m(n),s=t(a,r,i,o,a!==e);if(s.done)return s.value;var c=d(r,RegExp),g=r.unicode,h=(r.ignoreCase?"i":"")+(r.multiline?"m":"")+(r.unicode?"u":"")+(x?"g":"y"),b=new c(x?"^(?:"+r.source+")":r,h),v=void 0===o?4294967295:o>>>0;if(0===v)return[];if(0===i.length)return null===f(b,i)?[i]:[];for(var y=0,w=0,E=[];w<i.length;){b.lastIndex=x?0:w;var j,S=f(b,x?_(i,w):i);if(null===S||(j=k(p(b.lastIndex+(x?w:0)),i.length))===y)w=u(i,w,g);else{if(T(E,_(i,y,w)),E.length===v)return E;for(var A=1;A<=S.length-1;A++)if(T(E,S[A]),E.length===v)return E;w=y=j}}return T(E,_(i,y)),E}]}),!!y((function(){var n=/(?:)/,e=n.exec;n.exec=function(){return e.apply(this,arguments)};var t="ab".split(n);return 2!==t.length||"a"!==t[0]||"b"!==t[1]})),x)},function(n,e,t){"use strict";var o=t(2),r=t(77).PROPER,a=t(16),i=t(9),s=t(34),l=t(14),c=t(4),d=t(129),u=RegExp.prototype,p=u.toString,m=o(d),g=c((function(){return"/a/b"!=p.call({source:"a",flags:"b"})})),h=r&&"toString"!=p.name;(g||h)&&a(RegExp.prototype,"toString",(function(){var n=i(this),e=l(n.source),t=n.flags;return"/"+e+"/"+l(void 0===t&&s(u,n)&&!("flags"in u)?m(n):t)}),{unsafe:!0})},function(n,e,t){var o=t(6),r=t(37),a=t(13),i=o("unscopables"),s=Array.prototype;null==s[i]&&a.f(s,i,{configurable:!0,value:r(null)}),n.exports=function(n){s[i][n]=!0}},function(n,e,t){var o=t(59),r=Math.max,a=Math.min;n.exports=function(n,e){var t=o(n);return t<0?r(t+e,0):a(t,e)}},function(n,e,t){var o=t(78),r=t(48),a=t(67),i=t(6)("iterator");n.exports=function(n){if(null!=n)return r(n,i)||r(n,"@@iterator")||a[o(n)]}},function(n,e,t){"use strict";t(17);var o=t(2),r=t(16),a=t(95),i=t(4),s=t(6),l=t(26),c=s("species"),d=RegExp.prototype;n.exports=function(n,e,t,u){var p=s(n),m=!i((function(){var e={};return e[p]=function(){return 7},7!=""[n](e)})),g=m&&!i((function(){var e=!1,t=/a/;return"split"===n&&((t={}).constructor={},t.constructor[c]=function(){return t},t.flags="",t[p]=/./[p]),t.exec=function(){return e=!0,null},t[p](""),!e}));if(!m||!g||t){var h=o(/./[p]),f=e(p,""[n],(function(n,e,t,r,i){var s=o(n),l=e.exec;return l===a||l===d.exec?m&&!i?{done:!0,value:h(e,t,r)}:{done:!0,value:s(t,e,r)}:{done:!1}}));r(String.prototype,n,f[0]),r(d,p,f[1])}u&&l(d[p],"sham",!0)}},function(n,e,t){var o=t(0),r=t(15),a=t(9),i=t(7),s=t(25),l=t(95),c=o.TypeError;n.exports=function(n,e){var t=n.exec;if(i(t)){var o=r(t,n,e);return null!==o&&a(o),o}if("RegExp"===s(n))return r(l,n,e);throw c("RegExp#exec called on incompatible receiver")}},function(n,e,t){"use strict";var o=t(3),r=t(2),a=t(64),i=t(21),s=t(47),l=r([].join),c=a!=Object,d=s("join",",");o({target:"Array",proto:!0,forced:c||!d},{join:function(n){return l(i(this),void 0===n?",":n)}})},function(n,e,t){var o=t(0),r=t(115),a=o["__core-js_shared__"]||r("__core-js_shared__",{});n.exports=a},function(n,e,t){var o=t(0),r=Object.defineProperty;n.exports=function(n,e){try{r(o,n,{value:e,configurable:!0,writable:!0})}catch(t){o[n]=e}return e}},function(n,e,t){var o=t(54),r=t(4);n.exports=!!Object.getOwnPropertySymbols&&!r((function(){var n=Symbol();return!String(n)||!(Object(n)instanceof Symbol)||!Symbol.sham&&o&&o<41}))},function(n,e,t){var o=t(8),r=t(158),a=t(13),i=t(9),s=t(21),l=t(86);e.f=o&&!r?Object.defineProperties:function(n,e){i(n);for(var t,o=s(e),r=l(e),c=r.length,d=0;c>d;)a.f(n,t=r[d++],o[t]);return n}},function(n,e,t){var o=t(21),r=t(109),a=t(27),i=function(n){return function(e,t,i){var s,l=o(e),c=a(l),d=r(i,c);if(n&&t!=t){for(;c>d;)if((s=l[d++])!=s)return!0}else for(;c>d;d++)if((n||d in l)&&l[d]===t)return n||d||0;return!n&&-1}};n.exports={includes:i(!0),indexOf:i(!1)}},function(n,e){n.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(n,e,t){"use strict";var o={}.propertyIsEnumerable,r=Object.getOwnPropertyDescriptor,a=r&&!o.call({1:2},1);e.f=a?function(n){var e=r(this,n);return!!e&&e.enumerable}:o},function(n,e,t){var o=t(12),r=t(164),a=t(40),i=t(13);n.exports=function(n,e,t){for(var s=r(e),l=i.f,c=a.f,d=0;d<s.length;d++){var u=s[d];o(n,u)||t&&o(t,u)||l(n,u,c(e,u))}}},function(n,e){e.f=Object.getOwnPropertySymbols},function(n,e,t){var o=t(0),r=t(12),a=t(7),i=t(18),s=t(87),l=t(166),c=s("IE_PROTO"),d=o.Object,u=d.prototype;n.exports=l?d.getPrototypeOf:function(n){var e=i(n);if(r(e,c))return e[c];var t=e.constructor;return a(t)&&e instanceof t?t.prototype:e instanceof d?u:null}},function(n,e,t){var o={};o[t(6)("toStringTag")]="z",n.exports="[object z]"===String(o)},function(n,e,t){var o=t(9),r=t(172),a=t(6)("species");n.exports=function(n,e){var t,i=o(n).constructor;return void 0===i||null==(t=o(i)[a])?e:r(t)}},function(n,e,t){var o=t(10),r=t(25),a=t(6)("match");n.exports=function(n){var e;return o(n)&&(void 0!==(e=n[a])?!!e:"RegExp"==r(n))}},function(n,e,t){var o=t(0),r=t(109),a=t(27),i=t(70),s=o.Array,l=Math.max;n.exports=function(n,e,t){for(var o=a(n),c=r(e,o),d=r(void 0===t?o:t,o),u=s(l(d-c,0)),p=0;c<d;c++,p++)i(u,p,n[c]);return u.length=p,u}},function(n,e,t){t(188)("iterator")},function(n,e,t){"use strict";var o=t(9);n.exports=function(){var n=o(this),e="";return n.global&&(e+="g"),n.ignoreCase&&(e+="i"),n.multiline&&(e+="m"),n.dotAll&&(e+="s"),n.unicode&&(e+="u"),n.sticky&&(e+="y"),e}},function(n,e,t){var o=t(4),r=t(0).RegExp;n.exports=o((function(){var n=r(".","s");return!(n.dotAll&&n.exec("\n")&&"s"===n.flags)}))},function(n,e,t){var o=t(7),r=t(10),a=t(68);n.exports=function(n,e,t){var i,s;return a&&o(i=e.constructor)&&i!==t&&r(s=i.prototype)&&s!==t.prototype&&a(n,s),n}},function(n,e,t){"use strict";var o=t(177).charAt;n.exports=function(n,e,t){return e+(t?o(n,e).length:1)}},function(n,e,t){var o=t(277),r=t(52),a=Object.prototype,i=a.hasOwnProperty,s=a.propertyIsEnumerable,l=o(function(){return arguments}())?o:function(n){return r(n)&&i.call(n,"callee")&&!s.call(n,"callee")};n.exports=l},function(n,e,t){var o=t(43)(t(35),"Map");n.exports=o},function(n,e){n.exports=function(n){var e=typeof n;return null!=n&&("object"==e||"function"==e)}},function(n,e,t){var o=t(297),r=t(304),a=t(306),i=t(307),s=t(308);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var o=n[e];this.set(o[0],o[1])}}l.prototype.clear=o,l.prototype.delete=r,l.prototype.get=a,l.prototype.has=i,l.prototype.set=s,n.exports=l},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n){t[++e]=n})),t}},function(n,e){n.exports=function(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=9007199254740991}},function(n,e,t){var o=t(32),r=t(140),a=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,i=/^\w*$/;n.exports=function(n,e){if(o(n))return!1;var t=typeof n;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=n&&!r(n))||(i.test(n)||!a.test(n)||null!=e&&n in Object(e))}},function(n,e,t){var o=t(63),r=t(52);n.exports=function(n){return"symbol"==typeof n||r(n)&&"[object Symbol]"==o(n)}},function(n,e){n.exports=function(n){return n}},function(n,e,t){"use strict";t.d(e,"a",(function(){return r}));t(79);t(71),t(94),t(5),t(128),t(29),t(36);var o=t(103);t(42),t(28);function r(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var o,r,a=[],i=!0,s=!1;try{for(t=t.call(n);!(i=(o=t.next()).done)&&(a.push(o.value),!e||a.length!==e);i=!0);}catch(n){s=!0,r=n}finally{try{i||null==t.return||t.return()}finally{if(s)throw r}}return a}}(n,e)||Object(o.a)(n,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},function(n,e,t){"use strict";t.r(e);t(17),t(106),t(44),t(46);var o={name:"LastReadingPopup",data:function(){return{lastReading:null,show:!1}},computed:{popupConfig:function(){var n={"/":{message:"检测到您上一次阅读的位置，是否移至该位置？",sureButtonText:"确定",cancelButtonText:"取消"},"/zh/":{message:"检测到您上一次阅读的位置，是否移至该位置？",sureButtonText:"前往",cancelButtonText:"取消"}},e=this.$lang.split("-")[0];return n["/".concat(e,"/")]||n[this.$localePath]||n},message:function(){var n=this.popupConfig;return n&&n.message||n["/"].message},sureButtonText:function(){var n=this.popupConfig;return n&&n.sureButtonText||n["/"].sureButtonText},cancelButtonText:function(){var n=this.popupConfig;return n&&n.cancelButtonText||n["/"].cancelButtonText}},mounted:function(){var n=this;window.ActiveXObject||"ActiveXObject"in window?setTimeout((function(){window.addEventListener("load",n.init())}),1e3):setTimeout((function(){window.addEventListener("load",n.init)}),1e3)},methods:{init:function(){this.lastReading=JSON.parse(localStorage.getItem("lastReading")),this.lastReading&&(this.$route.path===this.lastReading.path?this.goto():(this.show=!0,setTimeout(this.clean,1e4)))},goto:function(){var n=this;this.$route.path!==this.lastReading.path?this.$router.replace(this.lastReading.path).then((function(){document.documentElement.scrollTop=n.lastReading.scrollTop,n.clean()})):this.$nextTick((function(){document.documentElement.scrollTop=n.lastReading.scrollTop}))},dontgoto:function(){this.clean()},clean:function(){this.show=!1,localStorage.removeItem("lastReading")}}},r=(t(372),t(11)),a=Object(r.a)(o,(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("transition",{attrs:{name:"sw-update-popup"}},[n.show?t("div",{staticClass:"sw-update-popup"},[n._v("\n    "+n._s(n.message)+"\n\n    "),t("br"),n._v(" "),t("button",{on:{click:n.goto}},[n._v("\n      "+n._s(n.sureButtonText)+"\n    ")]),n._v(" "),t("button",{on:{click:n.dontgoto}},[n._v("\n      "+n._s(n.cancelButtonText)+"\n    ")])]):n._e()])}),[],!1,null,"181714f2",null);e.default=a.exports},function(n,e,t){"use strict";var o=t(8),r=t(0),a=t(2),i=t(89),s=t(16),l=t(12),c=t(131),d=t(34),u=t(84),p=t(160),m=t(4),g=t(56).f,h=t(40).f,f=t(13).f,b=t(371),v=t(225).trim,y=r.Number,x=y.prototype,k=r.TypeError,w=a("".slice),E=a("".charCodeAt),T=function(n){var e=p(n,"number");return"bigint"==typeof e?e:_(e)},_=function(n){var e,t,o,r,a,i,s,l,c=p(n,"number");if(u(c))throw k("Cannot convert a Symbol value to a number");if("string"==typeof c&&c.length>2)if(c=v(c),43===(e=E(c,0))||45===e){if(88===(t=E(c,2))||120===t)return NaN}else if(48===e){switch(E(c,1)){case 66:case 98:o=2,r=49;break;case 79:case 111:o=8,r=55;break;default:return+c}for(i=(a=w(c,2)).length,s=0;s<i;s++)if((l=E(a,s))<48||l>r)return NaN;return parseInt(a,o)}return+c};if(i("Number",!y(" 0o1")||!y("0b1")||y("+0x1"))){for(var j,S=function(n){var e=arguments.length<1?0:y(T(n)),t=this;return d(x,t)&&m((function(){b(t)}))?c(Object(e),t,S):e},A=o?g(y):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range".split(","),C=0;A.length>C;C++)l(y,j=A[C])&&!l(S,j)&&f(S,j,h(y,j));S.prototype=x,x.constructor=S,s(r,"Number",S)}},function(n,e,t){"use strict";var o=t(3),r=t(2),a=t(118).indexOf,i=t(47),s=r([].indexOf),l=!!s&&1/s([1],1,-0)<0,c=i("indexOf");o({target:"Array",proto:!0,forced:l||!c},{indexOf:function(n){var e=arguments.length>1?arguments[1]:void 0;return l?s(this,n,e)||0:a(this,n,e)}})},function(n,e,t){var o=function(n){"use strict";var e=Object.prototype,t=e.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},r=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",i=o.toStringTag||"@@toStringTag";function s(n,e,t){return Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}),n[e]}try{s({},"")}catch(n){s=function(n,e,t){return n[e]=t}}function l(n,e,t,o){var r=e&&e.prototype instanceof u?e:u,a=Object.create(r.prototype),i=new E(o||[]);return a._invoke=function(n,e,t){var o="suspendedStart";return function(r,a){if("executing"===o)throw new Error("Generator is already running");if("completed"===o){if("throw"===r)throw a;return _()}for(t.method=r,t.arg=a;;){var i=t.delegate;if(i){var s=x(i,t);if(s){if(s===d)continue;return s}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===o)throw o="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);o="executing";var l=c(n,e,t);if("normal"===l.type){if(o=t.done?"completed":"suspendedYield",l.arg===d)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(o="completed",t.method="throw",t.arg=l.arg)}}}(n,t,i),a}function c(n,e,t){try{return{type:"normal",arg:n.call(e,t)}}catch(n){return{type:"throw",arg:n}}}n.wrap=l;var d={};function u(){}function p(){}function m(){}var g={};s(g,r,(function(){return this}));var h=Object.getPrototypeOf,f=h&&h(h(T([])));f&&f!==e&&t.call(f,r)&&(g=f);var b=m.prototype=u.prototype=Object.create(g);function v(n){["next","throw","return"].forEach((function(e){s(n,e,(function(n){return this._invoke(e,n)}))}))}function y(n,e){var o;this._invoke=function(r,a){function i(){return new e((function(o,i){!function o(r,a,i,s){var l=c(n[r],n,a);if("throw"!==l.type){var d=l.arg,u=d.value;return u&&"object"==typeof u&&t.call(u,"__await")?e.resolve(u.__await).then((function(n){o("next",n,i,s)}),(function(n){o("throw",n,i,s)})):e.resolve(u).then((function(n){d.value=n,i(d)}),(function(n){return o("throw",n,i,s)}))}s(l.arg)}(r,a,o,i)}))}return o=o?o.then(i,i):i()}}function x(n,e){var t=n.iterator[e.method];if(void 0===t){if(e.delegate=null,"throw"===e.method){if(n.iterator.return&&(e.method="return",e.arg=void 0,x(n,e),"throw"===e.method))return d;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var o=c(t,n.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,d;var r=o.arg;return r?r.done?(e[n.resultName]=r.value,e.next=n.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,d):r:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,d)}function k(n){var e={tryLoc:n[0]};1 in n&&(e.catchLoc=n[1]),2 in n&&(e.finallyLoc=n[2],e.afterLoc=n[3]),this.tryEntries.push(e)}function w(n){var e=n.completion||{};e.type="normal",delete e.arg,n.completion=e}function E(n){this.tryEntries=[{tryLoc:"root"}],n.forEach(k,this),this.reset(!0)}function T(n){if(n){var e=n[r];if(e)return e.call(n);if("function"==typeof n.next)return n;if(!isNaN(n.length)){var o=-1,a=function e(){for(;++o<n.length;)if(t.call(n,o))return e.value=n[o],e.done=!1,e;return e.value=void 0,e.done=!0,e};return a.next=a}}return{next:_}}function _(){return{value:void 0,done:!0}}return p.prototype=m,s(b,"constructor",m),s(m,"constructor",p),p.displayName=s(m,i,"GeneratorFunction"),n.isGeneratorFunction=function(n){var e="function"==typeof n&&n.constructor;return!!e&&(e===p||"GeneratorFunction"===(e.displayName||e.name))},n.mark=function(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,m):(n.__proto__=m,s(n,i,"GeneratorFunction")),n.prototype=Object.create(b),n},n.awrap=function(n){return{__await:n}},v(y.prototype),s(y.prototype,a,(function(){return this})),n.AsyncIterator=y,n.async=function(e,t,o,r,a){void 0===a&&(a=Promise);var i=new y(l(e,t,o,r),a);return n.isGeneratorFunction(t)?i:i.next().then((function(n){return n.done?n.value:i.next()}))},v(b),s(b,i,"Generator"),s(b,r,(function(){return this})),s(b,"toString",(function(){return"[object Generator]"})),n.keys=function(n){var e=[];for(var t in n)e.push(t);return e.reverse(),function t(){for(;e.length;){var o=e.pop();if(o in n)return t.value=o,t.done=!1,t}return t.done=!0,t}},n.values=T,E.prototype={constructor:E,reset:function(n){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!n)for(var e in this)"t"===e.charAt(0)&&t.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var n=this.tryEntries[0].completion;if("throw"===n.type)throw n.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var e=this;function o(t,o){return i.type="throw",i.arg=n,e.next=t,o&&(e.method="next",e.arg=void 0),!!o}for(var r=this.tryEntries.length-1;r>=0;--r){var a=this.tryEntries[r],i=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var s=t.call(a,"catchLoc"),l=t.call(a,"finallyLoc");if(s&&l){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(s){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(n,e){for(var o=this.tryEntries.length-1;o>=0;--o){var r=this.tryEntries[o];if(r.tryLoc<=this.prev&&t.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var a=r;break}}a&&("break"===n||"continue"===n)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=n,i.arg=e,a?(this.method="next",this.next=a.finallyLoc,d):this.complete(i)},complete:function(n,e){if("throw"===n.type)throw n.arg;return"break"===n.type||"continue"===n.type?this.next=n.arg:"return"===n.type?(this.rval=this.arg=n.arg,this.method="return",this.next="end"):"normal"===n.type&&e&&(this.next=e),d},finish:function(n){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.finallyLoc===n)return this.complete(t.completion,t.afterLoc),w(t),d}},catch:function(n){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.tryLoc===n){var o=t.completion;if("throw"===o.type){var r=o.arg;w(t)}return r}}throw new Error("illegal catch attempt")},delegateYield:function(n,e,t){return this.delegate={iterator:T(n),resultName:e,nextLoc:t},"next"===this.method&&(this.arg=void 0),d}},n}(n.exports);try{regeneratorRuntime=o}catch(n){"object"==typeof globalThis?globalThis.regeneratorRuntime=o:Function("r","regeneratorRuntime = r")(o)}},function(n,e,t){"use strict";var o=t(21),r=t(108),a=t(67),i=t(31),s=t(13).f,l=t(163),c=t(30),d=t(8),u=i.set,p=i.getterFor("Array Iterator");n.exports=l(Array,"Array",(function(n,e){u(this,{type:"Array Iterator",target:o(n),index:0,kind:e})}),(function(){var n=p(this),e=n.target,t=n.kind,o=n.index++;return!e||o>=e.length?(n.target=void 0,{value:void 0,done:!0}):"keys"==t?{value:o,done:!1}:"values"==t?{value:e[o],done:!1}:{value:[o,e[o]],done:!1}}),"values");var m=a.Arguments=a.Array;if(r("keys"),r("values"),r("entries"),!c&&d&&"values"!==m.name)try{s(m,"name",{value:"values"})}catch(n){}},function(n,e,t){var o=t(0),r=t(15),a=t(39),i=t(9),s=t(85),l=t(110),c=o.TypeError;n.exports=function(n,e){var t=arguments.length<2?l(n):e;if(a(t))return i(r(t,n));throw c(s(n)+" is not iterable")}},function(n,e,t){var o=t(0).TypeError;n.exports=function(n,e){if(n<e)throw o("Not enough arguments");return n}},function(n,e,t){var o=t(258);n.exports=function(n,e){return new(o(n))(0===e?0:e)}},function(n,e,t){var o=t(3),r=t(267);o({target:"Array",stat:!0,forced:!t(171)((function(n){Array.from(n)}))},{from:r})},function(n,e,t){var o=t(3),r=t(0),a=t(19),i=t(38),s=t(2),l=t(4),c=r.Array,d=a("JSON","stringify"),u=s(/./.exec),p=s("".charAt),m=s("".charCodeAt),g=s("".replace),h=s(1..toString),f=/[\uD800-\uDFFF]/g,b=/^[\uD800-\uDBFF]$/,v=/^[\uDC00-\uDFFF]$/,y=function(n,e,t){var o=p(t,e-1),r=p(t,e+1);return u(b,n)&&!u(v,r)||u(v,n)&&!u(b,o)?"\\u"+h(m(n,0),16):n},x=l((function(){return'"\\udf06\\ud834"'!==d("\udf06\ud834")||'"\\udead"'!==d("\udead")}));d&&o({target:"JSON",stat:!0,forced:x},{stringify:function(n,e,t){for(var o=0,r=arguments.length,a=c(r);o<r;o++)a[o]=arguments[o];var s=i(d,null,a);return"string"==typeof s?g(s,f,y):s}})},function(n,e){n.exports=function(n){return n.webpackPolyfill||(n.deprecate=function(){},n.paths=[],n.children||(n.children=[]),Object.defineProperty(n,"loaded",{enumerable:!0,get:function(){return n.l}}),Object.defineProperty(n,"id",{enumerable:!0,get:function(){return n.i}}),n.webpackPolyfill=1),n}},function(n,e){var t=/^\s+|\s+$/g,o=/^[-+]0x[0-9a-f]+$/i,r=/^0b[01]+$/i,a=/^0o[0-7]+$/i,i=parseInt,s="object"==typeof global&&global&&global.Object===Object&&global,l="object"==typeof self&&self&&self.Object===Object&&self,c=s||l||Function("return this")(),d=Object.prototype.toString,u=Math.max,p=Math.min,m=function(){return c.Date.now()};function g(n){var e=typeof n;return!!n&&("object"==e||"function"==e)}function h(n){if("number"==typeof n)return n;if(function(n){return"symbol"==typeof n||function(n){return!!n&&"object"==typeof n}(n)&&"[object Symbol]"==d.call(n)}(n))return NaN;if(g(n)){var e="function"==typeof n.valueOf?n.valueOf():n;n=g(e)?e+"":e}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(t,"");var s=r.test(n);return s||a.test(n)?i(n.slice(2),s?2:8):o.test(n)?NaN:+n}n.exports=function(n,e,t){var o,r,a,i,s,l,c=0,d=!1,f=!1,b=!0;if("function"!=typeof n)throw new TypeError("Expected a function");function v(e){var t=o,a=r;return o=r=void 0,c=e,i=n.apply(a,t)}function y(n){return c=n,s=setTimeout(k,e),d?v(n):i}function x(n){var t=n-l;return void 0===l||t>=e||t<0||f&&n-c>=a}function k(){var n=m();if(x(n))return w(n);s=setTimeout(k,function(n){var t=e-(n-l);return f?p(t,a-(n-c)):t}(n))}function w(n){return s=void 0,b&&o?v(n):(o=r=void 0,i)}function E(){var n=m(),t=x(n);if(o=arguments,r=this,l=n,t){if(void 0===s)return y(l);if(f)return s=setTimeout(k,e),v(l)}return void 0===s&&(s=setTimeout(k,e)),i}return e=h(e)||0,g(t)&&(d=!!t.leading,a=(f="maxWait"in t)?u(h(t.maxWait)||0,e):a,b="trailing"in t?!!t.trailing:b),E.cancel=function(){void 0!==s&&clearTimeout(s),c=0,o=l=r=s=void 0},E.flush=function(){return void 0===s?i:w(m())},E}},function(n,e,t){"use strict";var o=t(3),r=t(374).start;o({target:"String",proto:!0,forced:t(376)},{padStart:function(n){return r(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){var o=t(0),r=t(8),a=t(96).MISSED_STICKY,i=t(25),s=t(13).f,l=t(31).get,c=RegExp.prototype,d=o.TypeError;r&&a&&s(c,"sticky",{configurable:!0,get:function(){if(this!==c){if("RegExp"===i(this))return!!l(this).sticky;throw d("Incompatible receiver, RegExp required")}}})},function(n,e,t){var o=t(116);n.exports=o&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(n,e,t){var o=t(8),r=t(4);n.exports=o&&r((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},function(n,e,t){var o=t(8),r=t(4),a=t(82);n.exports=!o&&!r((function(){return 7!=Object.defineProperty(a("div"),"a",{get:function(){return 7}}).a}))},function(n,e,t){var o=t(0),r=t(15),a=t(10),i=t(84),s=t(48),l=t(242),c=t(6),d=o.TypeError,u=c("toPrimitive");n.exports=function(n,e){if(!a(n)||i(n))return n;var t,o=s(n,u);if(o){if(void 0===e&&(e="default"),t=r(o,n,e),!a(t)||i(t))return t;throw d("Can't convert object to primitive value")}return void 0===e&&(e="number"),l(n,e)}},function(n,e,t){var o=t(2),r=t(12),a=t(21),i=t(118).indexOf,s=t(66),l=o([].push);n.exports=function(n,e){var t,o=a(n),c=0,d=[];for(t in o)!r(s,t)&&r(o,t)&&l(d,t);for(;e.length>c;)r(o,t=e[c++])&&(~i(d,t)||l(d,t));return d}},function(n,e,t){var o=t(19);n.exports=o("document","documentElement")},function(n,e,t){"use strict";var o=t(3),r=t(15),a=t(30),i=t(77),s=t(7),l=t(230),c=t(123),d=t(68),u=t(62),p=t(26),m=t(16),g=t(6),h=t(67),f=t(165),b=i.PROPER,v=i.CONFIGURABLE,y=f.IteratorPrototype,x=f.BUGGY_SAFARI_ITERATORS,k=g("iterator"),w=function(){return this};n.exports=function(n,e,t,i,g,f,E){l(t,e,i);var T,_,j,S=function(n){if(n===g&&P)return P;if(!x&&n in I)return I[n];switch(n){case"keys":case"values":case"entries":return function(){return new t(this,n)}}return function(){return new t(this)}},A=e+" Iterator",C=!1,I=n.prototype,D=I[k]||I["@@iterator"]||g&&I[g],P=!x&&D||S(g),z="Array"==e&&I.entries||D;if(z&&(T=c(z.call(new n)))!==Object.prototype&&T.next&&(a||c(T)===y||(d?d(T,y):s(T[k])||m(T,k,w)),u(T,A,!0,!0),a&&(h[A]=w)),b&&"values"==g&&D&&"values"!==D.name&&(!a&&v?p(I,"name","values"):(C=!0,P=function(){return r(D,this)})),g)if(_={values:S("values"),keys:f?P:S("keys"),entries:S("entries")},E)for(j in _)(x||C||!(j in I))&&m(I,j,_[j]);else o({target:e,proto:!0,forced:x||C},_);return a&&!E||I[k]===P||m(I,k,P,{name:g}),h[e]=P,_}},function(n,e,t){var o=t(19),r=t(2),a=t(56),i=t(122),s=t(9),l=r([].concat);n.exports=o("Reflect","ownKeys")||function(n){var e=a.f(s(n)),t=i.f;return t?l(e,t(n)):e}},function(n,e,t){"use strict";var o,r,a,i=t(4),s=t(7),l=t(37),c=t(123),d=t(16),u=t(6),p=t(30),m=u("iterator"),g=!1;[].keys&&("next"in(a=[].keys())?(r=c(c(a)))!==Object.prototype&&(o=r):g=!0),null==o||i((function(){var n={};return o[m].call(n)!==n}))?o={}:p&&(o=l(o)),s(o[m])||d(o,m,(function(){return this})),n.exports={IteratorPrototype:o,BUGGY_SAFARI_ITERATORS:g}},function(n,e,t){var o=t(4);n.exports=!o((function(){function n(){}return n.prototype.constructor=null,Object.getPrototypeOf(new n)!==n.prototype}))},function(n,e,t){var o=t(0);n.exports=o.Promise},function(n,e,t){"use strict";var o=t(19),r=t(13),a=t(6),i=t(8),s=a("species");n.exports=function(n){var e=o(n),t=r.f;i&&e&&!e[s]&&t(e,s,{configurable:!0,get:function(){return this}})}},function(n,e,t){var o=t(6),r=t(67),a=o("iterator"),i=Array.prototype;n.exports=function(n){return void 0!==n&&(r.Array===n||i[a]===n)}},function(n,e,t){var o=t(15),r=t(9),a=t(48);n.exports=function(n,e,t){var i,s;r(n);try{if(!(i=a(n,"return"))){if("throw"===e)throw t;return t}i=o(i,n)}catch(n){s=!0,i=n}if("throw"===e)throw t;if(s)throw i;return r(i),t}},function(n,e,t){var o=t(6)("iterator"),r=!1;try{var a=0,i={next:function(){return{done:!!a++}},return:function(){r=!0}};i[o]=function(){return this},Array.from(i,(function(){throw 2}))}catch(n){}n.exports=function(n,e){if(!e&&!r)return!1;var t=!1;try{var a={};a[o]=function(){return{next:function(){return{done:t=!0}}}},n(a)}catch(n){}return t}},function(n,e,t){var o=t(0),r=t(90),a=t(85),i=o.TypeError;n.exports=function(n){if(r(n))return n;throw i(a(n)+" is not a constructor")}},function(n,e,t){var o,r,a,i,s=t(0),l=t(38),c=t(60),d=t(7),u=t(12),p=t(4),m=t(162),g=t(69),h=t(82),f=t(149),b=t(174),v=t(91),y=s.setImmediate,x=s.clearImmediate,k=s.process,w=s.Dispatch,E=s.Function,T=s.MessageChannel,_=s.String,j=0,S={};try{o=s.location}catch(n){}var A=function(n){if(u(S,n)){var e=S[n];delete S[n],e()}},C=function(n){return function(){A(n)}},I=function(n){A(n.data)},D=function(n){s.postMessage(_(n),o.protocol+"//"+o.host)};y&&x||(y=function(n){f(arguments.length,1);var e=d(n)?n:E(n),t=g(arguments,1);return S[++j]=function(){l(e,void 0,t)},r(j),j},x=function(n){delete S[n]},v?r=function(n){k.nextTick(C(n))}:w&&w.now?r=function(n){w.now(C(n))}:T&&!b?(i=(a=new T).port2,a.port1.onmessage=I,r=c(i.postMessage,i)):s.addEventListener&&d(s.postMessage)&&!s.importScripts&&o&&"file:"!==o.protocol&&!p(D)?(r=D,s.addEventListener("message",I,!1)):r="onreadystatechange"in h("script")?function(n){m.appendChild(h("script")).onreadystatechange=function(){m.removeChild(this),A(n)}}:function(n){setTimeout(C(n),0)}),n.exports={set:y,clear:x}},function(n,e,t){var o=t(33);n.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(o)},function(n,e,t){var o=t(9),r=t(10),a=t(176);n.exports=function(n,e){if(o(n),r(e)&&e.constructor===n)return e;var t=a.f(n);return(0,t.resolve)(e),t.promise}},function(n,e,t){"use strict";var o=t(39),r=function(n){var e,t;this.promise=new n((function(n,o){if(void 0!==e||void 0!==t)throw TypeError("Bad Promise constructor");e=n,t=o})),this.resolve=o(e),this.reject=o(t)};n.exports.f=function(n){return new r(n)}},function(n,e,t){var o=t(2),r=t(59),a=t(14),i=t(20),s=o("".charAt),l=o("".charCodeAt),c=o("".slice),d=function(n){return function(e,t){var o,d,u=a(i(e)),p=r(t),m=u.length;return p<0||p>=m?n?"":void 0:(o=l(u,p))<55296||o>56319||p+1===m||(d=l(u,p+1))<56320||d>57343?n?s(u,p):o:n?c(u,p,p+2):d-56320+(o-55296<<10)+65536}};n.exports={codeAt:d(!1),charAt:d(!0)}},function(n,e){n.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(n,e,t){var o=t(82)("span").classList,r=o&&o.constructor&&o.constructor.prototype;n.exports=r===Object.prototype?void 0:r},function(n,e,t){var o=t(3),r=t(8),a=t(164),i=t(21),s=t(40),l=t(70);o({target:"Object",stat:!0,sham:!r},{getOwnPropertyDescriptors:function(n){for(var e,t,o=i(n),r=s.f,c=a(o),d={},u=0;c.length>u;)void 0!==(t=r(o,e=c[u++]))&&l(d,e,t);return d}})},function(n,e,t){var o=t(3),r=t(4),a=t(18),i=t(123),s=t(166);o({target:"Object",stat:!0,forced:r((function(){i(1)})),sham:!s},{getPrototypeOf:function(n){return i(a(n))}})},function(n,e,t){var o=t(0),r=t(126),a=o.TypeError;n.exports=function(n){if(r(n))throw a("The method doesn't accept regular expressions");return n}},function(n,e,t){var o=t(6)("match");n.exports=function(n){var e=/./;try{"/./"[n](e)}catch(t){try{return e[o]=!1,"/./"[n](e)}catch(n){}}return!1}},function(n,e,t){"use strict";var o=t(50).forEach,r=t(47)("forEach");n.exports=r?[].forEach:function(n){return o(this,n,arguments.length>1?arguments[1]:void 0)}},function(n,e,t){var o=t(4);n.exports=!o((function(){return Object.isExtensible(Object.preventExtensions({}))}))},function(n,e,t){var o=t(25),r=t(21),a=t(56).f,i=t(127),s="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];n.exports.f=function(n){return s&&"Window"==o(n)?function(n){try{return a(n)}catch(n){return i(s)}}(n):a(r(n))}},function(n,e,t){var o=t(6);e.f=o},function(n,e,t){var o=t(266),r=t(12),a=t(187),i=t(13).f;n.exports=function(n){var e=o.Symbol||(o.Symbol={});r(e,n)||i(e,n,{value:a.f(n)})}},function(n,e,t){var o=t(4),r=t(0).RegExp;n.exports=o((function(){var n=r("(?<a>b)","g");return"b"!==n.exec("b").groups.a||"bc"!=="b".replace(n,"$<a>c")}))},function(n,e,t){var o=t(14);n.exports=function(n,e){return void 0===n?arguments.length<2?"":e:o(n)}},function(n,e,t){t(3)({target:"Object",stat:!0,sham:!t(8)},{create:t(37)})},function(n,e){n.exports=function(n,e){for(var t=-1,o=e.length,r=n.length;++t<o;)n[r+t]=e[t];return n}},function(n,e){var t="object"==typeof global&&global&&global.Object===Object&&global;n.exports=t},function(n,e,t){var o=t(97),r=t(288),a=t(289),i=t(290),s=t(291),l=t(292);function c(n){var e=this.__data__=new o(n);this.size=e.size}c.prototype.clear=r,c.prototype.delete=a,c.prototype.get=i,c.prototype.has=s,c.prototype.set=l,n.exports=c},function(n,e){n.exports=function(n,e){return n===e||n!=n&&e!=e}},function(n,e,t){var o=t(63),r=t(135);n.exports=function(n){if(!r(n))return!1;var e=o(n);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},function(n,e){var t=Function.prototype.toString;n.exports=function(n){if(null!=n){try{return t.call(n)}catch(n){}try{return n+""}catch(n){}}return""}},function(n,e,t){var o=t(309),r=t(52);n.exports=function n(e,t,a,i,s){return e===t||(null==e||null==t||!r(e)&&!r(t)?e!=e&&t!=t:o(e,t,a,i,n,s))}},function(n,e,t){var o=t(200),r=t(312),a=t(201);n.exports=function(n,e,t,i,s,l){var c=1&t,d=n.length,u=e.length;if(d!=u&&!(c&&u>d))return!1;var p=l.get(n),m=l.get(e);if(p&&m)return p==e&&m==n;var g=-1,h=!0,f=2&t?new o:void 0;for(l.set(n,e),l.set(e,n);++g<d;){var b=n[g],v=e[g];if(i)var y=c?i(v,b,g,e,n,l):i(b,v,g,n,e,l);if(void 0!==y){if(y)continue;h=!1;break}if(f){if(!r(e,(function(n,e){if(!a(f,e)&&(b===n||s(b,n,t,i,l)))return f.push(e)}))){h=!1;break}}else if(b!==v&&!s(b,v,t,i,l)){h=!1;break}}return l.delete(n),l.delete(e),h}},function(n,e,t){var o=t(136),r=t(310),a=t(311);function i(n){var e=-1,t=null==n?0:n.length;for(this.__data__=new o;++e<t;)this.add(n[e])}i.prototype.add=i.prototype.push=r,i.prototype.has=a,n.exports=i},function(n,e){n.exports=function(n,e){return n.has(e)}},function(n,e,t){var o=t(322),r=t(328),a=t(206);n.exports=function(n){return a(n)?o(n):r(n)}},function(n,e,t){(function(n){var o=t(35),r=t(324),a=e&&!e.nodeType&&e,i=a&&"object"==typeof n&&n&&!n.nodeType&&n,s=i&&i.exports===a?o.Buffer:void 0,l=(s?s.isBuffer:void 0)||r;n.exports=l}).call(this,t(153)(n))},function(n,e){var t=/^(?:0|[1-9]\d*)$/;n.exports=function(n,e){var o=typeof n;return!!(e=null==e?9007199254740991:e)&&("number"==o||"symbol"!=o&&t.test(n))&&n>-1&&n%1==0&&n<e}},function(n,e,t){var o=t(325),r=t(326),a=t(327),i=a&&a.isTypedArray,s=i?r(i):o;n.exports=s},function(n,e,t){var o=t(196),r=t(138);n.exports=function(n){return null!=n&&r(n.length)&&!o(n)}},function(n,e,t){var o=t(43)(t(35),"Set");n.exports=o},function(n,e,t){var o=t(135);n.exports=function(n){return n==n&&!o(n)}},function(n,e){n.exports=function(n,e){return function(t){return null!=t&&(t[n]===e&&(void 0!==e||n in Object(t)))}}},function(n,e,t){var o=t(211),r=t(101);n.exports=function(n,e){for(var t=0,a=(e=o(e,n)).length;null!=n&&t<a;)n=n[r(e[t++])];return t&&t==a?n:void 0}},function(n,e,t){var o=t(32),r=t(139),a=t(339),i=t(342);n.exports=function(n,e){return o(n)?n:r(n,e)?[n]:a(i(n))}},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){t(3)({target:"Object",stat:!0},{setPrototypeOf:t(68)})},function(n,e,t){var o=t(3),r=t(19),a=t(38),i=t(388),s=t(172),l=t(9),c=t(10),d=t(37),u=t(4),p=r("Reflect","construct"),m=Object.prototype,g=[].push,h=u((function(){function n(){}return!(p((function(){}),[],n)instanceof n)})),f=!u((function(){p((function(){}))})),b=h||f;o({target:"Reflect",stat:!0,forced:b,sham:b},{construct:function(n,e){s(n),l(e);var t=arguments.length<3?n:s(arguments[2]);if(f&&!h)return p(n,e,t);if(n==t){switch(e.length){case 0:return new n;case 1:return new n(e[0]);case 2:return new n(e[0],e[1]);case 3:return new n(e[0],e[1],e[2]);case 4:return new n(e[0],e[1],e[2],e[3])}var o=[null];return a(g,o,e),new(a(i,n,o))}var r=t.prototype,u=d(c(r)?r:m),b=a(n,u,e);return c(b)?b:u}})},function(n,e,t){var o=t(3),r=t(0),a=t(62);o({global:!0},{Reflect:{}}),a(r.Reflect,"Reflect",!0)},function(n,e,t){},function(n,e,t){},function(n,e,t){var o=t(275),r=t(280),a=t(351),i=t(359),s=t(368),l=t(235),c=a((function(n){var e=l(n);return s(e)&&(e=void 0),i(o(n,1,s,!0),r(e,2))}));n.exports=c},function(n,e,t){var o;"undefined"!=typeof self&&self,o=function(){return function(n){var e={};function t(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return n[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}return t.m=n,t.c=e,t.d=function(n,e,o){t.o(n,e)||Object.defineProperty(n,e,{configurable:!1,enumerable:!0,get:o})},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=7)}([function(n,e,t){n.exports=!t(6)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(n,e){n.exports=function(n){return"object"==typeof n?null!==n:"function"==typeof n}},function(n,e){n.exports=function(n,e,t,o,r){var a,i=n=n||{},s=typeof n.default;"object"!==s&&"function"!==s||(a=n,i=n.default);var l,c="function"==typeof i?i.options:i;if(e&&(c.render=e.render,c.staticRenderFns=e.staticRenderFns),o&&(c._scopeId=o),r?(l=function(n){(n=n||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(n=__VUE_SSR_CONTEXT__),t&&t.call(this,n),n&&n._registeredComponents&&n._registeredComponents.add(r)},c._ssrRegister=l):t&&(l=t),l){var d=c.functional,u=d?c.render:c.beforeCreate;d?c.render=function(n,e){return l.call(e),u(n,e)}:c.beforeCreate=u?[].concat(u,l):[l]}return{esModule:a,exports:i,options:c}}},function(n,e){var t=n.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=t)},function(n,e){var t=n.exports={version:"2.5.7"};"number"==typeof __e&&(__e=t)},function(n,e,t){var o=t(23),r=t(24),a=t(26),i=Object.defineProperty;e.f=t(0)?Object.defineProperty:function(n,e,t){if(o(n),e=a(e,!0),o(t),r)try{return i(n,e,t)}catch(n){}if("get"in t||"set"in t)throw TypeError("Accessors not supported!");return"value"in t&&(n[e]=t.value),n}},function(n,e){n.exports=function(n){try{return!!n()}catch(n){return!0}}},function(n,e,t){var o,r,a;r=[e,t(8),t(11)],void 0===(a="function"==typeof(o=function(n,e,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Tabs=n.Tab=void 0;var o=a(e),r=a(t);function a(n){return n&&n.__esModule?n:{default:n}}n.default={install:function(n){n.component("tab",o.default),n.component("tabs",r.default)}},n.Tab=o.default,n.Tabs=r.default})?o.apply(e,r):o)||(n.exports=a)},function(n,e,t){var o=t(2)(t(9),t(10),null,null,null);n.exports=o.exports},function(n,e,t){var o,r,a;r=[e],void 0===(a="function"==typeof(o=function(n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default={props:{id:{default:null},name:{required:!0},prefix:{default:""},suffix:{default:""},isDisabled:{default:!1}},data:function(){return{isActive:!1,isVisible:!0}},computed:{header:function(){return this.prefix+this.name+this.suffix},computedId:function(){return this.id?this.id:this.name.toLowerCase().replace(/ /g,"-")},hash:function(){return this.isDisabled?"#":"#"+this.computedId}}}})?o.apply(e,r):o)||(n.exports=a)},function(n,e){n.exports={render:function(){var n=this.$createElement;return(this._self._c||n)("section",{directives:[{name:"show",rawName:"v-show",value:this.isActive,expression:"isActive"}],staticClass:"tabs-component-panel",attrs:{"aria-hidden":!this.isActive,id:this.computedId,role:"tabpanel"}},[this._t("default")],2)},staticRenderFns:[]}},function(n,e,t){var o=t(2)(t(12),t(29),null,null,null);n.exports=o.exports},function(n,e,t){var o,r,a;r=[e,t(13)],void 0===(a="function"==typeof(o=function(n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var t,o=(t=e)&&t.__esModule?t:{default:t};n.default={props:{cacheLifetime:{default:5},options:{type:Object,required:!1,default:function(){return{useUrlFragment:!0,defaultTabHash:null}}}},data:function(){return{tabs:[],activeTabHash:"",activeTabIndex:0,lastActiveTabHash:""}},computed:{storageKey:function(){return"vue-tabs-component.cache."+window.location.host+window.location.pathname}},created:function(){this.tabs=this.$children},mounted:function(){var n=this;if(window.addEventListener("hashchange",(function(){return n.selectTab(window.location.hash)})),this.findTab(window.location.hash))this.selectTab(window.location.hash);else{var e=o.default.get(this.storageKey);this.findTab(e)?this.selectTab(e):null!==this.options.defaultTabHash&&this.findTab("#"+this.options.defaultTabHash)?this.selectTab("#"+this.options.defaultTabHash):this.tabs.length&&this.selectTab(this.tabs[0].hash)}},methods:{findTab:function(n){return this.tabs.find((function(e){return e.hash===n}))},selectTab:function(n,e){e&&!this.options.useUrlFragment&&e.preventDefault();var t=this.findTab(n);t&&(t.isDisabled?e.preventDefault():this.lastActiveTabHash!==t.hash?(this.tabs.forEach((function(n){n.isActive=n.hash===t.hash})),this.$emit("changed",{tab:t}),this.activeTabHash=t.hash,this.activeTabIndex=this.getTabIndex(n),this.lastActiveTabHash=this.activeTabHash=t.hash,o.default.set(this.storageKey,t.hash,this.cacheLifetime)):this.$emit("clicked",{tab:t}))},setTabVisible:function(n,e){var t=this.findTab(n);t&&(t.isVisible=e,t.isActive&&(t.isActive=e,this.tabs.every((function(n,e,t){return!n.isVisible||(n.isActive=!0,!1)}))))},getTabIndex:function(n){var e=this.findTab(n);return this.tabs.indexOf(e)},getTabHash:function(n){var e=this,t=this.tabs.find((function(t){return e.tabs.indexOf(t)===n}));if(t)return t.hash},getActiveTab:function(){return this.findTab(this.activeTabHash)},getActiveTabIndex:function(){return this.getTabIndex(this.activeTabHash)}}}})?o.apply(e,r):o)||(n.exports=a)},function(n,e,t){var o,r,a;r=[e,t(14),t(15)],void 0===(a="function"==typeof(o=function(n,e,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var o=a(e),r=a(t);function a(n){return n&&n.__esModule?n:{default:n}}var i=function(){function n(){(0,o.default)(this,n)}return(0,r.default)(n,[{key:"get",value:function(n){var e=JSON.parse(localStorage.getItem(n));return e?new Date(e.expires)<new Date?(localStorage.removeItem(n),null):e.value:null}},{key:"set",value:function(n,e,t){var o=(new Date).getTime(),r=new Date(o+6e4*t);localStorage.setItem(n,JSON.stringify({value:e,expires:r}))}}]),n}();n.default=new i})?o.apply(e,r):o)||(n.exports=a)},function(n,e,t){"use strict";e.__esModule=!0,e.default=function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}},function(n,e,t){"use strict";e.__esModule=!0;var o,r=t(16),a=(o=r)&&o.__esModule?o:{default:o};e.default=function(){function n(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),(0,a.default)(n,o.key,o)}}return function(e,t,o){return t&&n(e.prototype,t),o&&n(e,o),e}}()},function(n,e,t){n.exports={default:t(17),__esModule:!0}},function(n,e,t){t(18);var o=t(4).Object;n.exports=function(n,e,t){return o.defineProperty(n,e,t)}},function(n,e,t){var o=t(19);o(o.S+o.F*!t(0),"Object",{defineProperty:t(5).f})},function(n,e,t){var o=t(3),r=t(4),a=t(20),i=t(22),s=t(28),l=function(n,e,t){var c,d,u,p=n&l.F,m=n&l.G,g=n&l.S,h=n&l.P,f=n&l.B,b=n&l.W,v=m?r:r[e]||(r[e]={}),y=v.prototype,x=m?o:g?o[e]:(o[e]||{}).prototype;for(c in m&&(t=e),t)(d=!p&&x&&void 0!==x[c])&&s(v,c)||(u=d?x[c]:t[c],v[c]=m&&"function"!=typeof x[c]?t[c]:f&&d?a(u,o):b&&x[c]==u?function(n){var e=function(e,t,o){if(this instanceof n){switch(arguments.length){case 0:return new n;case 1:return new n(e);case 2:return new n(e,t)}return new n(e,t,o)}return n.apply(this,arguments)};return e.prototype=n.prototype,e}(u):h&&"function"==typeof u?a(Function.call,u):u,h&&((v.virtual||(v.virtual={}))[c]=u,n&l.R&&y&&!y[c]&&i(y,c,u)))};l.F=1,l.G=2,l.S=4,l.P=8,l.B=16,l.W=32,l.U=64,l.R=128,n.exports=l},function(n,e,t){var o=t(21);n.exports=function(n,e,t){if(o(n),void 0===e)return n;switch(t){case 1:return function(t){return n.call(e,t)};case 2:return function(t,o){return n.call(e,t,o)};case 3:return function(t,o,r){return n.call(e,t,o,r)}}return function(){return n.apply(e,arguments)}}},function(n,e){n.exports=function(n){if("function"!=typeof n)throw TypeError(n+" is not a function!");return n}},function(n,e,t){var o=t(5),r=t(27);n.exports=t(0)?function(n,e,t){return o.f(n,e,r(1,t))}:function(n,e,t){return n[e]=t,n}},function(n,e,t){var o=t(1);n.exports=function(n){if(!o(n))throw TypeError(n+" is not an object!");return n}},function(n,e,t){n.exports=!t(0)&&!t(6)((function(){return 7!=Object.defineProperty(t(25)("div"),"a",{get:function(){return 7}}).a}))},function(n,e,t){var o=t(1),r=t(3).document,a=o(r)&&o(r.createElement);n.exports=function(n){return a?r.createElement(n):{}}},function(n,e,t){var o=t(1);n.exports=function(n,e){if(!o(n))return n;var t,r;if(e&&"function"==typeof(t=n.toString)&&!o(r=t.call(n)))return r;if("function"==typeof(t=n.valueOf)&&!o(r=t.call(n)))return r;if(!e&&"function"==typeof(t=n.toString)&&!o(r=t.call(n)))return r;throw TypeError("Can't convert object to primitive value")}},function(n,e){n.exports=function(n,e){return{enumerable:!(1&n),configurable:!(2&n),writable:!(4&n),value:e}}},function(n,e){var t={}.hasOwnProperty;n.exports=function(n,e){return t.call(n,e)}},function(n,e){n.exports={render:function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"tabs-component"},[t("ul",{staticClass:"tabs-component-tabs",attrs:{role:"tablist"}},n._l(n.tabs,(function(e,o){return t("li",{directives:[{name:"show",rawName:"v-show",value:e.isVisible,expression:"tab.isVisible"}],key:o,staticClass:"tabs-component-tab",class:{"is-active":e.isActive,"is-disabled":e.isDisabled},attrs:{role:"presentation"}},[t("a",{staticClass:"tabs-component-tab-a",attrs:{"aria-controls":e.hash,"aria-selected":e.isActive,href:e.hash,role:"tab"},domProps:{innerHTML:n._s(e.header)},on:{click:function(t){n.selectTab(e.hash,t)}}})])}))),n._v(" "),t("div",{staticClass:"tabs-component-panels"},[n._t("default")],2)])},staticRenderFns:[]}}])},n.exports=o()},function(n,e,t){"use strict";t.r(e);var o={name:"CodeBlock",props:{title:{type:String,required:!0},active:{type:Boolean,default:!1}}},r=(t(377),t(11)),a=Object(r.a)(o,(function(){var n=this.$createElement;return(this._self._c||n)("div",{staticClass:"theme-code-block",class:{"theme-code-block__active":this.active}},[this._t("default")],2)}),[],!1,null,"4f1e9d0c",null);e.default=a.exports},function(n,e,t){"use strict";t.r(e);t(22),t(5),t(23),t(41),t(24);var o={name:"CodeGroup",data:function(){return{codeTabs:[],activeCodeTabIndex:-1}},watch:{activeCodeTabIndex:function(n){this.codeTabs.forEach((function(n){n.elm.classList.remove("theme-code-block__active")})),this.codeTabs[n].elm.classList.add("theme-code-block__active")}},mounted:function(){var n=this;this.codeTabs=(this.$slots.default||[]).filter((function(n){return Boolean(n.componentOptions)})).map((function(e,t){return""===e.componentOptions.propsData.active&&(n.activeCodeTabIndex=t),{title:e.componentOptions.propsData.title,elm:e.elm}})),-1===this.activeCodeTabIndex&&this.codeTabs.length>0&&(this.activeCodeTabIndex=0)},methods:{changeCodeTab:function(n){this.activeCodeTabIndex=n}}},r=(t(378),t(11)),a=Object(r.a)(o,(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"theme-code-group"},[t("div",{staticClass:"theme-code-group__nav"},[t("ul",{staticClass:"theme-code-group__ul"},n._l(n.codeTabs,(function(e,o){return t("li",{key:e.title,staticClass:"theme-code-group__li"},[t("button",{staticClass:"theme-code-group__nav-tab",class:{"theme-code-group__nav-tab-active":o===n.activeCodeTabIndex},on:{click:function(e){return n.changeCodeTab(o)}}},[n._v("\n            "+n._s(e.title)+"\n          ")])])})),0)]),n._v(" "),n._t("default"),n._v(" "),n.codeTabs.length<1?t("pre",{staticClass:"pre-blank"},[n._v("// Make sure to add code blocks to your code group")]):n._e()],2)}),[],!1,null,"2f5f1757",null);e.default=a.exports},function(n,e,t){var o=t(2),r=t(20),a=t(14),i=t(226),s=o("".replace),l="["+i+"]",c=RegExp("^"+l+l+"*"),d=RegExp(l+l+"*$"),u=function(n){return function(e){var t=a(r(e));return 1&n&&(t=s(t,c,"")),2&n&&(t=s(t,d,"")),t}};n.exports={start:u(1),end:u(2),trim:u(3)}},function(n,e){n.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},function(n,e,t){"use strict";var o=t(3),r=t(50).some;o({target:"Array",proto:!0,forced:!t(47)("some")},{some:function(n){return r(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){"use strict";var o=t(15),r=t(111),a=t(9),i=t(55),s=t(14),l=t(20),c=t(48),d=t(132),u=t(112);r("match",(function(n,e,t){return[function(e){var t=l(this),r=null==e?void 0:c(e,n);return r?o(r,e,t):new RegExp(e)[n](s(t))},function(n){var o=a(this),r=s(n),l=t(e,o,r);if(l.done)return l.value;if(!o.global)return u(o,r);var c=o.unicode;o.lastIndex=0;for(var p,m=[],g=0;null!==(p=u(o,r));){var h=s(p[0]);m[g]=h,""===h&&(o.lastIndex=d(r,i(o.lastIndex),c)),g++}return 0===g?null:m}]}))},function(n,e,t){"use strict";var o=t(3),r=t(50).find,a=t(108),i=!0;"find"in[]&&Array(1).find((function(){i=!1})),o({target:"Array",proto:!0,forced:i},{find:function(n){return r(this,n,arguments.length>1?arguments[1]:void 0)}}),a("find")},function(n,e,t){"use strict";var o=t(165).IteratorPrototype,r=t(37),a=t(49),i=t(62),s=t(67),l=function(){return this};n.exports=function(n,e,t,c){var d=e+" Iterator";return n.prototype=r(o,{next:a(+!c,t)}),i(n,d,!1,!0),s[d]=l,n}},function(n,e,t){var o=t(16);n.exports=function(n,e,t){for(var r in e)o(n,r,e[r],t);return n}},function(n,e,t){var o=t(0),r=t(34),a=o.TypeError;n.exports=function(n,e){if(r(e,n))return n;throw a("Incorrect invocation")}},function(n,e,t){"use strict";var o=t(3),r=t(118).includes,a=t(108);o({target:"Array",proto:!0},{includes:function(n){return r(this,n,arguments.length>1?arguments[1]:void 0)}}),a("includes")},function(n,e,t){"use strict";var o=t(3),r=t(2),a=t(182),i=t(20),s=t(14),l=t(183),c=r("".indexOf);o({target:"String",proto:!0,forced:!l("includes")},{includes:function(n){return!!~c(s(i(this)),s(a(n)),arguments.length>1?arguments[1]:void 0)}})},function(n,e){n.exports=function(n){var e=null==n?0:n.length;return e?n[e-1]:void 0}},function(n,e,t){n.exports=t(373)},function(n,e,t){"use strict";var o=t(3),r=t(2),a=t(39),i=t(18),s=t(27),l=t(14),c=t(4),d=t(238),u=t(47),p=t(379),m=t(380),g=t(54),h=t(381),f=[],b=r(f.sort),v=r(f.push),y=c((function(){f.sort(void 0)})),x=c((function(){f.sort(null)})),k=u("sort"),w=!c((function(){if(g)return g<70;if(!(p&&p>3)){if(m)return!0;if(h)return h<603;var n,e,t,o,r="";for(n=65;n<76;n++){switch(e=String.fromCharCode(n),n){case 66:case 69:case 70:case 72:t=3;break;case 68:case 71:t=4;break;default:t=2}for(o=0;o<47;o++)f.push({k:e+o,v:t})}for(f.sort((function(n,e){return e.v-n.v})),o=0;o<f.length;o++)e=f[o].k.charAt(0),r.charAt(r.length-1)!==e&&(r+=e);return"DGBEFHACIJK"!==r}}));o({target:"Array",proto:!0,forced:y||!x||!k||!w},{sort:function(n){void 0!==n&&a(n);var e=i(this);if(w)return void 0===n?b(e):b(e,n);var t,o,r=[],c=s(e);for(o=0;o<c;o++)o in e&&v(r,e[o]);for(d(r,function(n){return function(e,t){return void 0===t?-1:void 0===e?1:void 0!==n?+n(e,t)||0:l(e)>l(t)?1:-1}}(n)),t=r.length,o=0;o<t;)e[o]=r[o++];for(;o<c;)delete e[o++];return e}})},function(n,e,t){var o=t(127),r=Math.floor,a=function(n,e){var t=n.length,l=r(t/2);return t<8?i(n,e):s(n,a(o(n,0,l),e),a(o(n,l),e),e)},i=function(n,e){for(var t,o,r=n.length,a=1;a<r;){for(o=a,t=n[a];o&&e(n[o-1],t)>0;)n[o]=n[--o];o!==a++&&(n[o]=t)}return n},s=function(n,e,t,o){for(var r=e.length,a=t.length,i=0,s=0;i<r||s<a;)n[i+s]=i<r&&s<a?o(e[i],t[s])<=0?e[i++]:t[s++]:i<r?e[i++]:t[s++];return n};n.exports=a},function(n,e,t){var o=t(8),r=t(0),a=t(2),i=t(89),s=t(131),l=t(26),c=t(13).f,d=t(56).f,u=t(34),p=t(126),m=t(14),g=t(129),h=t(96),f=t(16),b=t(4),v=t(12),y=t(31).enforce,x=t(168),k=t(6),w=t(130),E=t(189),T=k("match"),_=r.RegExp,j=_.prototype,S=r.SyntaxError,A=a(g),C=a(j.exec),I=a("".charAt),D=a("".replace),P=a("".indexOf),z=a("".slice),R=/^\?<[^\s\d!#%&*+<=>@^][^\s!#%&*+<=>@^]*>/,O=/a/g,M=/a/g,B=new _(O)!==O,L=h.MISSED_STICKY,$=h.UNSUPPORTED_Y,N=o&&(!B||L||w||E||b((function(){return M[T]=!1,_(O)!=O||_(M)==M||"/a/i"!=_(O,"i")})));if(i("RegExp",N)){for(var q=function(n,e){var t,o,r,a,i,c,d=u(j,this),g=p(n),h=void 0===e,f=[],b=n;if(!d&&g&&h&&n.constructor===q)return n;if((g||u(j,n))&&(n=n.source,h&&(e="flags"in b?b.flags:A(b))),n=void 0===n?"":m(n),e=void 0===e?"":m(e),b=n,w&&"dotAll"in O&&(o=!!e&&P(e,"s")>-1)&&(e=D(e,/s/g,"")),t=e,L&&"sticky"in O&&(r=!!e&&P(e,"y")>-1)&&$&&(e=D(e,/y/g,"")),E&&(n=(a=function(n){for(var e,t=n.length,o=0,r="",a=[],i={},s=!1,l=!1,c=0,d="";o<=t;o++){if("\\"===(e=I(n,o)))e+=I(n,++o);else if("]"===e)s=!1;else if(!s)switch(!0){case"["===e:s=!0;break;case"("===e:C(R,z(n,o+1))&&(o+=2,l=!0),r+=e,c++;continue;case">"===e&&l:if(""===d||v(i,d))throw new S("Invalid capture group name");i[d]=!0,a[a.length]=[d,c],l=!1,d="";continue}l?d+=e:r+=e}return[r,a]}(n))[0],f=a[1]),i=s(_(n,e),d?this:j,q),(o||r||f.length)&&(c=y(i),o&&(c.dotAll=!0,c.raw=q(function(n){for(var e,t=n.length,o=0,r="",a=!1;o<=t;o++)"\\"!==(e=I(n,o))?a||"."!==e?("["===e?a=!0:"]"===e&&(a=!1),r+=e):r+="[\\s\\S]":r+=e+I(n,++o);return r}(n),t)),r&&(c.sticky=!0),f.length&&(c.groups=f)),n!==b)try{l(i,"source",""===b?"(?:)":b)}catch(n){}return i},F=function(n){n in q||c(q,n,{configurable:!0,get:function(){return _[n]},set:function(e){_[n]=e}})},G=d(_),H=0;G.length>H;)F(G[H++]);j.constructor=q,q.prototype=j,f(r,"RegExp",q)}x("RegExp")},function(n,e,t){var o=t(0),r=t(8),a=t(130),i=t(25),s=t(13).f,l=t(31).get,c=RegExp.prototype,d=o.TypeError;r&&a&&s(c,"dotAll",{configurable:!0,get:function(){if(this!==c){if("RegExp"===i(this))return!!l(this).dotAll;throw d("Incompatible receiver, RegExp required")}}})},function(n,e,t){n.exports=t(391)},function(n,e,t){var o=t(0),r=t(15),a=t(7),i=t(10),s=o.TypeError;n.exports=function(n,e){var t,o;if("string"===e&&a(t=n.toString)&&!i(o=r(t,n)))return o;if(a(t=n.valueOf)&&!i(o=r(t,n)))return o;if("string"!==e&&a(t=n.toString)&&!i(o=r(t,n)))return o;throw s("Can't convert object to primitive value")}},function(n,e,t){var o=t(0),r=t(7),a=t(88),i=o.WeakMap;n.exports=r(i)&&/native code/.test(a(i))},function(n,e,t){var o=t(0),r=t(7),a=o.String,i=o.TypeError;n.exports=function(n){if("object"==typeof n||r(n))return n;throw i("Can't set "+a(n)+" as a prototype")}},function(n,e,t){"use strict";var o,r,a,i,s=t(3),l=t(30),c=t(0),d=t(19),u=t(15),p=t(167),m=t(16),g=t(231),h=t(68),f=t(62),b=t(168),v=t(39),y=t(7),x=t(10),k=t(232),w=t(88),E=t(246),T=t(171),_=t(125),j=t(173).set,S=t(247),A=t(175),C=t(250),I=t(176),D=t(251),P=t(252),z=t(31),R=t(89),O=t(6),M=t(253),B=t(91),L=t(54),$=O("species"),N="Promise",q=z.getterFor(N),F=z.set,G=z.getterFor(N),H=p&&p.prototype,V=p,U=H,W=c.TypeError,Y=c.document,K=c.process,J=I.f,Q=J,Z=!!(Y&&Y.createEvent&&c.dispatchEvent),X=y(c.PromiseRejectionEvent),nn=!1,en=R(N,(function(){var n=w(V),e=n!==String(V);if(!e&&66===L)return!0;if(l&&!U.finally)return!0;if(L>=51&&/native code/.test(n))return!1;var t=new V((function(n){n(1)})),o=function(n){n((function(){}),(function(){}))};return(t.constructor={})[$]=o,!(nn=t.then((function(){}))instanceof o)||!e&&M&&!X})),tn=en||!T((function(n){V.all(n).catch((function(){}))})),on=function(n){var e;return!(!x(n)||!y(e=n.then))&&e},rn=function(n,e){var t,o,r,a=e.value,i=1==e.state,s=i?n.ok:n.fail,l=n.resolve,c=n.reject,d=n.domain;try{s?(i||(2===e.rejection&&dn(e),e.rejection=1),!0===s?t=a:(d&&d.enter(),t=s(a),d&&(d.exit(),r=!0)),t===n.promise?c(W("Promise-chain cycle")):(o=on(t))?u(o,t,l,c):l(t)):c(a)}catch(n){d&&!r&&d.exit(),c(n)}},an=function(n,e){n.notified||(n.notified=!0,S((function(){for(var t,o=n.reactions;t=o.get();)rn(t,n);n.notified=!1,e&&!n.rejection&&ln(n)})))},sn=function(n,e,t){var o,r;Z?((o=Y.createEvent("Event")).promise=e,o.reason=t,o.initEvent(n,!1,!0),c.dispatchEvent(o)):o={promise:e,reason:t},!X&&(r=c["on"+n])?r(o):"unhandledrejection"===n&&C("Unhandled promise rejection",t)},ln=function(n){u(j,c,(function(){var e,t=n.facade,o=n.value;if(cn(n)&&(e=D((function(){B?K.emit("unhandledRejection",o,t):sn("unhandledrejection",t,o)})),n.rejection=B||cn(n)?2:1,e.error))throw e.value}))},cn=function(n){return 1!==n.rejection&&!n.parent},dn=function(n){u(j,c,(function(){var e=n.facade;B?K.emit("rejectionHandled",e):sn("rejectionhandled",e,n.value)}))},un=function(n,e,t){return function(o){n(e,o,t)}},pn=function(n,e,t){n.done||(n.done=!0,t&&(n=t),n.value=e,n.state=2,an(n,!0))},mn=function(n,e,t){if(!n.done){n.done=!0,t&&(n=t);try{if(n.facade===e)throw W("Promise can't be resolved itself");var o=on(e);o?S((function(){var t={done:!1};try{u(o,e,un(mn,t,n),un(pn,t,n))}catch(e){pn(t,e,n)}})):(n.value=e,n.state=1,an(n,!1))}catch(e){pn({done:!1},e,n)}}};if(en&&(U=(V=function(n){k(this,U),v(n),u(o,this);var e=q(this);try{n(un(mn,e),un(pn,e))}catch(n){pn(e,n)}}).prototype,(o=function(n){F(this,{type:N,done:!1,notified:!1,parent:!1,reactions:new P,rejection:!1,state:0,value:void 0})}).prototype=g(U,{then:function(n,e){var t=G(this),o=J(_(this,V));return t.parent=!0,o.ok=!y(n)||n,o.fail=y(e)&&e,o.domain=B?K.domain:void 0,0==t.state?t.reactions.add(o):S((function(){rn(o,t)})),o.promise},catch:function(n){return this.then(void 0,n)}}),r=function(){var n=new o,e=q(n);this.promise=n,this.resolve=un(mn,e),this.reject=un(pn,e)},I.f=J=function(n){return n===V||n===a?new r(n):Q(n)},!l&&y(p)&&H!==Object.prototype)){i=H.then,nn||(m(H,"then",(function(n,e){var t=this;return new V((function(n,e){u(i,t,n,e)})).then(n,e)}),{unsafe:!0}),m(H,"catch",U.catch,{unsafe:!0}));try{delete H.constructor}catch(n){}h&&h(H,U)}s({global:!0,wrap:!0,forced:en},{Promise:V}),f(V,N,!1,!0),b(N),a=d(N),s({target:N,stat:!0,forced:en},{reject:function(n){var e=J(this);return u(e.reject,void 0,n),e.promise}}),s({target:N,stat:!0,forced:l||en},{resolve:function(n){return A(l&&this===a?V:this,n)}}),s({target:N,stat:!0,forced:tn},{all:function(n){var e=this,t=J(e),o=t.resolve,r=t.reject,a=D((function(){var t=v(e.resolve),a=[],i=0,s=1;E(n,(function(n){var l=i++,c=!1;s++,u(t,e,n).then((function(n){c||(c=!0,a[l]=n,--s||o(a))}),r)})),--s||o(a)}));return a.error&&r(a.value),t.promise},race:function(n){var e=this,t=J(e),o=t.reject,r=D((function(){var r=v(e.resolve);E(n,(function(n){u(r,e,n).then(t.resolve,o)}))}));return r.error&&o(r.value),t.promise}})},function(n,e,t){var o=t(0),r=t(60),a=t(15),i=t(9),s=t(85),l=t(169),c=t(27),d=t(34),u=t(148),p=t(110),m=t(170),g=o.TypeError,h=function(n,e){this.stopped=n,this.result=e},f=h.prototype;n.exports=function(n,e,t){var o,b,v,y,x,k,w,E=t&&t.that,T=!(!t||!t.AS_ENTRIES),_=!(!t||!t.IS_ITERATOR),j=!(!t||!t.INTERRUPTED),S=r(e,E),A=function(n){return o&&m(o,"normal",n),new h(!0,n)},C=function(n){return T?(i(n),j?S(n[0],n[1],A):S(n[0],n[1])):j?S(n,A):S(n)};if(_)o=n;else{if(!(b=p(n)))throw g(s(n)+" is not iterable");if(l(b)){for(v=0,y=c(n);y>v;v++)if((x=C(n[v]))&&d(f,x))return x;return new h(!1)}o=u(n,b)}for(k=o.next;!(w=a(k,o)).done;){try{x=C(w.value)}catch(n){m(o,"throw",n)}if("object"==typeof x&&x&&d(f,x))return x}return new h(!1)}},function(n,e,t){var o,r,a,i,s,l,c,d,u=t(0),p=t(60),m=t(40).f,g=t(173).set,h=t(174),f=t(248),b=t(249),v=t(91),y=u.MutationObserver||u.WebKitMutationObserver,x=u.document,k=u.process,w=u.Promise,E=m(u,"queueMicrotask"),T=E&&E.value;T||(o=function(){var n,e;for(v&&(n=k.domain)&&n.exit();r;){e=r.fn,r=r.next;try{e()}catch(n){throw r?i():a=void 0,n}}a=void 0,n&&n.enter()},h||v||b||!y||!x?!f&&w&&w.resolve?((c=w.resolve(void 0)).constructor=w,d=p(c.then,c),i=function(){d(o)}):v?i=function(){k.nextTick(o)}:(g=p(g,u),i=function(){g(o)}):(s=!0,l=x.createTextNode(""),new y(o).observe(l,{characterData:!0}),i=function(){l.data=s=!s})),n.exports=T||function(n){var e={fn:n,next:void 0};a&&(a.next=e),r||(r=e,i()),a=e}},function(n,e,t){var o=t(33),r=t(0);n.exports=/ipad|iphone|ipod/i.test(o)&&void 0!==r.Pebble},function(n,e,t){var o=t(33);n.exports=/web0s(?!.*chrome)/i.test(o)},function(n,e,t){var o=t(0);n.exports=function(n,e){var t=o.console;t&&t.error&&(1==arguments.length?t.error(n):t.error(n,e))}},function(n,e){n.exports=function(n){try{return{error:!1,value:n()}}catch(n){return{error:!0,value:n}}}},function(n,e){var t=function(){this.head=null,this.tail=null};t.prototype={add:function(n){var e={item:n,next:null};this.head?this.tail.next=e:this.head=e,this.tail=e},get:function(){var n=this.head;if(n)return this.head=n.next,this.tail===n&&(this.tail=null),n.item}},n.exports=t},function(n,e){n.exports="object"==typeof window},function(n,e,t){var o=t(3),r=t(255);o({target:"Object",stat:!0,forced:Object.assign!==r},{assign:r})},function(n,e,t){"use strict";var o=t(8),r=t(2),a=t(15),i=t(4),s=t(86),l=t(122),c=t(120),d=t(18),u=t(64),p=Object.assign,m=Object.defineProperty,g=r([].concat);n.exports=!p||i((function(){if(o&&1!==p({b:1},p(m({},"a",{enumerable:!0,get:function(){m(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var n={},e={},t=Symbol();return n[t]=7,"abcdefghijklmnopqrst".split("").forEach((function(n){e[n]=n})),7!=p({},n)[t]||"abcdefghijklmnopqrst"!=s(p({},e)).join("")}))?function(n,e){for(var t=d(n),r=arguments.length,i=1,p=l.f,m=c.f;r>i;)for(var h,f=u(arguments[i++]),b=p?g(s(f),p(f)):s(f),v=b.length,y=0;v>y;)h=b[y++],o&&!a(m,f,h)||(t[h]=f[h]);return t}:p},function(n,e,t){"use strict";var o=t(3),r=t(30),a=t(167),i=t(4),s=t(19),l=t(7),c=t(125),d=t(175),u=t(16);if(o({target:"Promise",proto:!0,real:!0,forced:!!a&&i((function(){a.prototype.finally.call({then:function(){}},(function(){}))}))},{finally:function(n){var e=c(this,s("Promise")),t=l(n);return this.then(t?function(t){return d(e,n()).then((function(){return t}))}:n,t?function(t){return d(e,n()).then((function(){throw t}))}:n)}}),!r&&l(a)){var p=s("Promise").prototype.finally;a.prototype.finally!==p&&u(a.prototype,"finally",p,{unsafe:!0})}},function(n,e,t){"use strict";var o=t(124),r=t(78);n.exports=o?{}.toString:function(){return"[object "+r(this)+"]"}},function(n,e,t){var o=t(0),r=t(61),a=t(90),i=t(10),s=t(6)("species"),l=o.Array;n.exports=function(n){var e;return r(n)&&(e=n.constructor,(a(e)&&(e===l||r(e.prototype))||i(e)&&null===(e=e[s]))&&(e=void 0)),void 0===e?l:e}},function(n,e,t){"use strict";var o=t(3),r=t(260).left,a=t(47),i=t(54),s=t(91);o({target:"Array",proto:!0,forced:!a("reduce")||!s&&i>79&&i<83},{reduce:function(n){var e=arguments.length;return r(this,n,e,e>1?arguments[1]:void 0)}})},function(n,e,t){var o=t(0),r=t(39),a=t(18),i=t(64),s=t(27),l=o.TypeError,c=function(n){return function(e,t,o,c){r(t);var d=a(e),u=i(d),p=s(d),m=n?p-1:0,g=n?-1:1;if(o<2)for(;;){if(m in u){c=u[m],m+=g;break}if(m+=g,n?m<0:p<=m)throw l("Reduce of empty array with no initial value")}for(;n?m>=0:p>m;m+=g)m in u&&(c=t(c,u[m],m,d));return c}};n.exports={left:c(!1),right:c(!0)}},function(n,e,t){"use strict";var o,r=t(3),a=t(2),i=t(40).f,s=t(55),l=t(14),c=t(182),d=t(20),u=t(183),p=t(30),m=a("".startsWith),g=a("".slice),h=Math.min,f=u("startsWith");r({target:"String",proto:!0,forced:!!(p||f||(o=i(String.prototype,"startsWith"),!o||o.writable))&&!f},{startsWith:function(n){var e=l(d(this));c(n);var t=s(h(arguments.length>1?arguments[1]:void 0,e.length)),o=l(n);return m?m(e,o,t):g(e,t,t+o.length)===o}})},function(n,e,t){var o=t(3),r=t(185),a=t(4),i=t(10),s=t(263).onFreeze,l=Object.freeze;o({target:"Object",stat:!0,forced:a((function(){l(1)})),sham:!r},{freeze:function(n){return l&&i(n)?l(s(n)):n}})},function(n,e,t){var o=t(3),r=t(2),a=t(66),i=t(10),s=t(12),l=t(13).f,c=t(56),d=t(186),u=t(264),p=t(81),m=t(185),g=!1,h=p("meta"),f=0,b=function(n){l(n,h,{value:{objectID:"O"+f++,weakData:{}}})},v=n.exports={enable:function(){v.enable=function(){},g=!0;var n=c.f,e=r([].splice),t={};t[h]=1,n(t).length&&(c.f=function(t){for(var o=n(t),r=0,a=o.length;r<a;r++)if(o[r]===h){e(o,r,1);break}return o},o({target:"Object",stat:!0,forced:!0},{getOwnPropertyNames:d.f}))},fastKey:function(n,e){if(!i(n))return"symbol"==typeof n?n:("string"==typeof n?"S":"P")+n;if(!s(n,h)){if(!u(n))return"F";if(!e)return"E";b(n)}return n[h].objectID},getWeakData:function(n,e){if(!s(n,h)){if(!u(n))return!0;if(!e)return!1;b(n)}return n[h].weakData},onFreeze:function(n){return m&&g&&u(n)&&!s(n,h)&&b(n),n}};a[h]=!0},function(n,e,t){var o=t(4),r=t(10),a=t(25),i=t(265),s=Object.isExtensible,l=o((function(){s(1)}));n.exports=l||i?function(n){return!!r(n)&&((!i||"ArrayBuffer"!=a(n))&&(!s||s(n)))}:s},function(n,e,t){var o=t(4);n.exports=o((function(){if("function"==typeof ArrayBuffer){var n=new ArrayBuffer(8);Object.isExtensible(n)&&Object.defineProperty(n,"a",{value:8})}}))},function(n,e,t){var o=t(0);n.exports=o},function(n,e,t){"use strict";var o=t(0),r=t(60),a=t(15),i=t(18),s=t(268),l=t(169),c=t(90),d=t(27),u=t(70),p=t(148),m=t(110),g=o.Array;n.exports=function(n){var e=i(n),t=c(this),o=arguments.length,h=o>1?arguments[1]:void 0,f=void 0!==h;f&&(h=r(h,o>2?arguments[2]:void 0));var b,v,y,x,k,w,E=m(e),T=0;if(!E||this==g&&l(E))for(b=d(e),v=t?new this(b):g(b);b>T;T++)w=f?h(e[T],T):e[T],u(v,T,w);else for(k=(x=p(e,E)).next,v=t?new this:[];!(y=a(k,x)).done;T++)w=f?s(x,h,[y.value,T],!0):y.value,u(v,T,w);return v.length=T,v}},function(n,e,t){var o=t(9),r=t(170);n.exports=function(n,e,t,a){try{return a?e(o(t)[0],t[1]):e(t)}catch(e){r(n,"throw",e)}}},function(n,e,t){"use strict";var o=t(19),r=t(12),a=t(26),i=t(34),s=t(68),l=t(121),c=t(131),d=t(190),u=t(270),p=t(271),m=t(272),g=t(30);n.exports=function(n,e,t,h){var f=h?2:1,b=n.split("."),v=b[b.length-1],y=o.apply(null,b);if(y){var x=y.prototype;if(!g&&r(x,"cause")&&delete x.cause,!t)return y;var k=o("Error"),w=e((function(n,e){var t=d(h?e:n,void 0),o=h?new y(n):new y;return void 0!==t&&a(o,"message",t),m&&a(o,"stack",p(o.stack,2)),this&&i(x,this)&&c(o,this,w),arguments.length>f&&u(o,arguments[f]),o}));if(w.prototype=x,"Error"!==v&&(s?s(w,k):l(w,k,{name:!0})),l(w,y),!g)try{x.name!==v&&a(x,"name",v),x.constructor=w}catch(n){}return w}}},function(n,e,t){var o=t(10),r=t(26);n.exports=function(n,e){o(e)&&"cause"in e&&r(n,"cause",e.cause)}},function(n,e,t){var o=t(2)("".replace),r=String(Error("zxcasd").stack),a=/\n\s*at [^:]*:[^\n]*/,i=a.test(r);n.exports=function(n,e){if(i&&"string"==typeof n)for(;e--;)n=o(n,a,"");return n}},function(n,e,t){var o=t(4),r=t(49);n.exports=!o((function(){var n=Error("a");return!("stack"in n)||(Object.defineProperty(n,"stack",r(1,7)),7!==n.stack)}))},function(n,e,t){"use strict";var o=t(8),r=t(4),a=t(9),i=t(37),s=t(190),l=Error.prototype.toString,c=r((function(){if(o){var n=i(Object.defineProperty({},"name",{get:function(){return this===n}}));if("true"!==l.call(n))return!0}return"2: 1"!==l.call({message:1,name:2})||"Error"!==l.call({})}));n.exports=c?function(){var n=a(this),e=s(n.name,"Error"),t=s(n.message);return e?t?e+": "+t:e:t}:l},function(n,e,t){var o=t(2),r=t(18),a=Math.floor,i=o("".charAt),s=o("".replace),l=o("".slice),c=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,d=/\$([$&'`]|\d{1,2})/g;n.exports=function(n,e,t,o,u,p){var m=t+n.length,g=o.length,h=d;return void 0!==u&&(u=r(u),h=c),s(p,h,(function(r,s){var c;switch(i(s,0)){case"$":return"$";case"&":return n;case"`":return l(e,0,t);case"'":return l(e,m);case"<":c=u[l(s,1,-1)];break;default:var d=+s;if(0===d)return r;if(d>g){var p=a(d/10);return 0===p?r:p<=g?void 0===o[p-1]?i(s,1):o[p-1]+i(s,1):r}c=o[d-1]}return void 0===c?"":c}))}},function(n,e,t){var o=t(192),r=t(276);n.exports=function n(e,t,a,i,s){var l=-1,c=e.length;for(a||(a=r),s||(s=[]);++l<c;){var d=e[l];t>0&&a(d)?t>1?n(d,t-1,a,i,s):o(s,d):i||(s[s.length]=d)}return s}},function(n,e,t){var o=t(72),r=t(133),a=t(32),i=o?o.isConcatSpreadable:void 0;n.exports=function(n){return a(n)||r(n)||!!(i&&n&&n[i])}},function(n,e,t){var o=t(63),r=t(52);n.exports=function(n){return r(n)&&"[object Arguments]"==o(n)}},function(n,e,t){var o=t(72),r=Object.prototype,a=r.hasOwnProperty,i=r.toString,s=o?o.toStringTag:void 0;n.exports=function(n){var e=a.call(n,s),t=n[s];try{n[s]=void 0;var o=!0}catch(n){}var r=i.call(n);return o&&(e?n[s]=t:delete n[s]),r}},function(n,e){var t=Object.prototype.toString;n.exports=function(n){return t.call(n)}},function(n,e,t){var o=t(281),r=t(337),a=t(141),i=t(32),s=t(348);n.exports=function(n){return"function"==typeof n?n:null==n?a:"object"==typeof n?i(n)?r(n[0],n[1]):o(n):s(n)}},function(n,e,t){var o=t(282),r=t(336),a=t(209);n.exports=function(n){var e=r(n);return 1==e.length&&e[0][2]?a(e[0][0],e[0][1]):function(t){return t===n||o(t,n,e)}}},function(n,e,t){var o=t(194),r=t(198);n.exports=function(n,e,t,a){var i=t.length,s=i,l=!a;if(null==n)return!s;for(n=Object(n);i--;){var c=t[i];if(l&&c[2]?c[1]!==n[c[0]]:!(c[0]in n))return!1}for(;++i<s;){var d=(c=t[i])[0],u=n[d],p=c[1];if(l&&c[2]){if(void 0===u&&!(d in n))return!1}else{var m=new o;if(a)var g=a(u,p,d,n,e,m);if(!(void 0===g?r(p,u,3,a,m):g))return!1}}return!0}},function(n,e){n.exports=function(){this.__data__=[],this.size=0}},function(n,e,t){var o=t(98),r=Array.prototype.splice;n.exports=function(n){var e=this.__data__,t=o(e,n);return!(t<0)&&(t==e.length-1?e.pop():r.call(e,t,1),--this.size,!0)}},function(n,e,t){var o=t(98);n.exports=function(n){var e=this.__data__,t=o(e,n);return t<0?void 0:e[t][1]}},function(n,e,t){var o=t(98);n.exports=function(n){return o(this.__data__,n)>-1}},function(n,e,t){var o=t(98);n.exports=function(n,e){var t=this.__data__,r=o(t,n);return r<0?(++this.size,t.push([n,e])):t[r][1]=e,this}},function(n,e,t){var o=t(97);n.exports=function(){this.__data__=new o,this.size=0}},function(n,e){n.exports=function(n){var e=this.__data__,t=e.delete(n);return this.size=e.size,t}},function(n,e){n.exports=function(n){return this.__data__.get(n)}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e,t){var o=t(97),r=t(134),a=t(136);n.exports=function(n,e){var t=this.__data__;if(t instanceof o){var i=t.__data__;if(!r||i.length<199)return i.push([n,e]),this.size=++t.size,this;t=this.__data__=new a(i)}return t.set(n,e),this.size=t.size,this}},function(n,e,t){var o=t(196),r=t(294),a=t(135),i=t(197),s=/^\[object .+?Constructor\]$/,l=Function.prototype,c=Object.prototype,d=l.toString,u=c.hasOwnProperty,p=RegExp("^"+d.call(u).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");n.exports=function(n){return!(!a(n)||r(n))&&(o(n)?p:s).test(i(n))}},function(n,e,t){var o,r=t(295),a=(o=/[^.]+$/.exec(r&&r.keys&&r.keys.IE_PROTO||""))?"Symbol(src)_1."+o:"";n.exports=function(n){return!!a&&a in n}},function(n,e,t){var o=t(35)["__core-js_shared__"];n.exports=o},function(n,e){n.exports=function(n,e){return null==n?void 0:n[e]}},function(n,e,t){var o=t(298),r=t(97),a=t(134);n.exports=function(){this.size=0,this.__data__={hash:new o,map:new(a||r),string:new o}}},function(n,e,t){var o=t(299),r=t(300),a=t(301),i=t(302),s=t(303);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var o=n[e];this.set(o[0],o[1])}}l.prototype.clear=o,l.prototype.delete=r,l.prototype.get=a,l.prototype.has=i,l.prototype.set=s,n.exports=l},function(n,e,t){var o=t(99);n.exports=function(){this.__data__=o?o(null):{},this.size=0}},function(n,e){n.exports=function(n){var e=this.has(n)&&delete this.__data__[n];return this.size-=e?1:0,e}},function(n,e,t){var o=t(99),r=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;if(o){var t=e[n];return"__lodash_hash_undefined__"===t?void 0:t}return r.call(e,n)?e[n]:void 0}},function(n,e,t){var o=t(99),r=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;return o?void 0!==e[n]:r.call(e,n)}},function(n,e,t){var o=t(99);n.exports=function(n,e){var t=this.__data__;return this.size+=this.has(n)?0:1,t[n]=o&&void 0===e?"__lodash_hash_undefined__":e,this}},function(n,e,t){var o=t(100);n.exports=function(n){var e=o(this,n).delete(n);return this.size-=e?1:0,e}},function(n,e){n.exports=function(n){var e=typeof n;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==n:null===n}},function(n,e,t){var o=t(100);n.exports=function(n){return o(this,n).get(n)}},function(n,e,t){var o=t(100);n.exports=function(n){return o(this,n).has(n)}},function(n,e,t){var o=t(100);n.exports=function(n,e){var t=o(this,n),r=t.size;return t.set(n,e),this.size+=t.size==r?0:1,this}},function(n,e,t){var o=t(194),r=t(199),a=t(313),i=t(316),s=t(332),l=t(32),c=t(203),d=t(205),u="[object Object]",p=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,m,g,h){var f=l(n),b=l(e),v=f?"[object Array]":s(n),y=b?"[object Array]":s(e),x=(v="[object Arguments]"==v?u:v)==u,k=(y="[object Arguments]"==y?u:y)==u,w=v==y;if(w&&c(n)){if(!c(e))return!1;f=!0,x=!1}if(w&&!x)return h||(h=new o),f||d(n)?r(n,e,t,m,g,h):a(n,e,v,t,m,g,h);if(!(1&t)){var E=x&&p.call(n,"__wrapped__"),T=k&&p.call(e,"__wrapped__");if(E||T){var _=E?n.value():n,j=T?e.value():e;return h||(h=new o),g(_,j,t,m,h)}}return!!w&&(h||(h=new o),i(n,e,t,m,g,h))}},function(n,e){n.exports=function(n){return this.__data__.set(n,"__lodash_hash_undefined__"),this}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e){n.exports=function(n,e){for(var t=-1,o=null==n?0:n.length;++t<o;)if(e(n[t],t,n))return!0;return!1}},function(n,e,t){var o=t(72),r=t(314),a=t(195),i=t(199),s=t(315),l=t(137),c=o?o.prototype:void 0,d=c?c.valueOf:void 0;n.exports=function(n,e,t,o,c,u,p){switch(t){case"[object DataView]":if(n.byteLength!=e.byteLength||n.byteOffset!=e.byteOffset)return!1;n=n.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(n.byteLength!=e.byteLength||!u(new r(n),new r(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return a(+n,+e);case"[object Error]":return n.name==e.name&&n.message==e.message;case"[object RegExp]":case"[object String]":return n==e+"";case"[object Map]":var m=s;case"[object Set]":var g=1&o;if(m||(m=l),n.size!=e.size&&!g)return!1;var h=p.get(n);if(h)return h==e;o|=2,p.set(n,e);var f=i(m(n),m(e),o,c,u,p);return p.delete(n),f;case"[object Symbol]":if(d)return d.call(n)==d.call(e)}return!1}},function(n,e,t){var o=t(35).Uint8Array;n.exports=o},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n,o){t[++e]=[o,n]})),t}},function(n,e,t){var o=t(317),r=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,a,i,s){var l=1&t,c=o(n),d=c.length;if(d!=o(e).length&&!l)return!1;for(var u=d;u--;){var p=c[u];if(!(l?p in e:r.call(e,p)))return!1}var m=s.get(n),g=s.get(e);if(m&&g)return m==e&&g==n;var h=!0;s.set(n,e),s.set(e,n);for(var f=l;++u<d;){var b=n[p=c[u]],v=e[p];if(a)var y=l?a(v,b,p,e,n,s):a(b,v,p,n,e,s);if(!(void 0===y?b===v||i(b,v,t,a,s):y)){h=!1;break}f||(f="constructor"==p)}if(h&&!f){var x=n.constructor,k=e.constructor;x==k||!("constructor"in n)||!("constructor"in e)||"function"==typeof x&&x instanceof x&&"function"==typeof k&&k instanceof k||(h=!1)}return s.delete(n),s.delete(e),h}},function(n,e,t){var o=t(318),r=t(319),a=t(202);n.exports=function(n){return o(n,a,r)}},function(n,e,t){var o=t(192),r=t(32);n.exports=function(n,e,t){var a=e(n);return r(n)?a:o(a,t(n))}},function(n,e,t){var o=t(320),r=t(321),a=Object.prototype.propertyIsEnumerable,i=Object.getOwnPropertySymbols,s=i?function(n){return null==n?[]:(n=Object(n),o(i(n),(function(e){return a.call(n,e)})))}:r;n.exports=s},function(n,e){n.exports=function(n,e){for(var t=-1,o=null==n?0:n.length,r=0,a=[];++t<o;){var i=n[t];e(i,t,n)&&(a[r++]=i)}return a}},function(n,e){n.exports=function(){return[]}},function(n,e,t){var o=t(323),r=t(133),a=t(32),i=t(203),s=t(204),l=t(205),c=Object.prototype.hasOwnProperty;n.exports=function(n,e){var t=a(n),d=!t&&r(n),u=!t&&!d&&i(n),p=!t&&!d&&!u&&l(n),m=t||d||u||p,g=m?o(n.length,String):[],h=g.length;for(var f in n)!e&&!c.call(n,f)||m&&("length"==f||u&&("offset"==f||"parent"==f)||p&&("buffer"==f||"byteLength"==f||"byteOffset"==f)||s(f,h))||g.push(f);return g}},function(n,e){n.exports=function(n,e){for(var t=-1,o=Array(n);++t<n;)o[t]=e(t);return o}},function(n,e){n.exports=function(){return!1}},function(n,e,t){var o=t(63),r=t(138),a=t(52),i={};i["[object Float32Array]"]=i["[object Float64Array]"]=i["[object Int8Array]"]=i["[object Int16Array]"]=i["[object Int32Array]"]=i["[object Uint8Array]"]=i["[object Uint8ClampedArray]"]=i["[object Uint16Array]"]=i["[object Uint32Array]"]=!0,i["[object Arguments]"]=i["[object Array]"]=i["[object ArrayBuffer]"]=i["[object Boolean]"]=i["[object DataView]"]=i["[object Date]"]=i["[object Error]"]=i["[object Function]"]=i["[object Map]"]=i["[object Number]"]=i["[object Object]"]=i["[object RegExp]"]=i["[object Set]"]=i["[object String]"]=i["[object WeakMap]"]=!1,n.exports=function(n){return a(n)&&r(n.length)&&!!i[o(n)]}},function(n,e){n.exports=function(n){return function(e){return n(e)}}},function(n,e,t){(function(n){var o=t(193),r=e&&!e.nodeType&&e,a=r&&"object"==typeof n&&n&&!n.nodeType&&n,i=a&&a.exports===r&&o.process,s=function(){try{var n=a&&a.require&&a.require("util").types;return n||i&&i.binding&&i.binding("util")}catch(n){}}();n.exports=s}).call(this,t(153)(n))},function(n,e,t){var o=t(329),r=t(330),a=Object.prototype.hasOwnProperty;n.exports=function(n){if(!o(n))return r(n);var e=[];for(var t in Object(n))a.call(n,t)&&"constructor"!=t&&e.push(t);return e}},function(n,e){var t=Object.prototype;n.exports=function(n){var e=n&&n.constructor;return n===("function"==typeof e&&e.prototype||t)}},function(n,e,t){var o=t(331)(Object.keys,Object);n.exports=o},function(n,e){n.exports=function(n,e){return function(t){return n(e(t))}}},function(n,e,t){var o=t(333),r=t(134),a=t(334),i=t(207),s=t(335),l=t(63),c=t(197),d=c(o),u=c(r),p=c(a),m=c(i),g=c(s),h=l;(o&&"[object DataView]"!=h(new o(new ArrayBuffer(1)))||r&&"[object Map]"!=h(new r)||a&&"[object Promise]"!=h(a.resolve())||i&&"[object Set]"!=h(new i)||s&&"[object WeakMap]"!=h(new s))&&(h=function(n){var e=l(n),t="[object Object]"==e?n.constructor:void 0,o=t?c(t):"";if(o)switch(o){case d:return"[object DataView]";case u:return"[object Map]";case p:return"[object Promise]";case m:return"[object Set]";case g:return"[object WeakMap]"}return e}),n.exports=h},function(n,e,t){var o=t(43)(t(35),"DataView");n.exports=o},function(n,e,t){var o=t(43)(t(35),"Promise");n.exports=o},function(n,e,t){var o=t(43)(t(35),"WeakMap");n.exports=o},function(n,e,t){var o=t(208),r=t(202);n.exports=function(n){for(var e=r(n),t=e.length;t--;){var a=e[t],i=n[a];e[t]=[a,i,o(i)]}return e}},function(n,e,t){var o=t(198),r=t(338),a=t(345),i=t(139),s=t(208),l=t(209),c=t(101);n.exports=function(n,e){return i(n)&&s(e)?l(c(n),e):function(t){var i=r(t,n);return void 0===i&&i===e?a(t,n):o(e,i,3)}}},function(n,e,t){var o=t(210);n.exports=function(n,e,t){var r=null==n?void 0:o(n,e);return void 0===r?t:r}},function(n,e,t){var o=t(340),r=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,a=/\\(\\)?/g,i=o((function(n){var e=[];return 46===n.charCodeAt(0)&&e.push(""),n.replace(r,(function(n,t,o,r){e.push(o?r.replace(a,"$1"):t||n)})),e}));n.exports=i},function(n,e,t){var o=t(341);n.exports=function(n){var e=o(n,(function(n){return 500===t.size&&t.clear(),n})),t=e.cache;return e}},function(n,e,t){var o=t(136);function r(n,e){if("function"!=typeof n||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var t=function(){var o=arguments,r=e?e.apply(this,o):o[0],a=t.cache;if(a.has(r))return a.get(r);var i=n.apply(this,o);return t.cache=a.set(r,i)||a,i};return t.cache=new(r.Cache||o),t}r.Cache=o,n.exports=r},function(n,e,t){var o=t(343);n.exports=function(n){return null==n?"":o(n)}},function(n,e,t){var o=t(72),r=t(344),a=t(32),i=t(140),s=o?o.prototype:void 0,l=s?s.toString:void 0;n.exports=function n(e){if("string"==typeof e)return e;if(a(e))return r(e,n)+"";if(i(e))return l?l.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},function(n,e){n.exports=function(n,e){for(var t=-1,o=null==n?0:n.length,r=Array(o);++t<o;)r[t]=e(n[t],t,n);return r}},function(n,e,t){var o=t(346),r=t(347);n.exports=function(n,e){return null!=n&&r(n,e,o)}},function(n,e){n.exports=function(n,e){return null!=n&&e in Object(n)}},function(n,e,t){var o=t(211),r=t(133),a=t(32),i=t(204),s=t(138),l=t(101);n.exports=function(n,e,t){for(var c=-1,d=(e=o(e,n)).length,u=!1;++c<d;){var p=l(e[c]);if(!(u=null!=n&&t(n,p)))break;n=n[p]}return u||++c!=d?u:!!(d=null==n?0:n.length)&&s(d)&&i(p,d)&&(a(n)||r(n))}},function(n,e,t){var o=t(349),r=t(350),a=t(139),i=t(101);n.exports=function(n){return a(n)?o(i(n)):r(n)}},function(n,e){n.exports=function(n){return function(e){return null==e?void 0:e[n]}}},function(n,e,t){var o=t(210);n.exports=function(n){return function(e){return o(e,n)}}},function(n,e,t){var o=t(141),r=t(352),a=t(354);n.exports=function(n,e){return a(r(n,e,o),n+"")}},function(n,e,t){var o=t(353),r=Math.max;n.exports=function(n,e,t){return e=r(void 0===e?n.length-1:e,0),function(){for(var a=arguments,i=-1,s=r(a.length-e,0),l=Array(s);++i<s;)l[i]=a[e+i];i=-1;for(var c=Array(e+1);++i<e;)c[i]=a[i];return c[e]=t(l),o(n,this,c)}}},function(n,e){n.exports=function(n,e,t){switch(t.length){case 0:return n.call(e);case 1:return n.call(e,t[0]);case 2:return n.call(e,t[0],t[1]);case 3:return n.call(e,t[0],t[1],t[2])}return n.apply(e,t)}},function(n,e,t){var o=t(355),r=t(358)(o);n.exports=r},function(n,e,t){var o=t(356),r=t(357),a=t(141),i=r?function(n,e){return r(n,"toString",{configurable:!0,enumerable:!1,value:o(e),writable:!0})}:a;n.exports=i},function(n,e){n.exports=function(n){return function(){return n}}},function(n,e,t){var o=t(43),r=function(){try{var n=o(Object,"defineProperty");return n({},"",{}),n}catch(n){}}();n.exports=r},function(n,e){var t=Date.now;n.exports=function(n){var e=0,o=0;return function(){var r=t(),a=16-(r-o);if(o=r,a>0){if(++e>=800)return arguments[0]}else e=0;return n.apply(void 0,arguments)}}},function(n,e,t){var o=t(200),r=t(360),a=t(365),i=t(201),s=t(366),l=t(137);n.exports=function(n,e,t){var c=-1,d=r,u=n.length,p=!0,m=[],g=m;if(t)p=!1,d=a;else if(u>=200){var h=e?null:s(n);if(h)return l(h);p=!1,d=i,g=new o}else g=e?[]:m;n:for(;++c<u;){var f=n[c],b=e?e(f):f;if(f=t||0!==f?f:0,p&&b==b){for(var v=g.length;v--;)if(g[v]===b)continue n;e&&g.push(b),m.push(f)}else d(g,b,t)||(g!==m&&g.push(b),m.push(f))}return m}},function(n,e,t){var o=t(361);n.exports=function(n,e){return!!(null==n?0:n.length)&&o(n,e,0)>-1}},function(n,e,t){var o=t(362),r=t(363),a=t(364);n.exports=function(n,e,t){return e==e?a(n,e,t):o(n,r,t)}},function(n,e){n.exports=function(n,e,t,o){for(var r=n.length,a=t+(o?1:-1);o?a--:++a<r;)if(e(n[a],a,n))return a;return-1}},function(n,e){n.exports=function(n){return n!=n}},function(n,e){n.exports=function(n,e,t){for(var o=t-1,r=n.length;++o<r;)if(n[o]===e)return o;return-1}},function(n,e){n.exports=function(n,e,t){for(var o=-1,r=null==n?0:n.length;++o<r;)if(t(e,n[o]))return!0;return!1}},function(n,e,t){var o=t(207),r=t(367),a=t(137),i=o&&1/a(new o([,-0]))[1]==1/0?function(n){return new o(n)}:r;n.exports=i},function(n,e){n.exports=function(){}},function(n,e,t){var o=t(206),r=t(52);n.exports=function(n){return r(n)&&o(n)}},function(n,e,t){},function(n,e,t){},function(n,e,t){var o=t(2);n.exports=o(1..valueOf)},function(n,e,t){"use strict";t(212)},function(n,e){var t,o,r,a,i,s,l,c=!1,d=[];"undefined"!=typeof document&&(a=function(n){return c||"interactive"===document.readyState||"complete"===document.readyState?n.call(document):d.push((function(){return n.call(this)})),this},s=function(){for(var n=0,e=d.length;n<e;n++)d[n].apply(document);d=[]},l=function(){c||(c=!0,s.call(window),document.removeEventListener?document.removeEventListener("DOMContentLoaded",l,!1):document.attachEvent&&(document.detachEvent("onreadystatechange",l),window==window.top&&(clearInterval(i),i=null)))},document.addEventListener?document.addEventListener("DOMContentLoaded",l,!1):document.attachEvent&&(document.attachEvent("onreadystatechange",(function(){/loaded|complete/.test(document.readyState)&&l()})),window==window.top&&(i=setInterval((function(){try{c||document.documentElement.doScroll("left")}catch(n){return}l()}),5)))),t={fetch:function(n,e){var t="BusuanziCallback_"+Math.floor(1099511627776*Math.random());n=n.replace("=BusuanziCallback","="+t),(r=document.createElement("SCRIPT")).type="text/javascript",r.defer=!0,r.src=n,document.getElementsByTagName("HEAD")[0].appendChild(r),window[t]=this.evalCall(e)},evalCall:function(n){return function(e){a((function(){try{n(e),r&&r.parentElement&&r.parentElement.removeChild&&r.parentElement.removeChild(r)}catch(n){console.log(n),o.hides()}}))}}};const u=()=>{o&&o.hides(),t.fetch("//busuanzi.ibruce.info/busuanzi?jsonpCallback=BusuanziCallback",(function(n){o.texts(n),o.shows()}))};o={bszs:["site_pv","page_pv","site_uv"],texts:function(n){this.bszs.map((function(e){var t=document.getElementById("busuanzi_value_"+e);t&&(t.innerHTML=n[e])}))},hides:function(){this.bszs.map((function(n){var e=document.getElementById("busuanzi_container_"+n);e&&(e.style.display="none")}))},shows:function(){this.bszs.map((function(n){var e=document.getElementById("busuanzi_container_"+n);e&&(e.style.display="inline")}))}},"undefined"!=typeof document&&u(),n.exports={fetch:u}},function(n,e,t){var o=t(2),r=t(55),a=t(14),i=t(375),s=t(20),l=o(i),c=o("".slice),d=Math.ceil,u=function(n){return function(e,t,o){var i,u,p=a(s(e)),m=r(t),g=p.length,h=void 0===o?" ":a(o);return m<=g||""==h?p:((u=l(h,d((i=m-g)/h.length))).length>i&&(u=c(u,0,i)),n?p+u:u+p)}};n.exports={start:u(!1),end:u(!0)}},function(n,e,t){"use strict";var o=t(0),r=t(59),a=t(14),i=t(20),s=o.RangeError;n.exports=function(n){var e=a(i(this)),t="",o=r(n);if(o<0||o==1/0)throw s("Wrong number of repetitions");for(;o>0;(o>>>=1)&&(e+=e))1&o&&(t+=e);return t}},function(n,e,t){var o=t(33);n.exports=/Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(o)},function(n,e,t){"use strict";t(213)},function(n,e,t){"use strict";t(214)},function(n,e,t){var o=t(33).match(/firefox\/(\d+)/i);n.exports=!!o&&+o[1]},function(n,e,t){var o=t(33);n.exports=/MSIE|Trident/.test(o)},function(n,e,t){var o=t(33).match(/AppleWebKit\/(\d+)\./);n.exports=!!o&&+o[1]},function(n,e,t){},function(n,e,t){},function(n,e,t){"use strict";t(215)},function(n,e,t){var o=t(3),r=t(4),a=t(21),i=t(40).f,s=t(8),l=r((function(){i(1)}));o({target:"Object",stat:!0,forced:!s||l,sham:!s},{getOwnPropertyDescriptor:function(n,e){return i(a(n),e)}})},function(n,e,t){var o=t(3),r=t(8),a=t(117).f;o({target:"Object",stat:!0,forced:Object.defineProperties!==a,sham:!r},{defineProperties:a})},function(n,e,t){n.exports=function(n){var e={};function t(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return n[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}return t.m=n,t.c=e,t.d=function(n,e,o){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:o})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)t.d(o,r,function(e){return n[e]}.bind(null,r));return o},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s="fb15")}({"01f9":function(n,e,t){"use strict";var o=t("2d00"),r=t("5ca1"),a=t("2aba"),i=t("32e9"),s=t("84f2"),l=t("41a0"),c=t("7f20"),d=t("38fd"),u=t("2b4c")("iterator"),p=!([].keys&&"next"in[].keys()),m=function(){return this};n.exports=function(n,e,t,g,h,f,b){l(t,e,g);var v,y,x,k=function(n){if(!p&&n in _)return _[n];switch(n){case"keys":case"values":return function(){return new t(this,n)}}return function(){return new t(this,n)}},w=e+" Iterator",E="values"==h,T=!1,_=n.prototype,j=_[u]||_["@@iterator"]||h&&_[h],S=j||k(h),A=h?E?k("entries"):S:void 0,C="Array"==e&&_.entries||j;if(C&&(x=d(C.call(new n)))!==Object.prototype&&x.next&&(c(x,w,!0),o||"function"==typeof x[u]||i(x,u,m)),E&&j&&"values"!==j.name&&(T=!0,S=function(){return j.call(this)}),o&&!b||!p&&!T&&_[u]||i(_,u,S),s[e]=S,s[w]=m,h)if(v={values:E?S:k("values"),keys:f?S:k("keys"),entries:A},b)for(y in v)y in _||a(_,y,v[y]);else r(r.P+r.F*(p||T),e,v);return v}},"0a49":function(n,e,t){var o=t("9b43"),r=t("626a"),a=t("4bf8"),i=t("9def"),s=t("cd1c");n.exports=function(n,e){var t=1==n,l=2==n,c=3==n,d=4==n,u=6==n,p=5==n||u,m=e||s;return function(e,s,g){for(var h,f,b=a(e),v=r(b),y=o(s,g,3),x=i(v.length),k=0,w=t?m(e,x):l?m(e,0):void 0;x>k;k++)if((p||k in v)&&(f=y(h=v[k],k,b),n))if(t)w[k]=f;else if(f)switch(n){case 3:return!0;case 5:return h;case 6:return k;case 2:w.push(h)}else if(d)return!1;return u?-1:c||d?d:w}}},"0bfb":function(n,e,t){"use strict";var o=t("cb7c");n.exports=function(){var n=o(this),e="";return n.global&&(e+="g"),n.ignoreCase&&(e+="i"),n.multiline&&(e+="m"),n.unicode&&(e+="u"),n.sticky&&(e+="y"),e}},"0d58":function(n,e,t){var o=t("ce10"),r=t("e11e");n.exports=Object.keys||function(n){return o(n,r)}},1169:function(n,e,t){var o=t("2d95");n.exports=Array.isArray||function(n){return"Array"==o(n)}},"11e9":function(n,e,t){var o=t("52a7"),r=t("4630"),a=t("6821"),i=t("6a99"),s=t("69a8"),l=t("c69a"),c=Object.getOwnPropertyDescriptor;e.f=t("9e1e")?c:function(n,e){if(n=a(n),e=i(e,!0),l)try{return c(n,e)}catch(n){}if(s(n,e))return r(!o.f.call(n,e),n[e])}},1495:function(n,e,t){var o=t("86cc"),r=t("cb7c"),a=t("0d58");n.exports=t("9e1e")?Object.defineProperties:function(n,e){r(n);for(var t,i=a(e),s=i.length,l=0;s>l;)o.f(n,t=i[l++],e[t]);return n}},1991:function(n,e,t){var o,r,a,i=t("9b43"),s=t("31f4"),l=t("fab2"),c=t("230e"),d=t("7726"),u=d.process,p=d.setImmediate,m=d.clearImmediate,g=d.MessageChannel,h=d.Dispatch,f=0,b={},v=function(){var n=+this;if(b.hasOwnProperty(n)){var e=b[n];delete b[n],e()}},y=function(n){v.call(n.data)};p&&m||(p=function(n){for(var e=[],t=1;arguments.length>t;)e.push(arguments[t++]);return b[++f]=function(){s("function"==typeof n?n:Function(n),e)},o(f),f},m=function(n){delete b[n]},"process"==t("2d95")(u)?o=function(n){u.nextTick(i(v,n,1))}:h&&h.now?o=function(n){h.now(i(v,n,1))}:g?(a=(r=new g).port2,r.port1.onmessage=y,o=i(a.postMessage,a,1)):d.addEventListener&&"function"==typeof postMessage&&!d.importScripts?(o=function(n){d.postMessage(n+"","*")},d.addEventListener("message",y,!1)):o="onreadystatechange"in c("script")?function(n){l.appendChild(c("script")).onreadystatechange=function(){l.removeChild(this),v.call(n)}}:function(n){setTimeout(i(v,n,1),0)}),n.exports={set:p,clear:m}},"1fa8":function(n,e,t){var o=t("cb7c");n.exports=function(n,e,t,r){try{return r?e(o(t)[0],t[1]):e(t)}catch(e){var a=n.return;throw void 0!==a&&o(a.call(n)),e}}},"20d6":function(n,e,t){"use strict";var o=t("5ca1"),r=t("0a49")(6),a="findIndex",i=!0;a in[]&&Array(1)[a]((function(){i=!1})),o(o.P+o.F*i,"Array",{findIndex:function(n){return r(this,n,arguments.length>1?arguments[1]:void 0)}}),t("9c6c")(a)},"214f":function(n,e,t){"use strict";var o=t("32e9"),r=t("2aba"),a=t("79e5"),i=t("be13"),s=t("2b4c");n.exports=function(n,e,t){var l=s(n),c=t(i,l,""[n]),d=c[0],u=c[1];a((function(){var e={};return e[l]=function(){return 7},7!=""[n](e)}))&&(r(String.prototype,n,d),o(RegExp.prototype,l,2==e?function(n,e){return u.call(n,this,e)}:function(n){return u.call(n,this)}))}},"230e":function(n,e,t){var o=t("d3f4"),r=t("7726").document,a=o(r)&&o(r.createElement);n.exports=function(n){return a?r.createElement(n):{}}},2350:function(n,e){n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=function(n,e){var t=n[1]||"",o=n[3];if(!o)return t;if(e&&"function"==typeof btoa){var r=(i=o,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),a=o.sources.map((function(n){return"/*# sourceURL="+o.sourceRoot+n+" */"}));return[t].concat(a).concat([r]).join("\n")}var i;return[t].join("\n")}(e,n);return e[2]?"@media "+e[2]+"{"+t+"}":t})).join("")},e.i=function(n,t){"string"==typeof n&&(n=[[null,n,""]]);for(var o={},r=0;r<this.length;r++){var a=this[r][0];"number"==typeof a&&(o[a]=!0)}for(r=0;r<n.length;r++){var i=n[r];"number"==typeof i[0]&&o[i[0]]||(t&&!i[2]?i[2]=t:t&&(i[2]="("+i[2]+") and ("+t+")"),e.push(i))}},e}},"23c6":function(n,e,t){var o=t("2d95"),r=t("2b4c")("toStringTag"),a="Arguments"==o(function(){return arguments}());n.exports=function(n){var e,t,i;return void 0===n?"Undefined":null===n?"Null":"string"==typeof(t=function(n,e){try{return n[e]}catch(n){}}(e=Object(n),r))?t:a?o(e):"Object"==(i=o(e))&&"function"==typeof e.callee?"Arguments":i}},2621:function(n,e){e.f=Object.getOwnPropertySymbols},"27ee":function(n,e,t){var o=t("23c6"),r=t("2b4c")("iterator"),a=t("84f2");n.exports=t("8378").getIteratorMethod=function(n){if(null!=n)return n[r]||n["@@iterator"]||a[o(n)]}},"28a5":function(n,e,t){t("214f")("split",2,(function(n,e,o){"use strict";var r=t("aae3"),a=o,i=[].push,s="length";if("c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1)[s]||2!="ab".split(/(?:ab)*/)[s]||4!=".".split(/(.?)(.?)/)[s]||".".split(/()()/)[s]>1||"".split(/.?/)[s]){var l=void 0===/()??/.exec("")[1];o=function(n,e){var t=String(this);if(void 0===n&&0===e)return[];if(!r(n))return a.call(t,n,e);var o,c,d,u,p,m=[],g=(n.ignoreCase?"i":"")+(n.multiline?"m":"")+(n.unicode?"u":"")+(n.sticky?"y":""),h=0,f=void 0===e?4294967295:e>>>0,b=new RegExp(n.source,g+"g");for(l||(o=new RegExp("^"+b.source+"$(?!\\s)",g));(c=b.exec(t))&&!((d=c.index+c[0][s])>h&&(m.push(t.slice(h,c.index)),!l&&c[s]>1&&c[0].replace(o,(function(){for(p=1;p<arguments[s]-2;p++)void 0===arguments[p]&&(c[p]=void 0)})),c[s]>1&&c.index<t[s]&&i.apply(m,c.slice(1)),u=c[0][s],h=d,m[s]>=f));)b.lastIndex===c.index&&b.lastIndex++;return h===t[s]?!u&&b.test("")||m.push(""):m.push(t.slice(h)),m[s]>f?m.slice(0,f):m}}else"0".split(void 0,0)[s]&&(o=function(n,e){return void 0===n&&0===e?[]:a.call(this,n,e)});return[function(t,r){var a=n(this),i=null==t?void 0:t[e];return void 0!==i?i.call(t,a,r):o.call(String(a),t,r)},o]}))},"2aba":function(n,e,t){var o=t("7726"),r=t("32e9"),a=t("69a8"),i=t("ca5a")("src"),s=Function.toString,l=(""+s).split("toString");t("8378").inspectSource=function(n){return s.call(n)},(n.exports=function(n,e,t,s){var c="function"==typeof t;c&&(a(t,"name")||r(t,"name",e)),n[e]!==t&&(c&&(a(t,i)||r(t,i,n[e]?""+n[e]:l.join(String(e)))),n===o?n[e]=t:s?n[e]?n[e]=t:r(n,e,t):(delete n[e],r(n,e,t)))})(Function.prototype,"toString",(function(){return"function"==typeof this&&this[i]||s.call(this)}))},"2aeb":function(n,e,t){var o=t("cb7c"),r=t("1495"),a=t("e11e"),i=t("613b")("IE_PROTO"),s=function(){},l=function(){var n,e=t("230e")("iframe"),o=a.length;for(e.style.display="none",t("fab2").appendChild(e),e.src="javascript:",(n=e.contentWindow.document).open(),n.write("<script>document.F=Object<\/script>"),n.close(),l=n.F;o--;)delete l.prototype[a[o]];return l()};n.exports=Object.create||function(n,e){var t;return null!==n?(s.prototype=o(n),t=new s,s.prototype=null,t[i]=n):t=l(),void 0===e?t:r(t,e)}},"2b4c":function(n,e,t){var o=t("5537")("wks"),r=t("ca5a"),a=t("7726").Symbol,i="function"==typeof a;(n.exports=function(n){return o[n]||(o[n]=i&&a[n]||(i?a:r)("Symbol."+n))}).store=o},"2d00":function(n,e){n.exports=!1},"2d95":function(n,e){var t={}.toString;n.exports=function(n){return t.call(n).slice(8,-1)}},"2e08":function(n,e,t){var o=t("9def"),r=t("9744"),a=t("be13");n.exports=function(n,e,t,i){var s=String(a(n)),l=s.length,c=void 0===t?" ":String(t),d=o(e);if(d<=l||""==c)return s;var u=d-l,p=r.call(c,Math.ceil(u/c.length));return p.length>u&&(p=p.slice(0,u)),i?p+s:s+p}},"2f21":function(n,e,t){"use strict";var o=t("79e5");n.exports=function(n,e){return!!n&&o((function(){e?n.call(null,(function(){}),1):n.call(null)}))}},"2fdb":function(n,e,t){"use strict";var o=t("5ca1"),r=t("d2c8");o(o.P+o.F*t("5147")("includes"),"String",{includes:function(n){return!!~r(this,n,"includes").indexOf(n,arguments.length>1?arguments[1]:void 0)}})},"31f4":function(n,e){n.exports=function(n,e,t){var o=void 0===t;switch(e.length){case 0:return o?n():n.call(t);case 1:return o?n(e[0]):n.call(t,e[0]);case 2:return o?n(e[0],e[1]):n.call(t,e[0],e[1]);case 3:return o?n(e[0],e[1],e[2]):n.call(t,e[0],e[1],e[2]);case 4:return o?n(e[0],e[1],e[2],e[3]):n.call(t,e[0],e[1],e[2],e[3])}return n.apply(t,e)}},"32e9":function(n,e,t){var o=t("86cc"),r=t("4630");n.exports=t("9e1e")?function(n,e,t){return o.f(n,e,r(1,t))}:function(n,e,t){return n[e]=t,n}},"33a4":function(n,e,t){var o=t("84f2"),r=t("2b4c")("iterator"),a=Array.prototype;n.exports=function(n){return void 0!==n&&(o.Array===n||a[r]===n)}},"37e7":function(n,e,t){"use strict";t.r(e),e.default={functional:!0,render:function(n,e){var t=e._c;return t("svg",{class:[e.data.class,e.data.staticClass],style:[e.data.style,e.data.staticStyle],attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 32 32"}},[t("path",{attrs:{d:"M25.468 6.947a1.004 1.004 0 0 0-1.03.057L18 11.384V7.831a1.001 1.001 0 0 0-1.562-.827l-12 8.164a1 1 0 0 0 0 1.654l12 8.168A.999.999 0 0 0 18 24.164v-3.556l6.438 4.382A.999.999 0 0 0 26 24.164V7.831c0-.371-.205-.71-.532-.884z"}})])}}},3846:function(n,e,t){t("9e1e")&&"g"!=/./g.flags&&t("86cc").f(RegExp.prototype,"flags",{configurable:!0,get:t("0bfb")})},"386b":function(n,e,t){var o=t("5ca1"),r=t("79e5"),a=t("be13"),i=/"/g,s=function(n,e,t,o){var r=String(a(n)),s="<"+e;return""!==t&&(s+=" "+t+'="'+String(o).replace(i,"&quot;")+'"'),s+">"+r+"</"+e+">"};n.exports=function(n,e){var t={};t[n]=e(s),o(o.P+o.F*r((function(){var e=""[n]('"');return e!==e.toLowerCase()||e.split('"').length>3})),"String",t)}},"38fd":function(n,e,t){var o=t("69a8"),r=t("4bf8"),a=t("613b")("IE_PROTO"),i=Object.prototype;n.exports=Object.getPrototypeOf||function(n){return n=r(n),o(n,a)?n[a]:"function"==typeof n.constructor&&n instanceof n.constructor?n.constructor.prototype:n instanceof Object?i:null}},"41a0":function(n,e,t){"use strict";var o=t("2aeb"),r=t("4630"),a=t("7f20"),i={};t("32e9")(i,t("2b4c")("iterator"),(function(){return this})),n.exports=function(n,e,t){n.prototype=o(i,{next:r(1,t)}),a(n,e+" Iterator")}},"456d":function(n,e,t){var o=t("4bf8"),r=t("0d58");t("5eda")("keys",(function(){return function(n){return r(o(n))}}))},4588:function(n,e){var t=Math.ceil,o=Math.floor;n.exports=function(n){return isNaN(n=+n)?0:(n>0?o:t)(n)}},4630:function(n,e){n.exports=function(n,e){return{enumerable:!(1&n),configurable:!(2&n),writable:!(4&n),value:e}}},4713:function(n,e,t){"use strict";t.r(e),e.default={functional:!0,render:function(n,e){var t=e._c;return t("svg",{class:[e.data.class,e.data.staticClass],style:[e.data.style,e.data.staticStyle],attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 32 32"}},[t("path",{attrs:{d:"M26.667 5.333H5.334h-.001a2.667 2.667 0 0 0-2.666 2.666V24.001a2.667 2.667 0 0 0 2.666 2.666h21.335a2.667 2.667 0 0 0 2.666-2.666V8v-.001a2.667 2.667 0 0 0-2.666-2.666h-.001zM5.333 16h5.333v2.667H5.333V16zm13.334 8H5.334v-2.667h13.333V24zm8 0h-5.333v-2.667h5.333V24zm0-5.333H13.334V16h13.333v2.667z"}})])}}},"475a":function(n,e,t){"use strict";t.r(e),e.default={functional:!0,render:function(n,e){var t=e._c;return t("svg",{class:[e.data.class,e.data.staticClass],style:[e.data.style,e.data.staticStyle],attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 32 32"}},[t("path",{attrs:{d:"M.622 18.334h19.54v7.55l11.052-9.412-11.052-9.413v7.549H.622v3.725z"}})])}}},"48d3":function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(n){for(var t in n)e.hasOwnProperty(t)||(e[t]=n[t])}(t("b349"));var o=t("66a1");e.modifiers=o.modifiers},4917:function(n,e,t){t("214f")("match",1,(function(n,e,t){return[function(t){"use strict";var o=n(this),r=null==t?void 0:t[e];return void 0!==r?r.call(t,o):new RegExp(t)[e](String(o))},t]}))},"499e":function(n,e,t){"use strict";function o(n,e){for(var t=[],o={},r=0;r<e.length;r++){var a=e[r],i=a[0],s={id:n+":"+r,css:a[1],media:a[2],sourceMap:a[3]};o[i]?o[i].parts.push(s):t.push(o[i]={id:i,parts:[s]})}return t}t.r(e),t.d(e,"default",(function(){return m}));var r="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!r)throw new Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var a={},i=r&&(document.head||document.getElementsByTagName("head")[0]),s=null,l=0,c=!1,d=function(){},u=null,p="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function m(n,e,t,r){c=t,u=r||{};var i=o(n,e);return g(i),function(e){for(var t=[],r=0;r<i.length;r++){var s=i[r];(l=a[s.id]).refs--,t.push(l)}e?g(i=o(n,e)):i=[];for(r=0;r<t.length;r++){var l;if(0===(l=t[r]).refs){for(var c=0;c<l.parts.length;c++)l.parts[c]();delete a[l.id]}}}}function g(n){for(var e=0;e<n.length;e++){var t=n[e],o=a[t.id];if(o){o.refs++;for(var r=0;r<o.parts.length;r++)o.parts[r](t.parts[r]);for(;r<t.parts.length;r++)o.parts.push(f(t.parts[r]));o.parts.length>t.parts.length&&(o.parts.length=t.parts.length)}else{var i=[];for(r=0;r<t.parts.length;r++)i.push(f(t.parts[r]));a[t.id]={id:t.id,refs:1,parts:i}}}}function h(){var n=document.createElement("style");return n.type="text/css",i.appendChild(n),n}function f(n){var e,t,o=document.querySelector('style[data-vue-ssr-id~="'+n.id+'"]');if(o){if(c)return d;o.parentNode.removeChild(o)}if(p){var r=l++;o=s||(s=h()),e=y.bind(null,o,r,!1),t=y.bind(null,o,r,!0)}else o=h(),e=x.bind(null,o),t=function(){o.parentNode.removeChild(o)};return e(n),function(o){if(o){if(o.css===n.css&&o.media===n.media&&o.sourceMap===n.sourceMap)return;e(n=o)}else t()}}var b,v=(b=[],function(n,e){return b[n]=e,b.filter(Boolean).join("\n")});function y(n,e,t,o){var r=t?"":o.css;if(n.styleSheet)n.styleSheet.cssText=v(e,r);else{var a=document.createTextNode(r),i=n.childNodes;i[e]&&n.removeChild(i[e]),i.length?n.insertBefore(a,i[e]):n.appendChild(a)}}function x(n,e){var t=e.css,o=e.media,r=e.sourceMap;if(o&&n.setAttribute("media",o),u.ssrId&&n.setAttribute("data-vue-ssr-id",e.id),r&&(t+="\n/*# sourceURL="+r.sources[0]+" */",t+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */"),n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}},"4a59":function(n,e,t){var o=t("9b43"),r=t("1fa8"),a=t("33a4"),i=t("cb7c"),s=t("9def"),l=t("27ee"),c={},d={};(e=n.exports=function(n,e,t,u,p){var m,g,h,f,b=p?function(){return n}:l(n),v=o(t,u,e?2:1),y=0;if("function"!=typeof b)throw TypeError(n+" is not iterable!");if(a(b)){for(m=s(n.length);m>y;y++)if((f=e?v(i(g=n[y])[0],g[1]):v(n[y]))===c||f===d)return f}else for(h=b.call(n);!(g=h.next()).done;)if((f=r(h,v,g.value,e))===c||f===d)return f}).BREAK=c,e.RETURN=d},"4b41":function(n,e,t){"use strict";t.r(e),e.default={functional:!0,render:function(n,e){var t=e._c;return t("svg",{class:[e.data.class,e.data.staticClass],style:[e.data.style,e.data.staticStyle],attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 28 32"}},[t("path",{attrs:{d:"M13.728 6.272v19.456q0 .448-.352.8t-.8.32-.8-.32l-5.952-5.952H1.152q-.48 0-.8-.352t-.352-.8v-6.848q0-.48.352-.8t.8-.352h4.672l5.952-5.952q.32-.32.8-.32t.8.32.352.8zM20.576 16q0 1.344-.768 2.528t-2.016 1.664q-.16.096-.448.096-.448 0-.8-.32t-.32-.832q0-.384.192-.64t.544-.448.608-.384.512-.64.192-1.024-.192-1.024-.512-.64-.608-.384-.544-.448-.192-.64q0-.48.32-.832t.8-.32q.288 0 .448.096 1.248.48 2.016 1.664T20.576 16zm4.576 0q0 2.72-1.536 5.056t-4 3.36q-.256.096-.448.096-.48 0-.832-.352t-.32-.8q0-.704.672-1.056 1.024-.512 1.376-.8 1.312-.96 2.048-2.4T22.848 16t-.736-3.104-2.048-2.4q-.352-.288-1.376-.8-.672-.352-.672-1.056 0-.448.32-.8t.8-.352q.224 0 .48.096 2.496 1.056 4 3.36T25.152 16zm4.576 0q0 4.096-2.272 7.552t-6.048 5.056q-.224.096-.448.096-.48 0-.832-.352t-.32-.8q0-.64.704-1.056l.384-.192q.256-.128.416-.192.8-.448 1.44-.896 2.208-1.632 3.456-4.064T27.424 16t-1.216-5.152-3.456-4.064q-.64-.448-1.44-.896-.128-.096-.416-.192t-.384-.192q-.704-.416-.704-1.056 0-.448.32-.8t.832-.352q.224 0 .448.096 3.776 1.632 6.048 5.056T29.728 16z"}})])}}},"4bf8":function(n,e,t){var o=t("be13");n.exports=function(n){return Object(o(n))}},"4d26":function(n,e,t){var o;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/!function(){"use strict";var t={}.hasOwnProperty;function r(){for(var n=[],e=0;e<arguments.length;e++){var o=arguments[e];if(o){var a=typeof o;if("string"===a||"number"===a)n.push(o);else if(Array.isArray(o)&&o.length){var i=r.apply(null,o);i&&n.push(i)}else if("object"===a)for(var s in o)t.call(o,s)&&o[s]&&n.push(s)}}return n.join(" ")}n.exports?(r.default=r,n.exports=r):void 0===(o=function(){return r}.apply(e,[]))||(n.exports=o)}()},5147:function(n,e,t){var o=t("2b4c")("match");n.exports=function(n){var e=/./;try{"/./"[n](e)}catch(t){try{return e[o]=!1,!"/./"[n](e)}catch(n){}}return!0}},"52a7":function(n,e){e.f={}.propertyIsEnumerable},"52f0":function(n,e,t){var o={"./loading.svg":"885d","./loop-all.svg":"f866","./loop-none.svg":"c3ab","./loop-one.svg":"5527","./lrc.svg":"4713","./menu.svg":"906b","./order-list.svg":"475a","./order-random.svg":"7a1a","./pause.svg":"daf8","./play.svg":"84d8","./right.svg":"bf5c","./skip.svg":"37e7","./volume-down.svg":"bdba","./volume-off.svg":"adec","./volume-up.svg":"4b41"};function r(n){var e=a(n);return t(e)}function a(n){var e=o[n];if(!(e+1)){var t=new Error("Cannot find module '"+n+"'");throw t.code="MODULE_NOT_FOUND",t}return e}r.keys=function(){return Object.keys(o)},r.resolve=a,n.exports=r,r.id="52f0"},"551c":function(n,e,t){"use strict";var o,r,a,i,s=t("2d00"),l=t("7726"),c=t("9b43"),d=t("23c6"),u=t("5ca1"),p=t("d3f4"),m=t("d8e8"),g=t("f605"),h=t("4a59"),f=t("ebd6"),b=t("1991").set,v=t("8079")(),y=t("a5b8"),x=t("9c80"),k=t("a25f"),w=t("bcaa"),E=l.TypeError,T=l.process,_=T&&T.versions,j=_&&_.v8||"",S=l.Promise,A="process"==d(T),C=function(){},I=r=y.f,D=!!function(){try{var n=S.resolve(1),e=(n.constructor={})[t("2b4c")("species")]=function(n){n(C,C)};return(A||"function"==typeof PromiseRejectionEvent)&&n.then(C)instanceof e&&0!==j.indexOf("6.6")&&-1===k.indexOf("Chrome/66")}catch(n){}}(),P=function(n){var e;return!(!p(n)||"function"!=typeof(e=n.then))&&e},z=function(n,e){if(!n._n){n._n=!0;var t=n._c;v((function(){for(var o=n._v,r=1==n._s,a=0,i=function(e){var t,a,i,s=r?e.ok:e.fail,l=e.resolve,c=e.reject,d=e.domain;try{s?(r||(2==n._h&&M(n),n._h=1),!0===s?t=o:(d&&d.enter(),t=s(o),d&&(d.exit(),i=!0)),t===e.promise?c(E("Promise-chain cycle")):(a=P(t))?a.call(t,l,c):l(t)):c(o)}catch(n){d&&!i&&d.exit(),c(n)}};t.length>a;)i(t[a++]);n._c=[],n._n=!1,e&&!n._h&&R(n)}))}},R=function(n){b.call(l,(function(){var e,t,o,r=n._v,a=O(n);if(a&&(e=x((function(){A?T.emit("unhandledRejection",r,n):(t=l.onunhandledrejection)?t({promise:n,reason:r}):(o=l.console)&&o.error&&o.error("Unhandled promise rejection",r)})),n._h=A||O(n)?2:1),n._a=void 0,a&&e.e)throw e.v}))},O=function(n){return 1!==n._h&&0===(n._a||n._c).length},M=function(n){b.call(l,(function(){var e;A?T.emit("rejectionHandled",n):(e=l.onrejectionhandled)&&e({promise:n,reason:n._v})}))},B=function(n){var e=this;e._d||(e._d=!0,(e=e._w||e)._v=n,e._s=2,e._a||(e._a=e._c.slice()),z(e,!0))},L=function(n){var e,t=this;if(!t._d){t._d=!0,t=t._w||t;try{if(t===n)throw E("Promise can't be resolved itself");(e=P(n))?v((function(){var o={_w:t,_d:!1};try{e.call(n,c(L,o,1),c(B,o,1))}catch(n){B.call(o,n)}})):(t._v=n,t._s=1,z(t,!1))}catch(n){B.call({_w:t,_d:!1},n)}}};D||(S=function(n){g(this,S,"Promise","_h"),m(n),o.call(this);try{n(c(L,this,1),c(B,this,1))}catch(n){B.call(this,n)}},(o=function(n){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=t("dcbc")(S.prototype,{then:function(n,e){var t=I(f(this,S));return t.ok="function"!=typeof n||n,t.fail="function"==typeof e&&e,t.domain=A?T.domain:void 0,this._c.push(t),this._a&&this._a.push(t),this._s&&z(this,!1),t.promise},catch:function(n){return this.then(void 0,n)}}),a=function(){var n=new o;this.promise=n,this.resolve=c(L,n,1),this.reject=c(B,n,1)},y.f=I=function(n){return n===S||n===i?new a(n):r(n)}),u(u.G+u.W+u.F*!D,{Promise:S}),t("7f20")(S,"Promise"),t("7a56")("Promise"),i=t("8378").Promise,u(u.S+u.F*!D,"Promise",{reject:function(n){var e=I(this);return(0,e.reject)(n),e.promise}}),u(u.S+u.F*(s||!D),"Promise",{resolve:function(n){return w(s&&this===i?S:this,n)}}),u(u.S+u.F*!(D&&t("5cc5")((function(n){S.all(n).catch(C)}))),"Promise",{all:function(n){var e=this,t=I(e),o=t.resolve,r=t.reject,a=x((function(){var t=[],a=0,i=1;h(n,!1,(function(n){var s=a++,l=!1;t.push(void 0),i++,e.resolve(n).then((function(n){l||(l=!0,t[s]=n,--i||o(t))}),r)})),--i||o(t)}));return a.e&&r(a.v),t.promise},race:function(n){var e=this,t=I(e),o=t.reject,r=x((function(){h(n,!1,(function(n){e.resolve(n).then(t.resolve,o)}))}));return r.e&&o(r.v),t.promise}})},5527:function(n,e,t){"use strict";t.r(e),e.default={functional:!0,render:function(n,e){var t=e._c;return t("svg",{class:[e.data.class,e.data.staticClass],style:[e.data.style,e.data.staticStyle],attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 33 32"}},[t("path",{attrs:{d:"M9.333 9.333h13.333v4L27.999 8l-5.333-5.333v4h-16v8h2.667V9.334zm13.334 13.334H9.334v-4L4.001 24l5.333 5.333v-4h16v-8h-2.667v5.333zM17.333 20v-8H16l-2.667 1.333v1.333h2v5.333h2z"}})])}}},5537:function(n,e,t){var o=t("8378"),r=t("7726"),a=r["__core-js_shared__"]||(r["__core-js_shared__"]={});(n.exports=function(n,e){return a[n]||(a[n]=void 0!==e?e:{})})("versions",[]).push({version:o.version,mode:t("2d00")?"pure":"global",copyright:"© 2018 Denis Pushkarev (zloirock.ru)"})},"55dd":function(n,e,t){"use strict";var o=t("5ca1"),r=t("d8e8"),a=t("4bf8"),i=t("79e5"),s=[].sort,l=[1,2,3];o(o.P+o.F*(i((function(){l.sort(void 0)}))||!i((function(){l.sort(null)}))||!t("2f21")(s)),"Array",{sort:function(n){return void 0===n?s.call(a(this)):s.call(a(this),r(n))}})},"5ca1":function(n,e,t){var o=t("7726"),r=t("8378"),a=t("32e9"),i=t("2aba"),s=t("9b43"),l=function(n,e,t){var c,d,u,p,m=n&l.F,g=n&l.G,h=n&l.S,f=n&l.P,b=n&l.B,v=g?o:h?o[e]||(o[e]={}):(o[e]||{}).prototype,y=g?r:r[e]||(r[e]={}),x=y.prototype||(y.prototype={});for(c in g&&(t=e),t)u=((d=!m&&v&&void 0!==v[c])?v:t)[c],p=b&&d?s(u,o):f&&"function"==typeof u?s(Function.call,u):u,v&&i(v,c,u,n&l.U),y[c]!=u&&a(y,c,p),f&&x[c]!=u&&(x[c]=u)};o.core=r,l.F=1,l.G=2,l.S=4,l.P=8,l.B=16,l.W=32,l.U=64,l.R=128,n.exports=l},"5cc5":function(n,e,t){var o=t("2b4c")("iterator"),r=!1;try{var a=[7][o]();a.return=function(){r=!0},Array.from(a,(function(){throw 2}))}catch(n){}n.exports=function(n,e){if(!e&&!r)return!1;var t=!1;try{var a=[7],i=a[o]();i.next=function(){return{done:t=!0}},a[o]=function(){return i},n(a)}catch(n){}return t}},"5dbc":function(n,e,t){var o=t("d3f4"),r=t("8b97").set;n.exports=function(n,e,t){var a,i=e.constructor;return i!==t&&"function"==typeof i&&(a=i.prototype)!==t.prototype&&o(a)&&r&&r(n,a),n}},"5eda":function(n,e,t){var o=t("5ca1"),r=t("8378"),a=t("79e5");n.exports=function(n,e){var t=(r.Object||{})[n]||Object[n],i={};i[n]=e(t),o(o.S+o.F*a((function(){t(1)})),"Object",i)}},"610a":function(n,e,t){var o=t("ab57");"string"==typeof o&&(o=[[n.i,o,""]]),o.locals&&(n.exports=o.locals);(0,t("499e").default)("4573c8b0",o,!0,{sourceMap:!1,shadowMode:!1})},"613b":function(n,e,t){var o=t("5537")("keys"),r=t("ca5a");n.exports=function(n){return o[n]||(o[n]=r(n))}},"626a":function(n,e,t){var o=t("2d95");n.exports=Object("z").propertyIsEnumerable(0)?Object:function(n){return"String"==o(n)?n.split(""):Object(n)}},"65d9":function(n,e,t){"use strict";
/**
  * vue-class-component v6.3.2
  * (c) 2015-present Evan You
  * @license MIT
  */Object.defineProperty(e,"__esModule",{value:!0});var o,r=(o=t("8bbf"))&&"object"==typeof o&&"default"in o?o.default:o,a="undefined"!=typeof Reflect&&Reflect.defineMetadata;function i(n,e,t){(t?Reflect.getOwnMetadataKeys(e,t):Reflect.getOwnMetadataKeys(e)).forEach((function(o){var r=t?Reflect.getOwnMetadata(o,e,t):Reflect.getOwnMetadata(o,e);t?Reflect.defineMetadata(o,r,n,t):Reflect.defineMetadata(o,r,n)}))}var s={__proto__:[]}instanceof Array;var l=["data","beforeCreate","created","beforeMount","mounted","beforeDestroy","destroyed","beforeUpdate","updated","activated","deactivated","render","errorCaptured"];function c(n,e){void 0===e&&(e={}),e.name=e.name||n._componentTag||n.name;var t=n.prototype;Object.getOwnPropertyNames(t).forEach((function(n){if("constructor"!==n)if(l.indexOf(n)>-1)e[n]=t[n];else{var o=Object.getOwnPropertyDescriptor(t,n);void 0!==o.value?"function"==typeof o.value?(e.methods||(e.methods={}))[n]=o.value:(e.mixins||(e.mixins=[])).push({data:function(){var e;return(e={})[n]=o.value,e}}):(o.get||o.set)&&((e.computed||(e.computed={}))[n]={get:o.get,set:o.set})}})),(e.mixins||(e.mixins=[])).push({data:function(){return function(n,e){var t=e.prototype._init;e.prototype._init=function(){var e=this,t=Object.getOwnPropertyNames(n);if(n.$options.props)for(var o in n.$options.props)n.hasOwnProperty(o)||t.push(o);t.forEach((function(t){"_"!==t.charAt(0)&&Object.defineProperty(e,t,{get:function(){return n[t]},set:function(e){n[t]=e},configurable:!0})}))};var o=new e;e.prototype._init=t;var r={};return Object.keys(o).forEach((function(n){void 0!==o[n]&&(r[n]=o[n])})),r}(this,n)}});var o=n.__decorators__;o&&(o.forEach((function(n){return n(e)})),delete n.__decorators__);var c,d,u=Object.getPrototypeOf(n.prototype),p=u instanceof r?u.constructor:r,m=p.extend(e);return function(n,e,t){Object.getOwnPropertyNames(e).forEach((function(o){if("prototype"!==o){var r=Object.getOwnPropertyDescriptor(n,o);if(!r||r.configurable){var a,i,l=Object.getOwnPropertyDescriptor(e,o);if(!s){if("cid"===o)return;var c=Object.getOwnPropertyDescriptor(t,o);if(a=l.value,i=typeof a,null!=a&&("object"===i||"function"===i)&&c&&c.value===l.value)return}0,Object.defineProperty(n,o,l)}}}))}(m,n,p),a&&(i(c=m,d=n),Object.getOwnPropertyNames(d.prototype).forEach((function(n){i(c.prototype,d.prototype,n)})),Object.getOwnPropertyNames(d).forEach((function(n){i(c,d,n)}))),m}function d(n){return"function"==typeof n?c(n):function(e){return c(e,n)}}d.registerHooks=function(n){l.push.apply(l,n)},e.default=d,e.createDecorator=function(n){return function(e,t,o){var r="function"==typeof e?e:e.constructor;r.__decorators__||(r.__decorators__=[]),"number"!=typeof o&&(o=void 0),r.__decorators__.push((function(e){return n(e,t,o)}))}},e.mixins=function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];return r.extend({mixins:n})}},"66a1":function(n,e,t){"use strict";var o=this&&this.__assign||Object.assign||function(n){for(var e,t=1,o=arguments.length;t<o;t++)for(var r in e=arguments[t])Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n};function r(n,e,t){for(var o=0,r=e;o<r.length;o++){if(!(0,r[o])(n))return}t&&t(n)}Object.defineProperty(e,"__esModule",{value:!0});var a={esc:27,tab:9,enter:13,space:32,up:38,down:40,del:[8,46],left:37,right:39};function i(n){for(var e=[],t=0,o=n;t<o.length;t++){var r=o[t];if("number"==typeof r)e.push(r);else{var i=a[r];"number"==typeof i?e.push(i):e.push.apply(e,i)}}switch(e.length){case 0:return function(n){return!1};case 1:var s=e[0];return function(n){return n.keyCode===s};default:return function(n){return e.indexOf(n.keyCode)>=0}}}function s(n,e,t,o,r){Object.defineProperty(n,t,{get:function(){var a=l(e.concat([o]),r);return Object.defineProperty(n,t,{value:a,enumerable:!0}),a},enumerable:!0,configurable:!0})}function l(n,e){function t(e){return e instanceof Function?function(t){return r(t,n,e)}:void r(e,n)}if(e.keyboard||e.mouse){var l=o({},e,{keyboard:!1,mouse:!1});e.keyboard&&(function(n,e,t){var o=function(o){var r=o;if("left"===r||"right"===r)return"continue";var i=a[r];if("number"==typeof i)s(n,e,r,(function(n){return n.keyCode===i}),t);else{var l=i[0],c=i[1];s(n,e,r,(function(n){return n.keyCode===l||n.keyCode===c}),t)}};for(var r in a)o(r)}(t,n,l),function(n,e,t){Object.defineProperty(n,"keys",{get:function(){var n=this,o=function(){for(var o=[],r=0;r<arguments.length;r++)o[r]=arguments[r];var a="keys:"+o.toString(),l=n[a];if(void 0!==l)return l;var c=i(o);return s(n,e,a,c,t),n[a]};return Object.defineProperty(this,"keys",{value:o,enumerable:!0}),o},enumerable:!0,configurable:!0})}(t,n,l)),e.mouse&&s(t,n,"middle",(function(n){return 1===n.button}),l),s(t,n,"left",(function(n){return 37===n.keyCode||0===n.button}),l),s(t,n,"right",(function(n){return 39===n.keyCode||2===n.button}),l)}if(e.exact){l=o({},e,{exact:!1,modkey:!1});!function(n,e,t){Object.defineProperty(n,"exact",{get:function(){var n=this,o=function(){for(var o=[],r=0;r<arguments.length;r++)o[r]=arguments[r];var a="exact:"+o.toString(),i=n[a];if(void 0!==i)return i;var l={ctrl:!1,shift:!1,alt:!1,meta:!1};o.forEach((function(n){return l[n]=!0}));var c=function(n){return!!n.ctrlKey===l.ctrl&&!!n.shiftKey===l.shift&&!!n.altKey===l.alt&&!!n.metaKey===l.meta};return s(n,e,a,c,t),n[a]};return Object.defineProperty(this,"exact",{value:o,enumerable:!0}),o},enumerable:!0,configurable:!0})}(t,n,l)}if(e.modkey){l=o({},e,{exact:!1});s(t,n,"ctrl",(function(n){return n.ctrlKey}),l),s(t,n,"shift",(function(n){return n.shiftKey}),l),s(t,n,"alt",(function(n){return n.altKey}),l),s(t,n,"meta",(function(n){return n.metaKey}),l),s(t,n,"noctrl",(function(n){return!n.ctrlKey}),l),s(t,n,"noshift",(function(n){return!n.shiftKey}),l),s(t,n,"noalt",(function(n){return!n.altKey}),l),s(t,n,"nometa",(function(n){return!n.metaKey}),l)}return s(t,n,"stop",(function(n){return n.stopPropagation()||!0}),e),s(t,n,"prevent",(function(n){return n.preventDefault()||!0}),e),s(t,n,"self",(function(n){return n.target===n.currentTarget}),e),t}e.modifiers=l([],{keyboard:!0,mouse:!0,modkey:!0,exact:!0})},6762:function(n,e,t){"use strict";var o=t("5ca1"),r=t("c366")(!0);o(o.P,"Array",{includes:function(n){return r(this,n,arguments.length>1?arguments[1]:void 0)}}),t("9c6c")("includes")},6821:function(n,e,t){var o=t("626a"),r=t("be13");n.exports=function(n){return o(r(n))}},"69a8":function(n,e){var t={}.hasOwnProperty;n.exports=function(n,e){return t.call(n,e)}},"6a99":function(n,e,t){var o=t("d3f4");n.exports=function(n,e){if(!o(n))return n;var t,r;if(e&&"function"==typeof(t=n.toString)&&!o(r=t.call(n)))return r;if("function"==typeof(t=n.valueOf)&&!o(r=t.call(n)))return r;if(!e&&"function"==typeof(t=n.toString)&&!o(r=t.call(n)))return r;throw TypeError("Can't convert object to primitive value")}},"6b54":function(n,e,t){"use strict";t("3846");var o=t("cb7c"),r=t("0bfb"),a=t("9e1e"),i=/./.toString,s=function(n){t("2aba")(RegExp.prototype,"toString",n,!0)};t("79e5")((function(){return"/a/b"!=i.call({source:"a",flags:"b"})}))?s((function(){var n=o(this);return"/".concat(n.source,"/","flags"in n?n.flags:!a&&n instanceof RegExp?r.call(n):void 0)})):"toString"!=i.name&&s((function(){return i.call(this)}))},7333:function(n,e,t){"use strict";var o=t("0d58"),r=t("2621"),a=t("52a7"),i=t("4bf8"),s=t("626a"),l=Object.assign;n.exports=!l||t("79e5")((function(){var n={},e={},t=Symbol(),o="abcdefghijklmnopqrst";return n[t]=7,o.split("").forEach((function(n){e[n]=n})),7!=l({},n)[t]||Object.keys(l({},e)).join("")!=o}))?function(n,e){for(var t=i(n),l=arguments.length,c=1,d=r.f,u=a.f;l>c;)for(var p,m=s(arguments[c++]),g=d?o(m).concat(d(m)):o(m),h=g.length,f=0;h>f;)u.call(m,p=g[f++])&&(t[p]=m[p]);return t}:l},7514:function(n,e,t){"use strict";var o=t("5ca1"),r=t("0a49")(5),a=!0;"find"in[]&&Array(1).find((function(){a=!1})),o(o.P+o.F*a,"Array",{find:function(n){return r(this,n,arguments.length>1?arguments[1]:void 0)}}),t("9c6c")("find")},7726:function(n,e){var t=n.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=t)},"77f1":function(n,e,t){var o=t("4588"),r=Math.max,a=Math.min;n.exports=function(n,e){return(n=o(n))<0?r(n+e,0):a(n,e)}},"79e5":function(n,e){n.exports=function(n){try{return!!n()}catch(n){return!0}}},"7a1a":function(n,e,t){"use strict";t.r(e),e.default={functional:!0,render:function(n,e){var t=e._c;return t("svg",{class:[e.data.class,e.data.staticClass],style:[e.data.style,e.data.staticStyle],attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 32 32"}},[t("path",{attrs:{d:"M22.667 4l7 6-7 6 7 6-7 6v-4h-3.653l-3.76-3.76 2.827-2.827L20.668 20h2v-8h-2l-12 12h-6v-4h4.347l12-12h3.653V4zm-20 4h6l3.76 3.76L9.6 14.587 7.013 12H2.666V8z"}})])}}},"7a56":function(n,e,t){"use strict";var o=t("7726"),r=t("86cc"),a=t("9e1e"),i=t("2b4c")("species");n.exports=function(n){var e=o[n];a&&e&&!e[i]&&r.f(e,i,{configurable:!0,get:function(){return this}})}},"7f20":function(n,e,t){var o=t("86cc").f,r=t("69a8"),a=t("2b4c")("toStringTag");n.exports=function(n,e,t){n&&!r(n=t?n:n.prototype,a)&&o(n,a,{configurable:!0,value:e})}},"7f7f":function(n,e,t){var o=t("86cc").f,r=Function.prototype,a=/^\s*function ([^ (]*)/;"name"in r||t("9e1e")&&o(r,"name",{configurable:!0,get:function(){try{return(""+this).match(a)[1]}catch(n){return""}}})},8079:function(n,e,t){var o=t("7726"),r=t("1991").set,a=o.MutationObserver||o.WebKitMutationObserver,i=o.process,s=o.Promise,l="process"==t("2d95")(i);n.exports=function(){var n,e,t,c=function(){var o,r;for(l&&(o=i.domain)&&o.exit();n;){r=n.fn,n=n.next;try{r()}catch(o){throw n?t():e=void 0,o}}e=void 0,o&&o.enter()};if(l)t=function(){i.nextTick(c)};else if(!a||o.navigator&&o.navigator.standalone)if(s&&s.resolve){var d=s.resolve(void 0);t=function(){d.then(c)}}else t=function(){r.call(o,c)};else{var u=!0,p=document.createTextNode("");new a(c).observe(p,{characterData:!0}),t=function(){p.data=u=!u}}return function(o){var r={fn:o,next:void 0};e&&(e.next=r),n||(n=r,t()),e=r}}},8378:function(n,e){var t=n.exports={version:"2.5.7"};"number"==typeof __e&&(__e=t)},"84d8":function(n,e,t){"use strict";t.r(e),e.default={functional:!0,render:function(n,e){var t=e._c;return t("svg",{class:[e.data.class,e.data.staticClass],style:[e.data.style,e.data.staticStyle],attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 31"}},[t("path",{attrs:{d:"M15.552 15.168q.448.32.448.832 0 .448-.448.768L1.856 25.28q-.768.512-1.312.192T0 24.192V7.744q0-.96.544-1.28t1.312.192z"}})])}}},"84f2":function(n,e){n.exports={}},"86cc":function(n,e,t){var o=t("cb7c"),r=t("c69a"),a=t("6a99"),i=Object.defineProperty;e.f=t("9e1e")?Object.defineProperty:function(n,e,t){if(o(n),e=a(e,!0),o(t),r)try{return i(n,e,t)}catch(n){}if("get"in t||"set"in t)throw TypeError("Accessors not supported!");return"value"in t&&(n[e]=t.value),n}},"885d":function(n,e,t){"use strict";t.r(e),e.default={functional:!0,render:function(n,e){var t=e._c;return t("svg",{class:[e.data.class,e.data.staticClass],style:[e.data.style,e.data.staticStyle],attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 32 32"}},[t("path",{attrs:{d:"M4 16C4 9.4 9.4 4 16 4s12 5.4 12 12c0 1.2-.8 2-2 2s-2-.8-2-2c0-4.4-3.6-8-8-8s-8 3.6-8 8 3.6 8 8 8c1.2 0 2 .8 2 2s-.8 2-2 2C9.4 28 4 22.6 4 16z"}})])}}},"8b97":function(n,e,t){var o=t("d3f4"),r=t("cb7c"),a=function(n,e){if(r(n),!o(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};n.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(n,e,o){try{(o=t("9b43")(Function.call,t("11e9").f(Object.prototype,"__proto__").set,2))(n,[]),e=!(n instanceof Array)}catch(n){e=!0}return function(n,t){return a(n,t),e?n.__proto__=t:o(n,t),n}}({},!1):void 0),check:a}},"8bbf":function(n,e){n.exports=t(1)},"906b":function(n,e,t){"use strict";t.r(e),e.default={functional:!0,render:function(n,e){var t=e._c;return t("svg",{class:[e.data.class,e.data.staticClass],style:[e.data.style,e.data.staticStyle],attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 22 32"}},[t("path",{attrs:{d:"M20.8 14.4q.704 0 1.152.48T22.4 16t-.48 1.12-1.12.48H1.6q-.64 0-1.12-.48T0 16t.448-1.12T1.6 14.4h19.2zM1.6 11.2q-.64 0-1.12-.48T0 9.6t.448-1.12T1.6 8h19.2q.704 0 1.152.48T22.4 9.6t-.48 1.12-1.12.48H1.6zm19.2 9.6q.704 0 1.152.48t.448 1.12-.48 1.12-1.12.48H1.6q-.64 0-1.12-.48T0 22.4t.448-1.12T1.6 20.8h19.2z"}})])}}},9093:function(n,e,t){var o=t("ce10"),r=t("e11e").concat("length","prototype");e.f=Object.getOwnPropertyNames||function(n){return o(n,r)}},"96cf":function(n,e){!function(e){"use strict";var t=Object.prototype,o=t.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},a=r.iterator||"@@iterator",i=r.asyncIterator||"@@asyncIterator",s=r.toStringTag||"@@toStringTag",l="object"==typeof n,c=e.regeneratorRuntime;if(c)l&&(n.exports=c);else{(c=e.regeneratorRuntime=l?n.exports:{}).wrap=h;var d={},u={};u[a]=function(){return this};var p=Object.getPrototypeOf,m=p&&p(p(j([])));m&&m!==t&&o.call(m,a)&&(u=m);var g=y.prototype=b.prototype=Object.create(u);v.prototype=g.constructor=y,y.constructor=v,y[s]=v.displayName="GeneratorFunction",c.isGeneratorFunction=function(n){var e="function"==typeof n&&n.constructor;return!!e&&(e===v||"GeneratorFunction"===(e.displayName||e.name))},c.mark=function(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,y):(n.__proto__=y,s in n||(n[s]="GeneratorFunction")),n.prototype=Object.create(g),n},c.awrap=function(n){return{__await:n}},x(k.prototype),k.prototype[i]=function(){return this},c.AsyncIterator=k,c.async=function(n,e,t,o){var r=new k(h(n,e,t,o));return c.isGeneratorFunction(e)?r:r.next().then((function(n){return n.done?n.value:r.next()}))},x(g),g[s]="Generator",g[a]=function(){return this},g.toString=function(){return"[object Generator]"},c.keys=function(n){var e=[];for(var t in n)e.push(t);return e.reverse(),function t(){for(;e.length;){var o=e.pop();if(o in n)return t.value=o,t.done=!1,t}return t.done=!0,t}},c.values=j,_.prototype={constructor:_,reset:function(n){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(T),!n)for(var e in this)"t"===e.charAt(0)&&o.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var n=this.tryEntries[0].completion;if("throw"===n.type)throw n.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var e=this;function t(t,o){return i.type="throw",i.arg=n,e.next=t,o&&(e.method="next",e.arg=void 0),!!o}for(var r=this.tryEntries.length-1;r>=0;--r){var a=this.tryEntries[r],i=a.completion;if("root"===a.tryLoc)return t("end");if(a.tryLoc<=this.prev){var s=o.call(a,"catchLoc"),l=o.call(a,"finallyLoc");if(s&&l){if(this.prev<a.catchLoc)return t(a.catchLoc,!0);if(this.prev<a.finallyLoc)return t(a.finallyLoc)}else if(s){if(this.prev<a.catchLoc)return t(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return t(a.finallyLoc)}}}},abrupt:function(n,e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc<=this.prev&&o.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var a=r;break}}a&&("break"===n||"continue"===n)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=n,i.arg=e,a?(this.method="next",this.next=a.finallyLoc,d):this.complete(i)},complete:function(n,e){if("throw"===n.type)throw n.arg;return"break"===n.type||"continue"===n.type?this.next=n.arg:"return"===n.type?(this.rval=this.arg=n.arg,this.method="return",this.next="end"):"normal"===n.type&&e&&(this.next=e),d},finish:function(n){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.finallyLoc===n)return this.complete(t.completion,t.afterLoc),T(t),d}},catch:function(n){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.tryLoc===n){var o=t.completion;if("throw"===o.type){var r=o.arg;T(t)}return r}}throw new Error("illegal catch attempt")},delegateYield:function(n,e,t){return this.delegate={iterator:j(n),resultName:e,nextLoc:t},"next"===this.method&&(this.arg=void 0),d}}}function h(n,e,t,o){var r=e&&e.prototype instanceof b?e:b,a=Object.create(r.prototype),i=new _(o||[]);return a._invoke=function(n,e,t){var o="suspendedStart";return function(r,a){if("executing"===o)throw new Error("Generator is already running");if("completed"===o){if("throw"===r)throw a;return S()}for(t.method=r,t.arg=a;;){var i=t.delegate;if(i){var s=w(i,t);if(s){if(s===d)continue;return s}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===o)throw o="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);o="executing";var l=f(n,e,t);if("normal"===l.type){if(o=t.done?"completed":"suspendedYield",l.arg===d)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(o="completed",t.method="throw",t.arg=l.arg)}}}(n,t,i),a}function f(n,e,t){try{return{type:"normal",arg:n.call(e,t)}}catch(n){return{type:"throw",arg:n}}}function b(){}function v(){}function y(){}function x(n){["next","throw","return"].forEach((function(e){n[e]=function(n){return this._invoke(e,n)}}))}function k(n){var e;this._invoke=function(t,r){function a(){return new Promise((function(e,a){!function e(t,r,a,i){var s=f(n[t],n,r);if("throw"!==s.type){var l=s.arg,c=l.value;return c&&"object"==typeof c&&o.call(c,"__await")?Promise.resolve(c.__await).then((function(n){e("next",n,a,i)}),(function(n){e("throw",n,a,i)})):Promise.resolve(c).then((function(n){l.value=n,a(l)}),i)}i(s.arg)}(t,r,e,a)}))}return e=e?e.then(a,a):a()}}function w(n,e){var t=n.iterator[e.method];if(void 0===t){if(e.delegate=null,"throw"===e.method){if(n.iterator.return&&(e.method="return",e.arg=void 0,w(n,e),"throw"===e.method))return d;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var o=f(t,n.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,d;var r=o.arg;return r?r.done?(e[n.resultName]=r.value,e.next=n.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,d):r:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,d)}function E(n){var e={tryLoc:n[0]};1 in n&&(e.catchLoc=n[1]),2 in n&&(e.finallyLoc=n[2],e.afterLoc=n[3]),this.tryEntries.push(e)}function T(n){var e=n.completion||{};e.type="normal",delete e.arg,n.completion=e}function _(n){this.tryEntries=[{tryLoc:"root"}],n.forEach(E,this),this.reset(!0)}function j(n){if(n){var e=n[a];if(e)return e.call(n);if("function"==typeof n.next)return n;if(!isNaN(n.length)){var t=-1,r=function e(){for(;++t<n.length;)if(o.call(n,t))return e.value=n[t],e.done=!1,e;return e.value=void 0,e.done=!0,e};return r.next=r}}return{next:S}}function S(){return{value:void 0,done:!0}}}(function(){return this}()||Function("return this")())},9744:function(n,e,t){"use strict";var o=t("4588"),r=t("be13");n.exports=function(n){var e=String(r(this)),t="",a=o(n);if(a<0||a==1/0)throw RangeError("Count can't be negative");for(;a>0;(a>>>=1)&&(e+=e))1&a&&(t+=e);return t}},"9b43":function(n,e,t){var o=t("d8e8");n.exports=function(n,e,t){if(o(n),void 0===e)return n;switch(t){case 1:return function(t){return n.call(e,t)};case 2:return function(t,o){return n.call(e,t,o)};case 3:return function(t,o,r){return n.call(e,t,o,r)}}return function(){return n.apply(e,arguments)}}},"9c6c":function(n,e,t){var o=t("2b4c")("unscopables"),r=Array.prototype;null==r[o]&&t("32e9")(r,o,{}),n.exports=function(n){r[o][n]=!0}},"9c80":function(n,e){n.exports=function(n){try{return{e:!1,v:n()}}catch(n){return{e:!0,v:n}}}},"9def":function(n,e,t){var o=t("4588"),r=Math.min;n.exports=function(n){return n>0?r(o(n),9007199254740991):0}},"9e1e":function(n,e,t){n.exports=!t("79e5")((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},a25f:function(n,e,t){var o=t("7726").navigator;n.exports=o&&o.userAgent||""},a481:function(n,e,t){t("214f")("replace",2,(function(n,e,t){return[function(o,r){"use strict";var a=n(this),i=null==o?void 0:o[e];return void 0!==i?i.call(o,a,r):t.call(String(a),o,r)},t]}))},a5b8:function(n,e,t){"use strict";var o=t("d8e8");function r(n){var e,t;this.promise=new n((function(n,o){if(void 0!==e||void 0!==t)throw TypeError("Bad Promise constructor");e=n,t=o})),this.resolve=o(e),this.reject=o(t)}n.exports.f=function(n){return new r(n)}},aa77:function(n,e,t){var o=t("5ca1"),r=t("be13"),a=t("79e5"),i=t("fdef"),s="["+i+"]",l=RegExp("^"+s+s+"*"),c=RegExp(s+s+"*$"),d=function(n,e,t){var r={},s=a((function(){return!!i[n]()||"​"!="​"[n]()})),l=r[n]=s?e(u):i[n];t&&(r[t]=l),o(o.P+o.F*s,"String",r)},u=d.trim=function(n,e){return n=String(r(n)),1&e&&(n=n.replace(l,"")),2&e&&(n=n.replace(c,"")),n};n.exports=d},aae3:function(n,e,t){var o=t("d3f4"),r=t("2d95"),a=t("2b4c")("match");n.exports=function(n){var e;return o(n)&&(void 0!==(e=n[a])?!!e:"RegExp"==r(n))}},ab57:function(n,e,t){(n.exports=t("2350")(!1)).push([n.i,'.aplayer{background:#fff;font-family:Arial,Helvetica,sans-serif;margin:5px;-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,.07),0 1px 5px 0 rgba(0,0,0,.1);box-shadow:0 2px 2px 0 rgba(0,0,0,.07),0 1px 5px 0 rgba(0,0,0,.1);border-radius:2px;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;line-height:normal;position:relative}.aplayer *{-webkit-box-sizing:content-box;box-sizing:content-box}.aplayer svg{width:100%;height:100%}.aplayer svg circle,.aplayer svg path{fill:#fff}.aplayer.aplayer-withlist .aplayer-info{border-bottom:1px solid #e9e9e9}.aplayer.aplayer-withlist .aplayer-list{display:block;width:100%}.aplayer.aplayer-withlist .aplayer-icon-order,.aplayer.aplayer-withlist .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon.aplayer-icon-menu{display:inline}.aplayer.aplayer-withlrc .aplayer-pic{height:90px;width:90px}.aplayer.aplayer-withlrc .aplayer-info{margin-left:90px;height:90px;padding:10px 7px 0 7px}.aplayer.aplayer-withlrc .aplayer-lrc{display:block}.aplayer.aplayer-narrow{width:66px}.aplayer.aplayer-narrow .aplayer-info,.aplayer.aplayer-narrow .aplayer-list{display:none}.aplayer.aplayer-narrow .aplayer-body,.aplayer.aplayer-narrow .aplayer-pic{height:66px;width:66px}.aplayer.aplayer-fixed{position:fixed;bottom:0;left:0;right:0;margin:0;z-index:99;overflow:visible;max-width:400px;-webkit-box-shadow:none;box-shadow:none}.aplayer.aplayer-fixed .aplayer-list{margin-bottom:65px;border:1px solid #eee;border-bottom:none;-webkit-box-sizing:border-box;box-sizing:border-box}.aplayer.aplayer-fixed .aplayer-body{position:fixed;bottom:0;left:0;right:0;margin:0;z-index:99;background:#fff;padding-right:18px;-webkit-transition:width .3s ease;transition:width .3s ease;max-width:400px;width:calc(100% - 18px)}.aplayer.aplayer-fixed .aplayer-lrc{display:block;position:fixed;bottom:10px;left:0;right:0;margin:0;z-index:98;pointer-events:none;text-shadow:-1px -1px 0 #fff}.aplayer.aplayer-fixed .aplayer-lrc:after,.aplayer.aplayer-fixed .aplayer-lrc:before{display:none}.aplayer.aplayer-fixed .aplayer-info{-webkit-transform:scaleX(1);transform:scaleX(1);-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transition:all .3s ease;transition:all .3s ease;border-bottom:none;border-top:1px solid #e9e9e9}.aplayer.aplayer-fixed .aplayer-info .aplayer-music{width:calc(100% - 105px)}.aplayer.aplayer-fixed .aplayer-miniswitcher{display:block}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-info{display:block;-webkit-transform:scaleX(0);transform:scaleX(0)}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body{width:66px!important}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-miniswitcher .aplayer-icon{-webkit-transform:rotateY(0);transform:rotateY(0)}.aplayer.aplayer-fixed .aplayer-icon-back,.aplayer.aplayer-fixed .aplayer-icon-forward,.aplayer.aplayer-fixed .aplayer-icon-lrc,.aplayer.aplayer-fixed .aplayer-icon-play{display:inline-block}.aplayer.aplayer-fixed .aplayer-icon-back,.aplayer.aplayer-fixed .aplayer-icon-forward,.aplayer.aplayer-fixed .aplayer-icon-menu,.aplayer.aplayer-fixed .aplayer-icon-play{position:absolute;bottom:27px;width:20px;height:20px}.aplayer.aplayer-fixed .aplayer-icon-back{right:75px}.aplayer.aplayer-fixed .aplayer-icon-play{right:50px}.aplayer.aplayer-fixed .aplayer-icon-forward{right:25px}.aplayer.aplayer-fixed .aplayer-icon-menu{right:0}.aplayer.aplayer-arrow .aplayer-icon-loop,.aplayer.aplayer-arrow .aplayer-icon-order,.aplayer.aplayer-mobile .aplayer-icon-volume-down,.aplayer.aplayer-mobile .aplayer-icon-volume-up{display:none}.aplayer.aplayer-loading .aplayer-info .aplayer-controller .aplayer-loading-icon{display:block}.aplayer.aplayer-loading .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played .aplayer-thumb{-webkit-transform:scale(1);transform:scale(1)}.aplayer .aplayer-body{position:relative}.aplayer .aplayer-icon{width:15px;height:15px;border:none;background-color:transparent;outline:none;cursor:pointer;opacity:.8;vertical-align:middle;padding:0;font-size:12px;margin:0;display:inline-block}.aplayer .aplayer-icon path{-webkit-transition:all .2s ease-in-out;transition:all .2s ease-in-out}.aplayer .aplayer-icon-back,.aplayer .aplayer-icon-forward,.aplayer .aplayer-icon-lrc,.aplayer .aplayer-icon-order,.aplayer .aplayer-icon-play{display:none}.aplayer .aplayer-icon-lrc-inactivity svg{opacity:.4}.aplayer .aplayer-icon-forward{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.aplayer .aplayer-lrc-content{display:none}.aplayer .aplayer-pic{position:relative;float:left;height:66px;width:66px;background-size:cover;background-position:50%;-webkit-transition:all .3s ease;transition:all .3s ease;cursor:pointer}.aplayer .aplayer-pic:hover .aplayer-button{opacity:1}.aplayer .aplayer-pic .aplayer-button{position:absolute;border-radius:50%;opacity:.8;text-shadow:0 1px 1px rgba(0,0,0,.2);-webkit-box-shadow:0 1px 1px rgba(0,0,0,.2);box-shadow:0 1px 1px rgba(0,0,0,.2);background:rgba(0,0,0,.2);-webkit-transition:all .1s ease;transition:all .1s ease}.aplayer .aplayer-pic .aplayer-button path{fill:#fff}.aplayer .aplayer-pic .aplayer-hide{display:none}.aplayer .aplayer-pic .aplayer-play{width:26px;height:26px;border:2px solid #fff;bottom:50%;right:50%;margin:0 -15px -15px 0}.aplayer .aplayer-pic .aplayer-play svg{position:absolute;top:3px;left:4px;height:20px;width:20px}.aplayer .aplayer-pic .aplayer-pause{width:16px;height:16px;border:2px solid #fff;bottom:4px;right:4px}.aplayer .aplayer-pic .aplayer-pause svg{position:absolute;top:2px;left:2px;height:12px;width:12px}.aplayer .aplayer-info{margin-left:66px;padding:14px 7px 0 10px;height:66px;-webkit-box-sizing:border-box;box-sizing:border-box}.aplayer .aplayer-info .aplayer-music{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;margin:0 0 13px 5px;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text;cursor:default;padding-bottom:2px;height:20px}.aplayer .aplayer-info .aplayer-music .aplayer-title{font-size:14px}.aplayer .aplayer-info .aplayer-music .aplayer-author{font-size:12px;color:#666}.aplayer .aplayer-info .aplayer-controller{position:relative;display:-webkit-box;display:-ms-flexbox;display:flex}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap{margin:0 0 0 5px;padding:4px 0;cursor:pointer!important;-webkit-box-flex:1;-ms-flex:1;flex:1}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap:hover .aplayer-bar .aplayer-played .aplayer-thumb{-webkit-transform:scale(1);transform:scale(1)}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar{position:relative;height:2px;width:100%;background:#cdcdcd}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-loaded{position:absolute;left:0;top:0;bottom:0;background:#aaa;height:2px;-webkit-transition:all .5s ease;transition:all .5s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played{position:absolute;left:0;top:0;bottom:0;height:2px;-webkit-transition:background-color .3s ease;transition:background-color .3s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played .aplayer-thumb{position:absolute;top:0;right:5px;margin-top:-4px;margin-right:-10px;height:10px;width:10px;border-radius:50%;cursor:pointer;-webkit-transition:all .3s ease-in-out;transition:all .3s ease-in-out;-webkit-transform:scale(0);transform:scale(0)}.aplayer .aplayer-info .aplayer-controller .aplayer-time{position:relative;right:0;bottom:4px;height:17px;color:#999;font-size:11px;padding-left:7px}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-time-inner{vertical-align:middle}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon{cursor:pointer;-webkit-transition:all .2s ease;transition:all .2s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon path{fill:#666}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon.aplayer-icon-loop{margin-right:2px}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon:hover path{fill:#000}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon.aplayer-icon-menu,.aplayer .aplayer-info .aplayer-controller .aplayer-time.aplayer-time-narrow .aplayer-icon-menu,.aplayer .aplayer-info .aplayer-controller .aplayer-time.aplayer-time-narrow .aplayer-icon-mode{display:none}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap{position:relative;display:inline-block;margin-left:3px;cursor:pointer!important}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap:hover .aplayer-volume-bar-wrap{height:40px}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap{position:absolute;bottom:15px;right:-3px;width:25px;height:0;z-index:99;overflow:hidden;-webkit-transition:all .2s ease-in-out;transition:all .2s ease-in-out}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap.aplayer-volume-bar-wrap-active{height:40px}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap .aplayer-volume-bar{position:absolute;bottom:0;right:10px;width:5px;height:35px;background:#aaa;border-radius:2.5px;overflow:hidden}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap .aplayer-volume-bar .aplayer-volume{position:absolute;bottom:0;right:0;width:5px;-webkit-transition:all .1s ease;transition:all .1s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-loading-icon{display:none}.aplayer .aplayer-info .aplayer-controller .aplayer-loading-icon svg{position:absolute;-webkit-animation:rotate 1s linear infinite;animation:rotate 1s linear infinite}.aplayer .aplayer-lrc{display:none;position:relative;height:30px;text-align:center;overflow:hidden;margin:-10px 0 7px}.aplayer .aplayer-lrc:before{top:0;height:10%;background:-webkit-gradient(linear,left top,left bottom,from(#fff),to(hsla(0,0%,100%,0)));background:linear-gradient(180deg,#fff 0,hsla(0,0%,100%,0));filter:progid:DXImageTransform.Microsoft.gradient(startColorstr="#ffffff",endColorstr="#00ffffff",GradientType=0)}.aplayer .aplayer-lrc:after,.aplayer .aplayer-lrc:before{position:absolute;z-index:1;display:block;overflow:hidden;width:100%;content:" "}.aplayer .aplayer-lrc:after{bottom:0;height:33%;background:-webkit-gradient(linear,left top,left bottom,from(hsla(0,0%,100%,0)),to(hsla(0,0%,100%,.8)));background:linear-gradient(180deg,hsla(0,0%,100%,0) 0,hsla(0,0%,100%,.8));filter:progid:DXImageTransform.Microsoft.gradient(startColorstr="#00ffffff",endColorstr="#ccffffff",GradientType=0)}.aplayer .aplayer-lrc p{font-size:12px;color:#666;line-height:16px!important;height:16px!important;padding:0!important;margin:0!important;-webkit-transition-property:font-size,color,opacity;transition-property:font-size,color,opacity;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;-webkit-transition-duration:.5s;transition-duration:.5s;opacity:.4;overflow:hidden}.aplayer .aplayer-lrc p.aplayer-lrc-current{opacity:1;overflow:visible;height:auto!important;min-height:16px}.aplayer .aplayer-lrc.aplayer-lrc-hide{display:none}.aplayer .aplayer-lrc .aplayer-lrc-contents{width:100%;-webkit-transition:all .5s ease-out;transition:all .5s ease-out;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text;cursor:default}.aplayer .aplayer-list{overflow:auto;-webkit-transition:all .5s ease;transition:all .5s ease;will-change:height;display:none;overflow:hidden;list-style-type:none;margin:0;padding:0;overflow-y:auto}.aplayer .aplayer-list::-webkit-scrollbar{width:5px}.aplayer .aplayer-list::-webkit-scrollbar-thumb{border-radius:3px;background-color:#eee}.aplayer .aplayer-list::-webkit-scrollbar-thumb:hover{background-color:#ccc}.aplayer .aplayer-list li{position:relative;height:32px;line-height:32px;padding:0 15px;font-size:12px;border-top:1px solid #e9e9e9;cursor:pointer;-webkit-transition:all .2s ease;transition:all .2s ease;overflow:hidden;margin:0}.aplayer .aplayer-list li:first-child{border-top:none}.aplayer .aplayer-list li:hover{background:#efefef}.aplayer .aplayer-list li.aplayer-list-light{background:#e9e9e9}.aplayer .aplayer-list li.aplayer-list-light .aplayer-list-cur{display:inline-block}.aplayer .aplayer-list li .aplayer-list-cur{display:none;width:3px;height:22px;position:absolute;left:0;top:5px;-webkit-transition:background-color .3s ease;transition:background-color .3s ease;cursor:pointer}.aplayer .aplayer-list li .aplayer-list-index{color:#666;margin-right:12px;cursor:pointer}.aplayer .aplayer-list li .aplayer-list-author{color:#666;float:right;cursor:pointer}.aplayer .aplayer-notice{opacity:0;position:absolute;z-index:1;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);font-size:12px;border-radius:4px;padding:5px 10px;-webkit-transition:all .3s ease-in-out;transition:all .3s ease-in-out;overflow:hidden;color:#fff;pointer-events:none;background-color:#f4f4f5;color:#909399}.aplayer .aplayer-miniswitcher{display:none;position:absolute;top:0;right:0;bottom:0;height:100%;background:#e6e6e6;width:18px;border-radius:0 2px 2px 0}.aplayer .aplayer-miniswitcher .aplayer-icon{height:100%;width:100%;-webkit-transform:rotateY(180deg);transform:rotateY(180deg);-webkit-transition:all .3s ease;transition:all .3s ease}.aplayer .aplayer-miniswitcher .aplayer-icon path{fill:#666}.aplayer .aplayer-miniswitcher .aplayer-icon:hover path{fill:#000}@-webkit-keyframes aplayer-roll{0%{left:0}to{left:-100%}}@keyframes aplayer-roll{0%{left:0}to{left:-100%}}@-webkit-keyframes rotate{0%{-webkit-transform:rotate(0);transform:rotate(0)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@keyframes rotate{0%{-webkit-transform:rotate(0);transform:rotate(0)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}',""])},ac6a:function(n,e,t){for(var o=t("cadf"),r=t("0d58"),a=t("2aba"),i=t("7726"),s=t("32e9"),l=t("84f2"),c=t("2b4c"),d=c("iterator"),u=c("toStringTag"),p=l.Array,m={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},g=r(m),h=0;h<g.length;h++){var f,b=g[h],v=m[b],y=i[b],x=y&&y.prototype;if(x&&(x[d]||s(x,d,p),x[u]||s(x,u,b),l[b]=p,v))for(f in o)x[f]||a(x,f,o[f],!0)}},adec:function(n,e,t){"use strict";t.r(e),e.default={functional:!0,render:function(n,e){var t=e._c;return t("svg",{class:[e.data.class,e.data.staticClass],style:[e.data.style,e.data.staticStyle],attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 28 32"}},[t("path",{attrs:{d:"M13.728 6.272v19.456q0 .448-.352.8t-.8.32-.8-.32l-5.952-5.952H1.152q-.48 0-.8-.352t-.352-.8v-6.848q0-.48.352-.8t.8-.352h4.672l5.952-5.952q.32-.32.8-.32t.8.32.352.8z"}})])}}},b349:function(n,e,t){"use strict";var o,r=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,e){n.__proto__=e}||function(n,e){for(var t in e)e.hasOwnProperty(t)&&(n[t]=e[t])},function(n,e){function t(){this.constructor=n}o(n,e),n.prototype=null===e?Object.create(e):(t.prototype=e.prototype,new t)}),a=this&&this.__assign||Object.assign||function(n){for(var e,t=1,o=arguments.length;t<o;t++)for(var r in e=arguments[t])Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n},i=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(e,"__esModule",{value:!0});var s=i(t("8bbf")),l=function(n){function e(){var e=null!==n&&n.apply(this,arguments)||this;return e._tsxattrs=void 0,e.$scopedSlots=void 0,e}return r(e,n),e}(s.default);e.Component=l,e.createComponent=function(n){return s.default.extend(n)};var c={convert:function(n){return n},extendFrom:function(n){return n}};function d(n,e){return{create:function(t){var o=t.mixins?t.mixins.concat(e):e;return n.extend(a({},t,{mixins:o}))},mixin:function(t){return d(n,e.concat([t]))}}}e.ofType=function(){return c},e.withNativeOn=function(n){return n},e.withHtmlAttrs=function(n){return n},e.withUnknownProps=function(n){return n},e.componentFactory={create:function(n){return s.default.extend(n)},extendFrom:function(n){return d(n,[])},mixin:function(n){return d(s.default,[n])}},e.componentFactoryOf=function(){return e.componentFactory},e.component=e.componentFactory.create,e.extendFrom=e.componentFactory.extendFrom},bcaa:function(n,e,t){var o=t("cb7c"),r=t("d3f4"),a=t("a5b8");n.exports=function(n,e){if(o(n),r(e)&&e.constructor===n)return e;var t=a.f(n);return(0,t.resolve)(e),t.promise}},bdba:function(n,e,t){"use strict";t.r(e),e.default={functional:!0,render:function(n,e){var t=e._c;return t("svg",{class:[e.data.class,e.data.staticClass],style:[e.data.style,e.data.staticStyle],attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 28 32"}},[t("path",{attrs:{d:"M13.728 6.272v19.456q0 .448-.352.8t-.8.32-.8-.32l-5.952-5.952H1.152q-.48 0-.8-.352t-.352-.8v-6.848q0-.48.352-.8t.8-.352h4.672l5.952-5.952q.32-.32.8-.32t.8.32.352.8zM20.576 16q0 1.344-.768 2.528t-2.016 1.664q-.16.096-.448.096-.448 0-.8-.32t-.32-.832q0-.384.192-.64t.544-.448.608-.384.512-.64.192-1.024-.192-1.024-.512-.64-.608-.384-.544-.448-.192-.64q0-.48.32-.832t.8-.32q.288 0 .448.096 1.248.48 2.016 1.664T20.576 16z"}})])}}},be13:function(n,e){n.exports=function(n){if(null==n)throw TypeError("Can't call method on  "+n);return n}},bf5c:function(n,e,t){"use strict";t.r(e),e.default={functional:!0,render:function(n,e){var t=e._c;return t("svg",{class:[e.data.class,e.data.staticClass],style:[e.data.style,e.data.staticStyle],attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 32 32"}},[t("path",{attrs:{d:"M22 16L11.895 5.4 10 7.387 18.211 16 10 24.612l1.895 1.988 8.211-8.613z"}})])}}},c366:function(n,e,t){var o=t("6821"),r=t("9def"),a=t("77f1");n.exports=function(n){return function(e,t,i){var s,l=o(e),c=r(l.length),d=a(i,c);if(n&&t!=t){for(;c>d;)if((s=l[d++])!=s)return!0}else for(;c>d;d++)if((n||d in l)&&l[d]===t)return n||d||0;return!n&&-1}}},c3ab:function(n,e,t){"use strict";t.r(e),e.default={functional:!0,render:function(n,e){var t=e._c;return t("svg",{class:[e.data.class,e.data.staticClass],style:[e.data.style,e.data.staticStyle],attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 29 32"}},[t("path",{attrs:{d:"M2.667 7.027l1.707-1.693 22.293 22.293-1.693 1.707-4-4H9.334v4l-5.333-5.333 5.333-5.333v4h8.973l-8.973-8.973v.973H6.667v-3.64l-4-4zm20 10.306h2.667v5.573l-2.667-2.667v-2.907zm0-10.666v-4L28 8l-5.333 5.333v-4H11.76L9.093 6.666h13.573z"}})])}}},c5f6:function(n,e,t){"use strict";var o=t("7726"),r=t("69a8"),a=t("2d95"),i=t("5dbc"),s=t("6a99"),l=t("79e5"),c=t("9093").f,d=t("11e9").f,u=t("86cc").f,p=t("aa77").trim,m=o.Number,g=m,h=m.prototype,f="Number"==a(t("2aeb")(h)),b="trim"in String.prototype,v=function(n){var e=s(n,!1);if("string"==typeof e&&e.length>2){var t,o,r,a=(e=b?e.trim():p(e,3)).charCodeAt(0);if(43===a||45===a){if(88===(t=e.charCodeAt(2))||120===t)return NaN}else if(48===a){switch(e.charCodeAt(1)){case 66:case 98:o=2,r=49;break;case 79:case 111:o=8,r=55;break;default:return+e}for(var i,l=e.slice(2),c=0,d=l.length;c<d;c++)if((i=l.charCodeAt(c))<48||i>r)return NaN;return parseInt(l,o)}}return+e};if(!m(" 0o1")||!m("0b1")||m("+0x1")){m=function(n){var e=arguments.length<1?0:n,t=this;return t instanceof m&&(f?l((function(){h.valueOf.call(t)})):"Number"!=a(t))?i(new g(v(e)),t,m):v(e)};for(var y,x=t("9e1e")?c(g):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),k=0;x.length>k;k++)r(g,y=x[k])&&!r(m,y)&&u(m,y,d(g,y));m.prototype=h,h.constructor=m,t("2aba")(o,"Number",m)}},c69a:function(n,e,t){n.exports=!t("9e1e")&&!t("79e5")((function(){return 7!=Object.defineProperty(t("230e")("div"),"a",{get:function(){return 7}}).a}))},ca5a:function(n,e){var t=0,o=Math.random();n.exports=function(n){return"Symbol(".concat(void 0===n?"":n,")_",(++t+o).toString(36))}},cadf:function(n,e,t){"use strict";var o=t("9c6c"),r=t("d53b"),a=t("84f2"),i=t("6821");n.exports=t("01f9")(Array,"Array",(function(n,e){this._t=i(n),this._i=0,this._k=e}),(function(){var n=this._t,e=this._k,t=this._i++;return!n||t>=n.length?(this._t=void 0,r(1)):r(0,"keys"==e?t:"values"==e?n[t]:[t,n[t]])}),"values"),a.Arguments=a.Array,o("keys"),o("values"),o("entries")},cb7c:function(n,e,t){var o=t("d3f4");n.exports=function(n){if(!o(n))throw TypeError(n+" is not an object!");return n}},cd1c:function(n,e,t){var o=t("e853");n.exports=function(n,e){return new(o(n))(e)}},ce10:function(n,e,t){var o=t("69a8"),r=t("6821"),a=t("c366")(!1),i=t("613b")("IE_PROTO");n.exports=function(n,e){var t,s=r(n),l=0,c=[];for(t in s)t!=i&&o(s,t)&&c.push(t);for(;e.length>l;)o(s,t=e[l++])&&(~a(c,t)||c.push(t));return c}},d263:function(n,e,t){"use strict";t("386b")("fixed",(function(n){return function(){return n(this,"tt","","")}}))},d2c8:function(n,e,t){var o=t("aae3"),r=t("be13");n.exports=function(n,e,t){if(o(e))throw TypeError("String#"+t+" doesn't accept regex!");return String(r(n))}},d3f4:function(n,e){n.exports=function(n){return"object"==typeof n?null!==n:"function"==typeof n}},d53b:function(n,e){n.exports=function(n,e){return{value:e,done:!!n}}},d8e8:function(n,e){n.exports=function(n){if("function"!=typeof n)throw TypeError(n+" is not a function!");return n}},daf8:function(n,e,t){"use strict";t.r(e),e.default={functional:!0,render:function(n,e){var t=e._c;return t("svg",{class:[e.data.class,e.data.staticClass],style:[e.data.style,e.data.staticStyle],attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 17 32"}},[t("path",{attrs:{d:"M14.08 4.8q2.88 0 2.88 2.048v18.24q0 2.112-2.88 2.112t-2.88-2.112V6.848q0-2.048 2.88-2.048zm-11.2 0q2.88 0 2.88 2.048v18.24q0 2.112-2.88 2.112T0 25.088V6.848Q0 4.8 2.88 4.8z"}})])}}},dcbc:function(n,e,t){var o=t("2aba");n.exports=function(n,e,t){for(var r in e)o(n,r,e[r],t);return n}},e11e:function(n,e){n.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},e853:function(n,e,t){var o=t("d3f4"),r=t("1169"),a=t("2b4c")("species");n.exports=function(n){var e;return r(n)&&("function"!=typeof(e=n.constructor)||e!==Array&&!r(e.prototype)||(e=void 0),o(e)&&null===(e=e[a])&&(e=void 0)),void 0===e?Array:e}},ebd6:function(n,e,t){var o=t("cb7c"),r=t("d8e8"),a=t("2b4c")("species");n.exports=function(n,e){var t,i=o(n).constructor;return void 0===i||null==(t=o(i)[a])?e:r(t)}},f559:function(n,e,t){"use strict";var o=t("5ca1"),r=t("9def"),a=t("d2c8"),i="".startsWith;o(o.P+o.F*t("5147")("startsWith"),"String",{startsWith:function(n){var e=a(this,n,"startsWith"),t=r(Math.min(arguments.length>1?arguments[1]:void 0,e.length)),o=String(n);return i?i.call(e,o,t):e.slice(t,t+o.length)===o}})},f576:function(n,e,t){"use strict";var o=t("5ca1"),r=t("2e08"),a=t("a25f");o(o.P+o.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(a),"String",{padStart:function(n){return r(this,n,arguments.length>1?arguments[1]:void 0,!0)}})},f605:function(n,e){n.exports=function(n,e,t,o){if(!(n instanceof e)||void 0!==o&&o in n)throw TypeError(t+": incorrect invocation!");return n}},f751:function(n,e,t){var o=t("5ca1");o(o.S+o.F,"Object",{assign:t("7333")})},f866:function(n,e,t){"use strict";t.r(e),e.default={functional:!0,render:function(n,e){var t=e._c;return t("svg",{class:[e.data.class,e.data.staticClass],style:[e.data.style,e.data.staticStyle],attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 29 32"}},[t("path",{attrs:{d:"M9.333 9.333h13.333v4L27.999 8l-5.333-5.333v4h-16v8h2.667V9.334zm13.334 13.334H9.334v-4L4.001 24l5.333 5.333v-4h16v-8h-2.667v5.333z"}})])}}},fab2:function(n,e,t){var o=t("7726").document;n.exports=o&&o.documentElement},fb15:function(n,e,t){"use strict";var o;(t.r(e),"undefined"!=typeof window)&&((o=window.document.currentScript)&&(o=o.src.match(/(.+\/)[^/]+\.js(\?.*)?$/))&&(t.p=o[1]));t("f751");function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{},o=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(t).filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable})))),o.forEach((function(e){r(n,e,t[e])}))}return n}t("c5f6");function i(n,e){if(null==n)return{};var t,o,r=function(n,e){if(null==n)return{};var t,o,r={},a=Object.keys(n);for(o=0;o<a.length;o++)t=a[o],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(o=0;o<a.length;o++)t=a[o],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}function s(n){return function(n){if(Array.isArray(n)){for(var e=0,t=new Array(n.length);e<n.length;e++)t[e]=n[e];return t}}(n)||function(n){if(Symbol.iterator in Object(n)||"[object Arguments]"===Object.prototype.toString.call(n))return Array.from(n)}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}t("ac6a"),t("551c"),t("6762"),t("2fdb"),t("7f7f"),t("7514"),t("6b54");function l(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var t=[],o=!0,r=!1,a=void 0;try{for(var i,s=n[Symbol.iterator]();!(o=(i=s.next()).done)&&(t.push(i.value),!e||t.length!==e);o=!0);}catch(n){r=!0,a=n}finally{try{o||null==s.return||s.return()}finally{if(r)throw a}}return t}(n,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}t("20d6"),t("96cf");function c(n,e,t,o,r,a,i){try{var s=n[a](i),l=s.value}catch(n){return void t(n)}s.done?e(l):Promise.resolve(l).then(o,r)}function d(n){return function(){var e=this,t=arguments;return new Promise((function(o,r){var a=n.apply(e,t);function i(n){c(a,o,r,i,s,"next",n)}function s(n){c(a,o,r,i,s,"throw",n)}i(void 0)}))}}t("d263");function u(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}function p(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}function m(n,e,t){return e&&p(n.prototype,e),t&&p(n,t),n}function g(n){return(g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}function h(n){return(h="function"==typeof Symbol&&"symbol"===g(Symbol.iterator)?function(n){return g(n)}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":g(n)})(n)}function f(n,e){return!e||"object"!==h(e)&&"function"!=typeof e?function(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}(n):e}function b(n){return(b=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)})(n)}function v(n,e){return(v=Object.setPrototypeOf||function(n,e){return n.__proto__=e,n})(n,e)}function y(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(e&&e.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),e&&v(n,e)}var x=t("48d3"),k=t("65d9"),w=t.n(k),E=t("8bbf"),T=t.n(E);function _(n){return Object(k.createDecorator)((function(e,t){void 0===e.inject&&(e.inject={}),Array.isArray(e.inject)||(e.inject[t]=n||t)}))}function j(n){return Object(k.createDecorator)((function(e,t){var o=e.provide;if("function"!=typeof o||!o.managed){var r=e.provide;(o=e.provide=function(){var n=Object.create(("function"==typeof r?r.call(this):r)||null);for(var e in o.managed)n[o.managed[e]]=this[e];return n}).managed={}}o.managed[t]=n||t}))}function S(n){return void 0===n&&(n={}),Object(k.createDecorator)((function(e,t){(e.props||(e.props={}))[t]=n}))}function A(n,e){void 0===e&&(e={});var t=e.deep,o=void 0!==t&&t,r=e.immediate,a=void 0!==r&&r;return Object(k.createDecorator)((function(e,t){"object"!=typeof e.watch&&(e.watch=Object.create(null)),e.watch[n]={handler:t,deep:o,immediate:a}}))}var C=t("4d26"),I=t.n(C);t("cadf"),t("456d");function D(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:3e3;return new Promise((function(t,o){var r=(new Date).getTime(),a=setInterval((function(){n()?(t(),clearInterval(a)):e>0&&(new Date).getTime()-r>e&&(o(),clearInterval(a))}),100)}))}var P,z=["abort","canplay","canplaythrough","durationchange","emptied","ended","error","loadeddata","loadedmetadata","loadstart","pause","play","playing","progress","ratechange","readystatechange","seeked","seeking","stalled","suspend","timeupdate","volumechange","waiting"],R=function(n,e,t,o){var r,a=arguments.length,i=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,t):o;if("object"===("undefined"==typeof Reflect?"undefined":h(Reflect))&&"function"==typeof Reflect.decorate)i=Reflect.decorate(n,e,t,o);else for(var s=n.length-1;s>=0;s--)(r=n[s])&&(i=(a<3?r(i):a>3?r(e,t,i):r(e,t))||i);return a>3&&i&&Object.defineProperty(e,t,i),i},O=function(n,e){if("object"===("undefined"==typeof Reflect?"undefined":h(Reflect))&&"function"==typeof Reflect.metadata)return Reflect.metadata(n,e)};!function(n){n[n.HAVE_NOTHING=0]="HAVE_NOTHING",n[n.HAVE_METADATA=1]="HAVE_METADATA",n[n.HAVE_CURRENT_DATA=2]="HAVE_CURRENT_DATA",n[n.HAVE_FUTURE_DATA=3]="HAVE_FUTURE_DATA",n[n.HAVE_ENOUGH_DATA=4]="HAVE_ENOUGH_DATA"}(P||(P={}));var M=function(n){function e(){var n;return u(this,e),(n=f(this,b(e).call(this))).audio=new Audio,n.audioTracks=n.audio.audioTracks,n.autoplay=n.audio.autoplay,n.buffered=n.audio.buffered,n.controls=n.audio.controls,n.crossOrigin=n.audio.crossOrigin,n.currentSrc=n.audio.currentSrc,n.currentTime=n.audio.currentTime,n.defaultMuted=n.audio.defaultMuted,n.defaultPlaybackRate=n.audio.defaultPlaybackRate,n.duration=n.audio.duration,n.ended=n.audio.ended,n.error=n.audio.error,n.loop=n.audio.loop,n.mediaKeys=n.audio.mediaKeys,n.muted=n.audio.muted,n.networkState=n.audio.networkState,n.paused=n.audio.paused,n.playbackRate=n.audio.playbackRate,n.played=n.audio.played,n.preload=n.audio.preload,n.readyState=n.audio.readyState,n.seekable=n.audio.seekable,n.seeking=n.audio.seeking,n.src=n.audio.src,n.textTracks=n.audio.textTracks,n.volume=n.audio.volume,z.forEach((function(e){n.audio.addEventListener(e,(function(e){n.sync()}))})),n}return y(e,n),m(e,[{key:"sync",value:function(){var n=this;Object.keys(this.$data).forEach((function(e){"audio"!==e&&(n[e]=n.audio[e])}))}},{key:"loaded",value:function(){var n=this;return D((function(){return n.readyState>=P.HAVE_FUTURE_DATA}),0)}},{key:"srcLoaded",value:function(){var n=this;return D((function(){return n.src}),0)}},{key:"render",value:function(){return null}}]),e}(T.a),B=M=R([w.a,O("design:paramtypes",[])],M),L=function(n,e,t,o){var r,a=arguments.length,i=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,t):o;if("object"===("undefined"==typeof Reflect?"undefined":h(Reflect))&&"function"==typeof Reflect.decorate)i=Reflect.decorate(n,e,t,o);else for(var s=n.length-1;s>=0;s--)(r=n[s])&&(i=(a<3?r(i):a>3?r(e,t,i):r(e,t))||i);return a>3&&i&&Object.defineProperty(e,t,i),i},$=function(n){function e(){var n;return u(this,e),(n=f(this,b(e).apply(this,arguments))).key="aplayer-setting",n.store=n.get(n.key),n}return y(e,n),m(e,[{key:"get",value:function(n){return JSON.parse(localStorage.getItem(n)||"[]")}},{key:"set",value:function(n){this.store=n,localStorage.setItem(this.key,JSON.stringify(n))}},{key:"render",value:function(){return null}}]),e}(T.a),N=$=L([w.a],$),q=function(n,e,t,o){var r,a=arguments.length,i=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,t):o;if("object"===("undefined"==typeof Reflect?"undefined":h(Reflect))&&"function"==typeof Reflect.decorate)i=Reflect.decorate(n,e,t,o);else for(var s=n.length-1;s>=0;s--)(r=n[s])&&(i=(a<3?r(i):a>3?r(e,t,i):r(e,t))||i);return a>3&&i&&Object.defineProperty(e,t,i),i},F=function(n){function e(){return u(this,e),f(this,b(e).apply(this,arguments))}return y(e,n),m(e,[{key:"isMobile",get:function(){var n=this.$ssrContext?this.$ssrContext.userAgent:window.navigator.userAgent;return/mobile/i.test(n)}}]),e}(T.a),G=F=q([w.a],F),H=function(n,e,t,o){var r,a=arguments.length,i=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,t):o;if("object"===("undefined"==typeof Reflect?"undefined":h(Reflect))&&"function"==typeof Reflect.decorate)i=Reflect.decorate(n,e,t,o);else for(var s=n.length-1;s>=0;s--)(r=n[s])&&(i=(a<3?r(i):a>3?r(e,t,i):r(e,t))||i);return a>3&&i&&Object.defineProperty(e,t,i),i},V=function(n,e){if("object"===("undefined"==typeof Reflect?"undefined":h(Reflect))&&"function"==typeof Reflect.metadata)return Reflect.metadata(n,e)},U=function(n){function e(){return u(this,e),f(this,b(e).apply(this,arguments))}return y(e,n),m(e,[{key:"handleClick",value:function(n){this.$emit("click",n)}},{key:"render",value:function(){var n=arguments[0];return n("div",{class:"aplayer-pic",style:this.style,on:{click:this.handleClick}},[this.$slots.default])}},{key:"style",get:function(){var n=this.aplayer,e=n.options,t=n.currentTheme,o=n.currentMusic.cover||e.defaultCover;return{backgroundImage:o&&'url("'.concat(o,'")'),backgroundColor:t}}}]),e}(x.Component);H([_(),V("design:type",Object)],U.prototype,"aplayer",void 0);var W=U=H([w.a],U),Y=function(n,e,t,o){var r,a=arguments.length,i=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,t):o;if("object"===("undefined"==typeof Reflect?"undefined":h(Reflect))&&"function"==typeof Reflect.decorate)i=Reflect.decorate(n,e,t,o);else for(var s=n.length-1;s>=0;s--)(r=n[s])&&(i=(a<3?r(i):a>3?r(e,t,i):r(e,t))||i);return a>3&&i&&Object.defineProperty(e,t,i),i},K=function(n,e){if("object"===("undefined"==typeof Reflect?"undefined":h(Reflect))&&"function"==typeof Reflect.metadata)return Reflect.metadata(n,e)},J=function(n){return t("52f0")("./".concat(n,".svg")).default},Q=function(n){function e(){return u(this,e),f(this,b(e).apply(this,arguments))}return y(e,n),m(e,[{key:"render",value:function(){var n=arguments[0],e=J(this.type);return n(e)}}]),e}(x.Component);Y([S({type:String,required:!0}),K("design:type",String)],Q.prototype,"type",void 0);var Z=Q=Y([w.a],Q);t("55dd"),t("28a5"),t("a481"),t("4917");var X=function(){function n(){u(this,n),this.xhr=new XMLHttpRequest}return m(n,[{key:"download",value:function(n){var e=this,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return new Promise((function(o,r){e.xhr.open("get",n),e.xhr.responseType=t,e.xhr.onload=function(){var n=e.xhr.status;(n>=200&&n<300||304===n)&&o(e.xhr.response)},e.xhr.onabort=r,e.xhr.onerror=r,e.xhr.ontimeout=r,e.xhr.send()}))}}]),n}(),nn=function(n,e,t,o){var r,a=arguments.length,i=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,t):o;if("object"===("undefined"==typeof Reflect?"undefined":h(Reflect))&&"function"==typeof Reflect.decorate)i=Reflect.decorate(n,e,t,o);else for(var s=n.length-1;s>=0;s--)(r=n[s])&&(i=(a<3?r(i):a>3?r(e,t,i):r(e,t))||i);return a>3&&i&&Object.defineProperty(e,t,i),i},en=function(n,e){if("object"===("undefined"==typeof Reflect?"undefined":h(Reflect))&&"function"==typeof Reflect.metadata)return Reflect.metadata(n,e)},tn=function(n){function e(){var n;return u(this,e),(n=f(this,b(e).apply(this,arguments))).lrc="",n.xhr=new X,n.isLoading=!1,n}var t;return y(e,n),m(e,[{key:"getLyricFromCurrentMusic",value:function(){var n=this;return new Promise((function(e,t){var o=n.aplayer,r=o.lrcType,a=o.currentMusic;switch(r){case 0:e("");break;case 1:e(a.lrc);break;case 3:e(a.lrc?n.xhr.download(a.lrc):"");break;default:t(new Error("Illegal lrcType: ".concat(r)))}}))}},{key:"parseLRC",value:function(n){var e=/\[(\d+):(\d+)[.|:](\d+)\](.+)/,t=/\[(\d+):(\d+)[.|:](\d+)\]/g,o=/\[(\d+):(\d+)]()(.+)/,r=/\[(\d+):(\d+)]/g,a=this.lrc.match(/\[offset:\s*(-?\d+)\]/),i=a?Number(a[1]):0,s=[];return n.replace(/\\n/g,"\n").split("\n").forEach((function(n){return function n(a){var l=a.match(e)||a.match(o);if(l&&5===l.length){var c=60*(Number(l[1])||0)*1e3+1e3*(Number(l[2])||0)+(Number(l[3])||0)+i,d=l[4].replace(t,"").replace(r,"");d&&(s.push({time:c,text:d}),n(l[4]))}}(n)})),s.length>0&&s.sort((function(n,e){return n.time-e.time})),s}},{key:"handleChange",value:(t=d(regeneratorRuntime.mark((function n(){return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.prev=0,this.isLoading=!0,this.lrc="",n.next=5,this.getLyricFromCurrentMusic();case 5:this.lrc=n.sent;case 6:return n.prev=6,this.isLoading=!1,n.finish(6);case 9:case"end":return n.stop()}}),n,this,[[0,,6,9]])}))),function(){return t.apply(this,arguments)})},{key:"render",value:function(){var n=arguments[0],e=this.visible,t=this.style,o=this.parsed,r=this.current,a=this.noLyric;return n("div",{class:I()({"aplayer-lrc":!0,"aplayer-lrc-hide":!e})},[n("div",{class:"aplayer-lrc-contents",style:t},[o.length>0?o.map((function(e,t){return n("p",{key:e.time,class:I()({"aplayer-lrc-current":r.time===e.time})},[e.text])})):n("p",{class:"aplayer-lrc-current"},[a])])])}},{key:"noLyric",get:function(){return this.aplayer.currentMusic.id?this.isLoading?"(*ゝω・) 少女祈祷中..":this.lrc?"(・∀・*) 抱歉，该歌词格式不支持":"(,,•́ . •̀,,) 抱歉，当前歌曲暂无歌词":"(ಗ ‸ ಗ ) 未加载音频"}},{key:"parsed",get:function(){return this.parseLRC(this.lrc)}},{key:"current",get:function(){var n=this.aplayer,e=n.media,t=n.currentPlayed,o=this.parsed.filter((function(n){return n.time<t*e.duration*1e3}));return o&&o.length>0?o[o.length-1]:this.parsed[0]}},{key:"transitionDuration",get:function(){return this.parsed.length>1?500:0}},{key:"translateY",get:function(){var n=this.current,e=this.parsed;if(e.length<=0)return 0;var t=e.indexOf(n);return-1*(t===e.length-1?16*(t-1):16*t)}},{key:"style",get:function(){return{transitionDuration:"".concat(this.transitionDuration,"ms"),transform:"translate3d(0, ".concat(this.translateY,"px, 0)")}}}]),e}(x.Component);nn([S({type:Boolean,required:!1,default:!0}),en("design:type",Boolean)],tn.prototype,"visible",void 0),nn([_(),en("design:type",Object)],tn.prototype,"aplayer",void 0),nn([A("aplayer.lrcType",{immediate:!0}),A("aplayer.currentMusic.lrc",{immediate:!0}),en("design:type",Function),en("design:paramtypes",[]),en("design:returntype",Promise)],tn.prototype,"handleChange",null);var on=tn=nn([w.a],tn),rn=function(n,e,t,o){var r,a=arguments.length,i=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,t):o;if("object"===("undefined"==typeof Reflect?"undefined":h(Reflect))&&"function"==typeof Reflect.decorate)i=Reflect.decorate(n,e,t,o);else for(var s=n.length-1;s>=0;s--)(r=n[s])&&(i=(a<3?r(i):a>3?r(e,t,i):r(e,t))||i);return a>3&&i&&Object.defineProperty(e,t,i),i},an=function(n,e){if("object"===("undefined"==typeof Reflect?"undefined":h(Reflect))&&"function"==typeof Reflect.metadata)return Reflect.metadata(n,e)},sn=function(n){function e(){return u(this,e),f(this,b(e).apply(this,arguments))}return y(e,n),m(e,[{key:"render",value:function(){var n=arguments[0],e=this.music,t=this.aplayer.fixed;return n("div",{class:"aplayer-info"},[n("div",{class:"aplayer-music"},[n("span",{class:"aplayer-title"},[e.name]),n("span",{class:"aplayer-author"},[e.artist])]),t?null:n(on),this.$slots.default])}},{key:"music",get:function(){var n=this.aplayer.currentMusic;return{name:n.name,artist:n.artist?" - ".concat(n.artist):""}}}]),e}(x.Component);rn([_(),an("design:type",Object)],sn.prototype,"aplayer",void 0);var ln=sn=rn([w.a],sn),cn=(t("f559"),t("f576"),function(n,e,t,o){var r,a=arguments.length,i=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,t):o;if("object"===("undefined"==typeof Reflect?"undefined":h(Reflect))&&"function"==typeof Reflect.decorate)i=Reflect.decorate(n,e,t,o);else for(var s=n.length-1;s>=0;s--)(r=n[s])&&(i=(a<3?r(i):a>3?r(e,t,i):r(e,t))||i);return a>3&&i&&Object.defineProperty(e,t,i),i}),dn=function(n,e){if("object"===("undefined"==typeof Reflect?"undefined":h(Reflect))&&"function"==typeof Reflect.metadata)return Reflect.metadata(n,e)},un=function(n){function e(){var n;return u(this,e),(n=f(this,b(e).apply(this,arguments))).isDragMove=!1,n}return y(e,n),m(e,[{key:"thumbMove",value:function(n){this.isDragMove=!0,this.$emit("panMove",n)}},{key:"thumbUp",value:function(n){document.removeEventListener(this.dragMove,this.thumbMove),document.removeEventListener(this.dragEnd,this.thumbUp),this.isDragMove=!1,this.$emit("panEnd",n)}},{key:"mounted",value:function(){var n=this;this.$el.addEventListener(this.dragStart,(function(e){n.$emit("panStart",e),document.addEventListener(n.dragMove,n.thumbMove),document.addEventListener(n.dragEnd,n.thumbUp)}))}},{key:"render",value:function(){var n=arguments[0];return n("div",{class:this.classNames,style:{touchAction:"none",userSelect:"none",webkitUserDrag:"none",webkitTapHighlightColor:"rgba(0, 0, 0, 0)"}},[this.$slots.default])}},{key:"classNames",get:function(){return r({},this.panMoveClass,this.isDragMove)}},{key:"dragStart",get:function(){return this.isMobile?"touchstart":"mousedown"}},{key:"dragMove",get:function(){return this.isMobile?"touchmove":"mousemove"}},{key:"dragEnd",get:function(){return this.isMobile?"touchend":"mouseup"}}]),e}(x.Component);cn([S({type:String,required:!1}),dn("design:type",String)],un.prototype,"panMoveClass",void 0);var pn=un=cn([w()({mixins:[G]})],un),mn=function(n,e,t,o){var r,a=arguments.length,i=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,t):o;if("object"===("undefined"==typeof Reflect?"undefined":h(Reflect))&&"function"==typeof Reflect.decorate)i=Reflect.decorate(n,e,t,o);else for(var s=n.length-1;s>=0;s--)(r=n[s])&&(i=(a<3?r(i):a>3?r(e,t,i):r(e,t))||i);return a>3&&i&&Object.defineProperty(e,t,i),i},gn=function(n,e){if("object"===("undefined"==typeof Reflect?"undefined":h(Reflect))&&"function"==typeof Reflect.metadata)return Reflect.metadata(n,e)},hn=function(n){function e(){return u(this,e),f(this,b(e).apply(this,arguments))}return y(e,n),m(e,[{key:"handleClick",value:function(){this.$emit("click")}},{key:"render",value:function(){var n=arguments[0];return n("button",{attrs:{type:"button"},class:"aplayer-icon aplayer-icon-".concat(this.type),on:{click:this.handleClick}},[n(Z,{attrs:{type:this.icon}})])}}]),e}(x.Component);mn([S({type:String,required:!0}),gn("design:type",String)],hn.prototype,"type",void 0),mn([S({type:String,required:!0}),gn("design:type",String)],hn.prototype,"icon",void 0);var fn=hn=mn([w.a],hn),bn=function(n,e,t,o){var r,a=arguments.length,i=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,t):o;if("object"===("undefined"==typeof Reflect?"undefined":h(Reflect))&&"function"==typeof Reflect.decorate)i=Reflect.decorate(n,e,t,o);else for(var s=n.length-1;s>=0;s--)(r=n[s])&&(i=(a<3?r(i):a>3?r(e,t,i):r(e,t))||i);return a>3&&i&&Object.defineProperty(e,t,i),i},vn=function(n,e){if("object"===("undefined"==typeof Reflect?"undefined":h(Reflect))&&"function"==typeof Reflect.metadata)return Reflect.metadata(n,e)},yn=function(n){function e(){return u(this,e),f(this,b(e).apply(this,arguments))}return y(e,n),m(e,[{key:"handleChange",value:function(n){var e=this.$refs.progressBar,t=e.getBoundingClientRect().left,o=((n.type.startsWith("touch")?n.changedTouches[0].clientX:n.clientX)-t)/e.offsetWidth;o=Math.min(o,1),o=Math.max(o,0),this.handleChangeProgress(n,o)}},{key:"render",value:function(){var n=arguments[0],e=this.aplayer,t=e.currentTheme,o=e.currentLoaded,r=e.currentPlayed;return n(pn,{class:"aplayer-bar-wrap",on:{panMove:this.handleChange,panEnd:this.handleChange}},[n("div",{ref:"progressBar",class:"aplayer-bar"},[n("div",{class:"aplayer-loaded",style:{width:"".concat(100*o,"%")}}),n("div",{class:"aplayer-played",style:{width:"".concat(100*r,"%"),backgroundColor:t}},[n("span",{class:"aplayer-thumb",style:{backgroundColor:t}},[n("span",{class:"aplayer-loading-icon"},[n(Z,{attrs:{type:"loading"}})])])])])])}}]),e}(x.Component);bn([_(),vn("design:type",Object)],yn.prototype,"aplayer",void 0),bn([_(),vn("design:type",Function)],yn.prototype,"handleChangeProgress",void 0);var xn=yn=bn([w.a],yn),kn=function(n,e,t,o){var r,a=arguments.length,i=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,t):o;if("object"===("undefined"==typeof Reflect?"undefined":h(Reflect))&&"function"==typeof Reflect.decorate)i=Reflect.decorate(n,e,t,o);else for(var s=n.length-1;s>=0;s--)(r=n[s])&&(i=(a<3?r(i):a>3?r(e,t,i):r(e,t))||i);return a>3&&i&&Object.defineProperty(e,t,i),i},wn=function(n,e){if("object"===("undefined"==typeof Reflect?"undefined":h(Reflect))&&"function"==typeof Reflect.metadata)return Reflect.metadata(n,e)},En=function(n){function e(){return u(this,e),f(this,b(e).apply(this,arguments))}return y(e,n),m(e,[{key:"timeSecondsFormat",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=Math.floor(n/60)||0,t=Math.floor(n%60)||0;return"".concat(e.toString().padStart(2,"0"),":").concat(t.toString().padStart(2,"0"))}},{key:"handleToggleVolume",value:function(){var n=this.aplayer,e=n.currentVolume,t=n.currentSettings;this.handleChangeVolume(e>0?0:t.volume)}},{key:"handleClickVolumeBar",value:function(n){this.handlePanMove(n)}},{key:"handlePanMove",value:function(n){var e=this.$refs.volumeBar,t=e.getBoundingClientRect().bottom;if(!(t<=0)){var o=n.type.startsWith("touch")?n.changedTouches[0].clientY:n.clientY,r=Math.round(t-o)/e.offsetHeight;r=Math.min(r,1),r=Math.max(r,0),this.handleChangeVolume(r)}}},{key:"render",value:function(){var n=arguments[0],e=this.ptime,t=this.dtime,o=this.volumeIcon,r=this.aplayer,a=r.lrcType,i=r.currentTheme,s=r.currentVolume,l=r.currentOrder,c=r.currentLoop;return n("div",{class:"aplayer-controller"},[n(xn),n("div",{class:"aplayer-time"},[n("span",{class:"aplayer-time-inner"},[n("span",{class:"aplayer-ptime"},[e])," /"," ",n("span",{class:"aplayer-dtime"},[t])," "]),n("span",{class:"aplayer-icon aplayer-icon-back",on:{click:this.handleSkipBack}},[n(Z,{attrs:{type:"skip"}})]),n("span",{class:"aplayer-icon aplayer-icon-play",on:{click:this.handleTogglePlay}},[n(Z,{attrs:{type:this.playIcon}})]),n("span",{class:"aplayer-icon aplayer-icon-forward",on:{click:this.handleSkipForward}},[n(Z,{attrs:{type:"skip"}})]),n("div",{class:"aplayer-volume-wrap"},[n(fn,{attrs:{type:"volume-".concat(o),icon:"volume-".concat(o)},on:{click:this.handleToggleVolume}}),n(pn,{class:"aplayer-volume-bar-wrap",attrs:{panMoveClass:"aplayer-volume-bar-wrap-active"},on:{panMove:this.handlePanMove}},[n("div",{ref:"volumeBar",class:"aplayer-volume-bar",on:{click:this.handleClickVolumeBar}},[n("div",{class:"aplayer-volume",style:{height:"".concat(100*s,"%"),backgroundColor:i}})])])])," ",n(fn,{attrs:{type:"order",icon:"order-".concat(l)},on:{click:this.handleToggleOrderMode}})," ",n(fn,{attrs:{type:"loop",icon:"loop-".concat(c)},on:{click:this.handleToggleLoopMode}})," ",n(fn,{attrs:{type:"menu",icon:"menu"},on:{click:this.handleTogglePlaylist}}),0!==a?n(fn,{attrs:{type:"lrc",icon:"lrc"},on:{click:this.handleToggleLyric}}):null])])}},{key:"playIcon",get:function(){return this.aplayer.media.paused?"play":"pause"}},{key:"volumeIcon",get:function(){var n=this.aplayer.currentVolume;return n<=0?"off":n>=.95?"up":"down"}},{key:"ptime",get:function(){var n=this.aplayer,e=n.media,t=n.currentPlayed;return this.timeSecondsFormat(t*e.duration)}},{key:"dtime",get:function(){return this.timeSecondsFormat(this.aplayer.media.duration)}}]),e}(x.Component);kn([_(),wn("design:type",Object)],En.prototype,"aplayer",void 0),kn([_(),wn("design:type",Function)],En.prototype,"handleSkipBack",void 0),kn([_(),wn("design:type",Function)],En.prototype,"handleSkipForward",void 0),kn([_(),wn("design:type",Function)],En.prototype,"handleTogglePlay",void 0),kn([_(),wn("design:type",Function)],En.prototype,"handleToggleOrderMode",void 0),kn([_(),wn("design:type",Function)],En.prototype,"handleToggleLoopMode",void 0),kn([_(),wn("design:type",Function)],En.prototype,"handleTogglePlaylist",void 0),kn([_(),wn("design:type",Function)],En.prototype,"handleToggleLyric",void 0),kn([_(),wn("design:type",Function)],En.prototype,"handleChangeVolume",void 0);var Tn=En=kn([w.a],En),_n=function(n,e,t,o){var r,a=arguments.length,i=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,t):o;if("object"===("undefined"==typeof Reflect?"undefined":h(Reflect))&&"function"==typeof Reflect.decorate)i=Reflect.decorate(n,e,t,o);else for(var s=n.length-1;s>=0;s--)(r=n[s])&&(i=(a<3?r(i):a>3?r(e,t,i):r(e,t))||i);return a>3&&i&&Object.defineProperty(e,t,i),i},jn=function(n,e){if("object"===("undefined"==typeof Reflect?"undefined":h(Reflect))&&"function"==typeof Reflect.metadata)return Reflect.metadata(n,e)},Sn=function(n){function e(){return u(this,e),f(this,b(e).apply(this,arguments))}return y(e,n),m(e,[{key:"handleTogglePlay",value:function(){this.$emit("togglePlay")}},{key:"handleSkipBack",value:function(){this.$emit("skipBack")}},{key:"handleSkipForward",value:function(){this.$emit("skipForward")}},{key:"handleToggleOrderMode",value:function(){this.$emit("toggleOrderMode")}},{key:"handleToggleLoopMode",value:function(){this.$emit("toggleLoopMode")}},{key:"handleTogglePlaylist",value:function(){this.$emit("togglePlaylist")}},{key:"handleToggleLyric",value:function(){this.$emit("toggleLyric")}},{key:"handleChangeVolume",value:function(n){this.$emit("changeVolume",n)}},{key:"handleChangeProgress",value:function(n,e){this.$emit("changeProgress",n,e)}},{key:"handleMiniSwitcher",value:function(){this.$emit("miniSwitcher")}},{key:"render",value:function(){var n=arguments[0],e=this.playIcon,t=this.notice;return n("div",{class:"aplayer-body"},[n(W,{on:{click:this.handleTogglePlay}},[n("div",{class:"aplayer-button aplayer-".concat(e)},[n(Z,{attrs:{type:e}})])]),n(ln,[n(Tn,{on:{skipBack:this.handleSkipBack,skipForward:this.handleSkipForward,togglePlay:this.handleTogglePlay,toggleOrderMode:this.handleToggleOrderMode,toggleLoopMode:this.handleToggleLoopMode,togglePlaylist:this.handleTogglePlaylist,toggleLyric:this.handleToggleLyric,changeVolume:this.handleChangeVolume,changeProgress:this.handleChangeProgress}})]),n("div",{class:"aplayer-notice",style:{opacity:t.opacity}},[t.text]),n("div",{class:"aplayer-miniswitcher",on:{click:this.handleMiniSwitcher}},[n(fn,{attrs:{type:"miniswitcher",icon:"right"}})])])}},{key:"playIcon",get:function(){return this.aplayer.media.paused?"play":"pause"}}]),e}(x.Component);_n([S({type:Object,required:!0}),jn("design:type",Object)],Sn.prototype,"notice",void 0),_n([_(),jn("design:type",Object)],Sn.prototype,"aplayer",void 0),_n([j(),jn("design:type",Function),jn("design:paramtypes",[]),jn("design:returntype",void 0)],Sn.prototype,"handleTogglePlay",null),_n([j(),jn("design:type",Function),jn("design:paramtypes",[]),jn("design:returntype",void 0)],Sn.prototype,"handleSkipBack",null),_n([j(),jn("design:type",Function),jn("design:paramtypes",[]),jn("design:returntype",void 0)],Sn.prototype,"handleSkipForward",null),_n([j(),jn("design:type",Function),jn("design:paramtypes",[]),jn("design:returntype",void 0)],Sn.prototype,"handleToggleOrderMode",null),_n([j(),jn("design:type",Function),jn("design:paramtypes",[]),jn("design:returntype",void 0)],Sn.prototype,"handleToggleLoopMode",null),_n([j(),jn("design:type",Function),jn("design:paramtypes",[]),jn("design:returntype",void 0)],Sn.prototype,"handleTogglePlaylist",null),_n([j(),jn("design:type",Function),jn("design:paramtypes",[]),jn("design:returntype",void 0)],Sn.prototype,"handleToggleLyric",null),_n([j(),jn("design:type",Function),jn("design:paramtypes",[Number]),jn("design:returntype",void 0)],Sn.prototype,"handleChangeVolume",null),_n([j(),jn("design:type",Function),jn("design:paramtypes",[Object,Number]),jn("design:returntype",void 0)],Sn.prototype,"handleChangeProgress",null);var An,Cn,In=Sn=_n([w.a],Sn),Dn=function(n,e,t,o){var r,a=arguments.length,i=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,t):o;if("object"===("undefined"==typeof Reflect?"undefined":h(Reflect))&&"function"==typeof Reflect.decorate)i=Reflect.decorate(n,e,t,o);else for(var s=n.length-1;s>=0;s--)(r=n[s])&&(i=(a<3?r(i):a>3?r(e,t,i):r(e,t))||i);return a>3&&i&&Object.defineProperty(e,t,i),i},Pn=function(n,e){if("object"===("undefined"==typeof Reflect?"undefined":h(Reflect))&&"function"==typeof Reflect.metadata)return Reflect.metadata(n,e)},zn=function(n){function e(){return u(this,e),f(this,b(e).apply(this,arguments))}var t;return y(e,n),m(e,[{key:"handleChangeScrollTop",value:(t=d(regeneratorRuntime.mark((function n(){return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,this.$nextTick();case 2:this.visible&&(this.$refs.list.scrollTop=this.scrollTop);case 3:case"end":return n.stop()}}),n,this)}))),function(){return t.apply(this,arguments)})},{key:"render",value:function(){var n=this,e=arguments[0],t=this.listHeight,o=this.dataSource,r=this.currentMusic,a=this.aplayer.currentTheme;return e("ol",{ref:"list",class:"aplayer-list",style:{height:"".concat(t,"px")}},[o.map((function(t,o){return e("li",{key:t.id,class:I()({"aplayer-list-light":t.id===r.id}),on:{click:function(){return n.$emit("change",t,o)}}},[e("span",{class:"aplayer-list-cur",style:{backgroundColor:a}}),e("span",{class:"aplayer-list-index"},[o+1])," ",e("span",{class:"aplayer-list-title"},[t.name]),e("span",{class:"aplayer-list-author"},[t.artist])])}))])}},{key:"listHeight",get:function(){var n=this.visible,e=this.dataSource;return n?Math.min(33*e.length,Number(this.aplayer.listMaxHeight)):0}}]),e}(x.Component);Dn([S({type:Boolean,required:!1,default:!0}),Pn("design:type",Boolean)],zn.prototype,"visible",void 0),Dn([S({type:Object,required:!0}),Pn("design:type","function"==typeof(An="undefined"!=typeof APlayer&&APlayer.Audio)?An:Object)],zn.prototype,"currentMusic",void 0),Dn([S({type:Array,required:!0}),Pn("design:type","function"==typeof(Cn="undefined"!=typeof Array&&Array)?Cn:Object)],zn.prototype,"dataSource",void 0),Dn([S({type:Number,required:!0}),Pn("design:type",Number)],zn.prototype,"scrollTop",void 0),Dn([_(),Pn("design:type",Object)],zn.prototype,"aplayer",void 0),Dn([A("scrollTop",{immediate:!0}),A("dataSource",{immediate:!0,deep:!0}),A("visible"),Pn("design:type",Function),Pn("design:paramtypes",[]),Pn("design:returntype",Promise)],zn.prototype,"handleChangeScrollTop",null);var Rn,On,Mn,Bn,Ln,$n,Nn=zn=Dn([w.a],zn),qn=(t("610a"),function(n,e,t,o){var r,a=arguments.length,i=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,t):o;if("object"===("undefined"==typeof Reflect?"undefined":h(Reflect))&&"function"==typeof Reflect.decorate)i=Reflect.decorate(n,e,t,o);else for(var s=n.length-1;s>=0;s--)(r=n[s])&&(i=(a<3?r(i):a>3?r(e,t,i):r(e,t))||i);return a>3&&i&&Object.defineProperty(e,t,i),i}),Fn=function(n,e){if("object"===("undefined"==typeof Reflect?"undefined":h(Reflect))&&"function"==typeof Reflect.metadata)return Reflect.metadata(n,e)},Gn=[],Hn=new N,Vn=null;"undefined"!=typeof BroadcastChannel&&(Vn=new BroadcastChannel("aplayer"));var Un=function(n){function e(){var n;return u(this,e),(n=f(this,b(e).apply(this,arguments))).isDraggingProgressBar=!1,n.isAwaitChangeProgressBar=!1,n.isMini=null!==n.mini?n.mini:n.fixed,n.isArrow=!1,n.canPlay=!n.isMobile&&n.autoplay,n.listVisible=!n.listFolded,n.lyricVisible=!0,n.img=new Image,n.xhr=new X,n.media=new B,n.player=n.media.audio,n.store=Hn,n.currentMusic={id:NaN,name:"未加载音频",artist:"(ಗ ‸ ಗ )",url:""},n.currentPlayed=0,n.currentVolume=n.volume,n.currentLoop=n.loop,n.currentOrder=n.order,n.currentTheme=n.currentMusic.theme||n.theme,n.notice={text:"",time:2e3,opacity:0},n}var t,o,r,c,p;return y(e,n),m(e,[{key:"handleChangePlayList",value:(p=d(regeneratorRuntime.mark((function n(e,t){var o,r,a,i,s,c,d,u;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(t&&(o=e.length,r=t.length,o!==r&&(o<=0?this.$emit("listClear"):o>r?this.$emit("listAdd"):(this.currentOrderIndex<0&&(a=this.currentMusic,i=a.id,s=a.url,c=t.findIndex((function(n){return n.id===i||n.url===s})),Object.assign(this.currentMusic,t[c-1])),this.canPlay=!this.player.paused,this.$emit("listRemove")))),!(this.orderList.length>0)){n.next=6;break}return this.currentMusic.id?(this.canPlay=!this.player.paused,u=this.orderList[this.currentOrderIndex]||this.orderList[0],Object.assign(this.currentMusic,u)):(d=l(this.currentList,1),this.currentMusic=d[0]),n.next=5,this.$nextTick();case 5:this.canPlay=!0;case 6:case"end":return n.stop()}}),n,this)}))),function(n,e){return p.apply(this,arguments)})},{key:"handleChangeCurrentMusic",value:(c=d(regeneratorRuntime.mark((function n(e,t){var o,r,a=this;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(e.theme?this.currentTheme=e.theme:(o=e.cover||this.options.defaultCover)&&setTimeout(d(regeneratorRuntime.mark((function n(){return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.prev=0,n.next=3,a.getThemeColorFromCover(o);case 3:a.currentTheme=n.sent,n.next=9;break;case 6:n.prev=6,n.t0=n.catch(0),a.currentTheme=e.theme||a.theme;case 9:case"end":return n.stop()}}),n,this,[[0,6]])})))),!e.url){n.next=15;break}if((void 0!==t&&t.url)===e.url&&this.player.src===e.url){n.next=14;break}return this.currentPlayed=0,t&&t.id&&(this.handleChangeSettings(),this.$emit("listSwitch",e)),n.next=7,this.getAudioUrl(e);case 7:(r=n.sent)&&(this.player.src=r),this.player.playbackRate=e.speed||1,this.player.preload=this.preload,this.player.volume=this.currentVolume,this.player.currentTime=0,this.player.onerror=function(n){a.showNotice(n.toString())};case 14:this.canPlay&&this.play();case 15:case"end":return n.stop()}}),n,this)}))),function(n,e){return c.apply(this,arguments)})},{key:"handleChangeVolume",value:function(n){this.currentVolume=n}},{key:"handleChangeCurrentVolume",value:function(){this.player.volume=this.currentVolume,this.$emit("update:volume",this.currentVolume)}},{key:"handleChangeCurrentTime",value:function(){this.isDraggingProgressBar||this.isAwaitChangeProgressBar||(this.currentPlayed=this.media.currentTime/this.media.duration||0)}},{key:"handleChangeSettings",value:function(){var n={currentTime:this.media.currentTime,duration:this.media.duration,paused:this.media.paused,mini:this.isMini,lrc:this.lyricVisible,list:this.listVisible,volume:this.currentVolume,loop:this.currentLoop,order:this.currentOrder,music:this.currentMusic};n.volume<=0&&(n.volume=this.currentSettings.volume),this.saveSettings(n)}},{key:"handleChangeEnded",value:function(){if(this.media.ended)switch(this.currentPlayed=0,this.currentLoop){default:case"all":this.handleSkipForward();break;case"one":this.play();break;case"none":if(this.currentIndex===this.currentList.length-1){var n=l(this.currentList,1);this.currentMusic=n[0],this.pause(),this.canPlay=!1}else this.handleSkipForward()}}},{key:"handleChangeMini",value:function(){this.isMini=this.mini}},{key:"handleChangeCurrentMini",value:(r=d(regeneratorRuntime.mark((function n(e,t){var o;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,this.$nextTick();case 2:o=this.$refs.container,this.isArrow=o&&o.offsetWidth<=300,void 0!==t&&(this.$emit("update:mini",this.isMini),this.handleChangeSettings());case 5:case"end":return n.stop()}}),n,this)}))),function(n,e){return r.apply(this,arguments)})},{key:"handleChangeLoop",value:function(){this.currentLoop=this.loop}},{key:"handleChangeCurrentLoop",value:function(){this.$emit("update:loop",this.currentLoop),this.handleChangeSettings()}},{key:"handleChangeOrder",value:function(){this.currentOrder=this.order}},{key:"handleChangeCurrentOrder",value:function(){this.$emit("update:order",this.currentOrder),this.handleChangeSettings()}},{key:"handleChangeListVisible",value:function(){this.$emit(this.listVisible?"listShow":"listHide"),this.$emit("update:listFolded",this.listVisible),this.handleChangeSettings()}},{key:"handleChangeLyricVisible",value:function(){this.$emit(this.lyricVisible?"lrcShow":"lrcHide"),this.handleChangeSettings()}},{key:"play",value:(o=d(regeneratorRuntime.mark((function n(){return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.prev=0,this.mutex&&this.pauseOtherInstances(),n.next=4,this.player.play();case 4:n.next=10;break;case 6:n.prev=6,n.t0=n.catch(0),this.showNotice(n.t0.message),this.player.pause();case 10:case"end":return n.stop()}}),n,this,[[0,6]])}))),function(){return o.apply(this,arguments)})},{key:"pause",value:function(){this.player.pause()}},{key:"toggle",value:function(){this.media.paused?this.play():this.pause()}},{key:"seeking",value:(t=d(regeneratorRuntime.mark((function n(e){var t,o,r=arguments;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(t=!(r.length>1&&void 0!==r[1])||r[1],n.prev=1,this.isAwaitChangeProgressBar=!0,"none"!==this.preload){n.next=11;break}if(this.player.src){n.next=7;break}return n.next=7,this.media.srcLoaded();case 7:return o=this.player.paused,n.next=10,this.play();case 10:t&&o&&this.pause();case 11:return t&&this.pause(),n.next=14,this.media.loaded();case 14:this.player.currentTime=e*this.media.duration,t||(this.play(),Vn&&this.mutex&&Vn.postMessage("mutex")),n.next=21;break;case 18:n.prev=18,n.t0=n.catch(1),this.showNotice(n.t0.message);case 21:return n.prev=21,this.isAwaitChangeProgressBar=!1,n.finish(21);case 24:case"end":return n.stop()}}),n,this,[[1,18,21,24]])}))),function(n){return t.apply(this,arguments)})},{key:"seek",value:function(n){this.seeking(n/this.media.duration,this.media.paused)}},{key:"switch",value:function(n){switch(h(n)){case"number":this.currentMusic=this.orderList[Math.min(Math.max(0,n),this.orderList.length-1)];break;default:var e=this.orderList.find((function(e){return"string"==typeof e.name&&e.name.includes(n)}));e&&(this.currentMusic=e)}}},{key:"skipBack",value:function(){var n=this.getPlayIndexByMode("skipBack");this.currentMusic=a({},this.currentList[n])}},{key:"skipForward",value:function(){var n=this.getPlayIndexByMode("skipForward");this.currentMusic=a({},this.currentList[n])}},{key:"showLrc",value:function(){this.lyricVisible=!0}},{key:"hideLrc",value:function(){this.lyricVisible=!1}},{key:"toggleLrc",value:function(){this.lyricVisible=!this.lyricVisible}},{key:"showList",value:function(){this.listVisible=!0}},{key:"hideList",value:function(){this.listVisible=!1}},{key:"toggleList",value:function(){this.listVisible=!this.listVisible}},{key:"showNotice",value:function(n){var e=this,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2e3,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:.8;return new Promise((function(r){e.isMini?(console.warn("aplayer notice:",n),r()):(e.notice={text:n,time:t,opacity:o},e.$emit("noticeShow"),t>0&&setTimeout((function(){e.notice.opacity=0,e.$emit("noticeHide"),r()}),t))}))}},{key:"getThemeColorFromCover",value:function(n){var e=this;return new Promise(function(){var t=d(regeneratorRuntime.mark((function t(o,r){var a,i;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(t.prev=0,"undefined"==typeof ColorThief){t.next=12;break}return t.next=4,e.xhr.download(n,"blob");case 4:a=t.sent,(i=new FileReader).onload=function(){e.img.src=i.result,e.img.onload=function(){var n=l((new ColorThief).getColor(e.img),3),t=n[0],r=n[1],a=n[2],i="rgb(".concat(t,", ").concat(r,", ").concat(a,")");o(i||e.currentMusic.theme||e.theme)},e.img.onabort=r,e.img.onerror=r},i.onabort=r,i.onerror=r,i.readAsDataURL(a),t.next=13;break;case 12:o(e.currentMusic.theme||e.theme);case 13:t.next=18;break;case 15:t.prev=15,t.t0=t.catch(0),o(e.currentMusic.theme||e.theme);case 18:case"end":return t.stop()}}),t,this,[[0,15]])})));return function(n,e){return t.apply(this,arguments)}}())}},{key:"getAudioUrl",value:function(n){var e=this;return new Promise((function(t,o){var r=n.type;if(r&&e.customAudioType&&e.customAudioType[r])"function"==typeof e.customAudioType[r]?e.customAudioType[r](e.player,n,e):console.error("Illegal customType: ".concat(r)),t();else if(r&&"auto"!==r||(r=/m3u8(#|\?|$)/i.test(n.url)?"hls":"normal"),"hls"===r)try{if(Hls.isSupported()){var a=new Hls;a.loadSource(n.url),a.attachMedia(e.player),t()}else e.player.canPlayType("application/x-mpegURL")||e.player.canPlayType("application/vnd.apple.mpegURL")?t(n.url):o(new Error("HLS is not supported."))}catch(n){o(new Error("HLS is not supported."))}else t(n.url)}))}},{key:"getPlayIndexByMode",value:function(n){var e=this.currentList.length,t=this.currentIndex;return("skipBack"===n?e+(t-1):t+1)%e}},{key:"pauseOtherInstances",value:function(){var n=this;Gn.filter((function(e){return e!==n})).forEach((function(n){return n.pause()}))}},{key:"saveSettings",value:function(n){var e=Gn.indexOf(this);null===n&&delete Gn[e],this.store.set(void 0!==this.settings[e]?this.settings.map((function(t,o){return o===e?n:t})):s(this.settings).concat([n]))}},{key:"handleSkipBack",value:function(){this.skipBack()}},{key:"handleSkipForward",value:function(){this.skipForward()}},{key:"handleTogglePlay",value:function(){this.toggle()}},{key:"handleToggleOrderMode",value:function(){this.currentOrder="list"===this.currentOrder?"random":"list"}},{key:"handleToggleLoopMode",value:function(){this.currentLoop="all"===this.currentLoop?"one":"one"===this.currentLoop?"none":"all"}},{key:"handleTogglePlaylist",value:function(){this.toggleList()}},{key:"handleToggleLyric",value:function(){this.toggleLrc()}},{key:"handleChangeProgress",value:function(n,e){this.currentPlayed=e,this.isDraggingProgressBar=n.type.includes("move"),["touchend","mouseup"].includes(n.type)&&this.seeking(e,this.media.paused)}},{key:"handleMiniSwitcher",value:function(){this.isMini=!this.isMini}},{key:"handleChangePlaylist",value:function(n,e){n.id===this.currentMusic.id?this.handleTogglePlay():this.currentMusic=this.orderList[e]}},{key:"beforeMount",value:function(){var n=this;this.store.key=this.storageName;var e=Gn.findIndex((function(n){return!n}));if(e>-1?Gn[e]=this:Gn.push(this),this.currentSettings){var t=this.currentSettings,o=t.mini,r=t.lrc,a=t.list,i=t.volume,s=t.loop,l=t.order,c=t.music,d=t.currentTime,u=t.duration,p=t.paused;this.isMini=o,this.lyricVisible=r,this.listVisible=a,this.currentVolume=i,this.currentLoop=s,this.currentOrder=l,c&&(this.currentMusic=c,!this.isMobile&&u&&this.seeking(d/u,p))}Vn&&this.mutex&&Vn.addEventListener("message",(function(e){"mutex"===e.data&&n.pause()})),z.forEach((function(e){n.player.addEventListener(e,(function(t){return n.$emit(e,t)}))}))}},{key:"beforeDestroy",value:function(){this.pause(),this.saveSettings(null),this.$emit("destroy"),this.$el.remove()}},{key:"render",value:function(){var n=arguments[0],e=this.dataSource,t=this.fixed,o=this.lrcType,r=this.isMini,a=this.isMobile,i=this.isArrow,s=this.isLoading,l=this.notice,c=this.listVisible,d=this.listScrollTop,u=this.currentMusic,p=this.lyricVisible;return n("div",{ref:"container",class:I()({aplayer:!0,"aplayer-withlist":e.length>1,"aplayer-withlrc":!t&&0!==o&&p,"aplayer-narrow":r,"aplayer-fixed":t,"aplayer-mobile":a,"aplayer-arrow":i,"aplayer-loading":s})},[n(In,{attrs:{notice:l},on:{skipBack:this.handleSkipBack,skipForward:this.handleSkipForward,togglePlay:this.handleTogglePlay,toggleOrderMode:this.handleToggleOrderMode,toggleLoopMode:this.handleToggleLoopMode,togglePlaylist:this.handleTogglePlaylist,toggleLyric:this.handleToggleLyric,changeVolume:this.handleChangeVolume,changeProgress:this.handleChangeProgress,miniSwitcher:this.handleMiniSwitcher}}),n(Nn,{attrs:{visible:c,scrollTop:d,currentMusic:u,dataSource:e},on:{change:this.handleChangePlaylist}}),t&&0!==o?n(on,{attrs:{visible:p}}):null])}},{key:"aplayer",get:function(){return this}},{key:"settings",get:function(){return this.store.store}},{key:"currentSettings",get:function(){return this.settings[Gn.indexOf(this)]}},{key:"currentList",get:function(){return"list"===this.currentOrder?this.orderList:this.randomList}},{key:"dataSource",get:function(){return(Array.isArray(this.audio)?this.audio:[this.audio]).filter((function(n){return n})).map((function(n,e){return a({id:e+1},n)}))}},{key:"orderList",get:function(){var n=function(n,e){return"string"==typeof n?n:n.data&&n.data.attrs&&n.data.attrs["data-".concat(e)]};return this.dataSource.map((function(e){var t=e.name,o=e.artist;return a({},i(e,["name","artist"]),{name:n(t,"name"),artist:n(o,"artist")})}))}},{key:"randomList",get:function(){return function(n){for(var e=n.length-1;e>=0;e--){var t=Math.floor(Math.random()*(e+1)),o=n[t];n[t]=n[e],n[e]=o}return n}(s(this.orderList))}},{key:"isLoading",get:function(){var n=this.preload,e=this.currentPlayed,t=this.currentLoaded,o=this.media,r=o.src,a=o.paused,i=o.duration,s=!!r&&(e>t||!i);return"none"===n?!a&&s:s}},{key:"listScrollTop",get:function(){return 33*this.currentOrderIndex}},{key:"currentIndex",get:function(){return"list"===this.currentOrder?this.currentOrderIndex:this.currentRandomIndex}},{key:"currentOrderIndex",get:function(){var n=this.currentMusic,e=n.id,t=n.url;return this.orderList.findIndex((function(n){return n.id===e||n.url===t}))}},{key:"currentRandomIndex",get:function(){var n=this.currentMusic,e=n.id,t=n.url;return this.randomList.findIndex((function(n){return n.id===e||n.url===t}))}},{key:"currentLoaded",get:function(){if(this.media.readyState<P.HAVE_FUTURE_DATA)return 0;var n=this.media.buffered.length;return n>0?this.media.buffered.end(n-1)/this.media.duration:1}}]),e}(x.Component);Un.version="2.0.0-beta.5",qn([S({type:Boolean,required:!1,default:!1}),Fn("design:type",Boolean)],Un.prototype,"fixed",void 0),qn([S({type:Boolean,required:!1,default:null}),Fn("design:type",Boolean)],Un.prototype,"mini",void 0),qn([S({type:Boolean,required:!1,default:!1}),Fn("design:type",Boolean)],Un.prototype,"autoplay",void 0),qn([S({type:String,required:!1,default:"#b7daff"}),Fn("design:type",String)],Un.prototype,"theme",void 0),qn([S({type:String,required:!1,default:"all"}),Fn("design:type","function"==typeof(Rn=void 0!==Un&&Un.LoopMode)?Rn:Object)],Un.prototype,"loop",void 0),qn([S({type:String,required:!1,default:"list"}),Fn("design:type","function"==typeof(On=void 0!==Un&&Un.OrderMode)?On:Object)],Un.prototype,"order",void 0),qn([S({type:String,required:!1,default:"auto"}),Fn("design:type","function"==typeof(Mn=void 0!==Un&&Un.Preload)?Mn:Object)],Un.prototype,"preload",void 0),qn([S({type:Number,required:!1,default:.7}),Fn("design:type",Number)],Un.prototype,"volume",void 0),qn([S({type:[Object,Array],required:!0}),Fn("design:type",Object)],Un.prototype,"audio",void 0),qn([S({type:Object,required:!1}),Fn("design:type",Object)],Un.prototype,"customAudioType",void 0),qn([S({type:Boolean,required:!1,default:!0}),Fn("design:type",Boolean)],Un.prototype,"mutex",void 0),qn([S({type:Number,required:!1,default:0}),Fn("design:type","function"==typeof(Bn=void 0!==Un&&Un.LrcType)?Bn:Object)],Un.prototype,"lrcType",void 0),qn([S({type:Boolean,required:!1,default:!1}),Fn("design:type",Boolean)],Un.prototype,"listFolded",void 0),qn([S({type:Number,required:!1,default:250}),Fn("design:type",Number)],Un.prototype,"listMaxHeight",void 0),qn([S({type:String,required:!1,default:"aplayer-setting"}),Fn("design:type",String)],Un.prototype,"storageName",void 0),qn([j(),Fn("design:type",Object),Fn("design:paramtypes",[])],Un.prototype,"aplayer",null),qn([A("orderList",{immediate:!0,deep:!0}),Fn("design:type",Function),Fn("design:paramtypes",[Array,Array]),Fn("design:returntype",Promise)],Un.prototype,"handleChangePlayList",null),qn([A("currentMusic",{immediate:!0,deep:!0}),Fn("design:type",Function),Fn("design:paramtypes",["function"==typeof(Ln=void 0!==Un&&Un.Audio)?Ln:Object,"function"==typeof($n=void 0!==Un&&Un.Audio)?$n:Object]),Fn("design:returntype",Promise)],Un.prototype,"handleChangeCurrentMusic",null),qn([A("volume"),Fn("design:type",Function),Fn("design:paramtypes",[Number]),Fn("design:returntype",void 0)],Un.prototype,"handleChangeVolume",null),qn([A("currentVolume"),Fn("design:type",Function),Fn("design:paramtypes",[]),Fn("design:returntype",void 0)],Un.prototype,"handleChangeCurrentVolume",null),qn([A("media.currentTime"),Fn("design:type",Function),Fn("design:paramtypes",[]),Fn("design:returntype",void 0)],Un.prototype,"handleChangeCurrentTime",null),qn([A("media.$data",{deep:!0}),Fn("design:type",Function),Fn("design:paramtypes",[]),Fn("design:returntype",void 0)],Un.prototype,"handleChangeSettings",null),qn([A("media.ended"),Fn("design:type",Function),Fn("design:paramtypes",[]),Fn("design:returntype",void 0)],Un.prototype,"handleChangeEnded",null),qn([A("mini"),Fn("design:type",Function),Fn("design:paramtypes",[]),Fn("design:returntype",void 0)],Un.prototype,"handleChangeMini",null),qn([A("isMini",{immediate:!0}),Fn("design:type",Function),Fn("design:paramtypes",[Boolean,Boolean]),Fn("design:returntype",Promise)],Un.prototype,"handleChangeCurrentMini",null),qn([A("loop"),Fn("design:type",Function),Fn("design:paramtypes",[]),Fn("design:returntype",void 0)],Un.prototype,"handleChangeLoop",null),qn([A("currentLoop"),Fn("design:type",Function),Fn("design:paramtypes",[]),Fn("design:returntype",void 0)],Un.prototype,"handleChangeCurrentLoop",null),qn([A("order"),Fn("design:type",Function),Fn("design:paramtypes",[]),Fn("design:returntype",void 0)],Un.prototype,"handleChangeOrder",null),qn([A("currentOrder"),Fn("design:type",Function),Fn("design:paramtypes",[]),Fn("design:returntype",void 0)],Un.prototype,"handleChangeCurrentOrder",null),qn([A("listVisible"),Fn("design:type",Function),Fn("design:paramtypes",[]),Fn("design:returntype",void 0)],Un.prototype,"handleChangeListVisible",null),qn([A("lyricVisible"),Fn("design:type",Function),Fn("design:paramtypes",[]),Fn("design:returntype",void 0)],Un.prototype,"handleChangeLyricVisible",null);var Wn=Un=qn([w()({mixins:[G]})],Un);t.d(e,"APlayer",(function(){return Wn}));e.default=function(n,e){var t=a({},{productionTip:!0,defaultCover:"https://avatars2.githubusercontent.com/u/20062482?s=270"},e);Object.assign(Wn.prototype,{options:t}),n.component("aplayer",Wn),n.component("APlayer",Wn),t.productionTip&&console.log("%c vue-aplayer %c v".concat("2.0.0-beta.5"," ").concat("dd10c50"," %c"),"background: #35495e; padding: 1px; border-radius: 3px 0 0 3px; color: #fff","background: #41b883; padding: 1px; border-radius: 0 3px 3px 0; color: #fff","background: transparent")}},fdef:function(n,e){n.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"}})},function(n,e,t){"use strict";var o=t(0),r=t(2),a=t(39),i=t(10),s=t(12),l=t(69),c=t(65),d=o.Function,u=r([].concat),p=r([].join),m={},g=function(n,e,t){if(!s(m,e)){for(var o=[],r=0;r<e;r++)o[r]="a["+r+"]";m[e]=d("C,a","return new C("+p(o,",")+")")}return m[e](n,t)};n.exports=c?d.bind:function(n){var e=a(this),t=e.prototype,o=l(arguments,1),r=function(){var t=u(o,l(arguments));return this instanceof r?g(e,t.length,t):e.apply(n,t)};return i(t)&&(r.prototype=t),r}},function(n,e,t){"use strict";t(219)},function(n,e,t){"use strict";t(220)},function(n,e,t){"use strict";t.r(e);t(147),t(245),t(254),t(256);var o=t(92),r=(t(146),t(75),t(5),t(29),t(36),t(41),t(24),t(1));function a(n,e){for(var t in e)n[t]=e[t];return n}var i=/[!'()*]/g,s=function(n){return"%"+n.charCodeAt(0).toString(16)},l=/%2C/g,c=function(n){return encodeURIComponent(n).replace(i,s).replace(l,",")};function d(n){try{return decodeURIComponent(n)}catch(n){0}return n}var u=function(n){return null==n||"object"==typeof n?n:String(n)};function p(n){var e={};return(n=n.trim().replace(/^(\?|#|&)/,""))?(n.split("&").forEach((function(n){var t=n.replace(/\+/g," ").split("="),o=d(t.shift()),r=t.length>0?d(t.join("=")):null;void 0===e[o]?e[o]=r:Array.isArray(e[o])?e[o].push(r):e[o]=[e[o],r]})),e):e}function m(n){var e=n?Object.keys(n).map((function(e){var t=n[e];if(void 0===t)return"";if(null===t)return c(e);if(Array.isArray(t)){var o=[];return t.forEach((function(n){void 0!==n&&(null===n?o.push(c(e)):o.push(c(e)+"="+c(n)))})),o.join("&")}return c(e)+"="+c(t)})).filter((function(n){return n.length>0})).join("&"):null;return e?"?"+e:""}var g=/\/?$/;function h(n,e,t,o){var r=o&&o.options.stringifyQuery,a=e.query||{};try{a=f(a)}catch(n){}var i={name:e.name||n&&n.name,meta:n&&n.meta||{},path:e.path||"/",hash:e.hash||"",query:a,params:e.params||{},fullPath:y(e,r),matched:n?v(n):[]};return t&&(i.redirectedFrom=y(t,r)),Object.freeze(i)}function f(n){if(Array.isArray(n))return n.map(f);if(n&&"object"==typeof n){var e={};for(var t in n)e[t]=f(n[t]);return e}return n}var b=h(null,{path:"/"});function v(n){for(var e=[];n;)e.unshift(n),n=n.parent;return e}function y(n,e){var t=n.path,o=n.query;void 0===o&&(o={});var r=n.hash;return void 0===r&&(r=""),(t||"/")+(e||m)(o)+r}function x(n,e,t){return e===b?n===e:!!e&&(n.path&&e.path?n.path.replace(g,"")===e.path.replace(g,"")&&(t||n.hash===e.hash&&k(n.query,e.query)):!(!n.name||!e.name)&&(n.name===e.name&&(t||n.hash===e.hash&&k(n.query,e.query)&&k(n.params,e.params))))}function k(n,e){if(void 0===n&&(n={}),void 0===e&&(e={}),!n||!e)return n===e;var t=Object.keys(n).sort(),o=Object.keys(e).sort();return t.length===o.length&&t.every((function(t,r){var a=n[t];if(o[r]!==t)return!1;var i=e[t];return null==a||null==i?a===i:"object"==typeof a&&"object"==typeof i?k(a,i):String(a)===String(i)}))}function w(n){for(var e=0;e<n.matched.length;e++){var t=n.matched[e];for(var o in t.instances){var r=t.instances[o],a=t.enteredCbs[o];if(r&&a){delete t.enteredCbs[o];for(var i=0;i<a.length;i++)r._isBeingDestroyed||a[i](r)}}}}var E={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(n,e){var t=e.props,o=e.children,r=e.parent,i=e.data;i.routerView=!0;for(var s=r.$createElement,l=t.name,c=r.$route,d=r._routerViewCache||(r._routerViewCache={}),u=0,p=!1;r&&r._routerRoot!==r;){var m=r.$vnode?r.$vnode.data:{};m.routerView&&u++,m.keepAlive&&r._directInactive&&r._inactive&&(p=!0),r=r.$parent}if(i.routerViewDepth=u,p){var g=d[l],h=g&&g.component;return h?(g.configProps&&T(h,i,g.route,g.configProps),s(h,i,o)):s()}var f=c.matched[u],b=f&&f.components[l];if(!f||!b)return d[l]=null,s();d[l]={component:b},i.registerRouteInstance=function(n,e){var t=f.instances[l];(e&&t!==n||!e&&t===n)&&(f.instances[l]=e)},(i.hook||(i.hook={})).prepatch=function(n,e){f.instances[l]=e.componentInstance},i.hook.init=function(n){n.data.keepAlive&&n.componentInstance&&n.componentInstance!==f.instances[l]&&(f.instances[l]=n.componentInstance),w(c)};var v=f.props&&f.props[l];return v&&(a(d[l],{route:c,configProps:v}),T(b,i,c,v)),s(b,i,o)}};function T(n,e,t,o){var r=e.props=function(n,e){switch(typeof e){case"undefined":return;case"object":return e;case"function":return e(n);case"boolean":return e?n.params:void 0;default:0}}(t,o);if(r){r=e.props=a({},r);var i=e.attrs=e.attrs||{};for(var s in r)n.props&&s in n.props||(i[s]=r[s],delete r[s])}}function _(n,e,t){var o=n.charAt(0);if("/"===o)return n;if("?"===o||"#"===o)return e+n;var r=e.split("/");t&&r[r.length-1]||r.pop();for(var a=n.replace(/^\//,"").split("/"),i=0;i<a.length;i++){var s=a[i];".."===s?r.pop():"."!==s&&r.push(s)}return""!==r[0]&&r.unshift(""),r.join("/")}function j(n){return n.replace(/\/+/g,"/")}var S=Array.isArray||function(n){return"[object Array]"==Object.prototype.toString.call(n)},A=F,C=R,I=function(n,e){return M(R(n,e),e)},D=M,P=q,z=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function R(n,e){for(var t,o=[],r=0,a=0,i="",s=e&&e.delimiter||"/";null!=(t=z.exec(n));){var l=t[0],c=t[1],d=t.index;if(i+=n.slice(a,d),a=d+l.length,c)i+=c[1];else{var u=n[a],p=t[2],m=t[3],g=t[4],h=t[5],f=t[6],b=t[7];i&&(o.push(i),i="");var v=null!=p&&null!=u&&u!==p,y="+"===f||"*"===f,x="?"===f||"*"===f,k=t[2]||s,w=g||h;o.push({name:m||r++,prefix:p||"",delimiter:k,optional:x,repeat:y,partial:v,asterisk:!!b,pattern:w?L(w):b?".*":"[^"+B(k)+"]+?"})}}return a<n.length&&(i+=n.substr(a)),i&&o.push(i),o}function O(n){return encodeURI(n).replace(/[\/?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()}))}function M(n,e){for(var t=new Array(n.length),o=0;o<n.length;o++)"object"==typeof n[o]&&(t[o]=new RegExp("^(?:"+n[o].pattern+")$",N(e)));return function(e,o){for(var r="",a=e||{},i=(o||{}).pretty?O:encodeURIComponent,s=0;s<n.length;s++){var l=n[s];if("string"!=typeof l){var c,d=a[l.name];if(null==d){if(l.optional){l.partial&&(r+=l.prefix);continue}throw new TypeError('Expected "'+l.name+'" to be defined')}if(S(d)){if(!l.repeat)throw new TypeError('Expected "'+l.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(l.optional)continue;throw new TypeError('Expected "'+l.name+'" to not be empty')}for(var u=0;u<d.length;u++){if(c=i(d[u]),!t[s].test(c))throw new TypeError('Expected all "'+l.name+'" to match "'+l.pattern+'", but received `'+JSON.stringify(c)+"`");r+=(0===u?l.prefix:l.delimiter)+c}}else{if(c=l.asterisk?encodeURI(d).replace(/[?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()})):i(d),!t[s].test(c))throw new TypeError('Expected "'+l.name+'" to match "'+l.pattern+'", but received "'+c+'"');r+=l.prefix+c}}else r+=l}return r}}function B(n){return n.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function L(n){return n.replace(/([=!:$\/()])/g,"\\$1")}function $(n,e){return n.keys=e,n}function N(n){return n&&n.sensitive?"":"i"}function q(n,e,t){S(e)||(t=e||t,e=[]);for(var o=(t=t||{}).strict,r=!1!==t.end,a="",i=0;i<n.length;i++){var s=n[i];if("string"==typeof s)a+=B(s);else{var l=B(s.prefix),c="(?:"+s.pattern+")";e.push(s),s.repeat&&(c+="(?:"+l+c+")*"),a+=c=s.optional?s.partial?l+"("+c+")?":"(?:"+l+"("+c+"))?":l+"("+c+")"}}var d=B(t.delimiter||"/"),u=a.slice(-d.length)===d;return o||(a=(u?a.slice(0,-d.length):a)+"(?:"+d+"(?=$))?"),a+=r?"$":o&&u?"":"(?="+d+"|$)",$(new RegExp("^"+a,N(t)),e)}function F(n,e,t){return S(e)||(t=e||t,e=[]),t=t||{},n instanceof RegExp?function(n,e){var t=n.source.match(/\((?!\?)/g);if(t)for(var o=0;o<t.length;o++)e.push({name:o,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return $(n,e)}(n,e):S(n)?function(n,e,t){for(var o=[],r=0;r<n.length;r++)o.push(F(n[r],e,t).source);return $(new RegExp("(?:"+o.join("|")+")",N(t)),e)}(n,e,t):function(n,e,t){return q(R(n,t),e,t)}(n,e,t)}A.parse=C,A.compile=I,A.tokensToFunction=D,A.tokensToRegExp=P;var G=Object.create(null);function H(n,e,t){e=e||{};try{var o=G[n]||(G[n]=A.compile(n));return"string"==typeof e.pathMatch&&(e[0]=e.pathMatch),o(e,{pretty:!0})}catch(n){return""}finally{delete e[0]}}function V(n,e,t,o){var r="string"==typeof n?{path:n}:n;if(r._normalized)return r;if(r.name){var i=(r=a({},n)).params;return i&&"object"==typeof i&&(r.params=a({},i)),r}if(!r.path&&r.params&&e){(r=a({},r))._normalized=!0;var s=a(a({},e.params),r.params);if(e.name)r.name=e.name,r.params=s;else if(e.matched.length){var l=e.matched[e.matched.length-1].path;r.path=H(l,s,e.path)}else 0;return r}var c=function(n){var e="",t="",o=n.indexOf("#");o>=0&&(e=n.slice(o),n=n.slice(0,o));var r=n.indexOf("?");return r>=0&&(t=n.slice(r+1),n=n.slice(0,r)),{path:n,query:t,hash:e}}(r.path||""),d=e&&e.path||"/",m=c.path?_(c.path,d,t||r.append):d,g=function(n,e,t){void 0===e&&(e={});var o,r=t||p;try{o=r(n||"")}catch(n){o={}}for(var a in e){var i=e[a];o[a]=Array.isArray(i)?i.map(u):u(i)}return o}(c.query,r.query,o&&o.options.parseQuery),h=r.hash||c.hash;return h&&"#"!==h.charAt(0)&&(h="#"+h),{_normalized:!0,path:m,query:g,hash:h}}var U,W=function(){},Y={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(n){var e=this,t=this.$router,o=this.$route,r=t.resolve(this.to,o,this.append),i=r.location,s=r.route,l=r.href,c={},d=t.options.linkActiveClass,u=t.options.linkExactActiveClass,p=null==d?"router-link-active":d,m=null==u?"router-link-exact-active":u,f=null==this.activeClass?p:this.activeClass,b=null==this.exactActiveClass?m:this.exactActiveClass,v=s.redirectedFrom?h(null,V(s.redirectedFrom),null,t):s;c[b]=x(o,v,this.exactPath),c[f]=this.exact||this.exactPath?c[b]:function(n,e){return 0===n.path.replace(g,"/").indexOf(e.path.replace(g,"/"))&&(!e.hash||n.hash===e.hash)&&function(n,e){for(var t in e)if(!(t in n))return!1;return!0}(n.query,e.query)}(o,v);var y=c[b]?this.ariaCurrentValue:null,k=function(n){K(n)&&(e.replace?t.replace(i,W):t.push(i,W))},w={click:K};Array.isArray(this.event)?this.event.forEach((function(n){w[n]=k})):w[this.event]=k;var E={class:c},T=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:l,route:s,navigate:k,isActive:c[f],isExactActive:c[b]});if(T){if(1===T.length)return T[0];if(T.length>1||!T.length)return 0===T.length?n():n("span",{},T)}if("a"===this.tag)E.on=w,E.attrs={href:l,"aria-current":y};else{var _=function n(e){var t;if(e)for(var o=0;o<e.length;o++){if("a"===(t=e[o]).tag)return t;if(t.children&&(t=n(t.children)))return t}}(this.$slots.default);if(_){_.isStatic=!1;var j=_.data=a({},_.data);for(var S in j.on=j.on||{},j.on){var A=j.on[S];S in w&&(j.on[S]=Array.isArray(A)?A:[A])}for(var C in w)C in j.on?j.on[C].push(w[C]):j.on[C]=k;var I=_.data.attrs=a({},_.data.attrs);I.href=l,I["aria-current"]=y}else E.on=w}return n(this.tag,E,this.$slots.default)}};function K(n){if(!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey||n.defaultPrevented||void 0!==n.button&&0!==n.button)){if(n.currentTarget&&n.currentTarget.getAttribute){var e=n.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(e))return}return n.preventDefault&&n.preventDefault(),!0}}var J="undefined"!=typeof window;function Q(n,e,t,o,r){var a=e||[],i=t||Object.create(null),s=o||Object.create(null);n.forEach((function(n){!function n(e,t,o,r,a,i){var s=r.path,l=r.name;0;var c=r.pathToRegexpOptions||{},d=function(n,e,t){t||(n=n.replace(/\/$/,""));if("/"===n[0])return n;if(null==e)return n;return j(e.path+"/"+n)}(s,a,c.strict);"boolean"==typeof r.caseSensitive&&(c.sensitive=r.caseSensitive);var u={path:d,regex:Z(d,c),components:r.components||{default:r.component},alias:r.alias?"string"==typeof r.alias?[r.alias]:r.alias:[],instances:{},enteredCbs:{},name:l,parent:a,matchAs:i,redirect:r.redirect,beforeEnter:r.beforeEnter,meta:r.meta||{},props:null==r.props?{}:r.components?r.props:{default:r.props}};r.children&&r.children.forEach((function(r){var a=i?j(i+"/"+r.path):void 0;n(e,t,o,r,u,a)}));t[u.path]||(e.push(u.path),t[u.path]=u);if(void 0!==r.alias)for(var p=Array.isArray(r.alias)?r.alias:[r.alias],m=0;m<p.length;++m){0;var g={path:p[m],children:r.children};n(e,t,o,g,a,u.path||"/")}l&&(o[l]||(o[l]=u))}(a,i,s,n,r)}));for(var l=0,c=a.length;l<c;l++)"*"===a[l]&&(a.push(a.splice(l,1)[0]),c--,l--);return{pathList:a,pathMap:i,nameMap:s}}function Z(n,e){return A(n,[],e)}function X(n,e){var t=Q(n),o=t.pathList,r=t.pathMap,a=t.nameMap;function i(n,t,i){var s=V(n,t,!1,e),c=s.name;if(c){var d=a[c];if(!d)return l(null,s);var u=d.regex.keys.filter((function(n){return!n.optional})).map((function(n){return n.name}));if("object"!=typeof s.params&&(s.params={}),t&&"object"==typeof t.params)for(var p in t.params)!(p in s.params)&&u.indexOf(p)>-1&&(s.params[p]=t.params[p]);return s.path=H(d.path,s.params),l(d,s,i)}if(s.path){s.params={};for(var m=0;m<o.length;m++){var g=o[m],h=r[g];if(nn(h.regex,s.path,s.params))return l(h,s,i)}}return l(null,s)}function s(n,t){var o=n.redirect,r="function"==typeof o?o(h(n,t,null,e)):o;if("string"==typeof r&&(r={path:r}),!r||"object"!=typeof r)return l(null,t);var s=r,c=s.name,d=s.path,u=t.query,p=t.hash,m=t.params;if(u=s.hasOwnProperty("query")?s.query:u,p=s.hasOwnProperty("hash")?s.hash:p,m=s.hasOwnProperty("params")?s.params:m,c){a[c];return i({_normalized:!0,name:c,query:u,hash:p,params:m},void 0,t)}if(d){var g=function(n,e){return _(n,e.parent?e.parent.path:"/",!0)}(d,n);return i({_normalized:!0,path:H(g,m),query:u,hash:p},void 0,t)}return l(null,t)}function l(n,t,o){return n&&n.redirect?s(n,o||t):n&&n.matchAs?function(n,e,t){var o=i({_normalized:!0,path:H(t,e.params)});if(o){var r=o.matched,a=r[r.length-1];return e.params=o.params,l(a,e)}return l(null,e)}(0,t,n.matchAs):h(n,t,o,e)}return{match:i,addRoute:function(n,e){var t="object"!=typeof n?a[n]:void 0;Q([e||n],o,r,a,t),t&&t.alias.length&&Q(t.alias.map((function(n){return{path:n,children:[e]}})),o,r,a,t)},getRoutes:function(){return o.map((function(n){return r[n]}))},addRoutes:function(n){Q(n,o,r,a)}}}function nn(n,e,t){var o=e.match(n);if(!o)return!1;if(!t)return!0;for(var r=1,a=o.length;r<a;++r){var i=n.keys[r-1];i&&(t[i.name||"pathMatch"]="string"==typeof o[r]?d(o[r]):o[r])}return!0}var en=J&&window.performance&&window.performance.now?window.performance:Date;function tn(){return en.now().toFixed(3)}var on=tn();function rn(){return on}function an(n){return on=n}var sn=Object.create(null);function ln(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var n=window.location.protocol+"//"+window.location.host,e=window.location.href.replace(n,""),t=a({},window.history.state);return t.key=rn(),window.history.replaceState(t,"",e),window.addEventListener("popstate",un),function(){window.removeEventListener("popstate",un)}}function cn(n,e,t,o){if(n.app){var r=n.options.scrollBehavior;r&&n.app.$nextTick((function(){var a=function(){var n=rn();if(n)return sn[n]}(),i=r.call(n,e,t,o?a:null);i&&("function"==typeof i.then?i.then((function(n){fn(n,a)})).catch((function(n){0})):fn(i,a))}))}}function dn(){var n=rn();n&&(sn[n]={x:window.pageXOffset,y:window.pageYOffset})}function un(n){dn(),n.state&&n.state.key&&an(n.state.key)}function pn(n){return gn(n.x)||gn(n.y)}function mn(n){return{x:gn(n.x)?n.x:window.pageXOffset,y:gn(n.y)?n.y:window.pageYOffset}}function gn(n){return"number"==typeof n}var hn=/^#\d/;function fn(n,e){var t,o="object"==typeof n;if(o&&"string"==typeof n.selector){var r=hn.test(n.selector)?document.getElementById(n.selector.slice(1)):document.querySelector(n.selector);if(r){var a=n.offset&&"object"==typeof n.offset?n.offset:{};e=function(n,e){var t=document.documentElement.getBoundingClientRect(),o=n.getBoundingClientRect();return{x:o.left-t.left-e.x,y:o.top-t.top-e.y}}(r,a={x:gn((t=a).x)?t.x:0,y:gn(t.y)?t.y:0})}else pn(n)&&(e=mn(n))}else o&&pn(n)&&(e=mn(n));e&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:e.x,top:e.y,behavior:n.behavior}):window.scrollTo(e.x,e.y))}var bn,vn=J&&((-1===(bn=window.navigator.userAgent).indexOf("Android 2.")&&-1===bn.indexOf("Android 4.0")||-1===bn.indexOf("Mobile Safari")||-1!==bn.indexOf("Chrome")||-1!==bn.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function yn(n,e){dn();var t=window.history;try{if(e){var o=a({},t.state);o.key=rn(),t.replaceState(o,"",n)}else t.pushState({key:an(tn())},"",n)}catch(t){window.location[e?"replace":"assign"](n)}}function xn(n){yn(n,!0)}function kn(n,e,t){var o=function(r){r>=n.length?t():n[r]?e(n[r],(function(){o(r+1)})):o(r+1)};o(0)}var wn={redirected:2,aborted:4,cancelled:8,duplicated:16};function En(n,e){return _n(n,e,wn.redirected,'Redirected when going from "'+n.fullPath+'" to "'+function(n){if("string"==typeof n)return n;if("path"in n)return n.path;var e={};return jn.forEach((function(t){t in n&&(e[t]=n[t])})),JSON.stringify(e,null,2)}(e)+'" via a navigation guard.')}function Tn(n,e){return _n(n,e,wn.cancelled,'Navigation cancelled from "'+n.fullPath+'" to "'+e.fullPath+'" with a new navigation.')}function _n(n,e,t,o){var r=new Error(o);return r._isRouter=!0,r.from=n,r.to=e,r.type=t,r}var jn=["params","query","hash"];function Sn(n){return Object.prototype.toString.call(n).indexOf("Error")>-1}function An(n,e){return Sn(n)&&n._isRouter&&(null==e||n.type===e)}function Cn(n){return function(e,t,o){var r=!1,a=0,i=null;In(n,(function(n,e,t,s){if("function"==typeof n&&void 0===n.cid){r=!0,a++;var l,c=zn((function(e){var r;((r=e).__esModule||Pn&&"Module"===r[Symbol.toStringTag])&&(e=e.default),n.resolved="function"==typeof e?e:U.extend(e),t.components[s]=e,--a<=0&&o()})),d=zn((function(n){var e="Failed to resolve async component "+s+": "+n;i||(i=Sn(n)?n:new Error(e),o(i))}));try{l=n(c,d)}catch(n){d(n)}if(l)if("function"==typeof l.then)l.then(c,d);else{var u=l.component;u&&"function"==typeof u.then&&u.then(c,d)}}})),r||o()}}function In(n,e){return Dn(n.map((function(n){return Object.keys(n.components).map((function(t){return e(n.components[t],n.instances[t],n,t)}))})))}function Dn(n){return Array.prototype.concat.apply([],n)}var Pn="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function zn(n){var e=!1;return function(){for(var t=[],o=arguments.length;o--;)t[o]=arguments[o];if(!e)return e=!0,n.apply(this,t)}}var Rn=function(n,e){this.router=n,this.base=function(n){if(!n)if(J){var e=document.querySelector("base");n=(n=e&&e.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else n="/";"/"!==n.charAt(0)&&(n="/"+n);return n.replace(/\/$/,"")}(e),this.current=b,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function On(n,e,t,o){var r=In(n,(function(n,o,r,a){var i=function(n,e){"function"!=typeof n&&(n=U.extend(n));return n.options[e]}(n,e);if(i)return Array.isArray(i)?i.map((function(n){return t(n,o,r,a)})):t(i,o,r,a)}));return Dn(o?r.reverse():r)}function Mn(n,e){if(e)return function(){return n.apply(e,arguments)}}Rn.prototype.listen=function(n){this.cb=n},Rn.prototype.onReady=function(n,e){this.ready?n():(this.readyCbs.push(n),e&&this.readyErrorCbs.push(e))},Rn.prototype.onError=function(n){this.errorCbs.push(n)},Rn.prototype.transitionTo=function(n,e,t){var o,r=this;try{o=this.router.match(n,this.current)}catch(n){throw this.errorCbs.forEach((function(e){e(n)})),n}var a=this.current;this.confirmTransition(o,(function(){r.updateRoute(o),e&&e(o),r.ensureURL(),r.router.afterHooks.forEach((function(n){n&&n(o,a)})),r.ready||(r.ready=!0,r.readyCbs.forEach((function(n){n(o)})))}),(function(n){t&&t(n),n&&!r.ready&&(An(n,wn.redirected)&&a===b||(r.ready=!0,r.readyErrorCbs.forEach((function(e){e(n)}))))}))},Rn.prototype.confirmTransition=function(n,e,t){var o=this,r=this.current;this.pending=n;var a,i,s=function(n){!An(n)&&Sn(n)&&(o.errorCbs.length?o.errorCbs.forEach((function(e){e(n)})):console.error(n)),t&&t(n)},l=n.matched.length-1,c=r.matched.length-1;if(x(n,r)&&l===c&&n.matched[l]===r.matched[c])return this.ensureURL(),n.hash&&cn(this.router,r,n,!1),s(((i=_n(a=r,n,wn.duplicated,'Avoided redundant navigation to current location: "'+a.fullPath+'".')).name="NavigationDuplicated",i));var d=function(n,e){var t,o=Math.max(n.length,e.length);for(t=0;t<o&&n[t]===e[t];t++);return{updated:e.slice(0,t),activated:e.slice(t),deactivated:n.slice(t)}}(this.current.matched,n.matched),u=d.updated,p=d.deactivated,m=d.activated,g=[].concat(function(n){return On(n,"beforeRouteLeave",Mn,!0)}(p),this.router.beforeHooks,function(n){return On(n,"beforeRouteUpdate",Mn)}(u),m.map((function(n){return n.beforeEnter})),Cn(m)),h=function(e,t){if(o.pending!==n)return s(Tn(r,n));try{e(n,r,(function(e){!1===e?(o.ensureURL(!0),s(function(n,e){return _n(n,e,wn.aborted,'Navigation aborted from "'+n.fullPath+'" to "'+e.fullPath+'" via a navigation guard.')}(r,n))):Sn(e)?(o.ensureURL(!0),s(e)):"string"==typeof e||"object"==typeof e&&("string"==typeof e.path||"string"==typeof e.name)?(s(En(r,n)),"object"==typeof e&&e.replace?o.replace(e):o.push(e)):t(e)}))}catch(n){s(n)}};kn(g,h,(function(){kn(function(n){return On(n,"beforeRouteEnter",(function(n,e,t,o){return function(n,e,t){return function(o,r,a){return n(o,r,(function(n){"function"==typeof n&&(e.enteredCbs[t]||(e.enteredCbs[t]=[]),e.enteredCbs[t].push(n)),a(n)}))}}(n,t,o)}))}(m).concat(o.router.resolveHooks),h,(function(){if(o.pending!==n)return s(Tn(r,n));o.pending=null,e(n),o.router.app&&o.router.app.$nextTick((function(){w(n)}))}))}))},Rn.prototype.updateRoute=function(n){this.current=n,this.cb&&this.cb(n)},Rn.prototype.setupListeners=function(){},Rn.prototype.teardown=function(){this.listeners.forEach((function(n){n()})),this.listeners=[],this.current=b,this.pending=null};var Bn=function(n){function e(e,t){n.call(this,e,t),this._startLocation=Ln(this.base)}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router,t=e.options.scrollBehavior,o=vn&&t;o&&this.listeners.push(ln());var r=function(){var t=n.current,r=Ln(n.base);n.current===b&&r===n._startLocation||n.transitionTo(r,(function(n){o&&cn(e,n,t,!0)}))};window.addEventListener("popstate",r),this.listeners.push((function(){window.removeEventListener("popstate",r)}))}},e.prototype.go=function(n){window.history.go(n)},e.prototype.push=function(n,e,t){var o=this,r=this.current;this.transitionTo(n,(function(n){yn(j(o.base+n.fullPath)),cn(o.router,n,r,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var o=this,r=this.current;this.transitionTo(n,(function(n){xn(j(o.base+n.fullPath)),cn(o.router,n,r,!1),e&&e(n)}),t)},e.prototype.ensureURL=function(n){if(Ln(this.base)!==this.current.fullPath){var e=j(this.base+this.current.fullPath);n?yn(e):xn(e)}},e.prototype.getCurrentLocation=function(){return Ln(this.base)},e}(Rn);function Ln(n){var e=window.location.pathname,t=e.toLowerCase(),o=n.toLowerCase();return!n||t!==o&&0!==t.indexOf(j(o+"/"))||(e=e.slice(n.length)),(e||"/")+window.location.search+window.location.hash}var $n=function(n){function e(e,t,o){n.call(this,e,t),o&&function(n){var e=Ln(n);if(!/^\/#/.test(e))return window.location.replace(j(n+"/#"+e)),!0}(this.base)||Nn()}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router.options.scrollBehavior,t=vn&&e;t&&this.listeners.push(ln());var o=function(){var e=n.current;Nn()&&n.transitionTo(qn(),(function(o){t&&cn(n.router,o,e,!0),vn||Hn(o.fullPath)}))},r=vn?"popstate":"hashchange";window.addEventListener(r,o),this.listeners.push((function(){window.removeEventListener(r,o)}))}},e.prototype.push=function(n,e,t){var o=this,r=this.current;this.transitionTo(n,(function(n){Gn(n.fullPath),cn(o.router,n,r,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var o=this,r=this.current;this.transitionTo(n,(function(n){Hn(n.fullPath),cn(o.router,n,r,!1),e&&e(n)}),t)},e.prototype.go=function(n){window.history.go(n)},e.prototype.ensureURL=function(n){var e=this.current.fullPath;qn()!==e&&(n?Gn(e):Hn(e))},e.prototype.getCurrentLocation=function(){return qn()},e}(Rn);function Nn(){var n=qn();return"/"===n.charAt(0)||(Hn("/"+n),!1)}function qn(){var n=window.location.href,e=n.indexOf("#");return e<0?"":n=n.slice(e+1)}function Fn(n){var e=window.location.href,t=e.indexOf("#");return(t>=0?e.slice(0,t):e)+"#"+n}function Gn(n){vn?yn(Fn(n)):window.location.hash=n}function Hn(n){vn?xn(Fn(n)):window.location.replace(Fn(n))}var Vn=function(n){function e(e,t){n.call(this,e,t),this.stack=[],this.index=-1}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.push=function(n,e,t){var o=this;this.transitionTo(n,(function(n){o.stack=o.stack.slice(0,o.index+1).concat(n),o.index++,e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var o=this;this.transitionTo(n,(function(n){o.stack=o.stack.slice(0,o.index).concat(n),e&&e(n)}),t)},e.prototype.go=function(n){var e=this,t=this.index+n;if(!(t<0||t>=this.stack.length)){var o=this.stack[t];this.confirmTransition(o,(function(){var n=e.current;e.index=t,e.updateRoute(o),e.router.afterHooks.forEach((function(e){e&&e(o,n)}))}),(function(n){An(n,wn.duplicated)&&(e.index=t)}))}},e.prototype.getCurrentLocation=function(){var n=this.stack[this.stack.length-1];return n?n.fullPath:"/"},e.prototype.ensureURL=function(){},e}(Rn),Un=function(n){void 0===n&&(n={}),this.app=null,this.apps=[],this.options=n,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=X(n.routes||[],this);var e=n.mode||"hash";switch(this.fallback="history"===e&&!vn&&!1!==n.fallback,this.fallback&&(e="hash"),J||(e="abstract"),this.mode=e,e){case"history":this.history=new Bn(this,n.base);break;case"hash":this.history=new $n(this,n.base,this.fallback);break;case"abstract":this.history=new Vn(this,n.base);break;default:0}},Wn={currentRoute:{configurable:!0}};function Yn(n,e){return n.push(e),function(){var t=n.indexOf(e);t>-1&&n.splice(t,1)}}Un.prototype.match=function(n,e,t){return this.matcher.match(n,e,t)},Wn.currentRoute.get=function(){return this.history&&this.history.current},Un.prototype.init=function(n){var e=this;if(this.apps.push(n),n.$once("hook:destroyed",(function(){var t=e.apps.indexOf(n);t>-1&&e.apps.splice(t,1),e.app===n&&(e.app=e.apps[0]||null),e.app||e.history.teardown()})),!this.app){this.app=n;var t=this.history;if(t instanceof Bn||t instanceof $n){var o=function(n){t.setupListeners(),function(n){var o=t.current,r=e.options.scrollBehavior;vn&&r&&"fullPath"in n&&cn(e,n,o,!1)}(n)};t.transitionTo(t.getCurrentLocation(),o,o)}t.listen((function(n){e.apps.forEach((function(e){e._route=n}))}))}},Un.prototype.beforeEach=function(n){return Yn(this.beforeHooks,n)},Un.prototype.beforeResolve=function(n){return Yn(this.resolveHooks,n)},Un.prototype.afterEach=function(n){return Yn(this.afterHooks,n)},Un.prototype.onReady=function(n,e){this.history.onReady(n,e)},Un.prototype.onError=function(n){this.history.onError(n)},Un.prototype.push=function(n,e,t){var o=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){o.history.push(n,e,t)}));this.history.push(n,e,t)},Un.prototype.replace=function(n,e,t){var o=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){o.history.replace(n,e,t)}));this.history.replace(n,e,t)},Un.prototype.go=function(n){this.history.go(n)},Un.prototype.back=function(){this.go(-1)},Un.prototype.forward=function(){this.go(1)},Un.prototype.getMatchedComponents=function(n){var e=n?n.matched?n:this.resolve(n).route:this.currentRoute;return e?[].concat.apply([],e.matched.map((function(n){return Object.keys(n.components).map((function(e){return n.components[e]}))}))):[]},Un.prototype.resolve=function(n,e,t){var o=V(n,e=e||this.history.current,t,this),r=this.match(o,e),a=r.redirectedFrom||r.fullPath;return{location:o,route:r,href:function(n,e,t){var o="hash"===t?"#"+e:e;return n?j(n+"/"+o):o}(this.history.base,a,this.mode),normalizedTo:o,resolved:r}},Un.prototype.getRoutes=function(){return this.matcher.getRoutes()},Un.prototype.addRoute=function(n,e){this.matcher.addRoute(n,e),this.history.current!==b&&this.history.transitionTo(this.history.getCurrentLocation())},Un.prototype.addRoutes=function(n){this.matcher.addRoutes(n),this.history.current!==b&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(Un.prototype,Wn),Un.install=function n(e){if(!n.installed||U!==e){n.installed=!0,U=e;var t=function(n){return void 0!==n},o=function(n,e){var o=n.$options._parentVnode;t(o)&&t(o=o.data)&&t(o=o.registerRouteInstance)&&o(n,e)};e.mixin({beforeCreate:function(){t(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),e.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,o(this,this)},destroyed:function(){o(this)}}),Object.defineProperty(e.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(e.prototype,"$route",{get:function(){return this._routerRoot._route}}),e.component("RouterView",E),e.component("RouterLink",Y);var r=e.config.optionMergeStrategies;r.beforeRouteEnter=r.beforeRouteLeave=r.beforeRouteUpdate=r.created}},Un.version="3.5.3",Un.isNavigationFailure=An,Un.NavigationFailureType=wn,Un.START_LOCATION=b,J&&window.Vue&&window.Vue.use(Un);var Kn=Un;t(180),t(181),t(259),t(76),t(261),t(22),t(23),t(262);function Jn(n){n.locales&&Object.keys(n.locales).forEach((function(e){n.locales[e].path=e})),Object.freeze(n)}t(71),t(94),t(128);function Qn(n){return(Qn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}var Zn=t(73),Xn=(t(191),t(17),t(46),t(233),t(234),t(42),t(28),{NotFound:function(){return Promise.all([t.e(0),t.e(14)]).then(t.bind(null,507))},Layout:function(){return Promise.all([t.e(0),t.e(2)]).then(t.bind(null,505))}}),ne={"v-227d8144":function(){return t.e(17).then(t.bind(null,519))},"v-beaa583c":function(){return t.e(19).then(t.bind(null,520))},"v-ebe91cba":function(){return t.e(20).then(t.bind(null,521))},"v-465f9570":function(){return t.e(18).then(t.bind(null,522))},"v-860de4b6":function(){return t.e(21).then(t.bind(null,523))},"v-a3fb0c3a":function(){return t.e(22).then(t.bind(null,524))},"v-6fe0115b":function(){return t.e(23).then(t.bind(null,525))},"v-b19543ba":function(){return t.e(24).then(t.bind(null,526))},"v-6f9688f8":function(){return t.e(25).then(t.bind(null,527))},"v-40d78add":function(){return t.e(26).then(t.bind(null,528))},"v-5da5b86d":function(){return t.e(27).then(t.bind(null,529))},"v-d573b61a":function(){return t.e(28).then(t.bind(null,530))},"v-57eee1f1":function(){return t.e(29).then(t.bind(null,531))},"v-36ea8070":function(){return t.e(31).then(t.bind(null,532))},"v-a32772ac":function(){return t.e(32).then(t.bind(null,533))},"v-7e20813b":function(){return t.e(33).then(t.bind(null,534))},"v-38ba7828":function(){return t.e(36).then(t.bind(null,535))},"v-24f96e3c":function(){return t.e(34).then(t.bind(null,536))},"v-ff64be9e":function(){return t.e(35).then(t.bind(null,537))},"v-c5d3adea":function(){return t.e(37).then(t.bind(null,538))},"v-64b2e1b7":function(){return t.e(38).then(t.bind(null,539))},"v-42188323":function(){return t.e(39).then(t.bind(null,540))},"v-2b466bca":function(){return t.e(30).then(t.bind(null,508))},"v-1c870c74":function(){return t.e(40).then(t.bind(null,541))},"v-7daf4bbf":function(){return t.e(41).then(t.bind(null,542))},"v-e26627e2":function(){return t.e(42).then(t.bind(null,543))},"v-48b83d41":function(){return t.e(43).then(t.bind(null,544))},"v-499a927d":function(){return t.e(44).then(t.bind(null,545))},"v-18d9c242":function(){return t.e(45).then(t.bind(null,546))},"v-a9f16054":function(){return t.e(46).then(t.bind(null,547))},"v-7239a90e":function(){return t.e(47).then(t.bind(null,548))},"v-831f05e0":function(){return t.e(48).then(t.bind(null,549))},"v-df1f8b60":function(){return t.e(49).then(t.bind(null,550))},"v-766563ae":function(){return t.e(50).then(t.bind(null,551))},"v-67e2039b":function(){return t.e(51).then(t.bind(null,552))},"v-30287b26":function(){return t.e(52).then(t.bind(null,553))},"v-96dabd4e":function(){return t.e(53).then(t.bind(null,554))},"v-7c8ad7a7":function(){return t.e(54).then(t.bind(null,555))},"v-a52eb068":function(){return t.e(56).then(t.bind(null,556))},"v-16e1320d":function(){return t.e(55).then(t.bind(null,557))},"v-0669d78c":function(){return t.e(57).then(t.bind(null,558))},"v-0dfacdc5":function(){return t.e(58).then(t.bind(null,559))},"v-2fbe7a7e":function(){return t.e(59).then(t.bind(null,560))},"v-056de73c":function(){return t.e(60).then(t.bind(null,561))},"v-591520b0":function(){return t.e(61).then(t.bind(null,562))},"v-5933aeef":function(){return t.e(62).then(t.bind(null,563))},"v-eb6c7c6e":function(){return t.e(63).then(t.bind(null,564))},"v-79a818aa":function(){return t.e(64).then(t.bind(null,565))},"v-6b4d5401":function(){return t.e(65).then(t.bind(null,566))},"v-5341d2e1":function(){return t.e(66).then(t.bind(null,567))},"v-2a51247f":function(){return t.e(67).then(t.bind(null,568))},"v-da1689fc":function(){return t.e(68).then(t.bind(null,569))},"v-1f2c2a98":function(){return t.e(69).then(t.bind(null,570))},"v-b4fa01ca":function(){return t.e(70).then(t.bind(null,571))},"v-14f2c9c7":function(){return t.e(71).then(t.bind(null,572))},"v-77493b55":function(){return t.e(72).then(t.bind(null,573))},"v-2438b6f8":function(){return t.e(74).then(t.bind(null,574))},"v-2ba03862":function(){return t.e(73).then(t.bind(null,575))},"v-beb409b2":function(){return t.e(76).then(t.bind(null,576))},"v-179b3e7c":function(){return t.e(75).then(t.bind(null,577))},"v-7a9069fa":function(){return t.e(77).then(t.bind(null,578))},"v-1a9f2e82":function(){return t.e(78).then(t.bind(null,579))},"v-91fa07b2":function(){return t.e(79).then(t.bind(null,580))},"v-77495e9b":function(){return t.e(82).then(t.bind(null,581))},"v-d6614562":function(){return t.e(81).then(t.bind(null,582))},"v-77e1fd86":function(){return t.e(83).then(t.bind(null,583))},"v-f0f781e2":function(){return t.e(80).then(t.bind(null,584))},"v-07031292":function(){return t.e(84).then(t.bind(null,585))},"v-79bfbfb5":function(){return t.e(87).then(t.bind(null,586))},"v-8acbb556":function(){return t.e(85).then(t.bind(null,587))},"v-5f8704ae":function(){return t.e(86).then(t.bind(null,588))},"v-7f551c36":function(){return t.e(88).then(t.bind(null,589))},"v-1c79a5da":function(){return t.e(89).then(t.bind(null,590))},"v-0a6e622c":function(){return t.e(90).then(t.bind(null,591))},"v-389f15d1":function(){return t.e(91).then(t.bind(null,592))},"v-9ebe1e58":function(){return t.e(92).then(t.bind(null,593))},"v-179fa447":function(){return t.e(93).then(t.bind(null,594))},"v-6b5d097e":function(){return t.e(95).then(t.bind(null,595))},"v-ff6c101a":function(){return t.e(96).then(t.bind(null,596))},"v-14248852":function(){return t.e(97).then(t.bind(null,597))},"v-0973ffba":function(){return t.e(94).then(t.bind(null,598))},"v-adeda9ba":function(){return t.e(98).then(t.bind(null,599))},"v-4e3afc59":function(){return t.e(99).then(t.bind(null,600))},"v-76763ca0":function(){return t.e(100).then(t.bind(null,601))},"v-546f6261":function(){return t.e(101).then(t.bind(null,602))},"v-1afd471e":function(){return t.e(103).then(t.bind(null,603))},"v-35bc4ad4":function(){return t.e(102).then(t.bind(null,604))},"v-223225e0":function(){return t.e(104).then(t.bind(null,605))},"v-1a3d1758":function(){return t.e(105).then(t.bind(null,606))},"v-8cf140f8":function(){return t.e(106).then(t.bind(null,607))},"v-3fbab6c4":function(){return t.e(108).then(t.bind(null,608))},"v-fb737192":function(){return t.e(109).then(t.bind(null,609))},"v-3006ad1e":function(){return t.e(107).then(t.bind(null,610))},"v-0f731a6a":function(){return t.e(111).then(t.bind(null,611))},"v-01cbf25d":function(){return t.e(110).then(t.bind(null,612))},"v-43f170d4":function(){return t.e(114).then(t.bind(null,613))},"v-48d27e4b":function(){return t.e(113).then(t.bind(null,614))},"v-7e05f2a4":function(){return t.e(115).then(t.bind(null,615))},"v-4f99d19e":function(){return t.e(116).then(t.bind(null,616))},"v-0cf710d9":function(){return t.e(117).then(t.bind(null,617))},"v-1e3bb131":function(){return t.e(118).then(t.bind(null,618))},"v-4f4181da":function(){return t.e(119).then(t.bind(null,619))},"v-2c944259":function(){return t.e(120).then(t.bind(null,620))},"v-10497712":function(){return t.e(10).then(t.bind(null,504))},"v-23695b2b":function(){return t.e(112).then(t.bind(null,621))}};function ee(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var te=/-(\w)/g,oe=ee((function(n){return n.replace(te,(function(n,e){return e?e.toUpperCase():""}))})),re=/\B([A-Z])/g,ae=ee((function(n){return n.replace(re,"-$1").toLowerCase()})),ie=ee((function(n){return n.charAt(0).toUpperCase()+n.slice(1)}));function se(n,e){if(e)return n(e)?n(e):e.includes("-")?n(ie(oe(e))):n(ie(e))||n(ae(e))}var le=Object.assign({},Xn,ne),ce=function(n){return le[n]},de=function(n){return ne[n]},ue=function(n){return Xn[n]},pe=function(n){return r.default.component(n)};function me(n){return se(de,n)}function ge(n){return se(ue,n)}function he(n){return se(ce,n)}function fe(n){return se(pe,n)}function be(){for(var n=arguments.length,e=new Array(n),t=0;t<n;t++)e[t]=arguments[t];return Promise.all(e.filter((function(n){return n})).map(function(){var n=Object(o.a)(regeneratorRuntime.mark((function n(e){var t;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(fe(e)||!he(e)){n.next=5;break}return n.next=3,he(e)();case 3:t=n.sent,r.default.component(e,t.default);case 5:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}()))}function ve(n,e){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[n]=e)}var ye=t(142),xe=(t(152),t(113),t(57),t(221)),ke=t.n(xe),we={created:function(){if(this.siteMeta=this.$site.headTags.filter((function(n){return"meta"===Object(ye.a)(n,1)[0]})).map((function(n){var e=Object(ye.a)(n,2);e[0];return e[1]})),this.$ssrContext){var n=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(e=n)?e.map((function(n){var e="<meta";return Object.keys(n).forEach((function(t){e+=" ".concat(t,'="').concat(n[t],'"')})),e+">"})).join("\n    "):"",this.$ssrContext.canonicalLink=Te(this.$canonicalUrl)}var e},mounted:function(){this.currentMetaTags=Object(Zn.a)(document.querySelectorAll("meta")),this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta:function(){document.title=this.$title,document.documentElement.lang=this.$lang;var n=this.getMergedMetaTags();this.currentMetaTags=_e(n,this.currentMetaTags)},getMergedMetaTags:function(){var n=this.$page.frontmatter.meta||[];return ke()([{name:"description",content:this.$description}],n,this.siteMeta,je)},updateCanonicalLink:function(){Ee(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",Te(this.$canonicalUrl))}},watch:{$page:function(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy:function(){_e(null,this.currentMetaTags),Ee()}};function Ee(){var n=document.querySelector("link[rel='canonical']");n&&n.remove()}function Te(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return n?'<link href="'.concat(n,'" rel="canonical" />'):""}function _e(n,e){if(e&&Object(Zn.a)(e).filter((function(n){return n.parentNode===document.head})).forEach((function(n){return document.head.removeChild(n)})),n)return n.map((function(n){var e=document.createElement("meta");return Object.keys(n).forEach((function(t){e.setAttribute(t,n[t])})),document.head.appendChild(e),e}))}function je(n){for(var e=0,t=["name","property","itemprop"];e<t.length;e++){var o=t[e];if(n.hasOwnProperty(o))return n[o]+o}return JSON.stringify(n)}t(227);var Se=t(154),Ae={mounted:function(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:t.n(Se)()((function(){this.setActiveHash()}),300),setActiveHash:function(){for(var n=this,e=[].slice.call(document.querySelectorAll(".sidebar-link")),t=[].slice.call(document.querySelectorAll(".header-anchor")).filter((function(n){return e.some((function(e){return e.hash===n.hash}))})),o=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),r=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),a=window.innerHeight+o,i=0;i<t.length;i++){var s=t[i],l=t[i+1],c=0===i&&0===o||o>=s.parentElement.offsetTop+10&&(!l||o<l.parentElement.offsetTop-10),d=decodeURIComponent(this.$route.hash);if(c&&d!==decodeURIComponent(s.hash)){var u=s;if(a===r)for(var p=i+1;p<t.length;p++)if(d===decodeURIComponent(t[p].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(u.hash),(function(){n.$nextTick((function(){n.$vuepress.$set("disableScrollBehavior",!1)}))}))}}}},beforeDestroy:function(){window.removeEventListener("scroll",this.onScroll)}},Ce=(t(51),t(104)),Ie=t.n(Ce),De={mounted:function(){var n=this;Ie.a.configure({showSpinner:!1}),this.$router.beforeEach((function(n,e,t){n.path===e.path||r.default.component(n.name)||Ie.a.start(),t()})),this.$router.afterEach((function(){Ie.a.done(),n.isSidebarOpen=!1}))}};t(58),t(44),t(79),t(369);function Pe(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}t(102);function ze(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}function Re(n,e,t){return e&&ze(n.prototype,e),t&&ze(n,t),Object.defineProperty(n,"prototype",{writable:!1}),n}t(370);var Oe=function(){function n(){Pe(this,n);this.containerEl=document.getElementById("message-container"),this.containerEl||(this.containerEl=document.createElement("div"),this.containerEl.id="message-container",document.body.appendChild(this.containerEl))}return Re(n,[{key:"show",value:function(n){var e=this,t=n.text,o=void 0===t?"":t,r=n.duration,a=void 0===r?3e3:r,i=document.createElement("div");i.className="message move-in",i.innerHTML='\n      <i style="fill: #06a35a;font-size: 14px;display:inline-flex;align-items: center;">\n        <svg style="fill: #06a35a;font-size: 14px;" t="1572421810237" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2323" width="16" height="16"><path d="M822.811993 824.617989c-83.075838 81.99224-188.546032 124.613757-316.049383 127.86455-122.085362-3.250794-223.943563-45.87231-305.935802-127.86455s-124.613757-184.21164-127.86455-305.935802c3.250794-127.503351 45.87231-232.973545 127.86455-316.049383 81.99224-83.075838 184.21164-126.058554 305.935802-129.309347 127.503351 3.250794 232.973545 46.23351 316.049383 129.309347 83.075838 83.075838 126.058554 188.546032 129.309347 316.049383C949.231746 640.406349 905.887831 742.62575 822.811993 824.617989zM432.716755 684.111464c3.973192 3.973192 8.307584 5.779189 13.364374 6.140388 5.05679 0.361199 9.752381-1.444797 13.364374-5.417989l292.571429-287.514638c3.973192-3.973192 5.779189-8.307584 5.779189-13.364374 0-5.05679-1.805996-9.752381-5.779189-13.364374l1.805996 1.805996c-3.973192-3.973192-8.668783-5.779189-14.086772-6.140388-5.417989-0.361199-10.47478 1.444797-14.809171 5.417989l-264.397884 220.33157c-3.973192 3.250794-8.668783 4.695591-14.447972 4.695591-5.779189 0-10.835979-1.444797-15.53157-3.973192l-94.273016-72.962257c-4.334392-3.250794-9.391182-4.334392-14.447972-3.973192s-9.391182 3.250794-12.641975 7.585185l-2.889594 3.973192c-3.250794 4.334392-4.334392 9.391182-3.973192 14.809171 0.722399 5.417989 2.528395 10.11358 5.779189 14.086772L432.716755 684.111464z" p-id="2324"></path></svg>\n      </i>\n      <div class="text">'.concat(o,"</div>\n    "),this.containerEl.appendChild(i),a>0&&setTimeout((function(){e.close(i)}),a)}},{key:"close",value:function(n){n.className=n.className.replace("move-in",""),n.className+="move-out",n.addEventListener("animationend",(function(){n.remove()}))}}]),n}(),Me={mounted:function(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},updated:function(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},methods:{updateCopy:function(){var n=this;setTimeout((function(){(['div[class*="language-"] pre','div[class*="aside-code"] aside']instanceof Array||Array.isArray(['div[class*="language-"] pre','div[class*="aside-code"] aside']))&&['div[class*="language-"] pre','div[class*="aside-code"] aside'].forEach((function(e){document.querySelectorAll(e).forEach(n.generateCopyButton)}))}),1e3)},generateCopyButton:function(n){var e=this;if(!n.classList.contains("codecopy-enabled")){var t=document.createElement("i");t.className="code-copy",t.innerHTML='<svg  style="color:#aaa;font-size:14px" t="1572422231464" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3201" width="14" height="14"><path d="M866.461538 39.384615H354.461538c-43.323077 0-78.769231 35.446154-78.76923 78.769231v39.384616h472.615384c43.323077 0 78.769231 35.446154 78.769231 78.76923v551.384616h39.384615c43.323077 0 78.769231-35.446154 78.769231-78.769231V118.153846c0-43.323077-35.446154-78.769231-78.769231-78.769231z m-118.153846 275.692308c0-43.323077-35.446154-78.769231-78.76923-78.769231H157.538462c-43.323077 0-78.769231 35.446154-78.769231 78.769231v590.769231c0 43.323077 35.446154 78.769231 78.769231 78.769231h512c43.323077 0 78.769231-35.446154 78.76923-78.769231V315.076923z m-354.461538 137.846154c0 11.815385-7.876923 19.692308-19.692308 19.692308h-157.538461c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h157.538461c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z m157.538461 315.076923c0 11.815385-7.876923 19.692308-19.692307 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h315.076923c11.815385 0 19.692308 7.876923 19.692307 19.692308v39.384615z m78.769231-157.538462c0 11.815385-7.876923 19.692308-19.692308 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h393.846153c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z" p-id="3202"></path></svg>',t.title="Copy to clipboard",t.addEventListener("click",(function(){e.copyToClipboard(n.innerText)})),n.appendChild(t),n.classList.add("codecopy-enabled")}},copyToClipboard:function(n){var e=document.createElement("textarea");e.value=n,e.setAttribute("readonly",""),e.style.position="absolute",e.style.left="-9999px",document.body.appendChild(e);var t=document.getSelection().rangeCount>0&&document.getSelection().getRangeAt(0);e.select(),document.execCommand("copy"),(new Oe).show({text:"复制成功",duration:1e3}),document.body.removeChild(e),t&&(document.getSelection().removeAllRanges(),document.getSelection().addRange(t))}}},Be=(t(144),"auto"),Le="zoom-in",$e="zoom-out",Ne="grab",qe="move";function Fe(n,e,t){var o=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],r={passive:!1};o?n.addEventListener(e,t,r):n.removeEventListener(e,t,r)}function Ge(n,e){if(n){var t=new Image;t.onload=function(){e&&e(t)},t.src=n}}function He(n){return n.dataset.original?n.dataset.original:"A"===n.parentNode.tagName?n.parentNode.getAttribute("href"):null}function Ve(n,e,t){!function(n){var e=Ue,t=We;if(n.transition){var o=n.transition;delete n.transition,n[e]=o}if(n.transform){var r=n.transform;delete n.transform,n[t]=r}}(e);var o=n.style,r={};for(var a in e)t&&(r[a]=o[a]||""),o[a]=e[a];return r}var Ue="transition",We="transform",Ye="transform",Ke="transitionend";var Je=function(){},Qe={enableGrab:!0,preloadImage:!1,closeOnWindowResize:!0,transitionDuration:.4,transitionTimingFunction:"cubic-bezier(0.4, 0, 0, 1)",bgColor:"rgb(255, 255, 255)",bgOpacity:1,scaleBase:1,scaleExtra:.5,scrollThreshold:40,zIndex:998,customSize:null,onOpen:Je,onClose:Je,onGrab:Je,onMove:Je,onRelease:Je,onBeforeOpen:Je,onBeforeClose:Je,onBeforeGrab:Je,onBeforeRelease:Je,onImageLoading:Je,onImageLoaded:Je},Ze={init:function(n){var e,t;e=this,t=n,Object.getOwnPropertyNames(Object.getPrototypeOf(e)).forEach((function(n){e[n]=e[n].bind(t)}))},click:function(n){if(n.preventDefault(),nt(n))return window.open(this.target.srcOriginal||n.currentTarget.src,"_blank");this.shown?this.released?this.close():this.release():this.open(n.currentTarget)},scroll:function(){var n=document.documentElement||document.body.parentNode||document.body,e=window.pageXOffset||n.scrollLeft,t=window.pageYOffset||n.scrollTop;null===this.lastScrollPosition&&(this.lastScrollPosition={x:e,y:t});var o=this.lastScrollPosition.x-e,r=this.lastScrollPosition.y-t,a=this.options.scrollThreshold;(Math.abs(r)>=a||Math.abs(o)>=a)&&(this.lastScrollPosition=null,this.close())},keydown:function(n){(function(n){return"Escape"===(n.key||n.code)||27===n.keyCode})(n)&&(this.released?this.close():this.release(this.close))},mousedown:function(n){if(Xe(n)&&!nt(n)){n.preventDefault();var e=n.clientX,t=n.clientY;this.pressTimer=setTimeout(function(){this.grab(e,t)}.bind(this),200)}},mousemove:function(n){this.released||this.move(n.clientX,n.clientY)},mouseup:function(n){Xe(n)&&!nt(n)&&(clearTimeout(this.pressTimer),this.released?this.close():this.release())},touchstart:function(n){n.preventDefault();var e=n.touches[0],t=e.clientX,o=e.clientY;this.pressTimer=setTimeout(function(){this.grab(t,o)}.bind(this),200)},touchmove:function(n){if(!this.released){var e=n.touches[0],t=e.clientX,o=e.clientY;this.move(t,o)}},touchend:function(n){(function(n){n.targetTouches.length})(n)||(clearTimeout(this.pressTimer),this.released?this.close():this.release())},clickOverlay:function(){this.close()},resizeWindow:function(){this.close()}};function Xe(n){return 0===n.button}function nt(n){return n.metaKey||n.ctrlKey}var et={init:function(n){this.el=document.createElement("div"),this.instance=n,this.parent=document.body,Ve(this.el,{position:"fixed",top:0,left:0,right:0,bottom:0,opacity:0}),this.updateStyle(n.options),Fe(this.el,"click",n.handler.clickOverlay.bind(n))},updateStyle:function(n){Ve(this.el,{zIndex:n.zIndex,backgroundColor:n.bgColor,transition:"opacity\n        "+n.transitionDuration+"s\n        "+n.transitionTimingFunction})},insert:function(){this.parent.appendChild(this.el)},remove:function(){this.parent.removeChild(this.el)},fadeIn:function(){this.el.offsetWidth,this.el.style.opacity=this.instance.options.bgOpacity},fadeOut:function(){this.el.style.opacity=0}},tt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},ot=function(){function n(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}return function(e,t,o){return t&&n(e.prototype,t),o&&n(e,o),e}}(),rt=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o])}return n},at={init:function(n,e){this.el=n,this.instance=e,this.srcThumbnail=this.el.getAttribute("src"),this.srcset=this.el.getAttribute("srcset"),this.srcOriginal=He(this.el),this.rect=this.el.getBoundingClientRect(),this.translate=null,this.scale=null,this.styleOpen=null,this.styleClose=null},zoomIn:function(){var n=this.instance.options,e=n.zIndex,t=n.enableGrab,o=n.transitionDuration,r=n.transitionTimingFunction;this.translate=this.calculateTranslate(),this.scale=this.calculateScale(),this.styleOpen={position:"relative",zIndex:e+1,cursor:t?Ne:$e,transition:Ye+"\n        "+o+"s\n        "+r,transform:"translate3d("+this.translate.x+"px, "+this.translate.y+"px, 0px)\n        scale("+this.scale.x+","+this.scale.y+")",height:this.rect.height+"px",width:this.rect.width+"px"},this.el.offsetWidth,this.styleClose=Ve(this.el,this.styleOpen,!0)},zoomOut:function(){this.el.offsetWidth,Ve(this.el,{transform:"none"})},grab:function(n,e,t){var o=it(),r=o.x-n,a=o.y-e;Ve(this.el,{cursor:qe,transform:"translate3d(\n        "+(this.translate.x+r)+"px, "+(this.translate.y+a)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},move:function(n,e,t){var o=it(),r=o.x-n,a=o.y-e;Ve(this.el,{transition:Ye,transform:"translate3d(\n        "+(this.translate.x+r)+"px, "+(this.translate.y+a)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},restoreCloseStyle:function(){Ve(this.el,this.styleClose)},restoreOpenStyle:function(){Ve(this.el,this.styleOpen)},upgradeSource:function(){if(this.srcOriginal){var n=this.el.parentNode;this.srcset&&this.el.removeAttribute("srcset");var e=this.el.cloneNode(!1);e.setAttribute("src",this.srcOriginal),e.style.position="fixed",e.style.visibility="hidden",n.appendChild(e),setTimeout(function(){this.el.setAttribute("src",this.srcOriginal),n.removeChild(e)}.bind(this),50)}},downgradeSource:function(){this.srcOriginal&&(this.srcset&&this.el.setAttribute("srcset",this.srcset),this.el.setAttribute("src",this.srcThumbnail))},calculateTranslate:function(){var n=it(),e=this.rect.left+this.rect.width/2,t=this.rect.top+this.rect.height/2;return{x:n.x-e,y:n.y-t}},calculateScale:function(){var n=this.el.dataset,e=n.zoomingHeight,t=n.zoomingWidth,o=this.instance.options,r=o.customSize,a=o.scaleBase;if(!r&&e&&t)return{x:t/this.rect.width,y:e/this.rect.height};if(r&&"object"===(void 0===r?"undefined":tt(r)))return{x:r.width/this.rect.width,y:r.height/this.rect.height};var i=this.rect.width/2,s=this.rect.height/2,l=it(),c={x:l.x-i,y:l.y-s},d=c.x/i,u=c.y/s,p=a+Math.min(d,u);if(r&&"string"==typeof r){var m=t||this.el.naturalWidth,g=e||this.el.naturalHeight,h=parseFloat(r)*m/(100*this.rect.width),f=parseFloat(r)*g/(100*this.rect.height);if(p>h||p>f)return{x:h,y:f}}return{x:p,y:p}}};function it(){var n=document.documentElement;return{x:Math.min(n.clientWidth,window.innerWidth)/2,y:Math.min(n.clientHeight,window.innerHeight)/2}}function st(n,e,t){["mousedown","mousemove","mouseup","touchstart","touchmove","touchend"].forEach((function(o){Fe(n,o,e[o],t)}))}var lt=function(){function n(e){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.target=Object.create(at),this.overlay=Object.create(et),this.handler=Object.create(Ze),this.body=document.body,this.shown=!1,this.lock=!1,this.released=!0,this.lastScrollPosition=null,this.pressTimer=null,this.options=rt({},Qe,e),this.overlay.init(this),this.handler.init(this)}return ot(n,[{key:"listen",value:function(n){if("string"==typeof n)for(var e=document.querySelectorAll(n),t=e.length;t--;)this.listen(e[t]);else"IMG"===n.tagName&&(n.style.cursor=Le,Fe(n,"click",this.handler.click),this.options.preloadImage&&Ge(He(n)));return this}},{key:"config",value:function(n){return n?(rt(this.options,n),this.overlay.updateStyle(this.options),this):this.options}},{key:"open",value:function(n){var e=this,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.options.onOpen;if(!this.shown&&!this.lock){var o="string"==typeof n?document.querySelector(n):n;if("IMG"===o.tagName){if(this.options.onBeforeOpen(o),this.target.init(o,this),!this.options.preloadImage){var r=this.target.srcOriginal;null!=r&&(this.options.onImageLoading(o),Ge(r,this.options.onImageLoaded))}this.shown=!0,this.lock=!0,this.target.zoomIn(),this.overlay.insert(),this.overlay.fadeIn(),Fe(document,"scroll",this.handler.scroll),Fe(document,"keydown",this.handler.keydown),this.options.closeOnWindowResize&&Fe(window,"resize",this.handler.resizeWindow);var a=function n(){Fe(o,Ke,n,!1),e.lock=!1,e.target.upgradeSource(),e.options.enableGrab&&st(document,e.handler,!0),t(o)};return Fe(o,Ke,a),this}}}},{key:"close",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onClose;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeClose(t),this.lock=!0,this.body.style.cursor=Be,this.overlay.fadeOut(),this.target.zoomOut(),Fe(document,"scroll",this.handler.scroll,!1),Fe(document,"keydown",this.handler.keydown,!1),this.options.closeOnWindowResize&&Fe(window,"resize",this.handler.resizeWindow,!1);var o=function o(){Fe(t,Ke,o,!1),n.shown=!1,n.lock=!1,n.target.downgradeSource(),n.options.enableGrab&&st(document,n.handler,!1),n.target.restoreCloseStyle(),n.overlay.remove(),e(t)};return Fe(t,Ke,o),this}}},{key:"grab",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onGrab;if(this.shown&&!this.lock){var r=this.target.el;this.options.onBeforeGrab(r),this.released=!1,this.target.grab(n,e,t);var a=function n(){Fe(r,Ke,n,!1),o(r)};return Fe(r,Ke,a),this}}},{key:"move",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onMove;if(this.shown&&!this.lock){this.released=!1,this.body.style.cursor=qe,this.target.move(n,e,t);var r=this.target.el,a=function n(){Fe(r,Ke,n,!1),o(r)};return Fe(r,Ke,a),this}}},{key:"release",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onRelease;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeRelease(t),this.lock=!0,this.body.style.cursor=Be,this.target.restoreOpenStyle();var o=function o(){Fe(t,Ke,o,!1),n.lock=!1,n.released=!0,e(t)};return Fe(t,Ke,o),this}}}]),n}(),ct=".theme-vdoing-content img:not(.no-zoom)",dt=JSON.parse('{"bgColor":"rgba(0,0,0,0.6)"}'),ut=Number("500"),pt=function(){function n(){Pe(this,n),this.instance=new lt(dt)}return Re(n,[{key:"update",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:ct;"undefined"!=typeof window&&this.instance.listen(n)}},{key:"updateDelay",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:ct,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:ut;setTimeout((function(){return n.update(e)}),t)}}]),n}(),mt=[we,Ae,De,Me,{watch:{"$page.path":function(){void 0!==this.$vuepress.zooming&&this.$vuepress.zooming.updateDelay()}},mounted:function(){this.$vuepress.zooming=new pt,this.$vuepress.zooming.updateDelay()}}],gt={name:"GlobalLayout",computed:{layout:function(){var n=this.getLayout();return ve("layout",n),r.default.component(n)}},methods:{getLayout:function(){if(this.$page.path){var n=this.$page.frontmatter.layout;return n&&(this.$vuepress.getLayoutAsyncComponent(n)||this.$vuepress.getVueComponent(n))?n:"Layout"}return"NotFound"}}},ht=t(11),ft=Object(ht.a)(gt,(function(){var n=this.$createElement;return(this._self._c||n)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;!function(n,e,t){var o;switch(e){case"components":n[e]||(n[e]={}),Object.assign(n[e],t);break;case"mixins":n[e]||(n[e]=[]),(o=n[e]).push.apply(o,Object(Zn.a)(t));break;default:throw new Error("Unknown option name.")}}(ft,"mixins",mt);var bt,vt=[{name:"v-227d8144",path:"/front/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-227d8144").then(t)}},{path:"/front/index.html",redirect:"/front/"},{path:"/00.目录页/00.导航栏 - 目录页/00.前端 - 知识体系.html",redirect:"/front/"},{name:"v-beaa583c",path:"/projects/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-beaa583c").then(t)}},{path:"/projects/index.html",redirect:"/projects/"},{path:"/00.目录页/00.导航栏 - 目录页/15.项目工程 - 知识体系.html",redirect:"/projects/"},{name:"v-ebe91cba",path:"/html/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-ebe91cba").then(t)}},{path:"/html/index.html",redirect:"/html/"},{path:"/00.目录页/10.前端 - 目录页/01.HTML - 知识体系.html",redirect:"/html/"},{name:"v-465f9570",path:"/tool/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-465f9570").then(t)}},{path:"/tool/index.html",redirect:"/tool/"},{path:"/00.目录页/00.导航栏 - 目录页/05.工具 - 知识体系.html",redirect:"/tool/"},{name:"v-860de4b6",path:"/css/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-860de4b6").then(t)}},{path:"/css/index.html",redirect:"/css/"},{path:"/00.目录页/10.前端 - 目录页/05.CSS - 知识体系.html",redirect:"/css/"},{name:"v-a3fb0c3a",path:"/javascript/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-a3fb0c3a").then(t)}},{path:"/javascript/index.html",redirect:"/javascript/"},{path:"/00.目录页/10.前端 - 目录页/10.JavaScript - 知识体系.html",redirect:"/javascript/"},{name:"v-6fe0115b",path:"/react/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-6fe0115b").then(t)}},{path:"/react/index.html",redirect:"/react/"},{path:"/00.目录页/10.前端 - 目录页/15.React - 知识体系.html",redirect:"/react/"},{name:"v-b19543ba",path:"/vue2/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-b19543ba").then(t)}},{path:"/vue2/index.html",redirect:"/vue2/"},{path:"/00.目录页/10.前端 - 目录页/20.Vue2 - 知识体系.html",redirect:"/vue2/"},{name:"v-6f9688f8",path:"/vue3/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-6f9688f8").then(t)}},{path:"/vue3/index.html",redirect:"/vue3/"},{path:"/00.目录页/10.前端 - 目录页/25.Vue3 - 知识体系 copy.html",redirect:"/vue3/"},{name:"v-40d78add",path:"/maven/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-40d78add").then(t)}},{path:"/maven/index.html",redirect:"/maven/"},{path:"/00.目录页/20.工具 - 目录页/01.Maven - 知识体系.html",redirect:"/maven/"},{name:"v-5da5b86d",path:"/git/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-5da5b86d").then(t)}},{path:"/git/index.html",redirect:"/git/"},{path:"/00.目录页/20.工具 - 目录页/02.Git - 知识体系.html",redirect:"/git/"},{name:"v-d573b61a",path:"/linux/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-d573b61a").then(t)}},{path:"/linux/index.html",redirect:"/linux/"},{path:"/00.目录页/20.工具 - 目录页/03.Linux - 知识体系.html",redirect:"/linux/"},{name:"v-57eee1f1",path:"/docker/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-57eee1f1").then(t)}},{path:"/docker/index.html",redirect:"/docker/"},{path:"/00.目录页/20.工具 - 目录页/04.Docker - 知识体系.html",redirect:"/docker/"},{name:"v-36ea8070",path:"/html/test/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-36ea8070").then(t)}},{path:"/html/test/index.html",redirect:"/html/test/"},{path:"/10.前端/05.HTML/00.HTML- 测试.html",redirect:"/html/test/"},{name:"v-a32772ac",path:"/css/test/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-a32772ac").then(t)}},{path:"/css/test/index.html",redirect:"/css/test/"},{path:"/10.前端/10.CSS/00.CSS- 测试.html",redirect:"/css/test/"},{name:"v-7e20813b",path:"/javascript/test/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-7e20813b").then(t)}},{path:"/javascript/test/index.html",redirect:"/javascript/test/"},{path:"/10.前端/15.JavaScript/00.javaScript - 测试.html",redirect:"/javascript/test/"},{name:"v-38ba7828",path:"/react/routes/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-38ba7828").then(t)}},{path:"/react/routes/index.html",redirect:"/react/routes/"},{path:"/10.前端/50.React/05.React - 路由.html",redirect:"/react/routes/"},{name:"v-24f96e3c",path:"/react/basics/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-24f96e3c").then(t)}},{path:"/react/basics/index.html",redirect:"/react/basics/"},{path:"/10.前端/50.React/01.React - 基础与核心.html",redirect:"/react/basics/"},{name:"v-ff64be9e",path:"/react/scaffolding/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-ff64be9e").then(t)}},{path:"/react/scaffolding/index.html",redirect:"/react/scaffolding/"},{path:"/10.前端/50.React/03.React - 脚手架及使用.html",redirect:"/react/scaffolding/"},{name:"v-c5d3adea",path:"/react/redux/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-c5d3adea").then(t)}},{path:"/react/redux/index.html",redirect:"/react/redux/"},{path:"/10.前端/50.React/07.React - Redux.html",redirect:"/react/redux/"},{name:"v-64b2e1b7",path:"/react/function/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-64b2e1b7").then(t)}},{path:"/react/function/index.html",redirect:"/react/function/"},{path:"/10.前端/50.React/09.React - 函数类型.html",redirect:"/react/function/"},{name:"v-42188323",path:"/react/advanced-knowledge/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-42188323").then(t)}},{path:"/react/advanced-knowledge/index.html",redirect:"/react/advanced-knowledge/"},{path:"/10.前端/50.React/11.React - 进阶知识.html",redirect:"/react/advanced-knowledge/"},{name:"v-2b466bca",path:"/navigation/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-2b466bca").then(t)}},{path:"/navigation/index.html",redirect:"/navigation/"},{path:"/01.导航站.html",redirect:"/navigation/"},{name:"v-1c870c74",path:"/react/parent-circular/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-1c870c74").then(t)}},{path:"/react/parent-circular/index.html",redirect:"/react/parent-circular/"},{path:"/10.前端/50.React/13.React - 父子传值与循环key.html",redirect:"/react/parent-circular/"},{name:"v-7daf4bbf",path:"/vue2/test/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-7daf4bbf").then(t)}},{path:"/vue2/test/index.html",redirect:"/vue2/test/"},{path:"/10.前端/55.Vue2/00.Vue2 - 测试.html",redirect:"/vue2/test/"},{name:"v-e26627e2",path:"/vue3/test/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-e26627e2").then(t)}},{path:"/vue3/test/index.html",redirect:"/vue3/test/"},{path:"/10.前端/60.Vue3/00.Vue3 - 测试.html",redirect:"/vue3/test/"},{name:"v-48b83d41",path:"/maven/basics/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-48b83d41").then(t)}},{path:"/maven/basics/index.html",redirect:"/maven/basics/"},{path:"/40.工具/10.版本管理 - Maven/01.Maven - 基础.html",redirect:"/maven/basics/"},{name:"v-499a927d",path:"/maven/advanced/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-499a927d").then(t)}},{path:"/maven/advanced/index.html",redirect:"/maven/advanced/"},{path:"/40.工具/10.版本管理 - Maven/03.Maven - 进阶.html",redirect:"/maven/advanced/"},{name:"v-18d9c242",path:"/git/introduce/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-18d9c242").then(t)}},{path:"/git/introduce/index.html",redirect:"/git/introduce/"},{path:"/40.工具/20.开发管理 - Git/01.Git - 介绍与安装.html",redirect:"/git/introduce/"},{name:"v-a9f16054",path:"/git/common-commands/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-a9f16054").then(t)}},{path:"/git/common-commands/index.html",redirect:"/git/common-commands/"},{path:"/40.工具/20.开发管理 - Git/03.Git - 常用命令.html",redirect:"/git/common-commands/"},{name:"v-7239a90e",path:"/git/basic-principles/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-7239a90e").then(t)}},{path:"/git/basic-principles/index.html",redirect:"/git/basic-principles/"},{path:"/40.工具/20.开发管理 - Git/05.Git - 基本原理.html",redirect:"/git/basic-principles/"},{name:"v-831f05e0",path:"/git/ssh-login/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-831f05e0").then(t)}},{path:"/git/ssh-login/index.html",redirect:"/git/ssh-login/"},{path:"/40.工具/20.开发管理 - Git/07.Git - SSH免密登录.html",redirect:"/git/ssh-login/"},{name:"v-df1f8b60",path:"/git/idea/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-df1f8b60").then(t)}},{path:"/git/idea/index.html",redirect:"/git/idea/"},{path:"/40.工具/20.开发管理 - Git/09.Git - IDEA集成.html",redirect:"/git/idea/"},{name:"v-766563ae",path:"/git/built-code-platform/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-766563ae").then(t)}},{path:"/git/built-code-platform/index.html",redirect:"/git/built-code-platform/"},{path:"/40.工具/20.开发管理 - Git/11.Git - 自建代码托管平台.html",redirect:"/git/built-code-platform/"},{name:"v-67e2039b",path:"/git/commit-emo/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-67e2039b").then(t)}},{path:"/git/commit-emo/index.html",redirect:"/git/commit-emo/"},{path:"/40.工具/20.开发管理 - Git/15.Git - Commit常用表情.html",redirect:"/git/commit-emo/"},{name:"v-30287b26",path:"/linux/test/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-30287b26").then(t)}},{path:"/linux/test/index.html",redirect:"/linux/test/"},{path:"/40.工具/30.操作系统 - Linux/00.Linux - 测试.html",redirect:"/linux/test/"},{name:"v-96dabd4e",path:"/docker/introduce/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-96dabd4e").then(t)}},{path:"/docker/introduce/index.html",redirect:"/docker/introduce/"},{path:"/40.工具/40.容器部署 - Docker/03.Docker - 介绍.html",redirect:"/docker/introduce/"},{name:"v-7c8ad7a7",path:"/docker/install/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-7c8ad7a7").then(t)}},{path:"/docker/install/index.html",redirect:"/docker/install/"},{path:"/40.工具/40.容器部署 - Docker/06.Docker - 安装.html",redirect:"/docker/install/"},{name:"v-a52eb068",path:"/docker/images/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-a52eb068").then(t)}},{path:"/docker/images/index.html",redirect:"/docker/images/"},{path:"/40.工具/40.容器部署 - Docker/11.Docker - 镜像原理.html",redirect:"/docker/images/"},{name:"v-16e1320d",path:"/docker/commands/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-16e1320d").then(t)}},{path:"/docker/commands/index.html",redirect:"/docker/commands/"},{path:"/40.工具/40.容器部署 - Docker/09.Docker - 常用命令.html",redirect:"/docker/commands/"},{name:"v-0669d78c",path:"/docker/network/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-0669d78c").then(t)}},{path:"/docker/network/index.html",redirect:"/docker/network/"},{path:"/40.工具/40.容器部署 - Docker/13.Docker - 网络网桥.html",redirect:"/docker/network/"},{name:"v-0dfacdc5",path:"/docker/volume/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-0dfacdc5").then(t)}},{path:"/docker/volume/index.html",redirect:"/docker/volume/"},{path:"/40.工具/40.容器部署 - Docker/15.Docker - 数据卷.html",redirect:"/docker/volume/"},{name:"v-2fbe7a7e",path:"/dokcer/software-install/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-2fbe7a7e").then(t)}},{path:"/dokcer/software-install/index.html",redirect:"/dokcer/software-install/"},{path:"/40.工具/40.容器部署 - Docker/17.Docker - 软件安装.html",redirect:"/dokcer/software-install/"},{name:"v-056de73c",path:"/docker/dockerfile/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-056de73c").then(t)}},{path:"/docker/dockerfile/index.html",redirect:"/docker/dockerfile/"},{path:"/40.工具/40.容器部署 - Docker/19.Docker - Dockerfile.html",redirect:"/docker/dockerfile/"},{name:"v-591520b0",path:"/docker/compose/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-591520b0").then(t)}},{path:"/docker/compose/index.html",redirect:"/docker/compose/"},{path:"/40.工具/40.容器部署 - Docker/21.Docker - Compose.html",redirect:"/docker/compose/"},{name:"v-5933aeef",path:"/docker/maven-plugin/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-5933aeef").then(t)}},{path:"/docker/maven-plugin/index.html",redirect:"/docker/maven-plugin/"},{path:"/40.工具/40.容器部署 - Docker/23.Docker - Maven插件.html",redirect:"/docker/maven-plugin/"},{name:"v-eb6c7c6e",path:"/friends/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-eb6c7c6e").then(t)}},{path:"/friends/index.html",redirect:"/friends/"},{path:"/55.更多/99.友情连接.html",redirect:"/friends/"},{name:"v-79a818aa",path:"/whells-use/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-79a818aa").then(t)}},{path:"/whells-use/index.html",redirect:"/whells-use/"},{path:"/57.轮子工具/05.工具使用/01.工具介绍.html",redirect:"/whells-use/"},{name:"v-6b4d5401",path:"/shields/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-6b4d5401").then(t)}},{path:"/shields/index.html",redirect:"/shields/"},{path:"/57.轮子工具/05.工具使用/03.Shields - 徽章.html",redirect:"/shields/"},{name:"v-5341d2e1",path:"/dbeaver/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-5341d2e1").then(t)}},{path:"/dbeaver/index.html",redirect:"/dbeaver/"},{path:"/57.轮子工具/05.工具使用/05.DBeaver - SQL连接器.html",redirect:"/dbeaver/"},{name:"v-2a51247f",path:"/log4j/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-2a51247f").then(t)}},{path:"/log4j/index.html",redirect:"/log4j/"},{path:"/57.轮子工具/05.工具使用/07.Log4j - 配置.html",redirect:"/log4j/"},{name:"v-da1689fc",path:"/whell/web/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-da1689fc").then(t)}},{path:"/whell/web/index.html",redirect:"/whell/web/"},{path:"/57.轮子工具/75.收藏夹/01.网站轮子.html",redirect:"/whell/web/"},{name:"v-1f2c2a98",path:"/whell/front/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-1f2c2a98").then(t)}},{path:"/whell/front/index.html",redirect:"/whell/front/"},{path:"/57.轮子工具/75.收藏夹/02.前端轮子.html",redirect:"/whell/front/"},{name:"v-b4fa01ca",path:"/plugins/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-b4fa01ca").then(t)}},{path:"/plugins/index.html",redirect:"/plugins/"},{path:"/57.轮子工具/75.收藏夹/03.插件选择.html",redirect:"/plugins/"},{name:"v-14f2c9c7",path:"/projects/intro/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-14f2c9c7").then(t)}},{path:"/projects/intro/index.html",redirect:"/projects/intro/"},{path:"/59.项目工程/04.tbeam/01.项目介绍.html",redirect:"/projects/intro/"},{name:"v-77493b55",path:"/advue3/table/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-77493b55").then(t)}},{path:"/advue3/table/index.html",redirect:"/advue3/table/"},{path:"/59.项目工程/04.tbeam/02.ADVue3的表格.html",redirect:"/advue3/table/"},{name:"v-2438b6f8",path:"/advue3/skill/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-2438b6f8").then(t)}},{path:"/advue3/skill/index.html",redirect:"/advue3/skill/"},{path:"/59.项目工程/04.tbeam/06.tbeam学到的技巧.html",redirect:"/advue3/skill/"},{name:"v-2ba03862",path:"/advue3/add/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-2ba03862").then(t)}},{path:"/advue3/add/index.html",redirect:"/advue3/add/"},{path:"/59.项目工程/04.tbeam/03.ADVue3的新增.html",redirect:"/advue3/add/"},{name:"v-beb409b2",path:"/rrs/deploy/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-beb409b2").then(t)}},{path:"/rrs/deploy/index.html",redirect:"/rrs/deploy/"},{path:"/59.项目工程/05.报修系统/04.报修系统 - 部署.html",redirect:"/rrs/deploy/"},{name:"v-179b3e7c",path:"/rrs/details/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-179b3e7c").then(t)}},{path:"/rrs/details/index.html",redirect:"/rrs/details/"},{path:"/59.项目工程/05.报修系统/02.报修系统 - 详解.html",redirect:"/rrs/details/"},{name:"v-7a9069fa",path:"/rrs/tomcat/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-7a9069fa").then(t)}},{path:"/rrs/tomcat/index.html",redirect:"/rrs/tomcat/"},{path:"/59.项目工程/05.报修系统/06.报修系统 - Tomcat问题.html",redirect:"/rrs/tomcat/"},{name:"v-1a9f2e82",path:"/yonyou/configuration-node/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-1a9f2e82").then(t)}},{path:"/yonyou/configuration-node/index.html",redirect:"/yonyou/configuration-node/"},{path:"/59.项目工程/10.yonyou/01.yonyou - 节点配置.html",redirect:"/yonyou/configuration-node/"},{name:"v-91fa07b2",path:"/yonyou/ncc-metadata/basic/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-91fa07b2").then(t)}},{path:"/yonyou/ncc-metadata/basic/index.html",redirect:"/yonyou/ncc-metadata/basic/"},{path:"/59.项目工程/10.yonyou/03.YonYou - NCC节点开发.html",redirect:"/yonyou/ncc-metadata/basic/"},{name:"v-77495e9b",path:"/about/me/introduce/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-77495e9b").then(t)}},{path:"/about/me/introduce/index.html",redirect:"/about/me/introduce/"},{path:"/80.关于/03.关于 - 自我/02.自我 - 介绍.html",redirect:"/about/me/introduce/"},{name:"v-d6614562",path:"/yonyou/client-development/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-d6614562").then(t)}},{path:"/yonyou/client-development/index.html",redirect:"/yonyou/client-development/"},{path:"/59.项目工程/10.yonyou/07.YonYou - Client端开发.html",redirect:"/yonyou/client-development/"},{name:"v-77e1fd86",path:"/about/list/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-77e1fd86").then(t)}},{path:"/about/list/index.html",redirect:"/about/list/"},{path:"/80.关于/03.关于 - 自我/05.自我 - 清单.html",redirect:"/about/list/"},{name:"v-f0f781e2",path:"/yonyou/development-process/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-f0f781e2").then(t)}},{path:"/yonyou/development-process/index.html",redirect:"/yonyou/development-process/"},{path:"/59.项目工程/10.yonyou/05.YonYou - 开发流程.html",redirect:"/yonyou/development-process/"},{name:"v-07031292",path:"/about/learn-line/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-07031292").then(t)}},{path:"/about/learn-line/index.html",redirect:"/about/learn-line/"},{path:"/80.关于/03.关于 - 自我/07.自我 - 学习线.html",redirect:"/about/learn-line/"},{name:"v-79bfbfb5",path:"/about/website/introduce/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-79bfbfb5").then(t)}},{path:"/about/website/introduce/index.html",redirect:"/about/website/introduce/"},{path:"/80.关于/06.关于 - 本站/01.本站 - 介绍.html",redirect:"/about/website/introduce/"},{name:"v-8acbb556",path:"/about/qin-yu/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-8acbb556").then(t)}},{path:"/about/qin-yu/index.html",redirect:"/about/qin-yu/"},{path:"/80.关于/03.关于 - 自我/09.自我 - 尊贵公子.html",redirect:"/about/qin-yu/"},{name:"v-5f8704ae",path:"/about/liang-shi-bo/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-5f8704ae").then(t)}},{path:"/about/liang-shi-bo/index.html",redirect:"/about/liang-shi-bo/"},{path:"/80.关于/03.关于 - 自我/11.自我 - 温润少年.html",redirect:"/about/liang-shi-bo/"},{name:"v-7f551c36",path:"/about/website/plan/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-7f551c36").then(t)}},{path:"/about/website/plan/index.html",redirect:"/about/website/plan/"},{path:"/80.关于/06.关于 - 本站/02.本站 - 规划.html",redirect:"/about/website/plan/"},{name:"v-1c79a5da",path:"/about/website/build/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-1c79a5da").then(t)}},{path:"/about/website/build/index.html",redirect:"/about/website/build/"},{path:"/80.关于/06.关于 - 本站/05.本站 - 搭建.html",redirect:"/about/website/build/"},{name:"v-0a6e622c",path:"/about/website/theme/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-0a6e622c").then(t)}},{path:"/about/website/theme/index.html",redirect:"/about/website/theme/"},{path:"/80.关于/06.关于 - 本站/07.本站 - 主题.html",redirect:"/about/website/theme/"},{name:"v-389f15d1",path:"/about/website/deploy/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-389f15d1").then(t)}},{path:"/about/website/deploy/index.html",redirect:"/about/website/deploy/"},{path:"/80.关于/06.关于 - 本站/10.本站 - 网站部署.html",redirect:"/about/website/deploy/"},{name:"v-9ebe1e58",path:"/about/website/server/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-9ebe1e58").then(t)}},{path:"/about/website/server/index.html",redirect:"/about/website/server/"},{path:"/80.关于/06.关于 - 本站/12.本站 - 服务器部署.html",redirect:"/about/website/server/"},{name:"v-179fa447",path:"/about/website/comment/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-179fa447").then(t)}},{path:"/about/website/comment/index.html",redirect:"/about/website/comment/"},{path:"/80.关于/06.关于 - 本站/14.本站 - 评论模块.html",redirect:"/about/website/comment/"},{name:"v-6b5d097e",path:"/about/website/style/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-6b5d097e").then(t)}},{path:"/about/website/style/index.html",redirect:"/about/website/style/"},{path:"/80.关于/06.关于 - 本站/18.本站 - 自定义样式.html",redirect:"/about/website/style/"},{name:"v-ff6c101a",path:"/about/website/lastReading/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-ff6c101a").then(t)}},{path:"/about/website/lastReading/index.html",redirect:"/about/website/lastReading/"},{path:"/80.关于/06.关于 - 本站/20.本站 - 记录阅读文章模块.html",redirect:"/about/website/lastReading/"},{name:"v-14248852",path:"/about/website/private/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-14248852").then(t)}},{path:"/about/website/private/index.html",redirect:"/about/website/private/"},{path:"/80.关于/06.关于 - 本站/22.本站 - 私密文章模块.html",redirect:"/about/website/private/"},{name:"v-0973ffba",path:"/about/website/info/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-0973ffba").then(t)}},{path:"/about/website/info/index.html",redirect:"/about/website/info/"},{path:"/80.关于/06.关于 - 本站/16.本站 - 站点信息模块.html",redirect:"/about/website/info/"},{name:"v-adeda9ba",path:"/about/website/tools/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-adeda9ba").then(t)}},{path:"/about/website/tools/index.html",redirect:"/about/website/tools/"},{path:"/80.关于/06.关于 - 本站/24.本站 - 导航站模块.html",redirect:"/about/website/tools/"},{name:"v-4e3afc59",path:"/about/website/index-big-img/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-4e3afc59").then(t)}},{path:"/about/website/index-big-img/index.html",redirect:"/about/website/index-big-img/"},{path:"/80.关于/06.关于 - 本站/26.本站 - 首页大图模块.html",redirect:"/about/website/index-big-img/"},{name:"v-76763ca0",path:"/about/website/code-block-hidden/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-76763ca0").then(t)}},{path:"/about/website/code-block-hidden/index.html",redirect:"/about/website/code-block-hidden/"},{path:"/80.关于/06.关于 - 本站/28.本站 - 代码块隐藏模块.html",redirect:"/about/website/code-block-hidden/"},{name:"v-546f6261",path:"/about/website/global-tip/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-546f6261").then(t)}},{path:"/about/website/global-tip/index.html",redirect:"/about/website/global-tip/"},{path:"/80.关于/06.关于 - 本站/30.本站 - 全局时间提示模块.html",redirect:"/about/website/global-tip/"},{name:"v-1afd471e",path:"/about/index/download/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-1afd471e").then(t)}},{path:"/about/index/download/index.html",redirect:"/about/index/download/"},{path:"/80.关于/08.关于 - 首页/04.首页 - 下载站点.html",redirect:"/about/index/download/"},{name:"v-35bc4ad4",path:"/about/index/younngkbt/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-35bc4ad4").then(t)}},{path:"/about/index/younngkbt/index.html",redirect:"/about/index/younngkbt/"},{path:"/80.关于/08.关于 - 首页/02.首页 - 部署.html",redirect:"/about/index/younngkbt/"},{name:"v-223225e0",path:"/about/mdskill/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-223225e0").then(t)}},{path:"/about/mdskill/index.html",redirect:"/about/mdskill/"},{path:"/80.关于/09.关于 - 技巧/02.技巧 - 笔记.html",redirect:"/about/mdskill/"},{name:"v-1a3d1758",path:"/about/typesetting/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-1a3d1758").then(t)}},{path:"/about/typesetting/index.html",redirect:"/about/typesetting/"},{path:"/80.关于/09.关于 - 技巧/04.技巧 - 排版.html",redirect:"/about/typesetting/"},{name:"v-8cf140f8",path:"/posts/category/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-8cf140f8").then(t)}},{path:"/posts/category/index.html",redirect:"/posts/category/"},{path:"/80.关于/12.关于 - 随笔/01.随笔 - 目录.html",redirect:"/posts/category/"},{name:"v-3fbab6c4",path:"/private/test1/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-3fbab6c4").then(t)}},{path:"/private/test1/index.html",redirect:"/private/test1/"},{path:"/90.私密文章测试/01.全局私密文章测试.html",redirect:"/private/test1/"},{name:"v-fb737192",path:"/private/test2/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-fb737192").then(t)}},{path:"/private/test2/index.html",redirect:"/private/test2/"},{path:"/90.私密文章测试/03.单个私密文章测试.html",redirect:"/private/test2/"},{name:"v-3006ad1e",path:"/message-area/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-3006ad1e").then(t)}},{path:"/message-area/index.html",redirect:"/message-area/"},{path:"/90.本站 - 留言区.html",redirect:"/message-area/"},{name:"v-0f731a6a",path:"/archives/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-0f731a6a").then(t)}},{path:"/archives/index.html",redirect:"/archives/"},{path:"/@pages/archivesPage.html",redirect:"/archives/"},{name:"v-01cbf25d",path:"/vdoing/login/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-01cbf25d").then(t)}},{path:"/vdoing/login/index.html",redirect:"/vdoing/login/"},{path:"/99.Vdoing私密文章登录.html",redirect:"/vdoing/login/"},{name:"v-43f170d4",path:"/github/index/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-43f170d4").then(t)}},{path:"/github/index/index.html",redirect:"/github/index/"},{path:"/_posts/技术随笔/Github - 好看的主页.html",redirect:"/github/index/"},{name:"v-48d27e4b",path:"/tags/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-48d27e4b").then(t)}},{path:"/tags/index.html",redirect:"/tags/"},{path:"/@pages/tagsPage.html",redirect:"/tags/"},{name:"v-7e05f2a4",path:"/maven/upload/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-7e05f2a4").then(t)}},{path:"/maven/upload/index.html",redirect:"/maven/upload/"},{path:"/_posts/技术随笔/Maven - 上传中央仓库.html",redirect:"/maven/upload/"},{name:"v-4f99d19e",path:"/360/system/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-4f99d19e").then(t)}},{path:"/360/system/index.html",redirect:"/360/system/"},{path:"/_posts/技术随笔/技术随笔 - 360天擎关闭.html",redirect:"/360/system/"},{name:"v-0cf710d9",path:"/java/d/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-0cf710d9").then(t)}},{path:"/java/d/index.html",redirect:"/java/d/"},{path:"/_posts/技术随笔/技术随笔 - Java启动的-D参数.html",redirect:"/java/d/"},{name:"v-1e3bb131",path:"/domain/name/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-1e3bb131").then(t)}},{path:"/domain/name/index.html",redirect:"/domain/name/"},{path:"/_posts/技术随笔/技术随笔 - 域名解析.html",redirect:"/domain/name/"},{name:"v-4f4181da",path:"/live-posts/habit/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-4f4181da").then(t)}},{path:"/live-posts/habit/index.html",redirect:"/live-posts/habit/"},{path:"/_posts/生活随笔/生活随笔 - 习惯.html",redirect:"/live-posts/habit/"},{name:"v-2c944259",path:"/live-posts/beautiful-words/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-2c944259").then(t)}},{path:"/live-posts/beautiful-words/index.html",redirect:"/live-posts/beautiful-words/"},{path:"/_posts/生活随笔/生活随笔 - 美词.html",redirect:"/live-posts/beautiful-words/"},{name:"v-10497712",path:"/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-10497712").then(t)}},{path:"/index.html",redirect:"/"},{name:"v-23695b2b",path:"/categories/",component:ft,beforeEnter:function(n,e,t){be("Layout","v-23695b2b").then(t)}},{path:"/categories/index.html",redirect:"/categories/"},{path:"/@pages/categoriesPage.html",redirect:"/categories/"},{path:"*",component:ft}],yt={title:"",description:"",base:"/",headTags:[["link",{rel:"shortcut icon",href:"/img/logo.png"}],["link",{rel:"stylesheet",href:"//at.alicdn.com/t/font_3114978_qe0b39no76.css"}],["meta",{name:"referrer",content:"no-referrer-when-downgrade"}],["noscript",{},'<meta http-equiv="refresh" content="0; url=https://www.youngkbt.cn/noscript/"><style>.theme-vdoing-content { display:none }'],["meta",{name:"keywords",content:"前端博客,个人技术博客,前端,前端开发,前端框架,web前端,前端面试题,技术文档,学习,面试,JavaScript,js,ES6,TypeScript,vue,python,css3,html5,Node,git,github,markdown"}],["meta",{name:"theme-color",content:"#11a8cd"}],["script",{src:"https://cdn.jsdelivr.net/npm/twikoo@1.4.18/dist/twikoo.all.min.js"}],["script",{},'var _hmt = _hmt || [];\n          (function() {\n            var hm = document.createElement("script");\n            hm.src = "https://hm.baidu.com/hm.js?267c5680c2ffb468ca29c45ffe6801da"; \n            var s = document.getElementsByTagName("script")[0];\n            s.parentNode.insertBefore(hm, s);\n          })();\n          ']],pages:[{title:"前端 - 知识体系",frontmatter:{pageComponent:{name:"Catalogue",data:{key:"10.前端",imgUrl:"/img/index/front.png",description:"JavaScript、ES6、Vue 框架等前端技术。"}},title:"前端 - 知识体系",date:"2021-10-21T16:49:31.000Z",permalink:"/front/",sidebar:!1,article:!1,comment:!1,editLink:!1,readingShow:"top"},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/00.%E5%AF%BC%E8%88%AA%E6%A0%8F%20-%20%E7%9B%AE%E5%BD%95%E9%A1%B5/00.%E5%89%8D%E7%AB%AF%20-%20%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB.html",relativePath:"00.目录页/00.导航栏 - 目录页/00.前端 - 知识体系.md",key:"v-227d8144",path:"/front/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/04/05, 19:18:42"},{title:"项目工程 - 知识体系",frontmatter:{pageComponent:{name:"Catalogue",data:{path:"59.项目工程",imgUrl:"/img/index/front.png",description:"一些项目的经验以及遇到项目的问题与解决过程。"}},title:"项目工程 - 知识体系",date:"2021-10-28T14:29:27.000Z",permalink:"/projects/",sidebar:!1,article:!1,comment:!1,editLink:!1,readingShow:"top"},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/00.%E5%AF%BC%E8%88%AA%E6%A0%8F%20-%20%E7%9B%AE%E5%BD%95%E9%A1%B5/15.%E9%A1%B9%E7%9B%AE%E5%B7%A5%E7%A8%8B%20-%20%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB.html",relativePath:"00.目录页/00.导航栏 - 目录页/15.项目工程 - 知识体系.md",key:"v-beaa583c",path:"/projects/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/04/05, 19:18:42"},{title:"HTML - 知识体系",frontmatter:{pageComponent:{name:"Catalogue",data:{path:"10.前端/05.HTML",imgUrl:"/img/index/front.png",description:null}},title:"HTML - 知识体系",date:"2021-11-25T19:38:21.000Z",permalink:"/html/",sidebar:!1,article:!1,comment:!1,editLink:!1,readingShow:"top"},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/10.%E5%89%8D%E7%AB%AF%20-%20%E7%9B%AE%E5%BD%95%E9%A1%B5/01.HTML%20-%20%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB.html",relativePath:"00.目录页/10.前端 - 目录页/01.HTML - 知识体系.md",key:"v-ebe91cba",path:"/html/",headersStr:null,content:"提示\n\n笔记正在更新的路上... 😄",normalizedContent:"提示\n\n笔记正在更新的路上... 😄",charsets:{cjk:!0},lastUpdated:"2022/04/07, 12:28:10"},{title:"工具 - 知识体系",frontmatter:{pageComponent:{name:"Catalogue",data:{path:"40.工具",imgUrl:"/img/index/front.png",description:"编程常用管理工具，包括部署工具等相关知识。"}},title:"工具 - 知识体系",date:"2021-10-21T16:48:47.000Z",permalink:"/tool/",sidebar:!1,article:!1,comment:!1,editLink:!1,readingShow:"top"},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/00.%E5%AF%BC%E8%88%AA%E6%A0%8F%20-%20%E7%9B%AE%E5%BD%95%E9%A1%B5/05.%E5%B7%A5%E5%85%B7%20-%20%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB.html",relativePath:"00.目录页/00.导航栏 - 目录页/05.工具 - 知识体系.md",key:"v-465f9570",path:"/tool/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/04/05, 19:18:42"},{title:"CSS - 知识体系",frontmatter:{pageComponent:{name:"Catalogue",data:{path:"10.前端/10.CSS",imgUrl:"/img/index/front.png",description:"设计模式 - 知识体系"}},title:"CSS - 知识体系",date:"2021-11-25T19:41:40.000Z",permalink:"/css/",sidebar:!1,article:!1,comment:!1,editLink:!1,readingShow:"top"},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/10.%E5%89%8D%E7%AB%AF%20-%20%E7%9B%AE%E5%BD%95%E9%A1%B5/05.CSS%20-%20%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB.html",relativePath:"00.目录页/10.前端 - 目录页/05.CSS - 知识体系.md",key:"v-860de4b6",path:"/css/",headersStr:null,content:"提示\n\n笔记正在更新的路上... 😄",normalizedContent:"提示\n\n笔记正在更新的路上... 😄",charsets:{cjk:!0},lastUpdated:"2022/04/07, 12:28:10"},{title:"JavaScript - 知识体系",frontmatter:{pageComponent:{name:"Catalogue",data:{path:"10.前端/15.JavaScript",imgUrl:"/img/index/front.png",description:"JavaScript - 知识体系"}},title:"JavaScript - 知识体系",date:"2021-11-25T19:39:12.000Z",permalink:"/javascript/",sidebar:!1,article:!1,comment:!1,editLink:!1,readingShow:"top"},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/10.%E5%89%8D%E7%AB%AF%20-%20%E7%9B%AE%E5%BD%95%E9%A1%B5/10.JavaScript%20-%20%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB.html",relativePath:"00.目录页/10.前端 - 目录页/10.JavaScript - 知识体系.md",key:"v-a3fb0c3a",path:"/javascript/",headersStr:null,content:"提示\n\n笔记正在更新的路上... 😄",normalizedContent:"提示\n\n笔记正在更新的路上... 😄",charsets:{cjk:!0},lastUpdated:"2022/04/07, 12:28:10"},{title:"React - 知识体系",frontmatter:{pageComponent:{name:"Catalogue",data:{path:"10.前端/50.React",imgUrl:"/img/index/front.png",description:"React - 知识体系"}},title:"React - 知识体系",date:"2021-11-25T19:40:14.000Z",permalink:"/react/",sidebar:!1,article:!1,comment:!1,editLink:!1,readingShow:"top"},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/10.%E5%89%8D%E7%AB%AF%20-%20%E7%9B%AE%E5%BD%95%E9%A1%B5/15.React%20-%20%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB.html",relativePath:"00.目录页/10.前端 - 目录页/15.React - 知识体系.md",key:"v-6fe0115b",path:"/react/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/04/07, 12:28:10"},{title:"Vue2 - 知识体系",frontmatter:{pageComponent:{name:"Catalogue",data:{path:"10.前端/55.Vue2",imgUrl:"/img/index/front.png",description:"Vue2 - 知识体系"}},title:"Vue2 - 知识体系",date:"2021-11-25T19:41:09.000Z",permalink:"/vue2/",sidebar:!1,article:!1,comment:!1,editLink:!1,readingShow:"top"},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/10.%E5%89%8D%E7%AB%AF%20-%20%E7%9B%AE%E5%BD%95%E9%A1%B5/20.Vue2%20-%20%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB.html",relativePath:"00.目录页/10.前端 - 目录页/20.Vue2 - 知识体系.md",key:"v-b19543ba",path:"/vue2/",headersStr:null,content:"提示\n\n笔记正在更新的路上... 😄",normalizedContent:"提示\n\n笔记正在更新的路上... 😄",charsets:{cjk:!0},lastUpdated:"2022/04/07, 12:28:10"},{title:"Vue3 - 知识体系",frontmatter:{pageComponent:{name:"Catalogue",data:{path:"10.前端/60.Vue3",imgUrl:"/img/index/front.png",description:"Vue3 - 知识体系"}},title:"Vue3 - 知识体系",date:"2021-11-25T19:41:40.000Z",permalink:"/vue3/",sidebar:!1,article:!1,comment:!1,editLink:!1,readingShow:"top"},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/10.%E5%89%8D%E7%AB%AF%20-%20%E7%9B%AE%E5%BD%95%E9%A1%B5/25.Vue3%20-%20%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%20copy.html",relativePath:"00.目录页/10.前端 - 目录页/25.Vue3 - 知识体系 copy.md",key:"v-6f9688f8",path:"/vue3/",headersStr:null,content:"提示\n\n笔记正在更新的路上... 😄",normalizedContent:"提示\n\n笔记正在更新的路上... 😄",charsets:{cjk:!0},lastUpdated:"2022/04/07, 12:28:10"},{title:"Maven - 知识体系",frontmatter:{pageComponent:{name:"Catalogue",data:{path:"40.工具/10.版本管理 - Maven",imgUrl:"/img/index/front.png",description:"Maven 是最流行的 Java 项目构建系统，Maven 项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的软件项目管理工具。"}},title:"Maven - 知识体系",date:"2021-11-25T18:49:44.000Z",permalink:"/maven/",sidebar:!1,article:!1,comment:!1,editLink:!1,readingShow:"top"},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/20.%E5%B7%A5%E5%85%B7%20-%20%E7%9B%AE%E5%BD%95%E9%A1%B5/01.Maven%20-%20%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB.html",relativePath:"00.目录页/20.工具 - 目录页/01.Maven - 知识体系.md",key:"v-40d78add",path:"/maven/",headersStr:null,content:"Maven 知识体系学习来源：https://www.bilibili.com/video/BV1Ah411S7ZE。",normalizedContent:"maven 知识体系学习来源：https://www.bilibili.com/video/bv1ah411s7ze。",charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"Git - 知识体系",frontmatter:{pageComponent:{name:"Catalogue",data:{path:"40.工具/20.开发管理 - Git",imgUrl:"/img/index/front.png",description:"Git 是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。也是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。"}},title:"Git - 知识体系",date:"2021-11-25T18:51:10.000Z",permalink:"/git/",sidebar:!1,article:!1,comment:!1,editLink:!1,readingShow:"top"},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/20.%E5%B7%A5%E5%85%B7%20-%20%E7%9B%AE%E5%BD%95%E9%A1%B5/02.Git%20-%20%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB.html",relativePath:"00.目录页/20.工具 - 目录页/02.Git - 知识体系.md",key:"v-5da5b86d",path:"/git/",headersStr:null,content:"学习于：https://www.bilibili.com/video/BV1vy4y1s7k6",normalizedContent:"学习于：https://www.bilibili.com/video/bv1vy4y1s7k6",charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"Linux - 知识体系",frontmatter:{pageComponent:{name:"Catalogue",data:{path:"40.工具/30.操作系统 - Linux",imgUrl:"/img/index/front.png",description:"Linux 是一个开源、免费的操作系统，稳定性、安全性、处理并发著称，企业级项目部署的优先级系统选择。"}},title:"Linux - 知识体系",date:"2021-11-25T18:52:13.000Z",permalink:"/linux/",sidebar:!1,article:!1,comment:!1,editLink:!1,readingShow:"top"},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/20.%E5%B7%A5%E5%85%B7%20-%20%E7%9B%AE%E5%BD%95%E9%A1%B5/03.Linux%20-%20%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB.html",relativePath:"00.目录页/20.工具 - 目录页/03.Linux - 知识体系.md",key:"v-d573b61a",path:"/linux/",headersStr:null,content:"笔记\n\n笔记正在更新的路上... 😄",normalizedContent:"笔记\n\n笔记正在更新的路上... 😄",charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"Docker - 知识体系",frontmatter:{pageComponent:{name:"Catalogue",data:{path:"40.工具/40.容器部署 - Docker",imgUrl:"/img/index/front.png",description:"Docker 是一个开源的应用容器引擎，它让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到安装了任何 Linux 发行版本的机器上。Docker 基于 LXC 来实现类似 VM 的功能，可以在更有限的硬件资源上提供给用户更多的计算资源。"}},title:"Docker - 知识体系",date:"2021-11-25T18:47:41.000Z",permalink:"/docker/",sidebar:!1,article:!1,comment:!1,editLink:!1,readingShow:"top"},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/20.%E5%B7%A5%E5%85%B7%20-%20%E7%9B%AE%E5%BD%95%E9%A1%B5/04.Docker%20-%20%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB.html",relativePath:"00.目录页/20.工具 - 目录页/04.Docker - 知识体系.md",key:"v-57eee1f1",path:"/docker/",headers:[{level:2,title:"学习资源",slug:"学习资源",normalizedTitle:"学习资源",charIndex:2}],headersStr:"学习资源",content:"# 学习资源\n\n笔记\n\n最好的资源在官网！最好的资源在官网！最好的资源在官网！\n\n2021-11-30 @村长\n\nDocker 资源\n\n * Docker 官方主页: https://www.docker.com\n * Docker 官方博客: https://blog.docker.com/\n * Docker 官方文档: https://docs.docker.com/\n * Docker Store: https://store.docker.com\n * Docker Cloud: https://cloud.docker.com\n * Docker Hub: https://hub.docker.com\n * Docker 的源代码仓库: https://github.com/moby/moby\n * Docker 发布版本历史: https://docs.docker.com/release-notes/\n * Docker 常见问题: https://docs.docker.com/engine/faq/\n * Docker 远端应用 API: https://docs.docker.com/develop/sdk/\n\nDocker 国内镜像\n\n * 阿里云加速器：https://help.aliyun.com/document_detail/60750.html\n * 网易加速器：http://hub-mirror.c.163.com\n * 官方中国加速器：https://registry.docker-cn.com\n * 中国科学技术大学的镜像：https://docker.mirrors.ustc.edu.cn\n\n参考来源：\n\nhttps://www.pdai.tech/md/devops/docker/docker-00-overview.html",normalizedContent:"# 学习资源\n\n笔记\n\n最好的资源在官网！最好的资源在官网！最好的资源在官网！\n\n2021-11-30 @村长\n\ndocker 资源\n\n * docker 官方主页: https://www.docker.com\n * docker 官方博客: https://blog.docker.com/\n * docker 官方文档: https://docs.docker.com/\n * docker store: https://store.docker.com\n * docker cloud: https://cloud.docker.com\n * docker hub: https://hub.docker.com\n * docker 的源代码仓库: https://github.com/moby/moby\n * docker 发布版本历史: https://docs.docker.com/release-notes/\n * docker 常见问题: https://docs.docker.com/engine/faq/\n * docker 远端应用 api: https://docs.docker.com/develop/sdk/\n\ndocker 国内镜像\n\n * 阿里云加速器：https://help.aliyun.com/document_detail/60750.html\n * 网易加速器：http://hub-mirror.c.163.com\n * 官方中国加速器：https://registry.docker-cn.com\n * 中国科学技术大学的镜像：https://docker.mirrors.ustc.edu.cn\n\n参考来源：\n\nhttps://www.pdai.tech/md/devops/docker/docker-00-overview.html",charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"HTML - 测试",frontmatter:{title:"HTML - 测试",date:"2021-11-25T21:27:37.000Z",permalink:"/html/test/",article:!1,comment:!1,editLink:!1,categories:[null],tags:[null],readingShow:"top"},regularPath:"/10.%E5%89%8D%E7%AB%AF/05.HTML/00.HTML-%20%E6%B5%8B%E8%AF%95.html",relativePath:"10.前端/05.HTML/00.HTML- 测试.md",key:"v-36ea8070",path:"/html/test/",headersStr:null,content:"证明她来过",normalizedContent:"证明她来过",charsets:{cjk:!0},lastUpdated:"2022/04/07, 12:28:10"},{title:"CSS - 测试",frontmatter:{title:"CSS - 测试",date:"2021-11-25T21:27:37.000Z",permalink:"/css/test/",article:!1,comment:!1,editLink:!1,categories:[null],tags:[null],readingShow:"top"},regularPath:"/10.%E5%89%8D%E7%AB%AF/10.CSS/00.CSS-%20%E6%B5%8B%E8%AF%95.html",relativePath:"10.前端/10.CSS/00.CSS- 测试.md",key:"v-a32772ac",path:"/css/test/",headersStr:null,content:"证明她来过",normalizedContent:"证明她来过",charsets:{cjk:!0},lastUpdated:"2022/04/07, 12:28:10"},{title:"javaScript - 测试",frontmatter:{title:"javaScript - 测试",date:"2021-11-25T21:28:07.000Z",permalink:"/javascript/test/",article:!1,comment:!1,editLink:!1,categories:[null],tags:[null],readingShow:"top"},regularPath:"/10.%E5%89%8D%E7%AB%AF/15.JavaScript/00.javaScript%20-%20%E6%B5%8B%E8%AF%95.html",relativePath:"10.前端/15.JavaScript/00.javaScript - 测试.md",key:"v-7e20813b",path:"/javascript/test/",headersStr:null,content:"证明她来过",normalizedContent:"证明她来过",charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"React - 路由",frontmatter:{title:"React - 路由",date:"2022-02-21T12:41:42.000Z",permalink:"/react/routes/",categories:["React"],tags:["React"],readingShow:"top"},regularPath:"/10.%E5%89%8D%E7%AB%AF/50.React/05.React%20-%20%E8%B7%AF%E7%94%B1.html",relativePath:"10.前端/50.React/05.React - 路由.md",key:"v-38ba7828",path:"/react/routes/",headers:[{level:2,title:"路由的概念",slug:"路由的概念",normalizedTitle:"路由的概念",charIndex:3},{level:3,title:"什么是路由?",slug:"什么是路由",normalizedTitle:"什么是路由?",charIndex:14},{level:3,title:"路由分类",slug:"路由分类",normalizedTitle:"路由分类",charIndex:26},{level:3,title:"路由基石",slug:"路由基石",normalizedTitle:"路由基石",charIndex:36},{level:3,title:"路由原理",slug:"路由原理",normalizedTitle:"路由原理",charIndex:46},{level:2,title:"路由种类",slug:"路由种类",normalizedTitle:"路由种类",charIndex:54},{level:2,title:"路由的基本使用",slug:"路由的基本使用",normalizedTitle:"路由的基本使用",charIndex:62},{level:2,title:"路由组件与一般组件区别",slug:"路由组件与一般组件区别",normalizedTitle:"路由组件与一般组件区别",charIndex:73},{level:2,title:"Link与NavLink",slug:"link与navlink",normalizedTitle:"link与navlink",charIndex:88},{level:2,title:"自定义MyNavLink",slug:"自定义mynavlink",normalizedTitle:"自定义mynavlink",charIndex:104},{level:2,title:"Switch的使用",slug:"switch的使用",normalizedTitle:"switch的使用",charIndex:120},{level:2,title:"解决多级路径刷新页面样式丢失的问题",slug:"解决多级路径刷新页面样式丢失的问题",normalizedTitle:"解决多级路径刷新页面样式丢失的问题",charIndex:133},{level:2,title:"路由的严格匹配与模糊匹配",slug:"路由的严格匹配与模糊匹配",normalizedTitle:"路由的严格匹配与模糊匹配",charIndex:154},{level:2,title:"Redirect的使用(指定初始路由)",slug:"redirect的使用-指定初始路由",normalizedTitle:"redirect的使用(指定初始路由)",charIndex:170},{level:2,title:"嵌套路由（多级路由）",slug:"嵌套路由-多级路由",normalizedTitle:"嵌套路由（多级路由）",charIndex:193},{level:2,title:"向路由组件传递参数",slug:"向路由组件传递参数",normalizedTitle:"向路由组件传递参数",charIndex:207},{level:3,title:"params参数",slug:"params参数",normalizedTitle:"params参数",charIndex:222},{level:3,title:"search参数（可以认为是伪query参数）",slug:"search参数-可以认为是伪query参数",normalizedTitle:"search参数（可以认为是伪query参数）",charIndex:236},{level:3,title:"state参数",slug:"state参数",normalizedTitle:"state参数",charIndex:265},{level:3,title:"对比",slug:"对比",normalizedTitle:"对比",charIndex:278},{level:2,title:"编程式路由导航",slug:"编程式路由导航",normalizedTitle:"编程式路由导航",charIndex:284},{level:2,title:"withRouter的使用",slug:"withrouter的使用",normalizedTitle:"withrouter的使用",charIndex:295},{level:2,title:"BrowserRouter与HashRouter的区别",slug:"browserrouter与hashrouter的区别",normalizedTitle:"browserrouter与hashrouter的区别",charIndex:312},{level:2,title:"antd的按需引入+自定主题",slug:"antd的按需引入-自定主题",normalizedTitle:"antd的按需引入+自定主题",charIndex:343}],headersStr:"路由的概念 什么是路由? 路由分类 路由基石 路由原理 路由种类 路由的基本使用 路由组件与一般组件区别 Link与NavLink 自定义MyNavLink Switch的使用 解决多级路径刷新页面样式丢失的问题 路由的严格匹配与模糊匹配 Redirect的使用(指定初始路由) 嵌套路由（多级路由） 向路由组件传递参数 params参数 search参数（可以认为是伪query参数） state参数 对比 编程式路由导航 withRouter的使用 BrowserRouter与HashRouter的区别 antd的按需引入+自定主题",content:' * 路由的概念\n   * 什么是路由?\n   * 路由分类\n   * 路由基石\n   * 路由原理\n * 路由种类\n * 路由的基本使用\n * 路由组件与一般组件区别\n * Link与NavLink\n * 自定义MyNavLink\n * Switch的使用\n * 解决多级路径刷新页面样式丢失的问题\n * 路由的严格匹配与模糊匹配\n * Redirect的使用(指定初始路由)\n * 嵌套路由（多级路由）\n * 向路由组件传递参数\n   * params参数\n   * search参数（可以认为是伪query参数）\n   * state参数\n   * 对比\n * 编程式路由导航\n * withRouter的使用\n * BrowserRouter与HashRouter的区别\n * antd的按需引入+自定主题\n\n\n\n\n# 路由的概念\n\n\n# 什么是路由?\n\n 1. 一个路由就是一个映射关系（key:value）\n\n 2. key 为路径，value 可能是 function 或 component\n\n\n# 路由分类\n\n 1. 后端路由：\n    \n    * 理解： value 是 function，用来处理客户端提交的请求\n    \n    * 注册路由： router.get(path, function(req, res))\n    \n    * 工作过程：当 node 接收到一个请求时，根据请求路径找到匹配的路由，调用路由中的函数来处理请求，返回响应数据\n\n 2. 前端路由：\n    \n    * 浏览器端路由，value 是 component，用于展示页面内容。\n    \n    * 注册路由: <Route path="/test" component={Test}>\n    \n    * 工作过程：当浏览器的 path 变为 /test 时，当前路由组件就会变为 Test 组件\n\n\n# 路由基石\n\n * history 模式（操作 H5 的 BOM 的 history 对象）\n\n * hash 模式（原有的 url 后面加入 /#/）\n\n\n# 路由原理\n\n * push：在原来的 uri 后面追加新的地址，存入历史记录，可以返回上一个页面\n\n * replace：替换原来的 uri，不存入历史记录，无法返回上一个页面\n\n * goBack：返回上一个历史记录页面\n\n * forward：前往下一个历史记录页面\n\n\n# 路由种类\n\n * react-router-dom：前端开发路由（我们用）\n\n * react-router-native：基于 React 原生开发路由\n\n * react-router-any：任何环境开发路由\n\n\n# 路由的基本使用\n\n 1. 明确好界面中的导航区、展示区\n\n 2. 导航区的 a 标签改为 Link 标签\n    \n    <Link to="/xxxxx">Demo</Link>\n    \n    \n    1\n    \n\n 3. 展示区写 Route 标签进行路径的匹配\n    \n    <Route path=\'/xxxx\' component={Demo}/>\n    \n    \n    1\n    \n\n 4. App.jsx 文件的 <App> 的最外侧包裹了一个 <BrowserRouter> 或 <HashRouter>\n    \n    import About from \'./components/About\'\n    render(){\n        return (\n            <div>\n                <div>\n                    <Link className="list-group-item" to="/about">About</Link>    \n                </div>\n                <div>\n                    <Route path="/about" component={About}/>\n                </div>\n            </div>\n        )\n    }\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    11\n    12\n    13\n    \n\n\n# 路由组件与一般组件区别\n\n * 写法不同：\n   \n   * 一般组件：<Demo/>\n   \n   * 路由组件：<Route path="/demo" component={Demo}/>\n\n * 存放文件夹位置不同：\n   \n   * 一般组件：components\n   \n   * 路由组件：pages\n\n * 接收到的 props 不同：\n   \n   * 一般组件：写组件标签时传递了什么，就能收到什么\n   \n   * 路由组件：接收到三个固定的属性（history，location，match），如下：\n\n// 建议往下面看到编程式路由导航，再回来看更清楚和理解\nhistory:\n    go: ƒ go(n)   // 跳转 n 个页面，n 为正负数值\n    goBack: ƒ goBack()  // 后退一个页面\n    goForward: ƒ goForward()  // 前进一个页面\n    push: ƒ push(path, state)  // push 模式，并且可以携带 state 参数\n    replace: ƒ replace(path, state)  // replace 模式，并且可以携带 state 参数\nlocation:\n    pathname: "/about"\n    search: ""     // 存有 search 参数，是一个字符串形式\n    state: undefined   // 存有 state 参数\nmatch:    // 存有params参数\n    params: {}\n    path: "/about"\n    url: "/about"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# Link与NavLink\n\n * 如果给 Link 加入点击高亮，需要换更高级的标签\n\n * NavLink 可以实现路由链接的高亮，通过 activeClassName 指定样式名，不加默认点击时自动追加 avtive\n\n * 通过 this.props.children 可以获取标签体内容\n\n\n# 自定义MyNavLink\n\n原因：NavLink 出现多个时，重新写属性不优雅，自己封装一个 MyNavLink，把重复的样式如 className 放入。\n\n 1. 组件可以传入属性值，如 <MyNavLink to="/about" a={1} b={2}></MyNavLink>\n\n 2. 组件也可以传入标签体内容，如 <MyNavLink>标签体内容</MyNavLink>\n    \n    * 标签体内容是特殊的属性值，所以标签属性值 也可以写标签体内容，如 <MyNavLink children="标签体内容"></MyNavLink>\n\n 3. 传入的属性值存放在 props 里，传入的标签体存放在 props 的 children 里\n    \n    * 自定义 MyNavLink：（ {...this.props} ），会把 props 里的属性解析出来展示\n      \n      render() {\n          // console.log(this.props);  //有 to 属性，也有 children 对象的 About、Home 属性\n          return (\n              // <NavLink activeClassName="kele" className="list-group-item" {...this.props}>{this.props.children}</NavLink>\n              //...this.props 有 to 属性，也有 children 对象的 About、Home 属性\n              <NavLink activeClassName="kele" className="list-group-item" {...this.props}/>\n          )\n      }\n      \n      \n      1\n      2\n      3\n      4\n      5\n      6\n      7\n      8\n      \n    \n    * 引入：\n      \n      <MyNavLink to="/about">About</MyNavLink>\n      <MyNavLink to="/home">Home</MyNavLink>\n      \n      \n      1\n      2\n      \n\n\n# Switch的使用\n\n 1. 通常情况下，path 和 component 是一一对应的关系。\n\n 2. 如果 path 出现多个一样的路径，则都会匹配上，但是中间出现多个会影响效率\n    \n    <Switch>\n        <Route path="/about" component={About}/>\n        <Route path="/demo" component={Demoe}/>\n        <Route path="/kele" component={Kele}/>\n        <Route path="/About" component={Test}/>\n    </Switch>\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    \n\n 3. Switch 可以提高路由匹配效率（单一匹配），只要找到第一个匹配的 path，则不会往下找。\n    \n    <Switch>\n        <Route path="/about" component={About}/>\n        <Route path="/demo" component={Demoe}/>\n        <Route path="/kele" component={Kele}/>\n        <Route path="/About" component={Test}/>\n    </Switch>\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    \n\n\n# 解决多级路径刷新页面样式丢失的问题\n\n原因：当引入的 Css 或者其他文件有 ./ 开头，则默认去往前路由路径下找文件，其实文件都是存在于根目录下的 public 文件\n\n解决：\n\n * public/index.html 中引入样式时不写 ./ ，写 / （常用），因为 / 代表当前根目录\n\n * public/index.html 中引入样式时不写./ ，写 %PUBLIC_URL%（常用）\n\n * 使用 HashRouter\n\n\n# 路由的严格匹配与模糊匹配\n\n 1. 默认使用的是模糊匹配（简单记：【输入的路径】必须包含要【匹配的路径】，且顺序要一致）\n    \n    {/* 可以匹配 */}\n    <BrowserRouter>\n        <MyNavLink to="/home/a/b">Home</MyNavLink>\n        <Route path="/home" component={Home}/>\n    </BrowserRouter>\n    {/* 不可以匹配 */}\n    <BrowserRouter>\n        <MyNavLink to="/home">Home</MyNavLink>\n        <Route path="/home/a/b" component={Home}/>\n    </BrowserRouter>\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    \n\n 2. 使用 exact 属性开启严格匹配（exact 或者 exact={true}）：\n    \n    <BrowserRouter>\n        <MyNavLink to="/home/a/b">Home</MyNavLink>\n        <Route exact path="/home" component={Home}/>\n    </BrowserRouter>\n    \n    \n    1\n    2\n    3\n    4\n    \n\n 3. 严格匹配不要随便开启，默认不要开，只有需要再开，有些时候开启会导致无法继续匹配二级路由\n\n\n# Redirect的使用(指定初始路由)\n\n 1. 一般写在所有路由注册的最下方，当所有路由都无法匹配时，跳转到 Redirect 指定的路由，可用于初次进入首页，打开默认组件\n\n 2. 具体编码（进入首页，显示 About 组件的内容）：\n    \n    <Switch>\n        <Route path="/about" component={About}/>\n        <Route path="/home" component={Home}/>\n        <Redirect to="/about"/>\n    </Switch>\n    \n    \n    1\n    2\n    3\n    4\n    5\n    \n\n\n# 嵌套路由（多级路由）\n\n 1. 注册子路由时要写上父路由的 path 值\n    \n    原因：不写父路由，默认只找子路由的 path，但是第一批注册的路由没有该 path，只有父路由的 path\n\n 2. 路由的匹配是按照注册路由的顺序进行的\n    \n    { /* 父路由组件：*/ }\n    <BrowserRouter>\n        <MyNavLink to="/home">Home</MyNavLink>\n        <Route path="/home" component={Home}/>\n    </BrowserRouter>\n    { /* 子路由组件：*/ }\n    <BrowserRouter>\n    \t\t<MyNavLink to="/home/message">Message</MyNavLink>\n    \t\t<Route path="/home/news" component={News}/>\n    </BrowserRouter>\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    \n\n\n# 向路由组件传递参数\n\n\n# params参数\n\n 1. 路由链接（携带参数）：\n    \n    <Link to=\'/demo/test/tom/18\'}>详情</Link>\n    \n    \n    1\n    \n\n 2. 注册路由（声明接收）：\n    \n    <Route path="/demo/test/:name/:age" component={Test}/>\n    \n    \n    1\n    \n\n 3. 接收参数：\n    \n    const {name,age} = this.props.match.params\n    \n    \n    1\n    \n\n\n# search参数（可以认为是伪query参数）\n\n 4. 路由链接（携带参数）：\n    \n    <Link to=\'/demo/test?name=tom&age=18\'}>详情</Link>\n    \n    \n    1\n    \n\n 5. 注册路由（无需声明，正常注册即可）：\n    \n    <Route path="/demo/test" component={Test}/>\n    \n    \n    1\n    \n\n 6. 接收参数（字符串形式：?key=value$......，没有解析为 {key:value,......}）：\n    \n    import qs from \'querystring\'\n    ......\n    const search = this.props.location.search  //?name=tom&age=18  字符串\n    const {id,title} = qs.parse(search.slice(1));\t//把?去掉\n    \n    \n    1\n    2\n    3\n    4\n    \n    \n    > 备注：获取到的 search 是 urlencoded 编码字符串，需要借助第三方库 querystring 或者自己解析！\n\n\n# state参数\n\n 1. 路由链接（携带参数，参数必须为对象，对象包含 子路由路径和要传的参数）：\n    \n    <Link to={{pathname:\'/demo/test\',state:{name:\'tom\',age:18}}}>详情</Link>\n    \n    \n    1\n    \n\n 2. 注册路由（无需声明，正常注册即可）：\n    \n    <Route path="/demo/test" component={Test}/>\n    \n    \n    1\n    \n\n 3. 接收参数：\n    \n    const {name,age} = this.props.location.state || {}\n    \n    \n    1\n    \n    \n    > 备注：url 地址没有参数，类似于 post 提交后的 url 地址，而且刷新也可以保留住参数！\n    > \n    > 原理：BrowserRouter 有 history 历史记录对象，该对象存有参数的记录，如果清除历史记录缓存，那么刷新会丢失参数！\n    > \n    > 所以 HashRouter 会刷新丢失参数，具体看 BrowerRouter与 HashRouter 的区别\n\n\n# 对比\n\nparams 参数用的最多，其次是 search 参数，最后是 state 参数，如果不想地址栏有参数显示，就使用 state 参数。\n\n\n# 编程式路由导航\n\n 1. 概念：不需要借助 Link 或者 NavLink 标签进行路由跳转、传参\n\n 2. 方法：利用点击事件，借助 this.props.history 对象上的 API 对操作路由跳转、前进、后退，加入\n    \n    // 往后看\'路由组件和一般组件区别\'，里面有更详细的介绍\n    this.props.history.push(uri,state)  // uri 后追加 path，产生历史记录，可携带 state 参数\n    this.props.history.replace(uri,state)  // 替换原来的 path，不产生历史记录，可携带 state 参数\n    this.props.history.goBack()  // 后退\n    this.props.history.goForward()  // 前进\n    this.props.history.go(n)  // 跳转 n 个页面，n 为正负数值\n    \n    // 例子\n    export default class Message extends Component{\n        state = {\n            messageArr:[\n                {id:\'01\',title:\'消息1\'},\n                {id:\'02\',title:\'消息2\'},\n                {id:\'03\',title:\'消息3\'},\n            ]\n        }\n        replaceShow = (id,title)=>{\n            //replace 跳转 + 携带 state 参数\n            this.props.history.replace(`/home/message/detail`,{id,title})\n        }\n        pushShow = (id,title)=>{\n            //push 跳转 + 携带 state 参数\n            this.props.history.push(`/home/message/detail`,{id,title})\n        }\n        render() {\n            return (\n                <button onClick={()=> this.pushShow(msgObj.id,msgObj.title)}>push查看</button>  \n                <button onClick={()=> this.replaceShow(msgObj.id,msgObj.title)}>replace查看</button>\n            )\n        }\n    }\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    11\n    12\n    13\n    14\n    15\n    16\n    17\n    18\n    19\n    20\n    21\n    22\n    23\n    24\n    25\n    26\n    27\n    28\n    29\n    30\n    31\n    \n\n\n# withRouter的使用\n\n 1. withRouter 可以加工一般组件，让一般组件具备路由组件所特有的 API\n\n 2. withRouter 的返回值是一个新组件\n\nimport {withRouter} from \'react-router-dom\'\nclass Header extends Component {\n\tback = ()=>{\n\t\tthis.props.history.goBack()\n\t}\n\tforward = ()=>{\n\t\tthis.props.history.goForward()\n\t}\n\tgo = ()=>{\n\t\tthis.props.history.go(-2)\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div className="page-header">\n\t\t\t\t<h2>React Router Demo</h2>\n\t\t\t\t<button onClick={this.back}>回退</button>&nbsp;\n\t\t\t\t<button onClick={this.forward}>前进</button>&nbsp;\n\t\t\t\t<button onClick={this.go}>go</button>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default withRouter(Header)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n# BrowserRouter与HashRouter的区别\n\n 1. 底层原理不一样：\n    \n    * BrowserRouter 使用的是 H5 的 history API，不兼容 IE9 及以下版本\n    \n    * HashRouter 使用的是 URL 的哈希值\n\n 2. path 表现形式不一样\n    \n    * BrowserRouter 的路径中没有 #，例如：localhost:3000/demo/test\n    \n    * HashRouter 的路径包含 #，例如：localhost:3000/#/demo/test\n\n 3. 刷新后对路由 state 参数的影响\n    \n    * BrowserRouter 没有任何影响，因为 state 保存在 history 对象中\n    \n    * HashRouter 刷新后会导致路由 state 参数的丢失\n\n 4. 备注：HashRouter 可以用于解决一些路径错误相关的问题\n\n\n# antd的按需引入+自定主题\n\n 1. 安装依赖：\n    \n    yarn add react-app-rewired customize-cra babel-plugin-import less less-loader\n    \n    \n    1\n    \n\n 2. 修改package.json\n    \n    ....\n    "scripts": {\n        "start": "react-app-rewired start",\n        "build": "react-app-rewired build",\n        "test": "react-app-rewired test",\n        "eject": "react-scripts eject"\n    },\n    ....\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    \n\n 3. 根目录下创建 config-overrides.js\n    \n    //配置具体的修改规则\n    const { override, fixBabelImports,addLessLoader} = require(\'customize-cra\');\n    module.exports = override(\n        fixBabelImports(\'import\', {\n            libraryName: \'antd\',\n            libraryDirectory: \'es\',\n            style: true,\n        }),\n        addLessLoader({\n            lessOptions:{\n                javascriptEnabled: true,\n                modifyVars: { \'@primary-color\': \'green\' },\n            }\n        }),\n    );\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    11\n    12\n    13\n    14\n    15\n    \n\n备注：不用在组件里亲自引入样式了，即：import \'antd/dist/antd.css\' 应该删掉。',normalizedContent:' * 路由的概念\n   * 什么是路由?\n   * 路由分类\n   * 路由基石\n   * 路由原理\n * 路由种类\n * 路由的基本使用\n * 路由组件与一般组件区别\n * link与navlink\n * 自定义mynavlink\n * switch的使用\n * 解决多级路径刷新页面样式丢失的问题\n * 路由的严格匹配与模糊匹配\n * redirect的使用(指定初始路由)\n * 嵌套路由（多级路由）\n * 向路由组件传递参数\n   * params参数\n   * search参数（可以认为是伪query参数）\n   * state参数\n   * 对比\n * 编程式路由导航\n * withrouter的使用\n * browserrouter与hashrouter的区别\n * antd的按需引入+自定主题\n\n\n\n\n# 路由的概念\n\n\n# 什么是路由?\n\n 1. 一个路由就是一个映射关系（key:value）\n\n 2. key 为路径，value 可能是 function 或 component\n\n\n# 路由分类\n\n 1. 后端路由：\n    \n    * 理解： value 是 function，用来处理客户端提交的请求\n    \n    * 注册路由： router.get(path, function(req, res))\n    \n    * 工作过程：当 node 接收到一个请求时，根据请求路径找到匹配的路由，调用路由中的函数来处理请求，返回响应数据\n\n 2. 前端路由：\n    \n    * 浏览器端路由，value 是 component，用于展示页面内容。\n    \n    * 注册路由: <route path="/test" component={test}>\n    \n    * 工作过程：当浏览器的 path 变为 /test 时，当前路由组件就会变为 test 组件\n\n\n# 路由基石\n\n * history 模式（操作 h5 的 bom 的 history 对象）\n\n * hash 模式（原有的 url 后面加入 /#/）\n\n\n# 路由原理\n\n * push：在原来的 uri 后面追加新的地址，存入历史记录，可以返回上一个页面\n\n * replace：替换原来的 uri，不存入历史记录，无法返回上一个页面\n\n * goback：返回上一个历史记录页面\n\n * forward：前往下一个历史记录页面\n\n\n# 路由种类\n\n * react-router-dom：前端开发路由（我们用）\n\n * react-router-native：基于 react 原生开发路由\n\n * react-router-any：任何环境开发路由\n\n\n# 路由的基本使用\n\n 1. 明确好界面中的导航区、展示区\n\n 2. 导航区的 a 标签改为 link 标签\n    \n    <link to="/xxxxx">demo</link>\n    \n    \n    1\n    \n\n 3. 展示区写 route 标签进行路径的匹配\n    \n    <route path=\'/xxxx\' component={demo}/>\n    \n    \n    1\n    \n\n 4. app.jsx 文件的 <app> 的最外侧包裹了一个 <browserrouter> 或 <hashrouter>\n    \n    import about from \'./components/about\'\n    render(){\n        return (\n            <div>\n                <div>\n                    <link classname="list-group-item" to="/about">about</link>    \n                </div>\n                <div>\n                    <route path="/about" component={about}/>\n                </div>\n            </div>\n        )\n    }\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    11\n    12\n    13\n    \n\n\n# 路由组件与一般组件区别\n\n * 写法不同：\n   \n   * 一般组件：<demo/>\n   \n   * 路由组件：<route path="/demo" component={demo}/>\n\n * 存放文件夹位置不同：\n   \n   * 一般组件：components\n   \n   * 路由组件：pages\n\n * 接收到的 props 不同：\n   \n   * 一般组件：写组件标签时传递了什么，就能收到什么\n   \n   * 路由组件：接收到三个固定的属性（history，location，match），如下：\n\n// 建议往下面看到编程式路由导航，再回来看更清楚和理解\nhistory:\n    go: ƒ go(n)   // 跳转 n 个页面，n 为正负数值\n    goback: ƒ goback()  // 后退一个页面\n    goforward: ƒ goforward()  // 前进一个页面\n    push: ƒ push(path, state)  // push 模式，并且可以携带 state 参数\n    replace: ƒ replace(path, state)  // replace 模式，并且可以携带 state 参数\nlocation:\n    pathname: "/about"\n    search: ""     // 存有 search 参数，是一个字符串形式\n    state: undefined   // 存有 state 参数\nmatch:    // 存有params参数\n    params: {}\n    path: "/about"\n    url: "/about"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# link与navlink\n\n * 如果给 link 加入点击高亮，需要换更高级的标签\n\n * navlink 可以实现路由链接的高亮，通过 activeclassname 指定样式名，不加默认点击时自动追加 avtive\n\n * 通过 this.props.children 可以获取标签体内容\n\n\n# 自定义mynavlink\n\n原因：navlink 出现多个时，重新写属性不优雅，自己封装一个 mynavlink，把重复的样式如 classname 放入。\n\n 1. 组件可以传入属性值，如 <mynavlink to="/about" a={1} b={2}></mynavlink>\n\n 2. 组件也可以传入标签体内容，如 <mynavlink>标签体内容</mynavlink>\n    \n    * 标签体内容是特殊的属性值，所以标签属性值 也可以写标签体内容，如 <mynavlink children="标签体内容"></mynavlink>\n\n 3. 传入的属性值存放在 props 里，传入的标签体存放在 props 的 children 里\n    \n    * 自定义 mynavlink：（ {...this.props} ），会把 props 里的属性解析出来展示\n      \n      render() {\n          // console.log(this.props);  //有 to 属性，也有 children 对象的 about、home 属性\n          return (\n              // <navlink activeclassname="kele" classname="list-group-item" {...this.props}>{this.props.children}</navlink>\n              //...this.props 有 to 属性，也有 children 对象的 about、home 属性\n              <navlink activeclassname="kele" classname="list-group-item" {...this.props}/>\n          )\n      }\n      \n      \n      1\n      2\n      3\n      4\n      5\n      6\n      7\n      8\n      \n    \n    * 引入：\n      \n      <mynavlink to="/about">about</mynavlink>\n      <mynavlink to="/home">home</mynavlink>\n      \n      \n      1\n      2\n      \n\n\n# switch的使用\n\n 1. 通常情况下，path 和 component 是一一对应的关系。\n\n 2. 如果 path 出现多个一样的路径，则都会匹配上，但是中间出现多个会影响效率\n    \n    <switch>\n        <route path="/about" component={about}/>\n        <route path="/demo" component={demoe}/>\n        <route path="/kele" component={kele}/>\n        <route path="/about" component={test}/>\n    </switch>\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    \n\n 3. switch 可以提高路由匹配效率（单一匹配），只要找到第一个匹配的 path，则不会往下找。\n    \n    <switch>\n        <route path="/about" component={about}/>\n        <route path="/demo" component={demoe}/>\n        <route path="/kele" component={kele}/>\n        <route path="/about" component={test}/>\n    </switch>\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    \n\n\n# 解决多级路径刷新页面样式丢失的问题\n\n原因：当引入的 css 或者其他文件有 ./ 开头，则默认去往前路由路径下找文件，其实文件都是存在于根目录下的 public 文件\n\n解决：\n\n * public/index.html 中引入样式时不写 ./ ，写 / （常用），因为 / 代表当前根目录\n\n * public/index.html 中引入样式时不写./ ，写 %public_url%（常用）\n\n * 使用 hashrouter\n\n\n# 路由的严格匹配与模糊匹配\n\n 1. 默认使用的是模糊匹配（简单记：【输入的路径】必须包含要【匹配的路径】，且顺序要一致）\n    \n    {/* 可以匹配 */}\n    <browserrouter>\n        <mynavlink to="/home/a/b">home</mynavlink>\n        <route path="/home" component={home}/>\n    </browserrouter>\n    {/* 不可以匹配 */}\n    <browserrouter>\n        <mynavlink to="/home">home</mynavlink>\n        <route path="/home/a/b" component={home}/>\n    </browserrouter>\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    \n\n 2. 使用 exact 属性开启严格匹配（exact 或者 exact={true}）：\n    \n    <browserrouter>\n        <mynavlink to="/home/a/b">home</mynavlink>\n        <route exact path="/home" component={home}/>\n    </browserrouter>\n    \n    \n    1\n    2\n    3\n    4\n    \n\n 3. 严格匹配不要随便开启，默认不要开，只有需要再开，有些时候开启会导致无法继续匹配二级路由\n\n\n# redirect的使用(指定初始路由)\n\n 1. 一般写在所有路由注册的最下方，当所有路由都无法匹配时，跳转到 redirect 指定的路由，可用于初次进入首页，打开默认组件\n\n 2. 具体编码（进入首页，显示 about 组件的内容）：\n    \n    <switch>\n        <route path="/about" component={about}/>\n        <route path="/home" component={home}/>\n        <redirect to="/about"/>\n    </switch>\n    \n    \n    1\n    2\n    3\n    4\n    5\n    \n\n\n# 嵌套路由（多级路由）\n\n 1. 注册子路由时要写上父路由的 path 值\n    \n    原因：不写父路由，默认只找子路由的 path，但是第一批注册的路由没有该 path，只有父路由的 path\n\n 2. 路由的匹配是按照注册路由的顺序进行的\n    \n    { /* 父路由组件：*/ }\n    <browserrouter>\n        <mynavlink to="/home">home</mynavlink>\n        <route path="/home" component={home}/>\n    </browserrouter>\n    { /* 子路由组件：*/ }\n    <browserrouter>\n    \t\t<mynavlink to="/home/message">message</mynavlink>\n    \t\t<route path="/home/news" component={news}/>\n    </browserrouter>\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    \n\n\n# 向路由组件传递参数\n\n\n# params参数\n\n 1. 路由链接（携带参数）：\n    \n    <link to=\'/demo/test/tom/18\'}>详情</link>\n    \n    \n    1\n    \n\n 2. 注册路由（声明接收）：\n    \n    <route path="/demo/test/:name/:age" component={test}/>\n    \n    \n    1\n    \n\n 3. 接收参数：\n    \n    const {name,age} = this.props.match.params\n    \n    \n    1\n    \n\n\n# search参数（可以认为是伪query参数）\n\n 4. 路由链接（携带参数）：\n    \n    <link to=\'/demo/test?name=tom&age=18\'}>详情</link>\n    \n    \n    1\n    \n\n 5. 注册路由（无需声明，正常注册即可）：\n    \n    <route path="/demo/test" component={test}/>\n    \n    \n    1\n    \n\n 6. 接收参数（字符串形式：?key=value$......，没有解析为 {key:value,......}）：\n    \n    import qs from \'querystring\'\n    ......\n    const search = this.props.location.search  //?name=tom&age=18  字符串\n    const {id,title} = qs.parse(search.slice(1));\t//把?去掉\n    \n    \n    1\n    2\n    3\n    4\n    \n    \n    > 备注：获取到的 search 是 urlencoded 编码字符串，需要借助第三方库 querystring 或者自己解析！\n\n\n# state参数\n\n 1. 路由链接（携带参数，参数必须为对象，对象包含 子路由路径和要传的参数）：\n    \n    <link to={{pathname:\'/demo/test\',state:{name:\'tom\',age:18}}}>详情</link>\n    \n    \n    1\n    \n\n 2. 注册路由（无需声明，正常注册即可）：\n    \n    <route path="/demo/test" component={test}/>\n    \n    \n    1\n    \n\n 3. 接收参数：\n    \n    const {name,age} = this.props.location.state || {}\n    \n    \n    1\n    \n    \n    > 备注：url 地址没有参数，类似于 post 提交后的 url 地址，而且刷新也可以保留住参数！\n    > \n    > 原理：browserrouter 有 history 历史记录对象，该对象存有参数的记录，如果清除历史记录缓存，那么刷新会丢失参数！\n    > \n    > 所以 hashrouter 会刷新丢失参数，具体看 browerrouter与 hashrouter 的区别\n\n\n# 对比\n\nparams 参数用的最多，其次是 search 参数，最后是 state 参数，如果不想地址栏有参数显示，就使用 state 参数。\n\n\n# 编程式路由导航\n\n 1. 概念：不需要借助 link 或者 navlink 标签进行路由跳转、传参\n\n 2. 方法：利用点击事件，借助 this.props.history 对象上的 api 对操作路由跳转、前进、后退，加入\n    \n    // 往后看\'路由组件和一般组件区别\'，里面有更详细的介绍\n    this.props.history.push(uri,state)  // uri 后追加 path，产生历史记录，可携带 state 参数\n    this.props.history.replace(uri,state)  // 替换原来的 path，不产生历史记录，可携带 state 参数\n    this.props.history.goback()  // 后退\n    this.props.history.goforward()  // 前进\n    this.props.history.go(n)  // 跳转 n 个页面，n 为正负数值\n    \n    // 例子\n    export default class message extends component{\n        state = {\n            messagearr:[\n                {id:\'01\',title:\'消息1\'},\n                {id:\'02\',title:\'消息2\'},\n                {id:\'03\',title:\'消息3\'},\n            ]\n        }\n        replaceshow = (id,title)=>{\n            //replace 跳转 + 携带 state 参数\n            this.props.history.replace(`/home/message/detail`,{id,title})\n        }\n        pushshow = (id,title)=>{\n            //push 跳转 + 携带 state 参数\n            this.props.history.push(`/home/message/detail`,{id,title})\n        }\n        render() {\n            return (\n                <button onclick={()=> this.pushshow(msgobj.id,msgobj.title)}>push查看</button>  \n                <button onclick={()=> this.replaceshow(msgobj.id,msgobj.title)}>replace查看</button>\n            )\n        }\n    }\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    11\n    12\n    13\n    14\n    15\n    16\n    17\n    18\n    19\n    20\n    21\n    22\n    23\n    24\n    25\n    26\n    27\n    28\n    29\n    30\n    31\n    \n\n\n# withrouter的使用\n\n 1. withrouter 可以加工一般组件，让一般组件具备路由组件所特有的 api\n\n 2. withrouter 的返回值是一个新组件\n\nimport {withrouter} from \'react-router-dom\'\nclass header extends component {\n\tback = ()=>{\n\t\tthis.props.history.goback()\n\t}\n\tforward = ()=>{\n\t\tthis.props.history.goforward()\n\t}\n\tgo = ()=>{\n\t\tthis.props.history.go(-2)\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div classname="page-header">\n\t\t\t\t<h2>react router demo</h2>\n\t\t\t\t<button onclick={this.back}>回退</button>&nbsp;\n\t\t\t\t<button onclick={this.forward}>前进</button>&nbsp;\n\t\t\t\t<button onclick={this.go}>go</button>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default withrouter(header)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n# browserrouter与hashrouter的区别\n\n 1. 底层原理不一样：\n    \n    * browserrouter 使用的是 h5 的 history api，不兼容 ie9 及以下版本\n    \n    * hashrouter 使用的是 url 的哈希值\n\n 2. path 表现形式不一样\n    \n    * browserrouter 的路径中没有 #，例如：localhost:3000/demo/test\n    \n    * hashrouter 的路径包含 #，例如：localhost:3000/#/demo/test\n\n 3. 刷新后对路由 state 参数的影响\n    \n    * browserrouter 没有任何影响，因为 state 保存在 history 对象中\n    \n    * hashrouter 刷新后会导致路由 state 参数的丢失\n\n 4. 备注：hashrouter 可以用于解决一些路径错误相关的问题\n\n\n# antd的按需引入+自定主题\n\n 1. 安装依赖：\n    \n    yarn add react-app-rewired customize-cra babel-plugin-import less less-loader\n    \n    \n    1\n    \n\n 2. 修改package.json\n    \n    ....\n    "scripts": {\n        "start": "react-app-rewired start",\n        "build": "react-app-rewired build",\n        "test": "react-app-rewired test",\n        "eject": "react-scripts eject"\n    },\n    ....\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    \n\n 3. 根目录下创建 config-overrides.js\n    \n    //配置具体的修改规则\n    const { override, fixbabelimports,addlessloader} = require(\'customize-cra\');\n    module.exports = override(\n        fixbabelimports(\'import\', {\n            libraryname: \'antd\',\n            librarydirectory: \'es\',\n            style: true,\n        }),\n        addlessloader({\n            lessoptions:{\n                javascriptenabled: true,\n                modifyvars: { \'@primary-color\': \'green\' },\n            }\n        }),\n    );\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    11\n    12\n    13\n    14\n    15\n    \n\n备注：不用在组件里亲自引入样式了，即：import \'antd/dist/antd.css\' 应该删掉。',charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"React - 基础与核心",frontmatter:{title:"React - 基础与核心",date:"2022-02-21T11:20:16.000Z",permalink:"/react/basics/",categories:["React"],tags:["React"],readingShow:"top"},regularPath:"/10.%E5%89%8D%E7%AB%AF/50.React/01.React%20-%20%E5%9F%BA%E7%A1%80%E4%B8%8E%E6%A0%B8%E5%BF%83.html",relativePath:"10.前端/50.React/01.React - 基础与核心.md",key:"v-24f96e3c",path:"/react/basics/",headers:[{level:2,title:"三大核心",slug:"三大核心",normalizedTitle:"三大核心",charIndex:3},{level:3,title:"state",slug:"state",normalizedTitle:"state",charIndex:13},{level:3,title:"props",slug:"props",normalizedTitle:"props",charIndex:24},{level:3,title:"ref",slug:"ref",normalizedTitle:"ref",charIndex:35},{level:2,title:"概念基础",slug:"概念基础",normalizedTitle:"概念基础",charIndex:42},{level:3,title:"虚拟 DOM",slug:"虚拟-dom",normalizedTitle:"虚拟 dom",charIndex:52},{level:3,title:"函数组件",slug:"函数组件",normalizedTitle:"函数组件",charIndex:64},{level:3,title:"类式组件",slug:"类式组件",normalizedTitle:"类式组件",charIndex:74},{level:3,title:"受控组件",slug:"受控组件",normalizedTitle:"受控组件",charIndex:84},{level:2,title:"生命周期",slug:"生命周期",normalizedTitle:"生命周期",charIndex:92},{level:3,title:"旧版生命周期",slug:"旧版生命周期",normalizedTitle:"旧版生命周期",charIndex:102},{level:3,title:"新版生命周期",slug:"新版生命周期",normalizedTitle:"新版生命周期",charIndex:114}],headersStr:"三大核心 state props ref 概念基础 虚拟 DOM 函数组件 类式组件 受控组件 生命周期 旧版生命周期 新版生命周期",content:' * 三大核心\n   * state\n   * props\n   * ref\n * 概念基础\n   * 虚拟 DOM\n   * 函数组件\n   * 类式组件\n   * 受控组件\n * 生命周期\n   * 旧版生命周期\n   * 新版生命周期\n\n\n\n\n# 三大核心\n\n\n# state\n\n作用：存储数据的容器。\n\n写在 construct 里\n\nexport default class Demo extends Component{\n    construct(props){\n        super(props)\n        this.state = {\n            xxx:xxx\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n写在类里（推荐）\n\nexport default class Demo extends Component{\n    state = {\n        xxx:xxx\n    }\n}\n\n\n1\n2\n3\n4\n5\n\n\n其他位置只需保证 this 是指向类的实例对象，即可通过 this.state.xxx 取到数据。\n\n\n# props\n\n> 作用\n\n获得父组件传来的值。\n\n 1. 通过便签传值：key=value 传值\n\n 2. 对象传值\n    \n    Person 的 props 里有三个属性：\n    \n    ReactDOM.render(<Person name="jerry" age={19}  sex="男"/>,document.getElementById(\'test1\'))\n    \n    \n    1\n    \n\n> 方式\n\n 1. 第一种：key=value 传值\n    \n    * 缺点：当值多的时候，便签里的 key=value 代码不优雅\n\n 2. 第二种：对象传值\n    \n    * 通过 {...xxx} 传值\n    \n    * 前提：对象内的名字和接收的名字一致\n      \n      const p = {name:\'老刘\',age:18,sex:\'女\'}\n      ReactDOM.render(<Person {...p}/>,document.getElementById(\'test3\'))\n      \n      \n      1\n      2\n      \n    \n    * Person 组件接收\n      \n      const {name,age,sex} = this.props\n      \n      \n      1\n      \n\n> 对 props 的内容进行限制\n\n写在类里面，需要使用 static 修饰\n\nclass Person extends React.Component{  \n    // 对标签属性进行类型、必要性的限制\n    static propTypes = {\n        name:PropTypes.string.isRequired, // 限制 name 必传，且为字符串\n        sex:PropTypes.string, // 限制 sex 为字符串\n        age:PropTypes.number, // 限制 age 为数值\n    }\n\n    // 指定默认标签属性值\n    static defaultProps = {\n        sex:\'男\',// sex 默认值为男\n        age:18 // age 默认值为 18\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n写在类外面，通过类名 .xx 修饰\n\nclass Person extends React.Component{\n    // ......\n}\n// 对标签属性进行类型、必要性的限制\nPerson.propTypes = { // 固定\n    name:PropTypes.string.isRequired, // 限制 name 必传，且为字符串\n    sex:PropTypes.string, // 限制 sex 为字符串\n    age:PropTypes.number, // 限制 age 为数值\n    speak:PropTypes.func, // 限制 speak 为函数\n}\n// 指定默认标签属性值\nPerson.defaultProps = {\n    sex:\'男\', // sex 默认值为男\n    age:18 // age 默认值为 18\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n写在函数外面，通过函数名 .xx 修饰\n\nfunction Person (props){\n    const {name,age,sex} = props\n}\nPerson.propTypes = {\n    name:PropTypes.string.isRequired, // 限制 name 必传，且为字符串\n    sex:PropTypes.string, // 限制 sex 为字符串\n    age:PropTypes.number, // 限制 age 为数值\n}\n\n// 指定默认标签属性值\nPerson.defaultProps = {\n    sex:\'男\', // sex 默认值为男\n    age:18 // age 默认值为 18\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# ref\n\n> 作用\n\n存储标签，一般用于表单标签，获取表单标签的值。\n\n> 使用\n\n 1. 字符串形式（官方不推荐，影响效率）\n    \n    在 x 标签内加入 ref="xxx"，react 自动把 xxx:x 放入 refs 中，通过 this.refs.xxx 调用 x\n    \n    // 展示左侧输入框的数据\n    showData = ()=>{\n        const {input1} = this.refs\n        alert(input1.value)\n    }\n    \n    render(){\n        return(\n            <div>\n                <input ref="input1" type="text" placeholder="点击按钮提示数据"/>&nbsp;\n                <button onClick={this.showData}>点我提示左侧的数据</button>&nbsp;\n            </div>\n        )\n    }\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    11\n    12\n    13\n    14\n    \n\n 2. 回调形式。开发常用\n    \n    1. 在 x 标签使用 ref="e => this.xxx=e"，其中 xxx 是一个回调函数，记得使用箭头函数把 this 指向类的实例\n    \n    2. e 是 react 自动放入的一个参数，值是当前标签，原理就是在类里创建一个 xxx，通过变量 = 值的方式，让 xxx=e 此时在别的函数调用 this.xxx 即可获得当前标签\n    \n    3. 缺点：每次更新状态，调用 render 时，ref 会被调用两次，第一次的参数 e 为 null，第二次才是当前标签\n       \n       * 原因：react 在重新调用 render 前，会把 render 内清除掉，此时再清除 xxx 时，发现有一个回调函数，所以把 null 传进去，第二次就是渲染页面，把当前标签传入\n       \n       * 总结：状态 state 更新，render 先调用一次进行自我销毁，然后再调用一次进行新的渲染，第一次已经销毁，所以 e 为 null，第二次才是要求\n       \n       该缺点官方明确说无关紧要\n       \n       showData = ()=>{\n           const {input1} = this\n           alert(input1.value)\n       }\n       render(){\n           return(\n               <div>\n                   <input ref={e => this.input1 = e } type="text" placeholder="点击按钮提示数据"/>&nbsp;\n                   <button onClick={this.showData}>点我提示左侧的数据</button>&nbsp;\n               </div>\n           )\n       }\n       \n       \n       1\n       2\n       3\n       4\n       5\n       6\n       7\n       8\n       9\n       10\n       11\n       12\n       \n    \n    4. 函数形式\n       \n       * 和回调形式一样，只不过把标签只是调用函数名，函数实现方式放到类里进行实现\n       \n       * ref="this.xxx"，在类里实现 xxx 函数，xxx 函数会传入一个参数，该参数就是 xxx 所在的标签\n    \n    5. createRef 创建 ref\n       \n       * 官方力推的 API\n       \n       * 缺点：创建的 ref 只能存储一个标签，多个标签需要创建多个 ref\n       \n       /* \n         React.createRef调用后可以返回一个容器，该容器可以存储被ref所标识的节点,该容器是“专人专用”的\n       */\n       myRef = React.createRef()\n       // 展示左侧输入框的数据\n       showData = ()=>{\n           alert(this.myRef.current.value);\n       }\n       render(){\n           return(\n               <div>\n                   <input ref={this.myRef} type="text" placeholder="点击按钮提示数据"/>&nbsp;\n                   <button onClick={this.showData}>点我提示左侧的数据</button>&nbsp;\n                   <input onBlur={this.showData2} ref={this.myRef2} type="text" placeholder="失去焦点提示数据"/>&nbsp;\n               </div>\n           )\n       }\n       \n       \n       1\n       2\n       3\n       4\n       5\n       6\n       7\n       8\n       9\n       10\n       11\n       12\n       13\n       14\n       15\n       16\n       17\n       \n\n> 总结\n\n 1. 通过 onXxx 属性指定事件处理函数（注意大小写）\n    \n    1. React 使用的是自定义（合成）事件, 而不是使用的原生 DOM 事件：为了更好的兼容性\n    2. React 中的事件是通过事件委托方式处理的（委托给组件最外层的元素）：为了的高效\n\n 2. 通过 event.target 得到发生事件的 DOM 元素对象：不要过度使用 ref\n    \n    1. 如果需要一个标签事件响应另一个标签则使用 ref\n    2. 如果事件响应仅在当前标签，该事件的第一个参数就是当前标签的事件对象，而 event.target 就是当前标签\n\n\n# 概念基础\n\n\n# 虚拟 DOM\n\n学习完三大基础，现在了解 React 的核心：虚拟 DOM。\n\n虚拟 DOM：React 把虚拟 DOM 渲染为真实 DOM。\n\n> 举例\n\n假设原生 DOM 是 a 和 b，在次基础上加上 c，则原生 DOM 是把原来的 a 和 b 去掉，重新加入 a 和 b 和 c。\n\n但是虚拟 DOM 会去找是否有 a 和 b，有的话则直接在后面追加 c，无需去掉 a 和 b。\n\n> 总结\n\n * 原生 DOM：替换原来的元素：100 个元素变成 101 个元素（加 1 个元素），则前面的 100 个元素先去掉，再加上 101 个元素，即需要渲染 101 次，不判断是否重复，效率低\n\n * 虚拟 DOM：增加新的元素：100 元素变成 101 元素（加 1 个元素），先判断前面的 100 元素一样，则需要渲染 1 次，因为前面 100 元素已经有了\n\n\n# 函数组件\n\n创建一个函数，元素在函数里进行 return，最后在 render 渲染。\n\n// 1.创建函数式组件\nfunction MyComponent(){\n    console.log(this); // 此处的 this 是 undefined，因为 babel 编译后开启了严格模式\n    return <h2>我是用函数定义的组件(适用于【简单组件】的定义)</h2>\n}\n// 2.渲染组件到页面\nReactDOM.render(<MyComponent/>,document.getElementById(\'test\'))\n/* \n    执行了 ReactDOM.render(<MyComponent/>....... 之后，发生了什么？\n    1.React 解析组件标签，找到了 MyComponent 组件。\n    2.发现组件是使用函数定义的，随后调用该函数，将返回的虚拟 DOM 转为真实 DOM，随后呈现在页面中。\n*/\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 类式组件\n\n创建一个类，元素在函数里进行 return，最后在 render 渲染。\n\nclass MyComponent extends React.Component {\n    render(){\n        // render 是放在哪里的？—— MyComponent 的原型对象上，供实例使用。\n        // render 中的 this 是谁？—— MyComponent 的实例对象 <=> MyComponent 组件实例对象。\n        console.log(\'render中的this:\',this);\n        return <h2>我是用类定义的组件(适用于【复杂组件】的定义)</h2>\n    }\n}\n// 2.渲染组件到页面\nReactDOM.render(<MyComponent/>,document.getElementById(\'test\'))\n/* \n    执行了 ReactDOM.render(<MyComponent/>....... 之后，发生了什么？\n    1.React 解析组件标签，找到了 MyComponent 组件。\n    2.发现组件是使用类定义的，随后 new 出来该类的实例，并通过该实例调用到原型上的 render 方法。\n    3.将 render 返回的虚拟 DOM 转为真实 DOM，随后呈现在页面中。\n*/\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 受控组件\n\n受控组件：现存 现取 现用，不依赖状态 state。\n\n> 例子\n\n直接在标签里存入 input 数据，不存放到 state。\n\n直接在表单提交的时候，去获取 input 数据，并上传\n\n<!DOCTYPE html>\n<html lang="en">\n<head>\n   <meta charset="UTF-8">\n   <title>1_非受控组件</title>\n</head>\n<body>\n   \x3c!-- 准备好一个“容器” --\x3e\n   <div id="test"></div>\n   \n   \x3c!-- 引入react核心库 --\x3e\n   <script type="text/javascript" src="../js/react.development.js"><\/script>\n   \x3c!-- 引入react-dom，用于支持react操作DOM --\x3e\n   <script type="text/javascript" src="../js/react-dom.development.js"><\/script>\n   \x3c!-- 引入babel，用于将jsx转为js --\x3e\n   <script type="text/javascript" src="../js/babel.min.js"><\/script>\n\n   <script type="text/babel">\n      //创建组件\n      class Login extends React.Component{\n         handleSubmit = (event)=>{\n            event.preventDefault() //阻止表单提交\n            const {username,password} = this\n            alert(`你输入的用户名是：${username.value},你输入的密码是：${password.value}`)\n         }\n         render(){\n            return(\n               <form onSubmit={this.handleSubmit}>\n                  用户名：<input ref={c => this.username = c} type="text" name="username"/>\n                  密码：<input ref={c => this.password = c} type="password" name="password"/>\n                  <button>登录</button>\n               </form>\n            )\n         }\n      }\n      //渲染组件\n      ReactDOM.render(<Login/>,document.getElementById(\'test\'))\n   <\/script>\n</body>\n</html>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n\n\n> 例子\n\n非受控组件：先存入状态 state 里，然后去状态 state 里获取数据，上传数据\n\n<!DOCTYPE html>\n<html lang="en">\n<head>\n   <meta charset="UTF-8">\n   <title>2_受控组件</title>\n</head>\n<body>\n   \x3c!-- 准备好一个“容器” --\x3e\n   <div id="test"></div>\n   \n   \x3c!-- 引入react核心库 --\x3e\n   <script type="text/javascript" src="../js/react.development.js"><\/script>\n   \x3c!-- 引入react-dom，用于支持react操作DOM --\x3e\n   <script type="text/javascript" src="../js/react-dom.development.js"><\/script>\n   \x3c!-- 引入babel，用于将jsx转为js --\x3e\n   <script type="text/javascript" src="../js/babel.min.js"><\/script>\n\n   <script type="text/babel">\n      //创建组件\n      class Login extends React.Component{\n\n         //初始化状态\n         state = {\n            username:\'\', //用户名\n            password:\'\' //密码\n         }\n\n         //保存用户名到状态中\n         saveUsername = (event)=>{\n            this.setState({username:event.target.value})\n         }\n\n         //保存密码到状态中\n         savePassword = (event)=>{\n            this.setState({password:event.target.value})\n         }\n\n         //表单提交的回调\n         handleSubmit = (event)=>{\n            event.preventDefault() //阻止表单提交\n            const {username,password} = this.state\n            alert(`你输入的用户名是：${username},你输入的密码是：${password}`)\n         }\n\n         render(){\n            return(\n               <form onSubmit={this.handleSubmit}>\n                  用户名：<input onChange={this.saveUsername} type="text" name="username"/>\n                  密码：<input onChange={this.savePassword} type="password" name="password"/>\n                  <button>登录</button>\n               </form>\n            )\n         }\n      }\n      //渲染组件\n      ReactDOM.render(<Login/>,document.getElementById(\'test\'))\n   <\/script>\n</body>\n</html>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n\n\n\n# 生命周期\n\nmount(挂载)\n\nreact调用render方法，把虚拟DOM解析为真实DOM，挂载到页面上\n\n所以生命周期就是围绕挂载前后进行\n\nunmount(卸载)\n\n如果需要把render挂载的页面清除掉，则需要卸载\n\n\n# 旧版生命周期\n\n初始化阶段: 由 ReactDOM.render() 触发（初次渲染），依次触发顺序：\n\n 1. constructor()：构造器\n\n 2. componentWillMount()：组件将要挂载\n\n 3. render()：挂载\n\n 4. componentDidMount()：组件已经挂载，常用 的钩子函数，did 为 do 的过去式\n    \n    一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息。\n\n更新阶段: 由组件内部 this.setSate() 或父组件 render 触发，依次触发顺序\n\n 1. componentWillReceiveProps：组件将收到父组件的参数，注意：第二次以上父组件传参才被调用，第一次指挂载页面的时候，不会触发\n\n 2. shouldComponentUpdate()：组件是否更新，在方法里需要只当返回值为布尔类型，false 则不会执行下面操作 234，重写该方法必须指定布尔值\n\n 3. componentWillUpdate()：组件将要更新\n\n 4. render()：挂载更新，必须使用 的一个钩子函数\n\n 5. componentDidUpdate()：组件已经更新，did 为 do 的过去式\n\n卸载组件: 由 ReactDOM.unmountComponentAtNode() 触发，依次触发顺序：\n\n 1. componentWillUnmount()：需要一个函数调用该函数，参数为卸载的组件，该组件的所有内容包括自己被清除，常用\n    \n    一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息。\n    \n    // 卸载组件按钮的回调\n    death = ()=>{\n       ReactDOM.unmountComponentAtNode(document.getElementById(\'test\'))\n    }\n    <button onClick={this.death}>卸载组件</button>\n    \n    \n    1\n    2\n    3\n    4\n    5\n    \n\n\n\n\n# 新版生命周期\n\n初始化阶段: 由 ReactDOM.render() 触发（初次渲染），依次触发顺序：\n\n 1. constructor()：构造器\n\n 2. getDerivedStateFromProps：从父组件传来的 props 里获取 state，替代类原来的 state\n\n 3. render()：挂载\n\n 4. componentDidMount()：组件已经挂载，常用 的钩子函数，did 为 do 的过去式\n    \n    一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息\n\n更新阶段: 由组件内部 this.setSate() 或父组件重新 render 触发，依次触发顺序：\n\n 1. getDerivedStateFromProps：从父组件传来的 props 里获取 state，替代类原来的 state\n\n 2. shouldComponentUpdate()\n\n 3. render()\n\n 4. getSnapshotBeforeUpdate()：更新前从快照获取数据，提供更新原来的数据可以存储，需要返回值，返回给5的第三个参数里\n\n 5. componentDidUpdate()：页面更新完成后，有三个参数，默认第一个是更新前的 props，第二个是更新前的 state，第三个是 4 快照传来的值\n\n卸载组件: 由 ReactDOM.unmountComponentAtNode() 触发，依次触发顺序：\n\n 1. componentWillUnmount()：常用\n    \n    一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息。\n\n> 新函数钩子举例\n\n// 若 state 的值在任何时候都取决于 props，那么可以使用 getDerivedStateFromProps\nstatic getDerivedStateFromProps(props,state){\n   console.log(\'getDerivedStateFromProps\',props,state);\n   return null\n}\n// 在更新之前获取快照\ngetSnapshotBeforeUpdate(){\n   console.log(\'getSnapshotBeforeUpdate\');\n   return \'kele\'  // 返回给 componentDidUpdate()\n}\n// 组件更新完毕的钩子\n// 更新前的 props，更新前的 state，以及 getSnapshotBeforeUpdate 的返回值\ncomponentDidUpdate(preProps,preState,snapshotValue){\n   console.log(\'Count---componentDidUpdate\',preProps,preState,snapshotValue);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n\ngetSnapshotBeforeUpdate 的使用场景：\n\n模拟新闻\n\n<!DOCTYPE html>\n<html lang="en">\n<head>\n   <meta charset="UTF-8">\n   <title>4_getSnapShotBeforeUpdate的使用场景</title>\n   <style>\n      .list{\n         width: 200px;\n         height: 150px;\n         background-color: skyblue;\n         overflow: auto;\n      }\n      .news{\n         height: 30px;\n      }\n   </style>\n</head>\n<body>\n   \x3c!-- 准备好一个“容器” --\x3e\n   <div id="test"></div>\n   \n   \x3c!-- 引入react核心库 --\x3e\n   <script type="text/javascript" src="../js/17.0.1/react.development.js"><\/script>\n   \x3c!-- 引入react-dom，用于支持react操作DOM --\x3e\n   <script type="text/javascript" src="../js/17.0.1/react-dom.development.js"><\/script>\n   \x3c!-- 引入babel，用于将jsx转为js --\x3e\n   <script type="text/javascript" src="../js/17.0.1/babel.min.js"><\/script>\n\n   <script type="text/babel">\n      class NewsList extends React.Component{\n\n         state = {newsArr:[]}\n\n         componentDidMount(){\n            setInterval(() => {\n               //获取原状态\n               const {newsArr} = this.state\n               //模拟一条新闻\n               const news = \'新闻\'+ (newsArr.length+1)\n               //更新状态\n               this.setState({newsArr:[news,...newsArr]})\n            }, 1000);\n         }\n\n         getSnapshotBeforeUpdate(){\n            return this.refs.list.scrollHeight\n         }\n\n         componentDidUpdate(preProps,preState,height){\n            this.refs.list.scrollTop += this.refs.list.scrollHeight - height\n         }\n\n         render(){\n            return(\n               <div className="list" ref="list">\n                  {\n                     this.state.newsArr.map((n,index)=>{\n                        return <div key={index} className="news">{n}</div>\n                     })\n                  }\n               </div>\n            )\n         }\n      }\n      ReactDOM.render(<NewsList/>,document.getElementById(\'test\'))\n   <\/script>\n</body>\n</html>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n',normalizedContent:' * 三大核心\n   * state\n   * props\n   * ref\n * 概念基础\n   * 虚拟 dom\n   * 函数组件\n   * 类式组件\n   * 受控组件\n * 生命周期\n   * 旧版生命周期\n   * 新版生命周期\n\n\n\n\n# 三大核心\n\n\n# state\n\n作用：存储数据的容器。\n\n写在 construct 里\n\nexport default class demo extends component{\n    construct(props){\n        super(props)\n        this.state = {\n            xxx:xxx\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n写在类里（推荐）\n\nexport default class demo extends component{\n    state = {\n        xxx:xxx\n    }\n}\n\n\n1\n2\n3\n4\n5\n\n\n其他位置只需保证 this 是指向类的实例对象，即可通过 this.state.xxx 取到数据。\n\n\n# props\n\n> 作用\n\n获得父组件传来的值。\n\n 1. 通过便签传值：key=value 传值\n\n 2. 对象传值\n    \n    person 的 props 里有三个属性：\n    \n    reactdom.render(<person name="jerry" age={19}  sex="男"/>,document.getelementbyid(\'test1\'))\n    \n    \n    1\n    \n\n> 方式\n\n 1. 第一种：key=value 传值\n    \n    * 缺点：当值多的时候，便签里的 key=value 代码不优雅\n\n 2. 第二种：对象传值\n    \n    * 通过 {...xxx} 传值\n    \n    * 前提：对象内的名字和接收的名字一致\n      \n      const p = {name:\'老刘\',age:18,sex:\'女\'}\n      reactdom.render(<person {...p}/>,document.getelementbyid(\'test3\'))\n      \n      \n      1\n      2\n      \n    \n    * person 组件接收\n      \n      const {name,age,sex} = this.props\n      \n      \n      1\n      \n\n> 对 props 的内容进行限制\n\n写在类里面，需要使用 static 修饰\n\nclass person extends react.component{  \n    // 对标签属性进行类型、必要性的限制\n    static proptypes = {\n        name:proptypes.string.isrequired, // 限制 name 必传，且为字符串\n        sex:proptypes.string, // 限制 sex 为字符串\n        age:proptypes.number, // 限制 age 为数值\n    }\n\n    // 指定默认标签属性值\n    static defaultprops = {\n        sex:\'男\',// sex 默认值为男\n        age:18 // age 默认值为 18\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n写在类外面，通过类名 .xx 修饰\n\nclass person extends react.component{\n    // ......\n}\n// 对标签属性进行类型、必要性的限制\nperson.proptypes = { // 固定\n    name:proptypes.string.isrequired, // 限制 name 必传，且为字符串\n    sex:proptypes.string, // 限制 sex 为字符串\n    age:proptypes.number, // 限制 age 为数值\n    speak:proptypes.func, // 限制 speak 为函数\n}\n// 指定默认标签属性值\nperson.defaultprops = {\n    sex:\'男\', // sex 默认值为男\n    age:18 // age 默认值为 18\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n写在函数外面，通过函数名 .xx 修饰\n\nfunction person (props){\n    const {name,age,sex} = props\n}\nperson.proptypes = {\n    name:proptypes.string.isrequired, // 限制 name 必传，且为字符串\n    sex:proptypes.string, // 限制 sex 为字符串\n    age:proptypes.number, // 限制 age 为数值\n}\n\n// 指定默认标签属性值\nperson.defaultprops = {\n    sex:\'男\', // sex 默认值为男\n    age:18 // age 默认值为 18\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# ref\n\n> 作用\n\n存储标签，一般用于表单标签，获取表单标签的值。\n\n> 使用\n\n 1. 字符串形式（官方不推荐，影响效率）\n    \n    在 x 标签内加入 ref="xxx"，react 自动把 xxx:x 放入 refs 中，通过 this.refs.xxx 调用 x\n    \n    // 展示左侧输入框的数据\n    showdata = ()=>{\n        const {input1} = this.refs\n        alert(input1.value)\n    }\n    \n    render(){\n        return(\n            <div>\n                <input ref="input1" type="text" placeholder="点击按钮提示数据"/>&nbsp;\n                <button onclick={this.showdata}>点我提示左侧的数据</button>&nbsp;\n            </div>\n        )\n    }\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    11\n    12\n    13\n    14\n    \n\n 2. 回调形式。开发常用\n    \n    1. 在 x 标签使用 ref="e => this.xxx=e"，其中 xxx 是一个回调函数，记得使用箭头函数把 this 指向类的实例\n    \n    2. e 是 react 自动放入的一个参数，值是当前标签，原理就是在类里创建一个 xxx，通过变量 = 值的方式，让 xxx=e 此时在别的函数调用 this.xxx 即可获得当前标签\n    \n    3. 缺点：每次更新状态，调用 render 时，ref 会被调用两次，第一次的参数 e 为 null，第二次才是当前标签\n       \n       * 原因：react 在重新调用 render 前，会把 render 内清除掉，此时再清除 xxx 时，发现有一个回调函数，所以把 null 传进去，第二次就是渲染页面，把当前标签传入\n       \n       * 总结：状态 state 更新，render 先调用一次进行自我销毁，然后再调用一次进行新的渲染，第一次已经销毁，所以 e 为 null，第二次才是要求\n       \n       该缺点官方明确说无关紧要\n       \n       showdata = ()=>{\n           const {input1} = this\n           alert(input1.value)\n       }\n       render(){\n           return(\n               <div>\n                   <input ref={e => this.input1 = e } type="text" placeholder="点击按钮提示数据"/>&nbsp;\n                   <button onclick={this.showdata}>点我提示左侧的数据</button>&nbsp;\n               </div>\n           )\n       }\n       \n       \n       1\n       2\n       3\n       4\n       5\n       6\n       7\n       8\n       9\n       10\n       11\n       12\n       \n    \n    4. 函数形式\n       \n       * 和回调形式一样，只不过把标签只是调用函数名，函数实现方式放到类里进行实现\n       \n       * ref="this.xxx"，在类里实现 xxx 函数，xxx 函数会传入一个参数，该参数就是 xxx 所在的标签\n    \n    5. createref 创建 ref\n       \n       * 官方力推的 api\n       \n       * 缺点：创建的 ref 只能存储一个标签，多个标签需要创建多个 ref\n       \n       /* \n         react.createref调用后可以返回一个容器，该容器可以存储被ref所标识的节点,该容器是“专人专用”的\n       */\n       myref = react.createref()\n       // 展示左侧输入框的数据\n       showdata = ()=>{\n           alert(this.myref.current.value);\n       }\n       render(){\n           return(\n               <div>\n                   <input ref={this.myref} type="text" placeholder="点击按钮提示数据"/>&nbsp;\n                   <button onclick={this.showdata}>点我提示左侧的数据</button>&nbsp;\n                   <input onblur={this.showdata2} ref={this.myref2} type="text" placeholder="失去焦点提示数据"/>&nbsp;\n               </div>\n           )\n       }\n       \n       \n       1\n       2\n       3\n       4\n       5\n       6\n       7\n       8\n       9\n       10\n       11\n       12\n       13\n       14\n       15\n       16\n       17\n       \n\n> 总结\n\n 1. 通过 onxxx 属性指定事件处理函数（注意大小写）\n    \n    1. react 使用的是自定义（合成）事件, 而不是使用的原生 dom 事件：为了更好的兼容性\n    2. react 中的事件是通过事件委托方式处理的（委托给组件最外层的元素）：为了的高效\n\n 2. 通过 event.target 得到发生事件的 dom 元素对象：不要过度使用 ref\n    \n    1. 如果需要一个标签事件响应另一个标签则使用 ref\n    2. 如果事件响应仅在当前标签，该事件的第一个参数就是当前标签的事件对象，而 event.target 就是当前标签\n\n\n# 概念基础\n\n\n# 虚拟 dom\n\n学习完三大基础，现在了解 react 的核心：虚拟 dom。\n\n虚拟 dom：react 把虚拟 dom 渲染为真实 dom。\n\n> 举例\n\n假设原生 dom 是 a 和 b，在次基础上加上 c，则原生 dom 是把原来的 a 和 b 去掉，重新加入 a 和 b 和 c。\n\n但是虚拟 dom 会去找是否有 a 和 b，有的话则直接在后面追加 c，无需去掉 a 和 b。\n\n> 总结\n\n * 原生 dom：替换原来的元素：100 个元素变成 101 个元素（加 1 个元素），则前面的 100 个元素先去掉，再加上 101 个元素，即需要渲染 101 次，不判断是否重复，效率低\n\n * 虚拟 dom：增加新的元素：100 元素变成 101 元素（加 1 个元素），先判断前面的 100 元素一样，则需要渲染 1 次，因为前面 100 元素已经有了\n\n\n# 函数组件\n\n创建一个函数，元素在函数里进行 return，最后在 render 渲染。\n\n// 1.创建函数式组件\nfunction mycomponent(){\n    console.log(this); // 此处的 this 是 undefined，因为 babel 编译后开启了严格模式\n    return <h2>我是用函数定义的组件(适用于【简单组件】的定义)</h2>\n}\n// 2.渲染组件到页面\nreactdom.render(<mycomponent/>,document.getelementbyid(\'test\'))\n/* \n    执行了 reactdom.render(<mycomponent/>....... 之后，发生了什么？\n    1.react 解析组件标签，找到了 mycomponent 组件。\n    2.发现组件是使用函数定义的，随后调用该函数，将返回的虚拟 dom 转为真实 dom，随后呈现在页面中。\n*/\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 类式组件\n\n创建一个类，元素在函数里进行 return，最后在 render 渲染。\n\nclass mycomponent extends react.component {\n    render(){\n        // render 是放在哪里的？—— mycomponent 的原型对象上，供实例使用。\n        // render 中的 this 是谁？—— mycomponent 的实例对象 <=> mycomponent 组件实例对象。\n        console.log(\'render中的this:\',this);\n        return <h2>我是用类定义的组件(适用于【复杂组件】的定义)</h2>\n    }\n}\n// 2.渲染组件到页面\nreactdom.render(<mycomponent/>,document.getelementbyid(\'test\'))\n/* \n    执行了 reactdom.render(<mycomponent/>....... 之后，发生了什么？\n    1.react 解析组件标签，找到了 mycomponent 组件。\n    2.发现组件是使用类定义的，随后 new 出来该类的实例，并通过该实例调用到原型上的 render 方法。\n    3.将 render 返回的虚拟 dom 转为真实 dom，随后呈现在页面中。\n*/\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 受控组件\n\n受控组件：现存 现取 现用，不依赖状态 state。\n\n> 例子\n\n直接在标签里存入 input 数据，不存放到 state。\n\n直接在表单提交的时候，去获取 input 数据，并上传\n\n<!doctype html>\n<html lang="en">\n<head>\n   <meta charset="utf-8">\n   <title>1_非受控组件</title>\n</head>\n<body>\n   \x3c!-- 准备好一个“容器” --\x3e\n   <div id="test"></div>\n   \n   \x3c!-- 引入react核心库 --\x3e\n   <script type="text/javascript" src="../js/react.development.js"><\/script>\n   \x3c!-- 引入react-dom，用于支持react操作dom --\x3e\n   <script type="text/javascript" src="../js/react-dom.development.js"><\/script>\n   \x3c!-- 引入babel，用于将jsx转为js --\x3e\n   <script type="text/javascript" src="../js/babel.min.js"><\/script>\n\n   <script type="text/babel">\n      //创建组件\n      class login extends react.component{\n         handlesubmit = (event)=>{\n            event.preventdefault() //阻止表单提交\n            const {username,password} = this\n            alert(`你输入的用户名是：${username.value},你输入的密码是：${password.value}`)\n         }\n         render(){\n            return(\n               <form onsubmit={this.handlesubmit}>\n                  用户名：<input ref={c => this.username = c} type="text" name="username"/>\n                  密码：<input ref={c => this.password = c} type="password" name="password"/>\n                  <button>登录</button>\n               </form>\n            )\n         }\n      }\n      //渲染组件\n      reactdom.render(<login/>,document.getelementbyid(\'test\'))\n   <\/script>\n</body>\n</html>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n\n\n> 例子\n\n非受控组件：先存入状态 state 里，然后去状态 state 里获取数据，上传数据\n\n<!doctype html>\n<html lang="en">\n<head>\n   <meta charset="utf-8">\n   <title>2_受控组件</title>\n</head>\n<body>\n   \x3c!-- 准备好一个“容器” --\x3e\n   <div id="test"></div>\n   \n   \x3c!-- 引入react核心库 --\x3e\n   <script type="text/javascript" src="../js/react.development.js"><\/script>\n   \x3c!-- 引入react-dom，用于支持react操作dom --\x3e\n   <script type="text/javascript" src="../js/react-dom.development.js"><\/script>\n   \x3c!-- 引入babel，用于将jsx转为js --\x3e\n   <script type="text/javascript" src="../js/babel.min.js"><\/script>\n\n   <script type="text/babel">\n      //创建组件\n      class login extends react.component{\n\n         //初始化状态\n         state = {\n            username:\'\', //用户名\n            password:\'\' //密码\n         }\n\n         //保存用户名到状态中\n         saveusername = (event)=>{\n            this.setstate({username:event.target.value})\n         }\n\n         //保存密码到状态中\n         savepassword = (event)=>{\n            this.setstate({password:event.target.value})\n         }\n\n         //表单提交的回调\n         handlesubmit = (event)=>{\n            event.preventdefault() //阻止表单提交\n            const {username,password} = this.state\n            alert(`你输入的用户名是：${username},你输入的密码是：${password}`)\n         }\n\n         render(){\n            return(\n               <form onsubmit={this.handlesubmit}>\n                  用户名：<input onchange={this.saveusername} type="text" name="username"/>\n                  密码：<input onchange={this.savepassword} type="password" name="password"/>\n                  <button>登录</button>\n               </form>\n            )\n         }\n      }\n      //渲染组件\n      reactdom.render(<login/>,document.getelementbyid(\'test\'))\n   <\/script>\n</body>\n</html>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n\n\n\n# 生命周期\n\nmount(挂载)\n\nreact调用render方法，把虚拟dom解析为真实dom，挂载到页面上\n\n所以生命周期就是围绕挂载前后进行\n\nunmount(卸载)\n\n如果需要把render挂载的页面清除掉，则需要卸载\n\n\n# 旧版生命周期\n\n初始化阶段: 由 reactdom.render() 触发（初次渲染），依次触发顺序：\n\n 1. constructor()：构造器\n\n 2. componentwillmount()：组件将要挂载\n\n 3. render()：挂载\n\n 4. componentdidmount()：组件已经挂载，常用 的钩子函数，did 为 do 的过去式\n    \n    一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息。\n\n更新阶段: 由组件内部 this.setsate() 或父组件 render 触发，依次触发顺序\n\n 1. componentwillreceiveprops：组件将收到父组件的参数，注意：第二次以上父组件传参才被调用，第一次指挂载页面的时候，不会触发\n\n 2. shouldcomponentupdate()：组件是否更新，在方法里需要只当返回值为布尔类型，false 则不会执行下面操作 234，重写该方法必须指定布尔值\n\n 3. componentwillupdate()：组件将要更新\n\n 4. render()：挂载更新，必须使用 的一个钩子函数\n\n 5. componentdidupdate()：组件已经更新，did 为 do 的过去式\n\n卸载组件: 由 reactdom.unmountcomponentatnode() 触发，依次触发顺序：\n\n 1. componentwillunmount()：需要一个函数调用该函数，参数为卸载的组件，该组件的所有内容包括自己被清除，常用\n    \n    一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息。\n    \n    // 卸载组件按钮的回调\n    death = ()=>{\n       reactdom.unmountcomponentatnode(document.getelementbyid(\'test\'))\n    }\n    <button onclick={this.death}>卸载组件</button>\n    \n    \n    1\n    2\n    3\n    4\n    5\n    \n\n\n\n\n# 新版生命周期\n\n初始化阶段: 由 reactdom.render() 触发（初次渲染），依次触发顺序：\n\n 1. constructor()：构造器\n\n 2. getderivedstatefromprops：从父组件传来的 props 里获取 state，替代类原来的 state\n\n 3. render()：挂载\n\n 4. componentdidmount()：组件已经挂载，常用 的钩子函数，did 为 do 的过去式\n    \n    一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息\n\n更新阶段: 由组件内部 this.setsate() 或父组件重新 render 触发，依次触发顺序：\n\n 1. getderivedstatefromprops：从父组件传来的 props 里获取 state，替代类原来的 state\n\n 2. shouldcomponentupdate()\n\n 3. render()\n\n 4. getsnapshotbeforeupdate()：更新前从快照获取数据，提供更新原来的数据可以存储，需要返回值，返回给5的第三个参数里\n\n 5. componentdidupdate()：页面更新完成后，有三个参数，默认第一个是更新前的 props，第二个是更新前的 state，第三个是 4 快照传来的值\n\n卸载组件: 由 reactdom.unmountcomponentatnode() 触发，依次触发顺序：\n\n 1. componentwillunmount()：常用\n    \n    一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息。\n\n> 新函数钩子举例\n\n// 若 state 的值在任何时候都取决于 props，那么可以使用 getderivedstatefromprops\nstatic getderivedstatefromprops(props,state){\n   console.log(\'getderivedstatefromprops\',props,state);\n   return null\n}\n// 在更新之前获取快照\ngetsnapshotbeforeupdate(){\n   console.log(\'getsnapshotbeforeupdate\');\n   return \'kele\'  // 返回给 componentdidupdate()\n}\n// 组件更新完毕的钩子\n// 更新前的 props，更新前的 state，以及 getsnapshotbeforeupdate 的返回值\ncomponentdidupdate(preprops,prestate,snapshotvalue){\n   console.log(\'count---componentdidupdate\',preprops,prestate,snapshotvalue);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n\ngetsnapshotbeforeupdate 的使用场景：\n\n模拟新闻\n\n<!doctype html>\n<html lang="en">\n<head>\n   <meta charset="utf-8">\n   <title>4_getsnapshotbeforeupdate的使用场景</title>\n   <style>\n      .list{\n         width: 200px;\n         height: 150px;\n         background-color: skyblue;\n         overflow: auto;\n      }\n      .news{\n         height: 30px;\n      }\n   </style>\n</head>\n<body>\n   \x3c!-- 准备好一个“容器” --\x3e\n   <div id="test"></div>\n   \n   \x3c!-- 引入react核心库 --\x3e\n   <script type="text/javascript" src="../js/17.0.1/react.development.js"><\/script>\n   \x3c!-- 引入react-dom，用于支持react操作dom --\x3e\n   <script type="text/javascript" src="../js/17.0.1/react-dom.development.js"><\/script>\n   \x3c!-- 引入babel，用于将jsx转为js --\x3e\n   <script type="text/javascript" src="../js/17.0.1/babel.min.js"><\/script>\n\n   <script type="text/babel">\n      class newslist extends react.component{\n\n         state = {newsarr:[]}\n\n         componentdidmount(){\n            setinterval(() => {\n               //获取原状态\n               const {newsarr} = this.state\n               //模拟一条新闻\n               const news = \'新闻\'+ (newsarr.length+1)\n               //更新状态\n               this.setstate({newsarr:[news,...newsarr]})\n            }, 1000);\n         }\n\n         getsnapshotbeforeupdate(){\n            return this.refs.list.scrollheight\n         }\n\n         componentdidupdate(preprops,prestate,height){\n            this.refs.list.scrolltop += this.refs.list.scrollheight - height\n         }\n\n         render(){\n            return(\n               <div classname="list" ref="list">\n                  {\n                     this.state.newsarr.map((n,index)=>{\n                        return <div key={index} classname="news">{n}</div>\n                     })\n                  }\n               </div>\n            )\n         }\n      }\n      reactdom.render(<newslist/>,document.getelementbyid(\'test\'))\n   <\/script>\n</body>\n</html>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n',charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"React - 脚手架及使用",frontmatter:{title:"React - 脚手架及使用",date:"2022-02-21T12:39:33.000Z",permalink:"/react/scaffolding/",categories:["React"],tags:["React"],readingShow:"top"},regularPath:"/10.%E5%89%8D%E7%AB%AF/50.React/03.React%20-%20%E8%84%9A%E6%89%8B%E6%9E%B6%E5%8F%8A%E4%BD%BF%E7%94%A8.html",relativePath:"10.前端/50.React/03.React - 脚手架及使用.md",key:"v-ff64be9e",path:"/react/scaffolding/",headers:[{level:2,title:"创建脚手架",slug:"创建脚手架",normalizedTitle:"创建脚手架",charIndex:3},{level:2,title:"todoList案例相关知识点",slug:"todolist案例相关知识点",normalizedTitle:"todolist案例相关知识点",charIndex:12},{level:2,title:"github搜索案例相关知识点",slug:"github搜索案例相关知识点",normalizedTitle:"github搜索案例相关知识点",charIndex:31},{level:2,title:"脚手架配置代理",slug:"脚手架配置代理",normalizedTitle:"脚手架配置代理",charIndex:50},{level:3,title:"单个 url，proxy 代理",slug:"单个-url-proxy-代理",normalizedTitle:"单个 url，proxy 代理",charIndex:63},{level:3,title:"多个 url，proxy 代理",slug:"多个-url-proxy-代理",normalizedTitle:"多个 url，proxy 代理",charIndex:84}],headersStr:"创建脚手架 todoList案例相关知识点 github搜索案例相关知识点 脚手架配置代理 单个 url，proxy 代理 多个 url，proxy 代理",content:" * 创建脚手架\n * todoList案例相关知识点\n * github搜索案例相关知识点\n * 脚手架配置代理\n   * 单个 url，proxy 代理\n   * 多个 url，proxy 代理\n\n\n\n\n# 创建脚手架\n\ncreate-react-app 你的项目名称\n\n\n1\n\n\n\n# todoList案例相关知识点\n\n 1. 拆分组件、实现静态组件，注意：className、style 的写法\n\n 2. 动态初始化列表，如何确定将数据放在哪个组件的 state 中？\n    \n    * 某个组件使用：放在其自身的 state 中\n    \n    * 某些组件使用：放在他们共同的父组件 state 中（官方称此操作为：状态提升）\n\n 3. 关于父子之间通信：\n    \n    * 【父组件】给【子组件】传递数据：通过 props 传递\n    \n    * 【子组件】给【父组件】传递数据：通过 props 传递，要求父提前给子传递一个函数\n\n 4. 注意 defaultChecked 和 checked 的区别，类似的还有：defaultValue 和 value\n    \n    * defaultChecked：页面挂载只执行一次，后续改变后不会触发\n    \n    * checked：页面挂载时执行，并且页面更新时执行\n\n 5. 状态在哪里，操作状态的方法就在哪里\n\n\n# github搜索案例相关知识点\n\n 1. 设计状态时要考虑全面，例如带有网络请求的组件，要考虑请求失败怎么办\n\n 2. ES6 小知识点：解构赋值 + 重命名\n    \n    let obj = {a:{b:1}}\n    const {a} = obj; // 传统解构赋值\n    const {a:{b}} = obj; // 连续解构赋值\n    const {a:{b:value}} = obj; // 连续解构赋值 + 重命名\n    \n    \n    1\n    2\n    3\n    4\n    \n\n 3. 消息订阅与发布机制\n    \n    1. 先订阅，再发布（理解：有一种隔空对话的感觉）\n    \n    2. 适用于任意组件间通信\n    \n    3. 要在组件的 componentWillUnmount 中取消订阅\n       \n       import PubSub from 'pubsub-js'\n       \n       // 订阅\"报刊\"组件\n       ...\n       this.token = PubSub.subscribe('kele',(publishName,stateObj)=>{ // 订阅 kele 的\"报刊\"\n           this.setState(stateObj)\n       })\n       ...\n       // 发布\"报刊\"组件\n       ...\n       PubSub.publish('kele',{isFirst:false,isLoading:true}) // 发布 kele 的\"报刊\"\n       ...\n       \n       componentWillUnmount(){\n           PubSub.unsubscribe(this.token)\n       }\n       \n       \n       1\n       2\n       3\n       4\n       5\n       6\n       7\n       8\n       9\n       10\n       11\n       12\n       13\n       14\n       15\n       16\n       \n\n 4. fetch 发送请求（关注分离的设计思想）\n    \n    try {\n        const response= await fetch(`/api1/search/users2?q=${keyWord}`)\n        const data = await response.json()  // 才是需要的数据\n        console.log(data);\n        } catch (error) {\n        \tconsole.log('请求出错',error);\n    }\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    \n\n\n# 脚手架配置代理\n\n\n# 单个 url，proxy 代理\n\n在 package.json 里配置代理对象\n\n\"proxy\":\"http://域名:端口号\"\n\n\n1\n\n\n当请求你的端口时候，如果本地端口没有内容，则由代理对象去配置端口号请求内容。\n\n前提：请求的端口和域名必须是自己的，因为代理对象就是自己的端口和域名，只不过代理对象可以跨域，但是你不能请求跨域的域名和端口，并且请求内容 本地不存在，因为默认先去本地看，没有再通过代理对象进行跨域。\n\n> 举例\n\n在 package.json 中追加如下配置\n\n\"proxy\":\"http://localhost:5000\"\n\n\n1\n\n\n说明：\n\n 1. 优点：配置简单，前端请求资源时可以不加任何前缀\n\n 2. 缺点：不能配置多个代理\n\n 3. 工作方式：上述方式配置代理，当请求了 3000 不存在的资源时，那么该请求会转发给 5000（优先匹配前端资源）\n\n\n# 多个 url，proxy 代理\n\n 1. 第一步：创建代理配置文件\n    \n    在 src 下创建配置文件：src/setupProxy.js，固定位置\n\n 2. 编写 setupProxy.js 配置具体代理规则：\n\nconst proxy = require('http-proxy-middleware')\n\nmodule.exports = function(app) {\n    app.use(\n        proxy('/api1', {  //api1是需要转发的请求(所有带有/api1前缀的请求都会转发给5000)\n            target: 'http://localhost:5000', //配置转发目标地址(能返回数据的服务器地址)\n            changeOrigin: true, //控制服务器接收到的请求头中host字段的值\n            /*\n          changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000\n          changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:3000\n          changeOrigin默认值为false，但我们一般将changeOrigin值设为true\n         */\n            pathRewrite: {'^/api1': ''} //去除请求前缀，保证交给后台服务器的是正常请求地址(必须配置)\n        }),\n        proxy('/api2', { \n            target: 'http://localhost:5001',\n            changeOrigin: true,\n            pathRewrite: {'^/api2': ''}\n        })\n    )\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n\n说明：\n\n 1. 优点：可以配置多个代理，可以灵活的控制请求是否走代理\n\n 2. 缺点：配置繁琐，前端请求资源时必须加前缀\n\n",normalizedContent:" * 创建脚手架\n * todolist案例相关知识点\n * github搜索案例相关知识点\n * 脚手架配置代理\n   * 单个 url，proxy 代理\n   * 多个 url，proxy 代理\n\n\n\n\n# 创建脚手架\n\ncreate-react-app 你的项目名称\n\n\n1\n\n\n\n# todolist案例相关知识点\n\n 1. 拆分组件、实现静态组件，注意：classname、style 的写法\n\n 2. 动态初始化列表，如何确定将数据放在哪个组件的 state 中？\n    \n    * 某个组件使用：放在其自身的 state 中\n    \n    * 某些组件使用：放在他们共同的父组件 state 中（官方称此操作为：状态提升）\n\n 3. 关于父子之间通信：\n    \n    * 【父组件】给【子组件】传递数据：通过 props 传递\n    \n    * 【子组件】给【父组件】传递数据：通过 props 传递，要求父提前给子传递一个函数\n\n 4. 注意 defaultchecked 和 checked 的区别，类似的还有：defaultvalue 和 value\n    \n    * defaultchecked：页面挂载只执行一次，后续改变后不会触发\n    \n    * checked：页面挂载时执行，并且页面更新时执行\n\n 5. 状态在哪里，操作状态的方法就在哪里\n\n\n# github搜索案例相关知识点\n\n 1. 设计状态时要考虑全面，例如带有网络请求的组件，要考虑请求失败怎么办\n\n 2. es6 小知识点：解构赋值 + 重命名\n    \n    let obj = {a:{b:1}}\n    const {a} = obj; // 传统解构赋值\n    const {a:{b}} = obj; // 连续解构赋值\n    const {a:{b:value}} = obj; // 连续解构赋值 + 重命名\n    \n    \n    1\n    2\n    3\n    4\n    \n\n 3. 消息订阅与发布机制\n    \n    1. 先订阅，再发布（理解：有一种隔空对话的感觉）\n    \n    2. 适用于任意组件间通信\n    \n    3. 要在组件的 componentwillunmount 中取消订阅\n       \n       import pubsub from 'pubsub-js'\n       \n       // 订阅\"报刊\"组件\n       ...\n       this.token = pubsub.subscribe('kele',(publishname,stateobj)=>{ // 订阅 kele 的\"报刊\"\n           this.setstate(stateobj)\n       })\n       ...\n       // 发布\"报刊\"组件\n       ...\n       pubsub.publish('kele',{isfirst:false,isloading:true}) // 发布 kele 的\"报刊\"\n       ...\n       \n       componentwillunmount(){\n           pubsub.unsubscribe(this.token)\n       }\n       \n       \n       1\n       2\n       3\n       4\n       5\n       6\n       7\n       8\n       9\n       10\n       11\n       12\n       13\n       14\n       15\n       16\n       \n\n 4. fetch 发送请求（关注分离的设计思想）\n    \n    try {\n        const response= await fetch(`/api1/search/users2?q=${keyword}`)\n        const data = await response.json()  // 才是需要的数据\n        console.log(data);\n        } catch (error) {\n        \tconsole.log('请求出错',error);\n    }\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    \n\n\n# 脚手架配置代理\n\n\n# 单个 url，proxy 代理\n\n在 package.json 里配置代理对象\n\n\"proxy\":\"http://域名:端口号\"\n\n\n1\n\n\n当请求你的端口时候，如果本地端口没有内容，则由代理对象去配置端口号请求内容。\n\n前提：请求的端口和域名必须是自己的，因为代理对象就是自己的端口和域名，只不过代理对象可以跨域，但是你不能请求跨域的域名和端口，并且请求内容 本地不存在，因为默认先去本地看，没有再通过代理对象进行跨域。\n\n> 举例\n\n在 package.json 中追加如下配置\n\n\"proxy\":\"http://localhost:5000\"\n\n\n1\n\n\n说明：\n\n 1. 优点：配置简单，前端请求资源时可以不加任何前缀\n\n 2. 缺点：不能配置多个代理\n\n 3. 工作方式：上述方式配置代理，当请求了 3000 不存在的资源时，那么该请求会转发给 5000（优先匹配前端资源）\n\n\n# 多个 url，proxy 代理\n\n 1. 第一步：创建代理配置文件\n    \n    在 src 下创建配置文件：src/setupproxy.js，固定位置\n\n 2. 编写 setupproxy.js 配置具体代理规则：\n\nconst proxy = require('http-proxy-middleware')\n\nmodule.exports = function(app) {\n    app.use(\n        proxy('/api1', {  //api1是需要转发的请求(所有带有/api1前缀的请求都会转发给5000)\n            target: 'http://localhost:5000', //配置转发目标地址(能返回数据的服务器地址)\n            changeorigin: true, //控制服务器接收到的请求头中host字段的值\n            /*\n          changeorigin设置为true时，服务器收到的请求头中的host为：localhost:5000\n          changeorigin设置为false时，服务器收到的请求头中的host为：localhost:3000\n          changeorigin默认值为false，但我们一般将changeorigin值设为true\n         */\n            pathrewrite: {'^/api1': ''} //去除请求前缀，保证交给后台服务器的是正常请求地址(必须配置)\n        }),\n        proxy('/api2', { \n            target: 'http://localhost:5001',\n            changeorigin: true,\n            pathrewrite: {'^/api2': ''}\n        })\n    )\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n\n说明：\n\n 1. 优点：可以配置多个代理，可以灵活的控制请求是否走代理\n\n 2. 缺点：配置繁琐，前端请求资源时必须加前缀\n\n",charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"React - Redux",frontmatter:{title:"React - Redux",date:"2022-02-21T12:57:29.000Z",permalink:"/react/redux/",categories:["React"],tags:["React"],readingShow:"top"},regularPath:"/10.%E5%89%8D%E7%AB%AF/50.React/07.React%20-%20Redux.html",relativePath:"10.前端/50.React/07.React - Redux.md",key:"v-c5d3adea",path:"/react/redux/",headers:[{level:2,title:"Redux理解",slug:"redux理解",normalizedTitle:"redux理解",charIndex:3},{level:2,title:"什么情况下需要使用Redux",slug:"什么情况下需要使用redux",normalizedTitle:"什么情况下需要使用redux",charIndex:14},{level:2,title:"Redux的三个核心概念",slug:"redux的三个核心概念",normalizedTitle:"redux的三个核心概念",charIndex:32},{level:3,title:"action",slug:"action",normalizedTitle:"action",charIndex:50},{level:3,title:"reducer",slug:"reducer",normalizedTitle:"reducer",charIndex:62},{level:3,title:"store",slug:"store",normalizedTitle:"store",charIndex:75},{level:2,title:"组件与reducer交互",slug:"组件与reducer交互",normalizedTitle:"组件与reducer交互",charIndex:84},{level:2,title:"组件与同步action、reducer交互",slug:"组件与同步action、reducer交互",normalizedTitle:"组件与同步action、reducer交互",charIndex:100},{level:2,title:"异步action",slug:"异步action",normalizedTitle:"异步action",charIndex:125},{level:2,title:"Redux和React-Redux区别",slug:"redux和react-redux区别",normalizedTitle:"redux和react-redux区别",charIndex:137},{level:2,title:"React-Redux基本使用",slug:"react-redux基本使用",normalizedTitle:"react-redux基本使用",charIndex:160},{level:2,title:"React-Redux优化",slug:"react-redux优化",normalizedTitle:"react-redux优化",charIndex:179},{level:2,title:"React-Redux数据共享",slug:"react-redux数据共享",normalizedTitle:"react-redux数据共享",charIndex:196},{level:2,title:"React-Redux开发者工具的使用",slug:"react-redux开发者工具的使用",normalizedTitle:"react-redux开发者工具的使用",charIndex:215},{level:2,title:"React-Redux最终优化",slug:"react-redux最终优化",normalizedTitle:"react-redux最终优化",charIndex:238}],headersStr:"Redux理解 什么情况下需要使用Redux Redux的三个核心概念 action reducer store 组件与reducer交互 组件与同步action、reducer交互 异步action Redux和React-Redux区别 React-Redux基本使用 React-Redux优化 React-Redux数据共享 React-Redux开发者工具的使用 React-Redux最终优化",content:" * Redux理解\n * 什么情况下需要使用Redux\n * Redux的三个核心概念\n   * action\n   * reducer\n   * store\n * 组件与reducer交互\n * 组件与同步action、reducer交互\n * 异步action\n * Redux和React-Redux区别\n * React-Redux基本使用\n * React-Redux优化\n * React-Redux数据共享\n * React-Redux开发者工具的使用\n * React-Redux最终优化\n\n\n\n\n# Redux理解\n\n 1. Redux 是一个专门用于做 状态管理的 JS 库（不是 React 插件库）\n\n 2. 它可以用在 React、Angular、Vue 等项目中，但基本与 React 配合使用\n\n 3. 作用：集中式管理 React 应用中多个组件 共享 的状态\n\n\n# 什么情况下需要使用Redux\n\n 1. 某个组件的状态，需要让其他组件可以随时拿到（共享）\n\n 2. 一个组件需要改变另一个组件的状态（通信）\n\n 3. 总体原则：能不用就不用，如果不用比较吃力才考虑使用\n\n\n# Redux的三个核心概念\n\n\n# action\n\n 1. 动作的对象\n\n 2. 包含两个属性\n    \n    * type：标识属性，值为字符串，唯一，必要属性\n    \n    * data：数据属性，值任意类型，可选属性\n\n 3. 例子：{type:'ADD',data:{name:'kele',age:18}}\n\n\n# reducer\n\n * 用于初始化状态、加工状态\n\n * 加工时，根据旧的 state 和 action， 产生新的 state 的 纯函数\n\n\n# store\n\n 1. 将 state、action、reducer 联系在一起的对象\n\n 2. 如何得到此对象？\n    \n    // 引入 createStore，专门用于创建 Redux 中最为核心的 store 对象\n    import {createStore} from 'Redux'\n    // 引入为 Count 组件服务的 reducer\n    import reducer from './reducers'\n    const store = createStore(reducer)\n    export default store\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    \n\n 3. 此对象的功能\n    \n    * getState(): 得到 state\n    \n    * dispatch(action): 分发 action, 触发 reducer 调用, 产生新的 state\n    \n    * subscribe(listener): 注册监听, 当产生了新的 state 时, 自动调用\n\n\n# 组件与reducer交互\n\n 1. 去除 Count 组件自身的状态\n\n 2. src 下建立：\n    \n    -Redux\n    -store.js\n    -count_reducer.js\t//xxx_reducer代表xxx组件的reducer\n    \n    \n    1\n    2\n    3\n    \n\n 3. store.js：\n    \n    * 引入 Redux 中的 createStore 函数，创建一个 store\n    * createStore 调用时要传入一个为其服务的 reducer\n    * 记得暴露 store 对象\n    \n    import {createStore} from 'Redux'\n    // 引入为 Count 组件服务的 reducer\n    import reducer from './reducers'\n    // 暴露 store\n    export default createStore(reducer)\n    \n    \n    1\n    2\n    3\n    4\n    5\n    \n\n 4. 组件的使用\n    \n    * 引入 store，用于获取 Redux 中保存状态\n    \n    * 使用 store 的 API：dispatch 方法，直接传入 reducer 中加工\n      \n      参数一：type，reducer 中关联的函数名（需要触发的函数）\n      \n      参数二：data，操作的数据\n    \n    increment = ()=>{\n        store.dispatch(type:'increment',data:value*1))\n    }\n    \n    \n    1\n    2\n    3\n    \n\n 5. reducer.js：\n    \n    * reducer 的本质是一个函数，接收参数：preState、action，返回加工后的状态\n    \n    * reducer 有两个作用：初始化状态，加工状态\n    \n    * reducer 被第一次调用时，是 store 自动触发的\n      \n      * 传递的 preState 是 undefined\n      \n      * 传递的 action 是：{type:'@@REDUX/INIT_a.2.b.4}\n      \n      * 后面通过 dispatch 传入的 preState 为 Redux 的 state 的数据，action 是要执行数据的行为\n    \n    * 技巧：开头定义一个常量，给 preState 指定该默认值，当 preState 为 undefined，返回该常量\n    \n    /* \n       1. 该文件是用于创建一个为 Count 组件服务的 reducer，reducer 的本质就是一个函数\n       2. reducer 函数会接到两个参数，分别为：之前的状态（preState），动作对象（action）\n    */\n    const initState = 0 // 初始化状态\n    export default function countReducer(preState=initState,action){\n       // 从 action 对象中获取：type、data\n       const {type,data} = action\n       // 根据 type 决定如何加工数据\n       switch (type) {\n       \tcase 'increment': // 如果是加\n       \t\treturn preState + data\n       \tcase 'decrement': // 若果是减\n       \t\treturn preState - data\n       \tdefault:\n       \t\treturn preState\n       }\n    } \n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    11\n    12\n    13\n    14\n    15\n    16\n    17\n    18\n    \n\n 6. 在 index.js 中监测 store 中状态的改变，一旦发生改变重新渲染 <App/>\n    \n    备注：Redux 只负责管理状态，至于状态的改变（this.setState={}）驱动着页面的展示，要靠我们自己写。\n    \n    ReactDOM.render(<App/>,document.getElementById('root'))\n    // 监测 Redux 中状态的改变，如 Redux 的状态发生了改变，那么重新渲染 App 组件\n    store.subscribe(()=>{\n    \tReactDOM.render(<App/>,document.getElementById('root'))\n    })\n    \n    \n    1\n    2\n    3\n    4\n    5\n    \n\n\n# 组件与同步action、reducer交互\n\n 1. action.js：专门用于创建 action 对象，对 dispatch 传入的值进行封装，固定 type，只需传入 data\n\n 2. 细节：如果使用箭头函数简写模式，return 的时对象，需要使用括号 ()，否则默认 {} 是函数形式而不是对象形式\n    \n    /* \n    \t该文件专门为 Count 组件生成 action 对象\n    */\n    export const createIncrementAction = data => ({type:'increment',data})\n    export const createDecrementAction = data => ({type:'decrement',data})\n    \n    \n    1\n    2\n    3\n    4\n    5\n    \n\n 3. 原先组件的 dispatch 变为\n    \n    import {createIncrementAction} from './action'\n    store.dispatch(createIncrementAction(value*1))\n    \n    \n    1\n    2\n    \n\n 4. constant.js：当出现多个常量时，此文件放置 type 值在 Redux 文件夹里\n    \n    /* \n    \t该模块是用于定义 action 对象中 type 类型的常量值，目的只有一个：便于管理的同时防止程序员单词写错\n    */\n    export const INCREMENT = 'increment'\n    export const DECREMENT = 'decrement'\n    \n    \n    1\n    2\n    3\n    4\n    5\n    \n\n 5. 此时其他文件的对用常量变为\n    \n    // reducer 文件\n    ......\n    switch (type) {\n        case INCREMENT: // 如果是加\n            return preState + data\n        case DECREMENT: // 若果是减\n            return preState - data\n        default:\n            return preState\n    }\n    ....\n    // action 文件：\n    export const createIncrementAction = data => ({type:INCREMENT,data})\n    export const createDecrementAction = data => ({type:DECREMENT,data})\n    ......\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    11\n    12\n    13\n    14\n    15\n    \n\n\n# 异步action\n\n同步 action 和异步 action 区别：前者返回值是一个对象，后者返回值是一个函数，因为只有函数才能开启异步，如定时器\n\n> 使用方式：（引入中间库）\n\n * 明确：延迟的动作不想交给组件自身，想交给 action\n\n * 何时需要异步 action：想要对状态进行操作，但是具体的数据靠异步任务返回\n\n * 具体编码：\n   \n   1. yarn add Redux-thunk，并配置在 store 中\n   \n   2. 创建 action 的函数不再返回一般对象，而是一个函数，该函数中写异步任务\n   \n   3. 异步任务有结果后，分发一个同步的 action 去真正操作数据\n\n * 备注：异步 action 不是必须要写的，完全可以自己等待异步任务的结果了再去分发同步 action\n\n * 异步 action 一定会 dispatch 同步 action\n\n> 代码\n\nstore.js：引入中间件，并且在 createStore 时使用\n\n// 引入 createStore，专门用于创建 Redux 中最为核心的 store 对象\nimport {createStore,applyMiddleware} from 'Redux'\n// 引入为 Count 组件服务的 reducer\nimport countReducer from './count_reducer'\n// 引入 Redux-thunk，用于支持异步 action\nimport thunk from 'Redux-thunk'\n// 暴露 store\nexport default createStore(countReducer,applyMiddleware(thunk))\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\naction.js：使用异步 action\n\nimport {INCREMENT,DECREMENT} from './constant' // 常量文件名\n\n// 同步a ction，就是指 action 的值为 Object 类型的一般对象\nexport const createIncrementAction = data => ({type:INCREMENT,data})\nexport const createDecrementAction = data => ({type:DECREMENT,data})\n\n// 异步 action，就是指 action 的值为函数,异步 action 中一般都会调用同步 action，异步 action 不是必须要用的。\nexport const createIncrementAsyncAction = (data,time) => {\n\treturn (dispatch)=>{\n\t\tsetTimeout(()=>{\n\t\t\tdispatch(createIncrementAction(data))\n\t\t},time)\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n记住：如果不安装并且使用中间件，action.js 里的异步 action 代码会 报错。\n\n\n# Redux和React-Redux区别\n\n 1. Redux 是 React 官方团队出品，React-Redux 是 Facebook 官方团队出品\n 2. React-Redux 对 Redux 进行再次封装，解耦更明显，分离都明显，功能更齐全\n 3. 使用了 React-Redux，则不需要自己主动监测状态变化，页面渲染\n 4. 使用了 React-Redux，UI组件不能写任何 Redux 的内容，必须使用其父容器组件传来的值（父组件才写 Redux 的内容，并且响应事件，通过 props 传给其子 UI 组件）\n\n\n# React-Redux基本使用\n\n 1. 两个概念：（React-Redux 对使用 Redux 的组件进行再次封装）\n    \n    * UI 组件：不能使用任何 Redux 的 api，只负责页面的呈现、交互等。放在 components 文件夹\n    \n    * 容器组件：负责和 Redux 通信，将结果交给 UI 组件。放在 contains 文件夹\n\n 2. 如何创建一个容器组件？靠 React-Redux 的 connect 函数\n    \n    格式：\n    \n    // 使用 connect()() 创建并暴露一个 Count 的容器组件\n    connect(mapStateToProps,mapDispatchToProps)(UI组件)\n    \n    \n    1\n    2\n    \n    \n    左边括号：两个参数，且参数都必须为函数，右边括号：UI 组件的名称，需 import 引入。\n    \n    mapStateToProps：映射状态，返回值是一个对象，是一个传递状态（数据）的函数，给 UI 组件。\n    \n    mapDispatchToProps：映射操作状态的方法，返回值是一个对象，是一个传递操作状态的方法的函数，或者对象，给 reducer 加工。\n    \n    流程：UI 组件触发事件，事件通过 mapDispatchToProps 传入 reducer 进行加工，然后更新状态，mapStateToProps 通过 props 传更新的状态给 UI 组件，UI 组件直接获取。\n    \n    备注：容器组件中的 store 是靠 props 传进去的，而不是在容器组件中直接引入（App 是 Count 的父组件，Count 组件有容器组件和 UI 组件），然后 App 组件传 store 给 Count 容器组件，Count 容器组件进行操作后数据传给 CountUI 组件\n\n> 创建容器组件\n\nApp 组件\n\n......\nexport default class App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{/* 给容器组件传递store */}\n\t\t\t\t<Count store={store} />\n\t\t\t</div>\n\t\t)\n\t}\n}\n.....\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nCount 容器组件（获取父组件传入的 store，并且使用 dispatch 对 Redux 进行数据加工，后返回给 CountUI 组件）\n\n// 引入 Count 的 UI 组件\nimport CountUI from '../../components/Count'\n// 引入 action\nimport {\n\tcreateIncrementAction,\n\tcreateDecrementAction,\n\tcreateIncrementAsyncAction\n} from '../../Redux/count_action'\n// 引入 connect 用于连接UI组件与 Redux\nimport {connect} from 'React-Redux'\n/* \n\t1. mapStateToProps 函数返回的是一个对象；\n\t2. 返回的对象中的 key 就作为传递给 UI 组件 props 的 key，value 就作为传递给 UI 组件 props 的 value\n\t3. mapStateToProps 用于传递状态\n*/\nfunction mapStateToProps(state){\n\treturn {count:state}\n}\n\n/* \n\t1.mapDispatchToProps 函数返回的是一个对象；\n\t2.返回的对象中的 key 就作为传递给 UI 组件 props 的 key，value 就作为传递给 UI 组件 props 的 value\n\t3.mapDispatchToProps 用于传递操作状态的方法\n*/\nfunction mapDispatchToProps(dispatch){\n\treturn {\n\t\tincrement:number => dispatch(createIncrementAction(number)),\n\t\tdecrement:number => dispatch(createDecrementAction(number)),\n\t\tincrementAsync:(number,time) => dispatch(createIncrementAsyncAction(number,time)),\n\t}\n}\n\n// 使用 connect()() 创建并暴露一个 Count 的容器组件\nexport default connect(mapStateToProps,mapDispatchToProps)(CountUI)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\nCountUI 组件（直接使用 props 发送给父组件自己的事件和参数，然后父组件们执行完操作，重新渲染画面）\n\nexport default class Count extends Component {\n    //加法\n    increment = ()=>{\n        const {value} = this.selectNumber\n        this.props.increment(value*1)\n    }\n    ... //减法、异步加法\n    render() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>当前求和为：{this.props.count}</h1>\n\t\t\t\t<select ref={c => this.selectNumber = c}>\n\t\t\t\t\t<option value=\"1\">1</option>\n\t\t\t\t\t<option value=\"2\">2</option>\n\t\t\t\t\t<option value=\"3\">3</option>\n\t\t\t\t</select>&nbsp;\n\t\t\t\t<button onClick={this.increment}>+</button>&nbsp;\n     \t\t\t......{/* 减法、异步加法的按钮和事件 */}           \n\t\t\t</div>\n\t\t)\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n优化：mapDispatchToProps，也可以是一个对象，看下方代码块的简写：\n\n分析：this.props.increment(value * 1) 调用对象的 key：increment，随后使用 createIncrementAction 函数，并且因为调用的时候传入参数 value * 1，所以把该参数传入 createIncrementAction 函数，该函数随后返回 action 对象，dispatch 方法是 API 自动加入，已经优化\n\nexport default connect(\n\tstate => ({count:state}),\n\n\t// mapDispatchToProps 的一般写法\n\t/* dispatch => ({\n\t\tincrement:number => dispatch(createIncrementAction(number)),\n\t\tdecrement:number => dispatch(createDecrementAction(number)),\n\t\tincrementAsync:(number,time) => dispatch(createIncrementAsyncAction(number,time)),\n\t}) */\n\n\t// mapDispatchToProps 的简写\n\t{\n\t\tincrement:createIncrementAction,\n\t\tdecrement:createDecrementAction,\n\t\tincrementAsync:createIncrementAsyncAction,\n\t}\n)(Count)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# React-Redux优化\n\n容器组件和 UI 组件整合一个文件\n\n * 因为容器组件需要引入 UI 组件，然后 connect(a,b)(UI组件)，为何不直接放在一起，然后无需引入 UI 组件，直接整合一个文件\n\n * 整合一个文件后，只需 export default connect(a,b)(UI组件)即可，UI 组件因为都在一个文件，内部直接使用\n\n无需自己给容器组件传递 store，给 <App/> 包裹一个 <Provider store={store}> 即可。目的是让 App 所有的后代容器组件都能接收到 store。\n\n * 原先不优化（在 App 组件）\n   \n   render() {\n       return (\n           <div>\n               <Count store={store}/>\n               <Count store={store}/>\n               <Count store={store}/>\n               <Count store={store}/>\n               <Count store={store}/>\n           </div>\n       )\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   \n\n * 优化后（入口文件）\n   \n   ......\n   import {Provider} from 'React-Redux'\n   ReactDOM.render(\n       /* 此处需要用Provider包裹App，目的是让App所有的后代容器组件都能接收到store */\n       <Provider store={store}>\n           <App/>\n       </Provider>,\n       document.getElementById('root')\n   )\n   // 此时App文件为\n   render() {\n       return (\n           <div>\n               <Count/>\n               <Count/>\n               <Count/>\n               <Count/>\n           </div>\n       )\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   \n\n使用了 React-Redux 后不用再自己检测 Redux 中状态的改变了，容器组件可以自动完成这个工作。下方代码（入口文件里）可以 去掉\n\n// 监测 Redux 中状态的改变，如 Redux 的状态发生了改变，那么重新渲染 App 组件\nstore.subscribe(()=>{\n\tReactDOM.render(<App/>,document.getElementById('root'))\n})\n\n\n1\n2\n3\n4\n\n\nmapDispatchToProps 也可以简单的写成一个对象，具体内容看 React-Redux 基本使用。\n\n一个组件要和 Redux「打交道」要经过哪几步？（融合 1、3、4 的内容）\n\n * 定义好 UI 组件，不暴露\n\n * 引入 connect 生成一个容器组件，并暴露，写法如下：\n\nexport default connect(\n    state => ({key:value}), // 映射状态\n    {key:xxxxxAction} // 映射操作状态的方法，尽量触发简写形式\n)(UI组件)\n\n\n1\n2\n3\n4\n\n\n在 UI 组件中通过 this.props.xxx 读取和操作状态，即调用上方（5）第三行的 key。\n\n\n# React-Redux数据共享\n\n 1. 定义一个 Pserson 组件，和 Count 组件通过 Redux 共享数据\n\n 2. 为 Person 组件编写：reducer、action，配置 constant 常量\n\n 3. 重点：Person 的 reducer 和 Count 的 Reducer 要使用 combineReducers 进行合并，需要引入合并后的总状态是一个对象\n    \n    // 引入 createStore，专门用于创建Redux中最为核心的store对象\n    import {createStore,applyMiddleware,combineReducers} from 'Redux'\n    // 引入为 Count 组件服务的 reducer\n    import countReducer from './reducers/count'\n    // 引入 为 Count 组件服务的 reducer\n    import personReducer from './reducers/person'\n    // 引入 Redux-thunk，用于支持异步 action\n    import thunk from 'Redux-thunk'\n    \n    // 汇总所有的 reducer 变为一个总的 reducer\n    const allReducer = combineReducers({\n        countReducer:countReducer,\n        countReducer:personReducer\n    })\n    \n    // 暴露 store\n    export default createStore(allReducer,applyMiddleware(thunk))\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    11\n    12\n    13\n    14\n    15\n    16\n    17\n    \n\n 4. 交给 store 的是总 reducer（对象），最后注意在组件中取出状态（state）的时候，不再直接是 state，而是 state.countReducer 和 state.personReducer。如果交给 store 的是一个 value 值，通过 state 取这个 value 值，对象的话通过 state.xxx 取 key 得 value\n\n\n# React-Redux开发者工具的使用\n\n 1. 使用开发者工具需要安装第三方库支持：（去 chrome 扩展商城下载）\n    \n    yarn add Redux-devtools-extension\n    \n    \n    1\n    \n\n 2. store 中进行配置\n    \n    import {composeWithDevTools} from 'Redux-devtools-extension'\n    const store = createStore(allReducer,composeWithDevTools(applyMiddleware(thunk)))\n    // 如果没有引入 Redux-thunk\n    const store = createStore(allReducer,composeWithDevTools())\n    \n    \n    1\n    2\n    3\n    4\n    \n\n\n# React-Redux最终优化\n\n * 所有变量名字要规范，尽量触发对象的简写形式。\n\n * reducers 文件夹中，编写 index.js 专门用于汇总并暴露所有的 reducer\n\n * 状态如果是一个数组，对该数组进行操作，不能使用 unshift，push 等方法，这样无法改变数组本身的地址，从而数据无法被监测到，实现更新。Vue 框架则相反，必须使用 unshift，push 等方法，才能监测到数据的改变。",normalizedContent:" * redux理解\n * 什么情况下需要使用redux\n * redux的三个核心概念\n   * action\n   * reducer\n   * store\n * 组件与reducer交互\n * 组件与同步action、reducer交互\n * 异步action\n * redux和react-redux区别\n * react-redux基本使用\n * react-redux优化\n * react-redux数据共享\n * react-redux开发者工具的使用\n * react-redux最终优化\n\n\n\n\n# redux理解\n\n 1. redux 是一个专门用于做 状态管理的 js 库（不是 react 插件库）\n\n 2. 它可以用在 react、angular、vue 等项目中，但基本与 react 配合使用\n\n 3. 作用：集中式管理 react 应用中多个组件 共享 的状态\n\n\n# 什么情况下需要使用redux\n\n 1. 某个组件的状态，需要让其他组件可以随时拿到（共享）\n\n 2. 一个组件需要改变另一个组件的状态（通信）\n\n 3. 总体原则：能不用就不用，如果不用比较吃力才考虑使用\n\n\n# redux的三个核心概念\n\n\n# action\n\n 1. 动作的对象\n\n 2. 包含两个属性\n    \n    * type：标识属性，值为字符串，唯一，必要属性\n    \n    * data：数据属性，值任意类型，可选属性\n\n 3. 例子：{type:'add',data:{name:'kele',age:18}}\n\n\n# reducer\n\n * 用于初始化状态、加工状态\n\n * 加工时，根据旧的 state 和 action， 产生新的 state 的 纯函数\n\n\n# store\n\n 1. 将 state、action、reducer 联系在一起的对象\n\n 2. 如何得到此对象？\n    \n    // 引入 createstore，专门用于创建 redux 中最为核心的 store 对象\n    import {createstore} from 'redux'\n    // 引入为 count 组件服务的 reducer\n    import reducer from './reducers'\n    const store = createstore(reducer)\n    export default store\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    \n\n 3. 此对象的功能\n    \n    * getstate(): 得到 state\n    \n    * dispatch(action): 分发 action, 触发 reducer 调用, 产生新的 state\n    \n    * subscribe(listener): 注册监听, 当产生了新的 state 时, 自动调用\n\n\n# 组件与reducer交互\n\n 1. 去除 count 组件自身的状态\n\n 2. src 下建立：\n    \n    -redux\n    -store.js\n    -count_reducer.js\t//xxx_reducer代表xxx组件的reducer\n    \n    \n    1\n    2\n    3\n    \n\n 3. store.js：\n    \n    * 引入 redux 中的 createstore 函数，创建一个 store\n    * createstore 调用时要传入一个为其服务的 reducer\n    * 记得暴露 store 对象\n    \n    import {createstore} from 'redux'\n    // 引入为 count 组件服务的 reducer\n    import reducer from './reducers'\n    // 暴露 store\n    export default createstore(reducer)\n    \n    \n    1\n    2\n    3\n    4\n    5\n    \n\n 4. 组件的使用\n    \n    * 引入 store，用于获取 redux 中保存状态\n    \n    * 使用 store 的 api：dispatch 方法，直接传入 reducer 中加工\n      \n      参数一：type，reducer 中关联的函数名（需要触发的函数）\n      \n      参数二：data，操作的数据\n    \n    increment = ()=>{\n        store.dispatch(type:'increment',data:value*1))\n    }\n    \n    \n    1\n    2\n    3\n    \n\n 5. reducer.js：\n    \n    * reducer 的本质是一个函数，接收参数：prestate、action，返回加工后的状态\n    \n    * reducer 有两个作用：初始化状态，加工状态\n    \n    * reducer 被第一次调用时，是 store 自动触发的\n      \n      * 传递的 prestate 是 undefined\n      \n      * 传递的 action 是：{type:'@@redux/init_a.2.b.4}\n      \n      * 后面通过 dispatch 传入的 prestate 为 redux 的 state 的数据，action 是要执行数据的行为\n    \n    * 技巧：开头定义一个常量，给 prestate 指定该默认值，当 prestate 为 undefined，返回该常量\n    \n    /* \n       1. 该文件是用于创建一个为 count 组件服务的 reducer，reducer 的本质就是一个函数\n       2. reducer 函数会接到两个参数，分别为：之前的状态（prestate），动作对象（action）\n    */\n    const initstate = 0 // 初始化状态\n    export default function countreducer(prestate=initstate,action){\n       // 从 action 对象中获取：type、data\n       const {type,data} = action\n       // 根据 type 决定如何加工数据\n       switch (type) {\n       \tcase 'increment': // 如果是加\n       \t\treturn prestate + data\n       \tcase 'decrement': // 若果是减\n       \t\treturn prestate - data\n       \tdefault:\n       \t\treturn prestate\n       }\n    } \n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    11\n    12\n    13\n    14\n    15\n    16\n    17\n    18\n    \n\n 6. 在 index.js 中监测 store 中状态的改变，一旦发生改变重新渲染 <app/>\n    \n    备注：redux 只负责管理状态，至于状态的改变（this.setstate={}）驱动着页面的展示，要靠我们自己写。\n    \n    reactdom.render(<app/>,document.getelementbyid('root'))\n    // 监测 redux 中状态的改变，如 redux 的状态发生了改变，那么重新渲染 app 组件\n    store.subscribe(()=>{\n    \treactdom.render(<app/>,document.getelementbyid('root'))\n    })\n    \n    \n    1\n    2\n    3\n    4\n    5\n    \n\n\n# 组件与同步action、reducer交互\n\n 1. action.js：专门用于创建 action 对象，对 dispatch 传入的值进行封装，固定 type，只需传入 data\n\n 2. 细节：如果使用箭头函数简写模式，return 的时对象，需要使用括号 ()，否则默认 {} 是函数形式而不是对象形式\n    \n    /* \n    \t该文件专门为 count 组件生成 action 对象\n    */\n    export const createincrementaction = data => ({type:'increment',data})\n    export const createdecrementaction = data => ({type:'decrement',data})\n    \n    \n    1\n    2\n    3\n    4\n    5\n    \n\n 3. 原先组件的 dispatch 变为\n    \n    import {createincrementaction} from './action'\n    store.dispatch(createincrementaction(value*1))\n    \n    \n    1\n    2\n    \n\n 4. constant.js：当出现多个常量时，此文件放置 type 值在 redux 文件夹里\n    \n    /* \n    \t该模块是用于定义 action 对象中 type 类型的常量值，目的只有一个：便于管理的同时防止程序员单词写错\n    */\n    export const increment = 'increment'\n    export const decrement = 'decrement'\n    \n    \n    1\n    2\n    3\n    4\n    5\n    \n\n 5. 此时其他文件的对用常量变为\n    \n    // reducer 文件\n    ......\n    switch (type) {\n        case increment: // 如果是加\n            return prestate + data\n        case decrement: // 若果是减\n            return prestate - data\n        default:\n            return prestate\n    }\n    ....\n    // action 文件：\n    export const createincrementaction = data => ({type:increment,data})\n    export const createdecrementaction = data => ({type:decrement,data})\n    ......\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    11\n    12\n    13\n    14\n    15\n    \n\n\n# 异步action\n\n同步 action 和异步 action 区别：前者返回值是一个对象，后者返回值是一个函数，因为只有函数才能开启异步，如定时器\n\n> 使用方式：（引入中间库）\n\n * 明确：延迟的动作不想交给组件自身，想交给 action\n\n * 何时需要异步 action：想要对状态进行操作，但是具体的数据靠异步任务返回\n\n * 具体编码：\n   \n   1. yarn add redux-thunk，并配置在 store 中\n   \n   2. 创建 action 的函数不再返回一般对象，而是一个函数，该函数中写异步任务\n   \n   3. 异步任务有结果后，分发一个同步的 action 去真正操作数据\n\n * 备注：异步 action 不是必须要写的，完全可以自己等待异步任务的结果了再去分发同步 action\n\n * 异步 action 一定会 dispatch 同步 action\n\n> 代码\n\nstore.js：引入中间件，并且在 createstore 时使用\n\n// 引入 createstore，专门用于创建 redux 中最为核心的 store 对象\nimport {createstore,applymiddleware} from 'redux'\n// 引入为 count 组件服务的 reducer\nimport countreducer from './count_reducer'\n// 引入 redux-thunk，用于支持异步 action\nimport thunk from 'redux-thunk'\n// 暴露 store\nexport default createstore(countreducer,applymiddleware(thunk))\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\naction.js：使用异步 action\n\nimport {increment,decrement} from './constant' // 常量文件名\n\n// 同步a ction，就是指 action 的值为 object 类型的一般对象\nexport const createincrementaction = data => ({type:increment,data})\nexport const createdecrementaction = data => ({type:decrement,data})\n\n// 异步 action，就是指 action 的值为函数,异步 action 中一般都会调用同步 action，异步 action 不是必须要用的。\nexport const createincrementasyncaction = (data,time) => {\n\treturn (dispatch)=>{\n\t\tsettimeout(()=>{\n\t\t\tdispatch(createincrementaction(data))\n\t\t},time)\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n记住：如果不安装并且使用中间件，action.js 里的异步 action 代码会 报错。\n\n\n# redux和react-redux区别\n\n 1. redux 是 react 官方团队出品，react-redux 是 facebook 官方团队出品\n 2. react-redux 对 redux 进行再次封装，解耦更明显，分离都明显，功能更齐全\n 3. 使用了 react-redux，则不需要自己主动监测状态变化，页面渲染\n 4. 使用了 react-redux，ui组件不能写任何 redux 的内容，必须使用其父容器组件传来的值（父组件才写 redux 的内容，并且响应事件，通过 props 传给其子 ui 组件）\n\n\n# react-redux基本使用\n\n 1. 两个概念：（react-redux 对使用 redux 的组件进行再次封装）\n    \n    * ui 组件：不能使用任何 redux 的 api，只负责页面的呈现、交互等。放在 components 文件夹\n    \n    * 容器组件：负责和 redux 通信，将结果交给 ui 组件。放在 contains 文件夹\n\n 2. 如何创建一个容器组件？靠 react-redux 的 connect 函数\n    \n    格式：\n    \n    // 使用 connect()() 创建并暴露一个 count 的容器组件\n    connect(mapstatetoprops,mapdispatchtoprops)(ui组件)\n    \n    \n    1\n    2\n    \n    \n    左边括号：两个参数，且参数都必须为函数，右边括号：ui 组件的名称，需 import 引入。\n    \n    mapstatetoprops：映射状态，返回值是一个对象，是一个传递状态（数据）的函数，给 ui 组件。\n    \n    mapdispatchtoprops：映射操作状态的方法，返回值是一个对象，是一个传递操作状态的方法的函数，或者对象，给 reducer 加工。\n    \n    流程：ui 组件触发事件，事件通过 mapdispatchtoprops 传入 reducer 进行加工，然后更新状态，mapstatetoprops 通过 props 传更新的状态给 ui 组件，ui 组件直接获取。\n    \n    备注：容器组件中的 store 是靠 props 传进去的，而不是在容器组件中直接引入（app 是 count 的父组件，count 组件有容器组件和 ui 组件），然后 app 组件传 store 给 count 容器组件，count 容器组件进行操作后数据传给 countui 组件\n\n> 创建容器组件\n\napp 组件\n\n......\nexport default class app extends component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{/* 给容器组件传递store */}\n\t\t\t\t<count store={store} />\n\t\t\t</div>\n\t\t)\n\t}\n}\n.....\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\ncount 容器组件（获取父组件传入的 store，并且使用 dispatch 对 redux 进行数据加工，后返回给 countui 组件）\n\n// 引入 count 的 ui 组件\nimport countui from '../../components/count'\n// 引入 action\nimport {\n\tcreateincrementaction,\n\tcreatedecrementaction,\n\tcreateincrementasyncaction\n} from '../../redux/count_action'\n// 引入 connect 用于连接ui组件与 redux\nimport {connect} from 'react-redux'\n/* \n\t1. mapstatetoprops 函数返回的是一个对象；\n\t2. 返回的对象中的 key 就作为传递给 ui 组件 props 的 key，value 就作为传递给 ui 组件 props 的 value\n\t3. mapstatetoprops 用于传递状态\n*/\nfunction mapstatetoprops(state){\n\treturn {count:state}\n}\n\n/* \n\t1.mapdispatchtoprops 函数返回的是一个对象；\n\t2.返回的对象中的 key 就作为传递给 ui 组件 props 的 key，value 就作为传递给 ui 组件 props 的 value\n\t3.mapdispatchtoprops 用于传递操作状态的方法\n*/\nfunction mapdispatchtoprops(dispatch){\n\treturn {\n\t\tincrement:number => dispatch(createincrementaction(number)),\n\t\tdecrement:number => dispatch(createdecrementaction(number)),\n\t\tincrementasync:(number,time) => dispatch(createincrementasyncaction(number,time)),\n\t}\n}\n\n// 使用 connect()() 创建并暴露一个 count 的容器组件\nexport default connect(mapstatetoprops,mapdispatchtoprops)(countui)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\ncountui 组件（直接使用 props 发送给父组件自己的事件和参数，然后父组件们执行完操作，重新渲染画面）\n\nexport default class count extends component {\n    //加法\n    increment = ()=>{\n        const {value} = this.selectnumber\n        this.props.increment(value*1)\n    }\n    ... //减法、异步加法\n    render() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>当前求和为：{this.props.count}</h1>\n\t\t\t\t<select ref={c => this.selectnumber = c}>\n\t\t\t\t\t<option value=\"1\">1</option>\n\t\t\t\t\t<option value=\"2\">2</option>\n\t\t\t\t\t<option value=\"3\">3</option>\n\t\t\t\t</select>&nbsp;\n\t\t\t\t<button onclick={this.increment}>+</button>&nbsp;\n     \t\t\t......{/* 减法、异步加法的按钮和事件 */}           \n\t\t\t</div>\n\t\t)\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n优化：mapdispatchtoprops，也可以是一个对象，看下方代码块的简写：\n\n分析：this.props.increment(value * 1) 调用对象的 key：increment，随后使用 createincrementaction 函数，并且因为调用的时候传入参数 value * 1，所以把该参数传入 createincrementaction 函数，该函数随后返回 action 对象，dispatch 方法是 api 自动加入，已经优化\n\nexport default connect(\n\tstate => ({count:state}),\n\n\t// mapdispatchtoprops 的一般写法\n\t/* dispatch => ({\n\t\tincrement:number => dispatch(createincrementaction(number)),\n\t\tdecrement:number => dispatch(createdecrementaction(number)),\n\t\tincrementasync:(number,time) => dispatch(createincrementasyncaction(number,time)),\n\t}) */\n\n\t// mapdispatchtoprops 的简写\n\t{\n\t\tincrement:createincrementaction,\n\t\tdecrement:createdecrementaction,\n\t\tincrementasync:createincrementasyncaction,\n\t}\n)(count)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# react-redux优化\n\n容器组件和 ui 组件整合一个文件\n\n * 因为容器组件需要引入 ui 组件，然后 connect(a,b)(ui组件)，为何不直接放在一起，然后无需引入 ui 组件，直接整合一个文件\n\n * 整合一个文件后，只需 export default connect(a,b)(ui组件)即可，ui 组件因为都在一个文件，内部直接使用\n\n无需自己给容器组件传递 store，给 <app/> 包裹一个 <provider store={store}> 即可。目的是让 app 所有的后代容器组件都能接收到 store。\n\n * 原先不优化（在 app 组件）\n   \n   render() {\n       return (\n           <div>\n               <count store={store}/>\n               <count store={store}/>\n               <count store={store}/>\n               <count store={store}/>\n               <count store={store}/>\n           </div>\n       )\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   \n\n * 优化后（入口文件）\n   \n   ......\n   import {provider} from 'react-redux'\n   reactdom.render(\n       /* 此处需要用provider包裹app，目的是让app所有的后代容器组件都能接收到store */\n       <provider store={store}>\n           <app/>\n       </provider>,\n       document.getelementbyid('root')\n   )\n   // 此时app文件为\n   render() {\n       return (\n           <div>\n               <count/>\n               <count/>\n               <count/>\n               <count/>\n           </div>\n       )\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   \n\n使用了 react-redux 后不用再自己检测 redux 中状态的改变了，容器组件可以自动完成这个工作。下方代码（入口文件里）可以 去掉\n\n// 监测 redux 中状态的改变，如 redux 的状态发生了改变，那么重新渲染 app 组件\nstore.subscribe(()=>{\n\treactdom.render(<app/>,document.getelementbyid('root'))\n})\n\n\n1\n2\n3\n4\n\n\nmapdispatchtoprops 也可以简单的写成一个对象，具体内容看 react-redux 基本使用。\n\n一个组件要和 redux「打交道」要经过哪几步？（融合 1、3、4 的内容）\n\n * 定义好 ui 组件，不暴露\n\n * 引入 connect 生成一个容器组件，并暴露，写法如下：\n\nexport default connect(\n    state => ({key:value}), // 映射状态\n    {key:xxxxxaction} // 映射操作状态的方法，尽量触发简写形式\n)(ui组件)\n\n\n1\n2\n3\n4\n\n\n在 ui 组件中通过 this.props.xxx 读取和操作状态，即调用上方（5）第三行的 key。\n\n\n# react-redux数据共享\n\n 1. 定义一个 pserson 组件，和 count 组件通过 redux 共享数据\n\n 2. 为 person 组件编写：reducer、action，配置 constant 常量\n\n 3. 重点：person 的 reducer 和 count 的 reducer 要使用 combinereducers 进行合并，需要引入合并后的总状态是一个对象\n    \n    // 引入 createstore，专门用于创建redux中最为核心的store对象\n    import {createstore,applymiddleware,combinereducers} from 'redux'\n    // 引入为 count 组件服务的 reducer\n    import countreducer from './reducers/count'\n    // 引入 为 count 组件服务的 reducer\n    import personreducer from './reducers/person'\n    // 引入 redux-thunk，用于支持异步 action\n    import thunk from 'redux-thunk'\n    \n    // 汇总所有的 reducer 变为一个总的 reducer\n    const allreducer = combinereducers({\n        countreducer:countreducer,\n        countreducer:personreducer\n    })\n    \n    // 暴露 store\n    export default createstore(allreducer,applymiddleware(thunk))\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    11\n    12\n    13\n    14\n    15\n    16\n    17\n    \n\n 4. 交给 store 的是总 reducer（对象），最后注意在组件中取出状态（state）的时候，不再直接是 state，而是 state.countreducer 和 state.personreducer。如果交给 store 的是一个 value 值，通过 state 取这个 value 值，对象的话通过 state.xxx 取 key 得 value\n\n\n# react-redux开发者工具的使用\n\n 1. 使用开发者工具需要安装第三方库支持：（去 chrome 扩展商城下载）\n    \n    yarn add redux-devtools-extension\n    \n    \n    1\n    \n\n 2. store 中进行配置\n    \n    import {composewithdevtools} from 'redux-devtools-extension'\n    const store = createstore(allreducer,composewithdevtools(applymiddleware(thunk)))\n    // 如果没有引入 redux-thunk\n    const store = createstore(allreducer,composewithdevtools())\n    \n    \n    1\n    2\n    3\n    4\n    \n\n\n# react-redux最终优化\n\n * 所有变量名字要规范，尽量触发对象的简写形式。\n\n * reducers 文件夹中，编写 index.js 专门用于汇总并暴露所有的 reducer\n\n * 状态如果是一个数组，对该数组进行操作，不能使用 unshift，push 等方法，这样无法改变数组本身的地址，从而数据无法被监测到，实现更新。vue 框架则相反，必须使用 unshift，push 等方法，才能监测到数据的改变。",charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"React - 函数类型",frontmatter:{title:"React - 函数类型",date:"2022-02-21T12:59:57.000Z",permalink:"/react/function/",categories:["React"],tags:["React"],readingShow:"top"},regularPath:"/10.%E5%89%8D%E7%AB%AF/50.React/09.React%20-%20%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B.html",relativePath:"10.前端/50.React/09.React - 函数类型.md",key:"v-64b2e1b7",path:"/react/function/",headers:[{level:3,title:"纯函数",slug:"纯函数",normalizedTitle:"纯函数",charIndex:3},{level:3,title:"高阶函数",slug:"高阶函数",normalizedTitle:"高阶函数",charIndex:10},{level:3,title:"函数的柯里化",slug:"函数的柯里化",normalizedTitle:"函数的柯里化",charIndex:18}],headersStr:"纯函数 高阶函数 函数的柯里化",content:" * 纯函数\n * 高阶函数\n * 函数的柯里化\n\n\n\n\n# 纯函数\n\n一类特别的函数: 只要是同样的输入（实参），必定得到同样的输出（返回）。\n\n必须遵守以下一些约束 ：\n\n * 不得改写参数数据\n * 不会产生任何副作用，例如网络请求，输入和输出设备\n * 不能调用 Date.now() 或者 Math.random() 等不纯的方法\n\nRedux 的 reducer 函数必须是一个纯函数。\n\n\n# 高阶函数\n\n一类特别的函数：\n\n * 情况 1: 参数是函数\n * 情况 2: 返回是函数\n\n常见的高阶函数:\n\n * 定时器设置函数\n * 数组的 forEach()/map()/filter()/reduce()/find()/bind()\n * promise\n * react-redux 中的 connect 函数\n * 作用: 能实现更加动态，更加可扩展的功能\n\n\n# 函数的柯里化\n\n概念：通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式。\n\n例子：\n\nfunction sum(a){\n   return(b)=>{\n      return (c)=>{\n         return a+b+c\n      }\n   }\n}\nsum(1)(2)(3) // 6\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n",normalizedContent:" * 纯函数\n * 高阶函数\n * 函数的柯里化\n\n\n\n\n# 纯函数\n\n一类特别的函数: 只要是同样的输入（实参），必定得到同样的输出（返回）。\n\n必须遵守以下一些约束 ：\n\n * 不得改写参数数据\n * 不会产生任何副作用，例如网络请求，输入和输出设备\n * 不能调用 date.now() 或者 math.random() 等不纯的方法\n\nredux 的 reducer 函数必须是一个纯函数。\n\n\n# 高阶函数\n\n一类特别的函数：\n\n * 情况 1: 参数是函数\n * 情况 2: 返回是函数\n\n常见的高阶函数:\n\n * 定时器设置函数\n * 数组的 foreach()/map()/filter()/reduce()/find()/bind()\n * promise\n * react-redux 中的 connect 函数\n * 作用: 能实现更加动态，更加可扩展的功能\n\n\n# 函数的柯里化\n\n概念：通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式。\n\n例子：\n\nfunction sum(a){\n   return(b)=>{\n      return (c)=>{\n         return a+b+c\n      }\n   }\n}\nsum(1)(2)(3) // 6\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n",charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"React - 进阶知识",frontmatter:{title:"React - 进阶知识",date:"2022-02-21T13:03:06.000Z",permalink:"/react/advanced-knowledge/",categories:["React"],tags:["React"],readingShow:"top"},regularPath:"/10.%E5%89%8D%E7%AB%AF/50.React/11.React%20-%20%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86.html",relativePath:"10.前端/50.React/11.React - 进阶知识.md",key:"v-42188323",path:"/react/advanced-knowledge/",headers:[{level:2,title:"setState函数式状态",slug:"setstate函数式状态",normalizedTitle:"setstate函数式状态",charIndex:3},{level:3,title:"setState更新状态的2种写法",slug:"setstate更新状态的2种写法",normalizedTitle:"setstate更新状态的2种写法",charIndex:22},{level:3,title:"总结",slug:"总结",normalizedTitle:"总结",charIndex:45},{level:2,title:"lazyLoad懒加载和Suspense",slug:"lazyload懒加载和suspense",normalizedTitle:"lazyload懒加载和suspense",charIndex:51},{level:3,title:"lazyLoad",slug:"lazyload",normalizedTitle:"lazyload",charIndex:51},{level:3,title:"Suspense",slug:"suspense",normalizedTitle:"suspense",charIndex:63},{level:2,title:"Hooks函数式",slug:"hooks函数式",normalizedTitle:"hooks函数式",charIndex:103},{level:3,title:"React Hook/Hooks是什么?",slug:"react-hook-hooks是什么",normalizedTitle:"react hook/hooks是什么?",charIndex:117},{level:3,title:"三个常用的Hook",slug:"三个常用的hook",normalizedTitle:"三个常用的hook",charIndex:143},{level:3,title:"State Hook",slug:"state-hook",normalizedTitle:"state hook",charIndex:158},{level:3,title:"Effect Hook",slug:"effect-hook",normalizedTitle:"effect hook",charIndex:174},{level:3,title:"Ref Hook",slug:"ref-hook",normalizedTitle:"ref hook",charIndex:191},{level:2,title:"Fragment标签碎片",slug:"fragment标签碎片",normalizedTitle:"fragment标签碎片",charIndex:203},{level:3,title:"背景",slug:"背景",normalizedTitle:"背景",charIndex:221},{level:3,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:229},{level:3,title:"作用",slug:"作用",normalizedTitle:"作用",charIndex:237},{level:2,title:"Context通信",slug:"context通信",normalizedTitle:"context通信",charIndex:243},{level:3,title:"理解",slug:"理解",normalizedTitle:"理解",charIndex:258},{level:3,title:"使用",slug:"使用-2",normalizedTitle:"使用",charIndex:229},{level:3,title:"注意",slug:"注意",normalizedTitle:"注意",charIndex:274},{level:2,title:"PureComponent组件优化",slug:"purecomponent组件优化",normalizedTitle:"purecomponent组件优化",charIndex:280},{level:3,title:"Component目前的2个问题",slug:"component目前的2个问题",normalizedTitle:"component目前的2个问题",charIndex:303},{level:3,title:"效率高的做法",slug:"效率高的做法",normalizedTitle:"效率高的做法",charIndex:325},{level:3,title:"原因",slug:"原因",normalizedTitle:"原因",charIndex:337},{level:3,title:"解决",slug:"解决",normalizedTitle:"解决",charIndex:345},{level:2,title:"render props传入标签内容",slug:"render-props传入标签内容",normalizedTitle:"render props传入标签内容",charIndex:351},{level:3,title:"如何向组件内部动态传入带内容的结构(标签)?",slug:"如何向组件内部动态传入带内容的结构-标签",normalizedTitle:"如何向组件内部动态传入带内容的结构(标签)?",charIndex:375},{level:3,title:"children props",slug:"children-props",normalizedTitle:"children props",charIndex:403},{level:3,title:"render props",slug:"render-props",normalizedTitle:"render props",charIndex:351},{level:2,title:"错误边界",slug:"错误边界",normalizedTitle:"错误边界",charIndex:439},{level:3,title:"理解",slug:"理解-2",normalizedTitle:"理解",charIndex:258},{level:3,title:"特点",slug:"特点",normalizedTitle:"特点",charIndex:457},{level:3,title:"使用方式",slug:"使用方式",normalizedTitle:"使用方式",charIndex:465},{level:2,title:"组件通信方式总结",slug:"组件通信方式总结",normalizedTitle:"组件通信方式总结",charIndex:473},{level:3,title:"组件间的关系",slug:"组件间的关系",normalizedTitle:"组件间的关系",charIndex:487},{level:3,title:"几种通信方式",slug:"几种通信方式",normalizedTitle:"几种通信方式",charIndex:499},{level:3,title:"比较好的搭配方式",slug:"比较好的搭配方式",normalizedTitle:"比较好的搭配方式",charIndex:511}],headersStr:"setState函数式状态 setState更新状态的2种写法 总结 lazyLoad懒加载和Suspense lazyLoad Suspense Hooks函数式 React Hook/Hooks是什么? 三个常用的Hook State Hook Effect Hook Ref Hook Fragment标签碎片 背景 使用 作用 Context通信 理解 使用 注意 PureComponent组件优化 Component目前的2个问题 效率高的做法 原因 解决 render props传入标签内容 如何向组件内部动态传入带内容的结构(标签)? children props render props 错误边界 理解 特点 使用方式 组件通信方式总结 组件间的关系 几种通信方式 比较好的搭配方式",content:" * setState函数式状态\n   * setState更新状态的2种写法\n   * 总结\n * lazyLoad懒加载和Suspense\n   * lazyLoad\n   * Suspense\n * Hooks函数式\n   * React Hook/Hooks是什么?\n   * 三个常用的Hook\n   * State Hook\n   * Effect Hook\n   * Ref Hook\n * Fragment标签碎片\n   * 背景\n   * 使用\n   * 作用\n * Context通信\n   * 理解\n   * 使用\n   * 注意\n * PureComponent组件优化\n   * Component目前的2个问题\n   * 效率高的做法\n   * 原因\n   * 解决\n * render props传入标签内容\n   * 如何向组件内部动态传入带内容的结构(标签)?\n   * children props\n   * render props\n * 错误边界\n   * 理解\n   * 特点\n   * 使用方式\n * 组件通信方式总结\n   * 组件间的关系\n   * 几种通信方式\n   * 比较好的搭配方式\n\n\n\n\n# setState函数式状态\n\n\n# setState更新状态的2种写法\n\n * setState（stateChange, [callback]) 对象式的 setState（常用）\n   \n   stateChange 为状态改变对象（该对象可以体现出状态的更改）\n   \n   callback 是可选的回调函数，它在状态更新完毕、界面也更新后（render 调用后）才被调用\n   \n   const {count} = this.state\n   // 更新状态\n   this.setState({count:count+1},()=>{\n       console.log(this.state.count);  // 打印出来时 更新后的数据\n   })\n   // console.log('12行的输出',this.state.count);  // 异步，所以打印出来的 count 是没 +1 之前的数据\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   \n\n * setState(updater, [callback]) 函数式的 setState\n   \n   updater 为返回 stateChange 对象的函数。\n   \n   updater 可以接收到 state 和 props。\n   \n   callback 是可选的回调函数，它在状态更新、界面也更新后（render 调用后）才被调用。\n\n\n# 总结\n\n对象式的 setState 是函数式的 setState 的简写方式（语法糖）。\n\n使用原则：\n\n * 如果新状态不依赖于原状态 ===> 使用对象方式\n\n * 如果新状态依赖于原状态 ===> 使用函数方式\n\n * 如果需要在 setState() 执行后获取最新的状态数据，要在第二个 callback 函数中读取\n\nthis.setState( (state,props) => ({count:state.count+1}),()=>{})\n\n\n1\n\n\n\n# lazyLoad懒加载和Suspense\n\n\n# lazyLoad\n\n懒加载作用：初始页面不会全部加载懒加载包裹的组件，当点击组件时候再去加载，第二次再点击相同的懒加载包裹的组件就没有用了。\n\n具体：\n\nimport { lazy } from 'react'\n\n// 不使用lazy，原先的import\n// import xxx from '组件'\n\n// 使用lazy替换原来的import\nconst xxx = lazy(function(){\n    import('组件') \n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# Suspense\n\n作用：Suspense 包括的组件如果还在渲染或者渲染失败的时候，显示自定义组件（Loading，404 等）\n\n具体：<Suspense fallback={自定义组件}> 组件内容 </Suspense>\n\nimport React, { Component,lazy,Suspense} from 'react'\n// 1.通过 React 的 lazy 函数配合 import() 函数动态加载路由组件 ===> 路由组件代码会被分开打包\nconst Login = lazy(()=>import('@/pages/Login'))\n......\n// 2.通过 <Suspense> 指定在加载得到路由打包文件前显示一个自定义 loading 界面\nrender() {\n    <Suspense fallback={<h1>loading.....</h1>}>\n        <Switch>\n            <Route path=\"/xxx\" component={Xxx}/>\n            <Redirect to=\"/login\"/>\n        </Switch>\n    </Suspense>\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# Hooks函数式\n\n\n# React Hook/Hooks是什么?\n\n 1. Hook 是 React 16.8.0 版本增加的新特性/新语法\n 2. 可以让你在 函数组件中使用 state 、生命周期函数、ref 以及其他的 React 特性\n\n\n# 三个常用的Hook\n\n 1. State Hook: React.useState()\n\n 2. Effect Hook: React.useEffect()\n\n 3. Ref Hook: React.useRef()\n\n\n# State Hook\n\n 1. State Hook 让函数组件也可以有 state 状态，并进行状态数据的读写操作\n\n 2. 语法: const [xxx, setXxx] = React.useState(initValue)\n\n 3. useState() 说明：\n    \n    * 参数：第一次初始化指定的值在内部作缓存，即初始化的 state 的 value 值\n    \n    * 返回值: 包含 2 个元素的数组，第 1 个为内部当前 state 状态 key，第 2 个为更新状态值的函数\n\n 4. setXxx() 的 2 种写法：\n    \n    setXxx(newValue): 参数为非函数值，直接指定新的状态值，内部用其覆盖原来的状态值\n    \n    setXxx(value => newValue): 参数为函数，接收原本的状态值，返回新的状态值，内部用其覆盖原来的状态值\n\n下列需求：初始化 count 值为 0，点击一次加 1\n\nimport React from 'react'\nfunction Demo(){\n\tconst [count,setCount] = React.useState(0)   // 初始化 count=0，存入 state 里\n    add(){\n        // 第一种\n        // setXxx(count+1)\n        // 第二种\n        setCount(count => count+1 )\n    }\n    return (\n    \t<div>\n\t\t\t<h2>当前求和为：{count}</h2>\n\t\t\t<button onClick={add}>点我+1</button>\n\t\t</div>\n    )\n }\nexport default Demo\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# Effect Hook\n\n 1. Effect Hook 可以让你在函数组件中执行副作用操作（用于模拟类组件中的生命周期钩子）\n\n 2. React 中的副作用操作:\n    \n    * 发 ajax 请求数据获取\n    \n    * 设置订阅 / 启动定时器\n    \n    * 手动更改真实 DOM\n\n 3. 语法和说明: （useEffect 接收两个参数）\n    \n    * 参数一：为函数，如果没有第二个参数，则代表 componentDidMount 和 componentDidUpdate两个生命函数\n    \n    * 该函数可以有返回值，返回值为函数，且该函数其实就是componentWillUnmount 生命函数\n    \n    * 参数二：为数组，可指定监测哪个 state 里的数据\n      \n      比如监测 state 的 count 和 name 属性，则 ['count','name]（通过 componentDidUpdate 生命函数）\n      \n      数组为空，则代表所有数据都不监听，即只有 componentDidMount 生命函数被调用\n    \n    import React from 'react'\n    useEffect(() => { \n        // 在此可以执行任何带副作用操作\n        ......\n        return () => { // 在组件卸载前执行\n            // 在此做一些收尾工作，比如清除定时器/取消订阅等\n            ......\n        }\n    }, [stateValue]) // 如果指定的是[]，回调函数只会在第一次render()后执行\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    \n\n 4. 可以把 useEffect Hook 看做如下三个函数的组合\n    \n    componentDidMount()\n    componentDidUpdate()\n    componentWillUnmount() \n    \n    \n    1\n    2\n    3\n    \n\n需求：页面挂载完，定时器让 count 每秒 +1，销毁前清除定时器\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nfunction Demo(){\n\tconst [count,setCount] = React.useState(0)\n\tReact.useEffect(()=>{\n\t\tlet timer = setInterval(()=>{\n\t\t\tsetCount(count => count+1 )\n\t\t},1000)  // 页面一挂载就执行该操作，componentDidMount生命函数\n\t\treturn ()=>{// 页面即将卸载实行该操作，componentWillUnmount生命函数\n\t\t\tclearInterval(timer)\n\t\t} \n\t},[]) // [] 代表不使用 componentDidUpdate 生命函数，去掉 [] 代表 componentDidMount 生命函数和 componentDidUpdate 生命函数都使用\n\n\t// 加的回调\n\tfunction add(){\n\t\t// setCount(count+1) //第一种写法\n\t\tsetCount(count => count+1 )\n\t}\n\t// 卸载组件的回调\n\tfunction unmount(){\n\t\tReactDOM.unmountComponentAtNode(document.getElementById('root'))\n\t}\n\treturn (\n\t\t<div>\n\t\t\t<h2>当前求和为：{count}</h2>\n\t\t\t<button onClick={add}>点我+1</button>\n\t\t\t<button onClick={unmount}>卸载组件</button>\n\t\t</div>\n\t)\n}\n\nexport default Demo\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n\n# Ref Hook\n\n 1. Ref Hook 可以在函数组件中存储 / 查找组件内的标签或任意其它数据\n 2. 语法：const refContainer = React.useRef()，和const refContainer = React.createRef() 类似\n 3. 作用：保存标签对象，功能与 React.createRef() 一样\n\nimport React from 'react'\nfunction Demo(){\n    const myRef = React.useRef()\n    function show(){\n        alert(myRef.current.value)\n    }\n    return (\n        <div>\n            <input type=\"text\" ref={myRef}/>\n            <button onClick={show}>点我提示数据</button>\n        </div>\n    )\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# Fragment标签碎片\n\n\n# 背景\n\nrender(){return()} 的 return 里必须有一个根标签包裹所有标签，渲染时候这个根标签也会被渲染，如果不想根标签被渲染，使用 Fragment 代替。\n\n\n# 使用\n\n<Fragment key={xx}>  { /* 只接受 key，可写，可不写，遍历数组需要些 */ }\n    // 真正需要的标签们\n</Fragment>\n\n// 另一种写法，空标签\n<>\n// 真正需要的标签们\n<>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 作用\n\n可以不用必须有一个真实的 DOM 根标签了，即 Fragment 可以代替一个 div，且渲染时候 Fragment 会被去掉。\n\n\n# Context通信\n\n\n# 理解\n\n一种组件间通信方式，常用于【祖组件】与【后代组件】间通信，和 Vue 的 provide 和 inject 一样。\n\n\n# 使用\n\n 1. 创建 Context 容器对象：（在类组件或者函数组件外面定义）\n    \n    const XxxContext = React.createContext()  \n    \n    \n    1\n    \n\n 2. 渲染子组件时，外面包裹 xxxContext.Provider，通过 value 属性给后代组件传递数据：\n    \n    <xxxContext.Provider value={数据}>\n     // 子组件\n     </xxxContext.Provider>\n    \n    \n    1\n    2\n    3\n    \n\n 3. 后代组件读取数据：\n    \n    第一种方式：仅适用于类组件\n    \n    static contextType = xxxContext  // 声明接收 context\n    this.context // 读取 context 中的 value 数据\n    \n    \n    1\n    2\n    \n    \n    第二种方式：函数组件与类组件都可以\n    \n    <xxxContext.Consumer>\n        {\n            value => ( // value 就是 context 中的 value 数据\n                // 要显示的内容\n            )\n        }\n    </xxxContext.Consumer>\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    \n\n\n# 注意\n\n在应用开发中一般不用 Context，一般都用它的封装 React 插件。\n\n\n# PureComponent组件优化\n\n\n# Component目前的2个问题\n\n 1. 只要执行 setState()，即使不改变状态数据，组件也会重新 render() ==> 效率低\n\n 2. 只当前组件重新 render()，就会自动重新 render 子组件，纵使子组件没有用到父组件的任何数据 ==> 效率低\n\n\n# 效率高的做法\n\n只有当组件的 state 或 props 数据发生改变时才重新 render()。\n\n\n# 原因\n\nComponent 中的 shouldComponentUpdate() 总是返回 true。\n\n\n# 解决\n\n 1. 办法 1：重写 shouldComponentUpdate() 方法（手写）\n    \n    * 比较新旧 state 或 props 数据，如果有变化才返回 true，如果没有返回 false\n    \n    shouldComponentUpdate(nextProps,nextState){\n        return !this.state.carName === nextState.carName\n    }\n    \n    \n    1\n    2\n    3\n    \n\n 2. 办法 2：使用 PureComponent（官方封装）\n    \n    * PureComponent 重写了 shouldComponentUpdate()，只有 state 或 props 数据有变化才返回 true\n    \n    注意:\n    \n    * 只是进行 state 和 props 数据的浅比较，如果只是数据对象内部数据变了，返回 false\n    \n    * 不要直接修改 state 数据，而是要产生新数据（使用新数据替换原来数据，而不是原来数据的修改）\n    \n    项目中一般使用 PureComponent 来优化\n    \n    import React, { PureComponent } from 'react'\n    // 原先\n    export default class Parent extends Component {}\n    // 使用 PureComponent\n    export default class Parent extends PureComponent {}\n    \n    \n    1\n    2\n    3\n    4\n    5\n    \n\n\n# render props传入标签内容\n\n\n# 如何向组件内部动态传入带内容的结构(标签)?\n\n 1. Vue 中:\n    \n    使用 Slot 技术，也就是通过组件标签体传入结构 <A><B/></A>\n\n 2. React 中：\n    \n    使用 children props：通过组件标签体传入结构\n    \n    使用 render props：通过组件标签属性传入结构，而且可以携带数据，一般用 render 函数属性\n\n\n# children props\n\n<A>\n    <B>xxxx</B>\n</A>\n{this.props.children}\n// 问题: 如果 B 组件需要A组件内的数据 ==> 做不到\n\n\n1\n2\n3\n4\n5\n\n\n\n# render props\n\n 1. A 组件: {this.props.render(内部 state 数据)} 往父组件传数据\n 2. C 组件: 在父组件读取 A 组件传入的数据显示 {this.props.data}\n\n<A render={(data) => <C data={data}></C>}></A>\n\n\n1\n\n\n整体代码：（A 组件和 B 组件是父子关系，但是 A 组件内不写 B 组件，而是通过父组件 Parent 给 A 和 B 进行父子组件绑定，需要 A 组件把数据传给父组件 Parent，父组件 Parent 再把数据传给 B 组件）\n\nimport React, { Component } from 'react'\nimport C from '../1_setState'\nexport default class Parent extends Component { // 父组件 Parent\n    render() {\n        return (\n            <div className=\"parent\">\n                <h3>我是Parent组件</h3>\n                <A render={(name)=><C name={name}/>}/>\n            </div>\n        )\n    }\n}\nclass A extends Component {  // 子组件 A\n    state = {name:'tom'}\n    render() {\n        const {name} = this.state\n        return (\n            <div className=\"a\">\n                <h3>我是A组件</h3>\n                {this.props.render(name)}\n            </div>\n        )\n    }\n}\nclass B extends Component {  //子组件 B\n    render() {\n        return (\n            <div className=\"b\">\n                <h3>我是B组件,{this.props.name}</h3>\n            </div>\n        )\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# 错误边界\n\n\n# 理解\n\n错误边界（Error boundary）：用来捕获后代组件错误，渲染出备用页面，解决后代组件出现错误，导致整个组件都出现错误扩散。\n\n\n# 特点\n\n只能捕获后代组件生命周期产生的错误，不能捕获自己组件产生的错误和其他组件在合成事件、定时器中产生的错误。\n\n\n# 使用方式\n\ngetDerivedStateFromError 配合 componentDidCatch，前者进行错误捕获，后者进行错误统计。\n\n错误捕获：然后修改管理错误的数据，一旦错误的数据进行更新，说明出现错误，则出现错误的组件不再显示，显示自定义组件（使用三目运算进行判断）。\n\n// 生命周期函数，一旦后台组件报错，就会触发\nstatic getDerivedStateFromError(error) {\n    console.log(error);\n    // 在 render 之前触发\n    // 返回新的 state\n    return {\n        hasError: error,\n    };\n}\n\ncomponentDidCatch(error, info) {\n    // 统计页面的错误。发送请求发送到后台去\n    console.log(error, info);\n}\nrender() {\n    return (\n        <div>\n            <h2>我是Parent组件</h2>\n            {this.state.hasError ? <h2>当前网络不稳定，稍后再试</h2> : <Child/>}\n        </div>\n    )\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# 组件通信方式总结\n\n\n# 组件间的关系\n\n * 父子组件\n * 兄弟组件（非嵌套组件）\n * 祖孙组件（跨级组件）\n\n\n# 几种通信方式\n\nprops：\n\n * children props\n * render props\n\n消息订阅-发布：\n\n * pubs-sub、event 等等\n\n集中式管理：\n\n * redux、dva 等等\n\nconText：\n\n * 生产者-消费者模式\n\n\n# 比较好的搭配方式\n\n * 父子组件：props\n * 兄弟组件：消息订阅-发布、集中式管理\n * 祖孙组件（跨级组件）：消息订阅-发布、集中式管理、conText（开发用的少，封装插件用的多）",normalizedContent:" * setstate函数式状态\n   * setstate更新状态的2种写法\n   * 总结\n * lazyload懒加载和suspense\n   * lazyload\n   * suspense\n * hooks函数式\n   * react hook/hooks是什么?\n   * 三个常用的hook\n   * state hook\n   * effect hook\n   * ref hook\n * fragment标签碎片\n   * 背景\n   * 使用\n   * 作用\n * context通信\n   * 理解\n   * 使用\n   * 注意\n * purecomponent组件优化\n   * component目前的2个问题\n   * 效率高的做法\n   * 原因\n   * 解决\n * render props传入标签内容\n   * 如何向组件内部动态传入带内容的结构(标签)?\n   * children props\n   * render props\n * 错误边界\n   * 理解\n   * 特点\n   * 使用方式\n * 组件通信方式总结\n   * 组件间的关系\n   * 几种通信方式\n   * 比较好的搭配方式\n\n\n\n\n# setstate函数式状态\n\n\n# setstate更新状态的2种写法\n\n * setstate（statechange, [callback]) 对象式的 setstate（常用）\n   \n   statechange 为状态改变对象（该对象可以体现出状态的更改）\n   \n   callback 是可选的回调函数，它在状态更新完毕、界面也更新后（render 调用后）才被调用\n   \n   const {count} = this.state\n   // 更新状态\n   this.setstate({count:count+1},()=>{\n       console.log(this.state.count);  // 打印出来时 更新后的数据\n   })\n   // console.log('12行的输出',this.state.count);  // 异步，所以打印出来的 count 是没 +1 之前的数据\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   \n\n * setstate(updater, [callback]) 函数式的 setstate\n   \n   updater 为返回 statechange 对象的函数。\n   \n   updater 可以接收到 state 和 props。\n   \n   callback 是可选的回调函数，它在状态更新、界面也更新后（render 调用后）才被调用。\n\n\n# 总结\n\n对象式的 setstate 是函数式的 setstate 的简写方式（语法糖）。\n\n使用原则：\n\n * 如果新状态不依赖于原状态 ===> 使用对象方式\n\n * 如果新状态依赖于原状态 ===> 使用函数方式\n\n * 如果需要在 setstate() 执行后获取最新的状态数据，要在第二个 callback 函数中读取\n\nthis.setstate( (state,props) => ({count:state.count+1}),()=>{})\n\n\n1\n\n\n\n# lazyload懒加载和suspense\n\n\n# lazyload\n\n懒加载作用：初始页面不会全部加载懒加载包裹的组件，当点击组件时候再去加载，第二次再点击相同的懒加载包裹的组件就没有用了。\n\n具体：\n\nimport { lazy } from 'react'\n\n// 不使用lazy，原先的import\n// import xxx from '组件'\n\n// 使用lazy替换原来的import\nconst xxx = lazy(function(){\n    import('组件') \n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# suspense\n\n作用：suspense 包括的组件如果还在渲染或者渲染失败的时候，显示自定义组件（loading，404 等）\n\n具体：<suspense fallback={自定义组件}> 组件内容 </suspense>\n\nimport react, { component,lazy,suspense} from 'react'\n// 1.通过 react 的 lazy 函数配合 import() 函数动态加载路由组件 ===> 路由组件代码会被分开打包\nconst login = lazy(()=>import('@/pages/login'))\n......\n// 2.通过 <suspense> 指定在加载得到路由打包文件前显示一个自定义 loading 界面\nrender() {\n    <suspense fallback={<h1>loading.....</h1>}>\n        <switch>\n            <route path=\"/xxx\" component={xxx}/>\n            <redirect to=\"/login\"/>\n        </switch>\n    </suspense>\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# hooks函数式\n\n\n# react hook/hooks是什么?\n\n 1. hook 是 react 16.8.0 版本增加的新特性/新语法\n 2. 可以让你在 函数组件中使用 state 、生命周期函数、ref 以及其他的 react 特性\n\n\n# 三个常用的hook\n\n 1. state hook: react.usestate()\n\n 2. effect hook: react.useeffect()\n\n 3. ref hook: react.useref()\n\n\n# state hook\n\n 1. state hook 让函数组件也可以有 state 状态，并进行状态数据的读写操作\n\n 2. 语法: const [xxx, setxxx] = react.usestate(initvalue)\n\n 3. usestate() 说明：\n    \n    * 参数：第一次初始化指定的值在内部作缓存，即初始化的 state 的 value 值\n    \n    * 返回值: 包含 2 个元素的数组，第 1 个为内部当前 state 状态 key，第 2 个为更新状态值的函数\n\n 4. setxxx() 的 2 种写法：\n    \n    setxxx(newvalue): 参数为非函数值，直接指定新的状态值，内部用其覆盖原来的状态值\n    \n    setxxx(value => newvalue): 参数为函数，接收原本的状态值，返回新的状态值，内部用其覆盖原来的状态值\n\n下列需求：初始化 count 值为 0，点击一次加 1\n\nimport react from 'react'\nfunction demo(){\n\tconst [count,setcount] = react.usestate(0)   // 初始化 count=0，存入 state 里\n    add(){\n        // 第一种\n        // setxxx(count+1)\n        // 第二种\n        setcount(count => count+1 )\n    }\n    return (\n    \t<div>\n\t\t\t<h2>当前求和为：{count}</h2>\n\t\t\t<button onclick={add}>点我+1</button>\n\t\t</div>\n    )\n }\nexport default demo\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# effect hook\n\n 1. effect hook 可以让你在函数组件中执行副作用操作（用于模拟类组件中的生命周期钩子）\n\n 2. react 中的副作用操作:\n    \n    * 发 ajax 请求数据获取\n    \n    * 设置订阅 / 启动定时器\n    \n    * 手动更改真实 dom\n\n 3. 语法和说明: （useeffect 接收两个参数）\n    \n    * 参数一：为函数，如果没有第二个参数，则代表 componentdidmount 和 componentdidupdate两个生命函数\n    \n    * 该函数可以有返回值，返回值为函数，且该函数其实就是componentwillunmount 生命函数\n    \n    * 参数二：为数组，可指定监测哪个 state 里的数据\n      \n      比如监测 state 的 count 和 name 属性，则 ['count','name]（通过 componentdidupdate 生命函数）\n      \n      数组为空，则代表所有数据都不监听，即只有 componentdidmount 生命函数被调用\n    \n    import react from 'react'\n    useeffect(() => { \n        // 在此可以执行任何带副作用操作\n        ......\n        return () => { // 在组件卸载前执行\n            // 在此做一些收尾工作，比如清除定时器/取消订阅等\n            ......\n        }\n    }, [statevalue]) // 如果指定的是[]，回调函数只会在第一次render()后执行\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    \n\n 4. 可以把 useeffect hook 看做如下三个函数的组合\n    \n    componentdidmount()\n    componentdidupdate()\n    componentwillunmount() \n    \n    \n    1\n    2\n    3\n    \n\n需求：页面挂载完，定时器让 count 每秒 +1，销毁前清除定时器\n\nimport react from 'react'\nimport reactdom from 'react-dom'\nfunction demo(){\n\tconst [count,setcount] = react.usestate(0)\n\treact.useeffect(()=>{\n\t\tlet timer = setinterval(()=>{\n\t\t\tsetcount(count => count+1 )\n\t\t},1000)  // 页面一挂载就执行该操作，componentdidmount生命函数\n\t\treturn ()=>{// 页面即将卸载实行该操作，componentwillunmount生命函数\n\t\t\tclearinterval(timer)\n\t\t} \n\t},[]) // [] 代表不使用 componentdidupdate 生命函数，去掉 [] 代表 componentdidmount 生命函数和 componentdidupdate 生命函数都使用\n\n\t// 加的回调\n\tfunction add(){\n\t\t// setcount(count+1) //第一种写法\n\t\tsetcount(count => count+1 )\n\t}\n\t// 卸载组件的回调\n\tfunction unmount(){\n\t\treactdom.unmountcomponentatnode(document.getelementbyid('root'))\n\t}\n\treturn (\n\t\t<div>\n\t\t\t<h2>当前求和为：{count}</h2>\n\t\t\t<button onclick={add}>点我+1</button>\n\t\t\t<button onclick={unmount}>卸载组件</button>\n\t\t</div>\n\t)\n}\n\nexport default demo\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n\n# ref hook\n\n 1. ref hook 可以在函数组件中存储 / 查找组件内的标签或任意其它数据\n 2. 语法：const refcontainer = react.useref()，和const refcontainer = react.createref() 类似\n 3. 作用：保存标签对象，功能与 react.createref() 一样\n\nimport react from 'react'\nfunction demo(){\n    const myref = react.useref()\n    function show(){\n        alert(myref.current.value)\n    }\n    return (\n        <div>\n            <input type=\"text\" ref={myref}/>\n            <button onclick={show}>点我提示数据</button>\n        </div>\n    )\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# fragment标签碎片\n\n\n# 背景\n\nrender(){return()} 的 return 里必须有一个根标签包裹所有标签，渲染时候这个根标签也会被渲染，如果不想根标签被渲染，使用 fragment 代替。\n\n\n# 使用\n\n<fragment key={xx}>  { /* 只接受 key，可写，可不写，遍历数组需要些 */ }\n    // 真正需要的标签们\n</fragment>\n\n// 另一种写法，空标签\n<>\n// 真正需要的标签们\n<>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 作用\n\n可以不用必须有一个真实的 dom 根标签了，即 fragment 可以代替一个 div，且渲染时候 fragment 会被去掉。\n\n\n# context通信\n\n\n# 理解\n\n一种组件间通信方式，常用于【祖组件】与【后代组件】间通信，和 vue 的 provide 和 inject 一样。\n\n\n# 使用\n\n 1. 创建 context 容器对象：（在类组件或者函数组件外面定义）\n    \n    const xxxcontext = react.createcontext()  \n    \n    \n    1\n    \n\n 2. 渲染子组件时，外面包裹 xxxcontext.provider，通过 value 属性给后代组件传递数据：\n    \n    <xxxcontext.provider value={数据}>\n     // 子组件\n     </xxxcontext.provider>\n    \n    \n    1\n    2\n    3\n    \n\n 3. 后代组件读取数据：\n    \n    第一种方式：仅适用于类组件\n    \n    static contexttype = xxxcontext  // 声明接收 context\n    this.context // 读取 context 中的 value 数据\n    \n    \n    1\n    2\n    \n    \n    第二种方式：函数组件与类组件都可以\n    \n    <xxxcontext.consumer>\n        {\n            value => ( // value 就是 context 中的 value 数据\n                // 要显示的内容\n            )\n        }\n    </xxxcontext.consumer>\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    \n\n\n# 注意\n\n在应用开发中一般不用 context，一般都用它的封装 react 插件。\n\n\n# purecomponent组件优化\n\n\n# component目前的2个问题\n\n 1. 只要执行 setstate()，即使不改变状态数据，组件也会重新 render() ==> 效率低\n\n 2. 只当前组件重新 render()，就会自动重新 render 子组件，纵使子组件没有用到父组件的任何数据 ==> 效率低\n\n\n# 效率高的做法\n\n只有当组件的 state 或 props 数据发生改变时才重新 render()。\n\n\n# 原因\n\ncomponent 中的 shouldcomponentupdate() 总是返回 true。\n\n\n# 解决\n\n 1. 办法 1：重写 shouldcomponentupdate() 方法（手写）\n    \n    * 比较新旧 state 或 props 数据，如果有变化才返回 true，如果没有返回 false\n    \n    shouldcomponentupdate(nextprops,nextstate){\n        return !this.state.carname === nextstate.carname\n    }\n    \n    \n    1\n    2\n    3\n    \n\n 2. 办法 2：使用 purecomponent（官方封装）\n    \n    * purecomponent 重写了 shouldcomponentupdate()，只有 state 或 props 数据有变化才返回 true\n    \n    注意:\n    \n    * 只是进行 state 和 props 数据的浅比较，如果只是数据对象内部数据变了，返回 false\n    \n    * 不要直接修改 state 数据，而是要产生新数据（使用新数据替换原来数据，而不是原来数据的修改）\n    \n    项目中一般使用 purecomponent 来优化\n    \n    import react, { purecomponent } from 'react'\n    // 原先\n    export default class parent extends component {}\n    // 使用 purecomponent\n    export default class parent extends purecomponent {}\n    \n    \n    1\n    2\n    3\n    4\n    5\n    \n\n\n# render props传入标签内容\n\n\n# 如何向组件内部动态传入带内容的结构(标签)?\n\n 1. vue 中:\n    \n    使用 slot 技术，也就是通过组件标签体传入结构 <a><b/></a>\n\n 2. react 中：\n    \n    使用 children props：通过组件标签体传入结构\n    \n    使用 render props：通过组件标签属性传入结构，而且可以携带数据，一般用 render 函数属性\n\n\n# children props\n\n<a>\n    <b>xxxx</b>\n</a>\n{this.props.children}\n// 问题: 如果 b 组件需要a组件内的数据 ==> 做不到\n\n\n1\n2\n3\n4\n5\n\n\n\n# render props\n\n 1. a 组件: {this.props.render(内部 state 数据)} 往父组件传数据\n 2. c 组件: 在父组件读取 a 组件传入的数据显示 {this.props.data}\n\n<a render={(data) => <c data={data}></c>}></a>\n\n\n1\n\n\n整体代码：（a 组件和 b 组件是父子关系，但是 a 组件内不写 b 组件，而是通过父组件 parent 给 a 和 b 进行父子组件绑定，需要 a 组件把数据传给父组件 parent，父组件 parent 再把数据传给 b 组件）\n\nimport react, { component } from 'react'\nimport c from '../1_setstate'\nexport default class parent extends component { // 父组件 parent\n    render() {\n        return (\n            <div classname=\"parent\">\n                <h3>我是parent组件</h3>\n                <a render={(name)=><c name={name}/>}/>\n            </div>\n        )\n    }\n}\nclass a extends component {  // 子组件 a\n    state = {name:'tom'}\n    render() {\n        const {name} = this.state\n        return (\n            <div classname=\"a\">\n                <h3>我是a组件</h3>\n                {this.props.render(name)}\n            </div>\n        )\n    }\n}\nclass b extends component {  //子组件 b\n    render() {\n        return (\n            <div classname=\"b\">\n                <h3>我是b组件,{this.props.name}</h3>\n            </div>\n        )\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# 错误边界\n\n\n# 理解\n\n错误边界（error boundary）：用来捕获后代组件错误，渲染出备用页面，解决后代组件出现错误，导致整个组件都出现错误扩散。\n\n\n# 特点\n\n只能捕获后代组件生命周期产生的错误，不能捕获自己组件产生的错误和其他组件在合成事件、定时器中产生的错误。\n\n\n# 使用方式\n\ngetderivedstatefromerror 配合 componentdidcatch，前者进行错误捕获，后者进行错误统计。\n\n错误捕获：然后修改管理错误的数据，一旦错误的数据进行更新，说明出现错误，则出现错误的组件不再显示，显示自定义组件（使用三目运算进行判断）。\n\n// 生命周期函数，一旦后台组件报错，就会触发\nstatic getderivedstatefromerror(error) {\n    console.log(error);\n    // 在 render 之前触发\n    // 返回新的 state\n    return {\n        haserror: error,\n    };\n}\n\ncomponentdidcatch(error, info) {\n    // 统计页面的错误。发送请求发送到后台去\n    console.log(error, info);\n}\nrender() {\n    return (\n        <div>\n            <h2>我是parent组件</h2>\n            {this.state.haserror ? <h2>当前网络不稳定，稍后再试</h2> : <child/>}\n        </div>\n    )\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# 组件通信方式总结\n\n\n# 组件间的关系\n\n * 父子组件\n * 兄弟组件（非嵌套组件）\n * 祖孙组件（跨级组件）\n\n\n# 几种通信方式\n\nprops：\n\n * children props\n * render props\n\n消息订阅-发布：\n\n * pubs-sub、event 等等\n\n集中式管理：\n\n * redux、dva 等等\n\ncontext：\n\n * 生产者-消费者模式\n\n\n# 比较好的搭配方式\n\n * 父子组件：props\n * 兄弟组件：消息订阅-发布、集中式管理\n * 祖孙组件（跨级组件）：消息订阅-发布、集中式管理、context（开发用的少，封装插件用的多）",charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"导航站",frontmatter:{title:"导航站",date:"2022-01-04T20:02:46.000Z",permalink:"/navigation/",titleTag:"优质",article:!1,categories:[null],tags:[null],readingShow:"top"},regularPath:"/01.%E5%AF%BC%E8%88%AA%E7%AB%99.html",relativePath:"01.导航站.md",key:"v-2b466bca",path:"/navigation/",headers:[{level:2,title:"友情链接",slug:"友情链接",normalizedTitle:"友情链接",charIndex:61},{level:2,title:"搜索引擎",slug:"搜索引擎",normalizedTitle:"搜索引擎",charIndex:1472},{level:2,title:"代码托管",slug:"代码托管",normalizedTitle:"代码托管",charIndex:1481},{level:2,title:"前端开发",slug:"前端开发",normalizedTitle:"前端开发",charIndex:1490},{level:2,title:"后端开发",slug:"后端开发",normalizedTitle:"后端开发",charIndex:1499},{level:2,title:"文档工具",slug:"文档工具",normalizedTitle:"文档工具",charIndex:1508},{level:2,title:"热门社区",slug:"热门社区",normalizedTitle:"热门社区",charIndex:1517},{level:2,title:"工具合集",slug:"工具合集",normalizedTitle:"工具合集",charIndex:1526},{level:2,title:"文档教程",slug:"文档教程",normalizedTitle:"文档教程",charIndex:1535},{level:2,title:"动态图表",slug:"动态图表",normalizedTitle:"动态图表",charIndex:1544},{level:2,title:"图片图标",slug:"图片图标",normalizedTitle:"图片图标",charIndex:1553},{level:2,title:"CSS样式",slug:"css样式",normalizedTitle:"css样式",charIndex:1562},{level:2,title:"网站分析",slug:"网站分析",normalizedTitle:"网站分析",charIndex:1572},{level:2,title:"其它资源",slug:"其它资源",normalizedTitle:"其它资源",charIndex:1581},{level:2,title:"参考来源",slug:"参考来源",normalizedTitle:"参考来源",charIndex:1590}],headersStr:"友情链接 搜索引擎 代码托管 前端开发 后端开发 文档工具 热门社区 工具合集 文档教程 动态图表 图片图标 CSS样式 网站分析 其它资源 参考来源",content:"笔记\n\n本内容因为制作卡片效果，导致空间大小有限，如果想访问更多内容，点击前往。\n\n2021-01-11 @村长\n\n\n# 友情链接\n\nGeorge Chan\n\n让我给你讲讲他的传奇故事吧\n\nbutcher2000\n\n即使再小的帆，也能远航\n\nEvan's blog\n\n前端的小学生\n\n二丫讲梵\n\n💻学习📝记录🔗分享\n\nWeibw\n\n一个没有梦想的咸鱼\n\nJava 全栈知识体系\n\nJava 全栈知识体系\n\n- name: George Chan\n  desc: 让我给你讲讲他的传奇故事吧\n  avatar: https://z3.ax1x.com/2021/09/30/4oKMVI.jpg\n  link: https://cyc0819.top/\n  bgColor: '#FFB6C1'\n  textColor: '#621529'  \n  \n- name: butcher2000\n  desc: 即使再小的帆，也能远航\n  avatar: https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/user/20211029181901.png\n  link: https://blog.csdn.net/weixin_46827107\n  bgColor: '#CBEAFA'\n  textColor: '#6854A1'\n  \n- name: Evan's blog\n  desc: 前端的小学生\n  avatar: https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200103123203.jpg\n  link: https://xugaoyi.com/\n  bgColor: '#B9D59C'\n  textColor: '#3B551F'\n\n- name: 二丫讲梵\n  desc: 💻学习📝记录🔗分享\n  avatar: https://wiki.eryajf.net/img/logo.png\n  link: https://wiki.eryajf.net/\n  bgColor: '#FBEBEC'\n  textColor: '#603420'\n\n- name: Weibw\n  desc: 一个没有梦想的咸鱼\n  avatar: https://cdn.jsdelivr.net/gh/Weibw162/image-hosting@dev/%E6%9D%82%E5%BD%95/image.735febsv1zo0.webp\n  link: http://weibw162.com/\n  bgColor: '#FFCEDE'\n  textColor: '#621529'\n  \n- name: Java 全栈知识体系\n  desc: Java 全栈知识体系\n  avatar: https://www.pdai.tech/_images/index-read.gif\n  link: https://www.pdai.tech/\n  bgColor: '#FCDBA0'\n  textColor: '#A05F2C'\n  \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n如果您想互留友链，点击前往\n\n\n# 搜索引擎\n\n\n# 代码托管\n\n\n# 前端开发\n\n\n# 后端开发\n\n\n# 文档工具\n\n\n# 热门社区\n\n\n# 工具合集\n\n\n# 文档教程\n\n\n# 动态图表\n\n\n# 图片图标\n\n\n# CSS样式\n\n\n# 网站分析\n\n\n# 其它资源\n\n\n# 参考来源\n\nhttps://www.pdai.tech/md/resource/tools.html",normalizedContent:"笔记\n\n本内容因为制作卡片效果，导致空间大小有限，如果想访问更多内容，点击前往。\n\n2021-01-11 @村长\n\n\n# 友情链接\n\ngeorge chan\n\n让我给你讲讲他的传奇故事吧\n\nbutcher2000\n\n即使再小的帆，也能远航\n\nevan's blog\n\n前端的小学生\n\n二丫讲梵\n\n💻学习📝记录🔗分享\n\nweibw\n\n一个没有梦想的咸鱼\n\njava 全栈知识体系\n\njava 全栈知识体系\n\n- name: george chan\n  desc: 让我给你讲讲他的传奇故事吧\n  avatar: https://z3.ax1x.com/2021/09/30/4okmvi.jpg\n  link: https://cyc0819.top/\n  bgcolor: '#ffb6c1'\n  textcolor: '#621529'  \n  \n- name: butcher2000\n  desc: 即使再小的帆，也能远航\n  avatar: https://cdn.jsdelivr.net/gh/kele-bingtang/static/user/20211029181901.png\n  link: https://blog.csdn.net/weixin_46827107\n  bgcolor: '#cbeafa'\n  textcolor: '#6854a1'\n  \n- name: evan's blog\n  desc: 前端的小学生\n  avatar: https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200103123203.jpg\n  link: https://xugaoyi.com/\n  bgcolor: '#b9d59c'\n  textcolor: '#3b551f'\n\n- name: 二丫讲梵\n  desc: 💻学习📝记录🔗分享\n  avatar: https://wiki.eryajf.net/img/logo.png\n  link: https://wiki.eryajf.net/\n  bgcolor: '#fbebec'\n  textcolor: '#603420'\n\n- name: weibw\n  desc: 一个没有梦想的咸鱼\n  avatar: https://cdn.jsdelivr.net/gh/weibw162/image-hosting@dev/%e6%9d%82%e5%bd%95/image.735febsv1zo0.webp\n  link: http://weibw162.com/\n  bgcolor: '#ffcede'\n  textcolor: '#621529'\n  \n- name: java 全栈知识体系\n  desc: java 全栈知识体系\n  avatar: https://www.pdai.tech/_images/index-read.gif\n  link: https://www.pdai.tech/\n  bgcolor: '#fcdba0'\n  textcolor: '#a05f2c'\n  \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n如果您想互留友链，点击前往\n\n\n# 搜索引擎\n\n\n# 代码托管\n\n\n# 前端开发\n\n\n# 后端开发\n\n\n# 文档工具\n\n\n# 热门社区\n\n\n# 工具合集\n\n\n# 文档教程\n\n\n# 动态图表\n\n\n# 图片图标\n\n\n# css样式\n\n\n# 网站分析\n\n\n# 其它资源\n\n\n# 参考来源\n\nhttps://www.pdai.tech/md/resource/tools.html",charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"React - 父子传值与循环key",frontmatter:{title:"React - 父子传值与循环key",date:"2022-02-26T19:17:20.000Z",permalink:"/react/parent-circular/",categories:["React"],tags:["React"],readingShow:"top"},regularPath:"/10.%E5%89%8D%E7%AB%AF/50.React/13.React%20-%20%E7%88%B6%E5%AD%90%E4%BC%A0%E5%80%BC%E4%B8%8E%E5%BE%AA%E7%8E%AFkey.html",relativePath:"10.前端/50.React/13.React - 父子传值与循环key.md",key:"v-1c870c74",path:"/react/parent-circular/",headers:[{level:2,title:"父传值给子组件",slug:"父传值给子组件",normalizedTitle:"父传值给子组件",charIndex:3},{level:2,title:"子传值给父组件",slug:"子传值给父组件",normalizedTitle:"子传值给父组件",charIndex:14},{level:2,title:"循环 key",slug:"循环-key",normalizedTitle:"循环 key",charIndex:25},{level:2,title:"this问题",slug:"this问题",normalizedTitle:"this问题",charIndex:35}],headersStr:"父传值给子组件 子传值给父组件 循环 key this问题",content:' * 父传值给子组件\n * 子传值给父组件\n * 循环 key\n * this问题\n\n\n\n\n# 父传值给子组件\n\n父组件调用子组件的标签时，后面直接加 key=value。\n\n如 Item 标签传入了 key={todo.id} {...todo}\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\nrender() {\n    const {todos,updateTodo,deleteTodo} = this.props\n    return (\n        <ul className="todo-main">\n            {\n                todos.map( todo =>{\n                    return <Item key={todo.id} {...todo}/>\n                })\n            }\n        </ul>\n    )\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 子传值给父组件\n\n父组件事先写好一个（带有参数）函数，然后作为属性传入子组件，子组件只需要调用该函数并传入参数即可，实际就是子组件帮父组件调用自己的函数。\n\n// 父组件\nrender() {\n    const {todos} = this.state\n    return (\n        <div className="todo-container">\n            <div className="todo-wrap">\n                <Header addTodo={this.addTodo}/>\n                <List todos={todos} updateTodo={this.updateTodo} deleteTodo={this.deleteTodo}/>\n                <Footer todos={todos} checkAllTodo={this.checkAllTodo} clearAllDone={this.clearAllDone}/>\n            </div>\n        </div>\n    )\n}\n\n// 子组件 Header\n// 定义一个函数\nupdateTodo = () => {\n    const { updateTodo,  deleteTodo} = this.props;\n    // 调用父组件传来的函数，把值传给父组件\n    updateTodo("我是子组件");\n    deleteTodo("我是子组件");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# 循环 key\n\n循环的 key 不建议使用 index。\n\n经典面试题:\n\n * react/vue 中的 key 有什么作用？（key 的内部原理是什么？）\n\n * 为什么遍历列表时，key 最好不要用 index？\n\n> 虚拟 DOM 中 key 的作用\n\n简单的说: key 是虚拟 DOM 对象的标识，在更新显示时 key 起着极其重要的作用。\n\n详细的说: 当状态中的数据发生变化时，React 会根据【新数据】生成【新的虚拟 DOM】，随后 React 进行【新虚拟 DOM】与【旧虚拟 DOM】的 diff 比较，比较规则如下：\n\n * 旧虚拟 DOM 中找到了与新虚拟 DOM 相同的 key：\n   1. 若虚拟 DOM 中内容没变，直接使用之前的真实 DOM\n   2. 若虚拟 DOM 中内容变了，则生成新的真实 DOM，随后替换掉页面中之前的真实 DOM\n * 旧虚拟 DOM 中未找到与新虚拟 DOM 相同的 key：\n   1. 根据数据创建新的真实 DOM，随后渲染到到页面\n\n> 用 index 作为 key 可能会引发的问题\n\n若对数据进行逆序添加、逆序删除等破坏顺序操作：\n\n * 会产生没有必要的真实 DOM 更新，导致界面效果没问题，但效率低\n\n如果结构中还包含输入类的 DOM：\n\n * 会产生错误 DOM 更新，界面有问题\n\n注意：如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用 index 作为 key 是没有问题的。\n\n> 开发中如何选择 key\n\n最好使用每条数据的唯一标识作为 key，比如 id、手机号、身份证号、学号等唯一值。\n\n如果确定只是简单的展示数据，用 index 也是可以的。\n\n\n# this问题\n\n将 this 指向类的实例。\n\n在 class 类里，除了自带的函数（constructor、render....），其他自定义函数需要调用都必须由该类实例调用，所以 this 需要指向该类的实例，即可使用 this.xxx 方法\n\nthis 在函数的作用域是指向函数，而不是类的实例，故无法调用类的其他函数。\n\n * 如果需要在函数里调用其他方法，则需要使用 箭头函数，把 this 指向类的实例，即可 this. 其他方法。即需要使用 函数名 = () => {}赋值法，因为箭头函数没有名字，只能赋值给一个变量，通过变量调用该函数。\n\n * 使用 bind(this)，在 constructor 或者 render 里，把 this 传给方法，可以改变方法的 this。 原理：\n   \n   * xxx.bind() 方法是创建出一个新的函数，该函数和 xxx 的功能一模一样，xxx.bind(this) 创建新的和 xxx 一样的函数，同时把 this（React的） 传进来替换原来的 this（函数的）\n   * 如果在类自带的函数里使用 xxx.bind(this)，则该 this 就是指向类的实例，从而替换内部函数的 this，实现可以调用类的方法\n\n建议（流行） 使用箭头函数\n\nexport default class Form extends Component {\n    // 错误\n\tfunction1(){\n        // this 是函数的 this，没有 React 的数据 state 等\n    }    \n    // 正确\n    funtion2 = () => {\n        // this 是 React 的函数，可以调用其他 React 的函数和 s 数据\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n',normalizedContent:' * 父传值给子组件\n * 子传值给父组件\n * 循环 key\n * this问题\n\n\n\n\n# 父传值给子组件\n\n父组件调用子组件的标签时，后面直接加 key=value。\n\n如 item 标签传入了 key={todo.id} {...todo}\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\nrender() {\n    const {todos,updatetodo,deletetodo} = this.props\n    return (\n        <ul classname="todo-main">\n            {\n                todos.map( todo =>{\n                    return <item key={todo.id} {...todo}/>\n                })\n            }\n        </ul>\n    )\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 子传值给父组件\n\n父组件事先写好一个（带有参数）函数，然后作为属性传入子组件，子组件只需要调用该函数并传入参数即可，实际就是子组件帮父组件调用自己的函数。\n\n// 父组件\nrender() {\n    const {todos} = this.state\n    return (\n        <div classname="todo-container">\n            <div classname="todo-wrap">\n                <header addtodo={this.addtodo}/>\n                <list todos={todos} updatetodo={this.updatetodo} deletetodo={this.deletetodo}/>\n                <footer todos={todos} checkalltodo={this.checkalltodo} clearalldone={this.clearalldone}/>\n            </div>\n        </div>\n    )\n}\n\n// 子组件 header\n// 定义一个函数\nupdatetodo = () => {\n    const { updatetodo,  deletetodo} = this.props;\n    // 调用父组件传来的函数，把值传给父组件\n    updatetodo("我是子组件");\n    deletetodo("我是子组件");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# 循环 key\n\n循环的 key 不建议使用 index。\n\n经典面试题:\n\n * react/vue 中的 key 有什么作用？（key 的内部原理是什么？）\n\n * 为什么遍历列表时，key 最好不要用 index？\n\n> 虚拟 dom 中 key 的作用\n\n简单的说: key 是虚拟 dom 对象的标识，在更新显示时 key 起着极其重要的作用。\n\n详细的说: 当状态中的数据发生变化时，react 会根据【新数据】生成【新的虚拟 dom】，随后 react 进行【新虚拟 dom】与【旧虚拟 dom】的 diff 比较，比较规则如下：\n\n * 旧虚拟 dom 中找到了与新虚拟 dom 相同的 key：\n   1. 若虚拟 dom 中内容没变，直接使用之前的真实 dom\n   2. 若虚拟 dom 中内容变了，则生成新的真实 dom，随后替换掉页面中之前的真实 dom\n * 旧虚拟 dom 中未找到与新虚拟 dom 相同的 key：\n   1. 根据数据创建新的真实 dom，随后渲染到到页面\n\n> 用 index 作为 key 可能会引发的问题\n\n若对数据进行逆序添加、逆序删除等破坏顺序操作：\n\n * 会产生没有必要的真实 dom 更新，导致界面效果没问题，但效率低\n\n如果结构中还包含输入类的 dom：\n\n * 会产生错误 dom 更新，界面有问题\n\n注意：如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用 index 作为 key 是没有问题的。\n\n> 开发中如何选择 key\n\n最好使用每条数据的唯一标识作为 key，比如 id、手机号、身份证号、学号等唯一值。\n\n如果确定只是简单的展示数据，用 index 也是可以的。\n\n\n# this问题\n\n将 this 指向类的实例。\n\n在 class 类里，除了自带的函数（constructor、render....），其他自定义函数需要调用都必须由该类实例调用，所以 this 需要指向该类的实例，即可使用 this.xxx 方法\n\nthis 在函数的作用域是指向函数，而不是类的实例，故无法调用类的其他函数。\n\n * 如果需要在函数里调用其他方法，则需要使用 箭头函数，把 this 指向类的实例，即可 this. 其他方法。即需要使用 函数名 = () => {}赋值法，因为箭头函数没有名字，只能赋值给一个变量，通过变量调用该函数。\n\n * 使用 bind(this)，在 constructor 或者 render 里，把 this 传给方法，可以改变方法的 this。 原理：\n   \n   * xxx.bind() 方法是创建出一个新的函数，该函数和 xxx 的功能一模一样，xxx.bind(this) 创建新的和 xxx 一样的函数，同时把 this（react的） 传进来替换原来的 this（函数的）\n   * 如果在类自带的函数里使用 xxx.bind(this)，则该 this 就是指向类的实例，从而替换内部函数的 this，实现可以调用类的方法\n\n建议（流行） 使用箭头函数\n\nexport default class form extends component {\n    // 错误\n\tfunction1(){\n        // this 是函数的 this，没有 react 的数据 state 等\n    }    \n    // 正确\n    funtion2 = () => {\n        // this 是 react 的函数，可以调用其他 react 的函数和 s 数据\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n',charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"Vue2 - 测试",frontmatter:{title:"Vue2 - 测试",date:"2021-11-25T21:28:55.000Z",permalink:"/vue2/test/",article:!1,comment:!1,editLink:!1,categories:[null],tags:[null],readingShow:"top"},regularPath:"/10.%E5%89%8D%E7%AB%AF/55.Vue2/00.Vue2%20-%20%E6%B5%8B%E8%AF%95.html",relativePath:"10.前端/55.Vue2/00.Vue2 - 测试.md",key:"v-7daf4bbf",path:"/vue2/test/",headersStr:null,content:"证明她来过",normalizedContent:"证明她来过",charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"Vue3 - 测试",frontmatter:{title:"Vue3 - 测试",date:"2021-11-25T21:29:12.000Z",permalink:"/vue3/test/",article:!1,comment:!1,editLink:!1,categories:[null],tags:[null],readingShow:"top"},regularPath:"/10.%E5%89%8D%E7%AB%AF/60.Vue3/00.Vue3%20-%20%E6%B5%8B%E8%AF%95.html",relativePath:"10.前端/60.Vue3/00.Vue3 - 测试.md",key:"v-e26627e2",path:"/vue3/test/",headersStr:null,content:"证明她来过",normalizedContent:"证明她来过",charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"Maven - 基础",frontmatter:{title:"Maven - 基础",date:"2022-02-04T20:17:16.000Z",permalink:"/maven/basics/",categories:["Maven"],tags:["Maven"],readingShow:"top"},regularPath:"/40.%E5%B7%A5%E5%85%B7/10.%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%20-%20Maven/01.Maven%20-%20%E5%9F%BA%E7%A1%80.html",relativePath:"40.工具/10.版本管理 - Maven/01.Maven - 基础.md",key:"v-48b83d41",path:"/maven/basics/",headers:[{level:2,title:"Maven简介",slug:"maven简介",normalizedTitle:"maven简介",charIndex:3},{level:2,title:"Maven下载安装",slug:"maven下载安装",normalizedTitle:"maven下载安装",charIndex:14},{level:3,title:"下载",slug:"下载",normalizedTitle:"下载",charIndex:19},{level:3,title:"配置",slug:"配置",normalizedTitle:"配置",charIndex:37},{level:3,title:"测试",slug:"测试",normalizedTitle:"测试",charIndex:45},{level:2,title:"Maven基础概念",slug:"maven基础概念",normalizedTitle:"maven基础概念",charIndex:51},{level:3,title:"仓库",slug:"仓库",normalizedTitle:"仓库",charIndex:66},{level:3,title:"坐标",slug:"坐标",normalizedTitle:"坐标",charIndex:74},{level:3,title:"仓库配置",slug:"仓库配置",normalizedTitle:"仓库配置",charIndex:82},{level:2,title:"Maven项目",slug:"maven项目",normalizedTitle:"maven项目",charIndex:90},{level:3,title:"手动生成Maven项目",slug:"手动生成maven项目",normalizedTitle:"手动生成maven项目",charIndex:103},{level:3,title:"IDEA生成Maven项目",slug:"idea生成maven项目",normalizedTitle:"idea生成maven项目",charIndex:120},{level:2,title:"依赖管理",slug:"依赖管理",normalizedTitle:"依赖管理",charIndex:137},{level:2,title:"生命周期与插件",slug:"生命周期与插件",normalizedTitle:"生命周期与插件",charIndex:145},{level:3,title:"生命周期",slug:"生命周期",normalizedTitle:"生命周期",charIndex:145},{level:3,title:"插件",slug:"插件",normalizedTitle:"插件",charIndex:150}],headersStr:"Maven简介 Maven下载安装 下载 配置 测试 Maven基础概念 仓库 坐标 仓库配置 Maven项目 手动生成Maven项目 IDEA生成Maven项目 依赖管理 生命周期与插件 生命周期 插件",content:' * Maven简介\n * Maven下载安装\n   * 下载\n   * 配置\n   * 测试\n * Maven基础概念\n   * 仓库\n   * 坐标\n   * 仓库配置\n * Maven项目\n   * 手动生成Maven项目\n   * IDEA生成Maven项目\n * 依赖管理\n * 生命周期与插件\n   * 生命周期\n   * 插件\n\n\n\n\n# Maven简介\n\n> Maven 官网：http://maven.apache.org/\n> \n> Maven 下载：http://maven.apache.org/download.cg\n\n为什么 Maven 会出现？\n\n\n\n当我们升级某一个工具如 Mabatis 的时候，可能导致 Juint 版本需要更新，而这时开发人员又无法立即得知，所以产生了 jar 包冲突，那么我们需要一个强大的工具来管理每一个开发用到的 jar 包。\n\nMaven 的本质是一个项目管理工具，将项目开发和管理过程抽象成一个项目对象模型(POM)。\n\nPOM (Project Object Model）：项目对象模型。\n\n\n\nMaven 的作用：\n\n 1. 项目构建：提供标准的、跨平台的自动化项目构建方式\n 2. 依赖管理：方便快捷的管理项目依赖的资源（jar 包），避免资源间的版本冲突问题\n 3. 统一开发结构：提供标准的、统一的项目结构\n\n\n\n如上图的多个文件夹是早期开发的不同工具对应的文件夹，导致无法统一资源目录，而 Maven 的出现统一了资源目录，让什么资源放在什么目录的结构称为标准。\n\nMaven Java 资源目录如下：\n\n\n\n\n# Maven下载安装\n\n\n# 下载\n\nMaven 属于绿色版软件，解压即可安装。\n\n\n\n\n# 配置\n\nMaven 下载解压后，需要依赖 Java 环境才能运行，即配置好 JAVA_HOME。\n\n并且配置好 Java 的运行环境，即在环境变量指定 Maven 的运行路径。\n\n\n\n我这里叫 M2_HOME，也可以叫 MAVEN_HOME。\n\n配置好 Maven 的环境变量后，需要找到 Path，配置 Maven 的 bin 目录。\n\n\n\n\n# 测试\n\n确保我们配置的内容已经生效，在命令行输入 mvn，如果看到如图效果代表成功，只要不出现 mvn 不是内部或外部命令都代表成功。\n\n\n\n\n# Maven基础概念\n\n\n# 仓库\n\n\n\n仓库：用于存储资源，包含各种 jar 包。\n\n仓库分类：本地仓库和远程仓库（私服和中央仓库）。\n\n仓库分类:\n\n * 本地仓库：自己电脑上存储资源的仓库，连接远程仓库获取资源\n\n * 远程仓库：非本机电脑上的仓库，为本地仓库提供资源\n\n * 中央仓库：Maven 团队维护，存储所有资源的仓库\n\n * 私服：部门 / 公司范围内存储资源的仓库，从中央仓库获取资源\n   \n   私服的作用：\n   \n   * 保存具有版权的资源，包含购买或自主研发的 jar\n   * 中央仓库中的 jar 都是开源的，不能存储具有版权的资源\n   * 一定范围内共享资源，仅对内部开放，不对外共享\n\n\n# 坐标\n\n坐标：Maven 中的坐标用于描述仓库中资源的位置。\n\n * 坐标的主要组成：\n   \n   * groupId：定义当前 Maven 项目隶属组织名称（通常是域名反写）\n   \n   * artifactId：定义当前 Maven 项目名称（通常是模块名称）\n   \n   * version：定义当前版本号\n   \n   * packaging：定义该项目的打包方式\n\n * 坐标的作用：使用唯一的标识，唯一性定位资源位置，通过该标识可以将资源的识别与下载交由机器完成\n\n\n# 仓库配置\n\n我们下载的 jar 包放在本机的哪里？我们又如何自定义 jar 包的下载路径？需要进行仓库的配置。\n\n仓库的配置需要用到 Maven 安装目录下的 conf 目录下的 settings.xml 文件，打开它\n\n\n\n> 本地仓库配置\n\nMaven 启动后，会自动保存下载的资源到本地仓库。\n\n默认位置：\n\n<localRepository>${user.home}/.m2/repository</localRepository>\n\n\n1\n\n\n当前目录位置为登录用户名所在目录下的 .m2 文件夹中，即 C 盘下。\n\n自定义位置：\n\n<localRepository>F:\\Programming area\\Maven\\Maven_repository</localRepository>\n\n\n1\n\n\n当前目录位置为 F:\\Programming area\\Maven\\Maven_repository 文件夹中。\n\n\n\n笔记\n\n建议 自定义位置 到空间大的磁盘，因为后期下载的 jar 包非常多，占空间大。\n\n2022-02-05 @村长\n\n> 远程仓库配置\n\n远程仓库是固定的（国外），了解即可：Maven 默认从国外官网的中央仓库下载 jar 包。\n\n<repositories> \n    <repository>\n        <id>central</id>\n        <name>Central Repository</name> \n        <url>https://repo.maven.apache.org/maven2</url>\n        <layout>default</layout>\n        <snapshots>\n            <enabled>false</enabled> \n        </snapshots>\n    </repository> \n</repositories>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n> 镜像仓库配置\n\n默认的远程仓库我们无法修改，但是我们可以修改不访问默认的远程仓库，而是访问其他的仓库，这里使用的是国内的阿里云镜像仓库。\n\n打开 Maven 安装目录下的 conf 目录下的 settings.xml 文件，找到 <mirrors> 标签，在里面添加如下内容：\n\n<mirrors>\n    <mirror>\n        \x3c!-- 此镜像的唯一标识符，用来区分不同的 mirror 元素 --\x3e\n        <id>nexus-aliyun</id>\n        \x3c!-- 对那种仓库进行镜像（就是替代哪种仓库）--\x3e\n        <mirrorOf>central</mirrorOf>\n        \x3c!-- 镜像名称 --\x3e\n        <name>Nexus aliyun</name>\n        \x3c!-- 镜像 URL --\x3e\n        <url>http://maven.aliyun.com/nexus/content/groups/public</url>\n    </mirror> \n</mirrors>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n\n最终下载的 jar 包不再是国外的 Maven 官网仓库，而是国内的阿里云仓库，速度更快。\n\n\n# Maven项目\n\n\n# 手动生成Maven项目\n\n> Maven 工程目录结构\n\n\n\n在 src 同层目录下创建 pom.xml 文件，这是 Maven 管理项目的核心文件。\n\n文件内容例如：\n\n<?xml version="1.0" encoding="UTF-8"?>\n<project \n         xmlns="http://maven.apache.org/POM/4.0.0" \n         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" \n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>cn.knt</groupId>\n    <artifactId>project-java</artifactId>\n    <version>1.0</version>\n    <packaging>jar</packaging>\n    <dependencies>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.12</version>\n        </dependency>\n    </dependencies>\n</project>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n> Maven 项目构建命令\n\nMaven 构建命令使用 mvn 开头，后面加功能参数，可以一次执行多个命令，使用空格分隔。\n\nmvn compile # 编译\nmvn clean # 清理 编译产生的内容\nmvn test # 测试\nmvn package\t# 打包\nmvn install # 安装到本地仓库\n\n\n1\n2\n3\n4\n5\n\n\n> 构建命令生成项目\n\n创建工程\n\n进入到指定的目录下创建项目，命令如下：\n\nmvn archetype:generate \\\n\t-DgroupId={project-packaging} \\\n\t-DartifactId={project-name} \\\n\t-DarchetypeArtifactId=maven-archetype-quickstart \\\n\t-DinteractiveMode=false\n\n\n1\n2\n3\n4\n5\n\n\n创建 Java 工程\n\nmvn archetype:generate \\\n    -DgroupId=cn.kbt \\\n    -DartifactId=java-project \\\n    -DarchetypeArtifactId=maven-archetype-quickstart \\\n    -Dversion=0.0.1-snapshot \\\n    -DinteractiveMode=false\n\n\n1\n2\n3\n4\n5\n6\n\n\n创建 web 工程\n\nmvn archetype:generate \\\n    -DgroupId=cn.kbt \\\n    -DartifactId=web-project \\\n    -DarchetypeArtifactId=maven-archetype-webapp \\\n    -Dversion=0.0.1-snapshot \\\n    -DinteractiveMode=false \n\n\n1\n2\n3\n4\n5\n6\n\n\n\n\n\n# IDEA生成Maven项目\n\nIDEA 对 3.6.2 及以上版本存在兼容性问题，为避免冲突，IDEA 中安装使用 3.6.1 版本。\n\n在 IDEA 的 settings 中设置 Maven 的根目录、settings.xml 目录、仓库目录，如图：\n\n\n\n然后新建工程的时候，选择 Maven 即可。\n\n\n\n创建 Java 项目，选择 archetype-quickstart 进行项目创建\n\n\n\n创建 Web 项目，选择 archetype-webapp 进行项目创建\n\n\n\n如果用到 Tomcat，则在 pom.xml 中添加 Tomcat 插件\n\n<build> \n    <plugins>\n        <plugin> \n            <groupId>org.apache.tomcat.maven</groupId> \n            <artifactId>tomcat7-maven-plugin</artifactId> \t\t\t\t\n            <version>2.1</version>\n            <configuration>\n                <port>80</port>\n                <path>/</path> \n            </configuration>\n        </plugin> \n    </plugins>\n</build>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 依赖管理\n\n> 依赖配置\n\n依赖指的是当前项目运行所需要的 jar，一个项目可以设置多个依赖。\n\n格式：\n\n\x3c!-- 设置当前项目所依赖的所有 jar --\x3e\n<dependencies>\n    \x3c!-- 设置具体的依赖 --\x3e\n    <dependency>\n        \x3c!-- 依赖所属群组 id --\x3e\n        <groupId></groupId>\n        \x3c!-- 依赖所属项目 id --\x3e\n        <artifactId></artifactId>\n        \x3c!-- 依赖版本号 --\x3e\n        <version></version>\n    </dependency>\n</dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n> 依赖传递\n\n依赖具有传递性，包括直接传递和间接传递。\n\n * 直接传递：在当前项目中通过依赖配置建立的依赖关系（A 使用 B，A 和 B 就是直接传递）\n * 间接传递：被依赖的资源如果依赖其他资源，当前项目间接依赖其他资源（比较拗口，意思是如果 A 依赖 B，而 B 依赖 C，那么 A 和 C 之间就是间接传递）\n\n\n\n依赖传递的冲突问题：\n\n * 路径优先：当依赖中出现相同的资源时，层级越深，优先级越低，层级越浅，优先级越高\n * 声明优先：当资源在相同层级被依赖时，配置顺序靠前的覆盖配置顺序靠后的\n * 特殊优先：当同级配置了相同资源的不同版本，后配置的覆盖先配置的\n\n\n\n> 可选依赖 optional\n\n可选依赖指的是对外隐藏当前所依赖的资源。\n\n\n\n\n\n\n\n \n\n\n\n<dependency>\n    <groupId></groupId>\n    <artifactId></artifactId>\n    <version></version>\n    \x3c!-- 添加下面这一行，对外隐藏 --\x3e\n    <optional>true</optional>\n</dependency>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n> 排除依赖 exclusions\n\n排除依赖指主动断开依赖的资源，被排除的资源无需指定版本。\n\nexclusions 支持排除多个依赖，每个依赖需要用 <exclusion> 包裹起来。\n\n\n\n\n\n\n\n \n \n \n \n \n \n\n\n\n<dependency>\n    <groupId></groupId>\n    <artifactId></artifactId>\n    <version></version>\n    \x3c!-- exclusions 支持排除多个依赖 --\x3e\n    <exclusions>\n        <exclusion>\n            <groupId></groupId>\n            <artifactId></artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n> 依赖范围\n\n依赖的 jar 包默认情况可以在任何地方使用，可以通过 scope 标签设定其作用范围。\n\n作用范围：\n\n * 主程序范围有效（main 文件夹范围内）\n\n * 测试程序范围有效（test 文件夹范围内）\n\n * 是否参与打包（package 文件夹范围内）\n\nSCOPE         主代码   测试代码   打包   范例\ncompile（默认）   生效    生效     生效   log4j\ntest                生效          junit\nprovided      生效    生效          servlet-api\nruntime                    生效   jdbc\n\n选择 scope，主要看在哪个范围不生效。\n\n带有依赖范围的资源在进行传递时，作用范围将受到影响。\n\n<dependencies>\n    <dependency>\n        <groupId>junit</groupId>\n        <artifactId>junit</artifactId>\n        <version>4.11</version>\n        <scope>test</scope>\n    </dependency>\n</dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 生命周期与插件\n\n\n# 生命周期\n\nMaven 项目构建生命周期描述的是一次构建过程经历了多少个事件，配合插件使用（到了某个生命周期触发插件）。\n\n\n\nMaven 对项目构建的生命周期划分为 3 套：\n\n * clean：清理工作\n\n * default：核心工作，例如编译、测试、打包、部署等\n\n * site：产生报告，发布站点等\n\n> clean 生命周期\n\n * pre-clean：执行一些需要在 clean 之前完成的工作\n\n * clean：移除所有上一次构建生成的文件\n\n * post-clean：执行一些需要在 clean 之后立刻完成的工作\n\n> default 生命周期\n\nvalidate（校验） 校验项目是否正确并且所有必要的信息可以完成项目的构建过程。\ninitialize（初始化） 初始化构建状态，比如设置属性值。\ngenerate-sources（生成源代码） 生成包含在编译阶段中的任何源代码。\nprocess-sources（处理源代码） 处理源代码，比如说，过滤任意值。\ngenerate-resources（生成资源文件） 生成将会包含在项目包中的资源文件。\nprocess-resources （处理资源文件） 复制和处理资源到目标目录，为打包阶段最好准备。\ncompile（编译） 编译项目的源代码。\nprocess-classes（处理类文件） 处理编译生成的文件，比如说对Java class文件做字节码改善优化。\ngenerate-test-sources（生成测试源代码） 生成包含在编译阶段中的任何测试源代码。\nprocess-test-sources（处理测试源代码） 处理测试源代码，比如说，过滤任意值。\ngenerate-test-resources（生成测试资源文件） 为测试创建资源文件。\nprocess-test-resources（处理测试资源文件） 复制和处理测试资源到目标目录。\ntest-compile（编译测试源码） 编译测试源代码到测试目标目录.\nprocess-test-classes（处理测试类文件） 处理测试源码编译生成的文件。\ntest（测试） 使用合适的单元测试框架运行测试（Juint是其中之一）。\nprepare-package（准备打包） 在实际打包之前，执行任何的必要的操作为打包做准备。\npackage（打包） 将编译后的代码打包成可分发格式的文件，比如JAR、WAR或者EAR文件。\npre-integration-test（集成测试前） 在执行集成测试前进行必要的动作。比如说，搭建需要的环境。\nintegration-test（集成测试） 处理和部署项目到可以运行集成测试环境中。\npost-integration-test（集成测试后） 在执行集成测试完成后进行必要的动作。比如说，清理集成测试环境。\nverify （验证） 运行任意的检查来验证项目包有效且达到质量标准。\ninstall（安装） 安装项目包到本地仓库，这样项目包可以用作其他本地项目的依赖。\ndeploy（部署） 将最终的项目包复制到远程仓库中与其他开发者和项目共享。\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n并不是都会执行所有的步骤，而是执行选择步骤的上方步骤，如选择了 generate-test-resources，则 generate-test-resources 上面的步骤都会执行，但是下面的并不会执行。\n\n\n\n> site 生命周期\n\n * pre-site：执行一些需要在生成站点文档之前完成的工作\n\n * site：生成项目的站点文档\n\n * post-site：执行一些需要在生成站点文档之后完成的工作，并且为部署做准备\n\n * site-deploy：将生成的站点文档部署到特定的服务器上\n\n\n# 插件\n\n插件与生命周期内的阶段绑定，在执行到对应的生命周期时执行对应的插件功能。\n\n代码示例：\n\n\n\n\n\n\n\n\n\n\n\n \n \n\n \n\n\n\n\n\n\n\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-source-plugin</artifactId>\n            <version>2.2.1</version>\n            <executions>\n                <execution>\n                    <goals>  \x3c!-- 当运行到指定 phase 时执行 goals 内容 --\x3e\n                        <goal>jar</goal>  \t\t\x3c!-- 项目源码打 jar 包 --\x3e\n                        <goal>test-jar</goal>   \x3c!-- 测试源码打 jar 包 --\x3e\n                    </goals>\n                    <phase>generate-test-resources</phase> \x3c!-- phase：阶段 --\x3e\n                </execution>\n            </executions>\n        </plugin>\n    </plugins>\n</build>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n则运行到 generate-test-resources 阶段时，执行两个 goal 的内容：项目源码打 jar 包，测试源码打 jar 包。',normalizedContent:' * maven简介\n * maven下载安装\n   * 下载\n   * 配置\n   * 测试\n * maven基础概念\n   * 仓库\n   * 坐标\n   * 仓库配置\n * maven项目\n   * 手动生成maven项目\n   * idea生成maven项目\n * 依赖管理\n * 生命周期与插件\n   * 生命周期\n   * 插件\n\n\n\n\n# maven简介\n\n> maven 官网：http://maven.apache.org/\n> \n> maven 下载：http://maven.apache.org/download.cg\n\n为什么 maven 会出现？\n\n\n\n当我们升级某一个工具如 mabatis 的时候，可能导致 juint 版本需要更新，而这时开发人员又无法立即得知，所以产生了 jar 包冲突，那么我们需要一个强大的工具来管理每一个开发用到的 jar 包。\n\nmaven 的本质是一个项目管理工具，将项目开发和管理过程抽象成一个项目对象模型(pom)。\n\npom (project object model）：项目对象模型。\n\n\n\nmaven 的作用：\n\n 1. 项目构建：提供标准的、跨平台的自动化项目构建方式\n 2. 依赖管理：方便快捷的管理项目依赖的资源（jar 包），避免资源间的版本冲突问题\n 3. 统一开发结构：提供标准的、统一的项目结构\n\n\n\n如上图的多个文件夹是早期开发的不同工具对应的文件夹，导致无法统一资源目录，而 maven 的出现统一了资源目录，让什么资源放在什么目录的结构称为标准。\n\nmaven java 资源目录如下：\n\n\n\n\n# maven下载安装\n\n\n# 下载\n\nmaven 属于绿色版软件，解压即可安装。\n\n\n\n\n# 配置\n\nmaven 下载解压后，需要依赖 java 环境才能运行，即配置好 java_home。\n\n并且配置好 java 的运行环境，即在环境变量指定 maven 的运行路径。\n\n\n\n我这里叫 m2_home，也可以叫 maven_home。\n\n配置好 maven 的环境变量后，需要找到 path，配置 maven 的 bin 目录。\n\n\n\n\n# 测试\n\n确保我们配置的内容已经生效，在命令行输入 mvn，如果看到如图效果代表成功，只要不出现 mvn 不是内部或外部命令都代表成功。\n\n\n\n\n# maven基础概念\n\n\n# 仓库\n\n\n\n仓库：用于存储资源，包含各种 jar 包。\n\n仓库分类：本地仓库和远程仓库（私服和中央仓库）。\n\n仓库分类:\n\n * 本地仓库：自己电脑上存储资源的仓库，连接远程仓库获取资源\n\n * 远程仓库：非本机电脑上的仓库，为本地仓库提供资源\n\n * 中央仓库：maven 团队维护，存储所有资源的仓库\n\n * 私服：部门 / 公司范围内存储资源的仓库，从中央仓库获取资源\n   \n   私服的作用：\n   \n   * 保存具有版权的资源，包含购买或自主研发的 jar\n   * 中央仓库中的 jar 都是开源的，不能存储具有版权的资源\n   * 一定范围内共享资源，仅对内部开放，不对外共享\n\n\n# 坐标\n\n坐标：maven 中的坐标用于描述仓库中资源的位置。\n\n * 坐标的主要组成：\n   \n   * groupid：定义当前 maven 项目隶属组织名称（通常是域名反写）\n   \n   * artifactid：定义当前 maven 项目名称（通常是模块名称）\n   \n   * version：定义当前版本号\n   \n   * packaging：定义该项目的打包方式\n\n * 坐标的作用：使用唯一的标识，唯一性定位资源位置，通过该标识可以将资源的识别与下载交由机器完成\n\n\n# 仓库配置\n\n我们下载的 jar 包放在本机的哪里？我们又如何自定义 jar 包的下载路径？需要进行仓库的配置。\n\n仓库的配置需要用到 maven 安装目录下的 conf 目录下的 settings.xml 文件，打开它\n\n\n\n> 本地仓库配置\n\nmaven 启动后，会自动保存下载的资源到本地仓库。\n\n默认位置：\n\n<localrepository>${user.home}/.m2/repository</localrepository>\n\n\n1\n\n\n当前目录位置为登录用户名所在目录下的 .m2 文件夹中，即 c 盘下。\n\n自定义位置：\n\n<localrepository>f:\\programming area\\maven\\maven_repository</localrepository>\n\n\n1\n\n\n当前目录位置为 f:\\programming area\\maven\\maven_repository 文件夹中。\n\n\n\n笔记\n\n建议 自定义位置 到空间大的磁盘，因为后期下载的 jar 包非常多，占空间大。\n\n2022-02-05 @村长\n\n> 远程仓库配置\n\n远程仓库是固定的（国外），了解即可：maven 默认从国外官网的中央仓库下载 jar 包。\n\n<repositories> \n    <repository>\n        <id>central</id>\n        <name>central repository</name> \n        <url>https://repo.maven.apache.org/maven2</url>\n        <layout>default</layout>\n        <snapshots>\n            <enabled>false</enabled> \n        </snapshots>\n    </repository> \n</repositories>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n> 镜像仓库配置\n\n默认的远程仓库我们无法修改，但是我们可以修改不访问默认的远程仓库，而是访问其他的仓库，这里使用的是国内的阿里云镜像仓库。\n\n打开 maven 安装目录下的 conf 目录下的 settings.xml 文件，找到 <mirrors> 标签，在里面添加如下内容：\n\n<mirrors>\n    <mirror>\n        \x3c!-- 此镜像的唯一标识符，用来区分不同的 mirror 元素 --\x3e\n        <id>nexus-aliyun</id>\n        \x3c!-- 对那种仓库进行镜像（就是替代哪种仓库）--\x3e\n        <mirrorof>central</mirrorof>\n        \x3c!-- 镜像名称 --\x3e\n        <name>nexus aliyun</name>\n        \x3c!-- 镜像 url --\x3e\n        <url>http://maven.aliyun.com/nexus/content/groups/public</url>\n    </mirror> \n</mirrors>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n\n最终下载的 jar 包不再是国外的 maven 官网仓库，而是国内的阿里云仓库，速度更快。\n\n\n# maven项目\n\n\n# 手动生成maven项目\n\n> maven 工程目录结构\n\n\n\n在 src 同层目录下创建 pom.xml 文件，这是 maven 管理项目的核心文件。\n\n文件内容例如：\n\n<?xml version="1.0" encoding="utf-8"?>\n<project \n         xmlns="http://maven.apache.org/pom/4.0.0" \n         xmlns:xsi="http://www.w3.org/2001/xmlschema-instance" \n         xsi:schemalocation="http://maven.apache.org/pom/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">\n    <modelversion>4.0.0</modelversion>\n    <groupid>cn.knt</groupid>\n    <artifactid>project-java</artifactid>\n    <version>1.0</version>\n    <packaging>jar</packaging>\n    <dependencies>\n        <dependency>\n            <groupid>junit</groupid>\n            <artifactid>junit</artifactid>\n            <version>4.12</version>\n        </dependency>\n    </dependencies>\n</project>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n> maven 项目构建命令\n\nmaven 构建命令使用 mvn 开头，后面加功能参数，可以一次执行多个命令，使用空格分隔。\n\nmvn compile # 编译\nmvn clean # 清理 编译产生的内容\nmvn test # 测试\nmvn package\t# 打包\nmvn install # 安装到本地仓库\n\n\n1\n2\n3\n4\n5\n\n\n> 构建命令生成项目\n\n创建工程\n\n进入到指定的目录下创建项目，命令如下：\n\nmvn archetype:generate \\\n\t-dgroupid={project-packaging} \\\n\t-dartifactid={project-name} \\\n\t-darchetypeartifactid=maven-archetype-quickstart \\\n\t-dinteractivemode=false\n\n\n1\n2\n3\n4\n5\n\n\n创建 java 工程\n\nmvn archetype:generate \\\n    -dgroupid=cn.kbt \\\n    -dartifactid=java-project \\\n    -darchetypeartifactid=maven-archetype-quickstart \\\n    -dversion=0.0.1-snapshot \\\n    -dinteractivemode=false\n\n\n1\n2\n3\n4\n5\n6\n\n\n创建 web 工程\n\nmvn archetype:generate \\\n    -dgroupid=cn.kbt \\\n    -dartifactid=web-project \\\n    -darchetypeartifactid=maven-archetype-webapp \\\n    -dversion=0.0.1-snapshot \\\n    -dinteractivemode=false \n\n\n1\n2\n3\n4\n5\n6\n\n\n\n\n\n# idea生成maven项目\n\nidea 对 3.6.2 及以上版本存在兼容性问题，为避免冲突，idea 中安装使用 3.6.1 版本。\n\n在 idea 的 settings 中设置 maven 的根目录、settings.xml 目录、仓库目录，如图：\n\n\n\n然后新建工程的时候，选择 maven 即可。\n\n\n\n创建 java 项目，选择 archetype-quickstart 进行项目创建\n\n\n\n创建 web 项目，选择 archetype-webapp 进行项目创建\n\n\n\n如果用到 tomcat，则在 pom.xml 中添加 tomcat 插件\n\n<build> \n    <plugins>\n        <plugin> \n            <groupid>org.apache.tomcat.maven</groupid> \n            <artifactid>tomcat7-maven-plugin</artifactid> \t\t\t\t\n            <version>2.1</version>\n            <configuration>\n                <port>80</port>\n                <path>/</path> \n            </configuration>\n        </plugin> \n    </plugins>\n</build>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 依赖管理\n\n> 依赖配置\n\n依赖指的是当前项目运行所需要的 jar，一个项目可以设置多个依赖。\n\n格式：\n\n\x3c!-- 设置当前项目所依赖的所有 jar --\x3e\n<dependencies>\n    \x3c!-- 设置具体的依赖 --\x3e\n    <dependency>\n        \x3c!-- 依赖所属群组 id --\x3e\n        <groupid></groupid>\n        \x3c!-- 依赖所属项目 id --\x3e\n        <artifactid></artifactid>\n        \x3c!-- 依赖版本号 --\x3e\n        <version></version>\n    </dependency>\n</dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n> 依赖传递\n\n依赖具有传递性，包括直接传递和间接传递。\n\n * 直接传递：在当前项目中通过依赖配置建立的依赖关系（a 使用 b，a 和 b 就是直接传递）\n * 间接传递：被依赖的资源如果依赖其他资源，当前项目间接依赖其他资源（比较拗口，意思是如果 a 依赖 b，而 b 依赖 c，那么 a 和 c 之间就是间接传递）\n\n\n\n依赖传递的冲突问题：\n\n * 路径优先：当依赖中出现相同的资源时，层级越深，优先级越低，层级越浅，优先级越高\n * 声明优先：当资源在相同层级被依赖时，配置顺序靠前的覆盖配置顺序靠后的\n * 特殊优先：当同级配置了相同资源的不同版本，后配置的覆盖先配置的\n\n\n\n> 可选依赖 optional\n\n可选依赖指的是对外隐藏当前所依赖的资源。\n\n\n\n\n\n\n\n \n\n\n\n<dependency>\n    <groupid></groupid>\n    <artifactid></artifactid>\n    <version></version>\n    \x3c!-- 添加下面这一行，对外隐藏 --\x3e\n    <optional>true</optional>\n</dependency>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n> 排除依赖 exclusions\n\n排除依赖指主动断开依赖的资源，被排除的资源无需指定版本。\n\nexclusions 支持排除多个依赖，每个依赖需要用 <exclusion> 包裹起来。\n\n\n\n\n\n\n\n \n \n \n \n \n \n\n\n\n<dependency>\n    <groupid></groupid>\n    <artifactid></artifactid>\n    <version></version>\n    \x3c!-- exclusions 支持排除多个依赖 --\x3e\n    <exclusions>\n        <exclusion>\n            <groupid></groupid>\n            <artifactid></artifactid>\n        </exclusion>\n    </exclusions>\n</dependency>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n> 依赖范围\n\n依赖的 jar 包默认情况可以在任何地方使用，可以通过 scope 标签设定其作用范围。\n\n作用范围：\n\n * 主程序范围有效（main 文件夹范围内）\n\n * 测试程序范围有效（test 文件夹范围内）\n\n * 是否参与打包（package 文件夹范围内）\n\nscope         主代码   测试代码   打包   范例\ncompile（默认）   生效    生效     生效   log4j\ntest                生效          junit\nprovided      生效    生效          servlet-api\nruntime                    生效   jdbc\n\n选择 scope，主要看在哪个范围不生效。\n\n带有依赖范围的资源在进行传递时，作用范围将受到影响。\n\n<dependencies>\n    <dependency>\n        <groupid>junit</groupid>\n        <artifactid>junit</artifactid>\n        <version>4.11</version>\n        <scope>test</scope>\n    </dependency>\n</dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 生命周期与插件\n\n\n# 生命周期\n\nmaven 项目构建生命周期描述的是一次构建过程经历了多少个事件，配合插件使用（到了某个生命周期触发插件）。\n\n\n\nmaven 对项目构建的生命周期划分为 3 套：\n\n * clean：清理工作\n\n * default：核心工作，例如编译、测试、打包、部署等\n\n * site：产生报告，发布站点等\n\n> clean 生命周期\n\n * pre-clean：执行一些需要在 clean 之前完成的工作\n\n * clean：移除所有上一次构建生成的文件\n\n * post-clean：执行一些需要在 clean 之后立刻完成的工作\n\n> default 生命周期\n\nvalidate（校验） 校验项目是否正确并且所有必要的信息可以完成项目的构建过程。\ninitialize（初始化） 初始化构建状态，比如设置属性值。\ngenerate-sources（生成源代码） 生成包含在编译阶段中的任何源代码。\nprocess-sources（处理源代码） 处理源代码，比如说，过滤任意值。\ngenerate-resources（生成资源文件） 生成将会包含在项目包中的资源文件。\nprocess-resources （处理资源文件） 复制和处理资源到目标目录，为打包阶段最好准备。\ncompile（编译） 编译项目的源代码。\nprocess-classes（处理类文件） 处理编译生成的文件，比如说对java class文件做字节码改善优化。\ngenerate-test-sources（生成测试源代码） 生成包含在编译阶段中的任何测试源代码。\nprocess-test-sources（处理测试源代码） 处理测试源代码，比如说，过滤任意值。\ngenerate-test-resources（生成测试资源文件） 为测试创建资源文件。\nprocess-test-resources（处理测试资源文件） 复制和处理测试资源到目标目录。\ntest-compile（编译测试源码） 编译测试源代码到测试目标目录.\nprocess-test-classes（处理测试类文件） 处理测试源码编译生成的文件。\ntest（测试） 使用合适的单元测试框架运行测试（juint是其中之一）。\nprepare-package（准备打包） 在实际打包之前，执行任何的必要的操作为打包做准备。\npackage（打包） 将编译后的代码打包成可分发格式的文件，比如jar、war或者ear文件。\npre-integration-test（集成测试前） 在执行集成测试前进行必要的动作。比如说，搭建需要的环境。\nintegration-test（集成测试） 处理和部署项目到可以运行集成测试环境中。\npost-integration-test（集成测试后） 在执行集成测试完成后进行必要的动作。比如说，清理集成测试环境。\nverify （验证） 运行任意的检查来验证项目包有效且达到质量标准。\ninstall（安装） 安装项目包到本地仓库，这样项目包可以用作其他本地项目的依赖。\ndeploy（部署） 将最终的项目包复制到远程仓库中与其他开发者和项目共享。\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n并不是都会执行所有的步骤，而是执行选择步骤的上方步骤，如选择了 generate-test-resources，则 generate-test-resources 上面的步骤都会执行，但是下面的并不会执行。\n\n\n\n> site 生命周期\n\n * pre-site：执行一些需要在生成站点文档之前完成的工作\n\n * site：生成项目的站点文档\n\n * post-site：执行一些需要在生成站点文档之后完成的工作，并且为部署做准备\n\n * site-deploy：将生成的站点文档部署到特定的服务器上\n\n\n# 插件\n\n插件与生命周期内的阶段绑定，在执行到对应的生命周期时执行对应的插件功能。\n\n代码示例：\n\n\n\n\n\n\n\n\n\n\n\n \n \n\n \n\n\n\n\n\n\n\n<build>\n    <plugins>\n        <plugin>\n            <groupid>org.apache.maven.plugins</groupid>\n            <artifactid>maven-source-plugin</artifactid>\n            <version>2.2.1</version>\n            <executions>\n                <execution>\n                    <goals>  \x3c!-- 当运行到指定 phase 时执行 goals 内容 --\x3e\n                        <goal>jar</goal>  \t\t\x3c!-- 项目源码打 jar 包 --\x3e\n                        <goal>test-jar</goal>   \x3c!-- 测试源码打 jar 包 --\x3e\n                    </goals>\n                    <phase>generate-test-resources</phase> \x3c!-- phase：阶段 --\x3e\n                </execution>\n            </executions>\n        </plugin>\n    </plugins>\n</build>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n则运行到 generate-test-resources 阶段时，执行两个 goal 的内容：项目源码打 jar 包，测试源码打 jar 包。',charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"Maven - 进阶",frontmatter:{title:"Maven - 进阶",date:"2022-02-05T17:15:08.000Z",permalink:"/maven/advanced/",titleTag:null,categories:["Maven"],tags:["Maven"],readingShow:"top"},regularPath:"/40.%E5%B7%A5%E5%85%B7/10.%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%20-%20Maven/03.Maven%20-%20%E8%BF%9B%E9%98%B6.html",relativePath:"40.工具/10.版本管理 - Maven/03.Maven - 进阶.md",key:"v-499a927d",path:"/maven/advanced/",headers:[{level:2,title:"分模块开发与设计",slug:"分模块开发与设计",normalizedTitle:"分模块开发与设计",charIndex:3},{level:2,title:"聚合",slug:"聚合",normalizedTitle:"聚合",charIndex:15},{level:2,title:"继承",slug:"继承",normalizedTitle:"继承",charIndex:21},{level:2,title:"继承与聚合",slug:"继承与聚合",normalizedTitle:"继承与聚合",charIndex:27},{level:2,title:"属性",slug:"属性",normalizedTitle:"属性",charIndex:36},{level:2,title:"版本管理",slug:"版本管理",normalizedTitle:"版本管理",charIndex:42},{level:2,title:"资源配置",slug:"资源配置",normalizedTitle:"资源配置",charIndex:50},{level:2,title:"多环境开发配置",slug:"多环境开发配置",normalizedTitle:"多环境开发配置",charIndex:58},{level:2,title:"跳过测试",slug:"跳过测试",normalizedTitle:"跳过测试",charIndex:69},{level:2,title:"私服",slug:"私服",normalizedTitle:"私服",charIndex:77},{level:3,title:"下载与启动",slug:"下载与启动",normalizedTitle:"下载与启动",charIndex:85},{level:3,title:"仓库分类",slug:"仓库分类",normalizedTitle:"仓库分类",charIndex:96},{level:3,title:"上传与下载",slug:"上传与下载",normalizedTitle:"上传与下载",charIndex:106}],headersStr:"分模块开发与设计 聚合 继承 继承与聚合 属性 版本管理 资源配置 多环境开发配置 跳过测试 私服 下载与启动 仓库分类 上传与下载",content:" * 分模块开发与设计\n * 聚合\n * 继承\n * 继承与聚合\n * 属性\n * 版本管理\n * 资源配置\n * 多环境开发配置\n * 跳过测试\n * 私服\n   * 下载与启动\n   * 仓库分类\n   * 上传与下载\n\n\n\n\n# 分模块开发与设计\n\n> 分模块视频：https://www.bilibili.com/video/BV1Ah411S7ZE?p=15\n\n一个 Maven 项目（父 Maven）支持多个 Maven 子项目，类似一个文件夹下有多个子文件夹，那么 pom.xml 应该有多少个？\n\n有多少个 Maven 项目，就有多少个 pom.xml 文件，其中父 Maven 的 pom.xml 管理多个子 Maven 的 pom.xml（继承）。\n\n\n# 聚合\n\n\n\n作用：聚合用于快速构建 Maven 工程，一次性构建多个项目 / 模块。\n\n制作方式：创建一个空模块，打包类型定义为 pom，开启聚合\n\n<packaging>pom</packaging>\n\n\n1\n\n\n定义当前模块进行构建操作时关联的其他模块名称\n\n<modules>\n    <module>模块地址</module>\n    <module>模块地址</module>\n    <module>模块地址</module>\n    <module>模块地址</module>\n</modules>\n\n\n1\n2\n3\n4\n5\n6\n\n\n注意：参与聚合操作的模块最终执行顺序与模块间的依赖关系有关，与配置顺序无关。\n\n\n\n聚合不一定要求 module 的项目在聚合项目文件夹的里面。\n\n从图我们可以看出，聚合仅仅是创建一个仅有 pom 文件的空白项目，然后在其 pom 文件引入其他项目的路径，这样运行该空白项目时，自动找到所有的其他项目进行运行。\n\n\n# 继承\n\n\n\n作用：通过继承可以实现在子工程中沿用父工程中的配置（与 Java 类似）。\n\n制作方式：在子工程中生命其父工程坐标与对应的位置\n\n\x3c!-- 子工程内容 --\x3e\n\x3c!-- 定义该工程的父工程 --\x3e\n<parent>\n    <groupId></groupId>\n    <artifactId></artifactId>\n    <version></version>\n    \x3c!-- 填写父工程的 pom 文件 --\x3e\n    <relativePath>父工程 pom 文件地址</relativePath>\n</parent>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n在父工程中定义依赖管理\n\n\x3c!-- 父工程内容 --\x3e\n\x3c!-- 声明此处进行依赖管理 --\x3e\n<dependencyManagement>\n    \x3c!-- 具体的依赖 --\x3e\n    <dependencies>\n        <dependency>\n            <groupId></groupId>\n            <artifactId></artifactId>\n            <version></version>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n继承依赖使用：在子工程中定义依赖关系，无需声明依赖版本，版本参照父工程中依赖的版本\n\n\x3c!-- 子工程内容 --\x3e\n<dependencies>\n    <dependency>\n        <groupId></groupId>\n        <artifactId></artifactId>\n    </dependency>\n</dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n注意：dependencyManagement 只是管理依赖，当前工程并不会使用依赖，真正使用依赖的是子工程，子过程向父工程请求依赖。\n\n好处：当多个子工程同时使用一个依赖，那么当该依赖要更新版本时，只需要在父工程更新版本，子工程同步更新，不需要每个子工程都去修改版本。\n\n\n\n\n# 继承与聚合\n\n作用：聚合用于快速构建项目，继承用于快速配置。\n\n相同点：\n\n * 聚合与继承的 pom.xml 文件打包方式均为 pom，可以将两种关系制作到同一个 pom 文件中\n\n * 聚合与继承均属于设计型模块，并无实际的模块内容\n\n不同点：\n\n * 聚合是在当前模块中配置关系，聚合可以感知到参与聚合的模块有哪些\n\n * 继承是在子模块中配置关系，父模块无法感知哪些子模块继承了自己\n\n\n# 属性\n\n当多个依赖同时使用一个长内容的时候，我们可以把该内容放在一个「变量」里，然后多个依赖使用该变量即可，如版本号。\n\n\n\n> 自定义属性\n\n作用：等同于定义变量，方便统一维护。\n\n定义格式：\n\n\x3c!-- 定义自定义属性 --\x3e\n<properties> \n    <spring.version>5.1.9.RELEASE</spring.version>\n    <junit.version>4.12</junit.version>\n</properties>\n\n\n1\n2\n3\n4\n5\n\n\n调用格式：\n\n<dependency> \n    <groupId>org.springframework</groupId> \n    <artifactId>spring-context</artifactId> \n    <version>${spring.version}</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\n\n\n> 内置属性\n\n作用：使用 Maven 内置属性，快速配置。\n\n调用格式：\n\n${basedir}   # 项目根目录\n${version} \t # 项目版本号\n\n\n1\n2\n\n\n> Setting 属性\n\n作用：使用 Maven 配置文件 setting.xml 中的标签属性，用于动态配置。\n\n调用格式：\n\n${settings.localRepository}\n\n\n1\n\n\n> Java 系统属性\n\n作用：读取 Java 系统属性。\n\n调用格式：\n\n${user.home}\n\n\n1\n\n\n> 系统属性查询方式\n\n调用格式：\n\nmvn help:system\n\n\n1\n\n\n> 环境变量属性\n\n作用：使用 Maven 配置文件 setting.xml 中的标签属性，用于动态配置。\n\n调用格式：\n\n${env.JAVA_HOME}\n\n\n1\n\n\n环境变量属性查询方式：\n\nmvn help:system\n\n\n1\n\n\n\n# 版本管理\n\n\n\n> SNAPSHOT（快照版本）\n\n项目开发过程中，为方便团队成员合作，解决模块间相互依赖和时时更新的问题，开发者对每个模块进行构建的时候，输出的临时性版本叫快照版本（测试阶段版本)。\n\n快照版本会随着开发的进展不断更新。\n\n> RELEASE（发布版本）\n\n项目开发到进入阶段里程碑后，向团队外部发布较为稳定的版本，这种版本所对应的构件文件是稳定的，即便进行功能的后续开发，也不会改变当前发布版本内容，这种版本称为发布版本。\n\n如果使用过 Spring，就经常看到 xxx.RELEASE。\n\n> 版本约定规范\n\n<主版本>.<次版本>.<增量版本>.<里程碑版本>\n\n * 主版本：表示项目重大架构的变更，如 Spring5 相较于 Spring4 的迭代\n\n * 次版本：表示有较大的功能增加和变化，或者全面系统地修复漏洞\n\n * 增量版本：表示有重大漏洞的修复\n\n * 里程碑版本：表明一个版本的里程碑（版本内部)。这样的版本同下一个正式版本相比，相对来说不是很稳定，有待更多的测试\n\n范例：5.1.9.RELEASE。\n\n\n# 资源配置\n\n我们利用属性可以在 pom 文件解决内容一次修改，处处生效的问题，那么对 pom 文件外面的内容呢，如我们把 jdbc 的用户名、密码等信息放在了 jdbc.properties 文件里，那么 pom 如何读取该内容呢？\n\n\n\n用到资源配置。\n\n作用：在任意配置文件中加载 pom 文件中定义的属性。\n\n调用格式：\n\n${地址}\n${jdbc.url}\n\n\n1\n2\n\n\n开启配置文件加载 pom 属性\n\n\x3c!-- 配置资源文件对应的信息 --\x3e\n<resources>\n  <resource>\n    \x3c!-- 设定配置文件对应的位置目录，支持使用属性动态设定路径 --\x3e\n    <directory>地址</directory> \x3c!-- 如：${project.basedir}/src/main/resources --\x3e\n    \x3c!-- 开启对配置文件的资源加载过滤 --\x3e\n    <filtering>true</filtering>\n  </resource>\n</resources>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 多环境开发配置\n\n格式\n\n\x3c!-- 创建多环境 --\x3e\n<profiles>\n    \x3c!-- 定义具体的环境：生产环境 --\x3e\n    <profile>\n        \x3c!-- 定义环境对应的唯一名称 --\x3e\n        <id>开发环境名称 1</id>  \x3c!-- 如：pro_env --\x3e\n        \x3c!-- 定义环境中的专用的属性值 --\x3e\n        <properties>\n            <jdbc.url>jdbc 链接</jdbc.url>   \x3c!-- 如：jdbc:mysql://127.1.1.1:3306/maven_db --\x3e\n        </properties>\n        \x3c!-- 设置默认启动 --\x3e\n        <activation>\n            <activeByDefault>true</activeByDefault>\n        </activation>\n    </profile>\n    \x3c!-- 定义具体的环境：开发环境 --\x3e\n    <profile>\n        \x3c!-- 定义环境对应的唯一名称 --\x3e\n        <id>开发环境名称 2</id>  \x3c!-- 如：dev_env --\x3e\n        \x3c!-- 定义环境中的专用的属性值 --\x3e\n        <properties>\n            <jdbc.url>jdbc 链接</jdbc.url>   \x3c!-- 如：jdbc:mysql://127.2.2.2:3306/maven_db --\x3e\n        </properties>\n    </profile>\n</profiles>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n默认会找到 activation 的环境运行，如果使用开发环境名称 2，则在执行 Maven 的时候，指定环境：\n\nmvn 指令 –P 环境定义id\n\n\n1\n\n\n例如：\n\nmvn install –P pro_env\n\n\n1\n\n\n\n# 跳过测试\n\n跳过测试环节的场景：\n\n * 整体模块功能未开发\n\n * 模块中某个功能未开发完毕\n\n * 单个功能更新调试导致其他功能失败\n\n * 快速打包\n\n......\n\n> 使用命令跳过测试\n\nmvn 指令 –D skipTests\n\n\n1\n\n\n指令就是 install、compile、package 等。\n\n注意事项：执行的指令，其生命周期必须包含测试环节。\n\n> 使用界面跳过测试\n\n如在 test 环节跳过测试（本身就是测试🤣）：\n\n\n\n> 使用插件跳过测试\n\n<plugin>\n    <artifactId>maven-surefire-plugin</artifactId>\n    <version>2.22.1</version>\n    <configuration>\n        <skipTests>true</skipTests> \x3c!-- 设置跳过测试 --\x3e\n        <includes> \x3c!-- 包含指定的测试用例 --\x3e\n            <include>**/User*Test.java</include> \x3c!-- ** 任何任意包下 --\x3e\n        </includes>\n        <excludes> \x3c!-- 排除指定的测试用例 --\x3e\n            <exclude>**/User*TestCase.java</exclude> \x3c!-- ** 任何任意包下 --\x3e\n        </excludes>\n    </configuration>\n</plugin>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 私服\n\n私服是一种特殊的远程仓库，它是架设在局域网内的仓库服务器，私服代理广域网上的远程仓库，供局域网内的 Maven 用户使用。我们去访问这个服务器，这台服务器将需要的构件返回给我们，这台服务器中如果也没有我们需要的构件，那么这个代理服务器会去远程仓库中查找，然后将其先下载到代理服务器中，然后再返回给我们本地的仓库。我们可以也将本地的构件发布到 Nexus 中。\n\n私服用到 Nexus，Nexus 是 Sonatype 公司的一款 Maven 私服产品。\n\n\n# 下载与启动\n\n\n\n> 私服下载：https://help.sonatype.com/repomanager3/download\n\n\n\n下载后运行，进入安装目录的 bin 目录：\n\n\n\n进入命令行执行命令启动：\n\nnexus.exe /run nexus\n\n\n1\n\n\n访问 http://localhost:8081 即可访问到启动的 nexus。\n\n如果想自定义端口号或者其他，则打开 nexus 下的 etc 目录，打开 nexus-default.properties 文件，修改端口号：\n\n\n\n如果想修改服务器的配置，则在根目录下的 bin 目录，打开 nexus.vmoptions 文件，例如修改占用内存空间。\n\n\n\n如果是 Linux 下载，则下载命令：\n\nwget http://sonatype-download.global.ssl.fastly.net/nexus/3/nexus-3.6.0-02-unix.tar.gz\n\n\n1\n\n\n如果是 Docker 下载，则下载命令：\n\ndocker pull sonatype/nexus3\n\n\n1\n\n\n\n# 仓库分类\n\n宿主仓库 hosted：\n\n * 保存无法从中央仓库获取的资源\n\n * 自主研发\n\n * 第三方非开源项目\n\n代理仓库 proxy\n\n * 代理远程仓库，通过 nexus 访问其他公共仓库，例如中央仓库\n\n仓库组 group\n\n * 将若干个仓库组成一个群组，简化配置\n\n * 仓库组不能保存资源，属于设计型仓库\n\n登录中央仓库，用户名固定是 admin，密码自动生成，在 sonatype-work/nexus3 目录的 admin.password 文件里。\n\n\n\nproxy：这是代理方式，它是用来代理中央仓库的，例如我们依赖的包在本地仓库没有，就会到私服获取，私服没有的话，会到中央仓库先把包下载到这里，然后再下载到本地仓库。\n\nhosted：指的是我们公司或团队内部的包，并且 hosted 类型的仓库会分为 releases 和 snapshots 两个，前者是正式版，后者一般是开发测试版。\n\ngroup：它的目的就是把多个仓库组合起来，然后我们项目中只需要配置上这个类型的仓库地址，就可以把它里面组合的几个仓库都关联上。\n\n\n# 上传与下载\n\n\n\n实际开发中，我们利用 IDEA 打包上传到本地，本地上传到私服；如果下载 jar 包，则本地去私服下载，然后给 IDEA。\n\n所以我们需要三步：\n\n * 配置访问私服的用户名和密码\n * 本地上传到私服的仓库位置\n * 本地下载 jar 包时，下载的仓库位置\n\n 1. 首先配置访问私服的用户名和密码，打开 Maven 根目录下的 conf 目录下的 settings.xml，找到 servers 节点，添加如下内容：\n\n<servers>\n    <server>\n        <id>kbt-release</id>\n        <username>admin</username>\n        <password>admin1234</password>\n    </server>\n    <server>\n        <id>kbt-snapshots</id>\n        <username>admin</username>\n        <password>admin1234</password>\n    </server>\n</servers>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n请注意上面的 id，一会儿在 pom 文件中还会用到。\n\n 2. 继续找到 mirrors 节点配置私服的地址：\n\n<mirrors>\n    \x3c!-- 其他仓库如阿里云 --\x3e\n    <mirror>\n        <id>nexus-kbt</id>\n        <mirrorOf>*</mirrorOf>\n        <url>http://localhost:8081/repository/maven-public/</url>\n    </mirror>\n</mirrors>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n* 代表任意仓库。下载 jar 包时，仓库的寻找自上而下，如果上面的仓库找不到，则往下面的仓库继续寻找。\n\n在 settings.xml 文件配置的仓库是针对全部项目，如果打算在某一个项目中配置仓库，只需要在 pom 文件中加入以下配置即可\n\n<repositories>\n      <repository>\n            <id>maven-public</id>\n            <name>maven-public</name>\n            <url>http://localhost:8081/repository/maven-public/</url>\n            <snapshots>\n               <enabled>true</enabled>\n            </snapshots>\n       </repository>\n</repositories>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n 3. 接着在项目的 pom.xml 文件配置私服的地址：\n\n<distributionManagement>\n    <repository>\n        <id>kbt-release</id>\n        <url>http://localhost:8081/repository/kbt-release/</url>\n    </repository>\n    <snapshotRepository>\n        <id>kbt-snapshots</id>\n        <url>http://localhost:8081/repository/kbt-snapshots/</url>\n    </snapshotRepository>\n</distributionManagement>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n注意：id 要对应上 settings.xml 配置的 id。\n\n我们看到其中配置了一个 repository ，另外还有一个 snapshotRepository，上面表示的是 releases 版。同样注意 id 要和 setting.xml 里 server 下的 id 一致，不然会出现权限问题。url 分别指定 maven-releases 和 maven-snapshots 的地址。\n\n只要在项目中配置 1.0-SNAPSHOT 这样，带有 SNAPSHOT 的就会到 snapshots 仓库，如果不加 SNAPSHOT 就会到 releases 仓库。\n\n还有要注意的是，要发布的包不应该是上级，也就是不能有 parent 依赖。否则在获取依赖的时候会有问题。\n\n最后发布到私服命令：\n\nmvn deploy\n\n\n1\n\n\n或者利用 IDEA 的界面上传：\n\n",normalizedContent:" * 分模块开发与设计\n * 聚合\n * 继承\n * 继承与聚合\n * 属性\n * 版本管理\n * 资源配置\n * 多环境开发配置\n * 跳过测试\n * 私服\n   * 下载与启动\n   * 仓库分类\n   * 上传与下载\n\n\n\n\n# 分模块开发与设计\n\n> 分模块视频：https://www.bilibili.com/video/bv1ah411s7ze?p=15\n\n一个 maven 项目（父 maven）支持多个 maven 子项目，类似一个文件夹下有多个子文件夹，那么 pom.xml 应该有多少个？\n\n有多少个 maven 项目，就有多少个 pom.xml 文件，其中父 maven 的 pom.xml 管理多个子 maven 的 pom.xml（继承）。\n\n\n# 聚合\n\n\n\n作用：聚合用于快速构建 maven 工程，一次性构建多个项目 / 模块。\n\n制作方式：创建一个空模块，打包类型定义为 pom，开启聚合\n\n<packaging>pom</packaging>\n\n\n1\n\n\n定义当前模块进行构建操作时关联的其他模块名称\n\n<modules>\n    <module>模块地址</module>\n    <module>模块地址</module>\n    <module>模块地址</module>\n    <module>模块地址</module>\n</modules>\n\n\n1\n2\n3\n4\n5\n6\n\n\n注意：参与聚合操作的模块最终执行顺序与模块间的依赖关系有关，与配置顺序无关。\n\n\n\n聚合不一定要求 module 的项目在聚合项目文件夹的里面。\n\n从图我们可以看出，聚合仅仅是创建一个仅有 pom 文件的空白项目，然后在其 pom 文件引入其他项目的路径，这样运行该空白项目时，自动找到所有的其他项目进行运行。\n\n\n# 继承\n\n\n\n作用：通过继承可以实现在子工程中沿用父工程中的配置（与 java 类似）。\n\n制作方式：在子工程中生命其父工程坐标与对应的位置\n\n\x3c!-- 子工程内容 --\x3e\n\x3c!-- 定义该工程的父工程 --\x3e\n<parent>\n    <groupid></groupid>\n    <artifactid></artifactid>\n    <version></version>\n    \x3c!-- 填写父工程的 pom 文件 --\x3e\n    <relativepath>父工程 pom 文件地址</relativepath>\n</parent>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n在父工程中定义依赖管理\n\n\x3c!-- 父工程内容 --\x3e\n\x3c!-- 声明此处进行依赖管理 --\x3e\n<dependencymanagement>\n    \x3c!-- 具体的依赖 --\x3e\n    <dependencies>\n        <dependency>\n            <groupid></groupid>\n            <artifactid></artifactid>\n            <version></version>\n        </dependency>\n    </dependencies>\n</dependencymanagement>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n继承依赖使用：在子工程中定义依赖关系，无需声明依赖版本，版本参照父工程中依赖的版本\n\n\x3c!-- 子工程内容 --\x3e\n<dependencies>\n    <dependency>\n        <groupid></groupid>\n        <artifactid></artifactid>\n    </dependency>\n</dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n注意：dependencymanagement 只是管理依赖，当前工程并不会使用依赖，真正使用依赖的是子工程，子过程向父工程请求依赖。\n\n好处：当多个子工程同时使用一个依赖，那么当该依赖要更新版本时，只需要在父工程更新版本，子工程同步更新，不需要每个子工程都去修改版本。\n\n\n\n\n# 继承与聚合\n\n作用：聚合用于快速构建项目，继承用于快速配置。\n\n相同点：\n\n * 聚合与继承的 pom.xml 文件打包方式均为 pom，可以将两种关系制作到同一个 pom 文件中\n\n * 聚合与继承均属于设计型模块，并无实际的模块内容\n\n不同点：\n\n * 聚合是在当前模块中配置关系，聚合可以感知到参与聚合的模块有哪些\n\n * 继承是在子模块中配置关系，父模块无法感知哪些子模块继承了自己\n\n\n# 属性\n\n当多个依赖同时使用一个长内容的时候，我们可以把该内容放在一个「变量」里，然后多个依赖使用该变量即可，如版本号。\n\n\n\n> 自定义属性\n\n作用：等同于定义变量，方便统一维护。\n\n定义格式：\n\n\x3c!-- 定义自定义属性 --\x3e\n<properties> \n    <spring.version>5.1.9.release</spring.version>\n    <junit.version>4.12</junit.version>\n</properties>\n\n\n1\n2\n3\n4\n5\n\n\n调用格式：\n\n<dependency> \n    <groupid>org.springframework</groupid> \n    <artifactid>spring-context</artifactid> \n    <version>${spring.version}</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\n\n\n> 内置属性\n\n作用：使用 maven 内置属性，快速配置。\n\n调用格式：\n\n${basedir}   # 项目根目录\n${version} \t # 项目版本号\n\n\n1\n2\n\n\n> setting 属性\n\n作用：使用 maven 配置文件 setting.xml 中的标签属性，用于动态配置。\n\n调用格式：\n\n${settings.localrepository}\n\n\n1\n\n\n> java 系统属性\n\n作用：读取 java 系统属性。\n\n调用格式：\n\n${user.home}\n\n\n1\n\n\n> 系统属性查询方式\n\n调用格式：\n\nmvn help:system\n\n\n1\n\n\n> 环境变量属性\n\n作用：使用 maven 配置文件 setting.xml 中的标签属性，用于动态配置。\n\n调用格式：\n\n${env.java_home}\n\n\n1\n\n\n环境变量属性查询方式：\n\nmvn help:system\n\n\n1\n\n\n\n# 版本管理\n\n\n\n> snapshot（快照版本）\n\n项目开发过程中，为方便团队成员合作，解决模块间相互依赖和时时更新的问题，开发者对每个模块进行构建的时候，输出的临时性版本叫快照版本（测试阶段版本)。\n\n快照版本会随着开发的进展不断更新。\n\n> release（发布版本）\n\n项目开发到进入阶段里程碑后，向团队外部发布较为稳定的版本，这种版本所对应的构件文件是稳定的，即便进行功能的后续开发，也不会改变当前发布版本内容，这种版本称为发布版本。\n\n如果使用过 spring，就经常看到 xxx.release。\n\n> 版本约定规范\n\n<主版本>.<次版本>.<增量版本>.<里程碑版本>\n\n * 主版本：表示项目重大架构的变更，如 spring5 相较于 spring4 的迭代\n\n * 次版本：表示有较大的功能增加和变化，或者全面系统地修复漏洞\n\n * 增量版本：表示有重大漏洞的修复\n\n * 里程碑版本：表明一个版本的里程碑（版本内部)。这样的版本同下一个正式版本相比，相对来说不是很稳定，有待更多的测试\n\n范例：5.1.9.release。\n\n\n# 资源配置\n\n我们利用属性可以在 pom 文件解决内容一次修改，处处生效的问题，那么对 pom 文件外面的内容呢，如我们把 jdbc 的用户名、密码等信息放在了 jdbc.properties 文件里，那么 pom 如何读取该内容呢？\n\n\n\n用到资源配置。\n\n作用：在任意配置文件中加载 pom 文件中定义的属性。\n\n调用格式：\n\n${地址}\n${jdbc.url}\n\n\n1\n2\n\n\n开启配置文件加载 pom 属性\n\n\x3c!-- 配置资源文件对应的信息 --\x3e\n<resources>\n  <resource>\n    \x3c!-- 设定配置文件对应的位置目录，支持使用属性动态设定路径 --\x3e\n    <directory>地址</directory> \x3c!-- 如：${project.basedir}/src/main/resources --\x3e\n    \x3c!-- 开启对配置文件的资源加载过滤 --\x3e\n    <filtering>true</filtering>\n  </resource>\n</resources>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 多环境开发配置\n\n格式\n\n\x3c!-- 创建多环境 --\x3e\n<profiles>\n    \x3c!-- 定义具体的环境：生产环境 --\x3e\n    <profile>\n        \x3c!-- 定义环境对应的唯一名称 --\x3e\n        <id>开发环境名称 1</id>  \x3c!-- 如：pro_env --\x3e\n        \x3c!-- 定义环境中的专用的属性值 --\x3e\n        <properties>\n            <jdbc.url>jdbc 链接</jdbc.url>   \x3c!-- 如：jdbc:mysql://127.1.1.1:3306/maven_db --\x3e\n        </properties>\n        \x3c!-- 设置默认启动 --\x3e\n        <activation>\n            <activebydefault>true</activebydefault>\n        </activation>\n    </profile>\n    \x3c!-- 定义具体的环境：开发环境 --\x3e\n    <profile>\n        \x3c!-- 定义环境对应的唯一名称 --\x3e\n        <id>开发环境名称 2</id>  \x3c!-- 如：dev_env --\x3e\n        \x3c!-- 定义环境中的专用的属性值 --\x3e\n        <properties>\n            <jdbc.url>jdbc 链接</jdbc.url>   \x3c!-- 如：jdbc:mysql://127.2.2.2:3306/maven_db --\x3e\n        </properties>\n    </profile>\n</profiles>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n默认会找到 activation 的环境运行，如果使用开发环境名称 2，则在执行 maven 的时候，指定环境：\n\nmvn 指令 –p 环境定义id\n\n\n1\n\n\n例如：\n\nmvn install –p pro_env\n\n\n1\n\n\n\n# 跳过测试\n\n跳过测试环节的场景：\n\n * 整体模块功能未开发\n\n * 模块中某个功能未开发完毕\n\n * 单个功能更新调试导致其他功能失败\n\n * 快速打包\n\n......\n\n> 使用命令跳过测试\n\nmvn 指令 –d skiptests\n\n\n1\n\n\n指令就是 install、compile、package 等。\n\n注意事项：执行的指令，其生命周期必须包含测试环节。\n\n> 使用界面跳过测试\n\n如在 test 环节跳过测试（本身就是测试🤣）：\n\n\n\n> 使用插件跳过测试\n\n<plugin>\n    <artifactid>maven-surefire-plugin</artifactid>\n    <version>2.22.1</version>\n    <configuration>\n        <skiptests>true</skiptests> \x3c!-- 设置跳过测试 --\x3e\n        <includes> \x3c!-- 包含指定的测试用例 --\x3e\n            <include>**/user*test.java</include> \x3c!-- ** 任何任意包下 --\x3e\n        </includes>\n        <excludes> \x3c!-- 排除指定的测试用例 --\x3e\n            <exclude>**/user*testcase.java</exclude> \x3c!-- ** 任何任意包下 --\x3e\n        </excludes>\n    </configuration>\n</plugin>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 私服\n\n私服是一种特殊的远程仓库，它是架设在局域网内的仓库服务器，私服代理广域网上的远程仓库，供局域网内的 maven 用户使用。我们去访问这个服务器，这台服务器将需要的构件返回给我们，这台服务器中如果也没有我们需要的构件，那么这个代理服务器会去远程仓库中查找，然后将其先下载到代理服务器中，然后再返回给我们本地的仓库。我们可以也将本地的构件发布到 nexus 中。\n\n私服用到 nexus，nexus 是 sonatype 公司的一款 maven 私服产品。\n\n\n# 下载与启动\n\n\n\n> 私服下载：https://help.sonatype.com/repomanager3/download\n\n\n\n下载后运行，进入安装目录的 bin 目录：\n\n\n\n进入命令行执行命令启动：\n\nnexus.exe /run nexus\n\n\n1\n\n\n访问 http://localhost:8081 即可访问到启动的 nexus。\n\n如果想自定义端口号或者其他，则打开 nexus 下的 etc 目录，打开 nexus-default.properties 文件，修改端口号：\n\n\n\n如果想修改服务器的配置，则在根目录下的 bin 目录，打开 nexus.vmoptions 文件，例如修改占用内存空间。\n\n\n\n如果是 linux 下载，则下载命令：\n\nwget http://sonatype-download.global.ssl.fastly.net/nexus/3/nexus-3.6.0-02-unix.tar.gz\n\n\n1\n\n\n如果是 docker 下载，则下载命令：\n\ndocker pull sonatype/nexus3\n\n\n1\n\n\n\n# 仓库分类\n\n宿主仓库 hosted：\n\n * 保存无法从中央仓库获取的资源\n\n * 自主研发\n\n * 第三方非开源项目\n\n代理仓库 proxy\n\n * 代理远程仓库，通过 nexus 访问其他公共仓库，例如中央仓库\n\n仓库组 group\n\n * 将若干个仓库组成一个群组，简化配置\n\n * 仓库组不能保存资源，属于设计型仓库\n\n登录中央仓库，用户名固定是 admin，密码自动生成，在 sonatype-work/nexus3 目录的 admin.password 文件里。\n\n\n\nproxy：这是代理方式，它是用来代理中央仓库的，例如我们依赖的包在本地仓库没有，就会到私服获取，私服没有的话，会到中央仓库先把包下载到这里，然后再下载到本地仓库。\n\nhosted：指的是我们公司或团队内部的包，并且 hosted 类型的仓库会分为 releases 和 snapshots 两个，前者是正式版，后者一般是开发测试版。\n\ngroup：它的目的就是把多个仓库组合起来，然后我们项目中只需要配置上这个类型的仓库地址，就可以把它里面组合的几个仓库都关联上。\n\n\n# 上传与下载\n\n\n\n实际开发中，我们利用 idea 打包上传到本地，本地上传到私服；如果下载 jar 包，则本地去私服下载，然后给 idea。\n\n所以我们需要三步：\n\n * 配置访问私服的用户名和密码\n * 本地上传到私服的仓库位置\n * 本地下载 jar 包时，下载的仓库位置\n\n 1. 首先配置访问私服的用户名和密码，打开 maven 根目录下的 conf 目录下的 settings.xml，找到 servers 节点，添加如下内容：\n\n<servers>\n    <server>\n        <id>kbt-release</id>\n        <username>admin</username>\n        <password>admin1234</password>\n    </server>\n    <server>\n        <id>kbt-snapshots</id>\n        <username>admin</username>\n        <password>admin1234</password>\n    </server>\n</servers>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n请注意上面的 id，一会儿在 pom 文件中还会用到。\n\n 2. 继续找到 mirrors 节点配置私服的地址：\n\n<mirrors>\n    \x3c!-- 其他仓库如阿里云 --\x3e\n    <mirror>\n        <id>nexus-kbt</id>\n        <mirrorof>*</mirrorof>\n        <url>http://localhost:8081/repository/maven-public/</url>\n    </mirror>\n</mirrors>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n* 代表任意仓库。下载 jar 包时，仓库的寻找自上而下，如果上面的仓库找不到，则往下面的仓库继续寻找。\n\n在 settings.xml 文件配置的仓库是针对全部项目，如果打算在某一个项目中配置仓库，只需要在 pom 文件中加入以下配置即可\n\n<repositories>\n      <repository>\n            <id>maven-public</id>\n            <name>maven-public</name>\n            <url>http://localhost:8081/repository/maven-public/</url>\n            <snapshots>\n               <enabled>true</enabled>\n            </snapshots>\n       </repository>\n</repositories>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n 3. 接着在项目的 pom.xml 文件配置私服的地址：\n\n<distributionmanagement>\n    <repository>\n        <id>kbt-release</id>\n        <url>http://localhost:8081/repository/kbt-release/</url>\n    </repository>\n    <snapshotrepository>\n        <id>kbt-snapshots</id>\n        <url>http://localhost:8081/repository/kbt-snapshots/</url>\n    </snapshotrepository>\n</distributionmanagement>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n注意：id 要对应上 settings.xml 配置的 id。\n\n我们看到其中配置了一个 repository ，另外还有一个 snapshotrepository，上面表示的是 releases 版。同样注意 id 要和 setting.xml 里 server 下的 id 一致，不然会出现权限问题。url 分别指定 maven-releases 和 maven-snapshots 的地址。\n\n只要在项目中配置 1.0-snapshot 这样，带有 snapshot 的就会到 snapshots 仓库，如果不加 snapshot 就会到 releases 仓库。\n\n还有要注意的是，要发布的包不应该是上级，也就是不能有 parent 依赖。否则在获取依赖的时候会有问题。\n\n最后发布到私服命令：\n\nmvn deploy\n\n\n1\n\n\n或者利用 idea 的界面上传：\n\n",charsets:{cjk:!0},lastUpdated:"2022/04/05, 14:44:34"},{title:"Git - 介绍与安装",frontmatter:{title:"Git - 介绍与安装",date:"2022-02-08T12:52:18.000Z",permalink:"/git/introduce/",categories:["Git"],tags:["Git"],readingShow:"top"},regularPath:"/40.%E5%B7%A5%E5%85%B7/20.%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86%20-%20Git/01.Git%20-%20%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85.html",relativePath:"40.工具/20.开发管理 - Git/01.Git - 介绍与安装.md",key:"v-18d9c242",path:"/git/introduce/",headers:[{level:2,title:"Git概述",slug:"git概述",normalizedTitle:"git概述",charIndex:58},{level:3,title:"何为版本控制",slug:"何为版本控制",normalizedTitle:"何为版本控制",charIndex:69},{level:3,title:"为什么需要版本控制",slug:"为什么需要版本控制",normalizedTitle:"为什么需要版本控制",charIndex:81},{level:3,title:"版本控制工具",slug:"版本控制工具",normalizedTitle:"版本控制工具",charIndex:96},{level:2,title:"Git简介",slug:"git简介",normalizedTitle:"git简介",charIndex:106},{level:3,title:"Git简史",slug:"git简史",normalizedTitle:"git简史",charIndex:117},{level:3,title:"Git优势",slug:"git优势",normalizedTitle:"git优势",charIndex:128},{level:3,title:"Git结构",slug:"git结构",normalizedTitle:"git结构",charIndex:139},{level:3,title:"代码托管中心",slug:"代码托管中心",normalizedTitle:"代码托管中心",charIndex:150},{level:3,title:"Git下载与安装",slug:"git下载与安装",normalizedTitle:"git下载与安装",charIndex:162},{level:3,title:"Git安装验证",slug:"git安装验证",normalizedTitle:"git安装验证",charIndex:176},{level:2,title:"本地库和远程库",slug:"本地库和远程库",normalizedTitle:"本地库和远程库",charIndex:187},{level:3,title:"团队内部协作",slug:"团队内部协作",normalizedTitle:"团队内部协作",charIndex:200},{level:3,title:"跨团队协作",slug:"跨团队协作",normalizedTitle:"跨团队协作",charIndex:212}],headersStr:"Git概述 何为版本控制 为什么需要版本控制 版本控制工具 Git简介 Git简史 Git优势 Git结构 代码托管中心 Git下载与安装 Git安装验证 本地库和远程库 团队内部协作 跨团队协作",content:"笔记\n\nGit 是非常强大的版本管理工具，开发人员必须掌握的一门技术。\n\n2022-02-08 @村长\n\n\n\n * Git概述\n   * 何为版本控制\n   * 为什么需要版本控制\n   * 版本控制工具\n * Git简介\n   * Git简史\n   * Git优势\n   * Git结构\n   * 代码托管中心\n   * Git下载与安装\n   * Git安装验证\n * 本地库和远程库\n   * 团队内部协作\n   * 跨团队协作\n\n\n\n\n# Git概述\n\nGit 是一个免费的、开源的分布式版本控制系统，可以快速高效地处理从小型到大型的各种项目。\n\nGit 易于学习，占地面积小，性能极快。它具有廉价的本地库，方便的暂存区域和多个工作流分支等特性。其性能优于 Subversion、CVS、Perforce 和 ClearCase 等版本控制工具。\n\n\n# 何为版本控制\n\n版本控制是一种记录文件内容变化，以便将来查阅特定版本修订情况的系统。\n\n版本控制其实最重要的是可以记录文件修改历史记录，从而让用户能够查看历史版本，方便版本切换。\n\n\n# 为什么需要版本控制\n\n> 协同修改\n\n * 多人并行不悖的修改服务器端的同一个文件\n\n> 数据备份\n\n * 不仅保存目录和文件的当前状态，还能够保存每一个提交过的历史状态\n\n> 版本管理\n\n * 在保存每一个版本的文件信息的时候要做到不保存重复数据，以节约存储空间，提高运行效率。这方面 SVN 采用的是增量式管理的方式，而 Git 采取了文件系统快照的方式\n\n> 权限控制\n\n * 对团队中参与开发的人员进行权限控制\n\n * 对团队外开发者贡献的代码进行审核，这是 Git 独有\n\n> 历史记录\n\n * 查看修改人、修改时间、修改内容、日志信息\n\n * 将本地文件恢复到某一个历史状态\n\n> 分支管理\n\n * 允许开发团队在工作过程中多条生产线同时推进任务，进一步提高效率\n\n\n# 版本控制工具\n\n> 集中式版本控制工具\n\nCVS、SVN、VSS ......\n\n集中化的版本控制系统诸如 CVS、SVN 等，都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。多年以来，这已成为版本控制系统的标准做法。\n\n这种做法带来了许多好处，每个人都可以在一定程度上看到项目中的其他人正在做些什么。而管理员也可以轻松掌控每个开发者的权限，并且管理一个集中化的版本控制系统，要远比在各个客户端上维护本地数据库来得轻松容易。\n\n事分两面，有好有坏。这么做显而易见的缺点是中央服务器的单点故障。如果服务器宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。\n\n\n\n> 分布式版本控制工具\n\nGit、Mercurial、Bazaar、Darcs ......\n\n像 Git 这种分布式版本控制工具，客户端提取的不是最新版本的文件快照，而是把代码仓库完整地镜像下来（本地库）。这样任何一处协同工作用的文件发生故障，事后都可以用其他客户端的本地仓库进行恢复。因为每个客户端的每一次文件提取操作，实际上都是一次对整个文件仓库的完整备份。\n\n分布式的版本控制系统出现之后,解决了集中式版本控制系统的缺陷：\n\n 1. 服务器断网的情况下也可以进行开发（因为版本控制是在本地进行的）\n 2. 每个客户端保存的也都是整个完整的项目（包含历史记录，更加安全）\n\n\n\n\n# Git简介\n\n\n# Git简史\n\n\n\n\n# Git优势\n\n * 大部分操作在本地完成，不需要联网\n\n * 完整性保证\n\n * 尽可能添加数据而不是删除或修改数据\n\n * 分支操作非常快捷流畅\n\n * 与 Linux 命令全面兼\n\n\n# Git结构\n\n\n\nGit 本地结构分为：\n\n * 工作区，即我们写的代码文件\n * 暂存区，通过 git add 指令将代码文件添加到暂存区\n * 本地库，通过 git commit 指令将暂存区的代码文件添加到本地库\n * 远程库，通过 git push 指令将本地库的代码文件上传到远程库，即备份到云端\n\n\n# 代码托管中心\n\n代码托管中心的任务：维护远程库。\n\n> 局域网环境下\n\n * GitLab 服务器\n\n> 外网环境下\n\n * GitHub（国外）\n\n * Gitee 码云（国内）\n\n\n# Git下载与安装\n\n官网地址：https://git-scm.com/\n\n官网下载地址：https://git-scm.com/download\n\n这里演示 Windows 的安装步骤：\n\n 1. 安装到一个没有中文，没有空格的目录下，不建议放在 C 盘\n\n\n\n 2. 默认值\n\n\n\n 3. 建议选择 Vim 编辑器，也就是 Linux 使用的编辑器\n\n\n\n 4. 默认分支名设置，选择让 Git 决定，分支名默认为 master，下一步\n\n\n\n 5. 建议不修改 PATH 环境变量，否则一些环境变量无法使用\n\n\n\n 6. 使用默认值，即 OpenSSL 库，限制性低\n\n\n\n 7. 选择第一个默认值\n\n\n\n 8. 选择 Git 提供的终端，不要合并到 CMD 终端，否则 Git 的一些命令会覆盖 CMD 的命令\n\n\n\n 9. 选择 Git pull 合并的模式，选择默认，然后下一步\n\n\n\n 10. 选择 Git 的凭据管理器，选择默认的跨平台的凭据管理器，然后下一步\n\n\n\n 11. 其他配置，选择默认设置，然后下一步\n\n\n\n 12. 实验室功能，技术还不成熟，有已知的 bug，不要勾选，然后点击右下角的 Install 按钮，开始安装 Git\n\n\n\n自此，安装成功。\n\n\n# Git安装验证\n\n在 Git Bash 终端里输入 git --version 查看 git 版本，如图所示，说明 Git 安装成功。\n\n\n\n\n# 本地库和远程库\n\n\n# 团队内部协作\n\n\n\n当第一个本地库 push 到远程库时，第二个本地库就可以 clone 到自己，当修改了一些内容后，第二个本地库先加入团队，然后重新 push 到远程库，然后第一个本地库就可以 pull 更新自己。\n\n\n# 跨团队协作\n\n\n\n当第一个本地库和第二个本地库需要第三个本地库的帮忙，那么可以让第三个本地库 fork 到自己的远程库，然后 clone 到自己，修改好代码后重新 push 到自己的远程库，接着 pull request 给第一个远程库，此时并不是立即合并，而是由第一个本地库进行审核无误，再合并，最后第一个本地库和第二个本地库通过 pull 更新自己。",normalizedContent:"笔记\n\ngit 是非常强大的版本管理工具，开发人员必须掌握的一门技术。\n\n2022-02-08 @村长\n\n\n\n * git概述\n   * 何为版本控制\n   * 为什么需要版本控制\n   * 版本控制工具\n * git简介\n   * git简史\n   * git优势\n   * git结构\n   * 代码托管中心\n   * git下载与安装\n   * git安装验证\n * 本地库和远程库\n   * 团队内部协作\n   * 跨团队协作\n\n\n\n\n# git概述\n\ngit 是一个免费的、开源的分布式版本控制系统，可以快速高效地处理从小型到大型的各种项目。\n\ngit 易于学习，占地面积小，性能极快。它具有廉价的本地库，方便的暂存区域和多个工作流分支等特性。其性能优于 subversion、cvs、perforce 和 clearcase 等版本控制工具。\n\n\n# 何为版本控制\n\n版本控制是一种记录文件内容变化，以便将来查阅特定版本修订情况的系统。\n\n版本控制其实最重要的是可以记录文件修改历史记录，从而让用户能够查看历史版本，方便版本切换。\n\n\n# 为什么需要版本控制\n\n> 协同修改\n\n * 多人并行不悖的修改服务器端的同一个文件\n\n> 数据备份\n\n * 不仅保存目录和文件的当前状态，还能够保存每一个提交过的历史状态\n\n> 版本管理\n\n * 在保存每一个版本的文件信息的时候要做到不保存重复数据，以节约存储空间，提高运行效率。这方面 svn 采用的是增量式管理的方式，而 git 采取了文件系统快照的方式\n\n> 权限控制\n\n * 对团队中参与开发的人员进行权限控制\n\n * 对团队外开发者贡献的代码进行审核，这是 git 独有\n\n> 历史记录\n\n * 查看修改人、修改时间、修改内容、日志信息\n\n * 将本地文件恢复到某一个历史状态\n\n> 分支管理\n\n * 允许开发团队在工作过程中多条生产线同时推进任务，进一步提高效率\n\n\n# 版本控制工具\n\n> 集中式版本控制工具\n\ncvs、svn、vss ......\n\n集中化的版本控制系统诸如 cvs、svn 等，都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。多年以来，这已成为版本控制系统的标准做法。\n\n这种做法带来了许多好处，每个人都可以在一定程度上看到项目中的其他人正在做些什么。而管理员也可以轻松掌控每个开发者的权限，并且管理一个集中化的版本控制系统，要远比在各个客户端上维护本地数据库来得轻松容易。\n\n事分两面，有好有坏。这么做显而易见的缺点是中央服务器的单点故障。如果服务器宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。\n\n\n\n> 分布式版本控制工具\n\ngit、mercurial、bazaar、darcs ......\n\n像 git 这种分布式版本控制工具，客户端提取的不是最新版本的文件快照，而是把代码仓库完整地镜像下来（本地库）。这样任何一处协同工作用的文件发生故障，事后都可以用其他客户端的本地仓库进行恢复。因为每个客户端的每一次文件提取操作，实际上都是一次对整个文件仓库的完整备份。\n\n分布式的版本控制系统出现之后,解决了集中式版本控制系统的缺陷：\n\n 1. 服务器断网的情况下也可以进行开发（因为版本控制是在本地进行的）\n 2. 每个客户端保存的也都是整个完整的项目（包含历史记录，更加安全）\n\n\n\n\n# git简介\n\n\n# git简史\n\n\n\n\n# git优势\n\n * 大部分操作在本地完成，不需要联网\n\n * 完整性保证\n\n * 尽可能添加数据而不是删除或修改数据\n\n * 分支操作非常快捷流畅\n\n * 与 linux 命令全面兼\n\n\n# git结构\n\n\n\ngit 本地结构分为：\n\n * 工作区，即我们写的代码文件\n * 暂存区，通过 git add 指令将代码文件添加到暂存区\n * 本地库，通过 git commit 指令将暂存区的代码文件添加到本地库\n * 远程库，通过 git push 指令将本地库的代码文件上传到远程库，即备份到云端\n\n\n# 代码托管中心\n\n代码托管中心的任务：维护远程库。\n\n> 局域网环境下\n\n * gitlab 服务器\n\n> 外网环境下\n\n * github（国外）\n\n * gitee 码云（国内）\n\n\n# git下载与安装\n\n官网地址：https://git-scm.com/\n\n官网下载地址：https://git-scm.com/download\n\n这里演示 windows 的安装步骤：\n\n 1. 安装到一个没有中文，没有空格的目录下，不建议放在 c 盘\n\n\n\n 2. 默认值\n\n\n\n 3. 建议选择 vim 编辑器，也就是 linux 使用的编辑器\n\n\n\n 4. 默认分支名设置，选择让 git 决定，分支名默认为 master，下一步\n\n\n\n 5. 建议不修改 path 环境变量，否则一些环境变量无法使用\n\n\n\n 6. 使用默认值，即 openssl 库，限制性低\n\n\n\n 7. 选择第一个默认值\n\n\n\n 8. 选择 git 提供的终端，不要合并到 cmd 终端，否则 git 的一些命令会覆盖 cmd 的命令\n\n\n\n 9. 选择 git pull 合并的模式，选择默认，然后下一步\n\n\n\n 10. 选择 git 的凭据管理器，选择默认的跨平台的凭据管理器，然后下一步\n\n\n\n 11. 其他配置，选择默认设置，然后下一步\n\n\n\n 12. 实验室功能，技术还不成熟，有已知的 bug，不要勾选，然后点击右下角的 install 按钮，开始安装 git\n\n\n\n自此，安装成功。\n\n\n# git安装验证\n\n在 git bash 终端里输入 git --version 查看 git 版本，如图所示，说明 git 安装成功。\n\n\n\n\n# 本地库和远程库\n\n\n# 团队内部协作\n\n\n\n当第一个本地库 push 到远程库时，第二个本地库就可以 clone 到自己，当修改了一些内容后，第二个本地库先加入团队，然后重新 push 到远程库，然后第一个本地库就可以 pull 更新自己。\n\n\n# 跨团队协作\n\n\n\n当第一个本地库和第二个本地库需要第三个本地库的帮忙，那么可以让第三个本地库 fork 到自己的远程库，然后 clone 到自己，修改好代码后重新 push 到自己的远程库，接着 pull request 给第一个远程库，此时并不是立即合并，而是由第一个本地库进行审核无误，再合并，最后第一个本地库和第二个本地库通过 pull 更新自己。",charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"Git - 常用命令",frontmatter:{title:"Git - 常用命令",date:"2022-02-08T13:22:08.000Z",permalink:"/git/common-commands",categories:["Git"],tags:["Git"],readingShow:"top"},regularPath:"/40.%E5%B7%A5%E5%85%B7/20.%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86%20-%20Git/03.Git%20-%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html",relativePath:"40.工具/20.开发管理 - Git/03.Git - 常用命令.md",key:"v-a9f16054",path:"/git/common-commands/",headers:[{level:2,title:"Git常用命令",slug:"git常用命令",normalizedTitle:"git常用命令",charIndex:59},{level:3,title:"本地命令",slug:"本地命令",normalizedTitle:"本地命令",charIndex:72},{level:3,title:"远程命令",slug:"远程命令",normalizedTitle:"远程命令",charIndex:82},{level:2,title:"设置用户签名",slug:"设置用户签名",normalizedTitle:"设置用户签名",charIndex:90},{level:3,title:"项目级别/仓库级别",slug:"项目级别-仓库级别",normalizedTitle:"项目级别/仓库级别",charIndex:102},{level:3,title:"系统用户级别",slug:"系统用户级别",normalizedTitle:"系统用户级别",charIndex:117},{level:3,title:"级别优先级",slug:"级别优先级",normalizedTitle:"级别优先级",charIndex:129},{level:3,title:"说明",slug:"说明",normalizedTitle:"说明",charIndex:140},{level:2,title:"初始化本地库",slug:"初始化本地库",normalizedTitle:"初始化本地库",charIndex:146},{level:2,title:"查看本地库状态",slug:"查看本地库状态",normalizedTitle:"查看本地库状态",charIndex:156},{level:2,title:"文件增删改操作",slug:"文件增删改操作",normalizedTitle:"文件增删改操作",charIndex:167},{level:3,title:"删除暂存区的文件",slug:"删除暂存区的文件",normalizedTitle:"删除暂存区的文件",charIndex:180},{level:3,title:"添加文件到暂存区",slug:"添加文件到暂存区",normalizedTitle:"添加文件到暂存区",charIndex:194},{level:3,title:"提交文件到本地库",slug:"提交文件到本地库",normalizedTitle:"提交文件到本地库",charIndex:208},{level:2,title:"历史版本操作",slug:"历史版本操作",normalizedTitle:"历史版本操作",charIndex:220},{level:3,title:"查看历史版本",slug:"查看历史版本",normalizedTitle:"查看历史版本",charIndex:232},{level:3,title:"切换历史版本",slug:"切换历史版本",normalizedTitle:"切换历史版本",charIndex:244},{level:2,title:"比较文件操作",slug:"比较文件操作",normalizedTitle:"比较文件操作",charIndex:254},{level:2,title:"分支操作",slug:"分支操作",normalizedTitle:"分支操作",charIndex:264},{level:3,title:"什么是分支？",slug:"什么是分支",normalizedTitle:"什么是分支？",charIndex:274},{level:3,title:"分支的好处？",slug:"分支的好处",normalizedTitle:"分支的好处？",charIndex:286},{level:3,title:"分支操作",slug:"分支操作-2",normalizedTitle:"分支操作",charIndex:264},{level:3,title:"分支冲突",slug:"分支冲突",normalizedTitle:"分支冲突",charIndex:308},{level:3,title:"创建分支和切换分支图解",slug:"创建分支和切换分支图解",normalizedTitle:"创建分支和切换分支图解",charIndex:318},{level:2,title:"分支进阶操作",slug:"分支进阶操作",normalizedTitle:"分支进阶操作",charIndex:333},{level:3,title:"删除所有记录",slug:"删除所有记录",normalizedTitle:"删除所有记录",charIndex:345},{level:3,title:"删除上次记录",slug:"删除上次记录",normalizedTitle:"删除上次记录",charIndex:357}],headersStr:"Git常用命令 本地命令 远程命令 设置用户签名 项目级别/仓库级别 系统用户级别 级别优先级 说明 初始化本地库 查看本地库状态 文件增删改操作 删除暂存区的文件 添加文件到暂存区 提交文件到本地库 历史版本操作 查看历史版本 切换历史版本 比较文件操作 分支操作 什么是分支？ 分支的好处？ 分支操作 分支冲突 创建分支和切换分支图解 分支进阶操作 删除所有记录 删除上次记录",content:'笔记\n\n下面我们学习 Git 在本地常用的命令，也是开发经常用到的命令。\n\n2022-02-08 @村长\n\n\n\n * Git常用命令\n   * 本地命令\n   * 远程命令\n * 设置用户签名\n   * 项目级别/仓库级别\n   * 系统用户级别\n   * 级别优先级\n   * 说明\n * 初始化本地库\n * 查看本地库状态\n * 文件增删改操作\n   * 删除暂存区的文件\n   * 添加文件到暂存区\n   * 提交文件到本地库\n * 历史版本操作\n   * 查看历史版本\n   * 切换历史版本\n * 比较文件操作\n * 分支操作\n   * 什么是分支？\n   * 分支的好处？\n   * 分支操作\n   * 分支冲突\n   * 创建分支和切换分支图解\n * 分支进阶操作\n   * 删除所有记录\n   * 删除上次记录\n\n\n\n\n# Git常用命令\n\n\n# 本地命令\n\n命令名称                                               作用\ngit config --global user.name 用户名                  设置用户签名\ngit config --global user.email 邮箱                  设置用户签名\ngit init                                           初始化本地库\ngit status                                         查看本地库状态\ngit add 文件名（-A 代表目录及子目录下所有文件名）                     添加到暂存区\ngit commit -m "日志信息" [文件名]（不加文件名，默认所有文件都添加该日志信息）   添加到本地库\ngit reflog                                         查看历史记录（简要）\ngit log                                            查看历史记录（详细）\ngit log --pretty=oneline                           一行显示一个版本信息（版本号完整）\ngit log --oneline                                  一行显示一个版本信息（版本号简写）\ngit reset --hard 版本号                               版本穿梭、跳转\ngit diff [文件名]                                     比较工作区中和暂存区的文件\ngit diff [本地库中历史版本] [文件名]                          比较工作区中的文件和本地库历史记录\ngit branch 分支名                                     创建分支\ngit branch -D 分支名                                  删除分支\ngit branch -m 新的分支名                                将当前分支名改为新的分支名\ngit branch -v                                      查看分支\ngit checkout 分支名                                   切换分支\ngit merge 分支名                                      合并分支\n\n\n# 远程命令\n\n命令名称                     作用\ngit remote -v            查看当前所有远程地址别名\ngit remote add 别名 远程地址   起别名\ngit push 别名 分支           推送本地分支上的内容到远程仓库\ngit clone 远程地址           将远程仓库的内容克隆到本地\ngit pull 远程库地址别名 远程分支名   将远程仓库对于分支最新内容拉下来后与 当前本地分支直接合并\n\n如果 git push 不加别名和分支，默认别名是 origin，分支是 master。\n\n我们 clone 项目会自动做如下操作：\n\n * 拉取代码\n * 初始化本地仓库\n * 创建别名，默认是 origin\n\n具体看 Git - SSH免密登录。\n\n\n# 设置用户签名\n\n\n# 项目级别/仓库级别\n\n仅在当前本地库范围内有效。\n\ngit config user.name 用户名\ngit config user.email 邮箱\n\n\n1\n2\n\n\n信息保存位置：./.git/config 文件里。\n\n\n# 系统用户级别\n\n登录当前操作系统的用户范围。\n\ngit config --global user.name 用户名\ngit config --global user.email 邮箱\n\n\n1\n2\n\n\n\n\n信息保存位置：设置了用户签名，会在用户盘下生成 .gitconfig 文件，里面也可以直接修改自己的信息。\n\n\n# 级别优先级\n\n * 就近原则：项目级别优先于系统用户级别，二者都有时采用项目级别的签名\n\n * 如果只有系统用户级别的签名，就以系统用户级别的签名为准\n\n * 二者都没有不允许\n\n\n# 说明\n\n签名的作用是区分不同操作者身份。用户的签名信息在每一个版本的提交信息中能够看到，以此确认本次提交是谁做的。Git 首次安装必须设置一下用户签名，否则无法提交代码。\n\n邮箱可以是虚拟邮箱，Git 不会去识别。\n\n注意：这里设置用户签名和将来登录 GitHub（或其他代码托管中心）的账号没有任何关系。\n\n\n# 初始化本地库\n\n基本语法：\n\ngit init\n\n\n1\n\n\n该指令会将目录下的所有子目录以及文件交给 Git 管理，也是我们使用 Git 最重要的一步。\n\n执行该指令后，会在当前目录下生成 .git 目录，该目录默认是隐藏的。\n\n注意：.git 目录中存放的是本地库相关的子目录和文件，不要删除，也不要胡乱修改。\n\n\n# 查看本地库状态\n\n查看工作区、暂存区状态。\n\n基本语法：\n\ngit status\n\n\n1\n\n\n\n\n可以看到，我删除了 3 个文件，还没有放到暂存区（红色），存到了暂存区（绿色），存到了本地库（消失）。\n\n\n# 文件增删改操作\n\n\n# 删除暂存区的文件\n\ngit rm --cached 文件名\n\n\n1\n\n\n\n# 添加文件到暂存区\n\ngit add 文件名\ngit add -A  # -A 代表全名文件\n\n\n1\n2\n\n\n\n# 提交文件到本地库\n\ngit commit -m "日志信息" [文件名] # 文件名可不写\n\n\n1\n\n\n\n# 历史版本操作\n\n\n# 查看历史版本\n\ngit log   # 查看详细版本信息\ngit reflog  # 查看简要版本信息\ngit log --pretty=oneline  # 一行显示一个版本信息（版本号完整）\ngit log --oneline  # 一行显示一个版本信息（版本号简写）\n\n\n1\n2\n3\n4\n\n\n多屏显示控制方式：\n\n * 空格向下翻页\n\n * b 向上翻页\n\n * q 退出\n\n\n# 切换历史版本\n\n * 基于索引值操作[推荐]\n   \n   git reset --hard [局部索引值]\n   git reset --hard a6ace91   # 例子\n   \n   \n   1\n   2\n   \n\n * 使用 ^ 符号：只能后退\n   \n   git reset --hard HEAD^\n   \n   \n   1\n   \n   \n   注：一个 ^ 表示后退一步，n 个表示后退。\n\n * 使用 ~ 符号：只能后退\n   \n   git reset --hard HEAD~n\n   \n   \n   1\n   \n   \n   注：表示后退 n 步。\n\n * 使用 HEAD 符号，恢复当前提交本地库的版本\n   \n   git reset --hard HEAD\n   \n   \n   1\n   \n   \n   注：在当前版本中删除了某个文件，可以恢复到当前最初的版本。\n\n> reset 命令的三个参数对比\n\n * --soft 参数\n   \n   * 仅仅在本地库移动 HEAD 指针\n\n * --mixed 参数\n   \n   * 在本地库移动 HEAD 指针\n   * 重置暂存区\n\n * --hard 参数\n   \n   * 在本地库移动 HEAD 指针\n   * 重置暂存区\n   * 重置工作区\n\n\n# 比较文件操作\n\n> 将工作区中的文件和暂存区进行比较\n\ngit diff [文件名]\n\n\n1\n\n\n> 将工作区中的文件和本地库历史记录比较\n\ngit diff [本地库中历史版本] [文件名]\n\n\n1\n\n\n不带文件名则比较多个文件。\n\n如果 [本地库中历史版本] 是 HEAD，则比较当前版本。\n\n\n# 分支操作\n\n\n\n\n# 什么是分支？\n\n在版本控制过程中，同时推进多个任务，为每个任务，我们就可以创建每个任务的单独分支。使用分支意味着程序员可以把自己的工作从开发主线上分离开来，开发自己分支的时候，不会影响主线分支的运行。对于初学者而言，分支可以简单理解为副本，一个分支就是一个单独的副本。（分支底层其实也是指针的引用）\n\n\n\n\n# 分支的好处？\n\n同时并行推进多个功能开发，提高开发效率。\n\n各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可。\n\n\n# 分支操作\n\n命令名称                  作用\ngit branch 分支名        创建分支\ngit branch -D 分支名     删除分支\ngit branch -m 新的分支名   将当前分支名改为新的分支名\ngit branch -v         查看分支\ngit checkout 分支名      切换分支\ngit merge 分支名         合并分支\n\n> 创建分支\n\ngit branch [分支名]\n\n\n1\n\n\n> 删除分支\n\ngit branch -D 分支名\n\n\n1\n\n\n> 将当前分支名改为新的分支名\n\ngit branch -m 新的分支名\n\n\n1\n\n\n> 查看分支\n\ngit branch -v\n\n\n1\n\n\n> 切换分支\n\ngit checkout [分支名]\n\n\n1\n\n\n> 合并分支\n\n * 第一步：切换到接受修改的分支（被合并，增加新内容）上\n   \n   git checkout [被合并的分支名]\n   \n   \n   1\n   \n\n * 第二步：执行 merge 命令\n   \n   git merge [有新内容的分支名]\n   \n   \n   1\n   \n\n\n# 分支冲突\n\n> 产生冲突\n\n冲突的表现：后面状态为 MERGING\n\n\n\n冲突产生的原因：合并分支时，两个分支在 同一个文件的同一个位置 有两套完全不同的修改。Git 无法替 我们决定使用哪一个。必须 人为决定 新代码内容。\n\n冲突如图（修改的是同一个位置）：\n\n\n\n> 解决冲突\n\n冲突的解决：\n\n * 第一步：编辑文件，删除特殊符号\n\n * 第二步：把文件修改到满意的程度，保存退出\n\n * 第三步：添加到暂存区，git add [文件名]\n\n * 第四步：执行提交，git commit -m "日志信息"（注意：此时 commit 一定不能带具体文件名）\n\n\n# 创建分支和切换分支图解\n\n\n\nmaster、hot-fix 其实都是指向具体版本记录的指针。当前所在的分支，其实是由 HEAD 决定的。所以创建分支的本质就是多创建一个指针。\n\nHEAD 如果指向 master，那么我们现在就在 master 分支上。\n\nHEAD 如果执行 hotfix，那么我们现在就在 hotfix 分支上。\n\n\n# 分支进阶操作\n\n\n# 删除所有记录\n\n想清空所有 commit 的信息记录，就像形成一个全新的仓库，且代码不变。\n\n 1. 先切换到新的分支\n    \n    git branch kele\n    git checkout kele\n    \n    \n    1\n    2\n    \n\n 2. 添加所有文件到暂存区（除了 .gitignore 中排除的）\n    \n    git add -A\n    \n    \n    1\n    \n\n 3. 提交跟踪过的文件到本地库\n    \n    git commit -am "commit message"\n    \n    \n    1\n    \n\n 4. 删除 master 分支\n    \n    git branch -D master\n    \n    \n    1\n    \n\n 5. 重命名当前分支为 master\n    \n    git branch -m master\n    \n    \n    1\n    \n\n 6. 提交到远程 master 分支\n    \n    git push -f origin master\n    \n    \n    1\n    \n\n\n# 删除上次记录\n\n如果只是想修改上次提交的代码，做一次更完美的 commit，可以这样：\n\n 1. 回到到上个版本(注：不要带 --hard)\n    \n    git reset commitId\n    \n    \n    1\n    \n\n 2. 暂存修改\n    \n    git stash\n    \n    \n    1\n    \n\n 3. 强制 push，这样远程的最新的一次 commit 被删除\n    \n    git push --force\n    \n    \n    1\n    \n\n 4. 释放暂存的修改，开始修改代码\n    \n    git stash pop\n    \n    \n    1\n    \n\n 5. 添加、推送\n    \n    git add\n    git commit -m "massage"\n    git push\n    \n    \n    1\n    2\n    3\n    ',normalizedContent:'笔记\n\n下面我们学习 git 在本地常用的命令，也是开发经常用到的命令。\n\n2022-02-08 @村长\n\n\n\n * git常用命令\n   * 本地命令\n   * 远程命令\n * 设置用户签名\n   * 项目级别/仓库级别\n   * 系统用户级别\n   * 级别优先级\n   * 说明\n * 初始化本地库\n * 查看本地库状态\n * 文件增删改操作\n   * 删除暂存区的文件\n   * 添加文件到暂存区\n   * 提交文件到本地库\n * 历史版本操作\n   * 查看历史版本\n   * 切换历史版本\n * 比较文件操作\n * 分支操作\n   * 什么是分支？\n   * 分支的好处？\n   * 分支操作\n   * 分支冲突\n   * 创建分支和切换分支图解\n * 分支进阶操作\n   * 删除所有记录\n   * 删除上次记录\n\n\n\n\n# git常用命令\n\n\n# 本地命令\n\n命令名称                                               作用\ngit config --global user.name 用户名                  设置用户签名\ngit config --global user.email 邮箱                  设置用户签名\ngit init                                           初始化本地库\ngit status                                         查看本地库状态\ngit add 文件名（-a 代表目录及子目录下所有文件名）                     添加到暂存区\ngit commit -m "日志信息" [文件名]（不加文件名，默认所有文件都添加该日志信息）   添加到本地库\ngit reflog                                         查看历史记录（简要）\ngit log                                            查看历史记录（详细）\ngit log --pretty=oneline                           一行显示一个版本信息（版本号完整）\ngit log --oneline                                  一行显示一个版本信息（版本号简写）\ngit reset --hard 版本号                               版本穿梭、跳转\ngit diff [文件名]                                     比较工作区中和暂存区的文件\ngit diff [本地库中历史版本] [文件名]                          比较工作区中的文件和本地库历史记录\ngit branch 分支名                                     创建分支\ngit branch -d 分支名                                  删除分支\ngit branch -m 新的分支名                                将当前分支名改为新的分支名\ngit branch -v                                      查看分支\ngit checkout 分支名                                   切换分支\ngit merge 分支名                                      合并分支\n\n\n# 远程命令\n\n命令名称                     作用\ngit remote -v            查看当前所有远程地址别名\ngit remote add 别名 远程地址   起别名\ngit push 别名 分支           推送本地分支上的内容到远程仓库\ngit clone 远程地址           将远程仓库的内容克隆到本地\ngit pull 远程库地址别名 远程分支名   将远程仓库对于分支最新内容拉下来后与 当前本地分支直接合并\n\n如果 git push 不加别名和分支，默认别名是 origin，分支是 master。\n\n我们 clone 项目会自动做如下操作：\n\n * 拉取代码\n * 初始化本地仓库\n * 创建别名，默认是 origin\n\n具体看 git - ssh免密登录。\n\n\n# 设置用户签名\n\n\n# 项目级别/仓库级别\n\n仅在当前本地库范围内有效。\n\ngit config user.name 用户名\ngit config user.email 邮箱\n\n\n1\n2\n\n\n信息保存位置：./.git/config 文件里。\n\n\n# 系统用户级别\n\n登录当前操作系统的用户范围。\n\ngit config --global user.name 用户名\ngit config --global user.email 邮箱\n\n\n1\n2\n\n\n\n\n信息保存位置：设置了用户签名，会在用户盘下生成 .gitconfig 文件，里面也可以直接修改自己的信息。\n\n\n# 级别优先级\n\n * 就近原则：项目级别优先于系统用户级别，二者都有时采用项目级别的签名\n\n * 如果只有系统用户级别的签名，就以系统用户级别的签名为准\n\n * 二者都没有不允许\n\n\n# 说明\n\n签名的作用是区分不同操作者身份。用户的签名信息在每一个版本的提交信息中能够看到，以此确认本次提交是谁做的。git 首次安装必须设置一下用户签名，否则无法提交代码。\n\n邮箱可以是虚拟邮箱，git 不会去识别。\n\n注意：这里设置用户签名和将来登录 github（或其他代码托管中心）的账号没有任何关系。\n\n\n# 初始化本地库\n\n基本语法：\n\ngit init\n\n\n1\n\n\n该指令会将目录下的所有子目录以及文件交给 git 管理，也是我们使用 git 最重要的一步。\n\n执行该指令后，会在当前目录下生成 .git 目录，该目录默认是隐藏的。\n\n注意：.git 目录中存放的是本地库相关的子目录和文件，不要删除，也不要胡乱修改。\n\n\n# 查看本地库状态\n\n查看工作区、暂存区状态。\n\n基本语法：\n\ngit status\n\n\n1\n\n\n\n\n可以看到，我删除了 3 个文件，还没有放到暂存区（红色），存到了暂存区（绿色），存到了本地库（消失）。\n\n\n# 文件增删改操作\n\n\n# 删除暂存区的文件\n\ngit rm --cached 文件名\n\n\n1\n\n\n\n# 添加文件到暂存区\n\ngit add 文件名\ngit add -a  # -a 代表全名文件\n\n\n1\n2\n\n\n\n# 提交文件到本地库\n\ngit commit -m "日志信息" [文件名] # 文件名可不写\n\n\n1\n\n\n\n# 历史版本操作\n\n\n# 查看历史版本\n\ngit log   # 查看详细版本信息\ngit reflog  # 查看简要版本信息\ngit log --pretty=oneline  # 一行显示一个版本信息（版本号完整）\ngit log --oneline  # 一行显示一个版本信息（版本号简写）\n\n\n1\n2\n3\n4\n\n\n多屏显示控制方式：\n\n * 空格向下翻页\n\n * b 向上翻页\n\n * q 退出\n\n\n# 切换历史版本\n\n * 基于索引值操作[推荐]\n   \n   git reset --hard [局部索引值]\n   git reset --hard a6ace91   # 例子\n   \n   \n   1\n   2\n   \n\n * 使用 ^ 符号：只能后退\n   \n   git reset --hard head^\n   \n   \n   1\n   \n   \n   注：一个 ^ 表示后退一步，n 个表示后退。\n\n * 使用 ~ 符号：只能后退\n   \n   git reset --hard head~n\n   \n   \n   1\n   \n   \n   注：表示后退 n 步。\n\n * 使用 head 符号，恢复当前提交本地库的版本\n   \n   git reset --hard head\n   \n   \n   1\n   \n   \n   注：在当前版本中删除了某个文件，可以恢复到当前最初的版本。\n\n> reset 命令的三个参数对比\n\n * --soft 参数\n   \n   * 仅仅在本地库移动 head 指针\n\n * --mixed 参数\n   \n   * 在本地库移动 head 指针\n   * 重置暂存区\n\n * --hard 参数\n   \n   * 在本地库移动 head 指针\n   * 重置暂存区\n   * 重置工作区\n\n\n# 比较文件操作\n\n> 将工作区中的文件和暂存区进行比较\n\ngit diff [文件名]\n\n\n1\n\n\n> 将工作区中的文件和本地库历史记录比较\n\ngit diff [本地库中历史版本] [文件名]\n\n\n1\n\n\n不带文件名则比较多个文件。\n\n如果 [本地库中历史版本] 是 head，则比较当前版本。\n\n\n# 分支操作\n\n\n\n\n# 什么是分支？\n\n在版本控制过程中，同时推进多个任务，为每个任务，我们就可以创建每个任务的单独分支。使用分支意味着程序员可以把自己的工作从开发主线上分离开来，开发自己分支的时候，不会影响主线分支的运行。对于初学者而言，分支可以简单理解为副本，一个分支就是一个单独的副本。（分支底层其实也是指针的引用）\n\n\n\n\n# 分支的好处？\n\n同时并行推进多个功能开发，提高开发效率。\n\n各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可。\n\n\n# 分支操作\n\n命令名称                  作用\ngit branch 分支名        创建分支\ngit branch -d 分支名     删除分支\ngit branch -m 新的分支名   将当前分支名改为新的分支名\ngit branch -v         查看分支\ngit checkout 分支名      切换分支\ngit merge 分支名         合并分支\n\n> 创建分支\n\ngit branch [分支名]\n\n\n1\n\n\n> 删除分支\n\ngit branch -d 分支名\n\n\n1\n\n\n> 将当前分支名改为新的分支名\n\ngit branch -m 新的分支名\n\n\n1\n\n\n> 查看分支\n\ngit branch -v\n\n\n1\n\n\n> 切换分支\n\ngit checkout [分支名]\n\n\n1\n\n\n> 合并分支\n\n * 第一步：切换到接受修改的分支（被合并，增加新内容）上\n   \n   git checkout [被合并的分支名]\n   \n   \n   1\n   \n\n * 第二步：执行 merge 命令\n   \n   git merge [有新内容的分支名]\n   \n   \n   1\n   \n\n\n# 分支冲突\n\n> 产生冲突\n\n冲突的表现：后面状态为 merging\n\n\n\n冲突产生的原因：合并分支时，两个分支在 同一个文件的同一个位置 有两套完全不同的修改。git 无法替 我们决定使用哪一个。必须 人为决定 新代码内容。\n\n冲突如图（修改的是同一个位置）：\n\n\n\n> 解决冲突\n\n冲突的解决：\n\n * 第一步：编辑文件，删除特殊符号\n\n * 第二步：把文件修改到满意的程度，保存退出\n\n * 第三步：添加到暂存区，git add [文件名]\n\n * 第四步：执行提交，git commit -m "日志信息"（注意：此时 commit 一定不能带具体文件名）\n\n\n# 创建分支和切换分支图解\n\n\n\nmaster、hot-fix 其实都是指向具体版本记录的指针。当前所在的分支，其实是由 head 决定的。所以创建分支的本质就是多创建一个指针。\n\nhead 如果指向 master，那么我们现在就在 master 分支上。\n\nhead 如果执行 hotfix，那么我们现在就在 hotfix 分支上。\n\n\n# 分支进阶操作\n\n\n# 删除所有记录\n\n想清空所有 commit 的信息记录，就像形成一个全新的仓库，且代码不变。\n\n 1. 先切换到新的分支\n    \n    git branch kele\n    git checkout kele\n    \n    \n    1\n    2\n    \n\n 2. 添加所有文件到暂存区（除了 .gitignore 中排除的）\n    \n    git add -a\n    \n    \n    1\n    \n\n 3. 提交跟踪过的文件到本地库\n    \n    git commit -am "commit message"\n    \n    \n    1\n    \n\n 4. 删除 master 分支\n    \n    git branch -d master\n    \n    \n    1\n    \n\n 5. 重命名当前分支为 master\n    \n    git branch -m master\n    \n    \n    1\n    \n\n 6. 提交到远程 master 分支\n    \n    git push -f origin master\n    \n    \n    1\n    \n\n\n# 删除上次记录\n\n如果只是想修改上次提交的代码，做一次更完美的 commit，可以这样：\n\n 1. 回到到上个版本(注：不要带 --hard)\n    \n    git reset commitid\n    \n    \n    1\n    \n\n 2. 暂存修改\n    \n    git stash\n    \n    \n    1\n    \n\n 3. 强制 push，这样远程的最新的一次 commit 被删除\n    \n    git push --force\n    \n    \n    1\n    \n\n 4. 释放暂存的修改，开始修改代码\n    \n    git stash pop\n    \n    \n    1\n    \n\n 5. 添加、推送\n    \n    git add\n    git commit -m "massage"\n    git push\n    \n    \n    1\n    2\n    3\n    ',charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"Git - 基本原理",frontmatter:{title:"Git - 基本原理",date:"2022-02-08T21:01:48.000Z",permalink:"/git/basic-principles/",categories:["Git"],tags:["Git"],readingShow:"top"},regularPath:"/40.%E5%B7%A5%E5%85%B7/20.%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86%20-%20Git/05.Git%20-%20%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86.html",relativePath:"40.工具/20.开发管理 - Git/05.Git - 基本原理.md",key:"v-7239a90e",path:"/git/basic-principles/",headers:[{level:2,title:"哈希法",slug:"哈希法",normalizedTitle:"哈希法",charIndex:47},{level:2,title:"Git保存版本的机制",slug:"git保存版本的机制",normalizedTitle:"git保存版本的机制",charIndex:54},{level:3,title:"集中式版本控制工具的文件管理机制",slug:"集中式版本控制工具的文件管理机制",normalizedTitle:"集中式版本控制工具的文件管理机制",charIndex:70},{level:3,title:"Git文件管理机制",slug:"git文件管理机制",normalizedTitle:"git文件管理机制",charIndex:92},{level:3,title:"Git文件管理机制细节",slug:"git文件管理机制细节",normalizedTitle:"git文件管理机制细节",charIndex:107},{level:2,title:"Git分支管理机制",slug:"git分支管理机制",normalizedTitle:"git分支管理机制",charIndex:122},{level:3,title:"分支的创建",slug:"分支的创建",normalizedTitle:"分支的创建",charIndex:137},{level:3,title:"分支的切换",slug:"分支的切换",normalizedTitle:"分支的切换",charIndex:148}],headersStr:"哈希法 Git保存版本的机制 集中式版本控制工具的文件管理机制 Git文件管理机制 Git文件管理机制细节 Git分支管理机制 分支的创建 分支的切换",content:"笔记\n\n简单了解 Git 的基本原理和哈希算法。\n\n2022-02-08 @村长\n\n\n\n * 哈希法\n * Git保存版本的机制\n   * 集中式版本控制工具的文件管理机制\n   * Git文件管理机制\n   * Git文件管理机制细节\n * Git分支管理机制\n   * 分支的创建\n   * 分支的切换\n\n\n\n\n# 哈希法\n\n\n\n哈希是一个系列的加密算法，各个不同的哈希算法虽然加密强度不同，但是有以下几个共同点：\n\n * 不管输入数据的数据量有多大，输入同一个哈希算法，得到的加密结果长度固定。\n\n * 哈希算法确定，输入数据确定，输出数据能够保证不变\n\n * 哈希算法确定，输入数据有变化，输出数据一定有变化，而且通常变化很大\n\n * 哈希算法不可逆\n\nGit 底层采用的是 SHA-1 算法。\n\n哈希算法可以被用来验证文件。原理如下图所示：\n\n\n\nGit 就是靠这种机制来从根本上保证数据完整性的。\n\n\n# Git保存版本的机制\n\n\n# 集中式版本控制工具的文件管理机制\n\n以文件变更列表的方式存储信息。这类系统将它们保存的信息看作是一组基本 文件和每个文件随时间逐步累积的差异。\n\n\n\n\n# Git文件管理机制\n\nGit 把数据看作是小型文件系统的一组快照。每次提交更新时 Git 都会对当前的全部文件制作一个快照并保存这个快照的索引。为了高效，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。所以 Git 的工作方式可以称之为快照流。\n\n\n\n\n# Git文件管理机制细节\n\nGit 的「提交对象」（每个文件对应的 hash 值）\n\n\n\n提交对象及其父对象形成的链条\n\n\n\n\n# Git分支管理机制\n\n\n# 分支的创建\n\n新建一个指针\n\n\n\n\n# 分支的切换\n\nHEAD 指向\n\n\n\nHEAD 指向 testing 时提交了内容\n\n\n\n切换回 master\n\n\n\nHEAD 指向 master 时 提交了数据\n\n",normalizedContent:"笔记\n\n简单了解 git 的基本原理和哈希算法。\n\n2022-02-08 @村长\n\n\n\n * 哈希法\n * git保存版本的机制\n   * 集中式版本控制工具的文件管理机制\n   * git文件管理机制\n   * git文件管理机制细节\n * git分支管理机制\n   * 分支的创建\n   * 分支的切换\n\n\n\n\n# 哈希法\n\n\n\n哈希是一个系列的加密算法，各个不同的哈希算法虽然加密强度不同，但是有以下几个共同点：\n\n * 不管输入数据的数据量有多大，输入同一个哈希算法，得到的加密结果长度固定。\n\n * 哈希算法确定，输入数据确定，输出数据能够保证不变\n\n * 哈希算法确定，输入数据有变化，输出数据一定有变化，而且通常变化很大\n\n * 哈希算法不可逆\n\ngit 底层采用的是 sha-1 算法。\n\n哈希算法可以被用来验证文件。原理如下图所示：\n\n\n\ngit 就是靠这种机制来从根本上保证数据完整性的。\n\n\n# git保存版本的机制\n\n\n# 集中式版本控制工具的文件管理机制\n\n以文件变更列表的方式存储信息。这类系统将它们保存的信息看作是一组基本 文件和每个文件随时间逐步累积的差异。\n\n\n\n\n# git文件管理机制\n\ngit 把数据看作是小型文件系统的一组快照。每次提交更新时 git 都会对当前的全部文件制作一个快照并保存这个快照的索引。为了高效，如果文件没有修改，git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。所以 git 的工作方式可以称之为快照流。\n\n\n\n\n# git文件管理机制细节\n\ngit 的「提交对象」（每个文件对应的 hash 值）\n\n\n\n提交对象及其父对象形成的链条\n\n\n\n\n# git分支管理机制\n\n\n# 分支的创建\n\n新建一个指针\n\n\n\n\n# 分支的切换\n\nhead 指向\n\n\n\nhead 指向 testing 时提交了内容\n\n\n\n切换回 master\n\n\n\nhead 指向 master 时 提交了数据\n\n",charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"Git - SSH免密登录",frontmatter:{title:"Git - SSH免密登录",date:"2022-02-08T16:49:21.000Z",permalink:"/git/ssh-login/",categories:["Git"],tags:["Git"],readingShow:"top"},regularPath:"/40.%E5%B7%A5%E5%85%B7/20.%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86%20-%20Git/07.Git%20-%20SSH%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95.html",relativePath:"40.工具/20.开发管理 - Git/07.Git - SSH免密登录.md",key:"v-831f05e0",path:"/git/ssh-login/",headers:[{level:2,title:"步骤",slug:"步骤",normalizedTitle:"步骤",charIndex:84},{level:2,title:"好处",slug:"好处",normalizedTitle:"好处",charIndex:90},{level:2,title:"别名",slug:"别名",normalizedTitle:"别名",charIndex:96}],headersStr:"步骤 好处 别名",content:"笔记\n\n每次我们 push 项目到远程库，都需要登录，那么有没有方法不需要登录也能 push 项目呢？需要 SSH 密钥。\n\n2022-02-08 @村长\n\n\n\n * 步骤\n * 好处\n * 别名\n\n\n\n\n# 步骤\n\n我们可以看到远程仓库中还有一个 SSH 的地址，因此我们也可以使用 SSH 实现免密码登录。\n\n进入 C:/Users/用户名/.ssh 目录生成公钥（没有 .ssh 目录则创建）。\n\n右键打开 Git Bash Here。\n\nssh-keygen -t rsa -C GitHub注册邮箱\n\n\n1\n\n\n执行并回车三次后会在 .ssh 目录生成两个文件：\n\n * id_rsa：私钥\n * id_rsa.pub：公钥，给 GitHub，这样 GitHub 才能自动访问私钥所在的电脑，无需重新登录\n\n> 把公钥交给 GitHub\n\n * 复制 id_rsa.pub 文件内容\n\n * 前往 GitHub：点击用户头像，点击 Settings，找到 SSH and GPG keys，然后 New SSH，粘贴进去\n\n * Gitee：点击设置，找到 SSH 公钥，粘贴进去\n\n公钥可以多个平台同时设置 SSH。\n\n> GitHub 设置公钥图\n\n\n\n\n\n\n\n\n# 好处\n\n接下来再往远程仓库 push 东西的时候使用 SSH 连接就不需要登录了，因为 GitHub在国外，登录容易失败。\n\n\n# 别名\n\n对于用 https 已经克隆在本地的仓库，我们可以加个「别名」来进行 SSH 连接。\n\n基本语法\n\ngit remote -v：查看当前所有远程地址别名。\n\ngit remote add：别名 远程地址。\n\n案例\n\n我们提交到远程仓库的指令是：\n\ngit push 远程仓库地址 分支\n\n\n1\n\n\n这个地址可以是 HTTPS 也可以是 SSH。\n\n但由于地址太长了，可以用「别名」代替地址。\n\n添加别名：\n\ngit remote add kele git@github.com:Kele-Bingtang/Kele-Bingtang.github.io.git\n\n\n1\n\n\n推送到远程仓库：\n\ngit push kele master\n\n\n1\n\n\n我们 clone 项目会做如下操作：\n\n * 拉取代码\n * 初始化本地仓库\n * 创建别名，默认是 origin",normalizedContent:"笔记\n\n每次我们 push 项目到远程库，都需要登录，那么有没有方法不需要登录也能 push 项目呢？需要 ssh 密钥。\n\n2022-02-08 @村长\n\n\n\n * 步骤\n * 好处\n * 别名\n\n\n\n\n# 步骤\n\n我们可以看到远程仓库中还有一个 ssh 的地址，因此我们也可以使用 ssh 实现免密码登录。\n\n进入 c:/users/用户名/.ssh 目录生成公钥（没有 .ssh 目录则创建）。\n\n右键打开 git bash here。\n\nssh-keygen -t rsa -c github注册邮箱\n\n\n1\n\n\n执行并回车三次后会在 .ssh 目录生成两个文件：\n\n * id_rsa：私钥\n * id_rsa.pub：公钥，给 github，这样 github 才能自动访问私钥所在的电脑，无需重新登录\n\n> 把公钥交给 github\n\n * 复制 id_rsa.pub 文件内容\n\n * 前往 github：点击用户头像，点击 settings，找到 ssh and gpg keys，然后 new ssh，粘贴进去\n\n * gitee：点击设置，找到 ssh 公钥，粘贴进去\n\n公钥可以多个平台同时设置 ssh。\n\n> github 设置公钥图\n\n\n\n\n\n\n\n\n# 好处\n\n接下来再往远程仓库 push 东西的时候使用 ssh 连接就不需要登录了，因为 github在国外，登录容易失败。\n\n\n# 别名\n\n对于用 https 已经克隆在本地的仓库，我们可以加个「别名」来进行 ssh 连接。\n\n基本语法\n\ngit remote -v：查看当前所有远程地址别名。\n\ngit remote add：别名 远程地址。\n\n案例\n\n我们提交到远程仓库的指令是：\n\ngit push 远程仓库地址 分支\n\n\n1\n\n\n这个地址可以是 https 也可以是 ssh。\n\n但由于地址太长了，可以用「别名」代替地址。\n\n添加别名：\n\ngit remote add kele git@github.com:kele-bingtang/kele-bingtang.github.io.git\n\n\n1\n\n\n推送到远程仓库：\n\ngit push kele master\n\n\n1\n\n\n我们 clone 项目会做如下操作：\n\n * 拉取代码\n * 初始化本地仓库\n * 创建别名，默认是 origin",charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"Git - IDEA集成",frontmatter:{title:"Git - IDEA集成",date:"2022-02-08T18:16:29.000Z",permalink:"/git/idea/",categories:["Git"],tags:["Git"],readingShow:"top"},regularPath:"/40.%E5%B7%A5%E5%85%B7/20.%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86%20-%20Git/09.Git%20-%20IDEA%E9%9B%86%E6%88%90.html",relativePath:"40.工具/20.开发管理 - Git/09.Git - IDEA集成.md",key:"v-df1f8b60",path:"/git/idea/",headers:[{level:2,title:"IDEA集成Git",slug:"idea集成git",normalizedTitle:"idea集成git",charIndex:64},{level:3,title:"配置Git忽略文件",slug:"配置git忽略文件",normalizedTitle:"配置git忽略文件",charIndex:79},{level:3,title:"定位Git程序",slug:"定位git程序",normalizedTitle:"定位git程序",charIndex:94},{level:3,title:"初始化本地库",slug:"初始化本地库",normalizedTitle:"初始化本地库",charIndex:107},{level:3,title:"添加到暂存区",slug:"添加到暂存区",normalizedTitle:"添加到暂存区",charIndex:119},{level:3,title:"提交到本地库",slug:"提交到本地库",normalizedTitle:"提交到本地库",charIndex:131},{level:3,title:"切换版本",slug:"切换版本",normalizedTitle:"切换版本",charIndex:143},{level:3,title:"创建分支",slug:"创建分支",normalizedTitle:"创建分支",charIndex:153},{level:3,title:"切换分支",slug:"切换分支",normalizedTitle:"切换分支",charIndex:163},{level:3,title:"合并分支",slug:"合并分支",normalizedTitle:"合并分支",charIndex:173},{level:3,title:"解决冲突",slug:"解决冲突",normalizedTitle:"解决冲突",charIndex:183},{level:2,title:"IDEA集成GitHub",slug:"idea集成github",normalizedTitle:"idea集成github",charIndex:191},{level:3,title:"设置GitHub账号",slug:"设置github账号",normalizedTitle:"设置github账号",charIndex:209},{level:3,title:"分享工程到GitHub",slug:"分享工程到github",normalizedTitle:"分享工程到github",charIndex:225},{level:3,title:"推送本地库到远程库",slug:"推送本地库到远程库",normalizedTitle:"推送本地库到远程库",charIndex:242},{level:3,title:"拉取远程库到本地库",slug:"拉取远程库到本地库",normalizedTitle:"拉取远程库到本地库",charIndex:257},{level:3,title:"克隆远程库到本地",slug:"克隆远程库到本地",normalizedTitle:"克隆远程库到本地",charIndex:272},{level:2,title:"IDEA集成Gitee",slug:"idea集成gitee",normalizedTitle:"idea集成gitee",charIndex:284},{level:3,title:"IDEA安装Gitee插件",slug:"idea安装gitee插件",normalizedTitle:"idea安装gitee插件",charIndex:301},{level:3,title:"本地库推送到远程库",slug:"本地库推送到远程库",normalizedTitle:"本地库推送到远程库",charIndex:320},{level:3,title:"码云复制GitHub项目",slug:"码云复制github项目",normalizedTitle:"码云复制github项目",charIndex:335}],headersStr:"IDEA集成Git 配置Git忽略文件 定位Git程序 初始化本地库 添加到暂存区 提交到本地库 切换版本 创建分支 切换分支 合并分支 解决冲突 IDEA集成GitHub 设置GitHub账号 分享工程到GitHub 推送本地库到远程库 拉取远程库到本地库 克隆远程库到本地 IDEA集成Gitee IDEA安装Gitee插件 本地库推送到远程库 码云复制GitHub项目",content:"笔记\n\n实际开发上，我们更愿意利用图形化界面如 IDEA 来进行 Git 的操作。\n\n2022-02-08 @村长\n\n\n\n * IDEA集成Git\n   * 配置Git忽略文件\n   * 定位Git程序\n   * 初始化本地库\n   * 添加到暂存区\n   * 提交到本地库\n   * 切换版本\n   * 创建分支\n   * 切换分支\n   * 合并分支\n   * 解决冲突\n * IDEA集成GitHub\n   * 设置GitHub账号\n   * 分享工程到GitHub\n   * 推送本地库到远程库\n   * 拉取远程库到本地库\n   * 克隆远程库到本地\n * IDEA集成Gitee\n   * IDEA安装Gitee插件\n   * 本地库推送到远程库\n   * 码云复制GitHub项目\n\n\n\n\n# IDEA集成Git\n\n\n# 配置Git忽略文件\n\n有些文件如 .class、.war、.jar 等与项目的实际功能无关，不参与服务器上部署运行，那么我们需要忽略他们。\n\n忽略文件有两种：\n\n * 电脑全局忽略，即只要在本电脑创建的 Git 项目，都会忽略特点文件\n * 项目局部忽略，即配置只有该项目的特点文件被忽略\n\n建议先配置电脑全局忽略，因为一些固定的文件是不需要上传 Git 的，而局部忽略可以选择性得进行文件忽略。\n\n> 全局忽略\n\n创建忽略规则文件 xxxx.ignore（前缀名随便起，建议是 git.ignore）\n\n这个文件的存放位置原则上在哪里都可以，为了便于让 ~/.gitconfig 文件引用，建议也放在用户家目录下（C/Users/用户名）。\n\n 1. git.ignore 文件模版内容如下：\n    \n    # Compiled class file\n    *.class\n    \n    # Log file\n    *.log\n    \n    # BlueJ files\n    *.ctxt\n    \n    # Mobile Tools for Java (J2ME)\n    .mtj.tmp/\n    \n    # Package Files #\n    *.jar\n    *.war\n    *.nar\n    *.ear\n    *.zip\n    *.tar.gz\n    *.rar\n    \n    # virtual machine crash logs, see \n    http://www.java.com/en/download/help/error_hotspot.xml\n    hs_err_pid*\n    .classpath\n    .project\n    .settings\n    target\n    .idea\n    *.iml\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    11\n    12\n    13\n    14\n    15\n    16\n    17\n    18\n    19\n    20\n    21\n    22\n    23\n    24\n    25\n    26\n    27\n    28\n    29\n    30\n    \n\n 2. 在 .gitconfig 文件中引用忽略配置文件（此文件在 Windows 的家目录中）\n    \n    [user]\n    \tname = 【git config user.name 的用户名】\n    \temail = 【git config user.email 的邮箱】\n    [core]\n    \texcludesfile = C:/Users/asus/git.ignore\n    \n    \n    1\n    2\n    3\n    4\n    5\n    \n    \n    注意：这里要使用正斜线（/），不要使用反斜线（\\）。\n\n> 局部忽略\n\n在项目的根目录下创建 .gitignore 文件，模板如下：\n\nHELP.md\ntarget/\n!.mvn/wrapper/maven-wrapper.jar\n!**/src/main/**/target/\n!**/src/test/**/target/\n\n### STS ###\n.apt_generated\n.classpath\n.factorypath\n.project\n.settings\n.springBeans\n.sts4-cache\n\n### IntelliJ IDEA ###\n.idea\n*.iws\n*.iml\n*.ipr\n\n### NetBeans ###\n/nbproject/private/\n/nbbuild/\n/dist/\n/nbdist/\n/.nb-gradle/\nbuild/\n!**/src/main/**/build/\n!**/src/test/**/build/\n\n### VS Code ###\n.vscode/\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# 定位Git程序\n\n\n\n\n# 初始化本地库\n\n\n\n选择要创建 Git 本地仓库的工程\n\n\n\n\n# 添加到暂存区\n\n右键点击项目选择 Git -> Add 将项目添加到暂存区\n\n\n\n\n# 提交到本地库\n\n\n\n\n\n\n# 切换版本\n\n在 IDEA 的左下角，点击 Version Control（新版是 Git），然后点击 Log 查看版本\n\n\n\n右键选择要切换的版本，然后在菜单里点击 Checkout Revision\n\n\n\n\n# 创建分支\n\n选择 Git，在 Repository 里面，点击 Branches 按钮\n\n\n\n在弹出的 Git Branches 框里，点击 New Branch 按钮\n\n\n\n填写分支名称，创建 hot-fix 分支\n\n\n\n然后再 IDEA 的右下角看到 hot-fix，说明分支创建成功，并且当前已经切换成 hot-fix 分支\n\n\n\n\n# 切换分支\n\n在 IDEA 窗口的右下角，切换到 master 分支\n\n\n\n然后在 IDEA 窗口的右下角看到了 master，说明 master 分支切换成功\n\n\n\n\n# 合并分支\n\n在 IDEA 窗口的右下角，将 hot-fix 分支合并到当前 master 分支\n\n\n\n如果代码没有冲突，分支直接合并成功，分支合并成功以后，代码自动提交，无需手动提交本地库。\n\n\n# 解决冲突\n\n如图所示，如果 master 分支和 hot-fix 分支都修改了代码，在合并分支的时候就会发生冲突\n\n\n\n\n\n我们现在站在 master 分支上合并 hot-fix 分支，就会发生代码冲突\n\n\n\n点击 Conflicts 框里的 Merge 按钮，进行手动合并代码\n\n\n\n手动合并完代码以后，点击右下角的 Apply 按钮\n\n\n\n代码冲突解决，自动提交本地库\n\n\n\n\n# IDEA集成GitHub\n\n\n# 设置GitHub账号\n\n\n\n如果出现 401 等情况连接不上的，是因为网络原因，可以使用以下方式连接：\n\n\n\n然后去 GitHub 账户上设置 token\n\n\n\n\n\n\n\n\n\n点击生成 token\n\n\n\n复制红框中的字符串到 idea 中\n\n\n\n点击登录\n\n\n\n\n# 分享工程到GitHub\n\n\n\n\n\n来到 GitHub 中发现已经帮我们创建好了 gitTest 的远程仓库\n\n\n\n\n# 推送本地库到远程库\n\n右键点击项目，可以将当前分支的内容 push 到 GitHub 的远程仓库中\n\n\n\n\n\n\n\n\n\n\n\n注意：push 是将本地库代码推送到远程库，如果本地库代码跟远程库代码版本不一致，push 的操作是会被拒绝的。也就是说，要想 push 成功，一定要保证本地库的版本要比远程库的版本高。\n\n因此一个成熟的程序员在动手改本地代码之前，一定会先检查下远程库跟本地代码的区别。如果本地的代码版本已经落后，切记要先 pull 拉取一下远程库的代码，将本地代码更新到最新以后，然后再修改，提交，推送。\n\n\n# 拉取远程库到本地库\n\n右键点击项目，可以将远程仓库的内容 pull 到本地仓库\n\n\n\n\n\n注意：pull 是拉取远端仓库代码到本地，如果远程库代码和本地库代码不一致，会自动合并，如果自动合并失败，还会涉及到手动解决冲突的问题。\n\n\n# 克隆远程库到本地\n\n\n\n\n\n为 clone 下来的项目创建一个工程，然后点击 Next\n\n\n\n\n\n\n\n\n\n\n# IDEA集成Gitee\n\n众所周知，GitHub 服务器在国外，使用 GitHub 作为项目托管网站，如果网速不好的话，严重影响使用体验，甚至会出现登录不上的情况。针对这个情况，可以使用国内的项目托管网站：码云（Gitee）。\n\n码云是开源中国推出的基于 Git 的代码托管服务中心，网址是 https://gitee.com/，使用方式跟 GitHub 一样，而且它还是一个中文网站，如果你英文不是很好它是最好的选择。\n\n\n# IDEA安装Gitee插件\n\nIDEA 默认不带码云插件，我们第一步要安装 Gitee 插件。\n\n如图所示，在 IDEA 插件商店搜索 Gitee，然后点击右侧的 Install 按钮。\n\n\n\nIDEA 链接码云和链接 GitHub 几乎一样，安装成功后，重启 IDEA\n\n\n\nIDEA 重启以后在 Version Control 设置里面看到 Gitee，说明码云插件安装成功\n\n\n\n然后在码云插件里面添加码云帐号，我们就可以用 IDEA 连接码云了\n\n\n\n\n# 本地库推送到远程库\n\nIDEA 连接码云和连接 GitHub 几乎一样，首先在 Idea 里面创建一个工程，初始化 Git 工程，然后将代码添加到暂存区，提交到本地库，这些步骤上面已经讲过，此处不再赘述。\n\n\n\n自定义远程库链接\n\n\n\n给远程库链接定义个 name，然后再 URL 里面填入码云远程库的 HTTPS 链接即可。码云服务器在国内，用 HTTPS 链接即可，没必要用 SSH 免密链接\n\n\n\n然后选择定义好的远程链接，点击 Push 即可\n\n\n\n看到提示就说明 Push 远程库成功。\n\n只要码云远程库链接定义好以后，对码云远程库进行 pull 和 clone 的操作和 Github 一致，此处不再赘述。\n\n\n# 码云复制GitHub项目\n\n码云提供了直接复制 GitHub 项目的功能，方便我们做项目的迁移和下载。\n\n具体操作如下：\n\n\n\n将 GitHub 的远程库 HTTPS 链接复制过来，点击创建按钮即可\n\n\n\n如果 GitHub 项目更新了以后，在码云项目端可以手动重新同步，进行更新\n\n\n\n",normalizedContent:"笔记\n\n实际开发上，我们更愿意利用图形化界面如 idea 来进行 git 的操作。\n\n2022-02-08 @村长\n\n\n\n * idea集成git\n   * 配置git忽略文件\n   * 定位git程序\n   * 初始化本地库\n   * 添加到暂存区\n   * 提交到本地库\n   * 切换版本\n   * 创建分支\n   * 切换分支\n   * 合并分支\n   * 解决冲突\n * idea集成github\n   * 设置github账号\n   * 分享工程到github\n   * 推送本地库到远程库\n   * 拉取远程库到本地库\n   * 克隆远程库到本地\n * idea集成gitee\n   * idea安装gitee插件\n   * 本地库推送到远程库\n   * 码云复制github项目\n\n\n\n\n# idea集成git\n\n\n# 配置git忽略文件\n\n有些文件如 .class、.war、.jar 等与项目的实际功能无关，不参与服务器上部署运行，那么我们需要忽略他们。\n\n忽略文件有两种：\n\n * 电脑全局忽略，即只要在本电脑创建的 git 项目，都会忽略特点文件\n * 项目局部忽略，即配置只有该项目的特点文件被忽略\n\n建议先配置电脑全局忽略，因为一些固定的文件是不需要上传 git 的，而局部忽略可以选择性得进行文件忽略。\n\n> 全局忽略\n\n创建忽略规则文件 xxxx.ignore（前缀名随便起，建议是 git.ignore）\n\n这个文件的存放位置原则上在哪里都可以，为了便于让 ~/.gitconfig 文件引用，建议也放在用户家目录下（c/users/用户名）。\n\n 1. git.ignore 文件模版内容如下：\n    \n    # compiled class file\n    *.class\n    \n    # log file\n    *.log\n    \n    # bluej files\n    *.ctxt\n    \n    # mobile tools for java (j2me)\n    .mtj.tmp/\n    \n    # package files #\n    *.jar\n    *.war\n    *.nar\n    *.ear\n    *.zip\n    *.tar.gz\n    *.rar\n    \n    # virtual machine crash logs, see \n    http://www.java.com/en/download/help/error_hotspot.xml\n    hs_err_pid*\n    .classpath\n    .project\n    .settings\n    target\n    .idea\n    *.iml\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    11\n    12\n    13\n    14\n    15\n    16\n    17\n    18\n    19\n    20\n    21\n    22\n    23\n    24\n    25\n    26\n    27\n    28\n    29\n    30\n    \n\n 2. 在 .gitconfig 文件中引用忽略配置文件（此文件在 windows 的家目录中）\n    \n    [user]\n    \tname = 【git config user.name 的用户名】\n    \temail = 【git config user.email 的邮箱】\n    [core]\n    \texcludesfile = c:/users/asus/git.ignore\n    \n    \n    1\n    2\n    3\n    4\n    5\n    \n    \n    注意：这里要使用正斜线（/），不要使用反斜线（\\）。\n\n> 局部忽略\n\n在项目的根目录下创建 .gitignore 文件，模板如下：\n\nhelp.md\ntarget/\n!.mvn/wrapper/maven-wrapper.jar\n!**/src/main/**/target/\n!**/src/test/**/target/\n\n### sts ###\n.apt_generated\n.classpath\n.factorypath\n.project\n.settings\n.springbeans\n.sts4-cache\n\n### intellij idea ###\n.idea\n*.iws\n*.iml\n*.ipr\n\n### netbeans ###\n/nbproject/private/\n/nbbuild/\n/dist/\n/nbdist/\n/.nb-gradle/\nbuild/\n!**/src/main/**/build/\n!**/src/test/**/build/\n\n### vs code ###\n.vscode/\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# 定位git程序\n\n\n\n\n# 初始化本地库\n\n\n\n选择要创建 git 本地仓库的工程\n\n\n\n\n# 添加到暂存区\n\n右键点击项目选择 git -> add 将项目添加到暂存区\n\n\n\n\n# 提交到本地库\n\n\n\n\n\n\n# 切换版本\n\n在 idea 的左下角，点击 version control（新版是 git），然后点击 log 查看版本\n\n\n\n右键选择要切换的版本，然后在菜单里点击 checkout revision\n\n\n\n\n# 创建分支\n\n选择 git，在 repository 里面，点击 branches 按钮\n\n\n\n在弹出的 git branches 框里，点击 new branch 按钮\n\n\n\n填写分支名称，创建 hot-fix 分支\n\n\n\n然后再 idea 的右下角看到 hot-fix，说明分支创建成功，并且当前已经切换成 hot-fix 分支\n\n\n\n\n# 切换分支\n\n在 idea 窗口的右下角，切换到 master 分支\n\n\n\n然后在 idea 窗口的右下角看到了 master，说明 master 分支切换成功\n\n\n\n\n# 合并分支\n\n在 idea 窗口的右下角，将 hot-fix 分支合并到当前 master 分支\n\n\n\n如果代码没有冲突，分支直接合并成功，分支合并成功以后，代码自动提交，无需手动提交本地库。\n\n\n# 解决冲突\n\n如图所示，如果 master 分支和 hot-fix 分支都修改了代码，在合并分支的时候就会发生冲突\n\n\n\n\n\n我们现在站在 master 分支上合并 hot-fix 分支，就会发生代码冲突\n\n\n\n点击 conflicts 框里的 merge 按钮，进行手动合并代码\n\n\n\n手动合并完代码以后，点击右下角的 apply 按钮\n\n\n\n代码冲突解决，自动提交本地库\n\n\n\n\n# idea集成github\n\n\n# 设置github账号\n\n\n\n如果出现 401 等情况连接不上的，是因为网络原因，可以使用以下方式连接：\n\n\n\n然后去 github 账户上设置 token\n\n\n\n\n\n\n\n\n\n点击生成 token\n\n\n\n复制红框中的字符串到 idea 中\n\n\n\n点击登录\n\n\n\n\n# 分享工程到github\n\n\n\n\n\n来到 github 中发现已经帮我们创建好了 gittest 的远程仓库\n\n\n\n\n# 推送本地库到远程库\n\n右键点击项目，可以将当前分支的内容 push 到 github 的远程仓库中\n\n\n\n\n\n\n\n\n\n\n\n注意：push 是将本地库代码推送到远程库，如果本地库代码跟远程库代码版本不一致，push 的操作是会被拒绝的。也就是说，要想 push 成功，一定要保证本地库的版本要比远程库的版本高。\n\n因此一个成熟的程序员在动手改本地代码之前，一定会先检查下远程库跟本地代码的区别。如果本地的代码版本已经落后，切记要先 pull 拉取一下远程库的代码，将本地代码更新到最新以后，然后再修改，提交，推送。\n\n\n# 拉取远程库到本地库\n\n右键点击项目，可以将远程仓库的内容 pull 到本地仓库\n\n\n\n\n\n注意：pull 是拉取远端仓库代码到本地，如果远程库代码和本地库代码不一致，会自动合并，如果自动合并失败，还会涉及到手动解决冲突的问题。\n\n\n# 克隆远程库到本地\n\n\n\n\n\n为 clone 下来的项目创建一个工程，然后点击 next\n\n\n\n\n\n\n\n\n\n\n# idea集成gitee\n\n众所周知，github 服务器在国外，使用 github 作为项目托管网站，如果网速不好的话，严重影响使用体验，甚至会出现登录不上的情况。针对这个情况，可以使用国内的项目托管网站：码云（gitee）。\n\n码云是开源中国推出的基于 git 的代码托管服务中心，网址是 https://gitee.com/，使用方式跟 github 一样，而且它还是一个中文网站，如果你英文不是很好它是最好的选择。\n\n\n# idea安装gitee插件\n\nidea 默认不带码云插件，我们第一步要安装 gitee 插件。\n\n如图所示，在 idea 插件商店搜索 gitee，然后点击右侧的 install 按钮。\n\n\n\nidea 链接码云和链接 github 几乎一样，安装成功后，重启 idea\n\n\n\nidea 重启以后在 version control 设置里面看到 gitee，说明码云插件安装成功\n\n\n\n然后在码云插件里面添加码云帐号，我们就可以用 idea 连接码云了\n\n\n\n\n# 本地库推送到远程库\n\nidea 连接码云和连接 github 几乎一样，首先在 idea 里面创建一个工程，初始化 git 工程，然后将代码添加到暂存区，提交到本地库，这些步骤上面已经讲过，此处不再赘述。\n\n\n\n自定义远程库链接\n\n\n\n给远程库链接定义个 name，然后再 url 里面填入码云远程库的 https 链接即可。码云服务器在国内，用 https 链接即可，没必要用 ssh 免密链接\n\n\n\n然后选择定义好的远程链接，点击 push 即可\n\n\n\n看到提示就说明 push 远程库成功。\n\n只要码云远程库链接定义好以后，对码云远程库进行 pull 和 clone 的操作和 github 一致，此处不再赘述。\n\n\n# 码云复制github项目\n\n码云提供了直接复制 github 项目的功能，方便我们做项目的迁移和下载。\n\n具体操作如下：\n\n\n\n将 github 的远程库 https 链接复制过来，点击创建按钮即可\n\n\n\n如果 github 项目更新了以后，在码云项目端可以手动重新同步，进行更新\n\n\n\n",charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"Git - 自建代码托管平台",frontmatter:{title:"Git - 自建代码托管平台",date:"2022-02-08T18:52:23.000Z",permalink:"/git/built-code-platform/",categories:["Git"],tags:["Git"],readingShow:"top"},regularPath:"/40.%E5%B7%A5%E5%85%B7/20.%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86%20-%20Git/11.Git%20-%20%E8%87%AA%E5%BB%BA%E4%BB%A3%E7%A0%81%E6%89%98%E7%AE%A1%E5%B9%B3%E5%8F%B0.html",relativePath:"40.工具/20.开发管理 - Git/11.Git - 自建代码托管平台.md",key:"v-766563ae",path:"/git/built-code-platform/",headers:[{level:2,title:"GitLab简介",slug:"gitlab简介",normalizedTitle:"gitlab简介",charIndex:101},{level:2,title:"GitLab安装",slug:"gitlab安装",normalizedTitle:"gitlab安装",charIndex:113},{level:3,title:"服务器准备",slug:"服务器准备",normalizedTitle:"服务器准备",charIndex:127},{level:3,title:"安装包准备",slug:"安装包准备",normalizedTitle:"安装包准备",charIndex:138},{level:3,title:"编写安装脚本",slug:"编写安装脚本",normalizedTitle:"编写安装脚本",charIndex:149},{level:2,title:"GitLab使用",slug:"gitlab使用",normalizedTitle:"gitlab使用",charIndex:159},{level:3,title:"初始化GitLab服务",slug:"初始化gitlab服务",normalizedTitle:"初始化gitlab服务",charIndex:173},{level:3,title:"启动GitLab服务",slug:"启动gitlab服务",normalizedTitle:"启动gitlab服务",charIndex:190},{level:3,title:"使用浏览器访问GitLab",slug:"使用浏览器访问gitlab",normalizedTitle:"使用浏览器访问gitlab",charIndex:206},{level:3,title:"GitLab创建远程库",slug:"gitlab创建远程库",normalizedTitle:"gitlab创建远程库",charIndex:225},{level:2,title:"IDEA集成GitLab",slug:"idea集成gitlab",normalizedTitle:"idea集成gitlab",charIndex:240},{level:3,title:"安装GitLab插件",slug:"安装gitlab插件",normalizedTitle:"安装gitlab插件",charIndex:258}],headersStr:"GitLab简介 GitLab安装 服务器准备 安装包准备 编写安装脚本 GitLab使用 初始化GitLab服务 启动GitLab服务 使用浏览器访问GitLab GitLab创建远程库 IDEA集成GitLab 安装GitLab插件",content:'笔记\n\nGitHub 或 Gitee 平台的私有库只能免费 5 个人，当公司里多人开发一个项目，又不希望公开出去，那么就可以自建代码托管平台：GitLab。\n\n2022-02-08 @村长\n\n\n\n * GitLab简介\n * GitLab安装\n   * 服务器准备\n   * 安装包准备\n   * 编写安装脚本\n * GitLab使用\n   * 初始化GitLab服务\n   * 启动GitLab服务\n   * 使用浏览器访问GitLab\n   * GitLab创建远程库\n * IDEA集成GitLab\n   * 安装GitLab插件\n\n\n\n\n# GitLab简介\n\nGitLab 是由 GitLabInc 开发，使用 MIT 许可证的基于网络的 Git 仓库管理工具，且具有 wiki 和 issue 跟踪功能。使用 Git 作为代码管理工具，并在此基础上搭建起来的 web 服务。\n\nGitLab 由乌克兰程序员 DmitriyZaporozhets 和 ValerySizov 开发，它使用 Ruby 语言写成。后来，一些部分用 Go 语言重写。截止 2018 年 5 月，该公司约有 290 名团队成员，以及 2000 多名开源贡献者。GitLab 被 IBM，Sony，JülichResearchCenter，NASA，Alibaba，Invincea，O’ReillyMedia，Leibniz-Rechenzentrum(LRZ)，CERN，SpaceX 等组织使用。\n\n> 官网地址：https://about.gitlab.com/\n> \n> 安装说明：https://about.gitlab.com/installation/\n\n\n# GitLab安装\n\n\n# 服务器准备\n\n准备一个系统为 CentOS7 以上版本的服务器，要求内存 4G，磁盘 50G。\n\n关闭防火墙，并且配置好主机名和 IP，保证服务器可以上网。\n\n本内容使用虚拟机：\n\n * 主机名：gitlab-server\n\n * IP 地址：192.168.6.200\n\n\n# 安装包准备\n\nYum 在线安装 gitlab- ce 时，需要下载几百 M 的安装文件，非常耗时，所以最好提前把所需 RPM 包下载到本地，然后使用离线 rpm 的方式安装。\n\n> 下载地址：https://packages.gitlab.com/gitlab/gitlab-ce/packages/el/7/gitlab-ce-13.10.2-ce.0.el7.x86_64.rpm\n\n\n# 编写安装脚本\n\n安装 GitLab 步骤比较繁琐，因此我们可以参考官网编写 GitLab 的安装脚本\n\nvim gitlab-install.sh\n# 内容\nsudo rpm -ivh /opt/module/gitlab-ce-13.10.2-ce.0.el7.x86_64.rpm\nsudo yum install -y curl policycoreutils-python openssh-server cronie\nsudo lokkit -s http -s ssh\nsudo yum install -y postfix\nsudo service postfix start\nsudo chkconfig postfix on\ncurl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash\nsudo EXTERNAL_URL="http://gitlab.example.com" yum -y install gitlab-ce\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n给脚本增加执行权限\n\nchmod +x gitlab-install.sh\n\n\n1\n\n\n然后执行该脚本，开始安装 gitlab-ce。注意一定要保证服务器可以上网\n\n./gitlab-install.sh\n\n\n1\n\n\n\n# GitLab使用\n\n\n# 初始化GitLab服务\n\n执行以下命令初始化 GitLab 服务，过程大概需要几分钟，耐心等待 ...\n\ngitlab-ctl reconfigure\n\n\n1\n\n\n\n# 启动GitLab服务\n\n执行 itlab-ctl stop 命令启动 GitLab 服务，如需停止，执行 gitlab-ctl stop 命令\n\ngitlab-ctl start  # 开启服务\n\ngitlab-ctl stop # 停止服务\n\n\n1\n2\n3\n\n\n\n# 使用浏览器访问GitLab\n\n使用主机名或者 IP 地址即可访问 GitLab 服务。如果使用主机名访问，则需要提前配一下 Windows 的 hosts 文件\n\n\n\n\n\n或者通过 IP 地址访问\n\n\n\n首次登陆之前，需要修改下 GitLab 提供的 root 账户的密码，要求 8 位以上，包含大小写子母和特殊符号。\n\n然后使用修改后的密码登录 GitLab\n\n\n\nGitLab 登录成功\n\n\n\n\n# GitLab创建远程库\n\n\n\n\n\n\n\n\n# IDEA集成GitLab\n\n\n# 安装GitLab插件\n\n\n\n设置 GitLab 插件\n\n\n\n\n\n\n\npush 本地代码到 GitLab 远程库\n\n\n\n自定义远程连接\n\n\n\n注意：GitLab 网页上复制过来的连接是：http://gitlab.example.com/root/git-test.git，需要手动修改为：http://gitlab-server/root/git-test.git。\n\n选择 GitLab 远程连接，进行 push\n\n\n\n首次向连接 GitLab，需要登录帐号和密码，用 root 帐号和我们修改的密码登录即可\n\n\n\n代码 push 成功\n\n\n\n只要 GitLab 的远程库连接定义好以后，对 GitLab 远程库进行 pull 和 clone 的操作和 Github 和码云一致，此处不再赘述。',normalizedContent:'笔记\n\ngithub 或 gitee 平台的私有库只能免费 5 个人，当公司里多人开发一个项目，又不希望公开出去，那么就可以自建代码托管平台：gitlab。\n\n2022-02-08 @村长\n\n\n\n * gitlab简介\n * gitlab安装\n   * 服务器准备\n   * 安装包准备\n   * 编写安装脚本\n * gitlab使用\n   * 初始化gitlab服务\n   * 启动gitlab服务\n   * 使用浏览器访问gitlab\n   * gitlab创建远程库\n * idea集成gitlab\n   * 安装gitlab插件\n\n\n\n\n# gitlab简介\n\ngitlab 是由 gitlabinc 开发，使用 mit 许可证的基于网络的 git 仓库管理工具，且具有 wiki 和 issue 跟踪功能。使用 git 作为代码管理工具，并在此基础上搭建起来的 web 服务。\n\ngitlab 由乌克兰程序员 dmitriyzaporozhets 和 valerysizov 开发，它使用 ruby 语言写成。后来，一些部分用 go 语言重写。截止 2018 年 5 月，该公司约有 290 名团队成员，以及 2000 多名开源贡献者。gitlab 被 ibm，sony，julichresearchcenter，nasa，alibaba，invincea，o’reillymedia，leibniz-rechenzentrum(lrz)，cern，spacex 等组织使用。\n\n> 官网地址：https://about.gitlab.com/\n> \n> 安装说明：https://about.gitlab.com/installation/\n\n\n# gitlab安装\n\n\n# 服务器准备\n\n准备一个系统为 centos7 以上版本的服务器，要求内存 4g，磁盘 50g。\n\n关闭防火墙，并且配置好主机名和 ip，保证服务器可以上网。\n\n本内容使用虚拟机：\n\n * 主机名：gitlab-server\n\n * ip 地址：192.168.6.200\n\n\n# 安装包准备\n\nyum 在线安装 gitlab- ce 时，需要下载几百 m 的安装文件，非常耗时，所以最好提前把所需 rpm 包下载到本地，然后使用离线 rpm 的方式安装。\n\n> 下载地址：https://packages.gitlab.com/gitlab/gitlab-ce/packages/el/7/gitlab-ce-13.10.2-ce.0.el7.x86_64.rpm\n\n\n# 编写安装脚本\n\n安装 gitlab 步骤比较繁琐，因此我们可以参考官网编写 gitlab 的安装脚本\n\nvim gitlab-install.sh\n# 内容\nsudo rpm -ivh /opt/module/gitlab-ce-13.10.2-ce.0.el7.x86_64.rpm\nsudo yum install -y curl policycoreutils-python openssh-server cronie\nsudo lokkit -s http -s ssh\nsudo yum install -y postfix\nsudo service postfix start\nsudo chkconfig postfix on\ncurl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash\nsudo external_url="http://gitlab.example.com" yum -y install gitlab-ce\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n给脚本增加执行权限\n\nchmod +x gitlab-install.sh\n\n\n1\n\n\n然后执行该脚本，开始安装 gitlab-ce。注意一定要保证服务器可以上网\n\n./gitlab-install.sh\n\n\n1\n\n\n\n# gitlab使用\n\n\n# 初始化gitlab服务\n\n执行以下命令初始化 gitlab 服务，过程大概需要几分钟，耐心等待 ...\n\ngitlab-ctl reconfigure\n\n\n1\n\n\n\n# 启动gitlab服务\n\n执行 itlab-ctl stop 命令启动 gitlab 服务，如需停止，执行 gitlab-ctl stop 命令\n\ngitlab-ctl start  # 开启服务\n\ngitlab-ctl stop # 停止服务\n\n\n1\n2\n3\n\n\n\n# 使用浏览器访问gitlab\n\n使用主机名或者 ip 地址即可访问 gitlab 服务。如果使用主机名访问，则需要提前配一下 windows 的 hosts 文件\n\n\n\n\n\n或者通过 ip 地址访问\n\n\n\n首次登陆之前，需要修改下 gitlab 提供的 root 账户的密码，要求 8 位以上，包含大小写子母和特殊符号。\n\n然后使用修改后的密码登录 gitlab\n\n\n\ngitlab 登录成功\n\n\n\n\n# gitlab创建远程库\n\n\n\n\n\n\n\n\n# idea集成gitlab\n\n\n# 安装gitlab插件\n\n\n\n设置 gitlab 插件\n\n\n\n\n\n\n\npush 本地代码到 gitlab 远程库\n\n\n\n自定义远程连接\n\n\n\n注意：gitlab 网页上复制过来的连接是：http://gitlab.example.com/root/git-test.git，需要手动修改为：http://gitlab-server/root/git-test.git。\n\n选择 gitlab 远程连接，进行 push\n\n\n\n首次向连接 gitlab，需要登录帐号和密码，用 root 帐号和我们修改的密码登录即可\n\n\n\n代码 push 成功\n\n\n\n只要 gitlab 的远程库连接定义好以后，对 gitlab 远程库进行 pull 和 clone 的操作和 github 和码云一致，此处不再赘述。',charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"Git - Commit常用表情",frontmatter:{title:"Git - Commit常用表情",date:"2022-02-08T21:15:54.000Z",permalink:"/git/commit-emo/",categories:["Git"],tags:["Git"],readingShow:"top"},regularPath:"/40.%E5%B7%A5%E5%85%B7/20.%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86%20-%20Git/15.Git%20-%20Commit%E5%B8%B8%E7%94%A8%E8%A1%A8%E6%83%85.html",relativePath:"40.工具/20.开发管理 - Git/15.Git - Commit常用表情.md",key:"v-67e2039b",path:"/git/commit-emo/",headers:[{level:2,title:"Git常用表情",slug:"git常用表情",normalizedTitle:"git常用表情",charIndex:68},{level:2,title:"MarkDown 常用表情",slug:"markdown-常用表情",normalizedTitle:"markdown 常用表情",charIndex:79},{level:3,title:"People",slug:"people",normalizedTitle:"people",charIndex:98},{level:3,title:"Nature",slug:"nature",normalizedTitle:"nature",charIndex:110},{level:3,title:"Objects",slug:"objects",normalizedTitle:"objects",charIndex:122},{level:3,title:"Places",slug:"places",normalizedTitle:"places",charIndex:135},{level:3,title:"Symbols",slug:"symbols",normalizedTitle:"symbols",charIndex:147},{level:2,title:"参考链接",slug:"参考链接",normalizedTitle:"参考链接",charIndex:158}],headersStr:"Git常用表情 MarkDown 常用表情 People Nature Objects Places Symbols 参考链接",content:"笔记\n\nGit commit 的时候，添加表情符号可以更好的表明本次提交的性质，也更有趣。\n\n2022-02-08 @村长\n\n\n\n * Git常用表情\n * MarkDown 常用表情\n   * People\n   * Nature\n   * Objects\n   * Places\n   * Symbols\n * 参考链接\n\n\n\n\n# Git常用表情\n\nGit commit 的时候，添加表情符号可以更好的表明本次提交的性质，也更有趣。\n\n常用表情符号如下：\n\nEMOJI        EMOJI代码                      COMMIT说明\n🎨 (调色板)     :art:                        改进代码结构/代码格式\n⚡️ (闪电)      :zap:                        提升性能\n🐎 (赛马)      :racehorse:                  提升性能\n🔥 (火焰)      :fire:                       移除代码或文件\n🐛 (bug)     :bug:                        修复 bug\n🚑 (急救车)     :ambulance:                  重要补丁\n✨ (火花)       :sparkles:                   引入新功能\n📝 (铅笔)      :pencil:                     撰写文档\n🚀 (火箭)      :rocket:                     部署功能\n💄 (口红)      :lipstick:                   更新 UI 和样式文件\n🎉 (庆祝)      :tada:                       初次提交\n✅ (白色复选框)    :white_check_mark:           增加测试\n🔒 (锁)       :lock:                       修复安全问题\n🍎 (苹果)      :apple:                      修复 macOS 下的问题\n🐧 (企鹅)      :penguin:                    修复 Linux 下的问题\n🏁 (旗帜)      :checked_flag:               修复 Windows 下的问题\n🔖 (书签)      :bookmark:                   发行/版本标签\n🚨 (警车灯)     :rotating_light:             移除 linter 警告\n🚧 (施工)      :construction:               工作进行中\n💚 (绿心)      :green_heart:                修复 CI 构建问题\n⬇️ (下降箭头)    :arrow_down:                 降级依赖\n⬆️ (上升箭头)    :arrow_up:                   升级依赖\n👷 (工人)      :construction_worker:        添加 CI 构建系统\n📈 (上升趋势图)   :chart_with_upwards_trend:   添加分析或跟踪代码\n🔨 (锤子)      :hammer:                     重大重构\n➖ (减号)       :heavy_minus_sign:           减少一个依赖\n🐳 (鲸鱼)      :whale:                      Docker 相关工作\n➕ (加号)       :heavy_plus_sign:            增加一个依赖\n🔧 (扳手)      :wrench:                     修改配置文件\n🌐 (地球)      :globe_with_meridians:       国际化与本地化\n✏️ (铅笔)      :pencil2:                    修复 typo\n\n\n# MarkDown 常用表情\n\n\n# People\n\n😄 :SMILE:                          😆 :LAUGHING:                       \n😊 :blush:                          😃 :smiley:                         ☺️ :relaxed:\n😏 :smirk:                          😍 :heart_eyes:                     😘 :kissing_heart:\n😚 :kissing_closed_eyes:            😳 :flushed:                        😌 :relieved:\n😆 :satisfied:                      😁 :grin:                           😉 :wink:\n😜 :stuck_out_tongue_winking_eye:   😝 :stuck_out_tongue_closed_eyes:   😀 :grinning:\n😗 :kissing:                        😙 :kissing_smiling_eyes:           😛 :stuck_out_tongue:\n😴 :sleeping:                       😟 :worried:                        😦 :frowning:\n😧 :anguished:                      😮 :open_mouth:                     😬 :grimacing:\n😕 :confused:                       😯 :hushed:                         😑 :expressionless:\n😒 :unamused:                       😅 :sweat_smile:                    😓 :sweat:\n😥 :disappointed_relieved:          😩 :weary:                          😔 :pensive:\n😞 :disappointed:                   😖 :confounded:                     😨 :fearful:\n😰 :cold_sweat:                     😣 :persevere:                      😢 :cry:\n😭 :sob:                            😂 :joy:                            😲 :astonished:\n😱 :scream:                         👿 :imp:                            😫 :tired_face:\n😠 :angry:                          😡 :rage:                           😤 :triumph:\n😪 :sleepy:                         😋 :yum:                            😷 :mask:\n😎 :sunglasses:                     😵 :dizzy_face:                     \n\n                                                               \n😈 :smiling_imp:                😐 :neutral_face:              😶 :no_mouth:\n😇 :innocent:                   👽 :alien:                     💛 :yellow_heart:\n💙 :blue_heart:                 💜 :purple_heart:              ❤️ :heart:\n💚 :green_heart:                💔 :broken_heart:              💓 :heartbeat:\n💗 :heartpulse:                 💕 :two_hearts:                💞 :revolving_hearts:\n💘 :cupid:                      💖 :sparkling_heart:           ✨ :sparkles:\n⭐️ :star:                       🌟 :star2:                     💫 :dizzy:\n💥 :boom:                       💥 :collision:                 💢 :anger:\n❗️ :exclamation:                ❓ :question:                   ❕ :grey_exclamation:\n❔ :grey_question:               💤 :zzz:                       💨 :dash:\n💦 :sweat_drops:                🎶 :notes:                     🎵 :musical_note:\n🔥 :fire:                       💩 :hankey:                    💩 :poop:\n💩 :shit:                       👍 :+1:                        👍 :thumbsup:\n👎 :-1:                         👎 :thumbsdown:                👌 :ok_hand:\n👊 :punch:                      👊 :facepunch:                 ✊ :fist:\n✌️ :v:                          👋 :wave:                      ✋ :hand:\n✋ :raised_hand:                 👐 :open_hands:                ☝️ :point_up:\n👇 :point_down:                 👈 :point_left:                👉 :point_right:\n🙌 :raised_hands:               🙏 :pray:                      👆 :point_up_2:\n👏 :clap:                       💪 :muscle:                    🤘 :metal:\n🖕 :fu:                         🚶 :walking:                   🏃 :runner:\n🏃 :running:                    👫 :couple:                    👪 :family:\n👬 :two_men_holding_hands:      👭 :two_women_holding_hands:   💃 :dancer:\n👯 :dancers:                    🙆 :ok_woman:                  🙅 :no_good:\n💁 :information_desk_person:    🙋 :raising_hand:              👰 :bride_with_veil:\n🙎 :person_with_pouting_face:   🙍 :person_frowning:           🙇 :bow:\n💏 :couplekiss:                 💑 :couple_with_heart:         💆 :massage:\n💇 :haircut:                    💅 :nail_care:                 👦 :boy:\n👧 :girl:                       👩 :woman:                     👨 :man:\n👶 :baby:                       👵 :older_woman:               👴 :older_man:\n👱 :person_with_blond_hair:     👲 :man_with_gua_pi_mao:       👳 :man_with_turban:\n👷 :construction_worker:        👮 :cop:                       👼 :angel:\n👸 :princess:                   😺 :smiley_cat:                😸 :smile_cat:\n😻 :heart_eyes_cat:             😽 :kissing_cat:               😼 :smirk_cat:\n🙀 :scream_cat:                 😿 :crying_cat_face:           😹 :joy_cat:\n😾 :pouting_cat:                👹 :japanese_ogre:             👺 :japanese_goblin:\n🙈 :see_no_evil:                🙉 :hear_no_evil:              🙊 :speak_no_evil:\n💂 :guardsman:                  💀 :skull:                     🐾 :feet:\n👄 :lips:                       💋 :kiss:                      💧 :droplet:\n👂 :ear:                        👀 :eyes:                      👃 :nose:\n👅 :tongue:                     💌 :love_letter:               👤 :bust_in_silhouette:\n👥 :busts_in_silhouette:        💬 :speech_balloon:            💭 :thought_balloon:\n\n\n# Nature\n\n☀️ :SUNNY:                          ☔️ :UMBRELLA:               ☁️ :CLOUD:\n❄️ :snowflake:                      ⛄️ :snowman:                ⚡️ :zap:\n🌀 :cyclone:                        🌁 :foggy:                  🌊 :ocean:\n🐱 :cat:                            🐶 :dog:                    🐭 :mouse:\n🐹 :hamster:                        🐰 :rabbit:                 🐺 :wolf:\n🐸 :frog:                           🐯 :tiger:                  🐨 :koala:\n🐻 :bear:                           🐷 :pig:                    🐽 :pig_nose:\n🐮 :cow:                            🐗 :boar:                   🐵 :monkey_face:\n🐒 :monkey:                         🐴 :horse:                  🐎 :racehorse:\n🐫 :camel:                          🐑 :sheep:                  🐘 :elephant:\n🐼 :panda_face:                     🐍 :snake:                  🐦 :bird:\n🐤 :baby_chick:                     🐥 :hatched_chick:          🐣 :hatching_chick:\n🐔 :chicken:                        🐧 :penguin:                🐢 :turtle:\n🐛 :bug:                            🐝 :honeybee:               🐜 :ant:\n🐞 :beetle:                         🐌 :snail:                  🐙 :octopus:\n🐠 :tropical_fish:                  🐟 :fish:                   🐳 :whale:\n🐋 :whale2:                         🐬 :dolphin:                🐄 :cow2:\n🐏 :ram:                            🐀 :rat:                    🐃 :water_buffalo:\n🐅 :tiger2:                         🐇 :rabbit2:                🐉 :dragon:\n🐐 :goat:                           🐓 :rooster:                🐕 :dog2:\n🐖 :pig2:                           🐁 :mouse2:                 🐂 :ox:\n🐲 :dragon_face:                    🐡 :blowfish:               🐊 :crocodile:\n🐪 :dromedary_camel:                🐆 :leopard:                🐈 :cat2:\n🐩 :poodle:                         🐾 :paw_prints:             💐 :bouquet:\n🌸 :cherry_blossom:                 🌷 :tulip:                  🍀 :four_leaf_clover:\n🌹 :rose:                           🌻 :sunflower:              🌺 :hibiscus:\n🍁 :maple_leaf:                     🍃 :leaves:                 🍂 :fallen_leaf:\n🌿 :herb:                           🍄 :mushroom:               🌵 :cactus:\n🌴 :palm_tree:                      🌲 :evergreen_tree:         🌳 :deciduous_tree:\n🌰 :chestnut:                       🌱 :seedling:               🌼 :blossom:\n🌾 :ear_of_rice:                    🐚 :shell:                  🌐 :globe_with_meridians:\n🌞 :sun_with_face:                  🌝 :full_moon_with_face:    🌚 :new_moon_with_face:\n🌑 :new_moon:                       🌒 :waxing_crescent_moon:   🌓 :first_quarter_moon:\n🌔 :waxing_gibbous_moon:            🌕 :full_moon:              🌖 :waning_gibbous_moon:\n🌗 :last_quarter_moon:              🌘 :waning_crescent_moon:   🌜 :last_quarter_moon_with_face:\n🌛 :first_quarter_moon_with_face:   🌔 :moon:                   🌍 :earth_africa:\n🌎 :earth_americas:                 🌏 :earth_asia:             🌋 :volcano:\n🌌 :milky_way:                      ⛅️ :partly_sunny:           \n\n\n# Objects\n\n🎍 :BAMBOO:                           💝 :GIFT_HEART:                   🎎 :DOLLS:\n🎒 :school_satchel:                   🎓 :mortar_board:                 🎏 :flags:\n🎆 :fireworks:                        🎇 :sparkler:                     🎐 :wind_chime:\n🎑 :rice_scene:                       🎃 :jack_o_lantern:               👻 :ghost:\n🎅 :santa:                            🎄 :christmas_tree:               🎁 :gift:\n🔔 :bell:                             🔕 :no_bell:                      🎋 :tanabata_tree:\n🎉 :tada:                             🎊 :confetti_ball:                🎈 :balloon:\n🔮 :crystal_ball:                     💿 :cd:                           📀 :dvd:\n💾 :floppy_disk:                      📷 :camera:                       📹 :video_camera:\n🎥 :movie_camera:                     💻 :computer:                     📺 :tv:\n📱 :iphone:                           ☎️ :phone:                        ☎️ :telephone:\n📞 :telephone_receiver:               📟 :pager:                        📠 :fax:\n💽 :minidisc:                         📼 :vhs:                          🔉 :sound:\n🔈 :speaker:                          🔇 :mute:                         📢 :loudspeaker:\n📣 :mega:                             ⌛️ :hourglass:                    ⏳ :hourglass_flowing_sand:\n⏰ :alarm_clock:                       ⌚️ :watch:                        📻 :radio:\n📡 :satellite:                        ➿ :loop:                          🔍 :mag:\n🔎 :mag_right:                        🔓 :unlock:                       🔒 :lock:\n🔏 :lock_with_ink_pen:                🔐 :closed_lock_with_key:         🔑 :key:\n💡 :bulb:                             🔦 :flashlight:                   🔆 :high_brightness:\n🔅 :low_brightness:                   🔌 :electric_plug:                🔋 :battery:\n📲 :calling:                          ✉️ :email:                        📫 :mailbox:\n📮 :postbox:                          🛀 :bath:                         🛁 :bathtub:\n🚿 :shower:                           🚽 :toilet:                       🔧 :wrench:\n🔩 :nut_and_bolt:                     🔨 :hammer:                       💺 :seat:\n💰 :moneybag:                         💴 :yen:                          💵 :dollar:\n💷 :pound:                            💶 :euro:                         💳 :credit_card:\n💸 :money_with_wings:                 📧 :e-mail:                       📥 :inbox_tray:\n📤 :outbox_tray:                      ✉️ :envelope:                     📨 :incoming_envelope:\n📯 :postal_horn:                      📪 :mailbox_closed:               📬 :mailbox_with_mail:\n📭 :mailbox_with_no_mail:             🚪 :door:                         🚬 :smoking:\n💣 :bomb:                             🔫 :gun:                          🔪 :hocho:\n💊 :pill:                             💉 :syringe:                      📄 :page_facing_up:\n📃 :page_with_curl:                   📑 :bookmark_tabs:                📊 :bar_chart:\n📈 :chart_with_upwards_trend:         📉 :chart_with_downwards_trend:   📜 :scroll:\n📋 :clipboard:                        📆 :calendar:                     📅 :date:\n📇 :card_index:                       📁 :file_folder:                  📂 :open_file_folder:\n✂️ :scissors:                         📌 :pushpin:                      📎 :paperclip:\n✒️ :black_nib:                        ✏️ :pencil2:                      📏 :straight_ruler:\n📐 :triangular_ruler:                 📕 :closed_book:                  📗 :green_book:\n📘 :blue_book:                        📙 :orange_book:                  📓 :notebook:\n📔 :notebook_with_decorative_cover:   📒 :ledger:                       📚 :books:\n🔖 :bookmark:                         📛 :name_badge:                   🔬 :microscope:\n🔭 :telescope:                        📰 :newspaper:                    🏈 :football:\n🏀 :basketball:                       ⚽️ :soccer:                       ⚾️ :baseball:\n🎾 :tennis:                           🎱 :8ball:                        🏉 :rugby_football:\n🎳 :bowling:                          ⛳️ :golf:                         🚵 :mountain_bicyclist:\n🚴 :bicyclist:                        🏇 :horse_racing:                 🏂 :snowboarder:\n🏊 :swimmer:                          🏄 :surfer:                       🎿 :ski:\n♠️ :spades:                           ♥️ :hearts:                       ♣️ :clubs:\n♦️ :diamonds:                         💎 :gem:                          💍 :ring:\n🏆 :trophy:                           🎼 :musical_score:                🎹 :musical_keyboard:\n🎻 :violin:                           👾 :space_invader:                🎮 :video_game:\n🃏 :black_joker:                      🎴 :flower_playing_cards:         🎲 :game_die:\n🎯 :dart:                             🀄️ :mahjong:                     🎬 :clapper:\n📝 :memo:                             📝 :pencil:                       📖 :book:\n🎨 :art:                              🎤 :microphone:                   🎧 :headphones:\n🎺 :trumpet:                          🎷 :saxophone:                    🎸 :guitar:\n👞 :shoe:                             👡 :sandal:                       👠 :high_heel:\n💄 :lipstick:                         👢 :boot:                         👕 :shirt:\n👕 :tshirt:                           👔 :necktie:                      👚 :womans_clothes:\n👗 :dress:                            🎽 :running_shirt_with_sash:      👖 :jeans:\n👘 :kimono:                           👙 :bikini:                       🎀 :ribbon:\n🎩 :tophat:                           👑 :crown:                        👒 :womans_hat:\n👞 :mans_shoe:                        🌂 :closed_umbrella:              💼 :briefcase:\n👜 :handbag:                          👝 :pouch:                        👛 :purse:\n👓 :eyeglasses:                       🎣 :fishing_pole_and_fish:        ☕️ :coffee:\n🍵 :tea:                              🍶 :sake:                         🍼 :baby_bottle:\n🍺 :beer:                             🍻 :beers:                        🍸 :cocktail:\n🍹 :tropical_drink:                   🍷 :wine_glass:                   🍴 :fork_and_knife:\n🍕 :pizza:                            🍔 :hamburger:                    🍟 :fries:\n🍗 :poultry_leg:                      🍖 :meat_on_bone:                 🍝 :spaghetti:\n🍛 :curry:                            🍤 :fried_shrimp:                 🍱 :bento:\n🍣 :sushi:                            🍥 :fish_cake:                    🍙 :rice_ball:\n🍘 :rice_cracker:                     🍚 :rice:                         🍜 :ramen:\n🍲 :stew:                             🍢 :oden:                         🍡 :dango:\n🥚 :egg:                              🍞 :bread:                        🍩 :doughnut:\n🍮 :custard:                          🍦 :icecream:                     🍨 :ice_cream:\n🍧 :shaved_ice:                       🎂 :birthday:                     🍰 :cake:\n🍪 :cookie:                           🍫 :chocolate_bar:                🍬 :candy:\n🍭 :lollipop:                         🍯 :honey_pot:                    🍎 :apple:\n🍏 :green_apple:                      🍊 :tangerine:                    🍋 :lemon:\n🍒 :cherries:                         🍇 :grapes:                       🍉 :watermelon:\n🍓 :strawberry:                       🍑 :peach:                        🍈 :melon:\n🍌 :banana:                           🍐 :pear:                         🍍 :pineapple:\n🍠 :sweet_potato:                     🍆 :eggplant:                     🍅 :tomato:\n🌽 :corn:                                                               \n\n\n# Places\n\n🏠 :HOUSE:                 🏡 :HOUSE_WITH_GARDEN:         🏫 :SCHOOL:\n🏢 :office:                🏣 :post_office:               🏥 :hospital:\n🏦 :bank:                  🏪 :convenience_store:         🏩 :love_hotel:\n🏨 :hotel:                 💒 :wedding:                   ⛪️ :church:\n🏬 :department_store:      🏤 :european_post_office:      🌇 :city_sunrise:\n🌆 :city_sunset:           🏯 :japanese_castle:           🏰 :european_castle:\n⛺️ :tent:                  🏭 :factory:                   🗼 :tokyo_tower:\n🗾 :japan:                 🗻 :mount_fuji:                🌄 :sunrise_over_mountains:\n🌅 :sunrise:               🌠 :stars:                     🗽 :statue_of_liberty:\n🌉 :bridge_at_night:       🎠 :carousel_horse:            🌈 :rainbow:\n🎡 :ferris_wheel:          ⛲️ :fountain:                  🎢 :roller_coaster:\n🚢 :ship:                  🚤 :speedboat:                 ⛵️ :boat:\n⛵️ :sailboat:              🚣 :rowboat:                   ⚓️ :anchor:\n🚀 :rocket:                ✈️ :airplane:                  🚁 :helicopter:\n🚂 :steam_locomotive:      🚊 :tram:                      🚞 :mountain_railway:\n🚲 :bike:                  🚡 :aerial_tramway:            🚟 :suspension_railway:\n🚠 :mountain_cableway:     🚜 :tractor:                   🚙 :blue_car:\n🚘 :oncoming_automobile:   🚗 :car:                       🚗 :red_car:\n🚕 :taxi:                  🚖 :oncoming_taxi:             🚛 :articulated_lorry:\n🚌 :bus:                   🚍 :oncoming_bus:              🚨 :rotating_light:\n🚓 :police_car:            🚔 :oncoming_police_car:       🚒 :fire_engine:\n🚑 :ambulance:             🚐 :minibus:                   🚚 :truck:\n🚋 :train:                 🚉 :station:                   🚆 :train2:\n🚅 :bullettrain_front:     🚄 :bullettrain_side:          🚈 :light_rail:\n🚝 :monorail:              🚃 :railway_car:               🚎 :trolleybus:\n🎫 :ticket:                ⛽️ :fuelpump:                  🚦 :vertical_traffic_light:\n🚥 :traffic_light:         ⚠️ :warning:                   🚧 :construction:\n🔰 :beginner:              🏧 :atm:                       🎰 :slot_machine:\n🚏 :busstop:               💈 :barber:                    ♨️ :hotsprings:\n🏁 :checkered_flag:        🎌 :crossed_flags:             🏮 :izakaya_lantern:\n🗿 :moyai:                 🎪 :circus_tent:               🎭 :performing_arts:\n📍 :round_pushpin:         🚩 :triangular_flag_on_post:   🇯🇵 :jp:\n🇰🇷 :kr:                  🇨🇳 :cn:                      🇺🇸 :us:\n🇫🇷 :fr:                  🇪🇸 :es:                      🇮🇹 :it:\n🇷🇺 :ru:                  🇬🇧 :gb:                      🇬🇧 :uk:\n🇩🇪 :de:                                                 \n\n\n# Symbols\n\n1️⃣ :ONE:                             2️⃣ :TWO:                        3️⃣ :THREE:\n4️⃣ :four:                            5️⃣ :five:                       6️⃣ :six:\n7️⃣ :seven:                           8️⃣ :eight:                      9️⃣ :nine:\n🔟 :keycap_ten:                       🔢 :1234:                        0️⃣ :zero:\n#️⃣ :hash:                            🔣 :symbols:                     ◀️ :arrow_backward:\n⬇️ :arrow_down:                       ▶️ :arrow_forward:               ⬅️ :arrow_left:\n🔠 :capital_abcd:                     🔡 :abcd:                        🔤 :abc:\n↙️ :arrow_lower_left:                 ↘️ :arrow_lower_right:           ➡️ :arrow_right:\n⬆️ :arrow_up:                         ↖️ :arrow_upper_left:            ↗️ :arrow_upper_right:\n⏬ :arrow_double_down:                 ⏫ :arrow_double_up:              🔽 :arrow_down_small:\n⤵️ :arrow_heading_down:               ⤴️ :arrow_heading_up:            ↩️:leftwards_arrow_with_hook:\n↪️ :arrow_right_hook:                 ↔️ :left_right_arrow:            ↕️ :arrow_up_down:\n🔼 :arrow_up_small:                   🔃 :arrows_clockwise:            🔄 :arrows_counterclockwise:\n⏪ :rewind:                            ⏩ :fast_forward:                 ℹ️ :information_source:\n🆗 :ok:                               🔀 :twisted_rightwards_arrows:   🔁 :repeat:\n🔂 :repeat_one:                       🆕 :new:                         🔝 :top:\n🆙 :up:                               🆒 :cool:                        🆓 :free:\n🆖 :ng:                               🎦 :cinema:                      🈁 :koko:\n📶 :signal_strength:                  🈹 :u5272:                       🈴 :u5408:\n🈺 :u55b6:                            🈯️ :u6307:                      🈷️ :u6708:\n🈶 :u6709:                            🈵 :u6e80:                       🈚️ :u7121:\n🈸 :u7533:                            🈳 :u7a7a:                       🈲 :u7981:\n🈂️ :sa:                              🚻 :restroom:                    🚹 :mens:\n🚺 :womens:                           🚼 :baby_symbol:                 🚭 :no_smoking:\n🅿️ :parking:                         ♿️ :wheelchair:                  🚇 :metro:\n🛄 :baggage_claim:                    🉑 :accept:                      🚾 :wc:\n🚰 :potable_water:                    🚮 :put_litter_in_its_place:     ㊙️ :secret:\n㊗️ :congratulations:                  Ⓜ️ :m:                           🛂 :passport_control:\n🛅 :left_luggage:                     🛃 :customs:                     🉐 :ideograph_advantage:\n🆑 :cl:                               🆘 :sos:                         🆔 :id:\n🚫 :no_entry_sign:                    🔞 :underage:                    📵 :no_mobile_phones:\n🚯 :do_not_litter:                    🚱 :non-potable_water:           🚳 :no_bicycles:\n🚷 :no_pedestrians:                   🚸 :children_crossing:           ⛔️ :no_entry:\n✳️ :eight_spoked_asterisk:            ✴️ :eight_pointed_black_star:    💟 :heart_decoration:\n🆚 :vs:                               📳 :vibration_mode:              📴 :mobile_phone_off:\n💹 :chart:                            💱 :currency_exchange:           ♈️ :aries:\n♉️ :taurus:                           ♊️ :gemini:                      ♋️ :cancer:\n♌️ :leo:                              ♍️ :virgo:                       ♎️ :libra:\n♏️ :scorpius:                         ♐️ :sagittarius:                 ♑️ :capricorn:\n♒️ :aquarius:                         ♓️ :pisces:                      ⛎ :ophiuchus:\n🔯 :six_pointed_star:                 ❎:negative_squared_cross_mark:   🅰️ :a:\n🅱️ :b:                               🆎 :ab:                          🅾️ :o2:\n💠:diamond_shape_with_a_dot_inside:   ♻️ :recycle:                     🔚 :end:\n🔛 :on:                               🔜 :soon:                        🕐 :clock1:\n🕜 :clock130:                         🕙 :clock10:                     🕥 :clock1030:\n🕚 :clock11:                          🕦 :clock1130:                   🕛 :clock12:\n🕧 :clock1230:                        🕑 :clock2:                      🕝 :clock230:\n🕒 :clock3:                           🕞 :clock330:                    🕓 :clock4:\n🕟 :clock430:                         🕔 :clock5:                      🕠 :clock530:\n🕕 :clock6:                           🕡 :clock630:                    🕖 :clock7:\n🕢 :clock730:                         🕗 :clock8:                      🕣 :clock830:\n🕘 :clock9:                           🕤 :clock930:                    💲 :heavy_dollar_sign:\n©️ :copyright:                        ®️ :registered:                  ™️ :tm:\n❌ :x:                                 ❗️ :heavy_exclamation_mark:      ‼️ :bangbang:\n⁉️ :interrobang:                      ⭕️ :o:                           ✖️ :heavy_multiplication_x:\n➕ :heavy_plus_sign:                   ➖ :heavy_minus_sign:             ➗ :heavy_division_sign:\n💮 :white_flower:                     💯 :100:                         ✔️ :heavy_check_mark:\n☑️ :ballot_box_with_check:            🔘 :radio_button:                🔗 :link:\n➰ :curly_loop:                        〰️ :wavy_dash:                   〽️ :part_alternation_mark:\n✅ :white_check_mark:                  🔲 :black_square_button:         🔳 :white_square_button:\n⚫️ :black_circle:                     ⚪️ :white_circle:                🔴 :red_circle:\n🔵 :large_blue_circle:                🔷 :large_blue_diamond:          🔶 :large_orange_diamond:\n🔹 :small_blue_diamond:               🔸 :small_orange_diamond:        🔺 :small_red_triangle:\n🔻 :small_red_triangle_down:          🔱 :trident:                     \n\n\n# 参考链接\n\n * https://www.kuangstudy.com/bbs/1363014604904587265\n * https://blog.csdn.net/u011583927/article/details/104094284\n * https://note.oddfar.com/pages/fe0004/",normalizedContent:"笔记\n\ngit commit 的时候，添加表情符号可以更好的表明本次提交的性质，也更有趣。\n\n2022-02-08 @村长\n\n\n\n * git常用表情\n * markdown 常用表情\n   * people\n   * nature\n   * objects\n   * places\n   * symbols\n * 参考链接\n\n\n\n\n# git常用表情\n\ngit commit 的时候，添加表情符号可以更好的表明本次提交的性质，也更有趣。\n\n常用表情符号如下：\n\nemoji        emoji代码                      commit说明\n🎨 (调色板)     :art:                        改进代码结构/代码格式\n⚡️ (闪电)      :zap:                        提升性能\n🐎 (赛马)      :racehorse:                  提升性能\n🔥 (火焰)      :fire:                       移除代码或文件\n🐛 (bug)     :bug:                        修复 bug\n🚑 (急救车)     :ambulance:                  重要补丁\n✨ (火花)       :sparkles:                   引入新功能\n📝 (铅笔)      :pencil:                     撰写文档\n🚀 (火箭)      :rocket:                     部署功能\n💄 (口红)      :lipstick:                   更新 ui 和样式文件\n🎉 (庆祝)      :tada:                       初次提交\n✅ (白色复选框)    :white_check_mark:           增加测试\n🔒 (锁)       :lock:                       修复安全问题\n🍎 (苹果)      :apple:                      修复 macos 下的问题\n🐧 (企鹅)      :penguin:                    修复 linux 下的问题\n🏁 (旗帜)      :checked_flag:               修复 windows 下的问题\n🔖 (书签)      :bookmark:                   发行/版本标签\n🚨 (警车灯)     :rotating_light:             移除 linter 警告\n🚧 (施工)      :construction:               工作进行中\n💚 (绿心)      :green_heart:                修复 ci 构建问题\n⬇️ (下降箭头)    :arrow_down:                 降级依赖\n⬆️ (上升箭头)    :arrow_up:                   升级依赖\n👷 (工人)      :construction_worker:        添加 ci 构建系统\n📈 (上升趋势图)   :chart_with_upwards_trend:   添加分析或跟踪代码\n🔨 (锤子)      :hammer:                     重大重构\n➖ (减号)       :heavy_minus_sign:           减少一个依赖\n🐳 (鲸鱼)      :whale:                      docker 相关工作\n➕ (加号)       :heavy_plus_sign:            增加一个依赖\n🔧 (扳手)      :wrench:                     修改配置文件\n🌐 (地球)      :globe_with_meridians:       国际化与本地化\n✏️ (铅笔)      :pencil2:                    修复 typo\n\n\n# markdown 常用表情\n\n\n# people\n\n😄 :smile:                          😆 :laughing:                       \n😊 :blush:                          😃 :smiley:                         ☺️ :relaxed:\n😏 :smirk:                          😍 :heart_eyes:                     😘 :kissing_heart:\n😚 :kissing_closed_eyes:            😳 :flushed:                        😌 :relieved:\n😆 :satisfied:                      😁 :grin:                           😉 :wink:\n😜 :stuck_out_tongue_winking_eye:   😝 :stuck_out_tongue_closed_eyes:   😀 :grinning:\n😗 :kissing:                        😙 :kissing_smiling_eyes:           😛 :stuck_out_tongue:\n😴 :sleeping:                       😟 :worried:                        😦 :frowning:\n😧 :anguished:                      😮 :open_mouth:                     😬 :grimacing:\n😕 :confused:                       😯 :hushed:                         😑 :expressionless:\n😒 :unamused:                       😅 :sweat_smile:                    😓 :sweat:\n😥 :disappointed_relieved:          😩 :weary:                          😔 :pensive:\n😞 :disappointed:                   😖 :confounded:                     😨 :fearful:\n😰 :cold_sweat:                     😣 :persevere:                      😢 :cry:\n😭 :sob:                            😂 :joy:                            😲 :astonished:\n😱 :scream:                         👿 :imp:                            😫 :tired_face:\n😠 :angry:                          😡 :rage:                           😤 :triumph:\n😪 :sleepy:                         😋 :yum:                            😷 :mask:\n😎 :sunglasses:                     😵 :dizzy_face:                     \n\n                                                               \n😈 :smiling_imp:                😐 :neutral_face:              😶 :no_mouth:\n😇 :innocent:                   👽 :alien:                     💛 :yellow_heart:\n💙 :blue_heart:                 💜 :purple_heart:              ❤️ :heart:\n💚 :green_heart:                💔 :broken_heart:              💓 :heartbeat:\n💗 :heartpulse:                 💕 :two_hearts:                💞 :revolving_hearts:\n💘 :cupid:                      💖 :sparkling_heart:           ✨ :sparkles:\n⭐️ :star:                       🌟 :star2:                     💫 :dizzy:\n💥 :boom:                       💥 :collision:                 💢 :anger:\n❗️ :exclamation:                ❓ :question:                   ❕ :grey_exclamation:\n❔ :grey_question:               💤 :zzz:                       💨 :dash:\n💦 :sweat_drops:                🎶 :notes:                     🎵 :musical_note:\n🔥 :fire:                       💩 :hankey:                    💩 :poop:\n💩 :shit:                       👍 :+1:                        👍 :thumbsup:\n👎 :-1:                         👎 :thumbsdown:                👌 :ok_hand:\n👊 :punch:                      👊 :facepunch:                 ✊ :fist:\n✌️ :v:                          👋 :wave:                      ✋ :hand:\n✋ :raised_hand:                 👐 :open_hands:                ☝️ :point_up:\n👇 :point_down:                 👈 :point_left:                👉 :point_right:\n🙌 :raised_hands:               🙏 :pray:                      👆 :point_up_2:\n👏 :clap:                       💪 :muscle:                    🤘 :metal:\n🖕 :fu:                         🚶 :walking:                   🏃 :runner:\n🏃 :running:                    👫 :couple:                    👪 :family:\n👬 :two_men_holding_hands:      👭 :two_women_holding_hands:   💃 :dancer:\n👯 :dancers:                    🙆 :ok_woman:                  🙅 :no_good:\n💁 :information_desk_person:    🙋 :raising_hand:              👰 :bride_with_veil:\n🙎 :person_with_pouting_face:   🙍 :person_frowning:           🙇 :bow:\n💏 :couplekiss:                 💑 :couple_with_heart:         💆 :massage:\n💇 :haircut:                    💅 :nail_care:                 👦 :boy:\n👧 :girl:                       👩 :woman:                     👨 :man:\n👶 :baby:                       👵 :older_woman:               👴 :older_man:\n👱 :person_with_blond_hair:     👲 :man_with_gua_pi_mao:       👳 :man_with_turban:\n👷 :construction_worker:        👮 :cop:                       👼 :angel:\n👸 :princess:                   😺 :smiley_cat:                😸 :smile_cat:\n😻 :heart_eyes_cat:             😽 :kissing_cat:               😼 :smirk_cat:\n🙀 :scream_cat:                 😿 :crying_cat_face:           😹 :joy_cat:\n😾 :pouting_cat:                👹 :japanese_ogre:             👺 :japanese_goblin:\n🙈 :see_no_evil:                🙉 :hear_no_evil:              🙊 :speak_no_evil:\n💂 :guardsman:                  💀 :skull:                     🐾 :feet:\n👄 :lips:                       💋 :kiss:                      💧 :droplet:\n👂 :ear:                        👀 :eyes:                      👃 :nose:\n👅 :tongue:                     💌 :love_letter:               👤 :bust_in_silhouette:\n👥 :busts_in_silhouette:        💬 :speech_balloon:            💭 :thought_balloon:\n\n\n# nature\n\n☀️ :sunny:                          ☔️ :umbrella:               ☁️ :cloud:\n❄️ :snowflake:                      ⛄️ :snowman:                ⚡️ :zap:\n🌀 :cyclone:                        🌁 :foggy:                  🌊 :ocean:\n🐱 :cat:                            🐶 :dog:                    🐭 :mouse:\n🐹 :hamster:                        🐰 :rabbit:                 🐺 :wolf:\n🐸 :frog:                           🐯 :tiger:                  🐨 :koala:\n🐻 :bear:                           🐷 :pig:                    🐽 :pig_nose:\n🐮 :cow:                            🐗 :boar:                   🐵 :monkey_face:\n🐒 :monkey:                         🐴 :horse:                  🐎 :racehorse:\n🐫 :camel:                          🐑 :sheep:                  🐘 :elephant:\n🐼 :panda_face:                     🐍 :snake:                  🐦 :bird:\n🐤 :baby_chick:                     🐥 :hatched_chick:          🐣 :hatching_chick:\n🐔 :chicken:                        🐧 :penguin:                🐢 :turtle:\n🐛 :bug:                            🐝 :honeybee:               🐜 :ant:\n🐞 :beetle:                         🐌 :snail:                  🐙 :octopus:\n🐠 :tropical_fish:                  🐟 :fish:                   🐳 :whale:\n🐋 :whale2:                         🐬 :dolphin:                🐄 :cow2:\n🐏 :ram:                            🐀 :rat:                    🐃 :water_buffalo:\n🐅 :tiger2:                         🐇 :rabbit2:                🐉 :dragon:\n🐐 :goat:                           🐓 :rooster:                🐕 :dog2:\n🐖 :pig2:                           🐁 :mouse2:                 🐂 :ox:\n🐲 :dragon_face:                    🐡 :blowfish:               🐊 :crocodile:\n🐪 :dromedary_camel:                🐆 :leopard:                🐈 :cat2:\n🐩 :poodle:                         🐾 :paw_prints:             💐 :bouquet:\n🌸 :cherry_blossom:                 🌷 :tulip:                  🍀 :four_leaf_clover:\n🌹 :rose:                           🌻 :sunflower:              🌺 :hibiscus:\n🍁 :maple_leaf:                     🍃 :leaves:                 🍂 :fallen_leaf:\n🌿 :herb:                           🍄 :mushroom:               🌵 :cactus:\n🌴 :palm_tree:                      🌲 :evergreen_tree:         🌳 :deciduous_tree:\n🌰 :chestnut:                       🌱 :seedling:               🌼 :blossom:\n🌾 :ear_of_rice:                    🐚 :shell:                  🌐 :globe_with_meridians:\n🌞 :sun_with_face:                  🌝 :full_moon_with_face:    🌚 :new_moon_with_face:\n🌑 :new_moon:                       🌒 :waxing_crescent_moon:   🌓 :first_quarter_moon:\n🌔 :waxing_gibbous_moon:            🌕 :full_moon:              🌖 :waning_gibbous_moon:\n🌗 :last_quarter_moon:              🌘 :waning_crescent_moon:   🌜 :last_quarter_moon_with_face:\n🌛 :first_quarter_moon_with_face:   🌔 :moon:                   🌍 :earth_africa:\n🌎 :earth_americas:                 🌏 :earth_asia:             🌋 :volcano:\n🌌 :milky_way:                      ⛅️ :partly_sunny:           \n\n\n# objects\n\n🎍 :bamboo:                           💝 :gift_heart:                   🎎 :dolls:\n🎒 :school_satchel:                   🎓 :mortar_board:                 🎏 :flags:\n🎆 :fireworks:                        🎇 :sparkler:                     🎐 :wind_chime:\n🎑 :rice_scene:                       🎃 :jack_o_lantern:               👻 :ghost:\n🎅 :santa:                            🎄 :christmas_tree:               🎁 :gift:\n🔔 :bell:                             🔕 :no_bell:                      🎋 :tanabata_tree:\n🎉 :tada:                             🎊 :confetti_ball:                🎈 :balloon:\n🔮 :crystal_ball:                     💿 :cd:                           📀 :dvd:\n💾 :floppy_disk:                      📷 :camera:                       📹 :video_camera:\n🎥 :movie_camera:                     💻 :computer:                     📺 :tv:\n📱 :iphone:                           ☎️ :phone:                        ☎️ :telephone:\n📞 :telephone_receiver:               📟 :pager:                        📠 :fax:\n💽 :minidisc:                         📼 :vhs:                          🔉 :sound:\n🔈 :speaker:                          🔇 :mute:                         📢 :loudspeaker:\n📣 :mega:                             ⌛️ :hourglass:                    ⏳ :hourglass_flowing_sand:\n⏰ :alarm_clock:                       ⌚️ :watch:                        📻 :radio:\n📡 :satellite:                        ➿ :loop:                          🔍 :mag:\n🔎 :mag_right:                        🔓 :unlock:                       🔒 :lock:\n🔏 :lock_with_ink_pen:                🔐 :closed_lock_with_key:         🔑 :key:\n💡 :bulb:                             🔦 :flashlight:                   🔆 :high_brightness:\n🔅 :low_brightness:                   🔌 :electric_plug:                🔋 :battery:\n📲 :calling:                          ✉️ :email:                        📫 :mailbox:\n📮 :postbox:                          🛀 :bath:                         🛁 :bathtub:\n🚿 :shower:                           🚽 :toilet:                       🔧 :wrench:\n🔩 :nut_and_bolt:                     🔨 :hammer:                       💺 :seat:\n💰 :moneybag:                         💴 :yen:                          💵 :dollar:\n💷 :pound:                            💶 :euro:                         💳 :credit_card:\n💸 :money_with_wings:                 📧 :e-mail:                       📥 :inbox_tray:\n📤 :outbox_tray:                      ✉️ :envelope:                     📨 :incoming_envelope:\n📯 :postal_horn:                      📪 :mailbox_closed:               📬 :mailbox_with_mail:\n📭 :mailbox_with_no_mail:             🚪 :door:                         🚬 :smoking:\n💣 :bomb:                             🔫 :gun:                          🔪 :hocho:\n💊 :pill:                             💉 :syringe:                      📄 :page_facing_up:\n📃 :page_with_curl:                   📑 :bookmark_tabs:                📊 :bar_chart:\n📈 :chart_with_upwards_trend:         📉 :chart_with_downwards_trend:   📜 :scroll:\n📋 :clipboard:                        📆 :calendar:                     📅 :date:\n📇 :card_index:                       📁 :file_folder:                  📂 :open_file_folder:\n✂️ :scissors:                         📌 :pushpin:                      📎 :paperclip:\n✒️ :black_nib:                        ✏️ :pencil2:                      📏 :straight_ruler:\n📐 :triangular_ruler:                 📕 :closed_book:                  📗 :green_book:\n📘 :blue_book:                        📙 :orange_book:                  📓 :notebook:\n📔 :notebook_with_decorative_cover:   📒 :ledger:                       📚 :books:\n🔖 :bookmark:                         📛 :name_badge:                   🔬 :microscope:\n🔭 :telescope:                        📰 :newspaper:                    🏈 :football:\n🏀 :basketball:                       ⚽️ :soccer:                       ⚾️ :baseball:\n🎾 :tennis:                           🎱 :8ball:                        🏉 :rugby_football:\n🎳 :bowling:                          ⛳️ :golf:                         🚵 :mountain_bicyclist:\n🚴 :bicyclist:                        🏇 :horse_racing:                 🏂 :snowboarder:\n🏊 :swimmer:                          🏄 :surfer:                       🎿 :ski:\n♠️ :spades:                           ♥️ :hearts:                       ♣️ :clubs:\n♦️ :diamonds:                         💎 :gem:                          💍 :ring:\n🏆 :trophy:                           🎼 :musical_score:                🎹 :musical_keyboard:\n🎻 :violin:                           👾 :space_invader:                🎮 :video_game:\n🃏 :black_joker:                      🎴 :flower_playing_cards:         🎲 :game_die:\n🎯 :dart:                             🀄️ :mahjong:                     🎬 :clapper:\n📝 :memo:                             📝 :pencil:                       📖 :book:\n🎨 :art:                              🎤 :microphone:                   🎧 :headphones:\n🎺 :trumpet:                          🎷 :saxophone:                    🎸 :guitar:\n👞 :shoe:                             👡 :sandal:                       👠 :high_heel:\n💄 :lipstick:                         👢 :boot:                         👕 :shirt:\n👕 :tshirt:                           👔 :necktie:                      👚 :womans_clothes:\n👗 :dress:                            🎽 :running_shirt_with_sash:      👖 :jeans:\n👘 :kimono:                           👙 :bikini:                       🎀 :ribbon:\n🎩 :tophat:                           👑 :crown:                        👒 :womans_hat:\n👞 :mans_shoe:                        🌂 :closed_umbrella:              💼 :briefcase:\n👜 :handbag:                          👝 :pouch:                        👛 :purse:\n👓 :eyeglasses:                       🎣 :fishing_pole_and_fish:        ☕️ :coffee:\n🍵 :tea:                              🍶 :sake:                         🍼 :baby_bottle:\n🍺 :beer:                             🍻 :beers:                        🍸 :cocktail:\n🍹 :tropical_drink:                   🍷 :wine_glass:                   🍴 :fork_and_knife:\n🍕 :pizza:                            🍔 :hamburger:                    🍟 :fries:\n🍗 :poultry_leg:                      🍖 :meat_on_bone:                 🍝 :spaghetti:\n🍛 :curry:                            🍤 :fried_shrimp:                 🍱 :bento:\n🍣 :sushi:                            🍥 :fish_cake:                    🍙 :rice_ball:\n🍘 :rice_cracker:                     🍚 :rice:                         🍜 :ramen:\n🍲 :stew:                             🍢 :oden:                         🍡 :dango:\n🥚 :egg:                              🍞 :bread:                        🍩 :doughnut:\n🍮 :custard:                          🍦 :icecream:                     🍨 :ice_cream:\n🍧 :shaved_ice:                       🎂 :birthday:                     🍰 :cake:\n🍪 :cookie:                           🍫 :chocolate_bar:                🍬 :candy:\n🍭 :lollipop:                         🍯 :honey_pot:                    🍎 :apple:\n🍏 :green_apple:                      🍊 :tangerine:                    🍋 :lemon:\n🍒 :cherries:                         🍇 :grapes:                       🍉 :watermelon:\n🍓 :strawberry:                       🍑 :peach:                        🍈 :melon:\n🍌 :banana:                           🍐 :pear:                         🍍 :pineapple:\n🍠 :sweet_potato:                     🍆 :eggplant:                     🍅 :tomato:\n🌽 :corn:                                                               \n\n\n# places\n\n🏠 :house:                 🏡 :house_with_garden:         🏫 :school:\n🏢 :office:                🏣 :post_office:               🏥 :hospital:\n🏦 :bank:                  🏪 :convenience_store:         🏩 :love_hotel:\n🏨 :hotel:                 💒 :wedding:                   ⛪️ :church:\n🏬 :department_store:      🏤 :european_post_office:      🌇 :city_sunrise:\n🌆 :city_sunset:           🏯 :japanese_castle:           🏰 :european_castle:\n⛺️ :tent:                  🏭 :factory:                   🗼 :tokyo_tower:\n🗾 :japan:                 🗻 :mount_fuji:                🌄 :sunrise_over_mountains:\n🌅 :sunrise:               🌠 :stars:                     🗽 :statue_of_liberty:\n🌉 :bridge_at_night:       🎠 :carousel_horse:            🌈 :rainbow:\n🎡 :ferris_wheel:          ⛲️ :fountain:                  🎢 :roller_coaster:\n🚢 :ship:                  🚤 :speedboat:                 ⛵️ :boat:\n⛵️ :sailboat:              🚣 :rowboat:                   ⚓️ :anchor:\n🚀 :rocket:                ✈️ :airplane:                  🚁 :helicopter:\n🚂 :steam_locomotive:      🚊 :tram:                      🚞 :mountain_railway:\n🚲 :bike:                  🚡 :aerial_tramway:            🚟 :suspension_railway:\n🚠 :mountain_cableway:     🚜 :tractor:                   🚙 :blue_car:\n🚘 :oncoming_automobile:   🚗 :car:                       🚗 :red_car:\n🚕 :taxi:                  🚖 :oncoming_taxi:             🚛 :articulated_lorry:\n🚌 :bus:                   🚍 :oncoming_bus:              🚨 :rotating_light:\n🚓 :police_car:            🚔 :oncoming_police_car:       🚒 :fire_engine:\n🚑 :ambulance:             🚐 :minibus:                   🚚 :truck:\n🚋 :train:                 🚉 :station:                   🚆 :train2:\n🚅 :bullettrain_front:     🚄 :bullettrain_side:          🚈 :light_rail:\n🚝 :monorail:              🚃 :railway_car:               🚎 :trolleybus:\n🎫 :ticket:                ⛽️ :fuelpump:                  🚦 :vertical_traffic_light:\n🚥 :traffic_light:         ⚠️ :warning:                   🚧 :construction:\n🔰 :beginner:              🏧 :atm:                       🎰 :slot_machine:\n🚏 :busstop:               💈 :barber:                    ♨️ :hotsprings:\n🏁 :checkered_flag:        🎌 :crossed_flags:             🏮 :izakaya_lantern:\n🗿 :moyai:                 🎪 :circus_tent:               🎭 :performing_arts:\n📍 :round_pushpin:         🚩 :triangular_flag_on_post:   🇯🇵 :jp:\n🇰🇷 :kr:                  🇨🇳 :cn:                      🇺🇸 :us:\n🇫🇷 :fr:                  🇪🇸 :es:                      🇮🇹 :it:\n🇷🇺 :ru:                  🇬🇧 :gb:                      🇬🇧 :uk:\n🇩🇪 :de:                                                 \n\n\n# symbols\n\n1️⃣ :one:                             2️⃣ :two:                        3️⃣ :three:\n4️⃣ :four:                            5️⃣ :five:                       6️⃣ :six:\n7️⃣ :seven:                           8️⃣ :eight:                      9️⃣ :nine:\n🔟 :keycap_ten:                       🔢 :1234:                        0️⃣ :zero:\n#️⃣ :hash:                            🔣 :symbols:                     ◀️ :arrow_backward:\n⬇️ :arrow_down:                       ▶️ :arrow_forward:               ⬅️ :arrow_left:\n🔠 :capital_abcd:                     🔡 :abcd:                        🔤 :abc:\n↙️ :arrow_lower_left:                 ↘️ :arrow_lower_right:           ➡️ :arrow_right:\n⬆️ :arrow_up:                         ↖️ :arrow_upper_left:            ↗️ :arrow_upper_right:\n⏬ :arrow_double_down:                 ⏫ :arrow_double_up:              🔽 :arrow_down_small:\n⤵️ :arrow_heading_down:               ⤴️ :arrow_heading_up:            ↩️:leftwards_arrow_with_hook:\n↪️ :arrow_right_hook:                 ↔️ :left_right_arrow:            ↕️ :arrow_up_down:\n🔼 :arrow_up_small:                   🔃 :arrows_clockwise:            🔄 :arrows_counterclockwise:\n⏪ :rewind:                            ⏩ :fast_forward:                 ℹ️ :information_source:\n🆗 :ok:                               🔀 :twisted_rightwards_arrows:   🔁 :repeat:\n🔂 :repeat_one:                       🆕 :new:                         🔝 :top:\n🆙 :up:                               🆒 :cool:                        🆓 :free:\n🆖 :ng:                               🎦 :cinema:                      🈁 :koko:\n📶 :signal_strength:                  🈹 :u5272:                       🈴 :u5408:\n🈺 :u55b6:                            🈯️ :u6307:                      🈷️ :u6708:\n🈶 :u6709:                            🈵 :u6e80:                       🈚️ :u7121:\n🈸 :u7533:                            🈳 :u7a7a:                       🈲 :u7981:\n🈂️ :sa:                              🚻 :restroom:                    🚹 :mens:\n🚺 :womens:                           🚼 :baby_symbol:                 🚭 :no_smoking:\n🅿️ :parking:                         ♿️ :wheelchair:                  🚇 :metro:\n🛄 :baggage_claim:                    🉑 :accept:                      🚾 :wc:\n🚰 :potable_water:                    🚮 :put_litter_in_its_place:     ㊙️ :secret:\n㊗️ :congratulations:                  ⓜ️ :m:                           🛂 :passport_control:\n🛅 :left_luggage:                     🛃 :customs:                     🉐 :ideograph_advantage:\n🆑 :cl:                               🆘 :sos:                         🆔 :id:\n🚫 :no_entry_sign:                    🔞 :underage:                    📵 :no_mobile_phones:\n🚯 :do_not_litter:                    🚱 :non-potable_water:           🚳 :no_bicycles:\n🚷 :no_pedestrians:                   🚸 :children_crossing:           ⛔️ :no_entry:\n✳️ :eight_spoked_asterisk:            ✴️ :eight_pointed_black_star:    💟 :heart_decoration:\n🆚 :vs:                               📳 :vibration_mode:              📴 :mobile_phone_off:\n💹 :chart:                            💱 :currency_exchange:           ♈️ :aries:\n♉️ :taurus:                           ♊️ :gemini:                      ♋️ :cancer:\n♌️ :leo:                              ♍️ :virgo:                       ♎️ :libra:\n♏️ :scorpius:                         ♐️ :sagittarius:                 ♑️ :capricorn:\n♒️ :aquarius:                         ♓️ :pisces:                      ⛎ :ophiuchus:\n🔯 :six_pointed_star:                 ❎:negative_squared_cross_mark:   🅰️ :a:\n🅱️ :b:                               🆎 :ab:                          🅾️ :o2:\n💠:diamond_shape_with_a_dot_inside:   ♻️ :recycle:                     🔚 :end:\n🔛 :on:                               🔜 :soon:                        🕐 :clock1:\n🕜 :clock130:                         🕙 :clock10:                     🕥 :clock1030:\n🕚 :clock11:                          🕦 :clock1130:                   🕛 :clock12:\n🕧 :clock1230:                        🕑 :clock2:                      🕝 :clock230:\n🕒 :clock3:                           🕞 :clock330:                    🕓 :clock4:\n🕟 :clock430:                         🕔 :clock5:                      🕠 :clock530:\n🕕 :clock6:                           🕡 :clock630:                    🕖 :clock7:\n🕢 :clock730:                         🕗 :clock8:                      🕣 :clock830:\n🕘 :clock9:                           🕤 :clock930:                    💲 :heavy_dollar_sign:\n©️ :copyright:                        ®️ :registered:                  ™️ :tm:\n❌ :x:                                 ❗️ :heavy_exclamation_mark:      ‼️ :bangbang:\n⁉️ :interrobang:                      ⭕️ :o:                           ✖️ :heavy_multiplication_x:\n➕ :heavy_plus_sign:                   ➖ :heavy_minus_sign:             ➗ :heavy_division_sign:\n💮 :white_flower:                     💯 :100:                         ✔️ :heavy_check_mark:\n☑️ :ballot_box_with_check:            🔘 :radio_button:                🔗 :link:\n➰ :curly_loop:                        〰️ :wavy_dash:                   〽️ :part_alternation_mark:\n✅ :white_check_mark:                  🔲 :black_square_button:         🔳 :white_square_button:\n⚫️ :black_circle:                     ⚪️ :white_circle:                🔴 :red_circle:\n🔵 :large_blue_circle:                🔷 :large_blue_diamond:          🔶 :large_orange_diamond:\n🔹 :small_blue_diamond:               🔸 :small_orange_diamond:        🔺 :small_red_triangle:\n🔻 :small_red_triangle_down:          🔱 :trident:                     \n\n\n# 参考链接\n\n * https://www.kuangstudy.com/bbs/1363014604904587265\n * https://blog.csdn.net/u011583927/article/details/104094284\n * https://note.oddfar.com/pages/fe0004/",charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"Linux - 测试",frontmatter:{title:"Linux - 测试",date:"2021-11-25T21:39:56.000Z",permalink:"/linux/test/",article:!1,comment:!1,editLink:!1,categories:[null],tags:[null],readingShow:"top"},regularPath:"/40.%E5%B7%A5%E5%85%B7/30.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%20-%20Linux/00.Linux%20-%20%E6%B5%8B%E8%AF%95.html",relativePath:"40.工具/30.操作系统 - Linux/00.Linux - 测试.md",key:"v-30287b26",path:"/linux/test/",headersStr:null,content:"证明她来过",normalizedContent:"证明她来过",charsets:{cjk:!0},lastUpdated:"2022/04/05, 14:44:34"},{title:"Docker - 介绍",frontmatter:{title:"Docker - 介绍",date:"2021-11-19T12:24:06.000Z",permalink:"/docker/introduce/",categories:["Docker"],tags:["容器部署"],readingShow:"top"},regularPath:"/40.%E5%B7%A5%E5%85%B7/40.%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2%20-%20Docker/03.Docker%20-%20%E4%BB%8B%E7%BB%8D.html",relativePath:"40.工具/40.容器部署 - Docker/03.Docker - 介绍.md",key:"v-96dabd4e",path:"/docker/introduce/",headers:[{level:2,title:"什么是虚拟化技术",slug:"什么是虚拟化技术",normalizedTitle:"什么是虚拟化技术",charIndex:3},{level:3,title:"什么是虚拟化",slug:"什么是虚拟化",normalizedTitle:"什么是虚拟化",charIndex:3},{level:3,title:"虚拟化技术分类",slug:"虚拟化技术分类",normalizedTitle:"虚拟化技术分类",charIndex:29},{level:3,title:"几种虚拟化技术",slug:"几种虚拟化技术",normalizedTitle:"几种虚拟化技术",charIndex:42},{level:2,title:"Docker虚拟化",slug:"docker虚拟化",normalizedTitle:"docker虚拟化",charIndex:53},{level:3,title:"什么是Docker",slug:"什么是docker",normalizedTitle:"什么是docker",charIndex:68},{level:3,title:"Docker起源",slug:"docker起源",normalizedTitle:"docker起源",charIndex:83},{level:3,title:"Docker能干什么",slug:"docker能干什么",normalizedTitle:"docker能干什么",charIndex:97},{level:3,title:"为什么是Docker",slug:"为什么是docker",normalizedTitle:"为什么是docker",charIndex:113},{level:2,title:"Docker和虚拟机的区别",slug:"docker和虚拟机的区别",normalizedTitle:"docker和虚拟机的区别",charIndex:127},{level:3,title:"虚拟技术对比",slug:"虚拟技术对比",normalizedTitle:"虚拟技术对比",charIndex:146},{level:3,title:"Docker的logo含义",slug:"docker的logo含义",normalizedTitle:"docker的logo含义",charIndex:158},{level:2,title:"Docker核心架构",slug:"docker核心架构",normalizedTitle:"docker核心架构",charIndex:175},{level:2,title:"核心架构图",slug:"核心架构图",normalizedTitle:"核心架构图",charIndex:189},{level:2,title:"Docker相关官网",slug:"docker相关官网",normalizedTitle:"docker相关官网",charIndex:198},{level:2,title:"参考文章",slug:"参考文章",normalizedTitle:"参考文章",charIndex:212}],headersStr:"什么是虚拟化技术 什么是虚拟化 虚拟化技术分类 几种虚拟化技术 Docker虚拟化 什么是Docker Docker起源 Docker能干什么 为什么是Docker Docker和虚拟机的区别 虚拟技术对比 Docker的logo含义 Docker核心架构 核心架构图 Docker相关官网 参考文章",content:' * 什么是虚拟化技术\n   * 什么是虚拟化\n   * 虚拟化技术分类\n   * 几种虚拟化技术\n * Docker虚拟化\n   * 什么是Docker\n   * Docker起源\n   * Docker能干什么\n   * 为什么是Docker\n * Docker和虚拟机的区别\n   * 虚拟技术对比\n   * Docker的logo含义\n * Docker核心架构\n * 核心架构图\n * Docker相关官网\n * 参考文章\n\n\n\n\n# 什么是虚拟化技术\n\n\n# 什么是虚拟化\n\n在计算机技术中，虚拟化（Virtualization）是一种资源管理技术。它是将计算机的各种实体资源，如：服务器、网络、内存及存储等，予以抽象、转换后呈现出来，打破实体结构间的不可切割的障碍，使用户可以用更好的方式来利用这些资源。\n\n虚拟化的目的是为了在同一个主机上运行多个系统或应用，从而提高系统资源的利用率，并带来降低成本、方便管理和容错容灾等好处。\n\n\n# 虚拟化技术分类\n\n从实现形式来分，虚拟化技术可分为基于硬件的虚拟化和基于软件的虚拟化。\n\n# 硬件虚拟化\n\n硬件虚拟化就是硬件物理平台本身提供了对特殊指令的截获和重定向的支持。支持虚拟化的硬件，也是一些基于硬件实现软件虚拟化技术的关键。在基于硬件实现软件虚拟化的技术中，在硬件是实现虚拟化的基础，硬件(主要是CPU)会为虚拟化软件提供支持，从而实现硬件资源的虚拟化。\n\n支持虚拟化的硬件有：\n\n * Intel-VT-(Intel Virtualization Technology)，Intel 公司为解决纯软件虚拟化解决方案在可靠性、安全性和性能上的不足而引进的技术。它可以让一个CPU工作起来像多个CPU在并行运行，从而使得在一部电脑内同时运行多个操作系统成为可能\n * AMD-V-(AMD Virtualization)，是 AMD 公司的虚拟化技术。它是对 x86 处理器系统架构的一组硬件扩展和硬件辅助虚拟化技术，可以简化纯软件的虚拟化解决方案，改进 VMM（虚拟机监视器）的设计，更充分地利用硬件资源，提高服务器和数据中心的虚拟化效率\n\n# 软件虚拟化\n\n软件虚拟化就是利用软件技术，在现有的物理平台上实现对物理平台访问的截获和模拟。在软件虚拟化技术中，有些技术不需要硬件支持，如：QEMU；而有些软件虚拟化技术，则依赖硬件支持，如：VMware、KVM。\n\n对软件虚拟化进行细分，又可以分为以下几类：\n\n * 完全虚拟化：（Full Virtualization）虚拟机模拟完整的底层硬件环境和特权指令的执行过程，使客户机操作系统可以独立运行。支持完全虚拟化的软件有：Parallels Workstation、VirtualBox、Virtual Iron、Oracle VM、Virtual PC、Virtual Server、Hyper-V、VMware Workstation、QEMU等\n * 硬件辅助虚拟化：（Hardware-assisted Virtualization）是指通过硬件辅助支持模拟运行环境，使客户机操作系统可以独立运行，实现完全虚拟化的功能。支持硬件辅助虚拟化的软件有：Linux KVM、VMware Workstation、VMware Fusion、Virtual PC、Xen、VirtualBox、Parallels Workstation等\n * 部分虚拟化：（Partial Virtualization）只针对部分硬件资源进行虚拟化，虚拟机模拟部分底层硬件环境，特别是地址空间。这样的环境支持资源共享和线程独立，但是不允许建立独立的客户机操作系统。\n * 平行虚拟化：（Para-Virtualization）虚拟机不需要模拟硬件，而是将部分硬件接口以软件的形式提供给客户机操作系统。如：早期的 Xen。\n * 操作系统层虚拟化：（OS-level virtualization）这种技术将操作系统内核虚拟化，可以允许使用者空间软件实例被分割成几个独立的单元，在内核中运行，而不是只有一个单一实例运行。这个软件实例，也被称为是一个容器（containers）、虚拟引擎（Virtualization engine）、虚拟专用服务器（virtual private servers）。每个容器的进程是独立的，对于使用者来说，就像是在使用自己的专用服务器。 Docker 容器技术就是属于操作系统层虚拟化的范畴。\n\n\n# 几种虚拟化技术\n\n虚拟化是通过软件的方式模拟实体服务器，其初衷是为了解决「一种应用占用一台服务器」模式所带来的服务器数量剧增的问题，从而降低数据中心复杂度，简化管理难度。在虚拟化的发展过程中，出现过以下主要虚拟化技术或产品：\n\n * Xen - 由剑桥大学开发的，一款开源的虚拟机监视器。采用 ICA 协议，它通过一种叫做准虚拟化的技术来获取高性能，甚至在一些与传统虚拟技术极度不友好的架构上（如：x86），Xen 也有极佳的表现。Xen 属于半虚拟化的技术，所以其性能损失非常小。Xen 没有指令翻译，其或者使用使能理解和翻译虚拟操作系统发出的未修改指令的 CPU（即：完全虚拟化）；或者修改操作系统，使它发出的指令最优化，便于在虚拟化环境中执行（即：准虚拟化）。\n * KVM - KVM 是一个 Linux kernel 模块，可以使用 modprobe 来加载 KVM，加载后还需要通过其他工具创建虚拟机。KVM 是一个全虚拟化的解决方案，但需要 CPU 支持虚拟化功能。相比 Xen 来说，KVM 可以更加方便的整合进 Linux 内核，但它还需要其它虚拟化软件（如：QEMU）才能实现虚拟化功能。\n * LXC - 即：Linux Container，Linux 容器，是一种轻量级的虚拟化的手段。它可以提供轻量级的虚拟化，以隔离进程和资源，而且不需要提供指令解释机制以及全虚拟化的其他复杂性。容器会有效地将由单个操作系统管理的资源划分到孤立的组中，以更好地在孤立的组之间平衡有冲突的资源使用需求。\n * OpenVZ - 是 SWsoft 公司开发的开源软件，是该公司 Virtuozzo 软件的基础产品，是基于 Linux 平台的操作系统级服务器虚拟化解决方案。通过OpenVZ，可以在单个物理服务器上创建多个相互隔离的虚拟专用服务器(VPS)并以最大的效率共享硬件和管理资源。其上运行虚拟服务器被称为 VPS（Virtual Private Serve），每个 VPS 的运行环境和独立服务器完全一致。OpenVZ 基于 Linux 系统内核及作业系统提供操作系统级虚拟化，在虚拟化过程中资源消耗非常小，官方宣称约 1-2%。\n * Hyper-V - 是微软件推出的一种虚拟化技术，可以采用半虚拟化或全虚拟的方式创建虚拟机。虽然它可以创建 Windows 或 Linux 操作系统，但其本身只能运行在 Windows 系统下，使用范围较为有限。\n * Oracle VM - Oracle 推出的服务器虚拟化软件，基于开源的 Xen 技术，包括 Oracle VM Server 和 Oracle VM Manager 两部分。\n * VMWare - 是一家非常出名虚拟化软件公司，其产品涵盖服务器、桌面等各种虚拟化领域，如：VMware Workstation - 是一款桌面虚拟机软件，可以在一台实体机器上模拟完整的网络环境，并可运行多个 Windows、DOS、Linux 或 Mac 系统，是非常好的开发、测试、部署解决方案。从技术角度来说，VMware Workstation 是一款完全虚拟化产品，可借助硬件辅助在不修改用户操作系统的情况下完整虚拟化操作系统。\n * VMware ESX Server - 是一款适用于任何系统环境的企业级的虚拟机软件，可以认为是 VMware Server 的升级版。相比 VMware Workstation 来说，其功能更加强大，可以用于构建高伸缩和高可靠企业级服务器，并可实现远程管理、高级资源管理控制等高级功能。\n\n\n# Docker虚拟化\n\n\n# 什么是Docker\n\nDocker 是一个开源的应用容器引擎，它让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到安装了任何 Linux 发行版本的机器上。Docker 基于 LXC 来实现类似 VM 的功能，可以在更有限的硬件资源上提供给用户更多的计算资源。与同 VM 等虚拟化的方式不同，LXC 不属于全虚拟化、部分虚拟化或半虚拟化中的任何一个分类，而是一个操作系统级虚拟化。\n\nDocker 是直接运行在宿主操作系统之上的一个容器，使用沙箱机制完全虚拟出一个完整的操作，容器之间不会有任何接口，从而让容器与宿主机之间、容器与容器之间隔离的更加彻底。每个容器会有自己的权限管理，独立的网络与存储栈，及自己的资源管理能，使同一台宿主机上可以友好的共存多个容器。\n\nDocker 借助 Linux 的内核特性，如：控制组（Control Group）、命名空间（Namespace）等，并直接调用操作系统的系统调用接口。从而降低每个容器的系统开销，并实现降低容器复杂度、启动快、资源占用小等特征。\n\n\n# Docker起源\n\n> Docker 历史\n\n2010年，几个搞 IT 的年轻人，在美国旧金山成立了一家名叫「dotCloud」的公司。\n\n这家公司主要提供基于 PaaS 的云计算技术服务。具体来说，是和 LXC 有关的容器技术。\n\n后来，dotCloud 公司将自己的容器技术进行了简化和标准化，并命名为—— Docker。\n\nDocker 技术诞生之后，并没有引起行业的关注。而 dotCloud 公司，作为一家小型创业企业，在激烈的竞争之下，也步履维艰。\n\n正当他们快要坚持不下去的时候，脑子里蹦出了「开源」的想法。\n\n什么是开源」？开源，就是开放源代码。也就是将原来内部保密的程序源代码开放给所有人，然后让大家一起参与进来，贡献代码和意见。\n\n有的软件是一开始就开源的。也有的软件，是混不下去，创造者又不想放弃，所以选择开源。自己养不活，就吃「百家饭」嘛。\n\n2013 年 3 月，dotCloud 公司的创始人之一，Docker 之父，28岁的 Solomon Hykes 正式决定，将 Docker 项目开源。 不开则已，一开惊人。\n\n越来越多的IT工程师发现了 Docker 的优点，然后蜂拥而至，加入 Docker 开源社区。\n\nDocker 的人气迅速攀升，速度之快，令人瞠目结舌。\n\n开源当月，Docker 0.1 版本发布。此后的每一个月，Docker 都会发布一个版本。到 2014 年 6 月 9 日，Docker 1.0 版本正式发布。\n\n此时的 Docker，已经成为行业里人气最火爆的开源技术，没有之一。甚至像 Google、微软、Amazon、VMware 这样的巨头，都对它青睐有加，表示将全力支持。\n\nDocker 和容器技术为什么会这么火爆？说白了，就是因为它「轻」。\n\n在容器技术之前，业界的网红是虚拟机。虚拟机技术的代表，是 VMWare 和 OpenStack。\n\n相信很多人都用过虚拟机。虚拟机，就是在你的操作系统里面，装一个软件，然后通过这个软件，再模拟一台甚至多台「子电脑」出来。\n\n在「子电脑」里，你可以和正常电脑一样运行程序，例如开 QQ。如果你愿意，你可以变出好几个「子电脑」，里面都开上 QQ。「子电脑」和「子电脑」之间，是相互隔离的，互不影响。\n\n虚拟机属于虚拟化技术。而 Docker 这样的容器技术，也是虚拟化技术，属于轻量级的虚拟化。\n\n虚拟机虽然可以隔离出很多「子电脑」，但占用空间更大，启动更慢，虚拟机软件可能还要花钱（例如 VMWare）。\n\n而容器技术恰好没有这些缺点。它不需要虚拟出整个操作系统，只需要虚拟一个小规模的环境（类似「沙箱」）。\n\n它启动时间很快，几秒钟就能完成。而且，它对资源的利用率很高（一台主机可以同时运行几千个 Docker 容器）。此外，它占的空间很小，虚拟机一般要几 GB 到几十 GB 的空间，而容器只需要 MB 级甚至 KB 级。\n\n正因为如此，容器技术受到了热烈的欢迎和追捧，发展迅速。\n\n> Docker 理念\n\nDocker 是基于 Go 语言实现的云开源项目。\n\nDocker 的主要目标是"Build，Ship and Run Any App,Anywhere"，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的 APP（可以是一个 Web 应用或数据库应用等等）及其运行环境能够做到「一次封装，到处运行」。\n\nLinux 容器技术的出现就解决了这样一个问题，而 Docker 就是在它的基础上发展过来的。将应用运行在 Docker 容器上面，而 Docker 容器在任何操作系统上都是一致的，这就实现了跨平台、跨服务器。只需要一次配置好环境，换到别的机子上就可以一键部署好，大大简化了操作。\n\n> Docker 火爆\n\nDocker 最初是 dotCloud 公司创始人、Solomon tykes 在法国期间发起的一个公司内部项目，它是基于 dotCloud 公司多年云服务技术的一次革新，并于 2013 年 3 月以Apache 2.0 授权协议开源，主要项目代码在 Github 上进行维护。Docker 项目后来还加入了 Linux 基金会，并成立推动开放容器联盟（OCI)。\n\nDocker 自开源后受到广泛的关注和讨论，至今其 GitHub 项目已经超过 5 万 7 千个星标和一万多个 fork。甚至由于 Docker 项目的火爆，在2013年底，dotCloud 公司决定改名为 Docker。Docker 最初是在 Ubuntu 12.04 上开发实现的；Red Hat 则从 RHEL 6.5 开始对 Docker 进行支持；Gogle 也在其PaS 产品中广泛应用 Docker。\n\nDocker 使用 Google 公司推出的 Go 语言进行开发实现，基于 Linux 内核的 cgroup,namespace，以及 0verlayFS 类的 Union FS 等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。\n\n\n# Docker能干什么\n\n * 简化配置\n\n这是 Docker 公司宣传的 Docker 的主要使用场景。虚拟机的最大好处是能在你的硬件设施上运行各种配置不一样的平台（软件、系统），Docker 在降低额外开销的情况下提供了同样的功能。它能让你将运行环境和配置放在代码中然后部署，同一个 Docker 的配置可以在不同的环境中使用，这样就降低了硬件要求和应用环境之间耦合度。\n\n * 代码流水线（Code Pipeline）管理\n\n前一个场景对于管理代码的流水线起到了很大的帮助。代码从开发者的机器到最终在生产环境上的部署，需要经过很多的中间环境。而每一个中间环境都有自己微小的差别，Docker 给应用提供了一个从开发到上线均一致的环境，让代码的流水线变得简单不少。\n\n * 提高开发效率\n\n这就带来了一些额外的好处：Docker 能提升开发者的开发效率。详细一点的例子，可以参考 Aater 在 DevOpsDays Austin 2014 大会或者是 DockerCon 上的演讲。\n\n不同的开发环境中，我们都想把两件事做好。一是我们想让开发环境尽量贴近生产环境，二是我们想快速搭建开发环境。\n\n理想状态中，要达到第一个目标，我们需要将每一个服务都跑在独立的虚拟机中以便监控生产环境中服务的运行状态。然而，我们却不想每次都需要网络连接，每次重新编译的时候远程连接上去特别麻烦。这就是 Docker 做的特别好的地方，开发环境的机器通常内存比较小，之前使用虚拟的时候，我们经常需要为开发环境的机器加内存，而现在 Docker 可以轻易的让几十个服务在 Docker 中跑起来。\n\n * 隔离应用\n\n有很多种原因会让你选择在一个机器上运行不同的应用，比如之前提到的提高开发效率的场景等。\n\n我们经常需要考虑两点，一是因为要降低成本而进行服务器整合，二是将一个整体式的应用拆分成松耦合的单个服务（译者注：微服务架构）。如果你想了解为什么松耦合的应用这么重要，请参考 Steve Yege 的这篇论文，文中将 Google 和亚马逊做了比较。\n\n * 整合服务器 正如通过虚拟机来整合多个应用，Docker 隔离应用的能力使得 Docker 可以整合多个服务器以降低成本。由于没有多个操作系统的内存占用，以及能在多个实例之间共享没有使用的内存，Docker 可以比虚拟机提供更好的服务器整合解决方案。\n * 调适能力\n\nDocker 提供了很多的工具，这些工具不一定只是针对容器，但是却适用于容器。它们提供了很多的功能，包括可以为容器设置检查点、设置版本和查看两个容器之间的差别，这些特性可以帮助调试 Bug。你可以在《Docker 拯救世界》的文章中找到这一点的例证。\n\n * 多租户\n\n另外一个 Docker 有意思的使用场景是在多租户的应用中，它可以避免关键应用的重写。我们一个特别的关于这个场景的例子是为 IoT（物联网）的应用开发一个快速、易用的多租户环境。这种多租户的基本代码非常复杂，很难处理，重新规划这样一个应用不但消耗时间，也浪费金钱。\n\n使用 Docker，可以为每一个租户的应用层的多个实例创建隔离的环境，这不仅简单而且成本低廉，当然这一切得益于 Docker 环境的启动速度和其高效的 diff 命令。\n\n * 快速部署\n\n在虚拟机之前，引入新的硬件资源需要消耗几天的时间。Docker 的虚拟化技术将这个时间降到了几分钟，Docker 只是创建一个容器进程而无需启动操作系统，这个过程只需要秒级的时间。这正是 Google 和 Facebook 都看重的特性。\n\n你可以在数据中心创建销毁资源而无需担心重新启动带来的开销。通常数据中心的资源利用率只有 30%，通过使用 Docker 并进行有效的资源分配可以提高资源的利用率。\n\n\n# 为什么是Docker\n\n> 优势 1：一致的运行环境，更轻松的迁移\n\n在开发的时候，在本机测试环境可以跑起来，但是在生产环境跑不起来\n\n这里我们拿 Java Web 应用程序举例，我们一个 java Web 应用程序涉及很多东西，比如 jdk、tomcat、mysql 等软件环境。当这些其中某一项版本不一致的时候，可能就会导致应用程序跑不起来这种情况。Docker 则将程序以及使用软件环境直接打包在一起，无论在那个机器上保证了环境一致。\n\n> 优势 2：对进程进行封装隔离，容器与容器之间互不影响，更高效的利用系统资源\n\n服务器自己的程序挂了，结果发现是别人程序出了问题把内存吃完了，自己程序因为内存不够就挂了\n\n这种也是一种比较常见的情况，如果你的程序重要性不是特别高的话，公司基本上不可能让你的程序独享一台服务器的，这时候你的服务器就会跟公司其他人的程序共享一台服务器，所以不可避免地就会受到其他程序的干扰，导致自己的程序出现问题。Docker就很好解决了环境隔离的问题，别人程序不会影响到自己的程序。\n\n> 优势 3：通过镜像复制 N 多个环境一致容器\n\n公司要弄一个活动，可能会有大量的流量进来，公司需要再多部署几十台服务器\n\n在没有 Docker 的情况下，要在几天内部署几十台服务器，这对运维来说是一件非常折磨人的事，而且每台服务器的环境还不一定一样，就会出现各种问题，最后部署地头皮发麻。用 Docker 的话，我只需要将程序打包到镜像，你要多少台服务，我就给力跑多少容器，极大地提高了部署效率\n\n\n# Docker和虚拟机的区别\n\n> 虚拟机 Virtual Machine 与容器化技术（代表 Docker）都是虚拟化技术，两者的区别在于虚拟化的程度不同。\n\n\n\n可以看出虚拟机非常庞大，重，虚拟机操作系统的环境依赖虚拟机操作系统，虚拟机操作系统依赖虚拟机，虚拟机依赖主机操作系统。获取和传递资源经历每一层\n\n而 Docker 直接依赖操作系统，直接请求操作系统获取数据\n\n * 虚拟机\n   * 基础设施（Infrastructure）。它可以是你的个人电脑，数据中心的服务器，或者是云主机。\n   * 主操作系统（Host Operating System）。你的个人电脑之上，运行的可能是 MacOS，Windows 或者某个 Linux 发行版。\n   * 虚拟机管理系统（Hypervisor）。利用 Hypervisor，可以在主操作系统之上运行多个不同的从操作系统。类型 1 的 Hypervisor 有支持 MacOS 的 HyperKit，支持 Windows 的 Hyper-V 以及支持 Linux 的 KVM。类型 2 的 Hypervisor 有 VirtualBox 和 VMWare。\n   * 操作系统（Guest Operating System）。假设你需要运行 3 个相互隔离的应用，则需要使用 Hypervisor 启动 3 个从操作系统，也就是 3 个虚拟机。这些虚拟机都非常大，也许有 700MB，这就意味着它们将占用 2.1GB 的磁盘空间。更糟糕的是，它们还会消耗很多 CPU 和内存。\n   * 各种依赖。每一个从操作系统都需要安装许多依赖。如果你的的应用需要连接 PostgreSQL 的话，则需要安装 libpq-dev；如果你使用 Ruby 的话，应该需要安装 gems；如果使用其他编程语言，比如 Python 或者 Node.js，都会需要安装对应的依赖库。\n * Docker容器\n   * 主操作系统（Host Operating System）。所有主流的 Linux 发行版都可以运行 Docker。对于 MacOS 和 Windows，也有一些办法「运行」 Docker。\n   * Docker守护进程（Docker Daemon）。Docker 守护进程取代了 Hypervisor，它是运行在操作系统之上的后台进程，负责管理 Docker 容器。\n   * 各种依赖。对于 Docker，应用的所有依赖都打包在 Docker 镜像中，Docker 容器是基于 Docker 镜像创建的。\n   * 应用。应用的源代码与它的依赖都打包在 Docker 镜像中，不同的应用需要不同的 Docker 镜像。不同的应用运行在不同的 Docker 容器中，它们是相互隔离的。\n\n虚拟机是在物理资源层面实现的隔离，相对于虚拟机，Docker 是你 APP 层面实现的隔离，并且省去了虚拟机操作系统（Guest OS），从而节省了一部分的系统资源；Docker 守护进程可以直接与主操作系统进行通信，为各个 Docker 容器分配资源；它还可以将容器与主操作系统隔离，并将各个容器互相隔离。虚拟机启动需要数分钟，而 Docker 容器可以在数毫秒内启动。由于没有臃肿的从操作系统，Docker 可以节省大量的磁盘空间以及其他系统资源。\n\n虚拟机与容器 Docker 的区别，在于 vm 多了一层 guest OS，虚拟机的 Hypervisor 会对硬件资源也进行虚拟化，而容器 Docker 会直接使用宿主机的硬件资源。\n\n下面我们采用形象的比喻区分两者的隔离级别：\n\n * 服务器：比作一个大型的仓管基地，包含场地与零散的货物——相当于各种服务器资源。\n * 虚拟机技术：比作仓库，拥有独立的空间堆放各种货物或集装箱，仓库之间完全独立——仓库相当于各种系统，独立的应用系统和操作系统。\n * Docker：比作集装箱，操作各种货物的打包——将各种应用程序和他们所依赖的运行环境打包成标准的容器，容器之间隔离。\n\n\n# 虚拟技术对比\n\n * 隔离性\n\n在于隔离性上面，由于 vm 对操作系统也进行了虚拟化，隔离的更加彻底。而 Docker 共享宿主机的操作系统，隔离性较差。\n\n * 运行效率\n\n由于 vm 的隔离操作，导致生成虚拟机的速率大大低于容器 Docker 生成的速度，因为 Docker 直接利用宿主机的系统内核。比如 openstack 能够以 10 台 /min的速度创建虚拟机，而 Docker 可以做到在几秒钟之内创建大量容器，它们的启动速度是在数量级上的差距。\n\n因为虚拟机增加了一层虚拟硬件层，运行在虚拟机上的应用程序在进行数值计算时是运行在 Hypervisor 虚拟的 CPU 上的；另外一方面是由于计算程序本身的特性导致的差异。虚拟机虚拟的 CPU 架构不同于实际 CPU 架构，数值计算程序一般针对特定的 CPU 架构有一定的优化措施，虚拟化使这些措施作废，甚至起到反效果。\n\n * 资源利用率\n\n在资源利用率上虚拟机由于隔离更彻底，因此利用率也会相对较低。\n\n因为虚拟机增加了一层虚拟硬件层，运行在虚拟机上的应用程序在进行数值计算时是运行在 Hypervisor 虚拟的 CPU上 的；另外一方面是由于计算程序本身的特性导致的差异。虚拟机虚拟的 CPU 架构不同于实际 CPU 架构，数值计算程序一般针对特定的cpu架构有一定的优化措施，虚拟化使这些措施作废，甚至起到反效果。比如对于本次实验的平台，实际的 CPU 架构是 2 块物理 CPU。\n\n\n# Docker的logo含义\n\n\n\nDocker 官方的 logo 是鲸鱼，即是 Docker 引擎。\n\n鲸鱼身上的箱子：代表日后咱们通过 Docker 启动一个一个软件环境 MySQL，一个软件环境称之为一个容器。容器与容器隔离，互相之间互不影响，对进程封装隔离，保证容器与容器的独立性\n\n           传统虚拟机                     DOCKER 容器\n磁盘占用       几个 GB 到几十个 GB 左右          几十 MB 到几百 MB 左右\nCPU 内存占用   虚拟操作系统非常占用 CPU 和内存        Docker 引擎占用极低\n启动速度       （从开机到运行项目）几分钟             （从开启容器到运行项目）几秒\n安装管理       需要专门的运维技术                 安装、管理方便\n应用部署       每次部署都费时费力                 从第二次部署开始轻松便捷，第一次慢些\n耦合性        多个应用服务安装到一起，容易互相影响，争夺资源   每个应用服务一个容器，达成隔离\n系统依赖       无                         需求相同或类似的内核，目前推荐是 Linux\n\n\n# Docker核心架构\n\n仓库、镜像、容器的关系\n\n\n\n * 镜像（image）\n\nDocker 镜像（Image）就是一个只读的模板。镜像可以用来创建 Docker 容器，一个镜像可以创建很多容器。就好似 Java 中的类和对象，类就是镜像，容器就是对象！\n\n * 容器（container）：\n\nDocker 利用容器（Container）独立运行的一个或一组应用。容器是用镜像创建的运行实例。\n\n它可以被启动、开始、停止、删除。每个容器都是相互隔离的，保证安全的平台。\n\n可以把容器看做是一个简易版的 Linux 环境（包括 root 用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序\n\n容器的定义和镜像几乎一模一样，也是一堆层的统一视角，唯一区别在于容器的最上面那一层是可读可写的。\n\n * 仓库（repository）：\n\n仓库（Repository）是集中存放镜像文件的场所。\n\n仓库(Repository)和仓库注册服务器（Registry）是有区别的。仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）。\n\n仓库分为公开仓库（Public）和私有仓库（Private）两种形式\n\n最大的公开仓库是 Docker Hub(https://hub.docker.com/)，存放了数量庞大的镜像供用户下载。国内的公开仓库包括阿里云、网易云 等\n\n小结：\n\nDocker 本身是一个容器运行载体或称之为管理引擎。我们把应用程序和配置依赖打包好形成一个可交付的运行环境，这个打包好的运行环境就似乎 image 镜像文件。只有通过这个镜像文件才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。\n\nimage 文件生成的容器实例，本身也是一个文件，称为镜像文件\n\n一个容器运行一种服务，当我们需要的时候，就可以通过 Docker 客户端创建一个对应的运行实例，也就是我们的容器\n\n至于仓库，就是放了一堆镜像的地方，我们可以把镜像发布到仓库中，需要的时候从仓库中拉下来就可以了。\n\n\n\n\n# 核心架构图\n\n\n\n\n# Docker相关官网\n\n * Docker 官方主页: https://www.docker.com\n * Docker 官方博客: https://blog.docker.com\n * Docker 官方文档: https://docs.docker.com\n * Docker 安装文档：https://docs.docker.com/engine/install\n * Docker Store: https://store.docker.com\n * Docker Cloud: https://cloud.docker.com\n * Docker Hub: https://hub.docker.com\n * Docker 中文文档：https://vuepress.mirror.docker-practice.com/\n\n\n# 参考文章\n\nhttps://www.pdai.tech/md/devops/docker/docker-01-docker-vm.html',normalizedContent:' * 什么是虚拟化技术\n   * 什么是虚拟化\n   * 虚拟化技术分类\n   * 几种虚拟化技术\n * docker虚拟化\n   * 什么是docker\n   * docker起源\n   * docker能干什么\n   * 为什么是docker\n * docker和虚拟机的区别\n   * 虚拟技术对比\n   * docker的logo含义\n * docker核心架构\n * 核心架构图\n * docker相关官网\n * 参考文章\n\n\n\n\n# 什么是虚拟化技术\n\n\n# 什么是虚拟化\n\n在计算机技术中，虚拟化（virtualization）是一种资源管理技术。它是将计算机的各种实体资源，如：服务器、网络、内存及存储等，予以抽象、转换后呈现出来，打破实体结构间的不可切割的障碍，使用户可以用更好的方式来利用这些资源。\n\n虚拟化的目的是为了在同一个主机上运行多个系统或应用，从而提高系统资源的利用率，并带来降低成本、方便管理和容错容灾等好处。\n\n\n# 虚拟化技术分类\n\n从实现形式来分，虚拟化技术可分为基于硬件的虚拟化和基于软件的虚拟化。\n\n# 硬件虚拟化\n\n硬件虚拟化就是硬件物理平台本身提供了对特殊指令的截获和重定向的支持。支持虚拟化的硬件，也是一些基于硬件实现软件虚拟化技术的关键。在基于硬件实现软件虚拟化的技术中，在硬件是实现虚拟化的基础，硬件(主要是cpu)会为虚拟化软件提供支持，从而实现硬件资源的虚拟化。\n\n支持虚拟化的硬件有：\n\n * intel-vt-(intel virtualization technology)，intel 公司为解决纯软件虚拟化解决方案在可靠性、安全性和性能上的不足而引进的技术。它可以让一个cpu工作起来像多个cpu在并行运行，从而使得在一部电脑内同时运行多个操作系统成为可能\n * amd-v-(amd virtualization)，是 amd 公司的虚拟化技术。它是对 x86 处理器系统架构的一组硬件扩展和硬件辅助虚拟化技术，可以简化纯软件的虚拟化解决方案，改进 vmm（虚拟机监视器）的设计，更充分地利用硬件资源，提高服务器和数据中心的虚拟化效率\n\n# 软件虚拟化\n\n软件虚拟化就是利用软件技术，在现有的物理平台上实现对物理平台访问的截获和模拟。在软件虚拟化技术中，有些技术不需要硬件支持，如：qemu；而有些软件虚拟化技术，则依赖硬件支持，如：vmware、kvm。\n\n对软件虚拟化进行细分，又可以分为以下几类：\n\n * 完全虚拟化：（full virtualization）虚拟机模拟完整的底层硬件环境和特权指令的执行过程，使客户机操作系统可以独立运行。支持完全虚拟化的软件有：parallels workstation、virtualbox、virtual iron、oracle vm、virtual pc、virtual server、hyper-v、vmware workstation、qemu等\n * 硬件辅助虚拟化：（hardware-assisted virtualization）是指通过硬件辅助支持模拟运行环境，使客户机操作系统可以独立运行，实现完全虚拟化的功能。支持硬件辅助虚拟化的软件有：linux kvm、vmware workstation、vmware fusion、virtual pc、xen、virtualbox、parallels workstation等\n * 部分虚拟化：（partial virtualization）只针对部分硬件资源进行虚拟化，虚拟机模拟部分底层硬件环境，特别是地址空间。这样的环境支持资源共享和线程独立，但是不允许建立独立的客户机操作系统。\n * 平行虚拟化：（para-virtualization）虚拟机不需要模拟硬件，而是将部分硬件接口以软件的形式提供给客户机操作系统。如：早期的 xen。\n * 操作系统层虚拟化：（os-level virtualization）这种技术将操作系统内核虚拟化，可以允许使用者空间软件实例被分割成几个独立的单元，在内核中运行，而不是只有一个单一实例运行。这个软件实例，也被称为是一个容器（containers）、虚拟引擎（virtualization engine）、虚拟专用服务器（virtual private servers）。每个容器的进程是独立的，对于使用者来说，就像是在使用自己的专用服务器。 docker 容器技术就是属于操作系统层虚拟化的范畴。\n\n\n# 几种虚拟化技术\n\n虚拟化是通过软件的方式模拟实体服务器，其初衷是为了解决「一种应用占用一台服务器」模式所带来的服务器数量剧增的问题，从而降低数据中心复杂度，简化管理难度。在虚拟化的发展过程中，出现过以下主要虚拟化技术或产品：\n\n * xen - 由剑桥大学开发的，一款开源的虚拟机监视器。采用 ica 协议，它通过一种叫做准虚拟化的技术来获取高性能，甚至在一些与传统虚拟技术极度不友好的架构上（如：x86），xen 也有极佳的表现。xen 属于半虚拟化的技术，所以其性能损失非常小。xen 没有指令翻译，其或者使用使能理解和翻译虚拟操作系统发出的未修改指令的 cpu（即：完全虚拟化）；或者修改操作系统，使它发出的指令最优化，便于在虚拟化环境中执行（即：准虚拟化）。\n * kvm - kvm 是一个 linux kernel 模块，可以使用 modprobe 来加载 kvm，加载后还需要通过其他工具创建虚拟机。kvm 是一个全虚拟化的解决方案，但需要 cpu 支持虚拟化功能。相比 xen 来说，kvm 可以更加方便的整合进 linux 内核，但它还需要其它虚拟化软件（如：qemu）才能实现虚拟化功能。\n * lxc - 即：linux container，linux 容器，是一种轻量级的虚拟化的手段。它可以提供轻量级的虚拟化，以隔离进程和资源，而且不需要提供指令解释机制以及全虚拟化的其他复杂性。容器会有效地将由单个操作系统管理的资源划分到孤立的组中，以更好地在孤立的组之间平衡有冲突的资源使用需求。\n * openvz - 是 swsoft 公司开发的开源软件，是该公司 virtuozzo 软件的基础产品，是基于 linux 平台的操作系统级服务器虚拟化解决方案。通过openvz，可以在单个物理服务器上创建多个相互隔离的虚拟专用服务器(vps)并以最大的效率共享硬件和管理资源。其上运行虚拟服务器被称为 vps（virtual private serve），每个 vps 的运行环境和独立服务器完全一致。openvz 基于 linux 系统内核及作业系统提供操作系统级虚拟化，在虚拟化过程中资源消耗非常小，官方宣称约 1-2%。\n * hyper-v - 是微软件推出的一种虚拟化技术，可以采用半虚拟化或全虚拟的方式创建虚拟机。虽然它可以创建 windows 或 linux 操作系统，但其本身只能运行在 windows 系统下，使用范围较为有限。\n * oracle vm - oracle 推出的服务器虚拟化软件，基于开源的 xen 技术，包括 oracle vm server 和 oracle vm manager 两部分。\n * vmware - 是一家非常出名虚拟化软件公司，其产品涵盖服务器、桌面等各种虚拟化领域，如：vmware workstation - 是一款桌面虚拟机软件，可以在一台实体机器上模拟完整的网络环境，并可运行多个 windows、dos、linux 或 mac 系统，是非常好的开发、测试、部署解决方案。从技术角度来说，vmware workstation 是一款完全虚拟化产品，可借助硬件辅助在不修改用户操作系统的情况下完整虚拟化操作系统。\n * vmware esx server - 是一款适用于任何系统环境的企业级的虚拟机软件，可以认为是 vmware server 的升级版。相比 vmware workstation 来说，其功能更加强大，可以用于构建高伸缩和高可靠企业级服务器，并可实现远程管理、高级资源管理控制等高级功能。\n\n\n# docker虚拟化\n\n\n# 什么是docker\n\ndocker 是一个开源的应用容器引擎，它让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到安装了任何 linux 发行版本的机器上。docker 基于 lxc 来实现类似 vm 的功能，可以在更有限的硬件资源上提供给用户更多的计算资源。与同 vm 等虚拟化的方式不同，lxc 不属于全虚拟化、部分虚拟化或半虚拟化中的任何一个分类，而是一个操作系统级虚拟化。\n\ndocker 是直接运行在宿主操作系统之上的一个容器，使用沙箱机制完全虚拟出一个完整的操作，容器之间不会有任何接口，从而让容器与宿主机之间、容器与容器之间隔离的更加彻底。每个容器会有自己的权限管理，独立的网络与存储栈，及自己的资源管理能，使同一台宿主机上可以友好的共存多个容器。\n\ndocker 借助 linux 的内核特性，如：控制组（control group）、命名空间（namespace）等，并直接调用操作系统的系统调用接口。从而降低每个容器的系统开销，并实现降低容器复杂度、启动快、资源占用小等特征。\n\n\n# docker起源\n\n> docker 历史\n\n2010年，几个搞 it 的年轻人，在美国旧金山成立了一家名叫「dotcloud」的公司。\n\n这家公司主要提供基于 paas 的云计算技术服务。具体来说，是和 lxc 有关的容器技术。\n\n后来，dotcloud 公司将自己的容器技术进行了简化和标准化，并命名为—— docker。\n\ndocker 技术诞生之后，并没有引起行业的关注。而 dotcloud 公司，作为一家小型创业企业，在激烈的竞争之下，也步履维艰。\n\n正当他们快要坚持不下去的时候，脑子里蹦出了「开源」的想法。\n\n什么是开源」？开源，就是开放源代码。也就是将原来内部保密的程序源代码开放给所有人，然后让大家一起参与进来，贡献代码和意见。\n\n有的软件是一开始就开源的。也有的软件，是混不下去，创造者又不想放弃，所以选择开源。自己养不活，就吃「百家饭」嘛。\n\n2013 年 3 月，dotcloud 公司的创始人之一，docker 之父，28岁的 solomon hykes 正式决定，将 docker 项目开源。 不开则已，一开惊人。\n\n越来越多的it工程师发现了 docker 的优点，然后蜂拥而至，加入 docker 开源社区。\n\ndocker 的人气迅速攀升，速度之快，令人瞠目结舌。\n\n开源当月，docker 0.1 版本发布。此后的每一个月，docker 都会发布一个版本。到 2014 年 6 月 9 日，docker 1.0 版本正式发布。\n\n此时的 docker，已经成为行业里人气最火爆的开源技术，没有之一。甚至像 google、微软、amazon、vmware 这样的巨头，都对它青睐有加，表示将全力支持。\n\ndocker 和容器技术为什么会这么火爆？说白了，就是因为它「轻」。\n\n在容器技术之前，业界的网红是虚拟机。虚拟机技术的代表，是 vmware 和 openstack。\n\n相信很多人都用过虚拟机。虚拟机，就是在你的操作系统里面，装一个软件，然后通过这个软件，再模拟一台甚至多台「子电脑」出来。\n\n在「子电脑」里，你可以和正常电脑一样运行程序，例如开 qq。如果你愿意，你可以变出好几个「子电脑」，里面都开上 qq。「子电脑」和「子电脑」之间，是相互隔离的，互不影响。\n\n虚拟机属于虚拟化技术。而 docker 这样的容器技术，也是虚拟化技术，属于轻量级的虚拟化。\n\n虚拟机虽然可以隔离出很多「子电脑」，但占用空间更大，启动更慢，虚拟机软件可能还要花钱（例如 vmware）。\n\n而容器技术恰好没有这些缺点。它不需要虚拟出整个操作系统，只需要虚拟一个小规模的环境（类似「沙箱」）。\n\n它启动时间很快，几秒钟就能完成。而且，它对资源的利用率很高（一台主机可以同时运行几千个 docker 容器）。此外，它占的空间很小，虚拟机一般要几 gb 到几十 gb 的空间，而容器只需要 mb 级甚至 kb 级。\n\n正因为如此，容器技术受到了热烈的欢迎和追捧，发展迅速。\n\n> docker 理念\n\ndocker 是基于 go 语言实现的云开源项目。\n\ndocker 的主要目标是"build，ship and run any app,anywhere"，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的 app（可以是一个 web 应用或数据库应用等等）及其运行环境能够做到「一次封装，到处运行」。\n\nlinux 容器技术的出现就解决了这样一个问题，而 docker 就是在它的基础上发展过来的。将应用运行在 docker 容器上面，而 docker 容器在任何操作系统上都是一致的，这就实现了跨平台、跨服务器。只需要一次配置好环境，换到别的机子上就可以一键部署好，大大简化了操作。\n\n> docker 火爆\n\ndocker 最初是 dotcloud 公司创始人、solomon tykes 在法国期间发起的一个公司内部项目，它是基于 dotcloud 公司多年云服务技术的一次革新，并于 2013 年 3 月以apache 2.0 授权协议开源，主要项目代码在 github 上进行维护。docker 项目后来还加入了 linux 基金会，并成立推动开放容器联盟（oci)。\n\ndocker 自开源后受到广泛的关注和讨论，至今其 github 项目已经超过 5 万 7 千个星标和一万多个 fork。甚至由于 docker 项目的火爆，在2013年底，dotcloud 公司决定改名为 docker。docker 最初是在 ubuntu 12.04 上开发实现的；red hat 则从 rhel 6.5 开始对 docker 进行支持；gogle 也在其pas 产品中广泛应用 docker。\n\ndocker 使用 google 公司推出的 go 语言进行开发实现，基于 linux 内核的 cgroup,namespace，以及 0verlayfs 类的 union fs 等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。\n\n\n# docker能干什么\n\n * 简化配置\n\n这是 docker 公司宣传的 docker 的主要使用场景。虚拟机的最大好处是能在你的硬件设施上运行各种配置不一样的平台（软件、系统），docker 在降低额外开销的情况下提供了同样的功能。它能让你将运行环境和配置放在代码中然后部署，同一个 docker 的配置可以在不同的环境中使用，这样就降低了硬件要求和应用环境之间耦合度。\n\n * 代码流水线（code pipeline）管理\n\n前一个场景对于管理代码的流水线起到了很大的帮助。代码从开发者的机器到最终在生产环境上的部署，需要经过很多的中间环境。而每一个中间环境都有自己微小的差别，docker 给应用提供了一个从开发到上线均一致的环境，让代码的流水线变得简单不少。\n\n * 提高开发效率\n\n这就带来了一些额外的好处：docker 能提升开发者的开发效率。详细一点的例子，可以参考 aater 在 devopsdays austin 2014 大会或者是 dockercon 上的演讲。\n\n不同的开发环境中，我们都想把两件事做好。一是我们想让开发环境尽量贴近生产环境，二是我们想快速搭建开发环境。\n\n理想状态中，要达到第一个目标，我们需要将每一个服务都跑在独立的虚拟机中以便监控生产环境中服务的运行状态。然而，我们却不想每次都需要网络连接，每次重新编译的时候远程连接上去特别麻烦。这就是 docker 做的特别好的地方，开发环境的机器通常内存比较小，之前使用虚拟的时候，我们经常需要为开发环境的机器加内存，而现在 docker 可以轻易的让几十个服务在 docker 中跑起来。\n\n * 隔离应用\n\n有很多种原因会让你选择在一个机器上运行不同的应用，比如之前提到的提高开发效率的场景等。\n\n我们经常需要考虑两点，一是因为要降低成本而进行服务器整合，二是将一个整体式的应用拆分成松耦合的单个服务（译者注：微服务架构）。如果你想了解为什么松耦合的应用这么重要，请参考 steve yege 的这篇论文，文中将 google 和亚马逊做了比较。\n\n * 整合服务器 正如通过虚拟机来整合多个应用，docker 隔离应用的能力使得 docker 可以整合多个服务器以降低成本。由于没有多个操作系统的内存占用，以及能在多个实例之间共享没有使用的内存，docker 可以比虚拟机提供更好的服务器整合解决方案。\n * 调适能力\n\ndocker 提供了很多的工具，这些工具不一定只是针对容器，但是却适用于容器。它们提供了很多的功能，包括可以为容器设置检查点、设置版本和查看两个容器之间的差别，这些特性可以帮助调试 bug。你可以在《docker 拯救世界》的文章中找到这一点的例证。\n\n * 多租户\n\n另外一个 docker 有意思的使用场景是在多租户的应用中，它可以避免关键应用的重写。我们一个特别的关于这个场景的例子是为 iot（物联网）的应用开发一个快速、易用的多租户环境。这种多租户的基本代码非常复杂，很难处理，重新规划这样一个应用不但消耗时间，也浪费金钱。\n\n使用 docker，可以为每一个租户的应用层的多个实例创建隔离的环境，这不仅简单而且成本低廉，当然这一切得益于 docker 环境的启动速度和其高效的 diff 命令。\n\n * 快速部署\n\n在虚拟机之前，引入新的硬件资源需要消耗几天的时间。docker 的虚拟化技术将这个时间降到了几分钟，docker 只是创建一个容器进程而无需启动操作系统，这个过程只需要秒级的时间。这正是 google 和 facebook 都看重的特性。\n\n你可以在数据中心创建销毁资源而无需担心重新启动带来的开销。通常数据中心的资源利用率只有 30%，通过使用 docker 并进行有效的资源分配可以提高资源的利用率。\n\n\n# 为什么是docker\n\n> 优势 1：一致的运行环境，更轻松的迁移\n\n在开发的时候，在本机测试环境可以跑起来，但是在生产环境跑不起来\n\n这里我们拿 java web 应用程序举例，我们一个 java web 应用程序涉及很多东西，比如 jdk、tomcat、mysql 等软件环境。当这些其中某一项版本不一致的时候，可能就会导致应用程序跑不起来这种情况。docker 则将程序以及使用软件环境直接打包在一起，无论在那个机器上保证了环境一致。\n\n> 优势 2：对进程进行封装隔离，容器与容器之间互不影响，更高效的利用系统资源\n\n服务器自己的程序挂了，结果发现是别人程序出了问题把内存吃完了，自己程序因为内存不够就挂了\n\n这种也是一种比较常见的情况，如果你的程序重要性不是特别高的话，公司基本上不可能让你的程序独享一台服务器的，这时候你的服务器就会跟公司其他人的程序共享一台服务器，所以不可避免地就会受到其他程序的干扰，导致自己的程序出现问题。docker就很好解决了环境隔离的问题，别人程序不会影响到自己的程序。\n\n> 优势 3：通过镜像复制 n 多个环境一致容器\n\n公司要弄一个活动，可能会有大量的流量进来，公司需要再多部署几十台服务器\n\n在没有 docker 的情况下，要在几天内部署几十台服务器，这对运维来说是一件非常折磨人的事，而且每台服务器的环境还不一定一样，就会出现各种问题，最后部署地头皮发麻。用 docker 的话，我只需要将程序打包到镜像，你要多少台服务，我就给力跑多少容器，极大地提高了部署效率\n\n\n# docker和虚拟机的区别\n\n> 虚拟机 virtual machine 与容器化技术（代表 docker）都是虚拟化技术，两者的区别在于虚拟化的程度不同。\n\n\n\n可以看出虚拟机非常庞大，重，虚拟机操作系统的环境依赖虚拟机操作系统，虚拟机操作系统依赖虚拟机，虚拟机依赖主机操作系统。获取和传递资源经历每一层\n\n而 docker 直接依赖操作系统，直接请求操作系统获取数据\n\n * 虚拟机\n   * 基础设施（infrastructure）。它可以是你的个人电脑，数据中心的服务器，或者是云主机。\n   * 主操作系统（host operating system）。你的个人电脑之上，运行的可能是 macos，windows 或者某个 linux 发行版。\n   * 虚拟机管理系统（hypervisor）。利用 hypervisor，可以在主操作系统之上运行多个不同的从操作系统。类型 1 的 hypervisor 有支持 macos 的 hyperkit，支持 windows 的 hyper-v 以及支持 linux 的 kvm。类型 2 的 hypervisor 有 virtualbox 和 vmware。\n   * 操作系统（guest operating system）。假设你需要运行 3 个相互隔离的应用，则需要使用 hypervisor 启动 3 个从操作系统，也就是 3 个虚拟机。这些虚拟机都非常大，也许有 700mb，这就意味着它们将占用 2.1gb 的磁盘空间。更糟糕的是，它们还会消耗很多 cpu 和内存。\n   * 各种依赖。每一个从操作系统都需要安装许多依赖。如果你的的应用需要连接 postgresql 的话，则需要安装 libpq-dev；如果你使用 ruby 的话，应该需要安装 gems；如果使用其他编程语言，比如 python 或者 node.js，都会需要安装对应的依赖库。\n * docker容器\n   * 主操作系统（host operating system）。所有主流的 linux 发行版都可以运行 docker。对于 macos 和 windows，也有一些办法「运行」 docker。\n   * docker守护进程（docker daemon）。docker 守护进程取代了 hypervisor，它是运行在操作系统之上的后台进程，负责管理 docker 容器。\n   * 各种依赖。对于 docker，应用的所有依赖都打包在 docker 镜像中，docker 容器是基于 docker 镜像创建的。\n   * 应用。应用的源代码与它的依赖都打包在 docker 镜像中，不同的应用需要不同的 docker 镜像。不同的应用运行在不同的 docker 容器中，它们是相互隔离的。\n\n虚拟机是在物理资源层面实现的隔离，相对于虚拟机，docker 是你 app 层面实现的隔离，并且省去了虚拟机操作系统（guest os），从而节省了一部分的系统资源；docker 守护进程可以直接与主操作系统进行通信，为各个 docker 容器分配资源；它还可以将容器与主操作系统隔离，并将各个容器互相隔离。虚拟机启动需要数分钟，而 docker 容器可以在数毫秒内启动。由于没有臃肿的从操作系统，docker 可以节省大量的磁盘空间以及其他系统资源。\n\n虚拟机与容器 docker 的区别，在于 vm 多了一层 guest os，虚拟机的 hypervisor 会对硬件资源也进行虚拟化，而容器 docker 会直接使用宿主机的硬件资源。\n\n下面我们采用形象的比喻区分两者的隔离级别：\n\n * 服务器：比作一个大型的仓管基地，包含场地与零散的货物——相当于各种服务器资源。\n * 虚拟机技术：比作仓库，拥有独立的空间堆放各种货物或集装箱，仓库之间完全独立——仓库相当于各种系统，独立的应用系统和操作系统。\n * docker：比作集装箱，操作各种货物的打包——将各种应用程序和他们所依赖的运行环境打包成标准的容器，容器之间隔离。\n\n\n# 虚拟技术对比\n\n * 隔离性\n\n在于隔离性上面，由于 vm 对操作系统也进行了虚拟化，隔离的更加彻底。而 docker 共享宿主机的操作系统，隔离性较差。\n\n * 运行效率\n\n由于 vm 的隔离操作，导致生成虚拟机的速率大大低于容器 docker 生成的速度，因为 docker 直接利用宿主机的系统内核。比如 openstack 能够以 10 台 /min的速度创建虚拟机，而 docker 可以做到在几秒钟之内创建大量容器，它们的启动速度是在数量级上的差距。\n\n因为虚拟机增加了一层虚拟硬件层，运行在虚拟机上的应用程序在进行数值计算时是运行在 hypervisor 虚拟的 cpu 上的；另外一方面是由于计算程序本身的特性导致的差异。虚拟机虚拟的 cpu 架构不同于实际 cpu 架构，数值计算程序一般针对特定的 cpu 架构有一定的优化措施，虚拟化使这些措施作废，甚至起到反效果。\n\n * 资源利用率\n\n在资源利用率上虚拟机由于隔离更彻底，因此利用率也会相对较低。\n\n因为虚拟机增加了一层虚拟硬件层，运行在虚拟机上的应用程序在进行数值计算时是运行在 hypervisor 虚拟的 cpu上 的；另外一方面是由于计算程序本身的特性导致的差异。虚拟机虚拟的 cpu 架构不同于实际 cpu 架构，数值计算程序一般针对特定的cpu架构有一定的优化措施，虚拟化使这些措施作废，甚至起到反效果。比如对于本次实验的平台，实际的 cpu 架构是 2 块物理 cpu。\n\n\n# docker的logo含义\n\n\n\ndocker 官方的 logo 是鲸鱼，即是 docker 引擎。\n\n鲸鱼身上的箱子：代表日后咱们通过 docker 启动一个一个软件环境 mysql，一个软件环境称之为一个容器。容器与容器隔离，互相之间互不影响，对进程封装隔离，保证容器与容器的独立性\n\n           传统虚拟机                     docker 容器\n磁盘占用       几个 gb 到几十个 gb 左右          几十 mb 到几百 mb 左右\ncpu 内存占用   虚拟操作系统非常占用 cpu 和内存        docker 引擎占用极低\n启动速度       （从开机到运行项目）几分钟             （从开启容器到运行项目）几秒\n安装管理       需要专门的运维技术                 安装、管理方便\n应用部署       每次部署都费时费力                 从第二次部署开始轻松便捷，第一次慢些\n耦合性        多个应用服务安装到一起，容易互相影响，争夺资源   每个应用服务一个容器，达成隔离\n系统依赖       无                         需求相同或类似的内核，目前推荐是 linux\n\n\n# docker核心架构\n\n仓库、镜像、容器的关系\n\n\n\n * 镜像（image）\n\ndocker 镜像（image）就是一个只读的模板。镜像可以用来创建 docker 容器，一个镜像可以创建很多容器。就好似 java 中的类和对象，类就是镜像，容器就是对象！\n\n * 容器（container）：\n\ndocker 利用容器（container）独立运行的一个或一组应用。容器是用镜像创建的运行实例。\n\n它可以被启动、开始、停止、删除。每个容器都是相互隔离的，保证安全的平台。\n\n可以把容器看做是一个简易版的 linux 环境（包括 root 用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序\n\n容器的定义和镜像几乎一模一样，也是一堆层的统一视角，唯一区别在于容器的最上面那一层是可读可写的。\n\n * 仓库（repository）：\n\n仓库（repository）是集中存放镜像文件的场所。\n\n仓库(repository)和仓库注册服务器（registry）是有区别的。仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）。\n\n仓库分为公开仓库（public）和私有仓库（private）两种形式\n\n最大的公开仓库是 docker hub(https://hub.docker.com/)，存放了数量庞大的镜像供用户下载。国内的公开仓库包括阿里云、网易云 等\n\n小结：\n\ndocker 本身是一个容器运行载体或称之为管理引擎。我们把应用程序和配置依赖打包好形成一个可交付的运行环境，这个打包好的运行环境就似乎 image 镜像文件。只有通过这个镜像文件才能生成 docker 容器。image 文件可以看作是容器的模板。docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。\n\nimage 文件生成的容器实例，本身也是一个文件，称为镜像文件\n\n一个容器运行一种服务，当我们需要的时候，就可以通过 docker 客户端创建一个对应的运行实例，也就是我们的容器\n\n至于仓库，就是放了一堆镜像的地方，我们可以把镜像发布到仓库中，需要的时候从仓库中拉下来就可以了。\n\n\n\n\n# 核心架构图\n\n\n\n\n# docker相关官网\n\n * docker 官方主页: https://www.docker.com\n * docker 官方博客: https://blog.docker.com\n * docker 官方文档: https://docs.docker.com\n * docker 安装文档：https://docs.docker.com/engine/install\n * docker store: https://store.docker.com\n * docker cloud: https://cloud.docker.com\n * docker hub: https://hub.docker.com\n * docker 中文文档：https://vuepress.mirror.docker-practice.com/\n\n\n# 参考文章\n\nhttps://www.pdai.tech/md/devops/docker/docker-01-docker-vm.html',charsets:{cjk:!0},lastUpdated:"2022/04/05, 14:44:34"},{title:"Docker - 安装",frontmatter:{title:"Docker - 安装",date:"2021-11-19T14:34:46.000Z",permalink:"/docker/install/",categories:["Docker"],tags:["容器部署"],readingShow:"top"},regularPath:"/40.%E5%B7%A5%E5%85%B7/40.%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2%20-%20Docker/06.Docker%20-%20%E5%AE%89%E8%A3%85.html",relativePath:"40.工具/40.容器部署 - Docker/06.Docker - 安装.md",key:"v-7c8ad7a7",path:"/docker/install/",headers:[{level:2,title:"操作系统要求",slug:"操作系统要求",normalizedTitle:"操作系统要求",charIndex:130},{level:2,title:"卸载旧版本",slug:"卸载旧版本",normalizedTitle:"卸载旧版本",charIndex:140},{level:2,title:"安装方法",slug:"安装方法",normalizedTitle:"安装方法",charIndex:149},{level:3,title:"使用存储库安装",slug:"使用存储库安装",normalizedTitle:"使用存储库安装",charIndex:159},{level:3,title:"从包安装",slug:"从包安装",normalizedTitle:"从包安装",charIndex:172},{level:3,title:"便利脚本安装",slug:"便利脚本安装",normalizedTitle:"便利脚本安装",charIndex:182},{level:2,title:"安装进阶",slug:"安装进阶",normalizedTitle:"安装进阶",charIndex:192},{level:3,title:"以非root用户管理Docker",slug:"以非root用户管理docker",normalizedTitle:"以非root用户管理docker",charIndex:202},{level:3,title:"配置Docker开机启动",slug:"配置docker开机启动",normalizedTitle:"配置docker开机启动",charIndex:224},{level:2,title:"仓库配置",slug:"仓库配置",normalizedTitle:"仓库配置",charIndex:240},{level:3,title:"Docker 官方中国的镜像加速器",slug:"docker-官方中国的镜像加速器",normalizedTitle:"docker 官方中国的镜像加速器",charIndex:250},{level:3,title:"配置阿里云镜像加速器",slug:"配置阿里云镜像加速器",normalizedTitle:"配置阿里云镜像加速器",charIndex:273},{level:2,title:"镜像查看和拉取",slug:"镜像查看和拉取",normalizedTitle:"镜像查看和拉取",charIndex:287},{level:2,title:"卸载Docker引擎",slug:"卸载docker引擎",normalizedTitle:"卸载docker引擎",charIndex:298},{level:2,title:"参考文章",slug:"参考文章",normalizedTitle:"参考文章",charIndex:312}],headersStr:"操作系统要求 卸载旧版本 安装方法 使用存储库安装 从包安装 便利脚本安装 安装进阶 以非root用户管理Docker 配置Docker开机启动 仓库配置 Docker 官方中国的镜像加速器 配置阿里云镜像加速器 镜像查看和拉取 卸载Docker引擎 参考文章",content:'本内容基于官网的安装步骤，目前是最新的安装步骤(2021-11-19)。最新安装步骤请前往 [Docker 安装文档](https://docs.docker.com/engine/install/centos/)\n\n2021-11-19 @村长\n\n\n\n * 操作系统要求\n * 卸载旧版本\n * 安装方法\n   * 使用存储库安装\n   * 从包安装\n   * 便利脚本安装\n * 安装进阶\n   * 以非root用户管理Docker\n   * 配置Docker开机启动\n * 仓库配置\n   * Docker 官方中国的镜像加速器\n   * 配置阿里云镜像加速器\n * 镜像查看和拉取\n * 卸载Docker引擎\n * 参考文章\n\n\n\n\n# 操作系统要求\n\n要安装 Docker 引擎，您需要 CentOS 7 或 8 的维护版本。不支持或测试存档版本，并且 Linux 版本 3.10.0+，包括 3.10.0。\n\n该 centos-extras 库必须启用。默认情况下启用此存储库，但如果您已禁用它，则需要 重新启用它。\n\noverlay2 推荐使用存储驱动。\n\n\n# 卸载旧版本\n\n旧版本的 Docker 被称为 docker 或 docker-engine。如果安装了这些，请卸载它们以及相关的依赖项：\n\nsudo yum remove docker \\\n                docker-client \\\n                docker-client-latest \\\n                docker-common \\\n                docker-latest \\\n                docker-latest-logrotate \\\n                docker-logrotate \\\n                docker-engine\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n如果 yum 报告没有安装这些软件包，那也没关系，只是说明曾经没安装过，不影响任何东西。\n\n卸载并不会全部卸载，如图像、容器、卷和网络，将被保留，以及 /var/lib/docker/ 的内容\n\nDocker 引擎包现在被称为 docker-ce.\n\n\n# 安装方法\n\n首先说明下：Docker 安装路径是 /var/lib/docker，安装 Docker 成功后，在该路径中有一个 image 和 containers 文件夹，分别存放镜像和实例。\n\n您可以根据需要以不同方式安装 Docker Engine：\n\n * 从 Docker 的存储库或者其他镜像库里下载，这是最推荐的方法\n\n * 下载 RPM 包并手动安装并完全手动管理升级。这在某些情况下非常有用，例如在无法访问互联网的气隙系统上安装 Docker\n\n * 便捷脚本安装 Docker，可以在测试和开发环境中安装\n\n\n# 使用存储库安装\n\n在新主机上首次安装 Docker Engine 之前，您需要设置 Docker 存储库。之后，您可以从存储库安装和更新 Docker。\n\n> 安装软件包\n\n安装 yum-utils 包，它提供 yum-config-manager 实用程序\n\nsudo yum install -y yum-utils\n\n\n1\n\n\n> 设置存储库\n\n设置稳定版本的仓库\n\n官网（国外）\n\nsudo yum-config-manager \\\n\t\t--add-repo \\\n\t\thttps://download.docker.com/linux/centos/docker-ce.repo\n\n\n1\n2\n3\n\n\n阿里云（国内）\n\nsudo yum-config-manager \\\n    \t--add-repo \\\n\t\thttp://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n\n\n1\n2\n3\n\n\n阿里云仓库也是定期从官网仓库进行更新引用，两者仓库量无太大区别，如果配置了阿里云仓库，也要配置阿里云镜像加速，即下载速度源由官网改为阿里云。\n\n * 最新版本安装\n\n * 特定版本安装\n\n安装 最新版本 的 Docker Engine 和 containerd：\n\nsudo yum -y install docker-ce docker-ce-cli containerd.io\n\n\n1\n\n\n如果希望自己手动确认一些安装条件，则把 -y 去掉。\n\n如果报如下错误：\n\nLoaded plugins: fastestmirror\nLoading mirror speeds from cached hostfile\nNo package docker-ce available.\nNo package docker-ce-cli available.\nNo package containerd.io available.\n\n\n1\n2\n3\n4\n5\n\n\n要么你的 Linux 版本没到达 3.10.+，要么你忽略了上方的设置存储库，请设置官方或者阿里云的存储库，否则无法找到 Docker。\n\n还有一种可能就是你的 yum 版本太低，请更新它。\n\n# 更新 yum\nyum update\n\n# CentOS 7 更新索引\nyum makecache fast\n\n# CentOS 8 更新索引\nyum makecache\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n----------------------------------------\n\n安装 特定版本 的 Docker Engine，请在 repo 中列出可用版本，然后选择并安装\n\n首先列出可以安装的版本：\n\nyum list docker-ce --showduplicates | sort -r\n\n# 例子：\ndocker-ce.x86_643:18.09.1-3.el7\t\t\tdocker-ce-stable\ndocker-ce.x86_643:18.09.0-3.el7\t\t\tdocker-ce-stable\ndocker-ce.x86_6418.06.1.ce-3.el7\t\tdocker-ce-stable\ndocker-ce.x86_6418.06.e.ce-3.el7\t\tdocker-ce-stable\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n返回的列表取决于启用的存储库，并且特定于您的 CentOS 版本（e17 就是 CentOS 7.x 版本，如果是 CentOS 8.2，则是 e18）\n\n通过完全限定的包名称安装特定版本，即包名称 (docker-ce) 加上从第一个冒号 (:)开始的版本字符串（第 2 列），直到第一个连字符，由连字符 (-)分隔。例如：docker-ce-18.09.1。\n\nsudo yum install docker-ce-<version> docker-ce-cli-<version> containerd.io\n\n# 例子\nsudo yum install docker-ce-18.09.1 docker-ce-cli-18.09.1 containerd.io\n\n\n1\n2\n3\n4\n\n\n此命令会安装 Docker，但不会启动 Docker。它还会创建一个 docker 组，但是，默认情况下它不会向该组添加任何用户。\n\n> 启动 Docker\n\nsudo systemctl start docker\n\n\n1\n\n\n测试是否启动成功\n\n# 执行该命令\nsudo systemctl status docker\n# 执行结果，出现 active (running) 代表启动成功\n● docker.service - Docker Application Container Engine\n   Loaded: loaded (/usr/lib/systemd/system/docker.service; disabled; vendor preset: disabled)\n   Active: active (running) since 五 2021-11-19 15:40:03 CST; 1s ago\n     Docs: https://docs.docker.com\n Main PID: 29970 (dockerd)\n    Tasks: 11\n   Memory: 114.0M\n   CGroup: /system.slice/docker.service\n           └─29970 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n其他命令：\n\n# 查看 docker 的状态\nsystemctl status docker\n# 重启 docker\nsystemctl restart docker\n# 设置 docker 服务开启自启动\nsystemctl enable docker\n\n\n1\n2\n3\n4\n5\n6\n\n\n> 验证安装\n\n查看 Docker 版本\n\ndocker version\n\n\n1\n\n\n查看 Docker 信息\n\ndocker info\n\n\n1\n\n\n> 测试运行\n\n通过运行 hello-world 映像验证 Docker Engine 是否已正确安装\n\n# 执行该命令\ndocker run hello-world\n# 执行结果\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.\n    (amd64)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\n https://hub.docker.com/\n\nFor more examples and ideas, visit:\n https://docs.docker.com/get-started/\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n此命令下载测试映像并在容器中运行它。当容器运行时，它会打印一条消息并退出。\n\n\n# 从包安装\n\n如果您无法使用 Docker 的存储库来安装 Docker，您可以下载该.rpm版本的 文件并手动安装。每次要升级 Docker Engine 时都需要下载一个新文件。\n\n前往 https://download.docker.com/linux/centos/ 并选择您的 CentOS 版本。然后浏览 x86_64/stable/Packages/ 并下载 .rpm 要安装的 Docker 版本的文件。\n\n> 安装\n\n安装 Docker Engine，将下面的路径更改为您下载 Docker 包的路径。\n\nsudo yum install /path/to/package.rpm\n\n\n1\n\n\nDocker 已安装但未启动。该 docker 组被创建，但没有用户添加到组。\n\n> 启动 Docker\n\nsudo systemctl start docker\n\n\n1\n\n\n其他命令：\n\n# 查看 docker 的状态\nsystemctl status docker\n# 重启 docker\nsystemctl restart docker\n# 设置 docker 服务开启自启动\nsystemctl enable docker\n\n\n1\n2\n3\n4\n5\n6\n\n\n> 验证安装\n\n查看 Docker 版本\n\ndocker version\n\n\n1\n\n\n查看 Docker 信息\n\ndocker info\n\n\n1\n\n\n> 测试运行\n\n通过运行 hello-world 映像验证 Docker Engine 是否已正确安装\n\ndocker run hello-world\n\n\n1\n\n\n此命令下载测试映像并在容器中运行它。当容器运行时，它会打印一条消息并退出。\n\n\n# 便利脚本安装\n\nDocker 在 get.docker.com 上提供了一个方便的脚本，可以快速且非交互式地将 Docker 安装到开发环境中。不建议将便捷脚本用于生产环境，但可以用作示例来创建适合您需求的配置脚本。\n\n在本地运行之前，请务必检查从 Internet 下载的脚本。在安装之前，让自己熟悉便利脚本的潜在风险和限制：\n\n * 脚本需要 root 或 sudo 特权才能运行。\n * 该脚本会尝试检测您的 Linux 发行版和版本并为您配置包管理系统，并且不允许您自定义大多数安装参数。\n * 该脚本无需确认即可安装依赖项和建议。这可能会安装大量软件包，具体取决于主机的当前配置。\n * 默认情况下，该脚本会安装 Docker、containerd 和 runc 的最新稳定版本。使用此脚本配置机器时，可能会导致 Docker 的主要版本意外升级。在部署到生产系统之前，始终在测试环境中测试（主要）升级。\n * 该脚本并非旨在升级现有的 Docker 安装。使用脚本更新现有安装时，依赖项可能不会更新到预期版本，从而导致使用过时的版本。\n\n> 安装\n\n此示例从 get.docker.com 下载脚本并运行它以在 Linux 上安装 Docker 的最新稳定版本，另外可以通过 --mirror 选项使用国内下载源进行安装：\n\n curl -fsSL https://get.docker.com -o get-docker.sh\n sudo sh get-docker.sh --mirror\n\n\n1\n2\n\n\n> 启动 Docker\n\nsudo systemctl start docker\n\n\n1\n\n\n其他命令：\n\n# 查看 docker 的状态\nsystemctl status docker\n# 重启 docker\nsystemctl restart docker\n# 设置 docker 服务开启自启动\nsystemctl enable docker\n\n\n1\n2\n3\n4\n5\n6\n\n\n> 创建 docker 用户组\n\n便利脚本安装不会自动创建 docker 用户组，请手动安装\n\nsudo groupadd docker\n\n\n1\n\n\n> 验证测试\n\n查看 Docker 版本\n\ndocker version\n\n\n1\n\n\n查看 Docker 信息\n\ndocker info\n\n\n1\n\n\n> 测试运行\n\n通过运行 hello-world 映像验证 Docker Engine 是否已正确安装\n\ndocker run hello-world\n\n\n1\n\n\n此命令下载测试映像并在容器中运行它。当容器运行时，它会打印一条消息并退出。\n\n\n# 安装进阶\n\n\n# 以非root用户管理Docker\n\nDocker 守护进程绑定到 Unix 套接字而不是 TCP 端口。默认情况下，Unix 套接字归用户所有 root，其他用户只能使用 sudo. Docker 守护进程始终以root 用户身份运行。\n\n如果您不想在 docker 命令前加上sudo，请创建一个 docker 用户组并向其中添加用户。当 Docker 守护进程启动时，它会创建一个可由 docker 组成员访问的 Unix 套接字。\n\n 1. 创建 docker 组\n\nsudo groupadd docker\n\n\n1\n\n 2. 将您的用户添加到 docker 组中\n\nsudo usermod -aG docker $USER\n\n\n1\n\n\n 3. 注销并重新登录，以便重新评估您的组成员身份。\n    \n    如果在虚拟机上进行测试，可能需要重新启动虚拟机以使更改生效。\n    \n    在桌面 Linux 环境（例如 X Windows）上，完全注销会话，然后重新登录。\n    \n    在 Linux 上，您还可以运行以下命令来激活对组的更改：\n    \n    newgrp docker \n    \n    \n    1\n    \n\n 4. 验证您可以在docker没有sudo.\n    \n    docker run hello-world\n    \n    \n    1\n    \n    \n    此命令下载测试映像并在容器中运行它。当容器运行时，它会打印一条消息并退出。\n    \n    如果您 sudo 在将用户添加到 docker 组之前最初使用 Docker CLI 命令运行，您可能会看到以下错误，这表明您的 ~/.docker/ 目录由于 sudo 命令而使用不正确的权限创建。\n    \n    WARNING: Error loading config file: /home/user/.docker/config.json -\n    stat /home/user/.docker/config.json: permission denied\n    \n    \n    1\n    2\n    \n    \n    要解决此问题，请删除 ~/.docker/ 目录（它会自动重新创建，但所有自定义设置都将丢失），或使用以下命令更改其所有权和权限：\n    \n    sudo chown "$USER":"$USER" /home/"$USER"/.docker -R\n    sudo chmod g+rwx "$HOME/.docker" -R\n    \n    \n    1\n    2\n    \n\n\n# 配置Docker开机启动\n\n多数当前的 Linux 发行版（RHEL、CentOS、Fedora、Debian、Ubuntu 16.04 及更高版本）用于 systemd 管理系统启动时启动的服务（就是 systemctl 命令）。在 Debian 和 Ubuntu 上，Docker 服务默认配置为在启动时启动。要在引导时为其他发行版自动启动 Docker 和 Containerd，请使用以下命令：\n\n# 可省略 .service\nsudo systemctl enable docker.service\nsudo systemctl enable containerd.servic\n\n\n1\n2\n3\n\n\n要禁用此开机启动，请改用为 disable。\n\n# 可省略 .service\nsudo systemctl disable docker.service\nsudo systemctl disable containerd.service\n\n\n1\n2\n3\n\n\n\n# 仓库配置\n\n> Docker 安装好以后，我们就要开始为拉取镜像准备了；国内从 DockerHub 拉取镜像有时会特别慢，此时可以配置镜像加速器。\n\nDocker 官方和国内很多云服务商都提供了国内加速器服务，比如：\n\n * 阿里云的加速器：https://help.aliyun.com/document_detail/60750.html\n * 网易加速器：http://hub-mirror.c.163.com\n * Docker 官方中国加速器：https://registry.docker-cn.com\n * ustc 的镜像：https://docker.mirrors.ustc.edu.cn\n * daocloud：https://www.daocloud.io/mirror#accelerator-doc（注册后使用）\n\n\n# Docker 官方中国的镜像加速器\n\n对于使用 systemd 的系统（CentOS 7.x 以上），请在 /etc/docker/daemon.json 中写入如下内容（如果文件不存在请新建该文件）\n\n{\n\t"registry-mirrors": ["https://registry.docker-cn.com"]\n}\n\n\n1\n2\n3\n\n\n另一种方式\n\n# 创建文件夹\nsudo mkdir -p /etc/docker\n# 下面是一个步骤，全部复制\nsudo tee /etc/docker/daemon.json <<-\'EOF\'\n\t{\n\t\t"registry-mirrors": ["https://registry.docker-cn.com"]\n\t}\nEOF\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n之后重新启动服务\n\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n\n\n1\n2\n\n\n\n# 配置阿里云镜像加速器\n\n * 访问阿里云登录自己的账号查看 docker 镜像加速服务：https://cr.console.aliyun.com/cn-shenzhen/instances/mirrors\n   \n   \n   \n   操作步骤是统一的，不存在不同用户不同的操作步骤，我已经放到下面代码块：\n   \n   # 创建文件夹\n   sudo mkdir -p /etc/docker\n   # 下面是一个步骤，全部复制\n   sudo tee /etc/docker/daemon.json <<-\'EOF\'\n   {\n     "registry-mirrors": ["https://cgyf1vkq.mirror.aliyuncs.com"]\n   }\n   EOF\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   \n   \n   之后重新启动服务\n   \n   sudo systemctl daemon-reload\n   sudo systemctl restart docker\n   \n   \n   1\n   2\n   \n\n * 验证 docker 的镜像加速器是否生效\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n    \n   \n   \n   \n   # 执行命令\n   docker info\n   # 结果\n    ......\n    Registry: https://index.docker.io/v1/\n    Labels:\n    Experimental: false\n    Insecure Registries:\n     127.0.0.0/8\n    Registry Mirrors:\n     https://cgyf1vkq.mirror.aliyuncs.com/\n    Live Restore Enabled: false\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   \n\n\n# 镜像查看和拉取\n\n> 拉一个 docker 镜像试试吧？\n\n拉取 hello world\n\n# 执行该命令\ndocker pull hello-world:latest\n# 执行结果\nlatest: Pulling from library/hello-world\n2db29710123e: Pull complete \nDigest: sha256:cc15c5b292d8525effc0f89cb299f1804f3a725c8d05e158653a563f15e4f685\nStatus: Downloaded newer image for hello-world:latest\ndocker.io/library/hello-world:latest\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n看本地仓库是否有这个库\n\n\n\n\n\n\n \n\n\n# 执行该命令\ndocker images\n# 执行结果\nREPOSITORY    TAG       IMAGE ID       CREATED       SIZE\nhello-world   latest    feb5d9fea6a5   8 weeks ago   13.3kB\n\n\n1\n2\n3\n4\n5\n\n\n运行这个镜像的实例，即容器\n\n# 执行该命令\ndocker run hello-world\n# 执行结果\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.\n    (amd64)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\n https://hub.docker.com/\n\nFor more examples and ideas, visit:\n https://docs.docker.com/get-started/\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n> 注意, 如果你在没有镜像的时候，直接 docker run hello-world 也是可以的；它会先检查本地是否有这个镜像，没有的话会先从指定仓库中拉取。\n\n\n# 卸载Docker引擎\n\n> 卸载 Docker Engine、CLI 和 Containerd 包\n\nsudo yum remove docker-ce docker-ce-cli containerd.io\n\n\n1\n\n\n> 主机上的映像、容器、卷或自定义配置文件不会自动删除。删除所有镜像、容器和卷\n\nsudo rm -rf /var/lib/docker\nsudo rm -rf /var/lib/containerd\n\n\n1\n2\n\n\n您必须手动删除任何已编辑的配置文件\n\n\n# 参考文章\n\nhttps://www.pdai.tech/md/devops/docker/docker-02-basic.html',normalizedContent:'本内容基于官网的安装步骤，目前是最新的安装步骤(2021-11-19)。最新安装步骤请前往 [docker 安装文档](https://docs.docker.com/engine/install/centos/)\n\n2021-11-19 @村长\n\n\n\n * 操作系统要求\n * 卸载旧版本\n * 安装方法\n   * 使用存储库安装\n   * 从包安装\n   * 便利脚本安装\n * 安装进阶\n   * 以非root用户管理docker\n   * 配置docker开机启动\n * 仓库配置\n   * docker 官方中国的镜像加速器\n   * 配置阿里云镜像加速器\n * 镜像查看和拉取\n * 卸载docker引擎\n * 参考文章\n\n\n\n\n# 操作系统要求\n\n要安装 docker 引擎，您需要 centos 7 或 8 的维护版本。不支持或测试存档版本，并且 linux 版本 3.10.0+，包括 3.10.0。\n\n该 centos-extras 库必须启用。默认情况下启用此存储库，但如果您已禁用它，则需要 重新启用它。\n\noverlay2 推荐使用存储驱动。\n\n\n# 卸载旧版本\n\n旧版本的 docker 被称为 docker 或 docker-engine。如果安装了这些，请卸载它们以及相关的依赖项：\n\nsudo yum remove docker \\\n                docker-client \\\n                docker-client-latest \\\n                docker-common \\\n                docker-latest \\\n                docker-latest-logrotate \\\n                docker-logrotate \\\n                docker-engine\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n如果 yum 报告没有安装这些软件包，那也没关系，只是说明曾经没安装过，不影响任何东西。\n\n卸载并不会全部卸载，如图像、容器、卷和网络，将被保留，以及 /var/lib/docker/ 的内容\n\ndocker 引擎包现在被称为 docker-ce.\n\n\n# 安装方法\n\n首先说明下：docker 安装路径是 /var/lib/docker，安装 docker 成功后，在该路径中有一个 image 和 containers 文件夹，分别存放镜像和实例。\n\n您可以根据需要以不同方式安装 docker engine：\n\n * 从 docker 的存储库或者其他镜像库里下载，这是最推荐的方法\n\n * 下载 rpm 包并手动安装并完全手动管理升级。这在某些情况下非常有用，例如在无法访问互联网的气隙系统上安装 docker\n\n * 便捷脚本安装 docker，可以在测试和开发环境中安装\n\n\n# 使用存储库安装\n\n在新主机上首次安装 docker engine 之前，您需要设置 docker 存储库。之后，您可以从存储库安装和更新 docker。\n\n> 安装软件包\n\n安装 yum-utils 包，它提供 yum-config-manager 实用程序\n\nsudo yum install -y yum-utils\n\n\n1\n\n\n> 设置存储库\n\n设置稳定版本的仓库\n\n官网（国外）\n\nsudo yum-config-manager \\\n\t\t--add-repo \\\n\t\thttps://download.docker.com/linux/centos/docker-ce.repo\n\n\n1\n2\n3\n\n\n阿里云（国内）\n\nsudo yum-config-manager \\\n    \t--add-repo \\\n\t\thttp://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n\n\n1\n2\n3\n\n\n阿里云仓库也是定期从官网仓库进行更新引用，两者仓库量无太大区别，如果配置了阿里云仓库，也要配置阿里云镜像加速，即下载速度源由官网改为阿里云。\n\n * 最新版本安装\n\n * 特定版本安装\n\n安装 最新版本 的 docker engine 和 containerd：\n\nsudo yum -y install docker-ce docker-ce-cli containerd.io\n\n\n1\n\n\n如果希望自己手动确认一些安装条件，则把 -y 去掉。\n\n如果报如下错误：\n\nloaded plugins: fastestmirror\nloading mirror speeds from cached hostfile\nno package docker-ce available.\nno package docker-ce-cli available.\nno package containerd.io available.\n\n\n1\n2\n3\n4\n5\n\n\n要么你的 linux 版本没到达 3.10.+，要么你忽略了上方的设置存储库，请设置官方或者阿里云的存储库，否则无法找到 docker。\n\n还有一种可能就是你的 yum 版本太低，请更新它。\n\n# 更新 yum\nyum update\n\n# centos 7 更新索引\nyum makecache fast\n\n# centos 8 更新索引\nyum makecache\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n----------------------------------------\n\n安装 特定版本 的 docker engine，请在 repo 中列出可用版本，然后选择并安装\n\n首先列出可以安装的版本：\n\nyum list docker-ce --showduplicates | sort -r\n\n# 例子：\ndocker-ce.x86_643:18.09.1-3.el7\t\t\tdocker-ce-stable\ndocker-ce.x86_643:18.09.0-3.el7\t\t\tdocker-ce-stable\ndocker-ce.x86_6418.06.1.ce-3.el7\t\tdocker-ce-stable\ndocker-ce.x86_6418.06.e.ce-3.el7\t\tdocker-ce-stable\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n返回的列表取决于启用的存储库，并且特定于您的 centos 版本（e17 就是 centos 7.x 版本，如果是 centos 8.2，则是 e18）\n\n通过完全限定的包名称安装特定版本，即包名称 (docker-ce) 加上从第一个冒号 (:)开始的版本字符串（第 2 列），直到第一个连字符，由连字符 (-)分隔。例如：docker-ce-18.09.1。\n\nsudo yum install docker-ce-<version> docker-ce-cli-<version> containerd.io\n\n# 例子\nsudo yum install docker-ce-18.09.1 docker-ce-cli-18.09.1 containerd.io\n\n\n1\n2\n3\n4\n\n\n此命令会安装 docker，但不会启动 docker。它还会创建一个 docker 组，但是，默认情况下它不会向该组添加任何用户。\n\n> 启动 docker\n\nsudo systemctl start docker\n\n\n1\n\n\n测试是否启动成功\n\n# 执行该命令\nsudo systemctl status docker\n# 执行结果，出现 active (running) 代表启动成功\n● docker.service - docker application container engine\n   loaded: loaded (/usr/lib/systemd/system/docker.service; disabled; vendor preset: disabled)\n   active: active (running) since 五 2021-11-19 15:40:03 cst; 1s ago\n     docs: https://docs.docker.com\n main pid: 29970 (dockerd)\n    tasks: 11\n   memory: 114.0m\n   cgroup: /system.slice/docker.service\n           └─29970 /usr/bin/dockerd -h fd:// --containerd=/run/containerd/containerd.sock\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n其他命令：\n\n# 查看 docker 的状态\nsystemctl status docker\n# 重启 docker\nsystemctl restart docker\n# 设置 docker 服务开启自启动\nsystemctl enable docker\n\n\n1\n2\n3\n4\n5\n6\n\n\n> 验证安装\n\n查看 docker 版本\n\ndocker version\n\n\n1\n\n\n查看 docker 信息\n\ndocker info\n\n\n1\n\n\n> 测试运行\n\n通过运行 hello-world 映像验证 docker engine 是否已正确安装\n\n# 执行该命令\ndocker run hello-world\n# 执行结果\nhello from docker!\nthis message shows that your installation appears to be working correctly.\n\nto generate this message, docker took the following steps:\n 1. the docker client contacted the docker daemon.\n 2. the docker daemon pulled the "hello-world" image from the docker hub.\n    (amd64)\n 3. the docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. the docker daemon streamed that output to the docker client, which sent it\n    to your terminal.\n\nto try something more ambitious, you can run an ubuntu container with:\n $ docker run -it ubuntu bash\n\nshare images, automate workflows, and more with a free docker id:\n https://hub.docker.com/\n\nfor more examples and ideas, visit:\n https://docs.docker.com/get-started/\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n此命令下载测试映像并在容器中运行它。当容器运行时，它会打印一条消息并退出。\n\n\n# 从包安装\n\n如果您无法使用 docker 的存储库来安装 docker，您可以下载该.rpm版本的 文件并手动安装。每次要升级 docker engine 时都需要下载一个新文件。\n\n前往 https://download.docker.com/linux/centos/ 并选择您的 centos 版本。然后浏览 x86_64/stable/packages/ 并下载 .rpm 要安装的 docker 版本的文件。\n\n> 安装\n\n安装 docker engine，将下面的路径更改为您下载 docker 包的路径。\n\nsudo yum install /path/to/package.rpm\n\n\n1\n\n\ndocker 已安装但未启动。该 docker 组被创建，但没有用户添加到组。\n\n> 启动 docker\n\nsudo systemctl start docker\n\n\n1\n\n\n其他命令：\n\n# 查看 docker 的状态\nsystemctl status docker\n# 重启 docker\nsystemctl restart docker\n# 设置 docker 服务开启自启动\nsystemctl enable docker\n\n\n1\n2\n3\n4\n5\n6\n\n\n> 验证安装\n\n查看 docker 版本\n\ndocker version\n\n\n1\n\n\n查看 docker 信息\n\ndocker info\n\n\n1\n\n\n> 测试运行\n\n通过运行 hello-world 映像验证 docker engine 是否已正确安装\n\ndocker run hello-world\n\n\n1\n\n\n此命令下载测试映像并在容器中运行它。当容器运行时，它会打印一条消息并退出。\n\n\n# 便利脚本安装\n\ndocker 在 get.docker.com 上提供了一个方便的脚本，可以快速且非交互式地将 docker 安装到开发环境中。不建议将便捷脚本用于生产环境，但可以用作示例来创建适合您需求的配置脚本。\n\n在本地运行之前，请务必检查从 internet 下载的脚本。在安装之前，让自己熟悉便利脚本的潜在风险和限制：\n\n * 脚本需要 root 或 sudo 特权才能运行。\n * 该脚本会尝试检测您的 linux 发行版和版本并为您配置包管理系统，并且不允许您自定义大多数安装参数。\n * 该脚本无需确认即可安装依赖项和建议。这可能会安装大量软件包，具体取决于主机的当前配置。\n * 默认情况下，该脚本会安装 docker、containerd 和 runc 的最新稳定版本。使用此脚本配置机器时，可能会导致 docker 的主要版本意外升级。在部署到生产系统之前，始终在测试环境中测试（主要）升级。\n * 该脚本并非旨在升级现有的 docker 安装。使用脚本更新现有安装时，依赖项可能不会更新到预期版本，从而导致使用过时的版本。\n\n> 安装\n\n此示例从 get.docker.com 下载脚本并运行它以在 linux 上安装 docker 的最新稳定版本，另外可以通过 --mirror 选项使用国内下载源进行安装：\n\n curl -fssl https://get.docker.com -o get-docker.sh\n sudo sh get-docker.sh --mirror\n\n\n1\n2\n\n\n> 启动 docker\n\nsudo systemctl start docker\n\n\n1\n\n\n其他命令：\n\n# 查看 docker 的状态\nsystemctl status docker\n# 重启 docker\nsystemctl restart docker\n# 设置 docker 服务开启自启动\nsystemctl enable docker\n\n\n1\n2\n3\n4\n5\n6\n\n\n> 创建 docker 用户组\n\n便利脚本安装不会自动创建 docker 用户组，请手动安装\n\nsudo groupadd docker\n\n\n1\n\n\n> 验证测试\n\n查看 docker 版本\n\ndocker version\n\n\n1\n\n\n查看 docker 信息\n\ndocker info\n\n\n1\n\n\n> 测试运行\n\n通过运行 hello-world 映像验证 docker engine 是否已正确安装\n\ndocker run hello-world\n\n\n1\n\n\n此命令下载测试映像并在容器中运行它。当容器运行时，它会打印一条消息并退出。\n\n\n# 安装进阶\n\n\n# 以非root用户管理docker\n\ndocker 守护进程绑定到 unix 套接字而不是 tcp 端口。默认情况下，unix 套接字归用户所有 root，其他用户只能使用 sudo. docker 守护进程始终以root 用户身份运行。\n\n如果您不想在 docker 命令前加上sudo，请创建一个 docker 用户组并向其中添加用户。当 docker 守护进程启动时，它会创建一个可由 docker 组成员访问的 unix 套接字。\n\n 1. 创建 docker 组\n\nsudo groupadd docker\n\n\n1\n\n 2. 将您的用户添加到 docker 组中\n\nsudo usermod -ag docker $user\n\n\n1\n\n\n 3. 注销并重新登录，以便重新评估您的组成员身份。\n    \n    如果在虚拟机上进行测试，可能需要重新启动虚拟机以使更改生效。\n    \n    在桌面 linux 环境（例如 x windows）上，完全注销会话，然后重新登录。\n    \n    在 linux 上，您还可以运行以下命令来激活对组的更改：\n    \n    newgrp docker \n    \n    \n    1\n    \n\n 4. 验证您可以在docker没有sudo.\n    \n    docker run hello-world\n    \n    \n    1\n    \n    \n    此命令下载测试映像并在容器中运行它。当容器运行时，它会打印一条消息并退出。\n    \n    如果您 sudo 在将用户添加到 docker 组之前最初使用 docker cli 命令运行，您可能会看到以下错误，这表明您的 ~/.docker/ 目录由于 sudo 命令而使用不正确的权限创建。\n    \n    warning: error loading config file: /home/user/.docker/config.json -\n    stat /home/user/.docker/config.json: permission denied\n    \n    \n    1\n    2\n    \n    \n    要解决此问题，请删除 ~/.docker/ 目录（它会自动重新创建，但所有自定义设置都将丢失），或使用以下命令更改其所有权和权限：\n    \n    sudo chown "$user":"$user" /home/"$user"/.docker -r\n    sudo chmod g+rwx "$home/.docker" -r\n    \n    \n    1\n    2\n    \n\n\n# 配置docker开机启动\n\n多数当前的 linux 发行版（rhel、centos、fedora、debian、ubuntu 16.04 及更高版本）用于 systemd 管理系统启动时启动的服务（就是 systemctl 命令）。在 debian 和 ubuntu 上，docker 服务默认配置为在启动时启动。要在引导时为其他发行版自动启动 docker 和 containerd，请使用以下命令：\n\n# 可省略 .service\nsudo systemctl enable docker.service\nsudo systemctl enable containerd.servic\n\n\n1\n2\n3\n\n\n要禁用此开机启动，请改用为 disable。\n\n# 可省略 .service\nsudo systemctl disable docker.service\nsudo systemctl disable containerd.service\n\n\n1\n2\n3\n\n\n\n# 仓库配置\n\n> docker 安装好以后，我们就要开始为拉取镜像准备了；国内从 dockerhub 拉取镜像有时会特别慢，此时可以配置镜像加速器。\n\ndocker 官方和国内很多云服务商都提供了国内加速器服务，比如：\n\n * 阿里云的加速器：https://help.aliyun.com/document_detail/60750.html\n * 网易加速器：http://hub-mirror.c.163.com\n * docker 官方中国加速器：https://registry.docker-cn.com\n * ustc 的镜像：https://docker.mirrors.ustc.edu.cn\n * daocloud：https://www.daocloud.io/mirror#accelerator-doc（注册后使用）\n\n\n# docker 官方中国的镜像加速器\n\n对于使用 systemd 的系统（centos 7.x 以上），请在 /etc/docker/daemon.json 中写入如下内容（如果文件不存在请新建该文件）\n\n{\n\t"registry-mirrors": ["https://registry.docker-cn.com"]\n}\n\n\n1\n2\n3\n\n\n另一种方式\n\n# 创建文件夹\nsudo mkdir -p /etc/docker\n# 下面是一个步骤，全部复制\nsudo tee /etc/docker/daemon.json <<-\'eof\'\n\t{\n\t\t"registry-mirrors": ["https://registry.docker-cn.com"]\n\t}\neof\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n之后重新启动服务\n\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n\n\n1\n2\n\n\n\n# 配置阿里云镜像加速器\n\n * 访问阿里云登录自己的账号查看 docker 镜像加速服务：https://cr.console.aliyun.com/cn-shenzhen/instances/mirrors\n   \n   \n   \n   操作步骤是统一的，不存在不同用户不同的操作步骤，我已经放到下面代码块：\n   \n   # 创建文件夹\n   sudo mkdir -p /etc/docker\n   # 下面是一个步骤，全部复制\n   sudo tee /etc/docker/daemon.json <<-\'eof\'\n   {\n     "registry-mirrors": ["https://cgyf1vkq.mirror.aliyuncs.com"]\n   }\n   eof\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   \n   \n   之后重新启动服务\n   \n   sudo systemctl daemon-reload\n   sudo systemctl restart docker\n   \n   \n   1\n   2\n   \n\n * 验证 docker 的镜像加速器是否生效\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n    \n   \n   \n   \n   # 执行命令\n   docker info\n   # 结果\n    ......\n    registry: https://index.docker.io/v1/\n    labels:\n    experimental: false\n    insecure registries:\n     127.0.0.0/8\n    registry mirrors:\n     https://cgyf1vkq.mirror.aliyuncs.com/\n    live restore enabled: false\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   \n\n\n# 镜像查看和拉取\n\n> 拉一个 docker 镜像试试吧？\n\n拉取 hello world\n\n# 执行该命令\ndocker pull hello-world:latest\n# 执行结果\nlatest: pulling from library/hello-world\n2db29710123e: pull complete \ndigest: sha256:cc15c5b292d8525effc0f89cb299f1804f3a725c8d05e158653a563f15e4f685\nstatus: downloaded newer image for hello-world:latest\ndocker.io/library/hello-world:latest\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n看本地仓库是否有这个库\n\n\n\n\n\n\n \n\n\n# 执行该命令\ndocker images\n# 执行结果\nrepository    tag       image id       created       size\nhello-world   latest    feb5d9fea6a5   8 weeks ago   13.3kb\n\n\n1\n2\n3\n4\n5\n\n\n运行这个镜像的实例，即容器\n\n# 执行该命令\ndocker run hello-world\n# 执行结果\nhello from docker!\nthis message shows that your installation appears to be working correctly.\n\nto generate this message, docker took the following steps:\n 1. the docker client contacted the docker daemon.\n 2. the docker daemon pulled the "hello-world" image from the docker hub.\n    (amd64)\n 3. the docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. the docker daemon streamed that output to the docker client, which sent it\n    to your terminal.\n\nto try something more ambitious, you can run an ubuntu container with:\n $ docker run -it ubuntu bash\n\nshare images, automate workflows, and more with a free docker id:\n https://hub.docker.com/\n\nfor more examples and ideas, visit:\n https://docs.docker.com/get-started/\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n> 注意, 如果你在没有镜像的时候，直接 docker run hello-world 也是可以的；它会先检查本地是否有这个镜像，没有的话会先从指定仓库中拉取。\n\n\n# 卸载docker引擎\n\n> 卸载 docker engine、cli 和 containerd 包\n\nsudo yum remove docker-ce docker-ce-cli containerd.io\n\n\n1\n\n\n> 主机上的映像、容器、卷或自定义配置文件不会自动删除。删除所有镜像、容器和卷\n\nsudo rm -rf /var/lib/docker\nsudo rm -rf /var/lib/containerd\n\n\n1\n2\n\n\n您必须手动删除任何已编辑的配置文件\n\n\n# 参考文章\n\nhttps://www.pdai.tech/md/devops/docker/docker-02-basic.html',charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"Docker - 镜像原理",frontmatter:{title:"Docker - 镜像原理",date:"2021-11-20T17:42:52.000Z",permalink:"/docker/images/",categories:["Docker"],tags:["容器部署"],readingShow:"top"},regularPath:"/40.%E5%B7%A5%E5%85%B7/40.%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2%20-%20Docker/11.Docker%20-%20%E9%95%9C%E5%83%8F%E5%8E%9F%E7%90%86.html",relativePath:"40.工具/40.容器部署 - Docker/11.Docker - 镜像原理.md",key:"v-a52eb068",path:"/docker/images/",headers:[{level:2,title:"什么是镜像",slug:"什么是镜像",normalizedTitle:"什么是镜像",charIndex:3},{level:2,title:"为什么一个镜像会那么大",slug:"为什么一个镜像会那么大",normalizedTitle:"为什么一个镜像会那么大",charIndex:12},{level:2,title:"Docker镜像原理",slug:"docker镜像原理",normalizedTitle:"docker镜像原理",charIndex:27},{level:3,title:"为什么Docker镜像要采用这种分层结构呢",slug:"为什么docker镜像要采用这种分层结构呢",normalizedTitle:"为什么docker镜像要采用这种分层结构呢",charIndex:43},{level:2,title:"核心架构图",slug:"核心架构图",normalizedTitle:"核心架构图",charIndex:68}],headersStr:"什么是镜像 为什么一个镜像会那么大 Docker镜像原理 为什么Docker镜像要采用这种分层结构呢 核心架构图",content:" * 什么是镜像\n * 为什么一个镜像会那么大\n * Docker镜像原理\n   * 为什么Docker镜像要采用这种分层结构呢\n * 核心架构图\n\n\n\n\n# 什么是镜像\n\n镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含 运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。\n\n\n# 为什么一个镜像会那么大\n\n\n\n镜像就是花卷，多个镜像组成一个完整的镜像\n\n * UnionFS（联合文件系统）\n   \n   Union 文件系统是一种分层，轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文代系统下。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。Union 文件系统是 Docker 镜像的基础。这种文件系统特性就是一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。\n\n\n# Docker镜像原理\n\n\n\n> docker 的镜像实际上由一层一层的文件系统组成，这种层级的文件系统 UnionFS。\n\n * 典型的 Linux 文件系统由 bootfs 和 rootfs 两部分组成\n\n * bootfs(boot file system)主要包含 bootloader 和 kernel，bootloader 主要是引导加载 kernel，Linux 刚启动时会加载 bootfs 文件系统，在 Docker 镜像的最底层是 bootfs。这一层与我们典型的 Linux/Unix 系统是 一样的，包含 boot 加载器和内核。当 boot 加载完成之后整个内核就都在内存中了，此时内存的使用权已由 bootfs 转交给内核，此时系统也会卸载 bootfs。\n\n * rootfs (root file system) ，在bootfs之上。包含的就是典型 Linux 系统中的 /dev，/proc，/bin，/etc 等标准目录和文件。rootfs 就是各种不同的操作系统发行版，比如 Ubuntu，Centos 等等。\n\n * 我们平时安装进虚拟机的 CentO 都有 1 到几个 GB，为什么 Docker 这里才 200MB？对于一个精简的 OS，rootfs 可以很小，只需要包括最基本的命令，工具，和程序库就可以了，因为底层直接使用 Host 的 Kemal,自己只需要提供 rotfs 就行了。由此可见不同的 Linux 发行版，他们的 bootfs 是一致的，rootfs 会有差别。因此不同的发行版可以共用 bootfs。\n   \n   \n   \n   \n   \n   \n   \n   \n   \n    \n   \n   \n   # 执行命令\n   docker images\n   \n   # 返回结果\n   REPOSITORY    TAG       IMAGE ID       CREATED        SIZE\n   tomcat        8.5.73    7ec084df520c   43 hours ago   249MB\n   mysql         latest    b05128b000dd   3 days ago     516MB\n   centos        latest    feb5d9fea6a5   8 weeks ago    209MB\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   \n\n\n\n\n# 为什么Docker镜像要采用这种分层结构呢\n\n最大的好处就是资源共享。\n\n比如：有多个镜像都是从相同的 base 镜像构建而来的，那么宿主机只需在磁盘中保存一份 base 镜像。同时内存中也只需要加载一份 base 镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。Docker 镜像都是只读的。当容器启动时，一个新的可写层被加载到镜像的顶部。这一层通常被称为容器层，容器层之下都叫镜像层。\n\n> 如何查看镜像分层？\n\n使用 docker inspect 命令\n\n# 执行命令\nocker images\n\n# 返回结果\nREPOSITORY    TAG       IMAGE ID       CREATED        SIZE\ntomcat        8.5.73    7ec084df520c   43 hours ago   249MB\nmysql         latest    b05128b000dd   3 days ago     516MB\nhello-world   latest    feb5d9fea6a5   8 weeks ago    13.3kB\n\n# 执行命令\ndocker  inspect tomcat:8.5.73\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n所有的 Docker 镜像都起始于一个基础镜像层，当进行修改或增加新的内容时，就会在当前镜像层之上，创建新的镜像层。\n\n举一个简单的例子，假如基于 Ubuntu Linux 16.04 创建一个新的镜像，这就是新镜像的第一层；如果在该镜像中添加 Python包，就会在基础镜像层之上创建第二个镜像层；如果继续添加一个安全补丁，就会创建第三个镜像层。\n\n该镜像当前已经包含 3 个镜像层，如下图所示（这只是一个用于演示的很简单的例子）。\n\n\n\n在添加额外的镜像层的同时，镜像始终保持是当前所有镜像的组合，理解这一点非常重要。下图中举了 一个简单的例子，每个镜像层包含 3 个文件，而镜像包含了来自两个镜像层的 6 个文件。\n\n\n\n这种情况下，上层镜像层中的文件覆盖了底层镜像层中的文件。这样就使得文件的更新版本作为一个新镜像层添加到镜像当中。\n\nDocker 通过存储引擎（新版本采用快照机制）的方式来实现镜像层堆栈，并保证多镜像层对外展示为统 一的文件系统。\n\nLinux 上可用的存储引擎有 AUFS、Overlay2、Device Mapper、Btrfs 以及 ZFS。顾名思义，每种存储引擎都基于 Linux 中对应的文件系统或者块设备技术，并且每种存储引擎都有其独有的性能特点。\n\nDocker 在 Windows 上仅支持 windowsfilter 一种存储引擎，该引擎基于 NTFS 文件系统之上实现了分层和 CoW。\n\n下图展示了与系统显示相同的三层镜像。所有镜像层堆叠并合并，对外提供统一的视图。\n\n\n\n\n# 核心架构图\n\n",normalizedContent:" * 什么是镜像\n * 为什么一个镜像会那么大\n * docker镜像原理\n   * 为什么docker镜像要采用这种分层结构呢\n * 核心架构图\n\n\n\n\n# 什么是镜像\n\n镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含 运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。\n\n\n# 为什么一个镜像会那么大\n\n\n\n镜像就是花卷，多个镜像组成一个完整的镜像\n\n * unionfs（联合文件系统）\n   \n   union 文件系统是一种分层，轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文代系统下。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。union 文件系统是 docker 镜像的基础。这种文件系统特性就是一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。\n\n\n# docker镜像原理\n\n\n\n> docker 的镜像实际上由一层一层的文件系统组成，这种层级的文件系统 unionfs。\n\n * 典型的 linux 文件系统由 bootfs 和 rootfs 两部分组成\n\n * bootfs(boot file system)主要包含 bootloader 和 kernel，bootloader 主要是引导加载 kernel，linux 刚启动时会加载 bootfs 文件系统，在 docker 镜像的最底层是 bootfs。这一层与我们典型的 linux/unix 系统是 一样的，包含 boot 加载器和内核。当 boot 加载完成之后整个内核就都在内存中了，此时内存的使用权已由 bootfs 转交给内核，此时系统也会卸载 bootfs。\n\n * rootfs (root file system) ，在bootfs之上。包含的就是典型 linux 系统中的 /dev，/proc，/bin，/etc 等标准目录和文件。rootfs 就是各种不同的操作系统发行版，比如 ubuntu，centos 等等。\n\n * 我们平时安装进虚拟机的 cento 都有 1 到几个 gb，为什么 docker 这里才 200mb？对于一个精简的 os，rootfs 可以很小，只需要包括最基本的命令，工具，和程序库就可以了，因为底层直接使用 host 的 kemal,自己只需要提供 rotfs 就行了。由此可见不同的 linux 发行版，他们的 bootfs 是一致的，rootfs 会有差别。因此不同的发行版可以共用 bootfs。\n   \n   \n   \n   \n   \n   \n   \n   \n   \n    \n   \n   \n   # 执行命令\n   docker images\n   \n   # 返回结果\n   repository    tag       image id       created        size\n   tomcat        8.5.73    7ec084df520c   43 hours ago   249mb\n   mysql         latest    b05128b000dd   3 days ago     516mb\n   centos        latest    feb5d9fea6a5   8 weeks ago    209mb\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   \n\n\n\n\n# 为什么docker镜像要采用这种分层结构呢\n\n最大的好处就是资源共享。\n\n比如：有多个镜像都是从相同的 base 镜像构建而来的，那么宿主机只需在磁盘中保存一份 base 镜像。同时内存中也只需要加载一份 base 镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。docker 镜像都是只读的。当容器启动时，一个新的可写层被加载到镜像的顶部。这一层通常被称为容器层，容器层之下都叫镜像层。\n\n> 如何查看镜像分层？\n\n使用 docker inspect 命令\n\n# 执行命令\nocker images\n\n# 返回结果\nrepository    tag       image id       created        size\ntomcat        8.5.73    7ec084df520c   43 hours ago   249mb\nmysql         latest    b05128b000dd   3 days ago     516mb\nhello-world   latest    feb5d9fea6a5   8 weeks ago    13.3kb\n\n# 执行命令\ndocker  inspect tomcat:8.5.73\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n所有的 docker 镜像都起始于一个基础镜像层，当进行修改或增加新的内容时，就会在当前镜像层之上，创建新的镜像层。\n\n举一个简单的例子，假如基于 ubuntu linux 16.04 创建一个新的镜像，这就是新镜像的第一层；如果在该镜像中添加 python包，就会在基础镜像层之上创建第二个镜像层；如果继续添加一个安全补丁，就会创建第三个镜像层。\n\n该镜像当前已经包含 3 个镜像层，如下图所示（这只是一个用于演示的很简单的例子）。\n\n\n\n在添加额外的镜像层的同时，镜像始终保持是当前所有镜像的组合，理解这一点非常重要。下图中举了 一个简单的例子，每个镜像层包含 3 个文件，而镜像包含了来自两个镜像层的 6 个文件。\n\n\n\n这种情况下，上层镜像层中的文件覆盖了底层镜像层中的文件。这样就使得文件的更新版本作为一个新镜像层添加到镜像当中。\n\ndocker 通过存储引擎（新版本采用快照机制）的方式来实现镜像层堆栈，并保证多镜像层对外展示为统 一的文件系统。\n\nlinux 上可用的存储引擎有 aufs、overlay2、device mapper、btrfs 以及 zfs。顾名思义，每种存储引擎都基于 linux 中对应的文件系统或者块设备技术，并且每种存储引擎都有其独有的性能特点。\n\ndocker 在 windows 上仅支持 windowsfilter 一种存储引擎，该引擎基于 ntfs 文件系统之上实现了分层和 cow。\n\n下图展示了与系统显示相同的三层镜像。所有镜像层堆叠并合并，对外提供统一的视图。\n\n\n\n\n# 核心架构图\n\n",charsets:{cjk:!0},lastUpdated:"2022/04/05, 14:44:34"},{title:"Docker - 常用命令",frontmatter:{title:"Docker - 常用命令",date:"2021-11-19T17:31:25.000Z",permalink:"/docker/commands/",categories:["Docker"],tags:["容器部署"],readingShow:"top"},regularPath:"/40.%E5%B7%A5%E5%85%B7/40.%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2%20-%20Docker/09.Docker%20-%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html",relativePath:"40.工具/40.容器部署 - Docker/09.Docker - 常用命令.md",key:"v-16e1320d",path:"/docker/commands/",headers:[{level:2,title:"Docker运行流程",slug:"docker运行流程",normalizedTitle:"docker运行流程",charIndex:3},{level:2,title:"Docker帮助命令",slug:"docker帮助命令",normalizedTitle:"docker帮助命令",charIndex:17},{level:2,title:"Docker镜像命令",slug:"docker镜像命令",normalizedTitle:"docker镜像命令",charIndex:31},{level:3,title:"镜像本机",slug:"镜像本机",normalizedTitle:"镜像本机",charIndex:47},{level:3,title:"镜像搜索",slug:"镜像搜索",normalizedTitle:"镜像搜索",charIndex:57},{level:3,title:"镜像下载",slug:"镜像下载",normalizedTitle:"镜像下载",charIndex:67},{level:3,title:"镜像删除",slug:"镜像删除",normalizedTitle:"镜像删除",charIndex:77},{level:3,title:"镜像命名",slug:"镜像命名",normalizedTitle:"镜像命名",charIndex:87},{level:3,title:"镜像打包",slug:"镜像打包",normalizedTitle:"镜像打包",charIndex:97},{level:3,title:"镜像载入",slug:"镜像载入",normalizedTitle:"镜像载入",charIndex:107},{level:3,title:"镜像信息",slug:"镜像信息",normalizedTitle:"镜像信息",charIndex:117},{level:2,title:"Docker容器命令",slug:"docker容器命令",normalizedTitle:"docker容器命令",charIndex:125},{level:3,title:"容器启动",slug:"容器启动",normalizedTitle:"容器启动",charIndex:141},{level:3,title:"容器查看",slug:"容器查看",normalizedTitle:"容器查看",charIndex:151},{level:3,title:"容器退出",slug:"容器退出",normalizedTitle:"容器退出",charIndex:161},{level:3,title:"容器再启动",slug:"容器再启动",normalizedTitle:"容器再启动",charIndex:171},{level:3,title:"容器停止和重启",slug:"容器停止和重启",normalizedTitle:"容器停止和重启",charIndex:182},{level:3,title:"容器删除和清除",slug:"容器删除和清除",normalizedTitle:"容器删除和清除",charIndex:195},{level:3,title:"查看容器进程",slug:"查看容器进程",normalizedTitle:"查看容器进程",charIndex:208},{level:3,title:"查看容器细节",slug:"查看容器细节",normalizedTitle:"查看容器细节",charIndex:220},{level:3,title:"查询运行日志",slug:"查询运行日志",normalizedTitle:"查询运行日志",charIndex:232},{level:3,title:"进入容器进程",slug:"进入容器进程",normalizedTitle:"进入容器进程",charIndex:244},{level:2,title:"Docker容器高级命令",slug:"docker容器高级命令",normalizedTitle:"docker容器高级命令",charIndex:254},{level:3,title:"容器文件 > 宿主机",slug:"容器文件-宿主机",normalizedTitle:"容器文件 &gt; 宿主机",charIndex:null},{level:3,title:"宿主机文件 > 容器",slug:"宿主机文件-容器",normalizedTitle:"宿主机文件 &gt; 容器",charIndex:null},{level:3,title:"数据卷与宿主机共享目录",slug:"数据卷与宿主机共享目录",normalizedTitle:"数据卷与宿主机共享目录",charIndex:304},{level:3,title:"容器打包",slug:"容器打包",normalizedTitle:"容器打包",charIndex:321},{level:3,title:"日志清除",slug:"日志清除",normalizedTitle:"日志清除",charIndex:331},{level:3,title:"权限赋予",slug:"权限赋予",normalizedTitle:"权限赋予",charIndex:341},{level:2,title:"常用命令总结",slug:"常用命令总结",normalizedTitle:"常用命令总结",charIndex:349},{level:2,title:"总结图片",slug:"总结图片",normalizedTitle:"总结图片",charIndex:359},{level:3,title:"镜像命令图片",slug:"镜像命令图片",normalizedTitle:"镜像命令图片",charIndex:369},{level:3,title:"容器命令图片",slug:"容器命令图片",normalizedTitle:"容器命令图片",charIndex:381}],headersStr:"Docker运行流程 Docker帮助命令 Docker镜像命令 镜像本机 镜像搜索 镜像下载 镜像删除 镜像命名 镜像打包 镜像载入 镜像信息 Docker容器命令 容器启动 容器查看 容器退出 容器再启动 容器停止和重启 容器删除和清除 查看容器进程 查看容器细节 查询运行日志 进入容器进程 Docker容器高级命令 容器文件 > 宿主机 宿主机文件 > 容器 数据卷与宿主机共享目录 容器打包 日志清除 权限赋予 常用命令总结 总结图片 镜像命令图片 容器命令图片",content:' * Docker运行流程\n * Docker帮助命令\n * Docker镜像命令\n   * 镜像本机\n   * 镜像搜索\n   * 镜像下载\n   * 镜像删除\n   * 镜像命名\n   * 镜像打包\n   * 镜像载入\n   * 镜像信息\n * Docker容器命令\n   * 容器启动\n   * 容器查看\n   * 容器退出\n   * 容器再启动\n   * 容器停止和重启\n   * 容器删除和清除\n   * 查看容器进程\n   * 查看容器细节\n   * 查询运行日志\n   * 进入容器进程\n * Docker容器高级命令\n   * 容器文件 > 宿主机\n   * 宿主机文件 > 容器\n   * 数据卷与宿主机共享目录\n   * 容器打包\n   * 日志清除\n   * 权限赋予\n * 常用命令总结\n * 总结图片\n   * 镜像命令图片\n   * 容器命令图片\n\n\n\n\n# Docker运行流程\n\n\n\n\n# Docker帮助命令\n\n查看 docker 信息（版本、结构等）\n\ndocker info\n\n\n1\n\n\n查看 docker 版本\n\ndocker version\n\n\n1\n\n\n查看 docker 所有命令\n\ndocker --help\n\n\n1\n\n\n可以看出 docker 执行命令格式： docker [options] command（具体命令）\n\n查看 docker run 命令\n\ndocker run --help\n\n\n1\n\n\n查看其他类似命令\n\ndocker xxx --help\n\n\n1\n\n\n\n# Docker镜像命令\n\n当运行容器时，使用的镜像如果在本地中不存在，docker 就会自动从 docker 镜像仓库中下载，默认是从 Docker Hub 公共镜像源下载。\n\n切记\n\n镜像的唯一标识是 id 和 tag（版本）。（大部分情况下）能以 id 操作镜像，则也能以 tag 操作镜像，反之亦然。\n\n下面的例子可能只写一个标识如 id，忽略另一个，但请记住，两者使用任意一个标识都可以。\n\n2021-11-19 @村长\n\n指令语法标签介绍：\n\n * [xxx]：xxx 是可选的\n * <xxx>：xxx 是必选的\n * |：或者\n * &：和\n\n\n# 镜像本机\n\n查看本机中所有镜像命令格式：docker images [options] [镜像名]\n\n# 列出所有本地镜像格式\ndocker images [options] [镜像名]\n\n# 列出所有镜像（包含中间映像层）\ndocker iamges -a\n\n# 只显示出镜像 id\ndocker iamges -q\n\n# 专门查询某个镜像\ndocker images <镜像名>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n> 例子 1：查询全部镜像\n\n我预先下载了 mysql 的最新版\n\n\n\n \n\n\n\n\n\n\n\n# 执行命令\ndocker images\n\n# 返回结果\nREPOSITORY    TAG       IMAGE ID       CREATED       SIZE\nmysql         latest    b05128b000dd   2 days ago    516MB\nhello-world   latest    feb5d9fea6a5   8 weeks ago   13.3kB\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n> 例子 2：查询 MySQL 镜像\n\n\n\n \n\n\n\n\n\n\n# 执行命令\ndocker images mysql\n\n# 返回结果\nREPOSITORY   TAG       IMAGE ID       CREATED      SIZE\nmysql        latest    b05128b000dd   2 days ago   51\n\n\n1\n2\n3\n4\n5\n6\n\n\n各个选项说明:\n\n * REPOSITORY：镜像的仓库源\n * TAG：镜像的标签，同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本。唯一\n * IMAGE ID：镜像ID。唯一\n * CREATED：镜像的创建时间\n * SIZE：镜像的大小\n\n\n# 镜像搜索\n\n> Docker Hub 网页搜索镜像\n\n\n\n\n\n\n\n> 命令搜索镜像\n\n去 Docker Hub 上查询镜像命令格式：docker search [options] <镜像名>[:TAG]\n\n# 查询指定的镜像格式\ndocker search [options] <镜像名>[:TAG]\n\n# 列出收藏数不少于指定值的镜像\ndocker search -s <收藏数/指定值> <镜像名>\n\n# 显示完整的镜像信息\ndocker search --no-trunc <镜像名>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n通过命令无法列出版本，只能指定查询某个版本是否存在，所以建议还是去 Docker Hub 查看版本号\n\ndocker search <镜像名:版本号>\n\n\n1\n\n\n> 例子 1：查询 MySQL\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 执行命令\ndocker search mysql\n\n# 返回结果\nNAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED\nmysql                             MySQL is a widely used, open-source relation…   11706     [OK]       \nmariadb                           MariaDB Server is a high performing open sou…   4457      [OK]       \nmysql/mysql-server                Optimized MySQL Server Docker images. Create…   869                  [OK]\nphpmyadmin                        phpMyAdmin - A web interface for MySQL and M…   373       [OK]       \ncentos/mysql-57-centos7           MySQL 5.7 SQL database server                   92                   \nmysql/mysql-cluster               Experimental MySQL Cluster Docker images. Cr…   89                   \ncenturylink/mysql                 Image containing mysql. Optimized to be link…   59                   [OK]\ndataback/mysql-backup             Back up mysql databases to... anywhere!         52                   \nprom/mysqld-exporter                                                              43                   [OK]\ndeitch/mysql-backup               REPLACED! Please use http://hub.docker.com/r…   41                   [OK]\ntutum/mysql                       Base docker image to run a MySQL database se…   35                   \nlinuxserver/mysql                 A Mysql container, brought to you by LinuxSe…   34                   \nschickling/mysql-backup-s3        Backup MySQL to S3 (supports periodic backup…   31                   [OK]\nmysql/mysql-router                MySQL Router provides transparent routing be…   23                   \ncentos/mysql-56-centos7           MySQL 5.6 SQL database server                   21                   \narey/mysql-client                 Run a MySQL client from a docker container      19                   [OK]\nfradelg/mysql-cron-backup         MySQL/MariaDB database backup using cron tas…   16                   [OK]\ngenschsa/mysql-employees          MySQL Employee Sample Database                  8                    [OK]\nyloeffler/mysql-backup            This image runs mysqldump to backup data usi…   7                    [OK]\nopenshift/mysql-55-centos7        DEPRECATED: A Centos7 based MySQL v5.5 image…   6                    \ndevilbox/mysql                    Retagged MySQL, MariaDB and PerconaDB offici…   3                    \nansibleplaybookbundle/mysql-apb   An APB which deploys RHSCL MySQL                3                    [OK]\njelastic/mysql                    An image of the MySQL database server mainta…   2                    \ncentos/mysql-80-centos7           MySQL 8.0 SQL database server                   2                    \nwiddpim/mysql-client              Dockerized MySQL Client (5.7) including Curl…   1                    [OK]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n * NAME: 镜像仓库源的名称\n\n * DESCRIPTION: 镜像的描述\n\n * OFFICIAL: 是否为官方发布，OK 代表是官方发布，空白代表是个人发布\n\n * STARS: 类似 Github 里面的 star，表示点赞、喜欢的意思\n\n * AUTOMATED: 是否自动构建\n\n\n# 镜像下载\n\n从远程仓库下载镜像命令格式：docker pull <镜像名>[:TAG | @DIGEST]\n\n * TAG：版本号、标签\n\n * DIGEST：摘要\n\n推荐通过「版本号」下载镜像，如果不指定版本，默认最新版 latest\n\n# 下载镜像格式\ndocker pull <镜像名>[:TAG | @DIGEST]\n\n# 通过「版本号」下载镜像\ndocker pull <镜像名:TAG>\n\n# 通过「摘要」下载镜像\ndocker pull <镜像名:@DIGEST>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n> 查看摘要\n\n\n\n\n\n> 例子 1：通过「版本」下载 MySQL 的 latest 版本\n\n\n\n \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 执行命令\ndocker pull mysql:latest\n\n# 不指定版本号，默认下载 latest 版本\ndocker pull mysql\n\n# 返回结果\nlatest: Pulling from library/mysql\na10c77af2613: Pull complete \nb76a7eb51ffd: Pull complete \n258223f927e4: Pull complete \n2d2c75386df9: Pull complete \n63e92e4046c9: Pull complete \nf5845c731544: Pull complete \nbd0401123a9b: Pull complete \n3ef07ec35f1a: Pull complete \nc93a31315089: Pull complete \n3349ed800d44: Pull complete \n6d01857ca4c1: Pull complete \n4cc13890eda8: Pull complete \nDigest: sha256:aeecae58035f3868bf4f00e5fc623630d8b438db9d05f4d8c6538deb14d4c31b\nStatus: Downloaded newer image for mysql:latest\ndocker.io/library/mysql:latest\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n> 例子 2：通过「摘要」下载 MySQL 的 latest 版本\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 执行命令\ndocker pull mysql:sha256:1ea233722275afb6bf54bdb53bcb162bdb9f3ceed69c64836250f72bc641f63a\n\n# 返回结果\nlatest: Pulling from library/mysql\na10c77af2613: Pull complete \nb76a7eb51ffd: Pull complete \n258223f927e4: Pull complete \n2d2c75386df9: Pull complete \n63e92e4046c9: Pull complete \nf5845c731544: Pull complete \nbd0401123a9b: Pull complete \n3ef07ec35f1a: Pull complete \nc93a31315089: Pull complete \n3349ed800d44: Pull complete \n6d01857ca4c1: Pull complete \n4cc13890eda8: Pull complete \nDigest: sha256:aeecae58035f3868bf4f00e5fc623630d8b438db9d05f4d8c6538deb14d4c31b\nStatus: Downloaded newer image for mysql:latest\ndocker.io/library/mysql:latest\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 镜像删除\n\n在本地仓库删除镜像命令格式：\n\n * 完整：docker image rm [options] <镜像名>[:TAG | IMAGE ID]\n\n * 简写： docker rmi [options] <镜像名>[:TAG | IMAGE ID]\n\ni 指的是 image\n\n# 删除镜像 完整格式\ndocker image rm [options] <镜像名>[:TAG | IMAGE ID]\n\n# 删除镜像 简写格式\ndocker rmi [options] <镜像名>[:TAG | IMAGE ID]\n\n# 强制删除镜像\ndocker image rm -f <镜像名>\ndocker rmi -f <镜像名>\n\n# 通过「版本号」删除镜像\ndocker rmi <镜像名>:TAG\n\n# 通过「镜像 id」删除镜像\ndocker rmi <镜像名>:IMAGE ID\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n> 例子 1：直接删除 hello-world 镜像\n\n\n\n \n\n \n\n\n\n\n\n# 完整格式\ndocker image rm hello-world\n# 简写格式\ndocker rmi hello-world\n\n# 返回结果\nError response from daemon: conflict: unable to remove repository reference "hello-world" (must force) - container 2be48e124757 is using its referenced image feb5d9fea6a5\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n返回结果报错了，原因有两点，要么是容器（container）曾经运行过（类似于 Windows 里运行的软件无法删除），要么存在镜像依赖。\n\n两种解决方案：\n\n * 使用强制删除镜像命令\n   \n   docker rmi -f hello-world\n   \n   \n   1\n   \n   \n   这将会让它产生的历史容器也被删除。\n   \n   注意\n   \n   正在运行容器的镜像无法删除，先停止运行的容器才可以强制删除对应镜像。\n   \n   2021-11-20 @村长\n\n * 报错的结果已经给了容器的 id，先删除容器 id，再重新删除 hello-world 镜像\n   \n   docker rm 2be48e124757\n   docker rmi hello-world\n   \n   \n   1\n   2\n   \n   \n   删除容器不需要 i\n\n> 例子 2：通过 hello-world 镜像的唯一标识符(tag、id)进行删除\n\n首先查询 hello-world 镜像 id\n\n\n\n \n\n\n\n\n\n\n# 执行命令\ndocker image hello-world\n\n# 返回结果\nREPOSITORY    TAG       IMAGE ID       CREATED       SIZE\nhello-world   latest    feb5d9fea6a5   8 weeks ago   13.3kB\n\n\n1\n2\n3\n4\n5\n6\n\n\n删除 hello-world 镜像\n\ndocker rmi hello-world:latest\n# 或者\ndocker rmi hello-world:feb5d9fea6a5\n\n\n1\n2\n3\n\n\n> 例子 3：批量强制删除镜像\n\n如果不强制删除，需要先删除容器（如果容器存在）\n\ndocker rmi -f $(docker images -q)\n\n\n1\n\n\n$() 类似于 Linux 的管道符号 |，先执行括号里的命令，再执行外面的命令。\n\n\n# 镜像命名\n\n如果你觉得下载的镜像名或者镜像 TAG 太长，可以进行重命名。\n\n我们可以手动新增镜像的版本，也就是设置 TAG，并改名，格式为：docker tag <ID> | <镜像名:原来 TAG> <镜像名>:<新的 TAG>\n\n# 手动新增镜像的 TAG\ndocker tag <ID> | <镜像名:原来 TAG> <镜像名>:<新的 TAG>\n\n\n1\n2\n\n\n> 例子 1：新增 hello-world 的版本 TAG 为 1.0\n\n\n\n \n\n\n\n\n\n\n\n# 执行命令\ndocker tag feb5d9fea6a5 hello-world:v1.0\n\n# 返回结果\nREPOSITORY    TAG       IMAGE ID       CREATED       SIZE\nhello-world   latest    feb5d9fea6a5   8 weeks ago   13.3kB\nhello-world   v1.0      feb5d9fea6a5   8 weeks ago   13.3kB\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n> 例子 2：下载的镜像名和版本名太长，可以新增一个短的版本，并修改镜像名，再删除掉长的版本\n\n我刚下载了 Tomcat 镜像，因为版本太长，可以先新增一个短的版本名，再删除掉长的版本名，将 8.5.73-jre8-temurin-focal 改为 8.5.73，顺便把 tomcat 改为 tom\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n \n\n\n# 执行命令\ndocker images tomcat\n\n# 返回结果\nREPOSITORY    TAG                         IMAGE ID       CREATED        SIZE\ntomcat        8.5.73-jre8-temurin-focal   7ec084df520c   24 hours ago   249MB\n\n# 新增短版本\ndocker tag 7ec084df520c tom:8.5.73\n# 删除长版本\ndocker rmi tomcat:8.5.73-jre8-temurin-focal\n\n# 查询查看镜像\ndocker images tom\n\n# 返回结果\nREPOSITORY    TAG                         IMAGE ID       CREATED        SIZE\ntom        \t  8.5.73                      7ec084df520c   24 hours ago   249MB\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 镜像打包\n\n利用 save 可以打包镜像，格式有两个，分别为：\n\n * docker save > <名称.tar> <镜像 ID>\n * docker save <镜像名>[:TAG | ID] -o <名称.tar>\n\ndocker save > <名称.tar> <镜像 ID>\n# 或者\ndocker save <镜像名>[:TAG | ID] -o <名称.tar>\n\n\n1\n2\n3\n\n\n这里的镜像 ID 不能修改为镜像版本 TAG。\n\n> 例子 1：打包 hello-world 镜像为 myHelloWorld.tar\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n \n\n\n# 执行命令\ndocker images\n\n# 返回结果\nREPOSITORY    TAG       IMAGE ID       CREATED        SIZE\ntomcat        8.5.73    7ec084df520c   24 hours ago   249MB\nmysql         latest    b05128b000dd   2 days ago     516MB\nhello-world   latest    feb5d9fea6a5   8 weeks ago    13.3kB\n\n# 打包命令\ndocker save > myHelloWorld.tar feb5d9fea6a5\n# 或者\ndocker save hello-world -o myHelloWorld.tar\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 镜像载入\n\n利用 load 可以导入镜像，格式为：docker load -i <名称.tar>\n\ndocker load -i <名称.tar>\n\n\n1\n\n\n> 例子 1：解压 myHelloWorl.tar\n\n进入镜像包目录下执行命令：\n\ndocker load -i myHelloWorld.tar\n# 或者\ndocker load < myHelloWorld.tar\n\n\n1\n2\n3\n\n\n-i 或者 < 表示从文件输入。会成功导入镜像及相关元数据，包括 tag 信息\n\n\n# 镜像信息\n\n镜像是由一层一层的文件系统组成，在下载镜像的时候就发现，下载了很多文件，那么如何查看这些文件信息呢？\n\n在 Windows 系统，如果查看文件夹的信息，右键->属性 即可查看文件夹里的文件个数、创建时间等信息。镜像也可以查看自己的信息。\n\n查看镜像信息的命令格式：docker images inspect <镜像名>[:TAG | ID]\n\ndocker images inspect <镜像名>[:TAG | ID]\n\n# 可以简写\ndocker inspect <镜像名>[:TAG | ID]\n\n\n1\n2\n3\n4\n\n\n> 例子 1：查看 tomcat 的组成文件\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n# 执行命令\ndocker images\n\n# 返回结果\nREPOSITORY    TAG       IMAGE ID       CREATED        SIZE\ntomcat        8.5.73    7ec084df520c   24 hours ago   249MB\nmysql         latest    b05128b000dd   2 days ago     516MB\nhello-world   latest    feb5d9fea6a5   8 weeks ago    13.3kB\n\n# 查看 tomcat 的组成文件\ndocker image inspect tomcat:8.5.73\n\n# 返回结果太长，自行实践\n......\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# Docker容器命令\n\n切记\n\n容器的唯一标识是 id 和 names（名字）。（大部分情况下）能以 id 操作容器，则也能以 name 操作容器，反之亦然。\n\n内容例子可能只写一个标识如 id，忽略另一个，但请记住，两者使用任意一个标识都可以。\n\n2021-11-19 @村长\n\n\n# 容器启动\n\n启动容器内容比较长，大纲如下：\n\n * 概念\n * 简单启动，不涉及后台启动，端口映射。外界无法访问该容器\n * 宿主机端口与容器端口映射\n * 后台启动\n * 指定名称启动\n\n> 概念\n\n\n\n首先我们要知道，Docker 启动一个容器，这个容器与操作系统是隔离的，比如 Tomcat 容器的端口是 8080，操作系统的 IP 是 http://192.168.199.27，则访问 Tomcat 的界面 http://192.168.199.27:8080 是失败的，这就是容器的隔离效果。你访问的是操作系统的 8080 端口，不是容器的 8080 端口。所以我们在启动容器时要将容器的端口和操作系统的端口进行绑定（映射），这样，外界访问操作系统的端口，就会转发给容器的端口。\n\n通过镜像启动一个容器，格式为：docker run [options] <镜像名[:tag | 镜像 id]>\n\ndocker run [options] <镜像名[:tag | 镜像 id]>\n\t\t\t-p       # 指定端口号，将容器的端口和操作系统端口进行绑定\n\t\t\t-d       # 启动守护式容器，在后台启动容器\n\t\t\t--name   # 为容器起一个别名\n\t\t\t-it      # 打开窗口以交互模式启动容器，进入容器进程内容会有讲解\n\t\t\t--restart=always     #固定格式，容器一旦关闭就会自启动，一般用于经常发生意外而宕机的容器\n\t\t\t--rm     # 容器启动成功并进入容器，再退出来后，容器自动停止并删除，一般在测试情况下使用！\n\n# 完整格式\ndocker run -p 系统端口:容器端口 -p 系统端口:容器端口 ... -d --name 容器别名 镜像名:tag | 镜像 id\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n其中 tag（TAG） 或者容器 id（IMAGE ID）选一个即可。\n\noptions 常用参数说明：\n\n参数           说明\n-d           启动守护式容器，在后台启动容器，并返回容器的id！\n-i           以交互模式运行容器，通过和 -t 一起使用\n-t           给容器重新分配一个终端，通常和 -i 一起使用\n-P           随机端口映射（大写）\n-p           指定端口映射（小写），将容器的端口和操作系统端口进行绑定（映射），多个 -p 可以指定多个端口号\n--name="x"   给容器指定一个名字，如果不设置别名，启动容器会自动给该容器取一个名字\n\n> 简单启动\n\n简单启动一个容器，不涉及后台启动，端口映射，外界无法访问该容器。\n\n\n\n \n\n\n\n\n\n\n \n\n\n \n\n\n \n\n\n# 执行命令\ndocker images tomcat\n\n# 返回结果\nREPOSITORY   TAG       IMAGE ID       CREATED        SIZE\ntomcat       8.5.73    7ec084df520c   24 hours ago   249MB\n\n# 启动命令 1，默认启动 latest 版本\ndocker run tomcat\n\n# 启动命令 2，启动 8.5.73 版本\ndocker run hello-world:8.5.73\n\n# 启动命令 3，启动 id 为 7ec084df520c 的镜像\ndocker run hello-world:7ec084df520c\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n> 宿主机端口与容器端口映射\n\n如果想外界访问容器，比如容器启动了 Tomcat，外界想访问 Tomcat，则需要将 Tomcat 容器和操作系统端口进行绑定（映射），这样，访问操作系统端口就会转发到容器端口。\n\n用 -p 进行映射。\n\ndocker run -p 8080:8080 tomcat:8.5.73\n\n# 如果想多个映射\ndocker run -p 8080:8080 -p 8081:8080 tomcat:8.5.73\n\n\n1\n2\n3\n4\n\n\n前面的 8080/8081 是操作系统的端口，后面的 8080 端口是容器的端口，操作系统的端口只要不占用，随便写，但是容器的端口是固定的。\n\n此时启动还是前台启动。\n\n> 后台启动\n\n前台启动导致无法操作界面，只能看控制台输出发呆，所以需要后台启动\n\ndocker run -p 8080:8080 -d tomcat:8.5.73\n\n\n1\n\n\n> 指定名称启动\n\n如何精确找到并操作某一个 Docker 容器？\n\n * 容器 id\n * 容器名称\n\n可以通过 id 操作容器，但是启动容器时会自动生成随机的 id，很难记住，不可能每次想操作容器都要查看一下容器的 id，所以容器的名称非常重要，默认启动容器会自动生成随机的名称，我们也可以指定名称，通过 --name 选项\n\n\n\n \n\n\n\n\n\n\n\n\n\n# 启动 tomcat\ndocker run -d --name tomcat01 tomcat:8.5.73\n\n# 查看容器运行状态，后面有讲解\ndocker ps\n\n# 返回容器运行状态\nCONTAINER ID   IMAGE           COMMAND             CREATED          STATUS         PORTS    NAMES\n1365f332be6b   tomcat:8.5.73   "catalina.sh run"   10 seconds ago   Up 9 seconds    ...     tomcat01\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n> 交互模式启动容器\n\n在启动容器的时候，我们可以启动完成后直接进入容器内部。使用 -it 即可实现，需要指定的容器内部使用窗口如 shell 窗口、bash 窗口。\n\n\n\n \n\n\n\n\n\n# 执行命令\ndocker run -it tomcat:8.5.73 bash\n\n# 此时已经进入了 Tomcat 容器内部，长什么样子呢？和 Windows 下的根目录类似\nbin  BUILDING.txt  conf  CONTRIBUTING.md  lib  LICENSE  logs  native-jni-lib  NOTICE  README.md  RELEASE-NOTES  RUNNING.txt  temp  webapps  webapps.dist  work\n\n\n1\n2\n3\n4\n5\n\n\n注意\n\n交互模式启动容器，不能加入 -d，否则启动后无法进入容器。\n\n2021-11-22 @村长\n\n上面的例子都是单独针对某个选项而言，实际使用，我们需要将它们组合在一起，如：\n\ndocker run -d  --name tomcat01 -p 8080:8080 tomcat:8.5.73\n\n\n1\n\n\n\n# 容器查看\n\n容器查看的格式：docker ps [options]\n\noptions 常用参数说明：\n\n参数     说明\n-a     表示 all，所有的，列出当前所有正在运行的容器 + 历史运行过的容器\n-l     显示最近创建的容器\n-n=?   显示最近n个创建的容器\n-q     静默模式，返回正在运行的容器 id。\n\n\n\n \n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 查看正在运行的容器\ndocker ps\n\n# 返回结果\nCONTAINER ID   IMAGE           COMMAND             CREATED          STATUS         PORTS                                       NAMES\n1365f332be6b   tomcat:8.5.73   "catalina.sh run"   10 seconds ago   Up 9 seconds   0.0.0.0:8080->8080/tcp, :::8080->8080/tcp   tomcat01\n\n# 查看所有容器，包括历史运行的容器\ndocker ps -a\n\n# 返回结果\nCONTAINER ID   IMAGE           COMMAND             CREATED         STATUS                         PORTS     NAMES\n1365f332be6b   tomcat:8.5.73   "catalina.sh run"   3 minutes ago   Exited (143) 30 seconds ago              tomcat01\n156e574bee6a   hello-world     "/hello"            2 hours ago     Exited (0) About an hour ago             sweet_kare\n\n# 查看所有容器的 ID，包括历史运行的容器\ndocker ps -aq\n\n# 返回结果\nCONTAINER ID\n1365f332be6b\n156e574bee6a\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n返回结果参数名：\n\n * CONTAINER ID：容器 id（唯一）\n\n * IMAGE：生成容器的镜像名\n\n * COMMAND：容器启动后，内部执行的命令\n\n * CREATED：创建时间\n\n * STATUS：当前状态\n\n * PORTS：容器监听的端口\n\n * NAMES：容器的别名\n\n\n# 容器退出\n\n指令         说明\nexit       容器停止退出\nctrl+P+Q   容器不停止退出\n\n\n# 容器再启动\n\n容器再启动命令格式：docker start <容器 id | 容器名>\n\ndocker start <容器 id | 容器名>\n\n\n1\n\n\n首先查看历史运行的容器 id 或者名称，再启动历史运行的容器\n\n\n\n \n\n\n\n\n\n\n\n \n\n \n\n\n# 查看所有容器，包括曾经运行的容器\ndokcer ps -a\n\n# 返回结果\nCONTAINER ID   IMAGE         COMMAND    CREATED          STATUS                      PORTS     NAMES\n1365f332be6b   tomcat:8.5.73   "catalina.sh run"   3 minutes ago   Exited (143) 30 seconds ago              tomcat01\n156e574bee6a   hello-world     "/hello"            2 hours ago     Exited (0) About an hour ago             sweet_kare\n\n# 再启动容器\ndocker start 1365f332be6b\n# 或者\ndocker start tomcat01\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 容器停止和重启\n\n容器正常停止命令格式：docker stop <容器 id | 容器名>\n\n容器立即停止命令格式：docker kill <容器 id | 容器名>\n\n容器重启命令格式：docker restart <容器 id | 容器名>\n\n# 正常停止容器\ndocker stop <容器 id | 容器名>\n\n# 立即停止容器\ndocker kill <容器 id | 容器名>\n\n# 重启容器\ndocker restart <容器 id | 容器名>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n> 例子：\n\n先正常停止 Tomcat 容器，再启动 Tomcat 容器，然后重启 Tomcat 容器，最后立即停止 Tomcat 容器。（这里演示 id，其实 name 也可以）\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n \n\n\n \n\n\n \n\n\n# 查看历史运行的容器\ndocker ps -a\n\n# 返回结果\nCONTAINER ID   IMAGE           COMMAND             CREATED          STATUS                         PORTS     NAMES\n1365f332be6b   tomcat:8.5.73   "catalina.sh run"   17 minutes ago   Exited (143) 11 minutes ago              tomcat01\n156e574bee6a   hello-world     "/hello"            2 hours ago      Exited (0) About an hour ago             sweet_kare\n\n# 正常停止容器\ndocker stop 1365f332be6b\n\n# 启动 Tomcat 容器\ndocker start 1365f332be6b\n\n# 重启容器\ndocker restart 1365f332be6b\n\n# 立即停止容器\ndocker kill 1365f332be6b\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n如果容器处于特殊状态，立即停止 kill 命令可能造成严重后果。\n\n\n# 容器删除和清除\n\n容器删除命令格式：docker rm [options] <容器 id | 容器名>\n\n容器清除命令格式：docker container prune\n\n# 删除命令格式\ndocker rm [options] <容器 id | 容器名>\n\n# 强制删除\ndocker rm -f <容器 id | 容器名>\n\n\n1\n2\n3\n4\n5\n\n\n> 例子：删除 Tomcat 的历史容器\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n# 查看历史运行的容器\ndocker ps -a\n\n# 返回结果\nCONTAINER ID   IMAGE           COMMAND             CREATED          STATUS                         PORTS     NAMES\n1365f332be6b   tomcat:8.5.73   "catalina.sh run"   17 minutes ago   Exited (143) 11 minutes ago              tomcat01\n156e574bee6a   hello-world     "/hello"            2 hours ago      Exited (0) About an hour ago             sweet_kare\n\n# 删除\ndocker rm 1365f332be6b\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n有时候删除会报错，原因在于它处于运行状态，Windows 里正在运行的进程也不能删除。\n\n那么如何删除一个正在运行的容器呢？\n\n我们可以使用强制删除命令 -f\n\ndocker rm -f 1365f332be6b\n\n\n1\n\n\n如何删除所有的历史容器呢？\n\n别忘了，之前提到过的 $()，按照数学运算符号优先级来说，括号的执行优先级很高。\n\ndocker rm -f $(docker ps -qa)\n\n\n1\n\n\n也有专门的清除历史容器命令：docker container prune\n\n\n\n \n\n\n\n\n \n\n\n\n\n\n\n\n\n# 执行命令\ndocker container prune\n\n# 返回结果\nWARNING! This will remove all stopped containers.\n# 输入 y 确定清除\nAre you sure you want to continue? [y/N] y\n\n# 查询查看历史容器\ndocker ps -a\n\n# 返回结果\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n删除容器并不会删除它的镜像，此时可以理解镜像是安装包，容器是安装后的软件，只要保存好镜像（安装包），容器（软件）删除了可以再通过镜像（安装包） run 出来。\n\n\n# 查看容器进程\n\n查看容器进程命令格式：docker top <容器 id | 容器名>\n\ndocker top <容器 id | 容器名>\n\n\n1\n\n\n> 查看 Tomcat 容器的进程\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n# 执行命令\ndocker ps\n\n# 返回结果\nCONTAINER ID   IMAGE           COMMAND             CREATED       STATUS       PORTS                                       NAMES\n1365f332be6b   tomcat:8.5.73   "catalina.sh run"   3 hours ago   Up 2 hours   0.0.0.0:8080->8080/tcp, :::8080->8080/tcp   tomcat01\n\n# 查看进程\ndocker top 1365f332be6b\n\n# 返回结果\nUID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD\nroot                91412               91393               0                   00:12               ?                   00:00:02            /opt/java/openjdk/bin/java -Djava.util.logging.config.file=/usr/local/tomcat/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djdk.tls.ephemeralDHKeySize=2048 -Djava.protocol.handler.pkgs=org.apache.catalina.webresources -Dorg.apache.catalina.security.SecurityListener.UMASK=0027 -Dignore.endorsed.dirs= -classpath /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar -Dcatalina.base=/usr/local/tomcat -Dcatalina.home=/usr/local/tomcat -Djava.io.tmpdir=/usr/local/tomcat/temp org.apache.catalina.startup.Bootstrap start\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n可以查看容器的一些进程信息，如 UID，已经运行时间等。\n\n\n# 查看容器细节\n\n这个命令还是很常用的，要求容器必须运行起来。\n\n查看容器内部细节命令格式：docker inspect <容器 id | 容器名>\n\ndocker inspect <容器 id | 容器名>\n\n\n1\n\n\n> 查看 Tomcat 容器的内部细节\n\n首先查看 Tomcat 容器的 id 或者 names（名字）\n\n# 执行命令\ndocker ps\n\n# 返回结果\nCONTAINER ID   IMAGE           COMMAND             CREATED             STATUS          PORTS                                       NAMES\n1365f332be6b   tomcat:8.5.73   "catalina.sh run"   About an hour ago   Up 12 minutes   0.0.0.0:8080->8080/tcp, :::8080->8080/tcp   tomcat01\n\n\n1\n2\n3\n4\n5\n6\n\n\n接着查看 Tomcat 容器的内部细节\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 执行命令\ndocker inspect 1365f332be6b\n\n# 返回结果（部分内容）\n[\n    {\n        "Id": "1365f332be6b57943dfbfc1ececddac3a2b3c6ad12a17313a427041e27a2c044",\n        "Created": "2021-11-19T15:20:53.580488665Z",\n        "Path": "catalina.sh",\n        "State": {\n            "Status": "running",\n            "Running": true,\n            "Paused": false,\n            "Restarting": false,\n            "OOMKilled": false,\n            "Dead": false,\n            "Pid": 91412,\n            "StartedAt": "2021-11-19T16:12:04.272096418Z",\n            "FinishedAt": "2021-11-19T16:06:04.102664522Z"\n        },\n\t\t"NetworkSettings": {\n            "Ports": {\n                "8080/tcp": [\n                    {\n                        "HostIp": "0.0.0.0",\n                        "HostPort": "8080"\n                    },\n                    {\n                        "HostIp": "::",\n                        "HostPort": "8080"\n                    }\n                ]\n            },\n\t}\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n只截取一部分内容，可以看出有容器的状态，和操作系统绑定的端口等等信息。\n\n\n# 查询运行日志\n\n查询容器的运行日志命令格式：docker logs [options] <容器 id | 容器名>\n\n# 查询容器的运行日志命令格式\ndocker logs [options] <容器 id | 容器名>\n\n# 加入时间戳\ndocker logs -t <容器 id | 容器名>\n\n# 监听日志的输出，一旦日志更新，显示在控制台上\ndocker logs -f <容器 id | 容器名>\n\n# 显示日志的最后多少条数据，取决于数字\ndocker logs --tail 数字 <容器 id | 容器名>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n参数         说明\n-t         显示时间戳\n-f         监听日志，一旦更新，立即打印在控制台\n--tail N   显示日志的最后 N 条数据\n\n> 例子 1：查看容器的日志(显示时间戳)\n\n\n\n\n\n\n\n\n\n\n \n\n\n# 执行命令\ndocker ps\n\n# 返回结果\nCONTAINER ID   IMAGE           COMMAND             CREATED        STATUS         PORTS                                       NAMES\n1365f332be6b   tomcat:8.5.73   "catalina.sh run"   13 hours ago   Up 5 minutes   0.0.0.0:8080->8080/tcp, :::8080->8080/tcp   tomcat01\n\n# 查看容器日志(显示时间戳)\ndocker logs -t 1365f332be6b\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n> 例子 2：实时监听容器的日志\n\n要求：先运行容器才能实时监听容器的日志\n\n\n\n\n\n\n\n\n\n\n \n\n\n# 执行命令\ndocker ps\n\n# 返回结果\nCONTAINER ID   IMAGE           COMMAND             CREATED        STATUS         PORTS                                       NAMES\n1365f332be6b   tomcat:8.5.73   "catalina.sh run"   13 hours ago   Up 5 minutes   0.0.0.0:8080->8080/tcp, :::8080->8080/tcp   tomcat01\n\n# 查看容器日志(显示时间戳)\ndocker logs -tf 1365f332be6b\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n> 例子 3：查看日志的最后 5 行记录\n\n# 执行命令\ndocker ps\n\n# 返回结果\nCONTAINER ID   IMAGE           COMMAND             CREATED        STATUS         PORTS                                       NAMES\n1365f332be6b   tomcat:8.5.73   "catalina.sh run"   13 hours ago   Up 5 minutes   0.0.0.0:8080->8080/tcp, :::8080->8080/tcp   tomcat01\n\n# 查看容器日志(显示时间戳)\ndocker logs -t --tail 5 1365f332be6b\n\n# 返回结果\n2021-11-20T04:11:38.947501511Z 20-Nov-2021 04:11:38.947 INFO [main] org.apache.catalina.startup.Catalina.load Initialization processed in 2190 ms\n2021-11-20T04:11:39.030048052Z 20-Nov-2021 04:11:39.029 INFO [main] org.apache.catalina.core.StandardService.startInternal Starting service [Catalina]\n2021-11-20T04:11:39.030143031Z 20-Nov-2021 04:11:39.029 INFO [main] org.apache.catalina.core.StandardEngine.startInternal Starting Servlet engine: [Apache Tomcat/8.5.73]\n2021-11-20T04:11:39.069039566Z 20-Nov-2021 04:11:39.068 INFO [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler ["http-nio-8080"]\n2021-11-20T04:11:39.080909086Z 20-Nov-2021 04:11:39.080 INFO [main] org.apache.catalina.startup.Catalina.start Server startup in 133 ms\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 进入容器进程\n\n先启动 Tomcat\n\n# 执行命令\ndocker ps -a\n\n# 返回结果\nCONTAINER ID   IMAGE           COMMAND             CREATED          STATUS                        PORTS     NAMES\n1365f332be6b   tomcat:8.5.73   "catalina.sh run"   39 minutes ago   Exited (143) 34 minutes ago             tomcat01\n156e574bee6a   hello-world     "/hello"            3 hours ago      Exited (0) 2 hours ago                  sweet_kare\n\n# 启动 Tomcat\ndocker start 1365f332be6b\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n * 第一种命令：docker attach\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n    \n   \n   \n    \n   \n   \n   # 执行命令\n   docker ps\n   \n   # 返回结果\n   CONTAINER ID   IMAGE           COMMAND             CREATED          STATUS          PORTS                                       NAMES\n   1365f332be6b   tomcat:8.5.73   "catalina.sh run"   42 minutes ago   Up 20 seconds   0.0.0.0:8080->8080/tcp, :::8080->8080/tcp   tomcat01\n   \n   # 进入容器内\n   docker attach 1365f332be6b\n   \n   # 退出\n   exit\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   \n   \n   可以看出，该命令进入容器后，如果退出容器，容器自动结束运行。\n\n * 第二种命令：docker exec，格式为：docker exec [options] <容器 id> <容器使用的终端窗口>\n   \n   docker exec [options] <容器 id> <容器使用的终端窗口>\n   \n   # 以交互模式运行容器，通常与 -t 一起使用\n   docker exec -i <容器 id> <容器使用的终端窗口>\n   \n   # 分配一个伪终端，如 shell窗口、base 窗口\n   docker exec -t <容器 id> <容器使用的终端窗口>\n   \n   # 建议一起使用\n   docker exec -it <容器 id> <容器使用的终端窗口>\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   \n   \n   -i：以交互模式运行容器，通常与 -t 一起使用\n   \n   -t：分配一个伪终端，如 shell窗口、base 窗口\n   \n   > 进入 Tomcat 容器内部\n   \n   \n   \n    \n   \n   \n   \n   \n   \n   \n    \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   # 执行命令\n   docker exec -it 1365f332be6b bash\n   \n   # 进入容器内部，查看容器内部\n   root@1365f332be6b:/usr/local/tomcat# ls\n   bin  BUILDING.txt  conf  CONTRIBUTING.md  lib  LICENSE  logs  native-jni-lib  NOTICE  README.md  RELEASE-NOTES  RUNNING.txt  temp  webapps  webapps.dist  work\n   \n   # 从容器内部退出\n   root@1365f332be6b:/usr/local/tomcat# exit\n   \n   # 查看容器是否停止运行\n   docker ps\n   \n   # 返回结果\n   CONTAINER ID   IMAGE           COMMAND             CREATED          STATUS          PORTS                                       NAMES\n   1365f332be6b   tomcat:8.5.73   "catalina.sh run"   51 minutes ago   Up 26 seconds   0.0.0.0:8080->8080/tcp, :::8080->8080/tcp   tomcat01\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   \n   \n   第 6 行是不是很熟悉，就是 Tomcat 的根目录，这就是 Tomcat 容器的根目录。\n   \n   exit 退出容器后，Docker 不会停止运行容器\n\n区别：\n\n使用 docker attach 进入容器后，exit 退出来便容器也停止运行了。而 docker exec 则不会这样操作导致停止运行容器。\n\n推荐使用 docker exec 命令，因为该命令退出容器终端，不会导致容器的停止。\n\n\n# Docker容器高级命令\n\n如果你是初学者，那么建议高级命令只需要看前两个，后面的高级命令涉及其他 Docker 知识，建议学完 Docker 再来看后面的几个高级命令。\n\n\n# 容器文件 > 宿主机\n\n将容器的文件拷贝到宿主机里命令格式：docker cp <容器 id:容器路径> <宿主机目录路径>\n\ndocker cp <容器 id:容器路径> <宿主机目录路径>\n\n\n1\n\n\n> 将 Tomcat 容器里的 README.md 文件拷贝到宿主机容器\n\n先进入 Tomcat 容器，获取 README.md 的路径\n\n# 执行命令\ndocker ps\n\n# 返回结果\nCONTAINER ID   IMAGE           COMMAND             CREATED        STATUS          PORTS                                       NAMES\n1365f332be6b   tomcat:8.5.73   "catalina.sh run"   13 hours ago   Up 14 minutes   0.0.0.0:8080->8080/tcp, :::8080->8080/tcp   tomcat01\n\n# 进入容器\ndocker exec -it 1365f332be6b bash\n\n# 查看当前路径内容\noot@1365f332be6b:/usr/local/tomcat# ls\n\n# 找到 README.md\nbin  BUILDING.txt  conf  CONTRIBUTING.md  lib  LICENSE  logs  native-jni-lib  NOTICE  README.md  RELEASE-NOTES  RUNNING.txt  temp  webapps  webapps.dist  work\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n退出容器，容器内不支持 docker 命令，在外部使用命令：\n\n\n\n \n\n\n\n\n\n\n\n\n\n# 拷贝出去\ndocker cp 1365f332be6b:/usr/local/tomcat/README.md /opt/README.md\n\n# 进入目录\ncd /opt\nls\n\n# 返回结果\nactivemq  containerd  dump.rdb  jdk  mysql  README.md  redis  rh  tomcat 杂文.txt\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n容器 id 可以用容器名替换。\n\n\n# 宿主机文件 > 容器\n\n将宿主机的文件拷贝到容器里命令格式：docker cp <宿主机文件 | 目录> <容器 id:容器路径>\n\ndocker cp <宿主机文件 | 目录> <容器 id:容器路径>\n\n\n1\n\n\n> 将宿主机的 杂文.txt 文件拷贝到 Tomcat 容器里\n\n杂文.txt 文件在 /opt 目录下\n\ncd /opt\nls\n\n# 返回结果\nactivemq  containerd  dump.rdb  jdk  mysql  README.md  redis  rh  tomcat 杂文.txt\n\n\n1\n2\n3\n4\n5\n\n\nTomcat 容器的 id是 1365f332be6b，拷贝到的路径是 /usr/local/tomcat/\n\ndocker cp 杂文.txt 1365f332be6b:/usr/local/tomcat/\n\n# 进入容器\ndocker exec -it 1365f332be6b bash\n\n# 查看当前路径内容\noot@1365f332be6b:/usr/local/tomcat# ls\n\n# 返回结果\nbin           conf             lib      logs            NOTICE     RELEASE-NOTES  temp     webapps.dist  杂文.txt\nBUILDING.txt  CONTRIBUTING.md  LICENSE  native-jni-lib  README.md  RUNNING.txt    webapps  work\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 数据卷与宿主机共享目录\n\n这部分内容也放到了 Docker - 数据卷：数据卷挂载操作，那里描述得更加详细。这里通俗解释：数据卷就是 Docker 和宿主机的共享目录，这个目录双方共用。\n\n数据卷与宿主机共享目录目录格式：docker run [options] -v <宿主机绝对路径 | 任意别名:容器内的路径[:ro | rw]> <镜像名>\n\ndocker run [options] -v <宿主机路径 | 任意别名:容器内的路径[:ro | rw]> <镜像名>\n\n# 完整\ndocker run -d -p <宿主机端口:容器端口> --name <容器名> -v <宿主机绝对路径 | 任意别名:容器内的路径[:ro | rw]> <镜像名>\n\n\n1\n2\n3\n4\n\n\nro：代表 read-only，容器的路径只允许读，不允许写。不影响宿主机的路径可读可写\n\nrw：默认值，代表可读可写\n\n数据卷的创建有两种：\n\n * 具体目录挂载\n   \n   docker run -d -p <宿主机端口:容器端口> --name <容器名> -v <宿主机绝对路径:容器内的路径[:ro | rw]> <镜像名>\n   \n   \n   1\n   \n   \n   宿主机路径必须是绝对路径，如果目录不存在 Docker 会自动为你创建它。\n   \n   Dockerfile 是不支持这种用法，这是因为 Dockerfile 是为了移植和分享用的，因为不同操作系统的路径格式不一样，所以目前还不能支持。\n   \n   > 例子 1：具名挂载\n   \n   docker run -d -p 8081:8080 --name tomcat02 -v /opt/aa:/usr/local/tomcat/webapps tomcat:8.5.73\n   \n   \n   1\n   \n   \n   将 Tomcat 容器根目录下的 webapps 目录和操作系统的 /opt/aa 目录进行绑定。\n   \n   特点：宿主机的的挂载目录内容覆盖到容器的挂载目录内容\n   \n   因为 /opt/aa 目录为空，所以容器的 webapps 目录内容被 aa 目录内容覆盖，也为空。\n   \n   > 例子 2：删除容器\n   \n   我们删除容器，看主机上数据是否会被删除\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n    \n   \n   \n   # 执行命令\n   docker ps\n   \n   # 返回结果\n   CONTAINER ID   IMAGE           COMMAND             CREATED          STATUS          PORTS                                       NAMES\n   e2bb571eb168   tomcat:8.5.73   "catalina.sh run"   32 minutes ago   Up 31 minutes   0.0.0.0:8081->8080/tcp, :::8081->8080/tcp   tomcat02\n   1365f332be6b   tomcat:8.5.73   "catalina.sh run"   18 hours ago     Up 5 hours      0.0.0.0:8080->8080/tcp, :::8080->8080/tcp   tomcat01\n   \n   # 删除容器\n   docker rm -f e2bb571eb168\n   \n   # 进入 aa 目录\n   cd /opt/aa\n   ls\n   \n   # 返回结果\n   docs  examples  host-manager  manager  ROOT\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   \n   \n   说明没有删除。\n\n * 默认目录挂载\n   \n   docker run -d -p 宿主机端口:容器端口 --name 容器名 -v <任意别名:容器内的路径[:ro | rw]> <镜像名>\n   \n   \n   1\n   \n   \n   任意别名是一个数据卷名字，名字可以随便写，Docker 会在 /var/lib/docker/volumes 目录下生成该数据卷，这是 docker 默认的数据卷目录\n   \n   > 例子 1：\n   \n   \n   \n    \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   # 执行命令\n   docker run -d -p 8082:8080 --name tomcat02 -v aa:/usr/local/tomcat/webapps tomcat:8.5.73\n   \n   find / -name aa\n   \n   # 返回结果\n   /var/lib/docker/volumes/aa\n   \n   cd /var/lib/docker/volumes/aa_data\n   ls\n   \n   # 返回结果\n   docs  examples  host-manager  manager  ROOT\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   \n   \n   aa 代表一个数据卷名字，可以是任意，这相当于相对路径，它会在 /var/lib/docker/volumes 下创建 aa 目录作为数据卷。\n   \n   特点：容器的挂载目录内容覆盖到宿主机的挂载目录内容\n\n挂载总结：\n\n关于到底是宿主机的挂载目录覆盖容器的挂载目录，还是反过来覆盖：\n\n * 默认目录挂载：\n   * 当宿主机挂载目录已经存在时，双方挂载完成后，宿主机挂载目录覆盖容器挂载目录\n   * 当宿主机挂载目录不存在时，双方挂载完成后，容器挂载目录覆盖宿主机挂载目录\n * 具体目录挂载\n   * 当宿主机挂载目录无论存不存在，双方挂载完成后，宿主机挂载目录都会覆盖容器挂载目录\n\n默认目录挂载\n\n宿主机             容器       运行结果\n文件存在            文件存在     挂载成功，容器的文件内容被宿主机覆盖\n目录存在            目录存在     挂载成功，容器的目录内容被宿主机覆盖\n......          ......   ......\n文件不存在           文件存在     挂载成功，宿主机的文件内容被容器覆盖\n目录不存在           目录存在     挂载成功，宿主机的目录内容被容器覆盖\n......          ......   ......\n其他和 具体目录挂载 类似            \n\n具体目录挂载\n\n宿主机        容器         运行结果\n文件存在       文件存在       挂载成功，容器的文件内容被宿主机覆盖\n目录存在       目录存在       挂载成功，容器的目录内容被宿主机覆盖\n------     ------     ------\n文件不存在      文件存在       挂载成功，创建空文件，并覆盖掉容器的文件，导致也为空\n目录不存在      目录存在       挂载成功，创建空目录，并覆盖掉容器的文件，导致也为空\n------     ------     ------\n文件存在       文件不存在      挂载成功\n目录存在       目录不存在      挂载成功\n------     ------     ------\n文件存在       目录存在       容器启动失败\n目录存在       文件存在       容器启动失败\n------     ------     ------\n目录/文件不存在   目录/文件不存在   挂载成功，docker 会自动在宿主机和容器内新建目录\n目录不存在      文件存在       容器启动失败\n目录不存在      目录存在       挂载成功，容器内目录内容被宿主机空目录覆盖（空）\n\n\n# 容器打包\n\n将容器打包成新的镜像命令格式：docker commit -m "描述信息" -a "作者信息" <容器 id | 容器名> <自定义打包镜像名:标签/版本>\n\ndocker commit -m "描述信息" -a "作者信息" <容器 id | 容器名> <自定义打包镜像名:标签/版本>\n\n\n1\n\n\n支持历史容器的打包。\n\n> 打包 Tomcat 容器\n\n\n\n\n\n\n\n\n\n\n \n\n\n# 执行命令\ndocker ps\n\n# 返回结果\nCONTAINER ID   IMAGE           COMMAND             CREATED        STATUS       PORTS                                       NAMES\n1365f332be6b   tomcat:8.5.73   "catalina.sh run"   16 hours ago   Up 4 hours   0.0.0.0:8080->8080/tcp, :::8080->8080/tcp   tomcat01\n \n# 打包命令\ndocker commit -m "打包测试" -a "YoungKbt" 1365f332be6b test-tomcat:1.0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n技巧\n\n操作镜像、容器时，如果使用的标识是 id，该 id 可以截取一部分使用，比如 e2bb571eb168 可以写出 e2bb，Docker 会识别出长的 id。\n\n2021-11-20 @ 村长\n\n\n# 日志清除\n\n使用了 Docker，那么容器里的日志就会交给 Docker 管理，如 Nginx 本身的 log 文件无法查看日志信息，而是由 Docker 管理。\n\n查看 Docker 管理的日志及大小命令\n\nfind /var/lib/docker/containers/ -name *-json.log |xargs du -sh\n\n\n1\n\n\n返回结果如下：\n\n4.0K\t/var/lib/docker/containers/3cfffd7ad7d2189e7e526d97f7db98e8ef555fd4386ba66f152466274ffd844b/3cfffd7ad7d2189e7e526d97f7db98e8ef555fd4386ba66f152466274ffd844b-json.log\n4.0K\t/var/lib/docker/containers/d2379d7c0bd11aa4ae6ade24c98552b0f433d57fe6131f93ca56924b02e84e43/d2379d7c0bd11aa4ae6ade24c98552b0f433d57fe6131f93ca56924b02e84e43-json.log\n1.1M\t/var/lib/docker/containers/4e46cce44b2df1f8055a2fc2a5649ec62d5a3f9a2c5fbb97c1c1d791cbe73be8/4e46cce44b2df1f8055a2fc2a5649ec62d5a3f9a2c5fbb97c1c1d791cbe73be8-json.log\n\n\n1\n2\n3\n\n\n可以看到 有一个日志文件是 1.1M，随着时间可能会越来越大，所以我们学会如何清理日志文件，如清除上方的 1.1M 的日志文件\n\ncat /dev/null > /var/lib/docker/containers/4e46cce44b2df1f8055a2fc2a5649ec62d5a3f9a2c5fbb97c1c1d791cbe73be8/4e46cce44b2df1f8055a2fc2a5649ec62d5a3f9a2c5fbb97c1c1d791cbe73be8-json.log\n\n\n1\n\n\n上面是手动清除，比较麻烦，所以我们可以写一个定时任务，到某个特定时间，就会自动清除所有或者指定的日志文件内容。\n\n下面是定时任务清除所有的日志文件的脚本，我们叫它 clean_docker_logs.sh，我放在 /opt 目录下\n\ncd /opt\nvim clean_docker_logs.sh\n\n\n1\n2\n\n\n脚本内容：\n\n#!/bin/bash\necho "======== start clean docker containers logs ========"  \nlogs=$(find /var/lib/docker/containers/ -name *-json.log)\nfor log in $logs\n    do\n        echo "clean logs : $log"  \n        cat /dev/null > $log\n    done\necho "======== end clean docker containers logs ========" \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n写完脚本后，默认是不允许执行的，我们必须开启 x 权限\n\nchmod +x clean_docker_logs.sh\n\n\n1\n\n\n然后你可以执行一次试试，看是否报错之类的\n\n./clean_docker_logs.sh\n\n\n1\n\n\n如果不报错，则开启定时任务\n\n# 进入定时任务列表\ncrontab -e\n\n# 添加如下内容\n0 3 */30 * * sh /opt/clean_docker_logs.sh\n\n\n1\n2\n3\n4\n5\n\n\n每 30 天运行一次 在凌晨 3 点 0 分开始运行，你可以更改内容的参数，实现在不同的时间执行该脚本。\n\n总之，使用 cat /dev/null > 日志路径 命令进行清除，如果你想定时清除某个日志文件，可自由发挥这个命令。\n\n\n# 权限赋予\n\n> 普通用户权限赋予\n\n第一次安装 Docker，那么只有 root 用户才能启动 Docker 容器，而如何让普通用户启动 Docker 呢，我们需要将普通用户放入 docker 组即可。没有这个组就创建它\n\ngroupadd docker\nusermod -a -G docker <普通用户>\t\t # 将普通用户加入到 docker 用户组中\nsystemctl restart docker    \t\t# 重启 Docker，使得权限生效\n\n\n1\n2\n3\n\n\n-a 是追加，普通用户加入 docker 组后，不会退出原来所在的组。\n\n-G 是指定组名。\n\n然后这个用户就可以使用 Docker 相关命令。\n\n> 容器内权限赋予\n\nDocker 容器里的权限规定：宿主机中，哪个用户启动 Docker 容器，那么这个容器的用户权限就是启动它的宿主机用户权限。\n\n通俗理解，宿主机哪个用户启动 Docker 容器，那么容器里的权限就是启动用户的权限。\n\n我们每次启动 Docker 容器后，进入容器时会发现，显示的是 root 用户，其实这个 root 用户就是宿主机启动时使用的用户\n\n\n\n看图我们发现，我是 kbt 用户，但是进入容器后，发现变成 root 用户，其实这个 root 用户就是宿主机的 kbt 用户（我曾经用 kbt 用户启动这个容器）。\n\n那么问题来了，我以 kbt 用户启动一个容器，那么这个容器内的用户就是 kbt 用户，假设我希望容器的用户权限是宿主机的 root 权限，那么怎么赋予呢？\n\n启动用户时使用 --privileged=true 指令可以解决。\n\n# 切换 kbt 普通用户\nsu kbt\n# 启动容器的时候，赋予 root 权限\ndocker run -d --privileged=true tomcat:8.5.73\n\n\n1\n2\n3\n4\n\n\n此时虽然切换了 kbt 用户启动容器，但是使用了 --privileged=true 指令，则该容器内部的用户权限是宿主机的 root 用户权限，不再是 kbt 普通用户权限。\n\n大约在 0.6 版，privileged 被引入 Docker，使用该参数，容器内的 root 拥有真正的 root 权限，否则，容器内的 root 只是外部的一个普通用户权限。\n\nprivileged 启动的容器，允许你在 Docker 容器中启动 Docker 容器，这就是真正的 root 权限带来的效果。\n\n\n# 常用命令总结\n\n\n\n命令        官方说明                                                           解释\nattach    Attach local standard input, output, and error streams to a    当前 shell 下 attach 连接指定运行镜像\n          running container\nbuild     Build an image from a Dockerfile                               通过 Dockerfile 定制镜像\ncommit    Create a new image from a container\'s changes                  提交当前容器为新的镜像\ncp        Copy files/folders between a container and the local           从容器中拷贝指定文件或者目录到宿主机中\n          filesystem\ncreate    Create a new container                                         创建一个新的容器，同 run，但不启动容器\ndiff      Inspect changes to files or directories on a container\'s       查看 docker 容器变化\n          filesystem\nevents    Get real time events from the server                           从 docker 服务获取容 器实时事件\nexec      Run a command in a running container                           在已存在的容器上运行命令\nexport    Export a container\'s filesystem as a tar archive               导出容器的内 容流作为一个 tar 归档文件[对应 import ]\nhistory   Show the history of an image                                   展示一个镜像形成历史\nimages    List images                                                    列出系统当前镜像\nimport    Import the contents from a tarball to create a filesystem      从 tar包中的内容创建一个新的文件系统映像[对应export]\n          image\ninfo      Display system-wide information                                显示系统相关信息\ninspect   Return low-level information on Docker objects                 查看容器详细信息\nkill      Kill one or more running containers                            杀掉 指定 docker 容器\nload      Load an image from a tar archive or STDIN                      从一个 tar 包中加载一 个镜像[对应 save]\nlogin     Log in to a Docker registry                                    登陆一个 docker 源服务器\nlogout    Log out from a Docker registry                                 从当前 Docker registry 退出\nlogs      Fetch the logs of a container                                  输出当前容器日志信息\npause     Pause all processes within one or more containers              暂停容器\nport      List port mappings or a specific mapping for the container     查看映射端口对应的容器内部源端口\nps        List containers                                                列出容器列表\npull      Pull an image or a repository from a registry                  从docker镜像源服务器拉取指定镜像或者库镜像\npush      Push an image or a repository to a registry                    推送指定镜像或者库镜像至docker源服务器\nrename    Rename a container                                             给一个容器改名\nrestart   Restart one or more containers                                 重启运行的容器\nrm        Remove one or more containers                                  移除一个或者多个容器\nrmi       Remove one or more images                                      移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]\nrun       Run a command in a new container                               创建一个新的容器并运行 一个命令\nsave      Save one or more images to a tar archive (streamed to STDOUT   保存一个镜像为一个 tar 包[对应 load]\n          by default)\nsearch    Search the Docker Hub for images                               在 docker hub 中搜 索镜像\nstart     Start one or more stopped containers                           启动容器\nstats     Display a live stream of container(s) resource usage           显示容器资源使用统计信息的实时信息\n          statistics\nstop      Stop one or more running containers                            停止容器\ntag       Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE          给源中镜像打标签\ntop       Display the running processes of a container                   查看容器中运行的进程信 息\nunpause   Unpause all processes within one or more containers            取消暂停容器\nupdate    Update configuration of one or more containers                 更新容器配置\nversion   Show the Docker version information                            查看 docker 版本号\nwait      Block until one or more containers stop, then print their      截取容器停止时的退出状态值\n          exit codes\n\n\n# 总结图片\n\n如果觉得内容过于繁多或者复杂，这里提供图片形式的命令\n\n来源：https://www.bilibili.com/video/BV1ZT4y1K75K\n\n\n# 镜像命令图片\n\n\n\n\n\n\n# 容器命令图片\n\n\n\n\n\n\n\n',normalizedContent:' * docker运行流程\n * docker帮助命令\n * docker镜像命令\n   * 镜像本机\n   * 镜像搜索\n   * 镜像下载\n   * 镜像删除\n   * 镜像命名\n   * 镜像打包\n   * 镜像载入\n   * 镜像信息\n * docker容器命令\n   * 容器启动\n   * 容器查看\n   * 容器退出\n   * 容器再启动\n   * 容器停止和重启\n   * 容器删除和清除\n   * 查看容器进程\n   * 查看容器细节\n   * 查询运行日志\n   * 进入容器进程\n * docker容器高级命令\n   * 容器文件 > 宿主机\n   * 宿主机文件 > 容器\n   * 数据卷与宿主机共享目录\n   * 容器打包\n   * 日志清除\n   * 权限赋予\n * 常用命令总结\n * 总结图片\n   * 镜像命令图片\n   * 容器命令图片\n\n\n\n\n# docker运行流程\n\n\n\n\n# docker帮助命令\n\n查看 docker 信息（版本、结构等）\n\ndocker info\n\n\n1\n\n\n查看 docker 版本\n\ndocker version\n\n\n1\n\n\n查看 docker 所有命令\n\ndocker --help\n\n\n1\n\n\n可以看出 docker 执行命令格式： docker [options] command（具体命令）\n\n查看 docker run 命令\n\ndocker run --help\n\n\n1\n\n\n查看其他类似命令\n\ndocker xxx --help\n\n\n1\n\n\n\n# docker镜像命令\n\n当运行容器时，使用的镜像如果在本地中不存在，docker 就会自动从 docker 镜像仓库中下载，默认是从 docker hub 公共镜像源下载。\n\n切记\n\n镜像的唯一标识是 id 和 tag（版本）。（大部分情况下）能以 id 操作镜像，则也能以 tag 操作镜像，反之亦然。\n\n下面的例子可能只写一个标识如 id，忽略另一个，但请记住，两者使用任意一个标识都可以。\n\n2021-11-19 @村长\n\n指令语法标签介绍：\n\n * [xxx]：xxx 是可选的\n * <xxx>：xxx 是必选的\n * |：或者\n * &：和\n\n\n# 镜像本机\n\n查看本机中所有镜像命令格式：docker images [options] [镜像名]\n\n# 列出所有本地镜像格式\ndocker images [options] [镜像名]\n\n# 列出所有镜像（包含中间映像层）\ndocker iamges -a\n\n# 只显示出镜像 id\ndocker iamges -q\n\n# 专门查询某个镜像\ndocker images <镜像名>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n> 例子 1：查询全部镜像\n\n我预先下载了 mysql 的最新版\n\n\n\n \n\n\n\n\n\n\n\n# 执行命令\ndocker images\n\n# 返回结果\nrepository    tag       image id       created       size\nmysql         latest    b05128b000dd   2 days ago    516mb\nhello-world   latest    feb5d9fea6a5   8 weeks ago   13.3kb\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n> 例子 2：查询 mysql 镜像\n\n\n\n \n\n\n\n\n\n\n# 执行命令\ndocker images mysql\n\n# 返回结果\nrepository   tag       image id       created      size\nmysql        latest    b05128b000dd   2 days ago   51\n\n\n1\n2\n3\n4\n5\n6\n\n\n各个选项说明:\n\n * repository：镜像的仓库源\n * tag：镜像的标签，同一仓库源可以有多个 tag，代表这个仓库源的不同个版本。唯一\n * image id：镜像id。唯一\n * created：镜像的创建时间\n * size：镜像的大小\n\n\n# 镜像搜索\n\n> docker hub 网页搜索镜像\n\n\n\n\n\n\n\n> 命令搜索镜像\n\n去 docker hub 上查询镜像命令格式：docker search [options] <镜像名>[:tag]\n\n# 查询指定的镜像格式\ndocker search [options] <镜像名>[:tag]\n\n# 列出收藏数不少于指定值的镜像\ndocker search -s <收藏数/指定值> <镜像名>\n\n# 显示完整的镜像信息\ndocker search --no-trunc <镜像名>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n通过命令无法列出版本，只能指定查询某个版本是否存在，所以建议还是去 docker hub 查看版本号\n\ndocker search <镜像名:版本号>\n\n\n1\n\n\n> 例子 1：查询 mysql\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 执行命令\ndocker search mysql\n\n# 返回结果\nname                              description                                     stars     official   automated\nmysql                             mysql is a widely used, open-source relation…   11706     [ok]       \nmariadb                           mariadb server is a high performing open sou…   4457      [ok]       \nmysql/mysql-server                optimized mysql server docker images. create…   869                  [ok]\nphpmyadmin                        phpmyadmin - a web interface for mysql and m…   373       [ok]       \ncentos/mysql-57-centos7           mysql 5.7 sql database server                   92                   \nmysql/mysql-cluster               experimental mysql cluster docker images. cr…   89                   \ncenturylink/mysql                 image containing mysql. optimized to be link…   59                   [ok]\ndataback/mysql-backup             back up mysql databases to... anywhere!         52                   \nprom/mysqld-exporter                                                              43                   [ok]\ndeitch/mysql-backup               replaced! please use http://hub.docker.com/r…   41                   [ok]\ntutum/mysql                       base docker image to run a mysql database se…   35                   \nlinuxserver/mysql                 a mysql container, brought to you by linuxse…   34                   \nschickling/mysql-backup-s3        backup mysql to s3 (supports periodic backup…   31                   [ok]\nmysql/mysql-router                mysql router provides transparent routing be…   23                   \ncentos/mysql-56-centos7           mysql 5.6 sql database server                   21                   \narey/mysql-client                 run a mysql client from a docker container      19                   [ok]\nfradelg/mysql-cron-backup         mysql/mariadb database backup using cron tas…   16                   [ok]\ngenschsa/mysql-employees          mysql employee sample database                  8                    [ok]\nyloeffler/mysql-backup            this image runs mysqldump to backup data usi…   7                    [ok]\nopenshift/mysql-55-centos7        deprecated: a centos7 based mysql v5.5 image…   6                    \ndevilbox/mysql                    retagged mysql, mariadb and perconadb offici…   3                    \nansibleplaybookbundle/mysql-apb   an apb which deploys rhscl mysql                3                    [ok]\njelastic/mysql                    an image of the mysql database server mainta…   2                    \ncentos/mysql-80-centos7           mysql 8.0 sql database server                   2                    \nwiddpim/mysql-client              dockerized mysql client (5.7) including curl…   1                    [ok]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n * name: 镜像仓库源的名称\n\n * description: 镜像的描述\n\n * official: 是否为官方发布，ok 代表是官方发布，空白代表是个人发布\n\n * stars: 类似 github 里面的 star，表示点赞、喜欢的意思\n\n * automated: 是否自动构建\n\n\n# 镜像下载\n\n从远程仓库下载镜像命令格式：docker pull <镜像名>[:tag | @digest]\n\n * tag：版本号、标签\n\n * digest：摘要\n\n推荐通过「版本号」下载镜像，如果不指定版本，默认最新版 latest\n\n# 下载镜像格式\ndocker pull <镜像名>[:tag | @digest]\n\n# 通过「版本号」下载镜像\ndocker pull <镜像名:tag>\n\n# 通过「摘要」下载镜像\ndocker pull <镜像名:@digest>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n> 查看摘要\n\n\n\n\n\n> 例子 1：通过「版本」下载 mysql 的 latest 版本\n\n\n\n \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 执行命令\ndocker pull mysql:latest\n\n# 不指定版本号，默认下载 latest 版本\ndocker pull mysql\n\n# 返回结果\nlatest: pulling from library/mysql\na10c77af2613: pull complete \nb76a7eb51ffd: pull complete \n258223f927e4: pull complete \n2d2c75386df9: pull complete \n63e92e4046c9: pull complete \nf5845c731544: pull complete \nbd0401123a9b: pull complete \n3ef07ec35f1a: pull complete \nc93a31315089: pull complete \n3349ed800d44: pull complete \n6d01857ca4c1: pull complete \n4cc13890eda8: pull complete \ndigest: sha256:aeecae58035f3868bf4f00e5fc623630d8b438db9d05f4d8c6538deb14d4c31b\nstatus: downloaded newer image for mysql:latest\ndocker.io/library/mysql:latest\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n> 例子 2：通过「摘要」下载 mysql 的 latest 版本\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 执行命令\ndocker pull mysql:sha256:1ea233722275afb6bf54bdb53bcb162bdb9f3ceed69c64836250f72bc641f63a\n\n# 返回结果\nlatest: pulling from library/mysql\na10c77af2613: pull complete \nb76a7eb51ffd: pull complete \n258223f927e4: pull complete \n2d2c75386df9: pull complete \n63e92e4046c9: pull complete \nf5845c731544: pull complete \nbd0401123a9b: pull complete \n3ef07ec35f1a: pull complete \nc93a31315089: pull complete \n3349ed800d44: pull complete \n6d01857ca4c1: pull complete \n4cc13890eda8: pull complete \ndigest: sha256:aeecae58035f3868bf4f00e5fc623630d8b438db9d05f4d8c6538deb14d4c31b\nstatus: downloaded newer image for mysql:latest\ndocker.io/library/mysql:latest\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 镜像删除\n\n在本地仓库删除镜像命令格式：\n\n * 完整：docker image rm [options] <镜像名>[:tag | image id]\n\n * 简写： docker rmi [options] <镜像名>[:tag | image id]\n\ni 指的是 image\n\n# 删除镜像 完整格式\ndocker image rm [options] <镜像名>[:tag | image id]\n\n# 删除镜像 简写格式\ndocker rmi [options] <镜像名>[:tag | image id]\n\n# 强制删除镜像\ndocker image rm -f <镜像名>\ndocker rmi -f <镜像名>\n\n# 通过「版本号」删除镜像\ndocker rmi <镜像名>:tag\n\n# 通过「镜像 id」删除镜像\ndocker rmi <镜像名>:image id\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n> 例子 1：直接删除 hello-world 镜像\n\n\n\n \n\n \n\n\n\n\n\n# 完整格式\ndocker image rm hello-world\n# 简写格式\ndocker rmi hello-world\n\n# 返回结果\nerror response from daemon: conflict: unable to remove repository reference "hello-world" (must force) - container 2be48e124757 is using its referenced image feb5d9fea6a5\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n返回结果报错了，原因有两点，要么是容器（container）曾经运行过（类似于 windows 里运行的软件无法删除），要么存在镜像依赖。\n\n两种解决方案：\n\n * 使用强制删除镜像命令\n   \n   docker rmi -f hello-world\n   \n   \n   1\n   \n   \n   这将会让它产生的历史容器也被删除。\n   \n   注意\n   \n   正在运行容器的镜像无法删除，先停止运行的容器才可以强制删除对应镜像。\n   \n   2021-11-20 @村长\n\n * 报错的结果已经给了容器的 id，先删除容器 id，再重新删除 hello-world 镜像\n   \n   docker rm 2be48e124757\n   docker rmi hello-world\n   \n   \n   1\n   2\n   \n   \n   删除容器不需要 i\n\n> 例子 2：通过 hello-world 镜像的唯一标识符(tag、id)进行删除\n\n首先查询 hello-world 镜像 id\n\n\n\n \n\n\n\n\n\n\n# 执行命令\ndocker image hello-world\n\n# 返回结果\nrepository    tag       image id       created       size\nhello-world   latest    feb5d9fea6a5   8 weeks ago   13.3kb\n\n\n1\n2\n3\n4\n5\n6\n\n\n删除 hello-world 镜像\n\ndocker rmi hello-world:latest\n# 或者\ndocker rmi hello-world:feb5d9fea6a5\n\n\n1\n2\n3\n\n\n> 例子 3：批量强制删除镜像\n\n如果不强制删除，需要先删除容器（如果容器存在）\n\ndocker rmi -f $(docker images -q)\n\n\n1\n\n\n$() 类似于 linux 的管道符号 |，先执行括号里的命令，再执行外面的命令。\n\n\n# 镜像命名\n\n如果你觉得下载的镜像名或者镜像 tag 太长，可以进行重命名。\n\n我们可以手动新增镜像的版本，也就是设置 tag，并改名，格式为：docker tag <id> | <镜像名:原来 tag> <镜像名>:<新的 tag>\n\n# 手动新增镜像的 tag\ndocker tag <id> | <镜像名:原来 tag> <镜像名>:<新的 tag>\n\n\n1\n2\n\n\n> 例子 1：新增 hello-world 的版本 tag 为 1.0\n\n\n\n \n\n\n\n\n\n\n\n# 执行命令\ndocker tag feb5d9fea6a5 hello-world:v1.0\n\n# 返回结果\nrepository    tag       image id       created       size\nhello-world   latest    feb5d9fea6a5   8 weeks ago   13.3kb\nhello-world   v1.0      feb5d9fea6a5   8 weeks ago   13.3kb\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n> 例子 2：下载的镜像名和版本名太长，可以新增一个短的版本，并修改镜像名，再删除掉长的版本\n\n我刚下载了 tomcat 镜像，因为版本太长，可以先新增一个短的版本名，再删除掉长的版本名，将 8.5.73-jre8-temurin-focal 改为 8.5.73，顺便把 tomcat 改为 tom\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n \n\n\n# 执行命令\ndocker images tomcat\n\n# 返回结果\nrepository    tag                         image id       created        size\ntomcat        8.5.73-jre8-temurin-focal   7ec084df520c   24 hours ago   249mb\n\n# 新增短版本\ndocker tag 7ec084df520c tom:8.5.73\n# 删除长版本\ndocker rmi tomcat:8.5.73-jre8-temurin-focal\n\n# 查询查看镜像\ndocker images tom\n\n# 返回结果\nrepository    tag                         image id       created        size\ntom        \t  8.5.73                      7ec084df520c   24 hours ago   249mb\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 镜像打包\n\n利用 save 可以打包镜像，格式有两个，分别为：\n\n * docker save > <名称.tar> <镜像 id>\n * docker save <镜像名>[:tag | id] -o <名称.tar>\n\ndocker save > <名称.tar> <镜像 id>\n# 或者\ndocker save <镜像名>[:tag | id] -o <名称.tar>\n\n\n1\n2\n3\n\n\n这里的镜像 id 不能修改为镜像版本 tag。\n\n> 例子 1：打包 hello-world 镜像为 myhelloworld.tar\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n \n\n\n# 执行命令\ndocker images\n\n# 返回结果\nrepository    tag       image id       created        size\ntomcat        8.5.73    7ec084df520c   24 hours ago   249mb\nmysql         latest    b05128b000dd   2 days ago     516mb\nhello-world   latest    feb5d9fea6a5   8 weeks ago    13.3kb\n\n# 打包命令\ndocker save > myhelloworld.tar feb5d9fea6a5\n# 或者\ndocker save hello-world -o myhelloworld.tar\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 镜像载入\n\n利用 load 可以导入镜像，格式为：docker load -i <名称.tar>\n\ndocker load -i <名称.tar>\n\n\n1\n\n\n> 例子 1：解压 myhelloworl.tar\n\n进入镜像包目录下执行命令：\n\ndocker load -i myhelloworld.tar\n# 或者\ndocker load < myhelloworld.tar\n\n\n1\n2\n3\n\n\n-i 或者 < 表示从文件输入。会成功导入镜像及相关元数据，包括 tag 信息\n\n\n# 镜像信息\n\n镜像是由一层一层的文件系统组成，在下载镜像的时候就发现，下载了很多文件，那么如何查看这些文件信息呢？\n\n在 windows 系统，如果查看文件夹的信息，右键->属性 即可查看文件夹里的文件个数、创建时间等信息。镜像也可以查看自己的信息。\n\n查看镜像信息的命令格式：docker images inspect <镜像名>[:tag | id]\n\ndocker images inspect <镜像名>[:tag | id]\n\n# 可以简写\ndocker inspect <镜像名>[:tag | id]\n\n\n1\n2\n3\n4\n\n\n> 例子 1：查看 tomcat 的组成文件\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n# 执行命令\ndocker images\n\n# 返回结果\nrepository    tag       image id       created        size\ntomcat        8.5.73    7ec084df520c   24 hours ago   249mb\nmysql         latest    b05128b000dd   2 days ago     516mb\nhello-world   latest    feb5d9fea6a5   8 weeks ago    13.3kb\n\n# 查看 tomcat 的组成文件\ndocker image inspect tomcat:8.5.73\n\n# 返回结果太长，自行实践\n......\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# docker容器命令\n\n切记\n\n容器的唯一标识是 id 和 names（名字）。（大部分情况下）能以 id 操作容器，则也能以 name 操作容器，反之亦然。\n\n内容例子可能只写一个标识如 id，忽略另一个，但请记住，两者使用任意一个标识都可以。\n\n2021-11-19 @村长\n\n\n# 容器启动\n\n启动容器内容比较长，大纲如下：\n\n * 概念\n * 简单启动，不涉及后台启动，端口映射。外界无法访问该容器\n * 宿主机端口与容器端口映射\n * 后台启动\n * 指定名称启动\n\n> 概念\n\n\n\n首先我们要知道，docker 启动一个容器，这个容器与操作系统是隔离的，比如 tomcat 容器的端口是 8080，操作系统的 ip 是 http://192.168.199.27，则访问 tomcat 的界面 http://192.168.199.27:8080 是失败的，这就是容器的隔离效果。你访问的是操作系统的 8080 端口，不是容器的 8080 端口。所以我们在启动容器时要将容器的端口和操作系统的端口进行绑定（映射），这样，外界访问操作系统的端口，就会转发给容器的端口。\n\n通过镜像启动一个容器，格式为：docker run [options] <镜像名[:tag | 镜像 id]>\n\ndocker run [options] <镜像名[:tag | 镜像 id]>\n\t\t\t-p       # 指定端口号，将容器的端口和操作系统端口进行绑定\n\t\t\t-d       # 启动守护式容器，在后台启动容器\n\t\t\t--name   # 为容器起一个别名\n\t\t\t-it      # 打开窗口以交互模式启动容器，进入容器进程内容会有讲解\n\t\t\t--restart=always     #固定格式，容器一旦关闭就会自启动，一般用于经常发生意外而宕机的容器\n\t\t\t--rm     # 容器启动成功并进入容器，再退出来后，容器自动停止并删除，一般在测试情况下使用！\n\n# 完整格式\ndocker run -p 系统端口:容器端口 -p 系统端口:容器端口 ... -d --name 容器别名 镜像名:tag | 镜像 id\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n其中 tag（tag） 或者容器 id（image id）选一个即可。\n\noptions 常用参数说明：\n\n参数           说明\n-d           启动守护式容器，在后台启动容器，并返回容器的id！\n-i           以交互模式运行容器，通过和 -t 一起使用\n-t           给容器重新分配一个终端，通常和 -i 一起使用\n-p           随机端口映射（大写）\n-p           指定端口映射（小写），将容器的端口和操作系统端口进行绑定（映射），多个 -p 可以指定多个端口号\n--name="x"   给容器指定一个名字，如果不设置别名，启动容器会自动给该容器取一个名字\n\n> 简单启动\n\n简单启动一个容器，不涉及后台启动，端口映射，外界无法访问该容器。\n\n\n\n \n\n\n\n\n\n\n \n\n\n \n\n\n \n\n\n# 执行命令\ndocker images tomcat\n\n# 返回结果\nrepository   tag       image id       created        size\ntomcat       8.5.73    7ec084df520c   24 hours ago   249mb\n\n# 启动命令 1，默认启动 latest 版本\ndocker run tomcat\n\n# 启动命令 2，启动 8.5.73 版本\ndocker run hello-world:8.5.73\n\n# 启动命令 3，启动 id 为 7ec084df520c 的镜像\ndocker run hello-world:7ec084df520c\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n> 宿主机端口与容器端口映射\n\n如果想外界访问容器，比如容器启动了 tomcat，外界想访问 tomcat，则需要将 tomcat 容器和操作系统端口进行绑定（映射），这样，访问操作系统端口就会转发到容器端口。\n\n用 -p 进行映射。\n\ndocker run -p 8080:8080 tomcat:8.5.73\n\n# 如果想多个映射\ndocker run -p 8080:8080 -p 8081:8080 tomcat:8.5.73\n\n\n1\n2\n3\n4\n\n\n前面的 8080/8081 是操作系统的端口，后面的 8080 端口是容器的端口，操作系统的端口只要不占用，随便写，但是容器的端口是固定的。\n\n此时启动还是前台启动。\n\n> 后台启动\n\n前台启动导致无法操作界面，只能看控制台输出发呆，所以需要后台启动\n\ndocker run -p 8080:8080 -d tomcat:8.5.73\n\n\n1\n\n\n> 指定名称启动\n\n如何精确找到并操作某一个 docker 容器？\n\n * 容器 id\n * 容器名称\n\n可以通过 id 操作容器，但是启动容器时会自动生成随机的 id，很难记住，不可能每次想操作容器都要查看一下容器的 id，所以容器的名称非常重要，默认启动容器会自动生成随机的名称，我们也可以指定名称，通过 --name 选项\n\n\n\n \n\n\n\n\n\n\n\n\n\n# 启动 tomcat\ndocker run -d --name tomcat01 tomcat:8.5.73\n\n# 查看容器运行状态，后面有讲解\ndocker ps\n\n# 返回容器运行状态\ncontainer id   image           command             created          status         ports    names\n1365f332be6b   tomcat:8.5.73   "catalina.sh run"   10 seconds ago   up 9 seconds    ...     tomcat01\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n> 交互模式启动容器\n\n在启动容器的时候，我们可以启动完成后直接进入容器内部。使用 -it 即可实现，需要指定的容器内部使用窗口如 shell 窗口、bash 窗口。\n\n\n\n \n\n\n\n\n\n# 执行命令\ndocker run -it tomcat:8.5.73 bash\n\n# 此时已经进入了 tomcat 容器内部，长什么样子呢？和 windows 下的根目录类似\nbin  building.txt  conf  contributing.md  lib  license  logs  native-jni-lib  notice  readme.md  release-notes  running.txt  temp  webapps  webapps.dist  work\n\n\n1\n2\n3\n4\n5\n\n\n注意\n\n交互模式启动容器，不能加入 -d，否则启动后无法进入容器。\n\n2021-11-22 @村长\n\n上面的例子都是单独针对某个选项而言，实际使用，我们需要将它们组合在一起，如：\n\ndocker run -d  --name tomcat01 -p 8080:8080 tomcat:8.5.73\n\n\n1\n\n\n\n# 容器查看\n\n容器查看的格式：docker ps [options]\n\noptions 常用参数说明：\n\n参数     说明\n-a     表示 all，所有的，列出当前所有正在运行的容器 + 历史运行过的容器\n-l     显示最近创建的容器\n-n=?   显示最近n个创建的容器\n-q     静默模式，返回正在运行的容器 id。\n\n\n\n \n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 查看正在运行的容器\ndocker ps\n\n# 返回结果\ncontainer id   image           command             created          status         ports                                       names\n1365f332be6b   tomcat:8.5.73   "catalina.sh run"   10 seconds ago   up 9 seconds   0.0.0.0:8080->8080/tcp, :::8080->8080/tcp   tomcat01\n\n# 查看所有容器，包括历史运行的容器\ndocker ps -a\n\n# 返回结果\ncontainer id   image           command             created         status                         ports     names\n1365f332be6b   tomcat:8.5.73   "catalina.sh run"   3 minutes ago   exited (143) 30 seconds ago              tomcat01\n156e574bee6a   hello-world     "/hello"            2 hours ago     exited (0) about an hour ago             sweet_kare\n\n# 查看所有容器的 id，包括历史运行的容器\ndocker ps -aq\n\n# 返回结果\ncontainer id\n1365f332be6b\n156e574bee6a\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n返回结果参数名：\n\n * container id：容器 id（唯一）\n\n * image：生成容器的镜像名\n\n * command：容器启动后，内部执行的命令\n\n * created：创建时间\n\n * status：当前状态\n\n * ports：容器监听的端口\n\n * names：容器的别名\n\n\n# 容器退出\n\n指令         说明\nexit       容器停止退出\nctrl+p+q   容器不停止退出\n\n\n# 容器再启动\n\n容器再启动命令格式：docker start <容器 id | 容器名>\n\ndocker start <容器 id | 容器名>\n\n\n1\n\n\n首先查看历史运行的容器 id 或者名称，再启动历史运行的容器\n\n\n\n \n\n\n\n\n\n\n\n \n\n \n\n\n# 查看所有容器，包括曾经运行的容器\ndokcer ps -a\n\n# 返回结果\ncontainer id   image         command    created          status                      ports     names\n1365f332be6b   tomcat:8.5.73   "catalina.sh run"   3 minutes ago   exited (143) 30 seconds ago              tomcat01\n156e574bee6a   hello-world     "/hello"            2 hours ago     exited (0) about an hour ago             sweet_kare\n\n# 再启动容器\ndocker start 1365f332be6b\n# 或者\ndocker start tomcat01\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 容器停止和重启\n\n容器正常停止命令格式：docker stop <容器 id | 容器名>\n\n容器立即停止命令格式：docker kill <容器 id | 容器名>\n\n容器重启命令格式：docker restart <容器 id | 容器名>\n\n# 正常停止容器\ndocker stop <容器 id | 容器名>\n\n# 立即停止容器\ndocker kill <容器 id | 容器名>\n\n# 重启容器\ndocker restart <容器 id | 容器名>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n> 例子：\n\n先正常停止 tomcat 容器，再启动 tomcat 容器，然后重启 tomcat 容器，最后立即停止 tomcat 容器。（这里演示 id，其实 name 也可以）\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n \n\n\n \n\n\n \n\n\n# 查看历史运行的容器\ndocker ps -a\n\n# 返回结果\ncontainer id   image           command             created          status                         ports     names\n1365f332be6b   tomcat:8.5.73   "catalina.sh run"   17 minutes ago   exited (143) 11 minutes ago              tomcat01\n156e574bee6a   hello-world     "/hello"            2 hours ago      exited (0) about an hour ago             sweet_kare\n\n# 正常停止容器\ndocker stop 1365f332be6b\n\n# 启动 tomcat 容器\ndocker start 1365f332be6b\n\n# 重启容器\ndocker restart 1365f332be6b\n\n# 立即停止容器\ndocker kill 1365f332be6b\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n如果容器处于特殊状态，立即停止 kill 命令可能造成严重后果。\n\n\n# 容器删除和清除\n\n容器删除命令格式：docker rm [options] <容器 id | 容器名>\n\n容器清除命令格式：docker container prune\n\n# 删除命令格式\ndocker rm [options] <容器 id | 容器名>\n\n# 强制删除\ndocker rm -f <容器 id | 容器名>\n\n\n1\n2\n3\n4\n5\n\n\n> 例子：删除 tomcat 的历史容器\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n# 查看历史运行的容器\ndocker ps -a\n\n# 返回结果\ncontainer id   image           command             created          status                         ports     names\n1365f332be6b   tomcat:8.5.73   "catalina.sh run"   17 minutes ago   exited (143) 11 minutes ago              tomcat01\n156e574bee6a   hello-world     "/hello"            2 hours ago      exited (0) about an hour ago             sweet_kare\n\n# 删除\ndocker rm 1365f332be6b\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n有时候删除会报错，原因在于它处于运行状态，windows 里正在运行的进程也不能删除。\n\n那么如何删除一个正在运行的容器呢？\n\n我们可以使用强制删除命令 -f\n\ndocker rm -f 1365f332be6b\n\n\n1\n\n\n如何删除所有的历史容器呢？\n\n别忘了，之前提到过的 $()，按照数学运算符号优先级来说，括号的执行优先级很高。\n\ndocker rm -f $(docker ps -qa)\n\n\n1\n\n\n也有专门的清除历史容器命令：docker container prune\n\n\n\n \n\n\n\n\n \n\n\n\n\n\n\n\n\n# 执行命令\ndocker container prune\n\n# 返回结果\nwarning! this will remove all stopped containers.\n# 输入 y 确定清除\nare you sure you want to continue? [y/n] y\n\n# 查询查看历史容器\ndocker ps -a\n\n# 返回结果\ncontainer id        image               command             created             status              ports               names\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n删除容器并不会删除它的镜像，此时可以理解镜像是安装包，容器是安装后的软件，只要保存好镜像（安装包），容器（软件）删除了可以再通过镜像（安装包） run 出来。\n\n\n# 查看容器进程\n\n查看容器进程命令格式：docker top <容器 id | 容器名>\n\ndocker top <容器 id | 容器名>\n\n\n1\n\n\n> 查看 tomcat 容器的进程\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n# 执行命令\ndocker ps\n\n# 返回结果\ncontainer id   image           command             created       status       ports                                       names\n1365f332be6b   tomcat:8.5.73   "catalina.sh run"   3 hours ago   up 2 hours   0.0.0.0:8080->8080/tcp, :::8080->8080/tcp   tomcat01\n\n# 查看进程\ndocker top 1365f332be6b\n\n# 返回结果\nuid                 pid                 ppid                c                   stime               tty                 time                cmd\nroot                91412               91393               0                   00:12               ?                   00:00:02            /opt/java/openjdk/bin/java -djava.util.logging.config.file=/usr/local/tomcat/conf/logging.properties -djava.util.logging.manager=org.apache.juli.classloaderlogmanager -djdk.tls.ephemeraldhkeysize=2048 -djava.protocol.handler.pkgs=org.apache.catalina.webresources -dorg.apache.catalina.security.securitylistener.umask=0027 -dignore.endorsed.dirs= -classpath /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar -dcatalina.base=/usr/local/tomcat -dcatalina.home=/usr/local/tomcat -djava.io.tmpdir=/usr/local/tomcat/temp org.apache.catalina.startup.bootstrap start\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n可以查看容器的一些进程信息，如 uid，已经运行时间等。\n\n\n# 查看容器细节\n\n这个命令还是很常用的，要求容器必须运行起来。\n\n查看容器内部细节命令格式：docker inspect <容器 id | 容器名>\n\ndocker inspect <容器 id | 容器名>\n\n\n1\n\n\n> 查看 tomcat 容器的内部细节\n\n首先查看 tomcat 容器的 id 或者 names（名字）\n\n# 执行命令\ndocker ps\n\n# 返回结果\ncontainer id   image           command             created             status          ports                                       names\n1365f332be6b   tomcat:8.5.73   "catalina.sh run"   about an hour ago   up 12 minutes   0.0.0.0:8080->8080/tcp, :::8080->8080/tcp   tomcat01\n\n\n1\n2\n3\n4\n5\n6\n\n\n接着查看 tomcat 容器的内部细节\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 执行命令\ndocker inspect 1365f332be6b\n\n# 返回结果（部分内容）\n[\n    {\n        "id": "1365f332be6b57943dfbfc1ececddac3a2b3c6ad12a17313a427041e27a2c044",\n        "created": "2021-11-19t15:20:53.580488665z",\n        "path": "catalina.sh",\n        "state": {\n            "status": "running",\n            "running": true,\n            "paused": false,\n            "restarting": false,\n            "oomkilled": false,\n            "dead": false,\n            "pid": 91412,\n            "startedat": "2021-11-19t16:12:04.272096418z",\n            "finishedat": "2021-11-19t16:06:04.102664522z"\n        },\n\t\t"networksettings": {\n            "ports": {\n                "8080/tcp": [\n                    {\n                        "hostip": "0.0.0.0",\n                        "hostport": "8080"\n                    },\n                    {\n                        "hostip": "::",\n                        "hostport": "8080"\n                    }\n                ]\n            },\n\t}\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n只截取一部分内容，可以看出有容器的状态，和操作系统绑定的端口等等信息。\n\n\n# 查询运行日志\n\n查询容器的运行日志命令格式：docker logs [options] <容器 id | 容器名>\n\n# 查询容器的运行日志命令格式\ndocker logs [options] <容器 id | 容器名>\n\n# 加入时间戳\ndocker logs -t <容器 id | 容器名>\n\n# 监听日志的输出，一旦日志更新，显示在控制台上\ndocker logs -f <容器 id | 容器名>\n\n# 显示日志的最后多少条数据，取决于数字\ndocker logs --tail 数字 <容器 id | 容器名>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n参数         说明\n-t         显示时间戳\n-f         监听日志，一旦更新，立即打印在控制台\n--tail n   显示日志的最后 n 条数据\n\n> 例子 1：查看容器的日志(显示时间戳)\n\n\n\n\n\n\n\n\n\n\n \n\n\n# 执行命令\ndocker ps\n\n# 返回结果\ncontainer id   image           command             created        status         ports                                       names\n1365f332be6b   tomcat:8.5.73   "catalina.sh run"   13 hours ago   up 5 minutes   0.0.0.0:8080->8080/tcp, :::8080->8080/tcp   tomcat01\n\n# 查看容器日志(显示时间戳)\ndocker logs -t 1365f332be6b\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n> 例子 2：实时监听容器的日志\n\n要求：先运行容器才能实时监听容器的日志\n\n\n\n\n\n\n\n\n\n\n \n\n\n# 执行命令\ndocker ps\n\n# 返回结果\ncontainer id   image           command             created        status         ports                                       names\n1365f332be6b   tomcat:8.5.73   "catalina.sh run"   13 hours ago   up 5 minutes   0.0.0.0:8080->8080/tcp, :::8080->8080/tcp   tomcat01\n\n# 查看容器日志(显示时间戳)\ndocker logs -tf 1365f332be6b\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n> 例子 3：查看日志的最后 5 行记录\n\n# 执行命令\ndocker ps\n\n# 返回结果\ncontainer id   image           command             created        status         ports                                       names\n1365f332be6b   tomcat:8.5.73   "catalina.sh run"   13 hours ago   up 5 minutes   0.0.0.0:8080->8080/tcp, :::8080->8080/tcp   tomcat01\n\n# 查看容器日志(显示时间戳)\ndocker logs -t --tail 5 1365f332be6b\n\n# 返回结果\n2021-11-20t04:11:38.947501511z 20-nov-2021 04:11:38.947 info [main] org.apache.catalina.startup.catalina.load initialization processed in 2190 ms\n2021-11-20t04:11:39.030048052z 20-nov-2021 04:11:39.029 info [main] org.apache.catalina.core.standardservice.startinternal starting service [catalina]\n2021-11-20t04:11:39.030143031z 20-nov-2021 04:11:39.029 info [main] org.apache.catalina.core.standardengine.startinternal starting servlet engine: [apache tomcat/8.5.73]\n2021-11-20t04:11:39.069039566z 20-nov-2021 04:11:39.068 info [main] org.apache.coyote.abstractprotocol.start starting protocolhandler ["http-nio-8080"]\n2021-11-20t04:11:39.080909086z 20-nov-2021 04:11:39.080 info [main] org.apache.catalina.startup.catalina.start server startup in 133 ms\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 进入容器进程\n\n先启动 tomcat\n\n# 执行命令\ndocker ps -a\n\n# 返回结果\ncontainer id   image           command             created          status                        ports     names\n1365f332be6b   tomcat:8.5.73   "catalina.sh run"   39 minutes ago   exited (143) 34 minutes ago             tomcat01\n156e574bee6a   hello-world     "/hello"            3 hours ago      exited (0) 2 hours ago                  sweet_kare\n\n# 启动 tomcat\ndocker start 1365f332be6b\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n * 第一种命令：docker attach\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n    \n   \n   \n    \n   \n   \n   # 执行命令\n   docker ps\n   \n   # 返回结果\n   container id   image           command             created          status          ports                                       names\n   1365f332be6b   tomcat:8.5.73   "catalina.sh run"   42 minutes ago   up 20 seconds   0.0.0.0:8080->8080/tcp, :::8080->8080/tcp   tomcat01\n   \n   # 进入容器内\n   docker attach 1365f332be6b\n   \n   # 退出\n   exit\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   \n   \n   可以看出，该命令进入容器后，如果退出容器，容器自动结束运行。\n\n * 第二种命令：docker exec，格式为：docker exec [options] <容器 id> <容器使用的终端窗口>\n   \n   docker exec [options] <容器 id> <容器使用的终端窗口>\n   \n   # 以交互模式运行容器，通常与 -t 一起使用\n   docker exec -i <容器 id> <容器使用的终端窗口>\n   \n   # 分配一个伪终端，如 shell窗口、base 窗口\n   docker exec -t <容器 id> <容器使用的终端窗口>\n   \n   # 建议一起使用\n   docker exec -it <容器 id> <容器使用的终端窗口>\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   \n   \n   -i：以交互模式运行容器，通常与 -t 一起使用\n   \n   -t：分配一个伪终端，如 shell窗口、base 窗口\n   \n   > 进入 tomcat 容器内部\n   \n   \n   \n    \n   \n   \n   \n   \n   \n   \n    \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   # 执行命令\n   docker exec -it 1365f332be6b bash\n   \n   # 进入容器内部，查看容器内部\n   root@1365f332be6b:/usr/local/tomcat# ls\n   bin  building.txt  conf  contributing.md  lib  license  logs  native-jni-lib  notice  readme.md  release-notes  running.txt  temp  webapps  webapps.dist  work\n   \n   # 从容器内部退出\n   root@1365f332be6b:/usr/local/tomcat# exit\n   \n   # 查看容器是否停止运行\n   docker ps\n   \n   # 返回结果\n   container id   image           command             created          status          ports                                       names\n   1365f332be6b   tomcat:8.5.73   "catalina.sh run"   51 minutes ago   up 26 seconds   0.0.0.0:8080->8080/tcp, :::8080->8080/tcp   tomcat01\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   \n   \n   第 6 行是不是很熟悉，就是 tomcat 的根目录，这就是 tomcat 容器的根目录。\n   \n   exit 退出容器后，docker 不会停止运行容器\n\n区别：\n\n使用 docker attach 进入容器后，exit 退出来便容器也停止运行了。而 docker exec 则不会这样操作导致停止运行容器。\n\n推荐使用 docker exec 命令，因为该命令退出容器终端，不会导致容器的停止。\n\n\n# docker容器高级命令\n\n如果你是初学者，那么建议高级命令只需要看前两个，后面的高级命令涉及其他 docker 知识，建议学完 docker 再来看后面的几个高级命令。\n\n\n# 容器文件 > 宿主机\n\n将容器的文件拷贝到宿主机里命令格式：docker cp <容器 id:容器路径> <宿主机目录路径>\n\ndocker cp <容器 id:容器路径> <宿主机目录路径>\n\n\n1\n\n\n> 将 tomcat 容器里的 readme.md 文件拷贝到宿主机容器\n\n先进入 tomcat 容器，获取 readme.md 的路径\n\n# 执行命令\ndocker ps\n\n# 返回结果\ncontainer id   image           command             created        status          ports                                       names\n1365f332be6b   tomcat:8.5.73   "catalina.sh run"   13 hours ago   up 14 minutes   0.0.0.0:8080->8080/tcp, :::8080->8080/tcp   tomcat01\n\n# 进入容器\ndocker exec -it 1365f332be6b bash\n\n# 查看当前路径内容\noot@1365f332be6b:/usr/local/tomcat# ls\n\n# 找到 readme.md\nbin  building.txt  conf  contributing.md  lib  license  logs  native-jni-lib  notice  readme.md  release-notes  running.txt  temp  webapps  webapps.dist  work\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n退出容器，容器内不支持 docker 命令，在外部使用命令：\n\n\n\n \n\n\n\n\n\n\n\n\n\n# 拷贝出去\ndocker cp 1365f332be6b:/usr/local/tomcat/readme.md /opt/readme.md\n\n# 进入目录\ncd /opt\nls\n\n# 返回结果\nactivemq  containerd  dump.rdb  jdk  mysql  readme.md  redis  rh  tomcat 杂文.txt\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n容器 id 可以用容器名替换。\n\n\n# 宿主机文件 > 容器\n\n将宿主机的文件拷贝到容器里命令格式：docker cp <宿主机文件 | 目录> <容器 id:容器路径>\n\ndocker cp <宿主机文件 | 目录> <容器 id:容器路径>\n\n\n1\n\n\n> 将宿主机的 杂文.txt 文件拷贝到 tomcat 容器里\n\n杂文.txt 文件在 /opt 目录下\n\ncd /opt\nls\n\n# 返回结果\nactivemq  containerd  dump.rdb  jdk  mysql  readme.md  redis  rh  tomcat 杂文.txt\n\n\n1\n2\n3\n4\n5\n\n\ntomcat 容器的 id是 1365f332be6b，拷贝到的路径是 /usr/local/tomcat/\n\ndocker cp 杂文.txt 1365f332be6b:/usr/local/tomcat/\n\n# 进入容器\ndocker exec -it 1365f332be6b bash\n\n# 查看当前路径内容\noot@1365f332be6b:/usr/local/tomcat# ls\n\n# 返回结果\nbin           conf             lib      logs            notice     release-notes  temp     webapps.dist  杂文.txt\nbuilding.txt  contributing.md  license  native-jni-lib  readme.md  running.txt    webapps  work\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 数据卷与宿主机共享目录\n\n这部分内容也放到了 docker - 数据卷：数据卷挂载操作，那里描述得更加详细。这里通俗解释：数据卷就是 docker 和宿主机的共享目录，这个目录双方共用。\n\n数据卷与宿主机共享目录目录格式：docker run [options] -v <宿主机绝对路径 | 任意别名:容器内的路径[:ro | rw]> <镜像名>\n\ndocker run [options] -v <宿主机路径 | 任意别名:容器内的路径[:ro | rw]> <镜像名>\n\n# 完整\ndocker run -d -p <宿主机端口:容器端口> --name <容器名> -v <宿主机绝对路径 | 任意别名:容器内的路径[:ro | rw]> <镜像名>\n\n\n1\n2\n3\n4\n\n\nro：代表 read-only，容器的路径只允许读，不允许写。不影响宿主机的路径可读可写\n\nrw：默认值，代表可读可写\n\n数据卷的创建有两种：\n\n * 具体目录挂载\n   \n   docker run -d -p <宿主机端口:容器端口> --name <容器名> -v <宿主机绝对路径:容器内的路径[:ro | rw]> <镜像名>\n   \n   \n   1\n   \n   \n   宿主机路径必须是绝对路径，如果目录不存在 docker 会自动为你创建它。\n   \n   dockerfile 是不支持这种用法，这是因为 dockerfile 是为了移植和分享用的，因为不同操作系统的路径格式不一样，所以目前还不能支持。\n   \n   > 例子 1：具名挂载\n   \n   docker run -d -p 8081:8080 --name tomcat02 -v /opt/aa:/usr/local/tomcat/webapps tomcat:8.5.73\n   \n   \n   1\n   \n   \n   将 tomcat 容器根目录下的 webapps 目录和操作系统的 /opt/aa 目录进行绑定。\n   \n   特点：宿主机的的挂载目录内容覆盖到容器的挂载目录内容\n   \n   因为 /opt/aa 目录为空，所以容器的 webapps 目录内容被 aa 目录内容覆盖，也为空。\n   \n   > 例子 2：删除容器\n   \n   我们删除容器，看主机上数据是否会被删除\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n    \n   \n   \n   # 执行命令\n   docker ps\n   \n   # 返回结果\n   container id   image           command             created          status          ports                                       names\n   e2bb571eb168   tomcat:8.5.73   "catalina.sh run"   32 minutes ago   up 31 minutes   0.0.0.0:8081->8080/tcp, :::8081->8080/tcp   tomcat02\n   1365f332be6b   tomcat:8.5.73   "catalina.sh run"   18 hours ago     up 5 hours      0.0.0.0:8080->8080/tcp, :::8080->8080/tcp   tomcat01\n   \n   # 删除容器\n   docker rm -f e2bb571eb168\n   \n   # 进入 aa 目录\n   cd /opt/aa\n   ls\n   \n   # 返回结果\n   docs  examples  host-manager  manager  root\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   \n   \n   说明没有删除。\n\n * 默认目录挂载\n   \n   docker run -d -p 宿主机端口:容器端口 --name 容器名 -v <任意别名:容器内的路径[:ro | rw]> <镜像名>\n   \n   \n   1\n   \n   \n   任意别名是一个数据卷名字，名字可以随便写，docker 会在 /var/lib/docker/volumes 目录下生成该数据卷，这是 docker 默认的数据卷目录\n   \n   > 例子 1：\n   \n   \n   \n    \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   # 执行命令\n   docker run -d -p 8082:8080 --name tomcat02 -v aa:/usr/local/tomcat/webapps tomcat:8.5.73\n   \n   find / -name aa\n   \n   # 返回结果\n   /var/lib/docker/volumes/aa\n   \n   cd /var/lib/docker/volumes/aa_data\n   ls\n   \n   # 返回结果\n   docs  examples  host-manager  manager  root\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   \n   \n   aa 代表一个数据卷名字，可以是任意，这相当于相对路径，它会在 /var/lib/docker/volumes 下创建 aa 目录作为数据卷。\n   \n   特点：容器的挂载目录内容覆盖到宿主机的挂载目录内容\n\n挂载总结：\n\n关于到底是宿主机的挂载目录覆盖容器的挂载目录，还是反过来覆盖：\n\n * 默认目录挂载：\n   * 当宿主机挂载目录已经存在时，双方挂载完成后，宿主机挂载目录覆盖容器挂载目录\n   * 当宿主机挂载目录不存在时，双方挂载完成后，容器挂载目录覆盖宿主机挂载目录\n * 具体目录挂载\n   * 当宿主机挂载目录无论存不存在，双方挂载完成后，宿主机挂载目录都会覆盖容器挂载目录\n\n默认目录挂载\n\n宿主机             容器       运行结果\n文件存在            文件存在     挂载成功，容器的文件内容被宿主机覆盖\n目录存在            目录存在     挂载成功，容器的目录内容被宿主机覆盖\n......          ......   ......\n文件不存在           文件存在     挂载成功，宿主机的文件内容被容器覆盖\n目录不存在           目录存在     挂载成功，宿主机的目录内容被容器覆盖\n......          ......   ......\n其他和 具体目录挂载 类似            \n\n具体目录挂载\n\n宿主机        容器         运行结果\n文件存在       文件存在       挂载成功，容器的文件内容被宿主机覆盖\n目录存在       目录存在       挂载成功，容器的目录内容被宿主机覆盖\n------     ------     ------\n文件不存在      文件存在       挂载成功，创建空文件，并覆盖掉容器的文件，导致也为空\n目录不存在      目录存在       挂载成功，创建空目录，并覆盖掉容器的文件，导致也为空\n------     ------     ------\n文件存在       文件不存在      挂载成功\n目录存在       目录不存在      挂载成功\n------     ------     ------\n文件存在       目录存在       容器启动失败\n目录存在       文件存在       容器启动失败\n------     ------     ------\n目录/文件不存在   目录/文件不存在   挂载成功，docker 会自动在宿主机和容器内新建目录\n目录不存在      文件存在       容器启动失败\n目录不存在      目录存在       挂载成功，容器内目录内容被宿主机空目录覆盖（空）\n\n\n# 容器打包\n\n将容器打包成新的镜像命令格式：docker commit -m "描述信息" -a "作者信息" <容器 id | 容器名> <自定义打包镜像名:标签/版本>\n\ndocker commit -m "描述信息" -a "作者信息" <容器 id | 容器名> <自定义打包镜像名:标签/版本>\n\n\n1\n\n\n支持历史容器的打包。\n\n> 打包 tomcat 容器\n\n\n\n\n\n\n\n\n\n\n \n\n\n# 执行命令\ndocker ps\n\n# 返回结果\ncontainer id   image           command             created        status       ports                                       names\n1365f332be6b   tomcat:8.5.73   "catalina.sh run"   16 hours ago   up 4 hours   0.0.0.0:8080->8080/tcp, :::8080->8080/tcp   tomcat01\n \n# 打包命令\ndocker commit -m "打包测试" -a "youngkbt" 1365f332be6b test-tomcat:1.0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n技巧\n\n操作镜像、容器时，如果使用的标识是 id，该 id 可以截取一部分使用，比如 e2bb571eb168 可以写出 e2bb，docker 会识别出长的 id。\n\n2021-11-20 @ 村长\n\n\n# 日志清除\n\n使用了 docker，那么容器里的日志就会交给 docker 管理，如 nginx 本身的 log 文件无法查看日志信息，而是由 docker 管理。\n\n查看 docker 管理的日志及大小命令\n\nfind /var/lib/docker/containers/ -name *-json.log |xargs du -sh\n\n\n1\n\n\n返回结果如下：\n\n4.0k\t/var/lib/docker/containers/3cfffd7ad7d2189e7e526d97f7db98e8ef555fd4386ba66f152466274ffd844b/3cfffd7ad7d2189e7e526d97f7db98e8ef555fd4386ba66f152466274ffd844b-json.log\n4.0k\t/var/lib/docker/containers/d2379d7c0bd11aa4ae6ade24c98552b0f433d57fe6131f93ca56924b02e84e43/d2379d7c0bd11aa4ae6ade24c98552b0f433d57fe6131f93ca56924b02e84e43-json.log\n1.1m\t/var/lib/docker/containers/4e46cce44b2df1f8055a2fc2a5649ec62d5a3f9a2c5fbb97c1c1d791cbe73be8/4e46cce44b2df1f8055a2fc2a5649ec62d5a3f9a2c5fbb97c1c1d791cbe73be8-json.log\n\n\n1\n2\n3\n\n\n可以看到 有一个日志文件是 1.1m，随着时间可能会越来越大，所以我们学会如何清理日志文件，如清除上方的 1.1m 的日志文件\n\ncat /dev/null > /var/lib/docker/containers/4e46cce44b2df1f8055a2fc2a5649ec62d5a3f9a2c5fbb97c1c1d791cbe73be8/4e46cce44b2df1f8055a2fc2a5649ec62d5a3f9a2c5fbb97c1c1d791cbe73be8-json.log\n\n\n1\n\n\n上面是手动清除，比较麻烦，所以我们可以写一个定时任务，到某个特定时间，就会自动清除所有或者指定的日志文件内容。\n\n下面是定时任务清除所有的日志文件的脚本，我们叫它 clean_docker_logs.sh，我放在 /opt 目录下\n\ncd /opt\nvim clean_docker_logs.sh\n\n\n1\n2\n\n\n脚本内容：\n\n#!/bin/bash\necho "======== start clean docker containers logs ========"  \nlogs=$(find /var/lib/docker/containers/ -name *-json.log)\nfor log in $logs\n    do\n        echo "clean logs : $log"  \n        cat /dev/null > $log\n    done\necho "======== end clean docker containers logs ========" \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n写完脚本后，默认是不允许执行的，我们必须开启 x 权限\n\nchmod +x clean_docker_logs.sh\n\n\n1\n\n\n然后你可以执行一次试试，看是否报错之类的\n\n./clean_docker_logs.sh\n\n\n1\n\n\n如果不报错，则开启定时任务\n\n# 进入定时任务列表\ncrontab -e\n\n# 添加如下内容\n0 3 */30 * * sh /opt/clean_docker_logs.sh\n\n\n1\n2\n3\n4\n5\n\n\n每 30 天运行一次 在凌晨 3 点 0 分开始运行，你可以更改内容的参数，实现在不同的时间执行该脚本。\n\n总之，使用 cat /dev/null > 日志路径 命令进行清除，如果你想定时清除某个日志文件，可自由发挥这个命令。\n\n\n# 权限赋予\n\n> 普通用户权限赋予\n\n第一次安装 docker，那么只有 root 用户才能启动 docker 容器，而如何让普通用户启动 docker 呢，我们需要将普通用户放入 docker 组即可。没有这个组就创建它\n\ngroupadd docker\nusermod -a -g docker <普通用户>\t\t # 将普通用户加入到 docker 用户组中\nsystemctl restart docker    \t\t# 重启 docker，使得权限生效\n\n\n1\n2\n3\n\n\n-a 是追加，普通用户加入 docker 组后，不会退出原来所在的组。\n\n-g 是指定组名。\n\n然后这个用户就可以使用 docker 相关命令。\n\n> 容器内权限赋予\n\ndocker 容器里的权限规定：宿主机中，哪个用户启动 docker 容器，那么这个容器的用户权限就是启动它的宿主机用户权限。\n\n通俗理解，宿主机哪个用户启动 docker 容器，那么容器里的权限就是启动用户的权限。\n\n我们每次启动 docker 容器后，进入容器时会发现，显示的是 root 用户，其实这个 root 用户就是宿主机启动时使用的用户\n\n\n\n看图我们发现，我是 kbt 用户，但是进入容器后，发现变成 root 用户，其实这个 root 用户就是宿主机的 kbt 用户（我曾经用 kbt 用户启动这个容器）。\n\n那么问题来了，我以 kbt 用户启动一个容器，那么这个容器内的用户就是 kbt 用户，假设我希望容器的用户权限是宿主机的 root 权限，那么怎么赋予呢？\n\n启动用户时使用 --privileged=true 指令可以解决。\n\n# 切换 kbt 普通用户\nsu kbt\n# 启动容器的时候，赋予 root 权限\ndocker run -d --privileged=true tomcat:8.5.73\n\n\n1\n2\n3\n4\n\n\n此时虽然切换了 kbt 用户启动容器，但是使用了 --privileged=true 指令，则该容器内部的用户权限是宿主机的 root 用户权限，不再是 kbt 普通用户权限。\n\n大约在 0.6 版，privileged 被引入 docker，使用该参数，容器内的 root 拥有真正的 root 权限，否则，容器内的 root 只是外部的一个普通用户权限。\n\nprivileged 启动的容器，允许你在 docker 容器中启动 docker 容器，这就是真正的 root 权限带来的效果。\n\n\n# 常用命令总结\n\n\n\n命令        官方说明                                                           解释\nattach    attach local standard input, output, and error streams to a    当前 shell 下 attach 连接指定运行镜像\n          running container\nbuild     build an image from a dockerfile                               通过 dockerfile 定制镜像\ncommit    create a new image from a container\'s changes                  提交当前容器为新的镜像\ncp        copy files/folders between a container and the local           从容器中拷贝指定文件或者目录到宿主机中\n          filesystem\ncreate    create a new container                                         创建一个新的容器，同 run，但不启动容器\ndiff      inspect changes to files or directories on a container\'s       查看 docker 容器变化\n          filesystem\nevents    get real time events from the server                           从 docker 服务获取容 器实时事件\nexec      run a command in a running container                           在已存在的容器上运行命令\nexport    export a container\'s filesystem as a tar archive               导出容器的内 容流作为一个 tar 归档文件[对应 import ]\nhistory   show the history of an image                                   展示一个镜像形成历史\nimages    list images                                                    列出系统当前镜像\nimport    import the contents from a tarball to create a filesystem      从 tar包中的内容创建一个新的文件系统映像[对应export]\n          image\ninfo      display system-wide information                                显示系统相关信息\ninspect   return low-level information on docker objects                 查看容器详细信息\nkill      kill one or more running containers                            杀掉 指定 docker 容器\nload      load an image from a tar archive or stdin                      从一个 tar 包中加载一 个镜像[对应 save]\nlogin     log in to a docker registry                                    登陆一个 docker 源服务器\nlogout    log out from a docker registry                                 从当前 docker registry 退出\nlogs      fetch the logs of a container                                  输出当前容器日志信息\npause     pause all processes within one or more containers              暂停容器\nport      list port mappings or a specific mapping for the container     查看映射端口对应的容器内部源端口\nps        list containers                                                列出容器列表\npull      pull an image or a repository from a registry                  从docker镜像源服务器拉取指定镜像或者库镜像\npush      push an image or a repository to a registry                    推送指定镜像或者库镜像至docker源服务器\nrename    rename a container                                             给一个容器改名\nrestart   restart one or more containers                                 重启运行的容器\nrm        remove one or more containers                                  移除一个或者多个容器\nrmi       remove one or more images                                      移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]\nrun       run a command in a new container                               创建一个新的容器并运行 一个命令\nsave      save one or more images to a tar archive (streamed to stdout   保存一个镜像为一个 tar 包[对应 load]\n          by default)\nsearch    search the docker hub for images                               在 docker hub 中搜 索镜像\nstart     start one or more stopped containers                           启动容器\nstats     display a live stream of container(s) resource usage           显示容器资源使用统计信息的实时信息\n          statistics\nstop      stop one or more running containers                            停止容器\ntag       create a tag target_image that refers to source_image          给源中镜像打标签\ntop       display the running processes of a container                   查看容器中运行的进程信 息\nunpause   unpause all processes within one or more containers            取消暂停容器\nupdate    update configuration of one or more containers                 更新容器配置\nversion   show the docker version information                            查看 docker 版本号\nwait      block until one or more containers stop, then print their      截取容器停止时的退出状态值\n          exit codes\n\n\n# 总结图片\n\n如果觉得内容过于繁多或者复杂，这里提供图片形式的命令\n\n来源：https://www.bilibili.com/video/bv1zt4y1k75k\n\n\n# 镜像命令图片\n\n\n\n\n\n\n# 容器命令图片\n\n\n\n\n\n\n\n',charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"Docker - 网络网桥",frontmatter:{title:"Docker - 网络网桥",date:"2021-11-20T18:39:06.000Z",permalink:"/docker/network/",categories:["Docker"],tags:["容器部署"],readingShow:"top"},regularPath:"/40.%E5%B7%A5%E5%85%B7/40.%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2%20-%20Docker/13.Docker%20-%20%E7%BD%91%E7%BB%9C%E7%BD%91%E6%A1%A5.html",relativePath:"40.工具/40.容器部署 - Docker/13.Docker - 网络网桥.md",key:"v-0669d78c",path:"/docker/network/",headers:[{level:2,title:"网桥原理",slug:"网桥原理",normalizedTitle:"网桥原理",charIndex:3},{level:2,title:"理解网桥",slug:"理解网桥",normalizedTitle:"理解网桥",charIndex:11},{level:2,title:"操作网桥",slug:"操作网桥",normalizedTitle:"操作网桥",charIndex:19},{level:3,title:"为什么不使用默认的网桥",slug:"为什么不使用默认的网桥",normalizedTitle:"为什么不使用默认的网桥",charIndex:29},{level:3,title:"网桥命令列表",slug:"网桥命令列表",normalizedTitle:"网桥命令列表",charIndex:46},{level:3,title:"查看网桥列表",slug:"查看网桥列表",normalizedTitle:"查看网桥列表",charIndex:58},{level:3,title:"创建自定义网桥",slug:"创建自定义网桥",normalizedTitle:"创建自定义网桥",charIndex:70},{level:3,title:"查看网桥详细信息",slug:"查看网桥详细信息",normalizedTitle:"查看网桥详细信息",charIndex:83},{level:3,title:"删除网桥",slug:"删除网桥",normalizedTitle:"删除网桥",charIndex:97},{level:3,title:"容器使用网桥",slug:"容器使用网桥",normalizedTitle:"容器使用网桥",charIndex:107},{level:3,title:"Link连接容器",slug:"link连接容器",normalizedTitle:"link连接容器",charIndex:119},{level:3,title:"连接多个网桥",slug:"连接多个网桥",normalizedTitle:"连接多个网桥",charIndex:133},{level:3,title:"取消连接网桥",slug:"取消连接网桥",normalizedTitle:"取消连接网桥",charIndex:145}],headersStr:"网桥原理 理解网桥 操作网桥 为什么不使用默认的网桥 网桥命令列表 查看网桥列表 创建自定义网桥 查看网桥详细信息 删除网桥 容器使用网桥 Link连接容器 连接多个网桥 取消连接网桥",content:' * 网桥原理\n * 理解网桥\n * 操作网桥\n   * 为什么不使用默认的网桥\n   * 网桥命令列表\n   * 查看网桥列表\n   * 创建自定义网桥\n   * 查看网桥详细信息\n   * 删除网桥\n   * 容器使用网桥\n   * Link连接容器\n   * 连接多个网桥\n   * 取消连接网桥\n\n\n\n\n# 网桥原理\n\n当 Docker 启动时，会自动在主机上创建一个 docker0 虚拟网桥，实际上是 Linux 的一个 bridge，可以理解为一个软件交换机。它会在挂载到它的网口之间进行转发。\n\n同时，Docker 随机分配一个本地未占用的私有网段（在 RFC1918 中定义）中的一个地址给 bridge 接口。比如典型的 172.17.42.1，掩码为 255.255.0.0。此后启动的容器内的网口也会自动分配一个同一网段（172.17.0.0/16）的地址。\n\n当创建一个 Docker 容器的时候，同时会创建了一对 veth pair 接口（当数据包发送到一个接口时，另外一个接口也可以收到相同的数据包，它常常充当着一个桥梁。）。这对接口一端在容器内，即 eth0；另一端在本地并被挂载到 docker0 网桥，名称以 veth 开头（例如 vethAQI2QT）。通过这种方式，主机可以跟容器通信，容器之间也可以相互通信。Docker 就创建了在主机和所有容器之间一个虚拟共享网络。\n\n\n\n\n\n\n# 理解网桥\n\n首先我们可以查看操作系统的 IP，会发现 Docker 的 IP\n\n执行命令：ip address 或者 ip a\n\n\n\n每次启动一个容器，都会增加一个 IP。\n\nDocker 保证了容器的隔离性，但是容器之间也是可以通信的，当部署了很多项目，或者很多软件，如 MySQL，Redis，ElasticSearch。在实际生产环境上，我们不可能只是单独使用其中一个，我们需要数据的交互，如 MySQL 数据缓存到 Redis 里，那么它们就需要进行连接，容器之间是隔离的，而想要连接，就是需要通过网络。\n\n上文提到，按照 Docker 服务默认会创建一个 docker0 网桥，它在内核层连通了其他的物理或虚拟网卡，这就将所有容器和本地主机都放到同一个物理网络。\n\n形象化理解：两个地方需要传递消息，首先需要中转站，首先两个地方要有消息站，两个地方的消息站叫做 eth0，中转站叫做 veth。消息站之间通信的方式是信号，两个地方信号是 127.17.xx.xx，中转站信号是 127.17.0.1，所以通信就非常简单了，一个地方先通过信号发给中转站，中转站再转发给另一个地方，实现联系。\n\n\n\n可以通过 docker network ls 命令查看网桥：\n\n\n\n \n\n\n\n\n\n\n\n\n# 执行命令\ndocker network ls\n\n# 返回结果\nNETWORK ID     NAME      DRIVER    SCOPE\na4233d5cfcdb   bridge    bridge    local  \n5eeb9eeac070   host      host      local\n7cbed644a605   none      null      local\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n笔记\n\n网桥名 bridge 就是默认网桥 docker0。\n\n习惯了叫 docker0。\n\n2021-11-20 @村长\n\nDocker 安装时会自动在 host 上创建三个网络：none，host，和 bridge。我们看下 docker0 网桥：(brctl 可以通过 yum install bridge-utils 安装)\n\n\n\n \n\n\n\n\n\n\n\n\n# 执行命令\nbrctl show\n\n# 返沪结果\nbridge name\tbridge id\t\tSTP enabled\tinterfaces\ndocker0\t\t8000.02425dfadde1\tno\t\tveth02edcbb\n\t\t\t\t\t\t\t\t\t\tvethf548dd3\nvirbr0\t\t8000.5254007ac9df\tyes\t\tvirbr0-nic\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 操作网桥\n\n笔记\n\n网桥和镜像、容器一样，也有两个标识：id 和 名字。\n\n使用任意一个标识都可以操作网桥，本内容使用网桥的名字（name）\n\n2021-11-20 @村长\n\n\n# 为什么不使用默认的网桥\n\n首先要知道，启动一个容器，默认是使用网桥 docker0，但是实际生产环境，我们不可能把 N 多个项目或者环境都放在一个网桥上。网桥是通信的媒介，我们应该自己创建网桥，把关联的项目放在一个网桥上，不关联的项目放到另一个网桥上，防止毫不相干的项目因为争夺资源等因素影响其他项目的运行，因为不同的网桥是隔离的。\n\n疑惑\n\n一个容器只能连接一个网桥吗？或者说不同网桥上的容器之间可以连接吗？\n\n答案在 连接多个网桥\n\n2021-11-20 @村长\n\n\n\n\n# 网桥命令列表\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 执行命令\ndocker network --help\n\n# 返回结果\ndocker network\nUsage:  docker network COMMAND\nManage networks\nCommands:\n  connect     Connect a container to a network  # 网桥连接一个容器\n  create      Create a network   # 创建网桥\n  disconnect  Disconnect a container from a network  # 容器取消连接网桥\n  inspect     Display detailed information on one or more networks  # 查看网桥的具体配置信息\n  ls          List networks  # 查看网桥列表\n  prune       Remove all unused networks   # 删除所有未使用的网桥\n  rm          Remove one or more networks  # 删除指定的网桥\nRun \'docker network COMMAND --help\' for more information on a command. \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 查看网桥列表\n\n# 执行命令\ndocker network ls\n\n# 返回结果\ndocker network ls\nNETWORK ID     NAME      DRIVER    SCOPE\na4233d5cfcdb   bridge    bridge    local\n5eeb9eeac070   host      host      local\n7cbed644a605   none      null      local\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 创建自定义网桥\n\n创建自定义网桥命令格式：docker network create [options] <网桥名>\n\ndocker network create [options] <网桥名>\n\n# 指定 DRIVER，默认是 bridge\ndocker network create -d xxx <网桥名>\n\n# 指定 子网掩码\ndocker network create --subnet <子网掩码 IP> <网桥名>\n\n# 指定 网关\ndocker network create --gateway  <网关 IP> <网桥名>\n\n# 完整\ndocker network create -d xxx --subnet <子网掩码 IP> --gateway <网关 IP> xxx <网桥名>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n使用 -d，配置网络的类型（DRIVER），默认是 bridge\n\n> 例子：创建 kele 网桥\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n# 执行命令\ndocker network create kele\n\n# 返回结果\n922ea0d2e922b48bb5cd3adc2c63fc02079927a6971c491fc5a1a2e4a45e2073\n\n# 执行命令\ndocker network ls\n\n# 返回结果\nNETWORK ID     NAME      DRIVER    SCOPE\na4233d5cfcdb   bridge    bridge    local\n5eeb9eeac070   host      host      local\n922ea0d2e922   kele      bridge    local\n7cbed644a605   none      null      local\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n> 例子：创建 bing 网桥，指定该网桥的网关和子网掩码\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n# 执行命令\ndocker network create -d bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 bing\n\n# 返回结果\n7e9d2f900b52563588e10e8c3071219c629203356c5fe0f3fec25fec477c0757\n\n# 执行命令\ndocker network ls\n\n# 返回结果\nNETWORK ID     NAME      DRIVER    SCOPE\n7e9d2f900b52   bing      bridge    local\na4233d5cfcdb   bridge    bridge    local\n5eeb9eeac070   host      host      local\n922ea0d2e922   kele      bridge    local\n7cbed644a605   none      null      local\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 查看网桥详细信息\n\ndocker network inspect <网桥id | 网桥名>\n\n\n1\n\n\n> 例子：查看 bridge 的详细信息\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n \n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 执行命令\ndocker network inspect a4233d5cfcdb\n# 或者\ndocker network inspect bridge\n\n# 返回结果\n[\n    {\n        "Name": "bridge",\n        "Id": "a4233d5cfcdbf99321aa1893c1846278497008f60e10787bf2341f45a830beee",\n        "Created": "2021-11-20T11:30:23.135345272+08:00",\n        "Scope": "local",\n        "Driver": "bridge",\n        "EnableIPv6": false,\n        "IPAM": {\n            "Driver": "default",\n            "Options": null,\n            "Config": [\n                {\n                    "Subnet": "172.17.0.0/16",\n                    "Gateway": "172.17.0.1"\n                }\n            ]\n        },\n        "Internal": false,\n        "Attachable": false,\n        "Ingress": false,\n        "ConfigFrom": {\n            "Network": ""\n        },\n        "ConfigOnly": false,\n        "Containers": {\n            "1365f332be6b57943dfbfc1ececddac3a2b3c6ad12a17313a427041e27a2c044": {\n                "Name": "tomcat01",\n                "EndpointID": "8f96af6293e77ee301c83f8325f1f78c3cc027641a5e95ea93160bfba7315ad3",\n                "MacAddress": "02:42:ac:11:00:02",\n                "IPv4Address": "172.17.0.2/16",\n                "IPv6Address": ""\n            },\n            "e2bb571eb1687719f346bce4cec6bd5dff5240b8bf090b451ef05c2cb6bee167": {\n                "Name": "tomcat02",\n                "EndpointID": "6e397e04b57a5ecbbd04d506c0170391f5fbdca5270bb826b1d7daf48e1de92e",\n                "MacAddress": "02:42:ac:11:00:03",\n                "IPv4Address": "172.17.0.3/16",\n                "IPv6Address": ""\n            }\n        },\n        "Options": {\n            "com.docker.network.bridge.default_bridge": "true",\n            "com.docker.network.bridge.enable_icc": "true",\n            "com.docker.network.bridge.enable_ip_masquerade": "true",\n            "com.docker.network.bridge.host_binding_ipv4": "0.0.0.0",\n            "com.docker.network.bridge.name": "docker0",\n            "com.docker.network.driver.mtu": "1500"\n        },\n        "Labels": {}\n    }\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n\n\n20 - 21 行代码可以看出默认网桥的网关就是 172.17.0.1。\n\n34 和 41 行代码可以看出该网桥上的容器是 tomcat01 和 tomcat02。\n\n\n# 删除网桥\n\n删除某个网桥命令格式：docker network rm <网桥名称 | 网桥 id>\n\n删除全部未使用的网桥命令格式：docker network prune\n\n# 删除某个网桥\ndocker network rm <网桥名称 | 网桥 id>\n\n# 删除全部网桥\ndocker network prune\n\n\n1\n2\n3\n4\n5\n\n\n> 例子：删除 kele 网桥\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n \n\n\n# 执行命令\ndocker network ls\n\n# 返回结果\nNETWORK ID     NAME      DRIVER    SCOPE\na4233d5cfcdb   bridge    bridge    local\n5eeb9eeac070   host      host      local\n922ea0d2e922   kele      bridge    local\n7cbed644a605   none      null      local\n\n# 删除网桥\ndocker network rm 922ea0d2e922\n# 或者\ndocker network rm kele\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n> 例子 2：删除所有网桥\n\ndocker network prune\n\n\n1\n\n\n警告\n\n这个命令谨慎操作！\n\n2021-11-20 @村长\n\n\n# 容器使用网桥\n\n启动一个容器默认使用 bridge 网桥，我们在启动的时候指定某一个网桥。\n\n一旦在启动容器时指定了网桥之后，日后可以在任何这个网桥关联的容器中使用 容器名字 进行与其他容器通信。\n\n格式：docker run -d -p 宿主机端口:容器端口 --name <自定义名> --network <网桥名> <镜像>:<TAG | ID>\n\ndocker run -d -p 宿主机端口:容器端口 --name <自定义名> --network <网桥名> <镜像>:<TAG | ID>\n\n# 或者\ndocker run -d -p 宿主机端口:容器端口 --network <网桥名> --network-alias <网桥别名> <镜像>:<TAG | ID>\n\n\n1\n2\n3\n4\n\n\n如果不指定 --network，创建的容器默认都会挂到 docker0 上，使用本地主机上 docker0 接口的 IP 作为所有容器的默认网关。\n\nDocker 在创建一个容器的时候，会执行如下操作：\n\n * 创建一对虚拟接口/网卡，也就是 veth pair，分别放到本地主机和新容器中；\n * 本地主机一端桥接到默认的 docker0 或指定网桥上，并具有一个唯一的名字，如 vethxxxxx；\n * 容器一端放到新容器中，并修改名字作为 eth0，这个网卡/接口只在容器的名字空间可见；\n * 从网桥可用地址段中（也就是与该 bridge 对应的 network）获取一个空闲地址分配给容器的 eth0，并配置默认路由到桥接网卡 vethxxxx。\n\n> 例子：启动两个 Tomcat 容器，绑定 kele 网桥，并验证互相连接\n\n启动容器，绑定网桥\n\n\n\n\n\n\n\n\n\n\n \n\n\n \n\n\n\n\n\n\n\n\n\n\n# 执行命令\ndocker images tomcat\n\n# 返回结果\nREPOSITORY    TAG       IMAGE ID       CREATED        SIZE\ntomcat        8.5.73    7ec084df520c   47 hours ago   249MB\n\n# 启动一个容器，绑定 kele 网桥，名字叫做 tomcat02\ndocker run -d -p 8081:8080 --name tomcat02 --network kele tomcat:8.5.73\n\n# 启动一个容器，绑定 kele 网桥，名字叫做 tomcat03\ndocker run -d -p 8082:8080 --name tomcat03 --network kele tomcat:8.5.73\n\n# 执行命令\ndocker ps\n\n# 返回结果\nCONTAINER ID   IMAGE           COMMAND             CREATED         STATUS         PORTS                                       NAMES\nb8151edb05f3   tomcat:8.5.73   "catalina.sh run"   8 seconds ago   Up 7 seconds   0.0.0.0:8082->8080/tcp, :::8082->8080/tcp   tomcat03\n58224b3d8a32   tomcat:8.5.73   "catalina.sh run"   2 minutes ago   Up 2 minutes   0.0.0.0:8081->8080/tcp, :::8081->8080/tcp   tomcat02\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n进入其中一个容器，验证是否能连接另一个容器，这里进入 tomcat02 容器\n\n首先知道 tomcat03 的 IP 地址\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\ndocker inspect tomcat03\n\n# 返回结果（部分）\n"Networks": {\n    "kele": {\n        "IPAMConfig": null,\n        "Links": null,\n        "Aliases": [\n        \t"b8151edb05f3"\n    \t],\n        "NetworkID": "922ea0d2e922b48bb5cd3adc2c63fc02079927a6971c491fc5a1a2e4a45e2073",\n        "EndpointID": "71cbf2b0317d5776931d51979e77100d00b91433b76770651c5f1a8dd88d21e0",\n        "Gateway": "172.18.0.1",\n        "IPAddress": "172.18.0.3",\n        "IPPrefixLen": 16,\n        "IPv6Gateway": "",\n        "GlobalIPv6Address": "",\n        "GlobalIPv6PrefixLen": 0,\n        "MacAddress": "02:42:ac:12:00:03",\n        "DriverOpts": null\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n可以知道 tomcat03 的 IP 是 172.18.0.3\n\n\n\n \n\n\n\n\n\n\n\n\n# 进入 tomcat02\ndocker exec -it tomcat02 bash\n\n# curl 拉取资源\nroot@58224b3d8a32:/usr/local/tomcat# curl http://172.18.0.2:8080\n\n# 返回结果（部分）\n!doctype html><html lang="en"><head><title>HTTP Status 404 – Not Found</title><style type="text/css">body {font-family:Tahoma,Arial,sans-serif;} h1, h2, h3, b {color:white;background-color:#525D76;} h1 {font-size:22px;} h2 {font-size:16px;} h3 {font-size:14px;} p {font-size:12px;} a {color:black;} .line {height:1px;background-color:#525D76;border:none;}</style></head><body><h1>HTTP Status 404 – Not Found</h1><hr class="line" /><p><b>Type</b> Status Report</p><p><b>Description</b> The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.</p><hr class="line" /><h3>Apache Tomcat/8.5\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n只要返回结果不报错，代表容器之间可以通信，报错案例：\n\ncurl: (7) Failed to connect to 172.18.0.3 port 8082: Connection refused\n\n\n1\n\n\n此时应该意识到一个问题：通过 IP 访问 其他容器非常麻烦，如果其他容器 IP 被修改，那么将无法访问，那如何解决呢？\n\n别忘了容器的 name（姓名），Docker 在启动容器的时候，自动将 name（姓名）与 IP 进行绑定，所以访问其他容器 name（姓名）也能访问其他容器\n\n\n\n \n\n\n\n\n\n# curl 拉取资源\nroot@58224b3d8a32:/usr/local/tomcat# curl http://tomcat03:8080\n\n# 返回结果（部分）\n!doctype html><html lang="en"><head><title>HTTP Status 404 – Not Found</title><style type="text/css">body {font-family:Tahoma,Arial,sans-serif;} h1, h2, h3, b {color:white;background-color:#525D76;} h1 {font-size:22px;} h2 {font-size:16px;} h3 {font-size:14px;} p {font-size:12px;} a {color:black;} .line {height:1px;background-color:#525D76;border:none;}</style></head><body><h1>HTTP Status 404 – Not Found</h1><hr class="line" /><p><b>Type</b> Status Report</p><p><b>Description</b> The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.</p><hr class="line" /><h3>Apache Tomcat/8.5\n\n\n1\n2\n3\n4\n5\n\n\n如果不喜欢使用 name（姓名）进行访问，也可以在启动时给网桥单独去别名，只属于自己的网桥别名，通过该别名也能访问\n\n# 启动一个容器，给所在的网桥取个别名\ndocker run -d --name tomcat04 --network kele --network-alias kele_tomcat tomcat:8.5.7\n\n\n1\n2\n\n\n这样，也可以通过网桥的别名访问该容器：\n\n# curl 拉取资源\nroot@58224b3d8a32:/usr/local/tomcat# curl http://kele_tomcat:8080\n\n\n1\n2\n\n\n当然，建议网桥的别名和容器的 name（姓名）保持一致。\n\n那么，处于 kele 网桥的容器能访问其他网桥容器吗？\n\n启动新的 Tomcat 容器，让他处于默认网桥 docker0，名字叫做 tomcat01\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n# 如果不加 --network xx，会自动加上，并且 xx 是 bridge\ndocker run -d -p 8081:8080 --name tomcat01--network bridge tomcat:8.5.73\n\n# 执行命令\ndocker ps\n\n# 返回结果\nCONTAINER ID   IMAGE           COMMAND             CREATED        STATUS       PORTS                                       NAMES\nb8151edb05f3   tomcat:8.5.73   "catalina.sh run"   2 hours ago    Up 2 hours   0.0.0.0:8082->8080/tcp, :::8082->8080/tcp   tomcat03\n58224b3d8a32   tomcat:8.5.73   "catalina.sh run"   2 hours ago    Up 2 hours   0.0.0.0:8081->8080/tcp, :::8081->8080/tcp   tomcat02\n1365f332be6b   tomcat:8.5.73   "catalina.sh run"   22 hours ago   Up 9 hours   0.0.0.0:8080->8080/tcp, :::8080->8080/tcp   tomcat01\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n进入 tomcat01 容器，访问 tomcat02 或者 tomcat03 容器\n\n\n\n\n\n\n \n\n\n\n\n\n# 进入容器\ndocker exec -it tomcat01 bash\n\n# 访问 tomcat02\nroot@1365f332be6b:/usr/local/tomcat# curl http://tomcat02:8080\n\n# 返回结果，失败\ncurl: (6) Could not resolve host: tomcat02\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n明显是失败的，说明不同网桥的容器无法互相访问，这就解决了容器之间互相争夺资源（CPU、内存）的清空。\n\n所以项目比较多时，建议创建自定义网桥，不要全部堆积在默认网桥。\n\n\n# Link连接容器\n\n这是一个过时的命令，我们不推荐使用！ 我们建议使用 容器使用网桥，但是这里还是简单演示该操作。\n\n该命令是在启动容器时使用，格式：docker run -d -p 宿主机端口:容器端口 --name <自定义名> --link <其他容器名 | 容器 id> <镜像>:<TAG | ID>\n\n它连接的其他容器必须处于默认网桥 docker0 上。\n\ndocker run -d -p 宿主机端口:容器端口 --name <自定义名> --link <其他容器名 | 容器 id> <镜像>:<TAG | ID>\n\n\n1\n\n\n--link 其他容器，就是连接其他容器的网桥。\n\n> 例子 1：启动 tomcat04 容器时，连接 tomcat 03 容器\n\n使用 -P（大写）容器端口会随机映射宿主机端口，如果不打算外部访问，只是 Docker 内部使用，则可以使用该命令\n\n\n\n \n\n\n\n\n\n# 执行命令\ndocker run -d -P --name tomcat04 --link tomcat03 tomcat:8.5.73\n\n# 返回结果，报错了\ndocker: Error response from daemon: Cannot link to /tomcat03, as it does not belong to the default network.\n\n\n1\n2\n3\n4\n5\n\n\n从返回结果得出，--link 只能连接处于默认网桥 docker0 的容器\n\n> 例子 2：启动 tomcat04 容器时，连接 tomcat 01 容器\n\n首先删除 tomcat04，虽然例子 1报错了，但是还是成功创建了 tomcat04，并且 tomcat04 绑定的时默认网桥\n\ndocker rm tomcat04\n\n\n1\n\n\n然后开始连接 tomcat01 容器\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 执行命令\ndocker run -d -p 8084:8080 --name tomcat04 --link tomcat01 tomcat:8.5.73\n\n# 返回结果，报错了\ndocker: Error response from daemon: Cannot link to /tomcat03, as it does not belong to the default network.\n\n# 进入 tomcat04 容器\ndocker exec -it tomcat04 bash\n# 访问 tomcat01\nroot@c175286f1fa4:/usr/local/tomcat# curl http://tomcat01:8080\n\n# 返回结果（部分）\n<!DOCTYPE html>\n<html lang="en">\n    <head>\n        <meta charset="UTF-8" />\n        <title>Apache Tomcat/8.5.73</title>\n        <link href="favicon.ico" rel="icon" type="image/x-icon" />\n        <link href="tomcat.css" rel="stylesheet" type="text/css" />\n    </head>\n    ......\n    ......\n </htm>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n说明连接上了 tomcat01 容器的网桥。\n\n\n# 连接多个网桥\n\n回答\n\n容器启动时指定连接了一个网桥，那么还可以连接其他网桥吗？答案是可以的。\n\n2021-11-20 @村长\n\n连接多个网桥命令格式：docker network connect <容器名 | 容器 id> <网桥名 | 网桥 id>\n\ndocker network connect <容器名 | 容器 id> <网桥名 | 网桥 id>\n\n\n1\n\n\n> 例子：tomcat 04 连接 kele 桥段\n\ntomcat04 已经连接了 bridge 网桥，我们也可以让它连接上其他的网桥如 kele 网桥\n\n# 执行命令\ndocker network connect kele tomcat04\n\n\n1\n2\n\n\n如何查看是否连接上了呢？\n\ndocker inspect tomcat04\n\n\n1\n\n\n返回结果：\n\n\n\n可以知道 tomcat04 既连接上了 bridge 网桥，也连接上了 kele 网桥。\n\n结论：如果要跨网络操作别人，就需要使用 docker network connect <容器名 | 容器 id> <网桥名 | 网桥 id> 进行连接。\n\n\n# 取消连接网桥\n\n笔记\n\n当一个容器连接了多个网桥，比如上面的 tomcat04 连接了 bridge 和 kele 网桥，如何取消连接某个网桥呢？\n\n2021-11-20 @村长\n\n取消连接网桥命令格式：docker network disconnect <容器名 | 容器 id> <网桥名 | 网桥 id>\n\ndocker network disconnect <容器名 | 容器 id> <网桥名 | 网桥 id>\n\n\n1\n\n\n> 例子：tomcat04 取消连接 kele 网桥\n\ndocker network disconnect kele tomcat04\n\n\n1\n\n\n如何查看是否取消连接了呢？\n\ndocker inspect tomcat04\n\n\n1\n\n\n返回结果：只有 bridge 网桥\n\n',normalizedContent:' * 网桥原理\n * 理解网桥\n * 操作网桥\n   * 为什么不使用默认的网桥\n   * 网桥命令列表\n   * 查看网桥列表\n   * 创建自定义网桥\n   * 查看网桥详细信息\n   * 删除网桥\n   * 容器使用网桥\n   * link连接容器\n   * 连接多个网桥\n   * 取消连接网桥\n\n\n\n\n# 网桥原理\n\n当 docker 启动时，会自动在主机上创建一个 docker0 虚拟网桥，实际上是 linux 的一个 bridge，可以理解为一个软件交换机。它会在挂载到它的网口之间进行转发。\n\n同时，docker 随机分配一个本地未占用的私有网段（在 rfc1918 中定义）中的一个地址给 bridge 接口。比如典型的 172.17.42.1，掩码为 255.255.0.0。此后启动的容器内的网口也会自动分配一个同一网段（172.17.0.0/16）的地址。\n\n当创建一个 docker 容器的时候，同时会创建了一对 veth pair 接口（当数据包发送到一个接口时，另外一个接口也可以收到相同的数据包，它常常充当着一个桥梁。）。这对接口一端在容器内，即 eth0；另一端在本地并被挂载到 docker0 网桥，名称以 veth 开头（例如 vethaqi2qt）。通过这种方式，主机可以跟容器通信，容器之间也可以相互通信。docker 就创建了在主机和所有容器之间一个虚拟共享网络。\n\n\n\n\n\n\n# 理解网桥\n\n首先我们可以查看操作系统的 ip，会发现 docker 的 ip\n\n执行命令：ip address 或者 ip a\n\n\n\n每次启动一个容器，都会增加一个 ip。\n\ndocker 保证了容器的隔离性，但是容器之间也是可以通信的，当部署了很多项目，或者很多软件，如 mysql，redis，elasticsearch。在实际生产环境上，我们不可能只是单独使用其中一个，我们需要数据的交互，如 mysql 数据缓存到 redis 里，那么它们就需要进行连接，容器之间是隔离的，而想要连接，就是需要通过网络。\n\n上文提到，按照 docker 服务默认会创建一个 docker0 网桥，它在内核层连通了其他的物理或虚拟网卡，这就将所有容器和本地主机都放到同一个物理网络。\n\n形象化理解：两个地方需要传递消息，首先需要中转站，首先两个地方要有消息站，两个地方的消息站叫做 eth0，中转站叫做 veth。消息站之间通信的方式是信号，两个地方信号是 127.17.xx.xx，中转站信号是 127.17.0.1，所以通信就非常简单了，一个地方先通过信号发给中转站，中转站再转发给另一个地方，实现联系。\n\n\n\n可以通过 docker network ls 命令查看网桥：\n\n\n\n \n\n\n\n\n\n\n\n\n# 执行命令\ndocker network ls\n\n# 返回结果\nnetwork id     name      driver    scope\na4233d5cfcdb   bridge    bridge    local  \n5eeb9eeac070   host      host      local\n7cbed644a605   none      null      local\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n笔记\n\n网桥名 bridge 就是默认网桥 docker0。\n\n习惯了叫 docker0。\n\n2021-11-20 @村长\n\ndocker 安装时会自动在 host 上创建三个网络：none，host，和 bridge。我们看下 docker0 网桥：(brctl 可以通过 yum install bridge-utils 安装)\n\n\n\n \n\n\n\n\n\n\n\n\n# 执行命令\nbrctl show\n\n# 返沪结果\nbridge name\tbridge id\t\tstp enabled\tinterfaces\ndocker0\t\t8000.02425dfadde1\tno\t\tveth02edcbb\n\t\t\t\t\t\t\t\t\t\tvethf548dd3\nvirbr0\t\t8000.5254007ac9df\tyes\t\tvirbr0-nic\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 操作网桥\n\n笔记\n\n网桥和镜像、容器一样，也有两个标识：id 和 名字。\n\n使用任意一个标识都可以操作网桥，本内容使用网桥的名字（name）\n\n2021-11-20 @村长\n\n\n# 为什么不使用默认的网桥\n\n首先要知道，启动一个容器，默认是使用网桥 docker0，但是实际生产环境，我们不可能把 n 多个项目或者环境都放在一个网桥上。网桥是通信的媒介，我们应该自己创建网桥，把关联的项目放在一个网桥上，不关联的项目放到另一个网桥上，防止毫不相干的项目因为争夺资源等因素影响其他项目的运行，因为不同的网桥是隔离的。\n\n疑惑\n\n一个容器只能连接一个网桥吗？或者说不同网桥上的容器之间可以连接吗？\n\n答案在 连接多个网桥\n\n2021-11-20 @村长\n\n\n\n\n# 网桥命令列表\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 执行命令\ndocker network --help\n\n# 返回结果\ndocker network\nusage:  docker network command\nmanage networks\ncommands:\n  connect     connect a container to a network  # 网桥连接一个容器\n  create      create a network   # 创建网桥\n  disconnect  disconnect a container from a network  # 容器取消连接网桥\n  inspect     display detailed information on one or more networks  # 查看网桥的具体配置信息\n  ls          list networks  # 查看网桥列表\n  prune       remove all unused networks   # 删除所有未使用的网桥\n  rm          remove one or more networks  # 删除指定的网桥\nrun \'docker network command --help\' for more information on a command. \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 查看网桥列表\n\n# 执行命令\ndocker network ls\n\n# 返回结果\ndocker network ls\nnetwork id     name      driver    scope\na4233d5cfcdb   bridge    bridge    local\n5eeb9eeac070   host      host      local\n7cbed644a605   none      null      local\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 创建自定义网桥\n\n创建自定义网桥命令格式：docker network create [options] <网桥名>\n\ndocker network create [options] <网桥名>\n\n# 指定 driver，默认是 bridge\ndocker network create -d xxx <网桥名>\n\n# 指定 子网掩码\ndocker network create --subnet <子网掩码 ip> <网桥名>\n\n# 指定 网关\ndocker network create --gateway  <网关 ip> <网桥名>\n\n# 完整\ndocker network create -d xxx --subnet <子网掩码 ip> --gateway <网关 ip> xxx <网桥名>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n使用 -d，配置网络的类型（driver），默认是 bridge\n\n> 例子：创建 kele 网桥\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n# 执行命令\ndocker network create kele\n\n# 返回结果\n922ea0d2e922b48bb5cd3adc2c63fc02079927a6971c491fc5a1a2e4a45e2073\n\n# 执行命令\ndocker network ls\n\n# 返回结果\nnetwork id     name      driver    scope\na4233d5cfcdb   bridge    bridge    local\n5eeb9eeac070   host      host      local\n922ea0d2e922   kele      bridge    local\n7cbed644a605   none      null      local\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n> 例子：创建 bing 网桥，指定该网桥的网关和子网掩码\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n# 执行命令\ndocker network create -d bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 bing\n\n# 返回结果\n7e9d2f900b52563588e10e8c3071219c629203356c5fe0f3fec25fec477c0757\n\n# 执行命令\ndocker network ls\n\n# 返回结果\nnetwork id     name      driver    scope\n7e9d2f900b52   bing      bridge    local\na4233d5cfcdb   bridge    bridge    local\n5eeb9eeac070   host      host      local\n922ea0d2e922   kele      bridge    local\n7cbed644a605   none      null      local\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 查看网桥详细信息\n\ndocker network inspect <网桥id | 网桥名>\n\n\n1\n\n\n> 例子：查看 bridge 的详细信息\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n \n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 执行命令\ndocker network inspect a4233d5cfcdb\n# 或者\ndocker network inspect bridge\n\n# 返回结果\n[\n    {\n        "name": "bridge",\n        "id": "a4233d5cfcdbf99321aa1893c1846278497008f60e10787bf2341f45a830beee",\n        "created": "2021-11-20t11:30:23.135345272+08:00",\n        "scope": "local",\n        "driver": "bridge",\n        "enableipv6": false,\n        "ipam": {\n            "driver": "default",\n            "options": null,\n            "config": [\n                {\n                    "subnet": "172.17.0.0/16",\n                    "gateway": "172.17.0.1"\n                }\n            ]\n        },\n        "internal": false,\n        "attachable": false,\n        "ingress": false,\n        "configfrom": {\n            "network": ""\n        },\n        "configonly": false,\n        "containers": {\n            "1365f332be6b57943dfbfc1ececddac3a2b3c6ad12a17313a427041e27a2c044": {\n                "name": "tomcat01",\n                "endpointid": "8f96af6293e77ee301c83f8325f1f78c3cc027641a5e95ea93160bfba7315ad3",\n                "macaddress": "02:42:ac:11:00:02",\n                "ipv4address": "172.17.0.2/16",\n                "ipv6address": ""\n            },\n            "e2bb571eb1687719f346bce4cec6bd5dff5240b8bf090b451ef05c2cb6bee167": {\n                "name": "tomcat02",\n                "endpointid": "6e397e04b57a5ecbbd04d506c0170391f5fbdca5270bb826b1d7daf48e1de92e",\n                "macaddress": "02:42:ac:11:00:03",\n                "ipv4address": "172.17.0.3/16",\n                "ipv6address": ""\n            }\n        },\n        "options": {\n            "com.docker.network.bridge.default_bridge": "true",\n            "com.docker.network.bridge.enable_icc": "true",\n            "com.docker.network.bridge.enable_ip_masquerade": "true",\n            "com.docker.network.bridge.host_binding_ipv4": "0.0.0.0",\n            "com.docker.network.bridge.name": "docker0",\n            "com.docker.network.driver.mtu": "1500"\n        },\n        "labels": {}\n    }\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n\n\n20 - 21 行代码可以看出默认网桥的网关就是 172.17.0.1。\n\n34 和 41 行代码可以看出该网桥上的容器是 tomcat01 和 tomcat02。\n\n\n# 删除网桥\n\n删除某个网桥命令格式：docker network rm <网桥名称 | 网桥 id>\n\n删除全部未使用的网桥命令格式：docker network prune\n\n# 删除某个网桥\ndocker network rm <网桥名称 | 网桥 id>\n\n# 删除全部网桥\ndocker network prune\n\n\n1\n2\n3\n4\n5\n\n\n> 例子：删除 kele 网桥\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n \n\n\n# 执行命令\ndocker network ls\n\n# 返回结果\nnetwork id     name      driver    scope\na4233d5cfcdb   bridge    bridge    local\n5eeb9eeac070   host      host      local\n922ea0d2e922   kele      bridge    local\n7cbed644a605   none      null      local\n\n# 删除网桥\ndocker network rm 922ea0d2e922\n# 或者\ndocker network rm kele\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n> 例子 2：删除所有网桥\n\ndocker network prune\n\n\n1\n\n\n警告\n\n这个命令谨慎操作！\n\n2021-11-20 @村长\n\n\n# 容器使用网桥\n\n启动一个容器默认使用 bridge 网桥，我们在启动的时候指定某一个网桥。\n\n一旦在启动容器时指定了网桥之后，日后可以在任何这个网桥关联的容器中使用 容器名字 进行与其他容器通信。\n\n格式：docker run -d -p 宿主机端口:容器端口 --name <自定义名> --network <网桥名> <镜像>:<tag | id>\n\ndocker run -d -p 宿主机端口:容器端口 --name <自定义名> --network <网桥名> <镜像>:<tag | id>\n\n# 或者\ndocker run -d -p 宿主机端口:容器端口 --network <网桥名> --network-alias <网桥别名> <镜像>:<tag | id>\n\n\n1\n2\n3\n4\n\n\n如果不指定 --network，创建的容器默认都会挂到 docker0 上，使用本地主机上 docker0 接口的 ip 作为所有容器的默认网关。\n\ndocker 在创建一个容器的时候，会执行如下操作：\n\n * 创建一对虚拟接口/网卡，也就是 veth pair，分别放到本地主机和新容器中；\n * 本地主机一端桥接到默认的 docker0 或指定网桥上，并具有一个唯一的名字，如 vethxxxxx；\n * 容器一端放到新容器中，并修改名字作为 eth0，这个网卡/接口只在容器的名字空间可见；\n * 从网桥可用地址段中（也就是与该 bridge 对应的 network）获取一个空闲地址分配给容器的 eth0，并配置默认路由到桥接网卡 vethxxxx。\n\n> 例子：启动两个 tomcat 容器，绑定 kele 网桥，并验证互相连接\n\n启动容器，绑定网桥\n\n\n\n\n\n\n\n\n\n\n \n\n\n \n\n\n\n\n\n\n\n\n\n\n# 执行命令\ndocker images tomcat\n\n# 返回结果\nrepository    tag       image id       created        size\ntomcat        8.5.73    7ec084df520c   47 hours ago   249mb\n\n# 启动一个容器，绑定 kele 网桥，名字叫做 tomcat02\ndocker run -d -p 8081:8080 --name tomcat02 --network kele tomcat:8.5.73\n\n# 启动一个容器，绑定 kele 网桥，名字叫做 tomcat03\ndocker run -d -p 8082:8080 --name tomcat03 --network kele tomcat:8.5.73\n\n# 执行命令\ndocker ps\n\n# 返回结果\ncontainer id   image           command             created         status         ports                                       names\nb8151edb05f3   tomcat:8.5.73   "catalina.sh run"   8 seconds ago   up 7 seconds   0.0.0.0:8082->8080/tcp, :::8082->8080/tcp   tomcat03\n58224b3d8a32   tomcat:8.5.73   "catalina.sh run"   2 minutes ago   up 2 minutes   0.0.0.0:8081->8080/tcp, :::8081->8080/tcp   tomcat02\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n进入其中一个容器，验证是否能连接另一个容器，这里进入 tomcat02 容器\n\n首先知道 tomcat03 的 ip 地址\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\ndocker inspect tomcat03\n\n# 返回结果（部分）\n"networks": {\n    "kele": {\n        "ipamconfig": null,\n        "links": null,\n        "aliases": [\n        \t"b8151edb05f3"\n    \t],\n        "networkid": "922ea0d2e922b48bb5cd3adc2c63fc02079927a6971c491fc5a1a2e4a45e2073",\n        "endpointid": "71cbf2b0317d5776931d51979e77100d00b91433b76770651c5f1a8dd88d21e0",\n        "gateway": "172.18.0.1",\n        "ipaddress": "172.18.0.3",\n        "ipprefixlen": 16,\n        "ipv6gateway": "",\n        "globalipv6address": "",\n        "globalipv6prefixlen": 0,\n        "macaddress": "02:42:ac:12:00:03",\n        "driveropts": null\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n可以知道 tomcat03 的 ip 是 172.18.0.3\n\n\n\n \n\n\n\n\n\n\n\n\n# 进入 tomcat02\ndocker exec -it tomcat02 bash\n\n# curl 拉取资源\nroot@58224b3d8a32:/usr/local/tomcat# curl http://172.18.0.2:8080\n\n# 返回结果（部分）\n!doctype html><html lang="en"><head><title>http status 404 – not found</title><style type="text/css">body {font-family:tahoma,arial,sans-serif;} h1, h2, h3, b {color:white;background-color:#525d76;} h1 {font-size:22px;} h2 {font-size:16px;} h3 {font-size:14px;} p {font-size:12px;} a {color:black;} .line {height:1px;background-color:#525d76;border:none;}</style></head><body><h1>http status 404 – not found</h1><hr class="line" /><p><b>type</b> status report</p><p><b>description</b> the origin server did not find a current representation for the target resource or is not willing to disclose that one exists.</p><hr class="line" /><h3>apache tomcat/8.5\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n只要返回结果不报错，代表容器之间可以通信，报错案例：\n\ncurl: (7) failed to connect to 172.18.0.3 port 8082: connection refused\n\n\n1\n\n\n此时应该意识到一个问题：通过 ip 访问 其他容器非常麻烦，如果其他容器 ip 被修改，那么将无法访问，那如何解决呢？\n\n别忘了容器的 name（姓名），docker 在启动容器的时候，自动将 name（姓名）与 ip 进行绑定，所以访问其他容器 name（姓名）也能访问其他容器\n\n\n\n \n\n\n\n\n\n# curl 拉取资源\nroot@58224b3d8a32:/usr/local/tomcat# curl http://tomcat03:8080\n\n# 返回结果（部分）\n!doctype html><html lang="en"><head><title>http status 404 – not found</title><style type="text/css">body {font-family:tahoma,arial,sans-serif;} h1, h2, h3, b {color:white;background-color:#525d76;} h1 {font-size:22px;} h2 {font-size:16px;} h3 {font-size:14px;} p {font-size:12px;} a {color:black;} .line {height:1px;background-color:#525d76;border:none;}</style></head><body><h1>http status 404 – not found</h1><hr class="line" /><p><b>type</b> status report</p><p><b>description</b> the origin server did not find a current representation for the target resource or is not willing to disclose that one exists.</p><hr class="line" /><h3>apache tomcat/8.5\n\n\n1\n2\n3\n4\n5\n\n\n如果不喜欢使用 name（姓名）进行访问，也可以在启动时给网桥单独去别名，只属于自己的网桥别名，通过该别名也能访问\n\n# 启动一个容器，给所在的网桥取个别名\ndocker run -d --name tomcat04 --network kele --network-alias kele_tomcat tomcat:8.5.7\n\n\n1\n2\n\n\n这样，也可以通过网桥的别名访问该容器：\n\n# curl 拉取资源\nroot@58224b3d8a32:/usr/local/tomcat# curl http://kele_tomcat:8080\n\n\n1\n2\n\n\n当然，建议网桥的别名和容器的 name（姓名）保持一致。\n\n那么，处于 kele 网桥的容器能访问其他网桥容器吗？\n\n启动新的 tomcat 容器，让他处于默认网桥 docker0，名字叫做 tomcat01\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n# 如果不加 --network xx，会自动加上，并且 xx 是 bridge\ndocker run -d -p 8081:8080 --name tomcat01--network bridge tomcat:8.5.73\n\n# 执行命令\ndocker ps\n\n# 返回结果\ncontainer id   image           command             created        status       ports                                       names\nb8151edb05f3   tomcat:8.5.73   "catalina.sh run"   2 hours ago    up 2 hours   0.0.0.0:8082->8080/tcp, :::8082->8080/tcp   tomcat03\n58224b3d8a32   tomcat:8.5.73   "catalina.sh run"   2 hours ago    up 2 hours   0.0.0.0:8081->8080/tcp, :::8081->8080/tcp   tomcat02\n1365f332be6b   tomcat:8.5.73   "catalina.sh run"   22 hours ago   up 9 hours   0.0.0.0:8080->8080/tcp, :::8080->8080/tcp   tomcat01\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n进入 tomcat01 容器，访问 tomcat02 或者 tomcat03 容器\n\n\n\n\n\n\n \n\n\n\n\n\n# 进入容器\ndocker exec -it tomcat01 bash\n\n# 访问 tomcat02\nroot@1365f332be6b:/usr/local/tomcat# curl http://tomcat02:8080\n\n# 返回结果，失败\ncurl: (6) could not resolve host: tomcat02\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n明显是失败的，说明不同网桥的容器无法互相访问，这就解决了容器之间互相争夺资源（cpu、内存）的清空。\n\n所以项目比较多时，建议创建自定义网桥，不要全部堆积在默认网桥。\n\n\n# link连接容器\n\n这是一个过时的命令，我们不推荐使用！ 我们建议使用 容器使用网桥，但是这里还是简单演示该操作。\n\n该命令是在启动容器时使用，格式：docker run -d -p 宿主机端口:容器端口 --name <自定义名> --link <其他容器名 | 容器 id> <镜像>:<tag | id>\n\n它连接的其他容器必须处于默认网桥 docker0 上。\n\ndocker run -d -p 宿主机端口:容器端口 --name <自定义名> --link <其他容器名 | 容器 id> <镜像>:<tag | id>\n\n\n1\n\n\n--link 其他容器，就是连接其他容器的网桥。\n\n> 例子 1：启动 tomcat04 容器时，连接 tomcat 03 容器\n\n使用 -p（大写）容器端口会随机映射宿主机端口，如果不打算外部访问，只是 docker 内部使用，则可以使用该命令\n\n\n\n \n\n\n\n\n\n# 执行命令\ndocker run -d -p --name tomcat04 --link tomcat03 tomcat:8.5.73\n\n# 返回结果，报错了\ndocker: error response from daemon: cannot link to /tomcat03, as it does not belong to the default network.\n\n\n1\n2\n3\n4\n5\n\n\n从返回结果得出，--link 只能连接处于默认网桥 docker0 的容器\n\n> 例子 2：启动 tomcat04 容器时，连接 tomcat 01 容器\n\n首先删除 tomcat04，虽然例子 1报错了，但是还是成功创建了 tomcat04，并且 tomcat04 绑定的时默认网桥\n\ndocker rm tomcat04\n\n\n1\n\n\n然后开始连接 tomcat01 容器\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 执行命令\ndocker run -d -p 8084:8080 --name tomcat04 --link tomcat01 tomcat:8.5.73\n\n# 返回结果，报错了\ndocker: error response from daemon: cannot link to /tomcat03, as it does not belong to the default network.\n\n# 进入 tomcat04 容器\ndocker exec -it tomcat04 bash\n# 访问 tomcat01\nroot@c175286f1fa4:/usr/local/tomcat# curl http://tomcat01:8080\n\n# 返回结果（部分）\n<!doctype html>\n<html lang="en">\n    <head>\n        <meta charset="utf-8" />\n        <title>apache tomcat/8.5.73</title>\n        <link href="favicon.ico" rel="icon" type="image/x-icon" />\n        <link href="tomcat.css" rel="stylesheet" type="text/css" />\n    </head>\n    ......\n    ......\n </htm>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n说明连接上了 tomcat01 容器的网桥。\n\n\n# 连接多个网桥\n\n回答\n\n容器启动时指定连接了一个网桥，那么还可以连接其他网桥吗？答案是可以的。\n\n2021-11-20 @村长\n\n连接多个网桥命令格式：docker network connect <容器名 | 容器 id> <网桥名 | 网桥 id>\n\ndocker network connect <容器名 | 容器 id> <网桥名 | 网桥 id>\n\n\n1\n\n\n> 例子：tomcat 04 连接 kele 桥段\n\ntomcat04 已经连接了 bridge 网桥，我们也可以让它连接上其他的网桥如 kele 网桥\n\n# 执行命令\ndocker network connect kele tomcat04\n\n\n1\n2\n\n\n如何查看是否连接上了呢？\n\ndocker inspect tomcat04\n\n\n1\n\n\n返回结果：\n\n\n\n可以知道 tomcat04 既连接上了 bridge 网桥，也连接上了 kele 网桥。\n\n结论：如果要跨网络操作别人，就需要使用 docker network connect <容器名 | 容器 id> <网桥名 | 网桥 id> 进行连接。\n\n\n# 取消连接网桥\n\n笔记\n\n当一个容器连接了多个网桥，比如上面的 tomcat04 连接了 bridge 和 kele 网桥，如何取消连接某个网桥呢？\n\n2021-11-20 @村长\n\n取消连接网桥命令格式：docker network disconnect <容器名 | 容器 id> <网桥名 | 网桥 id>\n\ndocker network disconnect <容器名 | 容器 id> <网桥名 | 网桥 id>\n\n\n1\n\n\n> 例子：tomcat04 取消连接 kele 网桥\n\ndocker network disconnect kele tomcat04\n\n\n1\n\n\n如何查看是否取消连接了呢？\n\ndocker inspect tomcat04\n\n\n1\n\n\n返回结果：只有 bridge 网桥\n\n',charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"Docker - 数据卷",frontmatter:{title:"Docker - 数据卷",date:"2021-11-20T22:48:50.000Z",permalink:"/docker/volume/",categories:["Docker"],tags:["容器部署"],readingShow:"top"},regularPath:"/40.%E5%B7%A5%E5%85%B7/40.%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2%20-%20Docker/15.Docker%20-%20%E6%95%B0%E6%8D%AE%E5%8D%B7.html",relativePath:"40.工具/40.容器部署 - Docker/15.Docker - 数据卷.md",key:"v-0dfacdc5",path:"/docker/volume/",headers:[{level:2,title:"什么是数据卷",slug:"什么是数据卷",normalizedTitle:"什么是数据卷",charIndex:3},{level:2,title:"为什么使用数据卷",slug:"为什么使用数据卷",normalizedTitle:"为什么使用数据卷",charIndex:13},{level:2,title:"数据卷挂载操作",slug:"数据卷挂载操作",normalizedTitle:"数据卷挂载操作",charIndex:25},{level:3,title:"具体目录挂载",slug:"具体目录挂载",normalizedTitle:"具体目录挂载",charIndex:38},{level:3,title:"默认目录挂载",slug:"默认目录挂载",normalizedTitle:"默认目录挂载",charIndex:50},{level:3,title:"匿名目录挂载",slug:"匿名目录挂载",normalizedTitle:"匿名目录挂载",charIndex:62},{level:3,title:"哪个挂载方法好？",slug:"哪个挂载方法好",normalizedTitle:"哪个挂载方法好？",charIndex:74},{level:3,title:"读写权限",slug:"读写权限",normalizedTitle:"读写权限",charIndex:88},{level:2,title:"数据卷操作命令",slug:"数据卷操作命令",normalizedTitle:"数据卷操作命令",charIndex:96},{level:3,title:"数据卷命令",slug:"数据卷命令",normalizedTitle:"数据卷命令",charIndex:109},{level:3,title:"数据卷查看",slug:"数据卷查看",normalizedTitle:"数据卷查看",charIndex:120},{level:3,title:"数据卷信息",slug:"数据卷信息",normalizedTitle:"数据卷信息",charIndex:131},{level:3,title:"数据卷创建",slug:"数据卷创建",normalizedTitle:"数据卷创建",charIndex:142},{level:3,title:"数据卷删除",slug:"数据卷删除",normalizedTitle:"数据卷删除",charIndex:153},{level:2,title:"数据卷容器",slug:"数据卷容器",normalizedTitle:"数据卷容器",charIndex:162},{level:3,title:"数据共享",slug:"数据共享",normalizedTitle:"数据共享",charIndex:173},{level:3,title:"数据备份",slug:"数据备份",normalizedTitle:"数据备份",charIndex:183},{level:3,title:"数据恢复",slug:"数据恢复",normalizedTitle:"数据恢复",charIndex:193},{level:2,title:"挂载特性",slug:"挂载特性",normalizedTitle:"挂载特性",charIndex:201}],headersStr:"什么是数据卷 为什么使用数据卷 数据卷挂载操作 具体目录挂载 默认目录挂载 匿名目录挂载 哪个挂载方法好？ 读写权限 数据卷操作命令 数据卷命令 数据卷查看 数据卷信息 数据卷创建 数据卷删除 数据卷容器 数据共享 数据备份 数据恢复 挂载特性",content:' * 什么是数据卷\n * 为什么使用数据卷\n * 数据卷挂载操作\n   * 具体目录挂载\n   * 默认目录挂载\n   * 匿名目录挂载\n   * 哪个挂载方法好？\n   * 读写权限\n * 数据卷操作命令\n   * 数据卷命令\n   * 数据卷查看\n   * 数据卷信息\n   * 数据卷创建\n   * 数据卷删除\n * 数据卷容器\n   * 数据共享\n   * 数据备份\n   * 数据恢复\n * 挂载特性\n\n\n\n\n# 什么是数据卷\n\n数据卷 是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性:\n * 数据卷 可以在容器之间共享和享用\n * 对 数据卷 的修改立马生效\n * 对 数据卷 的更新，不会影响镜像\n * 数据卷 默认会一直存在，即时容器被删除\n\n注意\n\n数据卷 的使用，类似于 Linux 下对目录或者文件进行 mount，镜像中的被指定为挂载点的目录中的文件会复制到数据卷（仅数据卷为空时复制）\n\n2021-11-20 @村长\n\n\n# 为什么使用数据卷\n\n * 当创建一个容器的时候，容器运行，数据能不能持久化\n * 如果能够持久化，数据存储在哪？由于 docker 是隔离的，数据能不能存储在容器外\n * 如果部署很多容器，每次都需要进入容器中进行配置嘛？能不能外部进行配置\n\ndocker 数据卷呈现给 docker 容器的一个形式就是目录，该目录支持多个容器间共享，修改不会影响到镜像。使用 Docker 的数据卷，类似在系统中使用 mount 挂载一个文件系统。\n\n\n# 数据卷挂载操作\n\n三种挂载数据卷格式\n\n * 具体目录挂载：docker run [options] -v <宿主机绝对路径:容器内的路径[:ro | rw]> <镜像名>\n * 默认目录挂载：docker run [options] -v <任意别名:容器内的路径[:ro | rw]> <镜像名>\n * 匿名目录挂载：docker run [options] -v <容器内的路径[:ro | rw]> <镜像名>\n\n默认目录挂载和匿名目录挂载的目录默认在 /var/lib/docker/volumes/ 目录下。\n\n宿主机挂载目录里，都会生成 _data 目录，该目录存放容器挂载目录下的数据。\n\n\n# 具体目录挂载\n\n自定义数据卷目录。\n\n在用 docker run 命令的时候，使用 -v 标记来创建一个数据卷并挂载到容器里。\n\n格式：docker run [options] -v <宿主机绝对路径 | 任意别名:容器内的路径[:ro | rw]> <镜像名>\n\ndocker run [options] -v <宿主机绝对路径 | 任意别名:容器内的路径[:ro | rw]> <镜像名>\n\n\n1\n\n\n宿主机路径必须是绝对路径，如果目录不存在 Docker 会自动为你创建它。\n\nro：代表 read-only，容器的路径只允许读，不允许写。不影响宿主机的路径可读可写\n\nrw：默认值，代表可读可写\n\n> 例子 1：具名挂载\n\ndocker run -d -p 8081:8080 --name tomcat02 -v /opt/aa:/usr/local/tomcat/webapps tomcat:8.5.73\n\n\n1\n\n\n特点：宿主机的的挂载目录内容覆盖到容器的挂载目录内容\n\n因为 /opt/aa 目录为空，所以容器的 webapps 目录被 aa 目录覆盖，也为空。\n\n验证是否成功挂载\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n# 执行命令\ndocker ps\n\n# 返回结果\nCONTAINER ID   IMAGE           COMMAND             CREATED          STATUS          PORTS                    NAMES\nebbfba2b098c   tomcat:8.5.73   "catalina.sh run"   18 seconds ago   Up 17 seconds   0.0.0.0:8081->8080/tcp   tomcat02\n1365f332be6b   tomcat:8.5.73   "catalina.sh run"   25 hours ago     Up 12 hours     0.0.0.0:8080->8080/tcp   tomcat01\n\n# 查看挂载信息\ndocker inspect ebbfba2b098c\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n\n> 例子 2：测试容器和宿主机之间数据共享\n\n在 tomcat02 容器里创建 test.txt 文件\n\n# 进入 tomcat02 容器\ndocker exec -it tomcat02 bash\n\n# 进入容器挂载目录\nroot@ebbfba2b098c:/usr/local/tomcat# cd webapps\n\n#创建 test.txt 文件\nroot@ebbfba2b098c:/usr/local/tomcat# touch test.txt\n\n# 查看是否创建成功\nroot@ebbfba2b098c:/usr/local/tomcat/webapps# ls\n\n# 返回结果\ntest.txt\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n在宿主机查看文件\n\n # 进入 宿主机挂载目录\n cd /opt/aa\n \n # 查看文件\n ls\n \n # 返回结果\n test.txt\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n说明挂载成功，双方挂载的目录实现共享。\n\n> 例子 3：容器停止运行，宿主机添加 test2.txt，再启动容器，文件是否同步到容器里？\n\n宿主机添加 test2.txt\n\n# 进入 宿主机挂载目录\ncd /opt/aa\n\n# 创建 test2.txt 文件 \ntouch test2.txt\n\n# 查看文件\nls\n\n# 返回结果\ntest2.txt  test.txt\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n启动 tomcat02 容器，查看挂载目录是否有 test2.txt\n\n# 启动 tomcat02 容器\ndocker start tomcat02\n\n# 进入 tomcat02 容器\ndocker exec -it tomcat02 bash\n\n# 进入容器挂载目录\nroot@ebbfba2b098c:/usr/local/tomcat# cd webapps\n\n# 查看文件\nroot@ebbfba2b098c:/usr/local/tomcat/webapps# ls\n\n# 返回结果\ntest2.txt  test.txt\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n说明数据依旧同步\n\n> 例子 4：删除容器\n\n我们删除容器，看主机上数据是否会被删除\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n# 执行命令\ndocker ps\n\n# 返回结果\nCONTAINER ID   IMAGE           COMMAND             CREATED          STATUS          PORTS                    NAMES\ne2bb571eb168   tomcat:8.5.73   "catalina.sh run"   32 minutes ago   Up 31 minutes   0.0.0.0:8081->8080/tcp   tomcat02\n1365f332be6b   tomcat:8.5.73   "catalina.sh run"   18 hours ago     Up 5 hours      0.0.0.0:8080->8080/tcp   tomcat01\n\n# 删除容器\ndocker rm -f e2bb571eb168\n\n# 进入 aa 目录\ncd /opt/aa\nls\n\n# 返回结果\ndocs  examples  host-manager  manager  ROOT\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n说明没有删除。\n\n\n# 默认目录挂载\n\n自动数据卷目录路径。\n\n启动容器进行挂载的时候，宿主机的路径必须是绝对路径\n\n格式：docker run [options] -v <任意别名:容器内的路径[:ro | rw]> <镜像名>\n\ndocker run [options] -v <任意别名:容器内的路径[:ro | rw]> <镜像名>\n\n\n1\n\n\n任意别名是一个数据卷名字，名字可以随便写，Docker 会在 /var/lib/docker/volumes 目录下生成该数据卷，这是 docker 默认的数据卷目录。并且在数据卷里生成 _data 目录用于与容器目录同步数据。\n\nro：代表 read-only，容器的路径只允许读，不允许写。不影响宿主机的路径可读可写\n\nrw：默认值，代表可读可写\n\n> 例子 1：\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 执行命令\ndocker run -d -P --name tomcat02 -v aa:/usr/local/tomcat/webapps tomcat:8.5.73\n\nfind / -name aa\n\n# 返回结果\n/var/lib/docker/volumes/aa\n\n# 进入宿主机挂载\ncd /var/lib/docker/volumes/aa_data\n\n# 查看文件\nls\n\n# 返回结果\ndocs  examples  host-manager  manager  ROOT\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\naa 代表一个数据卷名字，可以是任意，这相当于相对路径，它会在 /var/lib/docker/volumes 下创建 aa 目录作为数据卷。\n\n特点：容器的挂载目录内容覆盖到宿主机的挂载目录内容\n\n其他例子和 具体目录挂载 一样。\n\n\n# 匿名目录挂载\n\n没指定名字的挂载都是匿名挂载，-v 只写了容器内路径，并没写宿主机路径。\n\n匿名目录挂载的目录是：/var/lib/docker/volumes/，它会在这个目录生成匿名数据卷目录。\n\n格式：docker run [options] -v <容器内的路径[:ro | rw]> <镜像名>\n\ndocker run [options] -v <容器内的路径[:ro | rw]> <镜像名>\n\n\n1\n\n\nro：代表 read-only，容器的路径只允许读，不允许写。不影响宿主机的路径可读可写\n\nrw：默认值，代表可读可写\n\n> 例子 1：匿名创建 tomcat3 容器，找到匿名的目录位置\n\ndocker run -d -P --name tomcat03 -v /usr/local/tomcat/webapps tomcat:8.5.73\n\n\n1\n\n\n创建容器时，没有指定宿主机的目录，那么它在哪呢？\n\n# 执行命令\ncd /var/lib/docker/volumes/\n\n# 查看内容\nls\n\n# 返回结果\n620fbea6f90b48fbead679838d70c44311f7e846bf08921a2d35c3d335ac4775  backingFsBlockDev  metadata.db\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n我们可以得知：没有指定宿主机目录，docker 会自动在 /var/lib/docker/volumes 生成很长的字符串，这是什么呢？\n\n这里透露 docker 数据卷操作命令：docker volume ls，查看数据卷\n\n# 执行命令\ndocker volume ls\n# 返回结果\nDRIVER    VOLUME NAME\nlocal     620fbea6f90b48fbead679838d70c44311f7e846bf08921a2d35c3d335ac4775\n\n\n1\n2\n3\n4\n5\n\n\n可以看出匿名目录挂载生成的目录名就是 随机生成的数据卷名字。\n\n\n# 哪个挂载方法好？\n\n首先排除掉 匿名目录挂载，它的缺点是不好维护，数据卷名随机生成且太长，不清楚目录挂载的是哪个容器。\n\n默认目录挂载 指定了一个默认目录，无论挂载目录有多少，都集中在默认目录下管理。但是缺点是 不能指定文件挂载，只能指定目录进行挂载。它和具体目录挂载的另一个区别是：第一次启动容器挂载时，容器的挂载目录内容会覆盖宿主机的挂载目录内容。\n\n具体目录挂载 可以指定宿主机的任意位置，但是一旦挂载目录多了起来，可能目录过于分散导致无法集中管理，但是它更加灵活，而且 能指定文件挂载。值得注意的是：第一次启动容器挂载时，必须确保容器的挂载目录数据备份好，因为该挂载方式会将 宿主机的挂载目录内容覆盖掉容器的挂载目录内容。所以，有数据则备份，再挂载。\n\n总之：匿名目录挂载 不推荐，根据需求选择 默认目录挂载 和 具体目录挂载，前者不能挂载文件，挂载在默认目录；后者能挂载文件，且挂载在宿主机任意位置，但是会覆盖容器的挂载目录。我喜欢 具体目录挂载。\n\n\n# 读写权限\n\n三个挂载方式我都提到了读写的权限，这个读写权限仅针对 容器的挂载目录，如果不指定权限，默认就是可读可写。\n\n什么时候用到呢？ 当我们希望只操作宿主机的挂载目录，然后同步给容器的挂载目录，但是不希望容器的挂载目录也能操作，影响宿主机的挂载目录。\n\n拿默认目录挂载的命令格式来说：docker run [options] -v <任意别名:容器内的路径[:ro | rw]> <镜像名>\n\ndocker run [options] -v <任意别名:容器内的路径[:ro | rw]> <镜像名>\n\n\n1\n\n\nro：代表 read-only，容器的路径只允许读，不允许写。不影响宿主机的路径可读可写\n\nrw：默认值，代表可读可写\n\n> 例子 1：启动 tomcat04 容器，挂载到 kele 数据卷里，并赋予只读权限\n\n为了方便，不指定端口映射，-P（大写）直接让 Docker 随机生成端口映射\n\n# 执行命令\ndocker run -d -P --name tomcat04 -v kele:/usr/local/tomcat/webapps:ro tomcat:8.5.73\n\n# 查看数据卷\ndocker volume ls\n\n# 返回结果\nDRIVER    VOLUME NAME\nlocal     620fbea6f90b48fbead679838d70c44311f7e846bf08921a2d35c3d335ac4775\nlocal     kele\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n宿主机操作： 找到 docker 的数据卷默认目录，进入 kele 目录下的 _data 目录，创建 test.txt 文件，测试读写权限\n\n# 进入 kele 目录下的 _data 目录\ncd /var/lib/docker/volumes/kele/_data\n\n# 创建 test.txt 文件，测试写权限\ntouch test.txt\n\n# 查看文件，测试读权限\nls\n\n# 返回结果\ntest.txt\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n说明宿主机可读可写。如果不可写会报错。\n\n容器操作： 进入 tomcat04 容器的挂载目录，测试读写权限\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n \n\n\n# 进入 tomcat04 容器\ndocker exec -it tomcat04 bash\n\n# 进入挂载目录\nroot@e83cdeb1104c:/usr/local/tomcat# cd webapps\n\n# 查看文件，测试读权限\nroot@e83cdeb1104c:/usr/local/tomcat/webapps# ls\n\n# 返回结果\ntest.txt\n\n# 测试写权限\nroot@e83cdeb1104c:/usr/local/tomcat/webapps# touch test2.txt\n\n# 返回结果，报错\ntouch: cannot touch \'test2.txt\': Read-only file system\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n11 和 17 行的结果告诉我们，无法执行写操作，只能执行读操作。\n\n> 例子 2：\n\n# 赋予读写权限\ndocker run -d -P --name tomcat04 -v kele:/usr/local/tomcat/webapps:ro tomcat:8.5.73\n\n# 不写权限，默认赋予读写权限\ndocker run -d -P --name tomcat04 -v kele:/usr/local/tomcat/webapps tomcat:8.5.73\n\n\n1\n2\n3\n4\n5\n\n\n\n# 数据卷操作命令\n\n数据卷在 Docker 称为 volume，所以相关命令都要有 volume。\n\n\n# 数据卷命令\n\n看注释：\n\n# 执行命令\ndocker volume --help\n\n# 返回结果\nUsage:  docker volume COMMAND\nManage volumes\nCommands:\n\n  create      Create a volume  # 创建一个数据卷\n  inspect     Display detailed information on one or more volumes  # 查看数据卷的详细信息\n  ls          List volumes  # 查看所有数据卷列表\n  prune       Remove all unused local volumes  # 删除所有未使用的数据卷\n  rm          Remove one or more volumes   # 删除指定的数据卷\n  \nRun \'docker volume COMMAND --help\' for more information on a command.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 数据卷查看\n\n查看数据卷的命令已经在上面透露过了。\n\n格式：docker volume ls\n\ndocker volume ls\n\n\n1\n\n\n> 例子 1：\n\n\n\n \n\n\n\n\n\n\n\n\n# 执行命令\ndocker volume ls\n\n# 返回结果\nDRIVER    VOLUME NAME\nlocal     620fbea6f90b48fbead679838d70c44311f7e846bf08921a2d35c3d335ac4775\nlocal     aa\nlocal     kele\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 数据卷信息\n\n如果看过 Docker - 常用命令文章，那么查看数据卷的详细信息命令想必很快就想出来了。\n\n格式：docker volume inspect <数据卷名>\n\nocker volume inspect <数据卷名>\n\n\n1\n\n\n> 例子 1：查看 kele 数据卷的具体信息\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 执行命令\ndocker volume ls\n\n# 返回结果\nDRIVER    VOLUME NAME\nlocal     620fbea6f90b48fbead679838d70c44311f7e846bf08921a2d35c3d335ac4775\nlocal     aa\nlocal     kele\n\n# 执行命令\ndocker volume inspect kele\n\n# 返回结果\n[\n    {\n        "CreatedAt": "2021-11-21T01:42:01+08:00",   # 创建时间\n        "Driver": "local",\n        "Labels": null,\n        "Mountpoint": "/var/lib/docker/volumes/kele/_data",   # 宿主机的挂载目录\n        "Name": "kele", \n        "Options": null,\n        "Scope": "local"\n    }\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n# 数据卷创建\n\n如果不想在启动容器的时候利用 -v「被迫」创建数据卷，这个命令让你收益实用。\n\n格式：docker volumn create <数据卷名>\n\ndocker volumn create <数据卷名>\n\n\n1\n\n\n> 例子 1：创建一个 bing 数据卷\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n# 执行命令\ndocker volume create bing\n\n# 查看是否创建成功数据卷\ndocker volume ls\n\n# 返回结果\nDRIVER    VOLUME NAME\nlocal     aa\nlocal     bing\nlocal     kele\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 数据卷删除\n\n数据卷太多怎么办？可以删除指定名字的数据卷，也可以删除全部未被使用的数据卷。\n\n * 删除指定名字的数据卷命令格式：docker rm <数据卷名>\n   \n   docker rm <数据卷名>\n   \n   \n   1\n   \n\n * 删除全部未被使用的数据卷命令格式：docker volume prune\n   \n   docker volume prune\n   \n   \n   1\n   \n\n> 例子 1：删除 620fb .... 的数据卷\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n# 执行命令\ndocker volume ls\n\n# 返回结果\nDRIVER    VOLUME NAME\nlocal     620fbea6f90b48fbead679838d70c44311f7e846bf08921a2d35c3d335ac4775\nlocal     aa\nlocal     kele\n\n# 删除数据卷\ndocker volume rm 620fbea6f90b48fbead679838d70c44311f7e846bf08921a2d35c3d335ac4775\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n> 例子 2：删除所有未使用的数据卷\n\n\n\n \n\n\n\n\n\n\n\n\n# 执行命令\ndocker volume prune\n\n# 返回结果\nWARNING! This will remove all local volumes not used by at least one container.\n\n# 确认 y，取消 N\nAre you sure you want to continue? [y/N] y\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 数据卷容器\n\n\n# 数据共享\n\n上面讲述的是主机和容器之间共享数据，那么如何实现容器和容器之间的共享数据呢？那就是创建 创建数据卷容器。\n\n命名的容器挂载数据卷，其他容器通过挂载这个（父容器）实现数据共享，挂载数据卷的容器，称之为 数据卷容器(Data Volume Container)。\n\n通俗地来说，docker容 器数据卷可以看成使我们生活中常用的 U 盘，它存在于一个或多个的容器中，由 docker 挂载到容器，但不属于联合文件系统，Docker不会在容器删除时删除其挂载的数据卷。在创建一个容器时候，使用命令绑定一个父容器，这个父容器就是 数据卷容器。\n\n特点：\n\n * 数据卷可以在容器之间共享或重用数据\n\n * 数据卷中的更改可以直接生效\n\n * 数据卷中的更改不会包含在镜像的更新中\n\n * 数据卷的生命周期一直持续到没有容器使用它为止\n\n命令格式：docker run --volumes-from <数据卷容器名> <镜像名[:TAG | ID]>\n\ndocker run --volumes-from <数据卷容器名> <镜像名[:TAG | ID]>\n\n\n1\n\n\n--volumes-from 可以多次使用来挂载多个容器里的多个数据卷。即该命令是链式的。\n\n使用 --volumes-from 参数所挂载数据卷的容器自己并不需要保持在运行状态。\n\n注意\n\n--volumes-from 后的容器名才是 数据卷容器，并不是启动的这个容器。\n\n2021-11-21 @村长\n\n> 例子 1：创建三个容器 tomcat10、tomcat11、tomcat12，其中 tomcat10 是数据卷容器\n\n为了方便，不指定端口映射，-P（大写）直接让 Docker 随机生成端口映射。\n\n创建数据卷容器的命令和创建容器的命令一样，创建 tomcat10 数据卷容器的时候指定一个数据卷。\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n# 查看容器\ndocker images\n\n# 返回结果\nREPOSITORY    TAG       IMAGE ID       CREATED       SIZE\ntomcat        8.5.73    7ec084df520c   2 days ago    249MB\nmysql         latest    b05128b000dd   3 days ago    516MB\nhello-world   latest    feb5d9fea6a5   8 weeks ago   13.3kB\n\n# 启动镜像，创建容器\ndocker run -d -P --name tomcat10 -v tomcat10:/usr/local/tomcat/webapps tomcat:8.5.73\n\n# 查看容器\ndocker ps\n\n# 返回结果\nCONTAINER ID   IMAGE           COMMAND             CREATED          STATUS          PORTS                     NAMES\n5516f026bf78   tomcat:8.5.73   "catalina.sh run"   29 seconds ago   Up 29 seconds   0.0.0.0:49155->8080/tcp   tomcat10\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n创建 tomcat11 和 tomcat12 容器，绑定 tomcat10 容器，也就是绑定数据卷容器\n\n\n\n \n \n\n\n\n\n\n\n\n\n\n\n\n# 执行两个命令\ndocker run -d -P --name tomcat11 --volumes-from tomcat10 tomcat:8.5.73\ndocker run -d -P --name tomcat12 --volumes-from tomcat10 tomcat:8.5.73\n\n# 查看容器\ndocker ps\n\n# 返回结果\nCONTAINER ID   IMAGE           COMMAND             CREATED          STATUS          PORTS                     NAMES\n2cc6944ab955   tomcat:8.5.73   "catalina.sh run"   15 seconds ago   Up 14 seconds   0.0.0.0:49157->8080/tcp   tomcat12\n0bd657b306d3   tomcat:8.5.73   "catalina.sh run"   45 seconds ago   Up 44 seconds   0.0.0.0:49156->8080/tcp   tomcat11\n5516f026bf78   tomcat:8.5.73   "catalina.sh run"   6 minutes ago    Up 6 minutes    0.0.0.0:49155->8080/tcp   tomcat10\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n> 例子 2：证明三个容器的数据是否共享\n\n例子 1 已经创建好三个容器，并且 tomcat10 容器的数据卷目录是 tomcat10。我们可以在 tomcat10 容器的 webapps 目录下创建一个 test.txt 文件，看看 tomcat11 容器和 tomcat12 容器的 webapps 是否同步数据。\n\n首先进入 tomcat10 容器的 webapps 目录，创建 test.txt 文件\n\n\n\n\n\n\n\n\n\n \n\n\n# 进入 tomcat10 容器\ndocker exec -it tomcat10 bash\n\n# 进入 webapps 目录\nroot@f45ea598ee8d:/usr/local/tomcat# cd webapps\n\n# 创建 test.txt 文件\nroot@f45ea598ee8d:/usr/local/tomcat/webapps# touch test.txt\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n然后我们进入 tomcat11 容器，看文件是否同步过来，并且创建 test2.txt 文件\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n \n\n\n# 进入 tomcat10 容器\ndocker exec -it tomcat11 bash\n\n# 进入 webapps 目录\nroot@31220638e2dc:/usr/local/tomcat# cd webapps\n\n# 创建 test.txt 文件\nroot@31220638e2dc:/usr/local/tomcat/webapps# ls\n\n# 返回结果\ntest.txt\n\n# 创建 test2.txt 文件\nroot@31220638e2dc:/usr/local/tomcat/webapps# touch test2.txt\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n然后我们进入 tomcat12 容器，看文件是否同步过来\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n# 进入 tomcat10 容器\ndocker exec -it tomcat11 bash\n\n# 进入 webapps 目录\nroot@31220638e2dc:/usr/local/tomcat# cd webapps\n\n# 创建 test.txt 文件\nroot@31220638e2dc:/usr/local/tomcat/webapps# ls\n\n# 返回结果\ntest2.txt  test.txt\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n我们可以知道，数据是实现了共享。只要 tomcat10 数据卷容器的更新内容，其他绑定的容器都会同步内容。\n\n最后我们看看宿主机的挂载目录\n\n\n\n\n\n\n\n\n\n \n\n\n# 进入宿主机挂载目录\ncd /var/lib/docker/volumes/tomcat10/_data\n\n# 查看文件\nls\n\n# 返回结果\ntest2.txt  test.txt\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n说明无论是 tomcat10 容器的挂载目录，还是映射的宿主机挂载目录，只要任意一个发生改变，绑定的普通容器也会发生改变，实现共享。\n\n笔记\n\n普通容器绑定数据卷容器，其实就是绑定数据卷容器的数据卷。\n\n所以删除 tomcat10 容器后 ，tomcat11 容器修改文件后， tomcat12 容器还可以正常共享数据，因为 tomcat10 容器的数据卷没有被删除。\n\n2021-11-21 @村长\n\n\n\n容器之间配置信息的传递，数据卷的生命周期一直持续到没有容器使用它为止。 存储在本机的文件则会一直保留！\n\n如果删除了挂载的容器（包括 dbdata、db1 和 db2），数据卷并不会被自动删除。如果要删除一个数据卷，必须在删除最后一个还挂载着它的容器时使用 docker rm -v 命令来指定同时删除关联的容器。 这可以让用户在容器之间升级和移动数据卷。\n\n\n# 数据备份\n\n可以利用数据卷对其中的数据进行进行备份、恢复。\n\n数据备份命令格式：docker run [options] --volumes-from <数据卷容器> [-v <宿主机绝对路径>:<随机路径>] <镜像名>:[TAG | ID] tar cvf <随机路径/备份名> <数据卷容器路径>\n\ndocker run [options] --volumes-from <数据卷容器> [-v <宿主机绝对路径>:<随机路径>] <镜像名>:[TAG | ID] tar cvf <随机路径/备份名> <数据卷容器路径>\n\n\n1\n\n\n两个随机路径必须保持一致。备份路径默认在 /var/lib/docker/overlay2/ 下的容器 ID 目录下生成。\n\n> 例子 1：不指定宿主机挂载目录下和容器备份目录，备份 tomcat10 容器的数据卷 webapps 目录\n\n这里是 tomcat10 容器，这个容器已经创建，并且容器的 /usr/local/tomcat/webapps 有 test.txt 和 test2.txt 文件，具体步骤在 数据共享 实现了。\n\n\n\n\n\n\n\n\n\n \n\n\n# 备份\ndocker run --name tomcat-backup --volumes-from tomcat10  tomcat:8.5.73 tar cvf /backup.tar /usr/local/tomcat/webapps\n\n# 查找备份的文件\nfind / -name backup.tar\n\n# 返回结果\n/var/lib/docker/overlay2/a9ef07977088b96970d926e95650a4810acf60429f9b9ca66625b6366597ff12/diff/backup.tar\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n容器启动后，使用了 tar 命令来将容器的 /usr/local/tomcat/webapps 目录备份到宿主机里，宿主机备份的路径看第 8 行数据，备份的文件是 backup.tar。\n\n如果容器删除，那么该方式的备份文件也被删除，并且备份目录是容器 ID 命名，并非容器名，看一长串字符串就知道了。\n\n如果解决删除问题，以及想要指定的路径进行备，例子 2 方式可以解决。\n\n> 例子 2：指定宿主机挂载目录下和容器备份目录，备份 tomcat10 容器的数据卷 webapps 目录\n\n这种方式如果容器删除，备份文件不会被删除。\n\n\n\n\n\n\n\n\n\n \n \n\n\n# 备份\ndocker run --volumes-from tomcat10 -v /opt/backup:/backup tomcat:8.5.73 tar cvf /backup/backup.tar /usr/local/tomcat/webapps\n\n# 查找备份的文件\nfind / -name backup.tar\n\n# 返回结果\n/opt/backup/backup.tar\n/var/lib/docker/overlay2/a9ef07977088b96970d926e95650a4810acf60429f9b9ca66625b6366597ff12/diff/backup.tar\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n容器的挂载路径要和备份的文件路径保持一致，才能指定备份路径。否则如例子 3 报错：\n\n> 例子 3：容器挂载路径和备份文件的路径不一致情况\n\n\n\n \n\n\n\n\n\n\n# 备份\ndocker run --volumes-from tomcat10 -v /opt/backup:/a tomcat:8.5.73 tar cvf /b/backup.tar /usr/local/tomcat/webapps\n\n# 返回结果\ntar: /b/backup.tar: Cannot open: No such file or directory\ntar: Error is not recoverable: exiting now\n\n\n1\n2\n3\n4\n5\n6\n\n\n容器的挂载路径是 a，但是备份的路径是 b，所以报错了，如果路径保持一致：\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n# 删除例子 2的备份文件\nrm -f /opt/backup.tar\n\n# 备份\ndocker run --volumes-from tomcat10 -v /opt/backup:/a tomcat:8.5.73 tar cvf /a/backup.tar /usr/local/tomcat/webapps\n\n# 查找备份的文件\nfind / -name backup.tar\n\n# 返回结果\n/opt/backup/backup.tar\n/var/lib/docker/overlay2/a9ef07977088b96970d926e95650a4810acf60429f9b9ca66625b6366597ff12/diff/backup.tar\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n说明容器的挂载路径要和备份的文件路径保持一致，才能备份成功。建议使用路径 /backup 。\n\n原理：首先将宿主机和容器的目录进行挂载，实现连通，接着容器内压缩成备份文件到 /a 目录下，实际上也会压缩到与 /a 挂载的 /opt/backup 目录下，所以这就是为什么将压缩文件的目录和宿主机的挂载目录保持一致，它们连通才能互相同步数据。\n\n\n# 数据恢复\n\n备份了数据，那么就需要进行数据恢复。\n\n恢复命令格式：docker run --volumes-from <恢复到哪个数据卷容器> [-v <宿主机绝对路径>:<随机路径>] <镜像名>[:TAG | ID] tar xvf <随机路径 | 路径>\n\ndocker run --volumes-from <恢复到哪个数据卷容器> [-v <宿主机绝对路径>:<随机路径>] <镜像名>[:TAG | ID] tar xvf <随机路径 | 路径>\n\n\n1\n\n\n> 例子 1：数据恢复到 tomcat20 容器的数据卷里\n\n如果要恢复数据到 tomcat20 容器，首先创建一个带有数据卷的容器 tomcat20，因为只能恢复数据到数据卷里。\n\ndocker run -d --name tomcat20 -v tomcat20:/usr/local/tomcat/webapps tomcat:8.5.73\n\n\n1\n\n\n然后创建另一个容器，挂载 tomcat20 的容器，并使用 untar 解压备份文件到挂载的容器卷中。\n\ndocker run --volumes-from tomcat20 -v /opt/backup:/backup tomcat:8.5.73 tar xvf /backup/backup.tar -C /\n\n\n1\n\n\n-C / 代表解压到根目录下，因为压缩包的文件基于根目录的，否则解压的目录是基于 /backup。\n\n原理：此时 tomcat20 挂载目录是 /usr/local/tomcat/webapps，而新的容器只要挂载了 tomcat20 容器，它们两个的 /usr/local/tomcat/webapps 形成关联，新的容器的这个目录发生改变，则 tomcat20 的挂载目录也会发生改变，所以解压文件到新的容器的该目录下，实际上也是解压文件到 tomcat20 的挂载目录下，也就是实现恢复数据。\n\n\n# 挂载特性\n\n关于到底是宿主机的挂载目录覆盖容器的挂载目录，还是反过来覆盖：\n\n * 默认目录挂载：\n   * 当宿主机挂载目录已经存在时，双方挂载完成后，宿主机挂载目录覆盖容器挂载目录\n   * 当宿主机挂载目录不存在时，双方挂载完成后，容器挂载目录覆盖宿主机挂载目录\n * 具体目录挂载\n   * 当宿主机挂载目录无论存不存在，双方挂载完成后，宿主机挂载目录都会覆盖容器挂载目录\n\n默认目录挂载\n\n宿主机             容器       运行结果\n文件存在            文件存在     挂载成功，宿主机文件内容覆盖容器文件内容\n目录存在            目录存在     挂载成功，宿主机目录内容覆盖容器目录内容\n......          ......   ......\n文件不存在           文件存在     挂载成功，容器文件内容覆盖宿主机文件内容\n目录不存在           目录存在     挂载成功，容器目录内容覆盖宿主机目录内容\n......          ......   ......\n其他和 具体目录挂载 类似            \n\n具体目录挂载\n\n宿主机      容器       运行结果\n文件存在     文件存在     挂载成功，宿主机文件内容覆盖容器文件内容\n目录存在     目录存在     挂载成功，宿主机目录内容覆盖容器目录内容\n------   ------   ------\n文件不存在    文件存在     挂载成功，宿主机创建空文件，并覆盖掉容器的文件，导致也为空\n目录不存在    目录存在     挂载成功，宿主机创建空目录，并覆盖掉容器的文件，导致也为空\n------   ------   ------\n文件存在     文件不存在    挂载成功\n目录存在     目录不存在    挂载成功\n------   ------   ------\n文件存在     目录存在     容器启动失败\n目录存在     文件存在     容器启动失败\n------   ------   ------\n目录不存在    目录不存在    挂载成功，Docker 会自动在宿主机和容器内新建目录\n目录不存在    文件存在     容器启动失败\n目录不存在    目录存在     挂载成功，宿主机空目录内容覆盖容器内目录（空）',normalizedContent:' * 什么是数据卷\n * 为什么使用数据卷\n * 数据卷挂载操作\n   * 具体目录挂载\n   * 默认目录挂载\n   * 匿名目录挂载\n   * 哪个挂载方法好？\n   * 读写权限\n * 数据卷操作命令\n   * 数据卷命令\n   * 数据卷查看\n   * 数据卷信息\n   * 数据卷创建\n   * 数据卷删除\n * 数据卷容器\n   * 数据共享\n   * 数据备份\n   * 数据恢复\n * 挂载特性\n\n\n\n\n# 什么是数据卷\n\n数据卷 是一个可供一个或多个容器使用的特殊目录，它绕过 ufs，可以提供很多有用的特性:\n * 数据卷 可以在容器之间共享和享用\n * 对 数据卷 的修改立马生效\n * 对 数据卷 的更新，不会影响镜像\n * 数据卷 默认会一直存在，即时容器被删除\n\n注意\n\n数据卷 的使用，类似于 linux 下对目录或者文件进行 mount，镜像中的被指定为挂载点的目录中的文件会复制到数据卷（仅数据卷为空时复制）\n\n2021-11-20 @村长\n\n\n# 为什么使用数据卷\n\n * 当创建一个容器的时候，容器运行，数据能不能持久化\n * 如果能够持久化，数据存储在哪？由于 docker 是隔离的，数据能不能存储在容器外\n * 如果部署很多容器，每次都需要进入容器中进行配置嘛？能不能外部进行配置\n\ndocker 数据卷呈现给 docker 容器的一个形式就是目录，该目录支持多个容器间共享，修改不会影响到镜像。使用 docker 的数据卷，类似在系统中使用 mount 挂载一个文件系统。\n\n\n# 数据卷挂载操作\n\n三种挂载数据卷格式\n\n * 具体目录挂载：docker run [options] -v <宿主机绝对路径:容器内的路径[:ro | rw]> <镜像名>\n * 默认目录挂载：docker run [options] -v <任意别名:容器内的路径[:ro | rw]> <镜像名>\n * 匿名目录挂载：docker run [options] -v <容器内的路径[:ro | rw]> <镜像名>\n\n默认目录挂载和匿名目录挂载的目录默认在 /var/lib/docker/volumes/ 目录下。\n\n宿主机挂载目录里，都会生成 _data 目录，该目录存放容器挂载目录下的数据。\n\n\n# 具体目录挂载\n\n自定义数据卷目录。\n\n在用 docker run 命令的时候，使用 -v 标记来创建一个数据卷并挂载到容器里。\n\n格式：docker run [options] -v <宿主机绝对路径 | 任意别名:容器内的路径[:ro | rw]> <镜像名>\n\ndocker run [options] -v <宿主机绝对路径 | 任意别名:容器内的路径[:ro | rw]> <镜像名>\n\n\n1\n\n\n宿主机路径必须是绝对路径，如果目录不存在 docker 会自动为你创建它。\n\nro：代表 read-only，容器的路径只允许读，不允许写。不影响宿主机的路径可读可写\n\nrw：默认值，代表可读可写\n\n> 例子 1：具名挂载\n\ndocker run -d -p 8081:8080 --name tomcat02 -v /opt/aa:/usr/local/tomcat/webapps tomcat:8.5.73\n\n\n1\n\n\n特点：宿主机的的挂载目录内容覆盖到容器的挂载目录内容\n\n因为 /opt/aa 目录为空，所以容器的 webapps 目录被 aa 目录覆盖，也为空。\n\n验证是否成功挂载\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n# 执行命令\ndocker ps\n\n# 返回结果\ncontainer id   image           command             created          status          ports                    names\nebbfba2b098c   tomcat:8.5.73   "catalina.sh run"   18 seconds ago   up 17 seconds   0.0.0.0:8081->8080/tcp   tomcat02\n1365f332be6b   tomcat:8.5.73   "catalina.sh run"   25 hours ago     up 12 hours     0.0.0.0:8080->8080/tcp   tomcat01\n\n# 查看挂载信息\ndocker inspect ebbfba2b098c\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n\n> 例子 2：测试容器和宿主机之间数据共享\n\n在 tomcat02 容器里创建 test.txt 文件\n\n# 进入 tomcat02 容器\ndocker exec -it tomcat02 bash\n\n# 进入容器挂载目录\nroot@ebbfba2b098c:/usr/local/tomcat# cd webapps\n\n#创建 test.txt 文件\nroot@ebbfba2b098c:/usr/local/tomcat# touch test.txt\n\n# 查看是否创建成功\nroot@ebbfba2b098c:/usr/local/tomcat/webapps# ls\n\n# 返回结果\ntest.txt\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n在宿主机查看文件\n\n # 进入 宿主机挂载目录\n cd /opt/aa\n \n # 查看文件\n ls\n \n # 返回结果\n test.txt\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n说明挂载成功，双方挂载的目录实现共享。\n\n> 例子 3：容器停止运行，宿主机添加 test2.txt，再启动容器，文件是否同步到容器里？\n\n宿主机添加 test2.txt\n\n# 进入 宿主机挂载目录\ncd /opt/aa\n\n# 创建 test2.txt 文件 \ntouch test2.txt\n\n# 查看文件\nls\n\n# 返回结果\ntest2.txt  test.txt\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n启动 tomcat02 容器，查看挂载目录是否有 test2.txt\n\n# 启动 tomcat02 容器\ndocker start tomcat02\n\n# 进入 tomcat02 容器\ndocker exec -it tomcat02 bash\n\n# 进入容器挂载目录\nroot@ebbfba2b098c:/usr/local/tomcat# cd webapps\n\n# 查看文件\nroot@ebbfba2b098c:/usr/local/tomcat/webapps# ls\n\n# 返回结果\ntest2.txt  test.txt\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n说明数据依旧同步\n\n> 例子 4：删除容器\n\n我们删除容器，看主机上数据是否会被删除\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n# 执行命令\ndocker ps\n\n# 返回结果\ncontainer id   image           command             created          status          ports                    names\ne2bb571eb168   tomcat:8.5.73   "catalina.sh run"   32 minutes ago   up 31 minutes   0.0.0.0:8081->8080/tcp   tomcat02\n1365f332be6b   tomcat:8.5.73   "catalina.sh run"   18 hours ago     up 5 hours      0.0.0.0:8080->8080/tcp   tomcat01\n\n# 删除容器\ndocker rm -f e2bb571eb168\n\n# 进入 aa 目录\ncd /opt/aa\nls\n\n# 返回结果\ndocs  examples  host-manager  manager  root\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n说明没有删除。\n\n\n# 默认目录挂载\n\n自动数据卷目录路径。\n\n启动容器进行挂载的时候，宿主机的路径必须是绝对路径\n\n格式：docker run [options] -v <任意别名:容器内的路径[:ro | rw]> <镜像名>\n\ndocker run [options] -v <任意别名:容器内的路径[:ro | rw]> <镜像名>\n\n\n1\n\n\n任意别名是一个数据卷名字，名字可以随便写，docker 会在 /var/lib/docker/volumes 目录下生成该数据卷，这是 docker 默认的数据卷目录。并且在数据卷里生成 _data 目录用于与容器目录同步数据。\n\nro：代表 read-only，容器的路径只允许读，不允许写。不影响宿主机的路径可读可写\n\nrw：默认值，代表可读可写\n\n> 例子 1：\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 执行命令\ndocker run -d -p --name tomcat02 -v aa:/usr/local/tomcat/webapps tomcat:8.5.73\n\nfind / -name aa\n\n# 返回结果\n/var/lib/docker/volumes/aa\n\n# 进入宿主机挂载\ncd /var/lib/docker/volumes/aa_data\n\n# 查看文件\nls\n\n# 返回结果\ndocs  examples  host-manager  manager  root\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\naa 代表一个数据卷名字，可以是任意，这相当于相对路径，它会在 /var/lib/docker/volumes 下创建 aa 目录作为数据卷。\n\n特点：容器的挂载目录内容覆盖到宿主机的挂载目录内容\n\n其他例子和 具体目录挂载 一样。\n\n\n# 匿名目录挂载\n\n没指定名字的挂载都是匿名挂载，-v 只写了容器内路径，并没写宿主机路径。\n\n匿名目录挂载的目录是：/var/lib/docker/volumes/，它会在这个目录生成匿名数据卷目录。\n\n格式：docker run [options] -v <容器内的路径[:ro | rw]> <镜像名>\n\ndocker run [options] -v <容器内的路径[:ro | rw]> <镜像名>\n\n\n1\n\n\nro：代表 read-only，容器的路径只允许读，不允许写。不影响宿主机的路径可读可写\n\nrw：默认值，代表可读可写\n\n> 例子 1：匿名创建 tomcat3 容器，找到匿名的目录位置\n\ndocker run -d -p --name tomcat03 -v /usr/local/tomcat/webapps tomcat:8.5.73\n\n\n1\n\n\n创建容器时，没有指定宿主机的目录，那么它在哪呢？\n\n# 执行命令\ncd /var/lib/docker/volumes/\n\n# 查看内容\nls\n\n# 返回结果\n620fbea6f90b48fbead679838d70c44311f7e846bf08921a2d35c3d335ac4775  backingfsblockdev  metadata.db\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n我们可以得知：没有指定宿主机目录，docker 会自动在 /var/lib/docker/volumes 生成很长的字符串，这是什么呢？\n\n这里透露 docker 数据卷操作命令：docker volume ls，查看数据卷\n\n# 执行命令\ndocker volume ls\n# 返回结果\ndriver    volume name\nlocal     620fbea6f90b48fbead679838d70c44311f7e846bf08921a2d35c3d335ac4775\n\n\n1\n2\n3\n4\n5\n\n\n可以看出匿名目录挂载生成的目录名就是 随机生成的数据卷名字。\n\n\n# 哪个挂载方法好？\n\n首先排除掉 匿名目录挂载，它的缺点是不好维护，数据卷名随机生成且太长，不清楚目录挂载的是哪个容器。\n\n默认目录挂载 指定了一个默认目录，无论挂载目录有多少，都集中在默认目录下管理。但是缺点是 不能指定文件挂载，只能指定目录进行挂载。它和具体目录挂载的另一个区别是：第一次启动容器挂载时，容器的挂载目录内容会覆盖宿主机的挂载目录内容。\n\n具体目录挂载 可以指定宿主机的任意位置，但是一旦挂载目录多了起来，可能目录过于分散导致无法集中管理，但是它更加灵活，而且 能指定文件挂载。值得注意的是：第一次启动容器挂载时，必须确保容器的挂载目录数据备份好，因为该挂载方式会将 宿主机的挂载目录内容覆盖掉容器的挂载目录内容。所以，有数据则备份，再挂载。\n\n总之：匿名目录挂载 不推荐，根据需求选择 默认目录挂载 和 具体目录挂载，前者不能挂载文件，挂载在默认目录；后者能挂载文件，且挂载在宿主机任意位置，但是会覆盖容器的挂载目录。我喜欢 具体目录挂载。\n\n\n# 读写权限\n\n三个挂载方式我都提到了读写的权限，这个读写权限仅针对 容器的挂载目录，如果不指定权限，默认就是可读可写。\n\n什么时候用到呢？ 当我们希望只操作宿主机的挂载目录，然后同步给容器的挂载目录，但是不希望容器的挂载目录也能操作，影响宿主机的挂载目录。\n\n拿默认目录挂载的命令格式来说：docker run [options] -v <任意别名:容器内的路径[:ro | rw]> <镜像名>\n\ndocker run [options] -v <任意别名:容器内的路径[:ro | rw]> <镜像名>\n\n\n1\n\n\nro：代表 read-only，容器的路径只允许读，不允许写。不影响宿主机的路径可读可写\n\nrw：默认值，代表可读可写\n\n> 例子 1：启动 tomcat04 容器，挂载到 kele 数据卷里，并赋予只读权限\n\n为了方便，不指定端口映射，-p（大写）直接让 docker 随机生成端口映射\n\n# 执行命令\ndocker run -d -p --name tomcat04 -v kele:/usr/local/tomcat/webapps:ro tomcat:8.5.73\n\n# 查看数据卷\ndocker volume ls\n\n# 返回结果\ndriver    volume name\nlocal     620fbea6f90b48fbead679838d70c44311f7e846bf08921a2d35c3d335ac4775\nlocal     kele\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n宿主机操作： 找到 docker 的数据卷默认目录，进入 kele 目录下的 _data 目录，创建 test.txt 文件，测试读写权限\n\n# 进入 kele 目录下的 _data 目录\ncd /var/lib/docker/volumes/kele/_data\n\n# 创建 test.txt 文件，测试写权限\ntouch test.txt\n\n# 查看文件，测试读权限\nls\n\n# 返回结果\ntest.txt\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n说明宿主机可读可写。如果不可写会报错。\n\n容器操作： 进入 tomcat04 容器的挂载目录，测试读写权限\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n \n\n\n# 进入 tomcat04 容器\ndocker exec -it tomcat04 bash\n\n# 进入挂载目录\nroot@e83cdeb1104c:/usr/local/tomcat# cd webapps\n\n# 查看文件，测试读权限\nroot@e83cdeb1104c:/usr/local/tomcat/webapps# ls\n\n# 返回结果\ntest.txt\n\n# 测试写权限\nroot@e83cdeb1104c:/usr/local/tomcat/webapps# touch test2.txt\n\n# 返回结果，报错\ntouch: cannot touch \'test2.txt\': read-only file system\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n11 和 17 行的结果告诉我们，无法执行写操作，只能执行读操作。\n\n> 例子 2：\n\n# 赋予读写权限\ndocker run -d -p --name tomcat04 -v kele:/usr/local/tomcat/webapps:ro tomcat:8.5.73\n\n# 不写权限，默认赋予读写权限\ndocker run -d -p --name tomcat04 -v kele:/usr/local/tomcat/webapps tomcat:8.5.73\n\n\n1\n2\n3\n4\n5\n\n\n\n# 数据卷操作命令\n\n数据卷在 docker 称为 volume，所以相关命令都要有 volume。\n\n\n# 数据卷命令\n\n看注释：\n\n# 执行命令\ndocker volume --help\n\n# 返回结果\nusage:  docker volume command\nmanage volumes\ncommands:\n\n  create      create a volume  # 创建一个数据卷\n  inspect     display detailed information on one or more volumes  # 查看数据卷的详细信息\n  ls          list volumes  # 查看所有数据卷列表\n  prune       remove all unused local volumes  # 删除所有未使用的数据卷\n  rm          remove one or more volumes   # 删除指定的数据卷\n  \nrun \'docker volume command --help\' for more information on a command.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 数据卷查看\n\n查看数据卷的命令已经在上面透露过了。\n\n格式：docker volume ls\n\ndocker volume ls\n\n\n1\n\n\n> 例子 1：\n\n\n\n \n\n\n\n\n\n\n\n\n# 执行命令\ndocker volume ls\n\n# 返回结果\ndriver    volume name\nlocal     620fbea6f90b48fbead679838d70c44311f7e846bf08921a2d35c3d335ac4775\nlocal     aa\nlocal     kele\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 数据卷信息\n\n如果看过 docker - 常用命令文章，那么查看数据卷的详细信息命令想必很快就想出来了。\n\n格式：docker volume inspect <数据卷名>\n\nocker volume inspect <数据卷名>\n\n\n1\n\n\n> 例子 1：查看 kele 数据卷的具体信息\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 执行命令\ndocker volume ls\n\n# 返回结果\ndriver    volume name\nlocal     620fbea6f90b48fbead679838d70c44311f7e846bf08921a2d35c3d335ac4775\nlocal     aa\nlocal     kele\n\n# 执行命令\ndocker volume inspect kele\n\n# 返回结果\n[\n    {\n        "createdat": "2021-11-21t01:42:01+08:00",   # 创建时间\n        "driver": "local",\n        "labels": null,\n        "mountpoint": "/var/lib/docker/volumes/kele/_data",   # 宿主机的挂载目录\n        "name": "kele", \n        "options": null,\n        "scope": "local"\n    }\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n# 数据卷创建\n\n如果不想在启动容器的时候利用 -v「被迫」创建数据卷，这个命令让你收益实用。\n\n格式：docker volumn create <数据卷名>\n\ndocker volumn create <数据卷名>\n\n\n1\n\n\n> 例子 1：创建一个 bing 数据卷\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n# 执行命令\ndocker volume create bing\n\n# 查看是否创建成功数据卷\ndocker volume ls\n\n# 返回结果\ndriver    volume name\nlocal     aa\nlocal     bing\nlocal     kele\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 数据卷删除\n\n数据卷太多怎么办？可以删除指定名字的数据卷，也可以删除全部未被使用的数据卷。\n\n * 删除指定名字的数据卷命令格式：docker rm <数据卷名>\n   \n   docker rm <数据卷名>\n   \n   \n   1\n   \n\n * 删除全部未被使用的数据卷命令格式：docker volume prune\n   \n   docker volume prune\n   \n   \n   1\n   \n\n> 例子 1：删除 620fb .... 的数据卷\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n# 执行命令\ndocker volume ls\n\n# 返回结果\ndriver    volume name\nlocal     620fbea6f90b48fbead679838d70c44311f7e846bf08921a2d35c3d335ac4775\nlocal     aa\nlocal     kele\n\n# 删除数据卷\ndocker volume rm 620fbea6f90b48fbead679838d70c44311f7e846bf08921a2d35c3d335ac4775\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n> 例子 2：删除所有未使用的数据卷\n\n\n\n \n\n\n\n\n\n\n\n\n# 执行命令\ndocker volume prune\n\n# 返回结果\nwarning! this will remove all local volumes not used by at least one container.\n\n# 确认 y，取消 n\nare you sure you want to continue? [y/n] y\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 数据卷容器\n\n\n# 数据共享\n\n上面讲述的是主机和容器之间共享数据，那么如何实现容器和容器之间的共享数据呢？那就是创建 创建数据卷容器。\n\n命名的容器挂载数据卷，其他容器通过挂载这个（父容器）实现数据共享，挂载数据卷的容器，称之为 数据卷容器(data volume container)。\n\n通俗地来说，docker容 器数据卷可以看成使我们生活中常用的 u 盘，它存在于一个或多个的容器中，由 docker 挂载到容器，但不属于联合文件系统，docker不会在容器删除时删除其挂载的数据卷。在创建一个容器时候，使用命令绑定一个父容器，这个父容器就是 数据卷容器。\n\n特点：\n\n * 数据卷可以在容器之间共享或重用数据\n\n * 数据卷中的更改可以直接生效\n\n * 数据卷中的更改不会包含在镜像的更新中\n\n * 数据卷的生命周期一直持续到没有容器使用它为止\n\n命令格式：docker run --volumes-from <数据卷容器名> <镜像名[:tag | id]>\n\ndocker run --volumes-from <数据卷容器名> <镜像名[:tag | id]>\n\n\n1\n\n\n--volumes-from 可以多次使用来挂载多个容器里的多个数据卷。即该命令是链式的。\n\n使用 --volumes-from 参数所挂载数据卷的容器自己并不需要保持在运行状态。\n\n注意\n\n--volumes-from 后的容器名才是 数据卷容器，并不是启动的这个容器。\n\n2021-11-21 @村长\n\n> 例子 1：创建三个容器 tomcat10、tomcat11、tomcat12，其中 tomcat10 是数据卷容器\n\n为了方便，不指定端口映射，-p（大写）直接让 docker 随机生成端口映射。\n\n创建数据卷容器的命令和创建容器的命令一样，创建 tomcat10 数据卷容器的时候指定一个数据卷。\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n# 查看容器\ndocker images\n\n# 返回结果\nrepository    tag       image id       created       size\ntomcat        8.5.73    7ec084df520c   2 days ago    249mb\nmysql         latest    b05128b000dd   3 days ago    516mb\nhello-world   latest    feb5d9fea6a5   8 weeks ago   13.3kb\n\n# 启动镜像，创建容器\ndocker run -d -p --name tomcat10 -v tomcat10:/usr/local/tomcat/webapps tomcat:8.5.73\n\n# 查看容器\ndocker ps\n\n# 返回结果\ncontainer id   image           command             created          status          ports                     names\n5516f026bf78   tomcat:8.5.73   "catalina.sh run"   29 seconds ago   up 29 seconds   0.0.0.0:49155->8080/tcp   tomcat10\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n创建 tomcat11 和 tomcat12 容器，绑定 tomcat10 容器，也就是绑定数据卷容器\n\n\n\n \n \n\n\n\n\n\n\n\n\n\n\n\n# 执行两个命令\ndocker run -d -p --name tomcat11 --volumes-from tomcat10 tomcat:8.5.73\ndocker run -d -p --name tomcat12 --volumes-from tomcat10 tomcat:8.5.73\n\n# 查看容器\ndocker ps\n\n# 返回结果\ncontainer id   image           command             created          status          ports                     names\n2cc6944ab955   tomcat:8.5.73   "catalina.sh run"   15 seconds ago   up 14 seconds   0.0.0.0:49157->8080/tcp   tomcat12\n0bd657b306d3   tomcat:8.5.73   "catalina.sh run"   45 seconds ago   up 44 seconds   0.0.0.0:49156->8080/tcp   tomcat11\n5516f026bf78   tomcat:8.5.73   "catalina.sh run"   6 minutes ago    up 6 minutes    0.0.0.0:49155->8080/tcp   tomcat10\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n> 例子 2：证明三个容器的数据是否共享\n\n例子 1 已经创建好三个容器，并且 tomcat10 容器的数据卷目录是 tomcat10。我们可以在 tomcat10 容器的 webapps 目录下创建一个 test.txt 文件，看看 tomcat11 容器和 tomcat12 容器的 webapps 是否同步数据。\n\n首先进入 tomcat10 容器的 webapps 目录，创建 test.txt 文件\n\n\n\n\n\n\n\n\n\n \n\n\n# 进入 tomcat10 容器\ndocker exec -it tomcat10 bash\n\n# 进入 webapps 目录\nroot@f45ea598ee8d:/usr/local/tomcat# cd webapps\n\n# 创建 test.txt 文件\nroot@f45ea598ee8d:/usr/local/tomcat/webapps# touch test.txt\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n然后我们进入 tomcat11 容器，看文件是否同步过来，并且创建 test2.txt 文件\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n \n\n\n# 进入 tomcat10 容器\ndocker exec -it tomcat11 bash\n\n# 进入 webapps 目录\nroot@31220638e2dc:/usr/local/tomcat# cd webapps\n\n# 创建 test.txt 文件\nroot@31220638e2dc:/usr/local/tomcat/webapps# ls\n\n# 返回结果\ntest.txt\n\n# 创建 test2.txt 文件\nroot@31220638e2dc:/usr/local/tomcat/webapps# touch test2.txt\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n然后我们进入 tomcat12 容器，看文件是否同步过来\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n# 进入 tomcat10 容器\ndocker exec -it tomcat11 bash\n\n# 进入 webapps 目录\nroot@31220638e2dc:/usr/local/tomcat# cd webapps\n\n# 创建 test.txt 文件\nroot@31220638e2dc:/usr/local/tomcat/webapps# ls\n\n# 返回结果\ntest2.txt  test.txt\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n我们可以知道，数据是实现了共享。只要 tomcat10 数据卷容器的更新内容，其他绑定的容器都会同步内容。\n\n最后我们看看宿主机的挂载目录\n\n\n\n\n\n\n\n\n\n \n\n\n# 进入宿主机挂载目录\ncd /var/lib/docker/volumes/tomcat10/_data\n\n# 查看文件\nls\n\n# 返回结果\ntest2.txt  test.txt\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n说明无论是 tomcat10 容器的挂载目录，还是映射的宿主机挂载目录，只要任意一个发生改变，绑定的普通容器也会发生改变，实现共享。\n\n笔记\n\n普通容器绑定数据卷容器，其实就是绑定数据卷容器的数据卷。\n\n所以删除 tomcat10 容器后 ，tomcat11 容器修改文件后， tomcat12 容器还可以正常共享数据，因为 tomcat10 容器的数据卷没有被删除。\n\n2021-11-21 @村长\n\n\n\n容器之间配置信息的传递，数据卷的生命周期一直持续到没有容器使用它为止。 存储在本机的文件则会一直保留！\n\n如果删除了挂载的容器（包括 dbdata、db1 和 db2），数据卷并不会被自动删除。如果要删除一个数据卷，必须在删除最后一个还挂载着它的容器时使用 docker rm -v 命令来指定同时删除关联的容器。 这可以让用户在容器之间升级和移动数据卷。\n\n\n# 数据备份\n\n可以利用数据卷对其中的数据进行进行备份、恢复。\n\n数据备份命令格式：docker run [options] --volumes-from <数据卷容器> [-v <宿主机绝对路径>:<随机路径>] <镜像名>:[tag | id] tar cvf <随机路径/备份名> <数据卷容器路径>\n\ndocker run [options] --volumes-from <数据卷容器> [-v <宿主机绝对路径>:<随机路径>] <镜像名>:[tag | id] tar cvf <随机路径/备份名> <数据卷容器路径>\n\n\n1\n\n\n两个随机路径必须保持一致。备份路径默认在 /var/lib/docker/overlay2/ 下的容器 id 目录下生成。\n\n> 例子 1：不指定宿主机挂载目录下和容器备份目录，备份 tomcat10 容器的数据卷 webapps 目录\n\n这里是 tomcat10 容器，这个容器已经创建，并且容器的 /usr/local/tomcat/webapps 有 test.txt 和 test2.txt 文件，具体步骤在 数据共享 实现了。\n\n\n\n\n\n\n\n\n\n \n\n\n# 备份\ndocker run --name tomcat-backup --volumes-from tomcat10  tomcat:8.5.73 tar cvf /backup.tar /usr/local/tomcat/webapps\n\n# 查找备份的文件\nfind / -name backup.tar\n\n# 返回结果\n/var/lib/docker/overlay2/a9ef07977088b96970d926e95650a4810acf60429f9b9ca66625b6366597ff12/diff/backup.tar\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n容器启动后，使用了 tar 命令来将容器的 /usr/local/tomcat/webapps 目录备份到宿主机里，宿主机备份的路径看第 8 行数据，备份的文件是 backup.tar。\n\n如果容器删除，那么该方式的备份文件也被删除，并且备份目录是容器 id 命名，并非容器名，看一长串字符串就知道了。\n\n如果解决删除问题，以及想要指定的路径进行备，例子 2 方式可以解决。\n\n> 例子 2：指定宿主机挂载目录下和容器备份目录，备份 tomcat10 容器的数据卷 webapps 目录\n\n这种方式如果容器删除，备份文件不会被删除。\n\n\n\n\n\n\n\n\n\n \n \n\n\n# 备份\ndocker run --volumes-from tomcat10 -v /opt/backup:/backup tomcat:8.5.73 tar cvf /backup/backup.tar /usr/local/tomcat/webapps\n\n# 查找备份的文件\nfind / -name backup.tar\n\n# 返回结果\n/opt/backup/backup.tar\n/var/lib/docker/overlay2/a9ef07977088b96970d926e95650a4810acf60429f9b9ca66625b6366597ff12/diff/backup.tar\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n容器的挂载路径要和备份的文件路径保持一致，才能指定备份路径。否则如例子 3 报错：\n\n> 例子 3：容器挂载路径和备份文件的路径不一致情况\n\n\n\n \n\n\n\n\n\n\n# 备份\ndocker run --volumes-from tomcat10 -v /opt/backup:/a tomcat:8.5.73 tar cvf /b/backup.tar /usr/local/tomcat/webapps\n\n# 返回结果\ntar: /b/backup.tar: cannot open: no such file or directory\ntar: error is not recoverable: exiting now\n\n\n1\n2\n3\n4\n5\n6\n\n\n容器的挂载路径是 a，但是备份的路径是 b，所以报错了，如果路径保持一致：\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n# 删除例子 2的备份文件\nrm -f /opt/backup.tar\n\n# 备份\ndocker run --volumes-from tomcat10 -v /opt/backup:/a tomcat:8.5.73 tar cvf /a/backup.tar /usr/local/tomcat/webapps\n\n# 查找备份的文件\nfind / -name backup.tar\n\n# 返回结果\n/opt/backup/backup.tar\n/var/lib/docker/overlay2/a9ef07977088b96970d926e95650a4810acf60429f9b9ca66625b6366597ff12/diff/backup.tar\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n说明容器的挂载路径要和备份的文件路径保持一致，才能备份成功。建议使用路径 /backup 。\n\n原理：首先将宿主机和容器的目录进行挂载，实现连通，接着容器内压缩成备份文件到 /a 目录下，实际上也会压缩到与 /a 挂载的 /opt/backup 目录下，所以这就是为什么将压缩文件的目录和宿主机的挂载目录保持一致，它们连通才能互相同步数据。\n\n\n# 数据恢复\n\n备份了数据，那么就需要进行数据恢复。\n\n恢复命令格式：docker run --volumes-from <恢复到哪个数据卷容器> [-v <宿主机绝对路径>:<随机路径>] <镜像名>[:tag | id] tar xvf <随机路径 | 路径>\n\ndocker run --volumes-from <恢复到哪个数据卷容器> [-v <宿主机绝对路径>:<随机路径>] <镜像名>[:tag | id] tar xvf <随机路径 | 路径>\n\n\n1\n\n\n> 例子 1：数据恢复到 tomcat20 容器的数据卷里\n\n如果要恢复数据到 tomcat20 容器，首先创建一个带有数据卷的容器 tomcat20，因为只能恢复数据到数据卷里。\n\ndocker run -d --name tomcat20 -v tomcat20:/usr/local/tomcat/webapps tomcat:8.5.73\n\n\n1\n\n\n然后创建另一个容器，挂载 tomcat20 的容器，并使用 untar 解压备份文件到挂载的容器卷中。\n\ndocker run --volumes-from tomcat20 -v /opt/backup:/backup tomcat:8.5.73 tar xvf /backup/backup.tar -c /\n\n\n1\n\n\n-c / 代表解压到根目录下，因为压缩包的文件基于根目录的，否则解压的目录是基于 /backup。\n\n原理：此时 tomcat20 挂载目录是 /usr/local/tomcat/webapps，而新的容器只要挂载了 tomcat20 容器，它们两个的 /usr/local/tomcat/webapps 形成关联，新的容器的这个目录发生改变，则 tomcat20 的挂载目录也会发生改变，所以解压文件到新的容器的该目录下，实际上也是解压文件到 tomcat20 的挂载目录下，也就是实现恢复数据。\n\n\n# 挂载特性\n\n关于到底是宿主机的挂载目录覆盖容器的挂载目录，还是反过来覆盖：\n\n * 默认目录挂载：\n   * 当宿主机挂载目录已经存在时，双方挂载完成后，宿主机挂载目录覆盖容器挂载目录\n   * 当宿主机挂载目录不存在时，双方挂载完成后，容器挂载目录覆盖宿主机挂载目录\n * 具体目录挂载\n   * 当宿主机挂载目录无论存不存在，双方挂载完成后，宿主机挂载目录都会覆盖容器挂载目录\n\n默认目录挂载\n\n宿主机             容器       运行结果\n文件存在            文件存在     挂载成功，宿主机文件内容覆盖容器文件内容\n目录存在            目录存在     挂载成功，宿主机目录内容覆盖容器目录内容\n......          ......   ......\n文件不存在           文件存在     挂载成功，容器文件内容覆盖宿主机文件内容\n目录不存在           目录存在     挂载成功，容器目录内容覆盖宿主机目录内容\n......          ......   ......\n其他和 具体目录挂载 类似            \n\n具体目录挂载\n\n宿主机      容器       运行结果\n文件存在     文件存在     挂载成功，宿主机文件内容覆盖容器文件内容\n目录存在     目录存在     挂载成功，宿主机目录内容覆盖容器目录内容\n------   ------   ------\n文件不存在    文件存在     挂载成功，宿主机创建空文件，并覆盖掉容器的文件，导致也为空\n目录不存在    目录存在     挂载成功，宿主机创建空目录，并覆盖掉容器的文件，导致也为空\n------   ------   ------\n文件存在     文件不存在    挂载成功\n目录存在     目录不存在    挂载成功\n------   ------   ------\n文件存在     目录存在     容器启动失败\n目录存在     文件存在     容器启动失败\n------   ------   ------\n目录不存在    目录不存在    挂载成功，docker 会自动在宿主机和容器内新建目录\n目录不存在    文件存在     容器启动失败\n目录不存在    目录存在     挂载成功，宿主机空目录内容覆盖容器内目录（空）',charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"Docker - 软件安装",frontmatter:{title:"Docker - 软件安装",date:"2021-11-24T23:49:11.000Z",permalink:"/dokcer/software-install/",categories:["Docker"],tags:["容器部署"],readingShow:"top"},regularPath:"/40.%E5%B7%A5%E5%85%B7/40.%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2%20-%20Docker/17.Docker%20-%20%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85.html",relativePath:"40.工具/40.容器部署 - Docker/17.Docker - 软件安装.md",key:"v-2fbe7a7e",path:"/dokcer/software-install/",headers:[{level:2,title:"Tomcat安装使用",slug:"tomcat安装使用",normalizedTitle:"tomcat安装使用",charIndex:3},{level:3,title:"版本选择",slug:"版本选择",normalizedTitle:"版本选择",charIndex:19},{level:3,title:"安装修改",slug:"安装修改",normalizedTitle:"安装修改",charIndex:29},{level:3,title:"启动使用",slug:"启动使用",normalizedTitle:"启动使用",charIndex:39},{level:3,title:"挂载特性",slug:"挂载特性",normalizedTitle:"挂载特性",charIndex:49},{level:3,title:"相关指令",slug:"相关指令",normalizedTitle:"相关指令",charIndex:59},{level:2,title:"MySQL安装",slug:"mysql安装",normalizedTitle:"mysql安装",charIndex:67},{level:3,title:"安装启动",slug:"安装启动",normalizedTitle:"安装启动",charIndex:80},{level:3,title:"其他命令",slug:"其他命令",normalizedTitle:"其他命令",charIndex:90},{level:2,title:"Redis安装",slug:"redis安装",normalizedTitle:"redis安装",charIndex:98},{level:3,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:9},{level:3,title:"启动",slug:"启动",normalizedTitle:"启动",charIndex:39},{level:3,title:"其他",slug:"其他",normalizedTitle:"其他",charIndex:90},{level:2,title:"ElasticSearch安装",slug:"elasticsearch安装",normalizedTitle:"elasticsearch安装",charIndex:133},{level:3,title:"安装",slug:"安装-2",normalizedTitle:"安装",charIndex:9},{level:3,title:"配置",slug:"配置",normalizedTitle:"配置",charIndex:162},{level:3,title:"启动",slug:"启动-2",normalizedTitle:"启动",charIndex:39},{level:2,title:"Kibana安装",slug:"kibana安装",normalizedTitle:"kibana安装",charIndex:176},{level:2,title:"可视化工具Portainer",slug:"可视化工具portainer",normalizedTitle:"可视化工具portainer",charIndex:188},{level:3,title:"安装启动",slug:"安装启动-2",normalizedTitle:"安装启动",charIndex:80},{level:3,title:"docker-compose安装启动",slug:"docker-compose安装启动",normalizedTitle:"docker-compose安装启动",charIndex:218},{level:3,title:"登录和注册",slug:"登录和注册",normalizedTitle:"登录和注册",charIndex:242}],headersStr:"Tomcat安装使用 版本选择 安装修改 启动使用 挂载特性 相关指令 MySQL安装 安装启动 其他命令 Redis安装 安装 启动 其他 ElasticSearch安装 安装 配置 启动 Kibana安装 可视化工具Portainer 安装启动 docker-compose安装启动 登录和注册",content:' * Tomcat安装使用\n   * 版本选择\n   * 安装修改\n   * 启动使用\n   * 挂载特性\n   * 相关指令\n * MySQL安装\n   * 安装启动\n   * 其他命令\n * Redis安装\n   * 安装\n   * 启动\n   * 其他\n * ElasticSearch安装\n   * 安装\n   * 配置\n   * 启动\n * Kibana安装\n * 可视化工具Portainer\n   * 安装启动\n   * docker-compose安装启动\n   * 登录和注册\n\n\n\n\n# Tomcat安装使用\n\ntomcat 版本网址：https://registry.hub.docker.com/_/tomcat\n\n\n# 版本选择\n\ntomcat 有很多的版本分支，一个版本可能有多个分支，如 8-jre 代表 Tomcat 8 内置 jre8 的版本、 8-jdk8 代表 Tomcat 8 内置 jdk8 的版本等等。所以根据需求进行版本选择。（jdk 包括了 jre，但是相对而言比较大）\n\n\n\n\n# 安装修改\n\n这里选择的是 8.5.73-jre8-temurin-focal 版本，先下载：\n\ndocker pull tomcat:8.5.73-jre8-temurin-focal\n\n\n1\n\n\n下载的版本名太长，我们可以创建短的版本，然后删除掉长的版本\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n \n\n\n# 执行命令\ndocker images tomcat\n\n# 返回结果\nREPOSITORY    TAG                         IMAGE ID       CREATED        SIZE\ntomcat        8.5.73-jre8-temurin-focal   7ec084df520c   24 hours ago   249MB\n\n# 新增短版本\ndocker tag 7ec084df520c tomcat:8.5.73\n# 删除长版本\ndocker rmi tomcat:8.5.73-jre8-temurin-focal\n\n# 查询查看镜像\ndocker images tomcat\n\n# 返回结果\nREPOSITORY    TAG                         IMAGE ID       CREATED        SIZE\ntomcat        8.5.73                      7ec084df520c   24 hours ago   249MB\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 启动使用\n\nTomcat 的使用相比较其他还是非常简单的，Redis 启动后，进入容器的默认目录是 /usr/local/tomcat，这里提供几个启动命令：\n\n * 命名后台启动\n   \n   docker run -d --name tomcat01 -p 8080:8080 tomcat:8.5.73\n   \n   \n   1\n   \n\n * webapps 启动：创建 webapps 的数据卷，在宿主机的挂载目录部署项目，就会同步到容器的 webapps 目录下\n   \n   docker run -d --name tomcat01 -p 8080:8080 -v tomcat01-webapps:/usr/local/tomcat/webapps tomcat:8.5.73\n   \n   \n   1\n   \n\n * 配置文件启动：创建配置文件的数据卷，在宿主机的挂载目录修改配置文件，就会同步到容器的配置文件中\n   \n   docker run -d --name tomcat01 -p 8080:8080 -v tomcat01-webapps:/usr/local/tomcat/webapps -v tomcat01-conf:/usr/local/tomcat/conf tomcat:8.5.73\n   \n   \n   1\n   \n   \n   tomcat01-webapps 和 tomcat01-conf 根据需求创建数据卷名。\n\n我给的启动命令都是 默认目录挂载 方式，不建议使用具体目录挂载方式，一：位置不统一，不好维护。二：创建时（空目录）会把 Tomcat 容器的挂载目录覆盖掉（清空）。\n\n以第二个启动命令为例子，我们先启动 Tomcat 容器，并进入该容器内部：\n\n# 启动容器\ndocker run -d --name tomcat01 -p 8080:8080 -v tomcat01-webapps:/usr/local/tomcat/webapps tomcat:8.5.73\n\n# 进入容器内部\ndocker exec -it tomcat01 bash\n\n\n1\n2\n3\n4\n5\n\n\n进入 webapps 目录，查看内容：\n\nroot@038e7c8efee3:/usr/local/tomcat# cd webapps\nroot@038e7c8efee3:/usr/local/tomcat/webapps# ls\n\n# 内容为空\n\n\n1\n2\n3\n4\n\n\n会发现为空，这是因为 Tomcat 官方把所有的初始化文件放到了 webapps.dist 目录下，我们去看看：\n\nroot@038e7c8efee3:/usr/local/tomcat/webapps# cd ../webapps.dist\nroot@038e7c8efee3:/usr/local/tomcat/webapps.dist# ls\n\n# 返回结果\ndocs  examples  host-manager  manager  ROOT\n\n\n1\n2\n3\n4\n5\n\n\n所以我们需要把 webapps.dist 的内容拷贝到 webapps 目录中，为什么不删除 webapps 目录然后把 webapps.dist 重命名呢？因为容器运行期间无法删除文件，而不运行我们无法进入容器内部，所以只能一个一个拷贝过去\n\nroot@038e7c8efee3:/usr/local/tomcat/webapps.dist# cp -r docs ../webapps\nroot@038e7c8efee3:/usr/local/tomcat/webapps.dist# cp -r examples/ ../webapps\nroot@038e7c8efee3:/usr/local/tomcat/webapps.dist# cp -r host-manager/ ../webapps\nroot@038e7c8efee3:/usr/local/tomcat/webapps.dist# cp -r manager/ ../webapps\nroot@038e7c8efee3:/usr/local/tomcat/webapps.dist# cp -r ROOT/ ../webapp\n\n\n1\n2\n3\n4\n5\n\n\n此时我们进入默认目录 /var/lib/docker/volumes/tomcat01-webapps/_data 下查看拷贝的内容是否同步过来：\n\n# 进入默认目录并查看内容\ncd /var/lib/docker/volumes/tomcat01-webapps/_data\nls\n\n# 返回结果\ndocs  examples  host-manager  manager  ROOT\n\n\n1\n2\n3\n4\n5\n6\n\n\n虽然同步过来了，但是这样子会很累对吧，而且重新启动一个新的 Tomcat 容器，必须要重新执行 5 个拷贝操作，我们可以利用数据卷来同步数据。\n\n\n# 挂载特性\n\n可以利用数据卷特性：\n\n * 默认目录挂载：\n   * 当宿主机挂载目录已经存在时，双方挂载完成后，宿主机挂载目录覆盖容器挂载目录\n   * 当宿主机挂载目录不存在时，双方挂载完成后，容器挂载目录覆盖宿主机挂载目录\n * 具体目录挂载\n   * 当宿主机挂载目录无论存不存在，双方挂载完成后，宿主机挂载目录都会覆盖容器挂载目录\n\n所以我们有两种方式：\n\n首先我们手动拷贝一份 tomcat01 的宿主机挂载目录，该目录已经将数据同步过来，目录有 webapps 的内容了\n\ncd /var/lib/docker/volumes\n\n# 拷贝一份 tomcat01 的宿主机挂载目录，新的目录名叫 tomcat02-webapps\ncp -r tomcat01-webapps tomcat02-webapps\n\n\n1\n2\n3\n4\n\n\n> 方式 1：默认目录挂载\n\n启动第二个 Tomcat 容器，利用 默认目录挂载 的第一个特性进行与容器的挂载\n\ndocker run -d --name tomcat02 -p 8081:8080 -v tomcat02-webapps:/usr/local/tomcat/webapps tomcat:8.5.73\n\n\n1\n\n\n# 进入 tomcat02 容器\ndocker exec -it tomcat02  bash\n\n# 进入 webapps 目录，并查看内容\nroot@50edd2a86a8d:/usr/local/tomcat# cd webapps\nroot@50edd2a86a8d:/usr/local/tomcat/webapps# ls\n\n# 返回结果\ndocs  examples  host-manager  manager  ROOT\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n说明同步成功。\n\n> 方式 2：具体目录挂载\n\n启动第三个 Tomcat 容器，利用 具体目录挂载 方式进行与容器的挂载（缺点：指定到 _data 目录，因为该方式是从指定的目录覆盖容器的目录）\n\ndocker run -d --name tomcat03 -p 8082:8080 -v /var/lib/docker/volumes/tomcat02-webapps/_data:/usr/local/tomcat/webapps tomcat:8.5.73\n\n\n1\n\n\n进入容器看看，是否同步过来了\n\n# 进入 tomcat03 容器\ndocker exec -it tomcat03 bash\n\n# 进入 webapps 目录，并查看内容\nroot@ba7961226856:/usr/local/tomcat# cd webapps\nroot@ba7961226856:/usr/local/tomcat/webapps# ls\n\n# 返回结果\ndocs  examples  host-manager  manager  ROOT\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n说明同步成功。\n\n> 总结：\n\n推荐方式 1，因为方式 2 必须指定到 _data 目录，不灵活。而使用方式 1，必须先确保宿主机存在该目录，并且目录里有想要的内容。\n\nTomcat 也有配置文件，里面可以修改 8080 端口，上面的第三个启动命令就是给配置文件进行数据卷挂载，步骤和 webapps 的两个例子一样，这里不演示了。\n\n值得注意的是：修改完配置文件的端口后，需要重新 run 一个新的 Tomcat 容器，然后该容器和宿主机修改后的配置文件目录挂载，才能真正实现端口的修改，因为第一次端口映射在 run 时是 8080:8080，无法修改为 8080:XXXX(修改的端口)，需要重新 run 才行，而 run 出来的配置文件默认端口还是 8080，所以需要利用数据卷特性，让宿主机的配置文件覆盖容器的 8080 端口配置文件。\n\n\n# 相关指令\n\n进入 Tomcat 容器\n\ndocker exec -it <容器名或 id> bash\n\n\n1\n\n\n查看 Tomcat 容器的日志\n\n# 加 -f 代表实时监听日志动态\ndocker logs [-f] <容器名或 id>\n\n\n1\n2\n\n\n\n# MySQL安装\n\nMySQL 版本网址：https://registry.hub.docker.com/_/mysql\n\n\n# 安装启动\n\n * 拉取镜像到本地\n   \n   docker pull mysql:tag   # tag 默认不加是最新版\n   \n   docker pull mysql:8.0.27   # 目前最新版本为 8.0.27\n   \n   \n   1\n   2\n   3\n   \n\n * 简单运行 MySQL 服务，将需要挂载的目录拷贝出来\n   \n   docker run -d --name mysql -p 3307:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql:8.0.27\n   \n   \n   1\n   \n   \n   密码自行修改。使用 3307 是因为宿主机可能已经安装了 MySQL，它占用了 3306 端口。\n   \n   拷贝挂载的目录：\n   \n   # 先创建挂载目录\n   mkdir -p /docker/mysql\n   \n   # MySQL的相关文件同步到挂载目录\n   docker cp mysql:/var/lib/mysql /docker/mysql/data\n   docker cp mysql:/etc/mysql/conf.d /docker/mysql/conf\n   docker cp mysql:/var/log /docker/mysql/log\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   \n   \n   为什么要拷贝出来呢？因为一旦挂载成功，宿主机的挂载目录会覆盖容器的目录，所以我们确保宿主机的挂载目录不能为空，必须要有原来容器目录的文件。\n\n * 宿主机与容器实现挂载，保证数据安全，对应上方拷贝出来的目录\n   \n   docker run -d \\\n       --name mysql \\\n       --restart always \\\n       -p 3307:3306 \\\n       -e MYSQL_ROOT_PASSWORD=123456 \\\n       -v /docker/mysql/data:/var/lib/mysql \\\n       -v /docker/mysql/conf:/etc/mysql/conf.d \\\n       -v /docker/mysql/log:/var/log \\\n       mysql:8.0.27\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   \n   \n   docker run -d \\\n       --name mysql \\\t\t\t\t\t\t\t\t# 容器名为 mysql\n       --restart always \\\t\t\t\t\t\t\t# Docker 重启，容器也重启\n       -p 3307:3306 \\\t\t\t\t\t\t\t\t# 将容器内部 3306 端口映射到 主机的 3306 端口\n       -e MYSQL_ROOT_PASSWORD=123456 \\\t\t\t\t# 设置登陆密码为 123456，登陆用户为 root\n       -v /docker/mysql/data:/var/lib/mysql \\\t\t# 将容器的「数据」挂载到主机的相应文件夹\n       -v /docker/mysql/conf:/etc/mysql/conf.d \\   # 将容器的「自定义配置文件夹」挂载到主机的相应文件夹\n       -v /docker/mysql/log:/var/log \\\t\t\t\t# 将容器的「日志文件夹」挂载到主机的相应位置\n       mysql:8.0.27\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   \n   \n   宿主机的挂载目录、conf.d 目录、data 数据目录、日志目录根据需求决定，包括密码。\n   \n   这里说明一下：主配置文件名叫 my.cnf，位置在 /etc/mysql，但是不建议直接操作 my.cnf 主配置文件，官方也是如此，所以官方提供了 conf.d 目录，只要在 conf.d 目录下创建 xx.cnf 配置文件，那么该配置文件自动被引入 my.cnf 主配置文件，避免直接操作 my.cnf 引起安全问题。\n   \n   my.cnf 文件里有这么一句代码：\n   \n   includedir /etc/mysql/conf.d/\n   \n   \n   1\n   \n   \n   可以看出，my.cnf 会自动读取该目录下的所有 .cnf 配置文件。\n   \n   笔记\n   \n   确保简单启动的密码和挂载启动的保持一致，因为启动后，密码保存在 /var/lib/mysql 目录下，而挂载的时候，宿主机的该目录会覆盖容器的目录，导致密码是简单启动的密码。所以确保两种启动方式密码保持一致。\n   \n   2021-12-11 @村长\n\n * 配置 UTF-8 编码\n   \n   进入宿主机的配置文件挂载目录：/docker/mysql/conf，有一个 mysql.cnf 配置文件，编辑它\n   \n   cd /docker/mysql/conf\n   vim mysql.cnf\n   \n   \n   1\n   2\n   \n   \n   添加如下内容（如果文件有 [mysql]，必须先删除掉）：\n   \n   [mysqld]\n   character-set-server=utf8\n   collation-server=utf8_general_ci\n   \n   [client]\n   default-character-set=utf8\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   \n   \n   \n\n * 进入 MySQL 容器，配置 UTF-8 编码\n   \n   # 语法\n   docker exec -it 容器名 | 容器id bash\n   \n   docker exec -it mysql bash\n   \n   \n   1\n   2\n   3\n   4\n   \n   \n   进入容器后，登录 MySQL\n   \n   mysql -uroot -p123456\n   \n   \n   1\n   \n   \n   查看数据库的编码是否是 UTF-8\n   \n   SHOW VARIABLES LIKE \'%char%\';\n   \n   \n   1\n   \n   \n   如图则代表配置成功：\n   \n   \n   \n   国际上的 UTF-8，在 MySQL 中，对标的是 uft8mb4。\n\n * 外部查看 MySQL 日志（可选）\n   \n   docker logs 容器id | 容器名\n   \n   \n   1\n   \n\n\n# 其他命令\n\n * 将 MySQL 数据库备份为 sql 文件\n   \n   * 导出全部数据库的数据为 sql 文件\n     \n     docker exec 容器名 | 容器 id bash -c \'exec mysqldump --all-databases -uroot -p"$MYSQL_ROOT_PASSWORD"\' > /opt/all-database.sql \n     \n     \n     1\n     \n     \n     用户名要根据需求替换、/opt/all-database 是导出文件的路径，需要根据需求修改。密码不需要修改，它会自动获取登录的密码。\n   \n   * 导出指定的数据库数据的 sql 文件\n     \n     docker exec 容器名 | 容器 bash -c \'exec mysqldump --databases 库名 -uroot -p"$MYSQL_ROOT_PASSWORD"\' > /opt/one-database.sql\n     \n     \n     1\n     \n     \n     同理根据需求修改。\n   \n   * 导出指定的数据库，但是不要数据\n     \n     docker exec 容器名 | 容器 bash -c \'exec mysqldump --no-data --databases 库名 -uroot -p"$MYSQL_ROOT_PASSWORD"\' > /opt/one-database.sql\n     \n     \n     1\n     \n\n * 执行 sql 文件到 MySQL 中\n   \n   docker exec 容器名 | 容器id bash -c \'exec mysql -uroot -p"$MYSQL_ROOT_PASSWORD"\' < /opt/xxx.sql\n   \n   \n   1\n   \n   \n   /opt/xxx.sql 是 sql 文件的路径。\n\n\n# Redis安装\n\n\n# 安装\n\nRedis 版本网址：https://registry.hub.docker.com/_/redis\n\nRedis 的安装还是比较简单的，这里安装 6.62 版本\n\ndocker pull redis:6.2.6\n\n# 查看 docker 容器\ndocker images\n\n\n1\n2\n3\n4\n\n\n\n# 启动\n\nRedis 启动后，进入容器的默认目录是 /data\n\n启动指令：\n\n * 简单的启动，也是最快速的个人使用启动：\n   \n   docker run -d --name redis -p 6379:6379 redis:6.2.6\n   \n   \n   1\n   \n\n * AOP 持久化启动\n   \n   指定持久化的 .aop 文件路径，宿主机的文件路径根据需求存放，容器的文件路径默认在 /data\n   \n   docker run -d --name redis -p 6379:6379 -v redis_data:/data redis:6.2.6 redis-server --appendonly yes\n   \n   \n   1\n   \n   \n   容器的 /data 是 AOP 文件的默认路径，redis_data 根据需求修改，是宿主机的挂载目录，而 redis-server --appendonly yes 是必须的，这个命令会覆盖默认的命令，默认的命令是关闭持久化。\n\n * 自定义配置文件启动：指定配置文件的路径和容器的 /usr/local/etc/redis 挂载，一旦挂载后，容器的该目录获得配置文件，然后通过 redis-server /usr/local/etc/redis/redis.conf 启动该配置文件\n   \n   docker run -d --name redis -p 6379:6379 -v /opt/redis_conf:/usr/local/etc/redis redis:6.2.6 redis-server /usr/local/etc/redis/redis.conf\n   \n   \n   1\n   \n   \n   /opt/redis_conf 是在宿主机的配置文件路径，根据需求修改。\n   \n   > 注意：Redis 容器内没有 redis.conf 文件，启动的配置信息都是默认的。我们需要自己准备好一份 redis.conf 文件，然后通过数据卷传进容器内\n   \n   如何准备一份 redis.conf 文件呢？\n   \n   * 去官网下载对应的 Windows 版本，然后拷贝 redis.conf 到 Linux 下，再启动配置，这样很麻烦对吧\n   \n   * 直接 Linux 下创建一个 redis.conf 文件，虽然不如原生的全面，但是我们只需要加入自己的一些配置即可，其他配置 Redis 自动使用默认的\n     \n     比如：\n     \n     # 根据需求指定创建路径\n     cd /opt\n     vim redis_conf\n     \n     # 在 redis.conf 加入如下内容\n     # 限制能访问 redis 的地址，根据需求修改\n     bind 0.0.0.0\n     \n     # 默认是 yes，开启保护模式\n     protected-mode no\n     \n     # 配置 redis 连接密码，可选\n     requirepass 123456\n     \n     # 以守护进程方式启动，可后台启动\n     daemonize no\n     \n     # 更改本地 redis 数据库存放文件夹（可选）\n     dir ./\n     \n     # AOP 持久化\n     appendonly yes\n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     8\n     9\n     10\n     11\n     12\n     13\n     14\n     15\n     16\n     17\n     18\n     19\n     20\n     21\n     22\n     \n     redis.conf 常用的配置\n     \n      * bind 0.0.0\n        \n        限制 redis 只能本地访问，根据需求修改\n     \n      * protected-mode no\n        \n        默认是 yes，开启保护模式，限制为本地访问\n     \n      * requirepass 123456\n        \n        配置redis连接密码，默认是注释的\n     \n      * daemonize no\n        \n        默认 no，改为 yes 代表以守护进程方式启动，可后台运行，除非kill进程（可选），改为 yes 会使配置文件方式启动 redis 失败\n     \n      * dir ./\n        \n        更改本地 redis 数据库存放文件夹（可选）\n     \n      * appendonly yes\n        \n        redis 持久化（开启了这个，redis 就不会每次重启时自动清空了）\n     \n     如果不加入 appendonly yes，可以利用 AOP 持久化启动来指定 appendonly yes 启动。\n\n\n# 其他\n\n启动后进入 redis 容器\n\ndocker exec -it redis bash\n\n\n1\n\n\n查看 redis 的日志\n\n# 加 -f 代表实时监听日志动态\ndocker logs [-f] redis\n\n\n1\n2\n\n\n输入 redis-cli 连接 redis，如果是连接其他服务器的 redis，则需要加参数\n\nredis-cli -h IP地址 -p 6379\n\n\n1\n\n\n\n# ElasticSearch安装\n\n\n# 安装\n\nElasticSearch 版本网址：https://registry.hub.docker.com/_/elasticsearch\n\n这里下载的版本是 7.14.2\n\ndocker pull elasticsearch:7.14.2\n\n\n1\n\n\n\n# 配置\n\n如果启动报错\n\nmax virtual memory areas vm.max_map_count [65530] is too low，increase to at least [262144]\n\n\n1\n\n\n则需要进行配置，没有出现错误可以跳过\n\n# 修改配置 sysctl.conf\nvim /etc/stsctl.conf\n\n# 加入配置信息\nvm.max_map_count=262144\n\n# 启用配置\nsysctl -p\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 启动\n\n三种启动方式：\n\n * 简单启动\n   \n   docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 elasticsearch:7.14.2\n   \n   \n   1\n   \n   \n   如果报错，请看 配置 进行解决\n   \n   浏览器访问的是 9200 端口\n\n * 持久化和配置文件启动\n   \n   ES 中所有的数据都在容器中的 /usr/share/elasticsearch/data 目录，配置文件在 /usr/share/elasticsearch/config，所以需要挂载出来\n   \n   docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -v es_data:/usr/share/elasticsearch/data -v es_config:/usr/share/elasticsearch/config elasticsearch:7.14.2\n   \n   \n   1\n   \n   \n   挂载成功后，哪怕容器被删除了，数据还是会存在宿主机的 /.../es_data 目录下\n\n * ik 分词器启动\n   \n   > 方式 1：\n   \n   首先下载好 ik 分词器，版本要和 ES 版本一致，放到 Linux 系统中，我们知道，ES 的插件目录是 /usr/share/elasticsearch/plugins 下，所以需要挂载出来\n   \n   docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -v es_data:/usr/share/elasticsearch/data -v es_config:/usr/share/elasticsearch/config -v es_plugins:/usr/share/elasticsearch/plugins elasticsearch:7.14.2\n   \n   \n   1\n   \n   \n   此时的 es_plugins 目录下为空，我们把下载好的 ik 分词器放到该目录下，然后重启 ES 即可\n   \n   cp <ik 分词器> /var/lib/docker/volumes/es_plugins/_data\n   \n   # 重启 es\n   docker restart elasticsearch\n   \n   \n   1\n   2\n   3\n   4\n   \n   \n   > 方式 2：\n   \n   先创建数据卷，把 ik 分词器放到数据卷里\n   \n   docker volume create es_plugins\n   \n   cp <ik 分词器> /var/lib/docker/volumes/es_plugins/_data\n   \n   \n   1\n   2\n   3\n   \n   \n   再启动容器进行挂载\n   \n   docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -v es_data:/usr/share/elasticsearch/data -v es_config:/usr/share/elasticsearch/config -v es_plugins:/usr/share/elasticsearch/plugins elasticsearch:7.14.2\n   \n   \n   1\n   \n\n\n# Kibana安装\n\nKibana 版本网址：https://registry.hub.docker.com/_/kibana\n\n下载 Kibaba 镜像，版本要和 ElasticSearch 一致。\n\ndocker pull kibana:7.14.2\n\n\n1\n\n\n启动\n\n * 简单启动\n   \n   此时没有指定连接 ES\n   \n   docker run -d --name kibana -p 5601:5601 kibaba:7.14.2\n   \n   \n   1\n   \n\n * 连接 ES 启动\n   \n   docker run -d --name kibana -p 5601:5601 -e ELASTICSEARCH_URL=http://IP地址:9200 kibaba:7.14.2\n   \n   \n   1\n   \n\n * 先简单启动，后在配置文件再连接 ES，重启生效\n   \n   首先知道配置文件的路径是 /usr/share/kibana/config，将它挂载出来\n   \n   docker run -d --name kibana -p 5601:5601 -v kibana_conf:/usr/share/kibana/config kibaba:7.14.2\n   \n   \n   1\n   \n   \n   启动后进入宿主机的 kibana_conf 目录或者 容器的 /usr/share/kibana/config 目录，这里演示前者\n   \n   cd /var/lib/docker/volumes/kibana_conf/_data\n   \n   vim kibana.yml\n   \n   \n   1\n   2\n   3\n   \n   \n   修改为 ES 的 IP 地址\n   \n   \n\n\n# 可视化工具Portainer\n\n\n# 安装启动\n\n官方安装地址：https://www.portainer.io/installation\n\n# 下载 portainer\ndocker pull portainer/portainer\n\n# 创建 portainer 的数据卷\ndocker volume create portainer_data\n\n# 启动 portainer，指定映射端口等信息，--restart=always 代表该容器被关闭了也会自启动\ndocker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer\n\n# 可以查看容器是否成功启动\ndocker ps\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# docker-compose安装启动\n\n如果没学到 docker-compose 相关内容，可以忽略，或者 我的传送门。\n\n在 docker-compose.yml 文件里添加入内容：\n\nversion "3.0"\n\nservices:\n  portainer:\n    image: portainer/portainer\n    container_name: portainer\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - portainer_data:/data\n    networks:\n      - kele\n    ports:\n      - "8000:8000"\n      - "9000:9000"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n其中需要修改的是第 11 行网桥名，根据需求自行填写，其他尽量不变，如果端口被占用，可以修改。\n\n\n# 登录和注册\n\n> 用浏览器访问：http://localhost:9000 或者 http://IP地址:9000\n> \n> 第一次打开界面要注册用户名和密码，密码要求 8 位以上，如：admin123',normalizedContent:' * tomcat安装使用\n   * 版本选择\n   * 安装修改\n   * 启动使用\n   * 挂载特性\n   * 相关指令\n * mysql安装\n   * 安装启动\n   * 其他命令\n * redis安装\n   * 安装\n   * 启动\n   * 其他\n * elasticsearch安装\n   * 安装\n   * 配置\n   * 启动\n * kibana安装\n * 可视化工具portainer\n   * 安装启动\n   * docker-compose安装启动\n   * 登录和注册\n\n\n\n\n# tomcat安装使用\n\ntomcat 版本网址：https://registry.hub.docker.com/_/tomcat\n\n\n# 版本选择\n\ntomcat 有很多的版本分支，一个版本可能有多个分支，如 8-jre 代表 tomcat 8 内置 jre8 的版本、 8-jdk8 代表 tomcat 8 内置 jdk8 的版本等等。所以根据需求进行版本选择。（jdk 包括了 jre，但是相对而言比较大）\n\n\n\n\n# 安装修改\n\n这里选择的是 8.5.73-jre8-temurin-focal 版本，先下载：\n\ndocker pull tomcat:8.5.73-jre8-temurin-focal\n\n\n1\n\n\n下载的版本名太长，我们可以创建短的版本，然后删除掉长的版本\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n \n\n\n# 执行命令\ndocker images tomcat\n\n# 返回结果\nrepository    tag                         image id       created        size\ntomcat        8.5.73-jre8-temurin-focal   7ec084df520c   24 hours ago   249mb\n\n# 新增短版本\ndocker tag 7ec084df520c tomcat:8.5.73\n# 删除长版本\ndocker rmi tomcat:8.5.73-jre8-temurin-focal\n\n# 查询查看镜像\ndocker images tomcat\n\n# 返回结果\nrepository    tag                         image id       created        size\ntomcat        8.5.73                      7ec084df520c   24 hours ago   249mb\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 启动使用\n\ntomcat 的使用相比较其他还是非常简单的，redis 启动后，进入容器的默认目录是 /usr/local/tomcat，这里提供几个启动命令：\n\n * 命名后台启动\n   \n   docker run -d --name tomcat01 -p 8080:8080 tomcat:8.5.73\n   \n   \n   1\n   \n\n * webapps 启动：创建 webapps 的数据卷，在宿主机的挂载目录部署项目，就会同步到容器的 webapps 目录下\n   \n   docker run -d --name tomcat01 -p 8080:8080 -v tomcat01-webapps:/usr/local/tomcat/webapps tomcat:8.5.73\n   \n   \n   1\n   \n\n * 配置文件启动：创建配置文件的数据卷，在宿主机的挂载目录修改配置文件，就会同步到容器的配置文件中\n   \n   docker run -d --name tomcat01 -p 8080:8080 -v tomcat01-webapps:/usr/local/tomcat/webapps -v tomcat01-conf:/usr/local/tomcat/conf tomcat:8.5.73\n   \n   \n   1\n   \n   \n   tomcat01-webapps 和 tomcat01-conf 根据需求创建数据卷名。\n\n我给的启动命令都是 默认目录挂载 方式，不建议使用具体目录挂载方式，一：位置不统一，不好维护。二：创建时（空目录）会把 tomcat 容器的挂载目录覆盖掉（清空）。\n\n以第二个启动命令为例子，我们先启动 tomcat 容器，并进入该容器内部：\n\n# 启动容器\ndocker run -d --name tomcat01 -p 8080:8080 -v tomcat01-webapps:/usr/local/tomcat/webapps tomcat:8.5.73\n\n# 进入容器内部\ndocker exec -it tomcat01 bash\n\n\n1\n2\n3\n4\n5\n\n\n进入 webapps 目录，查看内容：\n\nroot@038e7c8efee3:/usr/local/tomcat# cd webapps\nroot@038e7c8efee3:/usr/local/tomcat/webapps# ls\n\n# 内容为空\n\n\n1\n2\n3\n4\n\n\n会发现为空，这是因为 tomcat 官方把所有的初始化文件放到了 webapps.dist 目录下，我们去看看：\n\nroot@038e7c8efee3:/usr/local/tomcat/webapps# cd ../webapps.dist\nroot@038e7c8efee3:/usr/local/tomcat/webapps.dist# ls\n\n# 返回结果\ndocs  examples  host-manager  manager  root\n\n\n1\n2\n3\n4\n5\n\n\n所以我们需要把 webapps.dist 的内容拷贝到 webapps 目录中，为什么不删除 webapps 目录然后把 webapps.dist 重命名呢？因为容器运行期间无法删除文件，而不运行我们无法进入容器内部，所以只能一个一个拷贝过去\n\nroot@038e7c8efee3:/usr/local/tomcat/webapps.dist# cp -r docs ../webapps\nroot@038e7c8efee3:/usr/local/tomcat/webapps.dist# cp -r examples/ ../webapps\nroot@038e7c8efee3:/usr/local/tomcat/webapps.dist# cp -r host-manager/ ../webapps\nroot@038e7c8efee3:/usr/local/tomcat/webapps.dist# cp -r manager/ ../webapps\nroot@038e7c8efee3:/usr/local/tomcat/webapps.dist# cp -r root/ ../webapp\n\n\n1\n2\n3\n4\n5\n\n\n此时我们进入默认目录 /var/lib/docker/volumes/tomcat01-webapps/_data 下查看拷贝的内容是否同步过来：\n\n# 进入默认目录并查看内容\ncd /var/lib/docker/volumes/tomcat01-webapps/_data\nls\n\n# 返回结果\ndocs  examples  host-manager  manager  root\n\n\n1\n2\n3\n4\n5\n6\n\n\n虽然同步过来了，但是这样子会很累对吧，而且重新启动一个新的 tomcat 容器，必须要重新执行 5 个拷贝操作，我们可以利用数据卷来同步数据。\n\n\n# 挂载特性\n\n可以利用数据卷特性：\n\n * 默认目录挂载：\n   * 当宿主机挂载目录已经存在时，双方挂载完成后，宿主机挂载目录覆盖容器挂载目录\n   * 当宿主机挂载目录不存在时，双方挂载完成后，容器挂载目录覆盖宿主机挂载目录\n * 具体目录挂载\n   * 当宿主机挂载目录无论存不存在，双方挂载完成后，宿主机挂载目录都会覆盖容器挂载目录\n\n所以我们有两种方式：\n\n首先我们手动拷贝一份 tomcat01 的宿主机挂载目录，该目录已经将数据同步过来，目录有 webapps 的内容了\n\ncd /var/lib/docker/volumes\n\n# 拷贝一份 tomcat01 的宿主机挂载目录，新的目录名叫 tomcat02-webapps\ncp -r tomcat01-webapps tomcat02-webapps\n\n\n1\n2\n3\n4\n\n\n> 方式 1：默认目录挂载\n\n启动第二个 tomcat 容器，利用 默认目录挂载 的第一个特性进行与容器的挂载\n\ndocker run -d --name tomcat02 -p 8081:8080 -v tomcat02-webapps:/usr/local/tomcat/webapps tomcat:8.5.73\n\n\n1\n\n\n# 进入 tomcat02 容器\ndocker exec -it tomcat02  bash\n\n# 进入 webapps 目录，并查看内容\nroot@50edd2a86a8d:/usr/local/tomcat# cd webapps\nroot@50edd2a86a8d:/usr/local/tomcat/webapps# ls\n\n# 返回结果\ndocs  examples  host-manager  manager  root\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n说明同步成功。\n\n> 方式 2：具体目录挂载\n\n启动第三个 tomcat 容器，利用 具体目录挂载 方式进行与容器的挂载（缺点：指定到 _data 目录，因为该方式是从指定的目录覆盖容器的目录）\n\ndocker run -d --name tomcat03 -p 8082:8080 -v /var/lib/docker/volumes/tomcat02-webapps/_data:/usr/local/tomcat/webapps tomcat:8.5.73\n\n\n1\n\n\n进入容器看看，是否同步过来了\n\n# 进入 tomcat03 容器\ndocker exec -it tomcat03 bash\n\n# 进入 webapps 目录，并查看内容\nroot@ba7961226856:/usr/local/tomcat# cd webapps\nroot@ba7961226856:/usr/local/tomcat/webapps# ls\n\n# 返回结果\ndocs  examples  host-manager  manager  root\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n说明同步成功。\n\n> 总结：\n\n推荐方式 1，因为方式 2 必须指定到 _data 目录，不灵活。而使用方式 1，必须先确保宿主机存在该目录，并且目录里有想要的内容。\n\ntomcat 也有配置文件，里面可以修改 8080 端口，上面的第三个启动命令就是给配置文件进行数据卷挂载，步骤和 webapps 的两个例子一样，这里不演示了。\n\n值得注意的是：修改完配置文件的端口后，需要重新 run 一个新的 tomcat 容器，然后该容器和宿主机修改后的配置文件目录挂载，才能真正实现端口的修改，因为第一次端口映射在 run 时是 8080:8080，无法修改为 8080:xxxx(修改的端口)，需要重新 run 才行，而 run 出来的配置文件默认端口还是 8080，所以需要利用数据卷特性，让宿主机的配置文件覆盖容器的 8080 端口配置文件。\n\n\n# 相关指令\n\n进入 tomcat 容器\n\ndocker exec -it <容器名或 id> bash\n\n\n1\n\n\n查看 tomcat 容器的日志\n\n# 加 -f 代表实时监听日志动态\ndocker logs [-f] <容器名或 id>\n\n\n1\n2\n\n\n\n# mysql安装\n\nmysql 版本网址：https://registry.hub.docker.com/_/mysql\n\n\n# 安装启动\n\n * 拉取镜像到本地\n   \n   docker pull mysql:tag   # tag 默认不加是最新版\n   \n   docker pull mysql:8.0.27   # 目前最新版本为 8.0.27\n   \n   \n   1\n   2\n   3\n   \n\n * 简单运行 mysql 服务，将需要挂载的目录拷贝出来\n   \n   docker run -d --name mysql -p 3307:3306 -e mysql_root_password=123456 mysql:8.0.27\n   \n   \n   1\n   \n   \n   密码自行修改。使用 3307 是因为宿主机可能已经安装了 mysql，它占用了 3306 端口。\n   \n   拷贝挂载的目录：\n   \n   # 先创建挂载目录\n   mkdir -p /docker/mysql\n   \n   # mysql的相关文件同步到挂载目录\n   docker cp mysql:/var/lib/mysql /docker/mysql/data\n   docker cp mysql:/etc/mysql/conf.d /docker/mysql/conf\n   docker cp mysql:/var/log /docker/mysql/log\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   \n   \n   为什么要拷贝出来呢？因为一旦挂载成功，宿主机的挂载目录会覆盖容器的目录，所以我们确保宿主机的挂载目录不能为空，必须要有原来容器目录的文件。\n\n * 宿主机与容器实现挂载，保证数据安全，对应上方拷贝出来的目录\n   \n   docker run -d \\\n       --name mysql \\\n       --restart always \\\n       -p 3307:3306 \\\n       -e mysql_root_password=123456 \\\n       -v /docker/mysql/data:/var/lib/mysql \\\n       -v /docker/mysql/conf:/etc/mysql/conf.d \\\n       -v /docker/mysql/log:/var/log \\\n       mysql:8.0.27\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   \n   \n   docker run -d \\\n       --name mysql \\\t\t\t\t\t\t\t\t# 容器名为 mysql\n       --restart always \\\t\t\t\t\t\t\t# docker 重启，容器也重启\n       -p 3307:3306 \\\t\t\t\t\t\t\t\t# 将容器内部 3306 端口映射到 主机的 3306 端口\n       -e mysql_root_password=123456 \\\t\t\t\t# 设置登陆密码为 123456，登陆用户为 root\n       -v /docker/mysql/data:/var/lib/mysql \\\t\t# 将容器的「数据」挂载到主机的相应文件夹\n       -v /docker/mysql/conf:/etc/mysql/conf.d \\   # 将容器的「自定义配置文件夹」挂载到主机的相应文件夹\n       -v /docker/mysql/log:/var/log \\\t\t\t\t# 将容器的「日志文件夹」挂载到主机的相应位置\n       mysql:8.0.27\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   \n   \n   宿主机的挂载目录、conf.d 目录、data 数据目录、日志目录根据需求决定，包括密码。\n   \n   这里说明一下：主配置文件名叫 my.cnf，位置在 /etc/mysql，但是不建议直接操作 my.cnf 主配置文件，官方也是如此，所以官方提供了 conf.d 目录，只要在 conf.d 目录下创建 xx.cnf 配置文件，那么该配置文件自动被引入 my.cnf 主配置文件，避免直接操作 my.cnf 引起安全问题。\n   \n   my.cnf 文件里有这么一句代码：\n   \n   includedir /etc/mysql/conf.d/\n   \n   \n   1\n   \n   \n   可以看出，my.cnf 会自动读取该目录下的所有 .cnf 配置文件。\n   \n   笔记\n   \n   确保简单启动的密码和挂载启动的保持一致，因为启动后，密码保存在 /var/lib/mysql 目录下，而挂载的时候，宿主机的该目录会覆盖容器的目录，导致密码是简单启动的密码。所以确保两种启动方式密码保持一致。\n   \n   2021-12-11 @村长\n\n * 配置 utf-8 编码\n   \n   进入宿主机的配置文件挂载目录：/docker/mysql/conf，有一个 mysql.cnf 配置文件，编辑它\n   \n   cd /docker/mysql/conf\n   vim mysql.cnf\n   \n   \n   1\n   2\n   \n   \n   添加如下内容（如果文件有 [mysql]，必须先删除掉）：\n   \n   [mysqld]\n   character-set-server=utf8\n   collation-server=utf8_general_ci\n   \n   [client]\n   default-character-set=utf8\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   \n   \n   \n\n * 进入 mysql 容器，配置 utf-8 编码\n   \n   # 语法\n   docker exec -it 容器名 | 容器id bash\n   \n   docker exec -it mysql bash\n   \n   \n   1\n   2\n   3\n   4\n   \n   \n   进入容器后，登录 mysql\n   \n   mysql -uroot -p123456\n   \n   \n   1\n   \n   \n   查看数据库的编码是否是 utf-8\n   \n   show variables like \'%char%\';\n   \n   \n   1\n   \n   \n   如图则代表配置成功：\n   \n   \n   \n   国际上的 utf-8，在 mysql 中，对标的是 uft8mb4。\n\n * 外部查看 mysql 日志（可选）\n   \n   docker logs 容器id | 容器名\n   \n   \n   1\n   \n\n\n# 其他命令\n\n * 将 mysql 数据库备份为 sql 文件\n   \n   * 导出全部数据库的数据为 sql 文件\n     \n     docker exec 容器名 | 容器 id bash -c \'exec mysqldump --all-databases -uroot -p"$mysql_root_password"\' > /opt/all-database.sql \n     \n     \n     1\n     \n     \n     用户名要根据需求替换、/opt/all-database 是导出文件的路径，需要根据需求修改。密码不需要修改，它会自动获取登录的密码。\n   \n   * 导出指定的数据库数据的 sql 文件\n     \n     docker exec 容器名 | 容器 bash -c \'exec mysqldump --databases 库名 -uroot -p"$mysql_root_password"\' > /opt/one-database.sql\n     \n     \n     1\n     \n     \n     同理根据需求修改。\n   \n   * 导出指定的数据库，但是不要数据\n     \n     docker exec 容器名 | 容器 bash -c \'exec mysqldump --no-data --databases 库名 -uroot -p"$mysql_root_password"\' > /opt/one-database.sql\n     \n     \n     1\n     \n\n * 执行 sql 文件到 mysql 中\n   \n   docker exec 容器名 | 容器id bash -c \'exec mysql -uroot -p"$mysql_root_password"\' < /opt/xxx.sql\n   \n   \n   1\n   \n   \n   /opt/xxx.sql 是 sql 文件的路径。\n\n\n# redis安装\n\n\n# 安装\n\nredis 版本网址：https://registry.hub.docker.com/_/redis\n\nredis 的安装还是比较简单的，这里安装 6.62 版本\n\ndocker pull redis:6.2.6\n\n# 查看 docker 容器\ndocker images\n\n\n1\n2\n3\n4\n\n\n\n# 启动\n\nredis 启动后，进入容器的默认目录是 /data\n\n启动指令：\n\n * 简单的启动，也是最快速的个人使用启动：\n   \n   docker run -d --name redis -p 6379:6379 redis:6.2.6\n   \n   \n   1\n   \n\n * aop 持久化启动\n   \n   指定持久化的 .aop 文件路径，宿主机的文件路径根据需求存放，容器的文件路径默认在 /data\n   \n   docker run -d --name redis -p 6379:6379 -v redis_data:/data redis:6.2.6 redis-server --appendonly yes\n   \n   \n   1\n   \n   \n   容器的 /data 是 aop 文件的默认路径，redis_data 根据需求修改，是宿主机的挂载目录，而 redis-server --appendonly yes 是必须的，这个命令会覆盖默认的命令，默认的命令是关闭持久化。\n\n * 自定义配置文件启动：指定配置文件的路径和容器的 /usr/local/etc/redis 挂载，一旦挂载后，容器的该目录获得配置文件，然后通过 redis-server /usr/local/etc/redis/redis.conf 启动该配置文件\n   \n   docker run -d --name redis -p 6379:6379 -v /opt/redis_conf:/usr/local/etc/redis redis:6.2.6 redis-server /usr/local/etc/redis/redis.conf\n   \n   \n   1\n   \n   \n   /opt/redis_conf 是在宿主机的配置文件路径，根据需求修改。\n   \n   > 注意：redis 容器内没有 redis.conf 文件，启动的配置信息都是默认的。我们需要自己准备好一份 redis.conf 文件，然后通过数据卷传进容器内\n   \n   如何准备一份 redis.conf 文件呢？\n   \n   * 去官网下载对应的 windows 版本，然后拷贝 redis.conf 到 linux 下，再启动配置，这样很麻烦对吧\n   \n   * 直接 linux 下创建一个 redis.conf 文件，虽然不如原生的全面，但是我们只需要加入自己的一些配置即可，其他配置 redis 自动使用默认的\n     \n     比如：\n     \n     # 根据需求指定创建路径\n     cd /opt\n     vim redis_conf\n     \n     # 在 redis.conf 加入如下内容\n     # 限制能访问 redis 的地址，根据需求修改\n     bind 0.0.0.0\n     \n     # 默认是 yes，开启保护模式\n     protected-mode no\n     \n     # 配置 redis 连接密码，可选\n     requirepass 123456\n     \n     # 以守护进程方式启动，可后台启动\n     daemonize no\n     \n     # 更改本地 redis 数据库存放文件夹（可选）\n     dir ./\n     \n     # aop 持久化\n     appendonly yes\n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     8\n     9\n     10\n     11\n     12\n     13\n     14\n     15\n     16\n     17\n     18\n     19\n     20\n     21\n     22\n     \n     redis.conf 常用的配置\n     \n      * bind 0.0.0\n        \n        限制 redis 只能本地访问，根据需求修改\n     \n      * protected-mode no\n        \n        默认是 yes，开启保护模式，限制为本地访问\n     \n      * requirepass 123456\n        \n        配置redis连接密码，默认是注释的\n     \n      * daemonize no\n        \n        默认 no，改为 yes 代表以守护进程方式启动，可后台运行，除非kill进程（可选），改为 yes 会使配置文件方式启动 redis 失败\n     \n      * dir ./\n        \n        更改本地 redis 数据库存放文件夹（可选）\n     \n      * appendonly yes\n        \n        redis 持久化（开启了这个，redis 就不会每次重启时自动清空了）\n     \n     如果不加入 appendonly yes，可以利用 aop 持久化启动来指定 appendonly yes 启动。\n\n\n# 其他\n\n启动后进入 redis 容器\n\ndocker exec -it redis bash\n\n\n1\n\n\n查看 redis 的日志\n\n# 加 -f 代表实时监听日志动态\ndocker logs [-f] redis\n\n\n1\n2\n\n\n输入 redis-cli 连接 redis，如果是连接其他服务器的 redis，则需要加参数\n\nredis-cli -h ip地址 -p 6379\n\n\n1\n\n\n\n# elasticsearch安装\n\n\n# 安装\n\nelasticsearch 版本网址：https://registry.hub.docker.com/_/elasticsearch\n\n这里下载的版本是 7.14.2\n\ndocker pull elasticsearch:7.14.2\n\n\n1\n\n\n\n# 配置\n\n如果启动报错\n\nmax virtual memory areas vm.max_map_count [65530] is too low，increase to at least [262144]\n\n\n1\n\n\n则需要进行配置，没有出现错误可以跳过\n\n# 修改配置 sysctl.conf\nvim /etc/stsctl.conf\n\n# 加入配置信息\nvm.max_map_count=262144\n\n# 启用配置\nsysctl -p\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 启动\n\n三种启动方式：\n\n * 简单启动\n   \n   docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 elasticsearch:7.14.2\n   \n   \n   1\n   \n   \n   如果报错，请看 配置 进行解决\n   \n   浏览器访问的是 9200 端口\n\n * 持久化和配置文件启动\n   \n   es 中所有的数据都在容器中的 /usr/share/elasticsearch/data 目录，配置文件在 /usr/share/elasticsearch/config，所以需要挂载出来\n   \n   docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -v es_data:/usr/share/elasticsearch/data -v es_config:/usr/share/elasticsearch/config elasticsearch:7.14.2\n   \n   \n   1\n   \n   \n   挂载成功后，哪怕容器被删除了，数据还是会存在宿主机的 /.../es_data 目录下\n\n * ik 分词器启动\n   \n   > 方式 1：\n   \n   首先下载好 ik 分词器，版本要和 es 版本一致，放到 linux 系统中，我们知道，es 的插件目录是 /usr/share/elasticsearch/plugins 下，所以需要挂载出来\n   \n   docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -v es_data:/usr/share/elasticsearch/data -v es_config:/usr/share/elasticsearch/config -v es_plugins:/usr/share/elasticsearch/plugins elasticsearch:7.14.2\n   \n   \n   1\n   \n   \n   此时的 es_plugins 目录下为空，我们把下载好的 ik 分词器放到该目录下，然后重启 es 即可\n   \n   cp <ik 分词器> /var/lib/docker/volumes/es_plugins/_data\n   \n   # 重启 es\n   docker restart elasticsearch\n   \n   \n   1\n   2\n   3\n   4\n   \n   \n   > 方式 2：\n   \n   先创建数据卷，把 ik 分词器放到数据卷里\n   \n   docker volume create es_plugins\n   \n   cp <ik 分词器> /var/lib/docker/volumes/es_plugins/_data\n   \n   \n   1\n   2\n   3\n   \n   \n   再启动容器进行挂载\n   \n   docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -v es_data:/usr/share/elasticsearch/data -v es_config:/usr/share/elasticsearch/config -v es_plugins:/usr/share/elasticsearch/plugins elasticsearch:7.14.2\n   \n   \n   1\n   \n\n\n# kibana安装\n\nkibana 版本网址：https://registry.hub.docker.com/_/kibana\n\n下载 kibaba 镜像，版本要和 elasticsearch 一致。\n\ndocker pull kibana:7.14.2\n\n\n1\n\n\n启动\n\n * 简单启动\n   \n   此时没有指定连接 es\n   \n   docker run -d --name kibana -p 5601:5601 kibaba:7.14.2\n   \n   \n   1\n   \n\n * 连接 es 启动\n   \n   docker run -d --name kibana -p 5601:5601 -e elasticsearch_url=http://ip地址:9200 kibaba:7.14.2\n   \n   \n   1\n   \n\n * 先简单启动，后在配置文件再连接 es，重启生效\n   \n   首先知道配置文件的路径是 /usr/share/kibana/config，将它挂载出来\n   \n   docker run -d --name kibana -p 5601:5601 -v kibana_conf:/usr/share/kibana/config kibaba:7.14.2\n   \n   \n   1\n   \n   \n   启动后进入宿主机的 kibana_conf 目录或者 容器的 /usr/share/kibana/config 目录，这里演示前者\n   \n   cd /var/lib/docker/volumes/kibana_conf/_data\n   \n   vim kibana.yml\n   \n   \n   1\n   2\n   3\n   \n   \n   修改为 es 的 ip 地址\n   \n   \n\n\n# 可视化工具portainer\n\n\n# 安装启动\n\n官方安装地址：https://www.portainer.io/installation\n\n# 下载 portainer\ndocker pull portainer/portainer\n\n# 创建 portainer 的数据卷\ndocker volume create portainer_data\n\n# 启动 portainer，指定映射端口等信息，--restart=always 代表该容器被关闭了也会自启动\ndocker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer\n\n# 可以查看容器是否成功启动\ndocker ps\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# docker-compose安装启动\n\n如果没学到 docker-compose 相关内容，可以忽略，或者 我的传送门。\n\n在 docker-compose.yml 文件里添加入内容：\n\nversion "3.0"\n\nservices:\n  portainer:\n    image: portainer/portainer\n    container_name: portainer\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - portainer_data:/data\n    networks:\n      - kele\n    ports:\n      - "8000:8000"\n      - "9000:9000"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n其中需要修改的是第 11 行网桥名，根据需求自行填写，其他尽量不变，如果端口被占用，可以修改。\n\n\n# 登录和注册\n\n> 用浏览器访问：http://localhost:9000 或者 http://ip地址:9000\n> \n> 第一次打开界面要注册用户名和密码，密码要求 8 位以上，如：admin123',charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"Docker - Dockerfile",frontmatter:{title:"Docker - Dockerfile",date:"2021-11-21T22:42:42.000Z",permalink:"/docker/dockerfile/",categories:["Docker"],tags:["容器部署"],readingShow:"top"},regularPath:"/40.%E5%B7%A5%E5%85%B7/40.%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2%20-%20Docker/19.Docker%20-%20Dockerfile.html",relativePath:"40.工具/40.容器部署 - Docker/19.Docker - Dockerfile.md",key:"v-056de73c",path:"/docker/dockerfile/",headers:[{level:2,title:"什么是Dockerfile",slug:"什么是dockerfile",normalizedTitle:"什么是dockerfile",charIndex:null},{level:2,title:"解析过程",slug:"解析过程",normalizedTitle:"解析过程",charIndex:null},{level:3,title:"基本知识",slug:"基本知识",normalizedTitle:"基本知识",charIndex:null},{level:3,title:"大致流程",slug:"大致流程",normalizedTitle:"大致流程",charIndex:null},{level:3,title:"Dockerfile、镜像、容器的理解",slug:"dockerfile、镜像、容器的理解",normalizedTitle:"dockerfile、镜像、容器的理解",charIndex:null},{level:2,title:"指令表",slug:"指令表",normalizedTitle:"指令表",charIndex:null},{level:2,title:"环境变量",slug:"环境变量",normalizedTitle:"环境变量",charIndex:null},{level:2,title:"指令使用",slug:"指令使用",normalizedTitle:"指令使用",charIndex:null},{level:3,title:"build指令",slug:"build指令",normalizedTitle:"build指令",charIndex:null},{level:3,title:"FROM指令",slug:"from指令",normalizedTitle:"from指令",charIndex:null},{level:3,title:"MAINTAINER指令",slug:"maintainer指令",normalizedTitle:"maintainer指令",charIndex:null},{level:3,title:"RUN指令",slug:"run指令",normalizedTitle:"run指令",charIndex:null},{level:3,title:"EXPOSE指令",slug:"expose指令",normalizedTitle:"expose指令",charIndex:null},{level:3,title:"WORKDIR指令",slug:"workdir指令",normalizedTitle:"workdir指令",charIndex:null},{level:3,title:"ENV指令",slug:"env指令",normalizedTitle:"env指令",charIndex:null},{level:3,title:"ADD指令",slug:"add指令",normalizedTitle:"add指令",charIndex:null},{level:3,title:"COPY指令",slug:"copy指令",normalizedTitle:"copy指令",charIndex:null},{level:3,title:"VOLUME指令",slug:"volume指令",normalizedTitle:"volume指令",charIndex:null},{level:3,title:"ENTRYPOINT和CMD指令",slug:"entrypoint和cmd指令",normalizedTitle:"entrypoint和cmd指令",charIndex:null},{level:3,title:"ARG指令",slug:"arg指令",normalizedTitle:"arg指令",charIndex:null},{level:2,title:".dockerignore文件",slug:"dockerignore文件",normalizedTitle:".dockerignore文件",charIndex:null},{level:2,title:"指令实战",slug:"指令实战",normalizedTitle:"指令实战",charIndex:null},{level:3,title:"CentOS安装指令",slug:"centos安装指令",normalizedTitle:"centos安装指令",charIndex:null},{level:3,title:"CentOS安装Tomcat",slug:"centos安装tomcat",normalizedTitle:"centos安装tomcat",charIndex:null}],headersStr:"什么是Dockerfile 解析过程 基本知识 大致流程 Dockerfile、镜像、容器的理解 指令表 环境变量 指令使用 build指令 FROM指令 MAINTAINER指令 RUN指令 EXPOSE指令 WORKDIR指令 ENV指令 ADD指令 COPY指令 VOLUME指令 ENTRYPOINT和CMD指令 ARG指令 .dockerignore文件 指令实战 CentOS安装指令 CentOS安装Tomcat",content:"Hello Docker！",normalizedContent:"hello docker！",charsets:{},lastUpdated:"2022/04/05, 19:18:42"},{title:"Docker - Compose",frontmatter:{title:"Docker - Compose",date:"2021-11-22T22:29:06.000Z",permalink:"/docker/compose/",categories:["Docker"],tags:["容器部署"],readingShow:"top"},regularPath:"/40.%E5%B7%A5%E5%85%B7/40.%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2%20-%20Docker/21.Docker%20-%20Compose.html",relativePath:"40.工具/40.容器部署 - Docker/21.Docker - Compose.md",key:"v-591520b0",path:"/docker/compose/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:3},{level:2,title:"docker-compose使用",slug:"docker-compose使用",normalizedTitle:"docker-compose使用",charIndex:9},{level:2,title:"安装与卸载",slug:"安装与卸载",normalizedTitle:"安装与卸载",charIndex:29},{level:3,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:29},{level:3,title:"卸载",slug:"卸载",normalizedTitle:"卸载",charIndex:32},{level:2,title:"Idea 工具",slug:"idea-工具",normalizedTitle:"idea 工具",charIndex:54},{level:2,title:"模板文件",slug:"模板文件",normalizedTitle:"模板文件",charIndex:65},{level:3,title:"image",slug:"image",normalizedTitle:"image",charIndex:75},{level:3,title:"ports",slug:"ports",normalizedTitle:"ports",charIndex:86},{level:3,title:"container_name",slug:"container-name",normalizedTitle:"container_name",charIndex:97},{level:3,title:"volumes",slug:"volumes",normalizedTitle:"volumes",charIndex:117},{level:3,title:"networks",slug:"networks",normalizedTitle:"networks",charIndex:130},{level:3,title:"build",slug:"build",normalizedTitle:"build",charIndex:144},{level:3,title:"depends_on",slug:"depends-on",normalizedTitle:"depends_on",charIndex:155},{level:3,title:"environment",slug:"environment",normalizedTitle:"environment",charIndex:171},{level:3,title:"env_file",slug:"env-file",normalizedTitle:"env_file",charIndex:188},{level:3,title:"command",slug:"command",normalizedTitle:"command",charIndex:202},{level:3,title:"healthcheck",slug:"healthcheck",normalizedTitle:"healthcheck",charIndex:215},{level:3,title:"sysctls",slug:"sysctls",normalizedTitle:"sysctls",charIndex:232},{level:3,title:"ulimits",slug:"ulimits",normalizedTitle:"ulimits",charIndex:245},{level:3,title:"模板文件参考",slug:"模板文件参考",normalizedTitle:"模板文件参考",charIndex:258},{level:2,title:"常用指令",slug:"常用指令",normalizedTitle:"常用指令",charIndex:268},{level:3,title:"模板指令和常用指令的区别",slug:"模板指令和常用指令的区别",normalizedTitle:"模板指令和常用指令的区别",charIndex:278},{level:3,title:"命令对象格式",slug:"命令对象格式",normalizedTitle:"命令对象格式",charIndex:296},{level:3,title:"命令选项",slug:"命令选项",normalizedTitle:"命令选项",charIndex:308},{level:3,title:"up",slug:"up",normalizedTitle:"up",charIndex:318},{level:3,title:"down",slug:"down",normalizedTitle:"down",charIndex:326},{level:3,title:"exec",slug:"exec",normalizedTitle:"exec",charIndex:336},{level:3,title:"ps",slug:"ps",normalizedTitle:"ps",charIndex:346},{level:3,title:"restart",slug:"restart",normalizedTitle:"restart",charIndex:354},{level:3,title:"rm",slug:"rm",normalizedTitle:"rm",charIndex:367},{level:3,title:"start",slug:"start",normalizedTitle:"start",charIndex:356},{level:3,title:"stop",slug:"stop",normalizedTitle:"stop",charIndex:386},{level:3,title:"top",slug:"top",normalizedTitle:"top",charIndex:387},{level:3,title:"pause",slug:"pause",normalizedTitle:"pause",charIndex:405},{level:3,title:"unpause",slug:"unpause",normalizedTitle:"unpause",charIndex:416},{level:3,title:"logs",slug:"logs",normalizedTitle:"logs",charIndex:429}],headersStr:"简介 docker-compose使用 安装与卸载 安装 卸载 Idea 工具 模板文件 image ports container_name volumes networks build depends_on environment env_file command healthcheck sysctls ulimits 模板文件参考 常用指令 模板指令和常用指令的区别 命令对象格式 命令选项 up down exec ps restart rm start stop top pause unpause logs",content:' * 简介\n * docker-compose使用\n * 安装与卸载\n   * 安装\n   * 卸载\n * Idea 工具\n * 模板文件\n   * image\n   * ports\n   * container_name\n   * volumes\n   * networks\n   * build\n   * depends_on\n   * environment\n   * env_file\n   * command\n   * healthcheck\n   * sysctls\n   * ulimits\n   * 模板文件参考\n * 常用指令\n   * 模板指令和常用指令的区别\n   * 命令对象格式\n   * 命令选项\n   * up\n   * down\n   * exec\n   * ps\n   * restart\n   * rm\n   * start\n   * stop\n   * top\n   * pause\n   * unpause\n   * logs\n\n\n\n\n# 简介\n\nDocker-compose 官网\n\nDocker-compose 指令地址\n\nCompose 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的 快速编排。从功能上看，跟 OpenStack 中的 Heat 十分类似。\n\n其代码目前在 https://github.com/docker/compose 上开源。\n\nCompose 定位是「定义和运行多个 Docker 容器的应用(Defining and running multi-container Docker applications)」，其前身是开源项目 Fig。\n\n过第一部分中的介绍，我们知道使用一个 Dockerfile 模板文件，可以让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容\n\nCompose 恰好满足了这样的需求。它允许用户通过一个单独的 docker-compose.yml 模板文件（HAML格式）来定义一组相关联的应用容器为一个项目（project）。\n\nCompose 中有两个重要的概念:\n\n * 服务（service）:一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。\n\n * 项目（ project）：由一组关联的应用容器组成的一个完整业务单元，在 docker-compose.yml 文件中定义。\n\nCompose 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生命周期管理。\n\nCompose 项目由 Python 编写，实现上调用了 Docer 服务提供的 API 来对容器进行管理。因此，只要所操作的平台支持 Docker APl，就可以在其上利用 Compose 来进行编排管理。\n\n笔记\n\nCompose 就是一个 yml 文件，利用文件来替代 docker run 指令，大部分指令该指令存在的选项如 --name 等，Compose 都有。\n\n2021-11-24 @村长\n\n\n# docker-compose使用\n\n相关概念\n\n首先介绍几个术语：\n\n * 服务（service）：一个服务就是一个应用容器，实际上可以运行多个相同镜像的实例\n * 项目（Project）：由多个服务共同组成一个具有相同的业务逻辑单元，项目在 docker-compose.yml 里定义\n\n使用 Compose 基本上是一个三步过程：\n\n 1. 使用 定义您的应用程序的环境，Dockerfile 以便它可以在任何地方复制。\n 2. 定义组成您的应用程序的服务，docker-compose.yml 以便它们可以在隔离的环境中一起运行。\n 3. 运行 docker compose up 和 Docker compose command 启动并运行你的整个应用程序。您也可以 docker-compose up 使用 docker-compose 二进制文件运行。\n\n一个 docker-compose.yml 看起来像这样：\n\nversion: "3.9"  # 3.9 要求版本大于等于 v1.27.0\nservices:\n  web:\n    build: .\n    ports:\n      - "5000:5000"\n    volumes:\n      - .:/code\n      - logvolume01:/var/log\n    links:\n      - redis\n  redis:\n    image: redis\nvolumes:\n  logvolume01: {}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 安装与卸载\n\n\n# 安装\n\n * Linux\n   \n   在 Linux 上的也安装十分简单，从官方 Gitub Release 处直接下载编译好的二进制文件即可。例如，在 Linux 64位系统上直接下载对应的二进制包,\n   \n   sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose\n   \n   \n   1\n   \n   \n   要安装不同版本的 Compose，请替换 1.29.2 为您要使用的 Compose 版本。它将下载到 /usr/local/bin/ 目录。这是全局指令目录，建议放到这里。\n\n * 对二进制文件应用可执行权限：\n   \n   sudo chmod +x /usr/local/bin/docker-compose\n   \n   \n   1\n   \n\n * Mac、Windows\n   \n   Docker Desktop for Mac/Windows 自带 docker-compose 二进制文件，安装 Docker 之后可以直接使用。Compose 可以通过 Python 的包管理工具 pip 进行安装，也可以直接下载编译好的二进制文件使用，甚至能够直接在 Docker 容器中运行。\n\n * bash 命令补全\n   \n   sudo curl -L "https://raw.githubusercontent.com/docker/compose/1.29.2/contrib/completion/bash/docker-compose" > /etc/bash_completion.d/docker-compose\n   \n   \n   1\n   \n\n * 测试安装成功\n   \n   docker-compose -v\n   # 或者\n   docker-compose --version\n   \n   \n   1\n   2\n   3\n   \n   \n   如果提示权限不够，请先赋予权限\n   \n   sudo chmod +x /usr/local/bin/docker-compose\n   \n   \n   1\n   \n\n\n# 卸载\n\n如果是二进制包方式安装的，删除二进制文件即可。\n\nsudo rm /usr/local/bin/docker-compose\n\n\n1\n\n\n如果您使用 pip 以下命令安装，则卸载 Docker Compose ：\n\nspip uninstall docker-compose\n\n\n1\n\n\n\n# Idea 工具\n\n这里介绍使用 Idea 来操作 yml 文件，因为在 Linux 里，编写 yml 文件非常麻烦，要注意缩进两个空格，并非四个空格。\n\n使用 Idea 工具连接 Linux：\n\n\n\n然后右侧弹出内容，点击 ... 进入配置：\n\n\n\n再次按下 OK 即可。\n\n我是在 /opt/docker-compose 里进行操作：\n\n\n\n利用 Idea 可以实现从 Linux 系统里拉取文件（直接拖动到项目里，无法拖动到 Idea 界面外面）、创建文件，读写文件（双击会在 Idea 界面自动打开）等操作。\n\n\n\n\n# 模板文件\n\n模板文件是使用 Compose 的核心，涉及到的指令关键字也比较多。但请不用担心，这里面大部分指令跟 docker run 相关参数的含义都是类似的。\n\n首先这里说明一些，模板文件写好后是需要启动的，而启动的指令是 docker-compose up，如果打算后台启动，则是 docker-compose up -d，下面都是用到这个指令。如果想要详细了解更多指令，在 常用指令。\n\n默认的模板文件名称为 docker-compose.yml，格式为 YAML 格式。\n\nversion "3.0"\n\nservices:\n  tomcat01:  # 服务名，唯一\n    image: tomcat:8.5.73   # 启动的镜像\n    ports:  # 端口映射，类似于 docker run 的 -p\n      - 8080:8080\n    volumes:  # 数据卷，类似于 ，类似于 docker run 的 -v\n      - /data     # 匿名目录挂载\n      - aa:/data   # 默认目录挂载\n      - /opt/aa:   # 具体目录挂载\n    networks:     # 网桥\n      - kele\n\nvolumes:   # 声明服务用到的数据卷\n  aa:    \n    external: true   # 开启指定数据卷名，否则数据卷名的前缀是项目名\nnetworks:   # 声明服务用到的网桥\n  kele:\n    external: true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n开头的 version 版本目前最高是3.9。\n\n注意每个服务都必须通过 image 指令指定镜像或 build 指令(需要 Dockerfile)等来自动构建生成镜像。\n\n如果使用 build 指令，在 Dockerfile 中设置的选项例如：CND ，EXPOSE，VOLUME ,ENV 等)将会自动被获取，无需在 docker-compose.yml 中重复设置。\n\n下面分别介绍各个指令的用法和例子。\n\n每一个指令的例子都是独立的，没有关联，所以服务名可能重复，一个例子的容器信息不会出现在下一个例子中等等。所以是独立的！\n\n\n# image\n\n指定镜像名称或镜像 ID。如果镜像在本地不存在，Compose 将会尝试拉取这个镜像。\n\n# 最新版\nimage: centos\n# 版本号\nimage: centos:centos7\n# 摘要\nimage: a4basdgv\n\n\n1\n2\n3\n4\n5\n6\n\n\n> 例子 1：在 yml 文件里启动 tomcat 镜像\n\nyml 文件内容：\n\n\n\n\n\n\n \n\n\nversion: "3.0"\n\nservices:\n  tomcat01:  # 服务名，唯一\n    image: tomcat:8.5.73\n\n\n1\n2\n3\n4\n5\n\n\n启动 yml 文件前，记得点击向上箭头在 Idea 同步文件内容到 Linux。\n\n启动 yml 文件的命令是 docker-compose up，如果后台启动，请加入 -d：docker-compose up -d：\n\n\n\n \n\n\n\n\n\n# 启动 yml 文件\ndocker-compose up -d\n\n# 返回结果\nStarting docker-compose_tomcat01_1 ... done\n\n\n1\n2\n3\n4\n5\n\n\n查看容器是否启动：\n\n\n\n\n\n\n\n \n\n\n# 查看启动容器\ndocker ps\n\n# 返回结果\nCONTAINER ID   IMAGE           COMMAND             CREATED          STATUS          PORTS      NAMES\n38c797769cc4   tomcat:8.5.73   "catalina.sh run"   56 seconds ago   Up 42 seconds   8080/tcp   docker-compose_tomcat01_1\n\n\n1\n2\n3\n4\n5\n6\n\n\n容器启动成功，我们也可以看出容器的名字前缀都加上了 docker-compose，不再是 完全随机。\n\n\n# ports\n\n暴露端口信息，等价于 docker run -p。\n\n使用宿主端口∶容器端口（HOST:CONTAINER）格式，或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。\n\nports:\n  - "3000"\n  - "8000:8000"\n  - "80:80"\n  - "127.0.0.1:8080:8080"\n\n\n1\n2\n3\n4\n5\n\n\n注意:当使用 HOST:CONTAINER 格式来映射端口时，如果你使用的容器端口小于 60 并且没放到引号里，可能会得到错误结果，因为 YAML 会自动解析 xx:yy 这种数字格式为 60 进制。为避免出现这种问题，建议数字串都采用引号包括起来的字符串格式。\n\n> 例子 1：启动 tomcat，并指定两个映射端口\n\nyml 文件内容：\n\n\n\n\n\n\n\n \n \n \n\n\nversion: "3.0"\n\nservices:\n  tomcat01:  # 服务名，唯一\n    image: tomcat:8.5.73\n    ports:\n    - "8081:8080"\n    - "8082:8080"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n启动 yml 文件，并验证是否启动：\n\n# 启动 yml 文件\ndocker-compose up -d\n\n# 返回结果\nStarting docker-compose_tomcat01_1 ... done\n\n# 查看启动的容器\ndocker ps\n\n# 返回结果\nCONTAINER ID   IMAGE           COMMAND             CREATED         STATUS         PORTS                                                                                  NAMES\nc06c886ec78b   tomcat:8.5.73   "catalina.sh run"   7 seconds ago   Up 6 seconds   0.0.0.0:8081->8080/tcp, 0.0.0.0:8082->8080/tcp, :::8081->8080/tcp, :::8082->8080/tcp   docker-compose_tomcat01_1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# container_name\n\n指定容器名称。默认将会使用 项目名称_服务名称_序号 这样的格式，等价于 docker run --name。\n\ncontainer_name: docker-web-container  # 相当于 run 的 --name\n\n\n1\n\n\n> 注意：指定容器名称后，该服务将无法进行拓展（scale），因为 Docker 不允许多个容器具有相同的名称。\n\n> 例子 1：启动 tomcat，指定容器名字\n\nyml 文件内容：\n\n\n\n\n\n\n\n \n\n\nversion: "3.0"\n\nservices:\n  tomcat01:  # 服务名，唯一\n    image: tomcat:8.5.73\n    container_name: tomcat01\n\n\n1\n2\n3\n4\n5\n6\n\n\n启动 yml 文件，并查看容器是否启动：\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n# 启动 yml 文件\ndocker-compose up -d\n\n# 返回结果\nStarting tomcat01 ... done\n\n# 查看启动容器\ndocker ps\n\n# 返回结果\nCONTAINER ID   IMAGE           COMMAND             CREATED         STATUS         PORTS      NAMES\n777df200aa36   tomcat:8.5.73   "catalina.sh run"   3 seconds ago   Up 2 seconds   8080/tcp   tomcat01\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n如果容器已经在运行，则使用 yml 文件启动时，会将运行的容器停止，然后以新的 yml 文件配置重新启动。\n\n\n# volumes\n\n数挥卷所挂载路径设置。可以设置为宿主机路径(HOST:CONTAIMER)或者数据卷名称(VOLUNME:CONTATNER)，并且可以设置访问模式（HOST:CONTAINER:ro)。该指令中路径支持相对路径，等价于 docker run -v\n\nvolumes:\n  - /usr/local/tomcat   # 匿名目录挂载\n  - aa:/usr/local/tomcat   # 默认目录挂载\n  - /opt/aa:/usr/local/tomcat   # 具体目录挂载\n  - ~/configs:/usr/local/tomcat:ro   # 指定容器的只读权限\n\n\n1\n2\n3\n4\n5\n\n\n如果是默认目录挂载，必须在文件中声明数据卷。\n\n\n\n\n\n\n\n \n \n\n\n \n \n\n\nversion "3.0"\n\nservices:\n  tomcat01:  # 服务名，唯一\n    image: tomcat:8.5.73\n    volumes: \n      - aa:/usr/local/tomcat\n\n# 必须在这里进行声明，否则报错\nvolumes:\n  aa:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n但是默认目录挂载生成数据卷名会加上项目名。如上方文件生成的数据卷名叫：docker-compose_aa，注意不是服务名，是项目名（yml 文件所在的目录名）。\n\n如果不想要加上项目名，则加上 external 为 true。\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\nversion "3.0"\n\nservices:\n  my_src:\n    image: tomcat:8.5.73\n    volumes: \n      - aa:/usr/local/tomcat\n\n# 必须在这里进行声明，否则报错\nvolumes:\n  aa:  # 声明数据卷名\n    external: true  # 确认使用指定的数据卷名，前缀不会加上项目名\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n加入 external 为 true 又引起新的问题：如果该数据卷名不存在，则会报错，它不会主动创建不存在的数据卷，所以需要先手动创建数据卷。\n\n> 例子 1：不加 external 为 true 的默认目录挂载\n\nyml 文件内容：\n\n\n\n\n\n\n\n\n \n \n\n\nversion: "3.0"\n\nservices:\n  tomcat01:  # 服务名，唯一\n    image: tomcat:8.5.73\n    container_name: tomcat01\n    volumes:\n    - tomcat:/usr/local/tomcat\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n如果直接启动 yml 文件，它会报错，知道为什么吗？\n\n之前说过，使用 volumes 必须要进行声明，否则会报错：\n\nERROR: Named volume "tomcat:/usr/local/tomcat:rw" is used in service "tomcat01" but no declaration was found in the volumes section.\n\n\n1\n\n\n所以正确的 yml 文件内容：(声明数据卷)\n\n\n\n\n\n\n\n\n\n\n\n \n \n\n\nversion: "3.0"\n\nservices:\n  tomcat01:  # 服务名，唯一\n    image: tomcat:8.5.73\n    container_name: tomcat01\n    volumes:\n    - tomcat:/usr/local/tomcat\n\nvolumes:  # 声明数据卷\n  tomcat:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n查看容器是否启动：\n\n# 查看容器\ndocker ps\n\n# 返回结果\nCONTAINER ID   IMAGE           COMMAND             CREATED         STATUS         PORTS      NAMES\nc8acd0e644ef   tomcat:8.5.73   "catalina.sh run"   4 seconds ago   Up 2 seconds   8080/tcp   tomcat01\n\n\n1\n2\n3\n4\n5\n6\n\n\n查看数据卷是否会自动创建：\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n# 查看数据卷\ndocker volume ls\n\n# 返回结果\nDRIVER    VOLUME NAME\nlocal     docker-compose_tomcat\n\n# 查看数据卷的宿主机位置\ndocker volume inspect docker-compose_tomcat \n\n# 返回结果\n[\n    {\n        "CreatedAt": "2021-11-24T18:26:33+08:00",\n        "Driver": "local",\n        "Labels": {\n            "com.docker.compose.project": "docker-compose",\n            "com.docker.compose.version": "1.29.2",\n            "com.docker.compose.volume": "tomcat"\n        },\n        "Mountpoint": "/var/lib/docker/volumes/docker-compose_tomcat/_data",\n        "Name": "docker-compose_tomcat",\n        "Options": null,\n        "Scope": "local"\n    }\n]\n\n# 进入数据卷的目录\ncd /var/lib/docker/volumes/docker-compose_tomcat/_data\n\n# 查看目录内容\nls\n\n# 返回结果\nbin  BUILDING.txt  conf  CONTRIBUTING.md  lib  LICENSE  logs  native-jni-lib  NOTICE  README.md  RELEASE-NOTES  RUNNING.txt  temp  webapps  webapps.dist  work\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n证明了创建的数据卷名带有项目名（yml 文件所在的目录名），并且说明了：默认目录挂载方式，容器的挂载目录内容覆盖了宿主机的挂载内容。\n\n如果不想数据卷名带有项目名（yml 文件所在的目录名），请添加 external 为 true，看例子 2。\n\n> 例子 2：加 external 为 true 的默认目录挂载\n\nyml 文件：\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\nversion: "3.0"\n\nservices:\n  tomcat01:  # 服务名，唯一\n    image: tomcat:8.5.73\n    container_name: tomcat01\n    volumes:\n    - tomcat:/usr/local/tomcat\n\nvolumes:\n  tomcat:\n    external: true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n如果直接启动 yml 文件，它会报错，知道为什么吗？\n\n前面说过，虽然此时的数据卷确实叫做 tomcat 而不是带有项目名，但是目前的 tocmat 数据卷就不存在，而 external 为 true 时，不会创建不存在的数据卷名。所以我们必修先创建数据卷：\n\ndocker volume create tomcat\n\n\n1\n\n\n启动 yml 文件\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n# 启动 yml 文件\ndocker-compose up -d\n\n# 返回结果\nRecreating tomcat01 ... done\n\n# 进入数据卷目录\ncd /var/lib/docker/volumes/tomcat/_data\n\n# 查看目录内容\nls\n\n# 返回结果\nbin  BUILDING.txt  conf  CONTRIBUTING.md  lib  LICENSE  logs  native-jni-lib  NOTICE  README.md  RELEASE-NOTES  RUNNING.txt  temp  webapps  webapps.dist  work\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# networks\n\n配置容器连接的网络，等价于 docker run -network。\n\n * 利用 docker run 启动的容器，默认网桥名为 bridge\n * 利用 yml 文件启动的容器，默认网桥名为 docker-compose_default\n\nversion "3.0"\n\nservices:\n  some-service:\n    networks:\n     - some-network\n     - other-network\n\n# 必须在这里进行声明，否则报错\nnetworks:\n  some-network\n  other-network\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n和 volumes 一样：\n\n * 创建的网桥名默认加上项目名（yml 文件所在的目录名），如果不想加上项目名，请添加 external 为 true\n * 使用网桥需要进行声明，否则报错\n * 如果添加 external 为 true，该网桥必须先存在，否则报错，它不会主动创建不存在的网桥\n\nversion "3.0"\n\nservices:\n  some-service:\n    networks:\n     - some-network\n     - other-network\n\n# 必须在这里进行声明，否则报错\nnetworks:\n  some-network  # 网桥名不加上项目名\n    external:\n      true\n  other-network   # 这个网桥名会带有项目名前缀\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n> 例子 1：容器有两个网桥，一个网桥使用带有项目名，一个不带有项目名\n\nyml 文件内容：\n\n\n\n\n\n\n\n\n \n \n \n\n \n \n \n \n \n\n\nversion: "3.0"\n\nservices:\n  tomcat01:  # 服务名，唯一\n    image: tomcat:8.5.73\n    container_name: tomcat01\n    networks:\n      - kele\n      - bing\n\nnetworks:\n  kele:\n    external: \n      true\n  bing:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n不演示 kele 网桥不存在报错的问题了，直接创建 kele 网桥：\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n# 创建网桥\ndocker network create kele\n\n# 查看网桥\ndocker network ls\n\n# 返回结果（部分）\nNETWORK ID     NAME                     DRIVER    SCOPE\n6a9007e442ce   bridge                   bridge    local\n28f389726875   docker-compose_default   bridge    local\n922ea0d2e922   kele                     bridge    local\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n启动 yml 文件：\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n# 启动 yml 文件\ndocker-compose up -d\n\n# 返回结果\nCreating network "docker-compose_bing" with the default driver\nCreating tomcat01 ... done\n\n# 查看网桥\ndocker network ls\n\n# 返回结果（部分）\nNETWORK ID     NAME                     DRIVER    SCOPE\n6a9007e442ce   bridge                   bridge    local\n6f723cfea57c   docker-compose_bing      bridge    local\n28f389726875   docker-compose_default   bridge    local\n922ea0d2e922   kele                     bridge    local\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n可以看到，yml 文件启动容器的默认网桥是 docker-compose_bing，而指定的 bing 网桥带有项目名（yml 文件所在的目录名）：docker-compose_bing。\n\n\n# build\n\n指定 Dockerfile 所在文件夹的路径(可以是绝对路径，或者相对 docker-compose.yml 文件的路径)，Compose 将会利用它自动构建这个镜像，然后使用这个镜像，等价于 docker build。\n\nversion "3.0"\n\nservices:\n  tomcat01:\n    build: ./dir  # 当前目录下的 dir 目录为上下文目录（Dockerfile 所在的目录）\n\n\n1\n2\n3\n4\n5\n\n\n * 使用 context 指令指定 Dockerfile 所在文件夹的路径\n\n * 使用 dockerfile 指令指定 Dockerfile 文件名\n\n * 使用 arg 指令指定构建镜像时的变量，等价 docker build --build-arg，即给 ARG 变量传参\n\nversion "3.0"\n\nservices:\n  tomcat01:   # 服务名，唯一\n    build:\n      context: /xxx   # 上下文命令：Dockerfile 所在的目录\n      dockerfile: Dockerfile-otherName    # 默认叫 Dockerfile，如果是其他名，这里设置 \n      args:       # 给 ARG 变量传参\n        变量名: 值\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n> 例子 1：创建一个 Dockerfile 文件，并构建\n\n首先创建一个 Dockerfile 文件，添加内容：（内容较少，这里只是演示 yml 文件进行构建，详细 Dockfile 内容请看：Docker - Dockerfile）\n\nFROM tomcat:8.5.73\n\nARG ARGS\n\nRUN echo $ARGS\n\n\n1\n2\n3\n4\n5\n\n\nyml 文件内容：\n\n\n\n\n\n\n\n \n \n \n \n\n\nversion: "3.0"\n\nservices:\n  container_name: tomcat01   #  容器名\n  tomcat01:  # 服务名，唯一\n    build:\n      context: ./   # 指定上下文目录：Dockerfile 所在的目录\n      args:\n        ARGS: hello docker\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n启动 yml 文件，查看镜像是否生成和启动：\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n \n\n\n# 启动 yml 文件\ndocker-compose up -d\n\n# 查看镜像\ndocker images\n\n# 返回结果\nREPOSITORY                TAG       IMAGE ID       CREATED        SIZE\ndocker-compose_tomcat01   latest    39e47af1a1c1   3 hours ago    249MB\n\n# 查看运行的容器\ndocker ps\n\n# 返回结果\nCONTAINER ID   IMAGE                     COMMAND             CREATED         STATUS         PORTS      NAMES\nc7f73ee44c49   docker-compose_tomcat01   "catalina.sh run"   2 minutes ago   Up 2 minutes   8080/tcp   tomcat01\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n可以看出，镜像名也是基于项目名（yml 文件所处的目录名）而命名的。\n\nargs 是否生效呢，请看构建过程图例：\n\n\n\n\n# depends_on\n\n解决容器的依赖、启动先后的问题。\n\nversion "3.0"\n\nservices:\n  服务名1:   \n    image: 服务 1 镜像\n    depends_on:\n      - 服务名 2\n      - 服务名 3\n      \n  服务名2:\n    image: 服务 2 镜像\n    \n  服务名3:\n    image: 服务 3 镜像\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n服务 1 启动前，先等服务 2 和服务 3启动后自己再启动。\n\n> 注意： 服务 1 不会等待服务 2 和服务 3 「完全启动」之后才启动，两个服务启动过半即可。depends_on 必须是服务名\n\n> 例子 1：先启动 redis、es 再启动 tomcat\n\nyml 文件内容：\n\n\n\n\n\n\n \n \n \n \n \n \n \n \n \n\n\nversion "3"\n\nservices:\n  tomcat:\n    depends_on:\n      - db\n      - redis\n      \n  redis:\n    image: redis\n    \n  es:\n    image: elasticsearch\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# environment\n\n设置环境变量。你可以使用数组或字典两种格式。\n\n只给定名称的变量会自动获取运行 Compose 主机上对应变量的值，可以用来防止泄露不必要的数据。\n\n有两种形式：\n\n * key: value\n * - key=value\n\n# 形式 1\nenvironment:\n  RACK_ENV: development\n  SESSION_SECRET: 123456\n\n# 形式 2\nenvironment:\n  - RACK_ENV=development\n  - SESSION_SECRET=123456\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n如果变量名称或者值中用到 true | false，yes | no 等表达 布尔 含义的词汇，最好放到引号里 （如"true" | "false"），避免 YAML 自动解析某些内容为对应的布尔语义。这些特定词汇，包括：\n\ny|Y|yes|Yes|YES|n|N|no|No|NO|true|True|TRUE|false|False|FALSE|on|On|ON|off|Off|OFF\n\n\n1\n\n\n> 例子 1：启动 MySQL 时，需要密码\n\n我们都知道，启动 MySQL 镜像，需要给 MySQL 密码，否则报错。给定密码格式 docker run -e MYSQL_ROOT_PASSWORD=密码 mysql。\n\nyml 文件内容：\n\n\n\n\n\n\n\n\n \n\n\n\nversion: "3.0"\n\nservices:\n  container_name: tomcat01   #  容器名\n  tomcat01:  # 服务名，唯一\n    image: mysql:8.0.27   # 启动的 MySQL 镜像\n    environment:\n      MYSQL_ROOT_PASSWORD: 123456   # 假设这是 MySQL 密码\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# env_file\n\n从文件中获取环境变量，可以为单独的文件路径或列表。其实就是把上面的 environment 变量（数据库密码）放到一个 .env 文件里，然后引用这个文件（就相当于引用变量）\n\n如果通过 docker-compose -f FILE 方式来指定 Compose 模板文件，则 env_file 中变量的路径会基于模板文件路径。\n\n如果镜像自带的变量名称与 environment 指令冲突，则按照惯例，以后者为准。\n\n两种形式：\n\n * 单文件： .env\n * 多文件：- .env、- .env\n\n# 单文件\nenv_file: .env\n\n# 多文件\nenv_file:\n  - ./common.env\n  - ./apps/web.env\n  - /opt/secrets.env\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n环境变量文件中有一个必须符合格式，支持 # 开头的注释行，且内容格式是 key=value\n\n# common.env: Set development environment\nPROG_ENV=development\n\n\n1\n2\n\n\n> 例子 1：在 mysql.env 文件里加上 MySQL 密码\n\nmysql.env 文件内容：（先创建 touch mysql.env）\n\n# 这是一个 MySQL 环境变量文件\nMYSQL_ROOT_PASSWORD=123456\n\n\n1\n2\n\n\nyml 文件内容：\n\n\n\n\n\n\n\n \n \n\n\nversion: "3.0"\n\nservices:\n  tomcat01:  # 服务名，唯一\n    image: mysql:8.0.27   # 启动的 MySQL 镜像\n    env_file:\n      - ./mysql.env   # 存放 MySQL 密码的 .env 文件\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# command\n\n覆盖容器启动后默认执行的命令，等价于 docker run 镜像 command 的 command。\n\ncommand: echo "hello docker"\n\n\n1\n\n\n> 例子 1：启动 redis，开启 AOP 持久化\n\n我们知道，启动 redis 持久化的 docker 指令是：docker run redis redis-server --appendonly yes\n\nyml 文件内容：\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\nversion: "3.0"\n\nservices:\n  redis:   # 服务名，唯一\n    image: redis  \n    container_name: redis\n    ports:    # 映射端口\n    - "6379:6379"\n    volumes:     # 数据卷\n    - redisData:/data\n    command: "redis-server --appendonly yes"    # 启动容器执行的命令\n    \nvolumes:   # 声明数据卷\n  redisData:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# healthcheck\n\n通过命令检查容器是否健康运行。\n\nhealthcheck:\n  test: ["CMD", "curl", "-f", "http://localhost"] # 发生请求\n  interval: 1m30s   # 发送请求时间\n  timeout: 10s  # 超时时间\n  retries: 3  # 重试次数\n\n\n1\n2\n3\n4\n5\n\n\n> 例子 1：启动 tomcat，并不断检测检测健康运行\n\n\n\n\n\n\n\n\n \n \n \n \n \n\n\nversion: "3.0"\n\nservices:\n  mysql01:  # 服务名，唯一\n    image: mysql:8.0.27   # 启动的 MySQL 镜像\n    container_name: mysql\n    healthcheck:\n      test: ["CMD", "curl", "-f", "http://localhost"] # 发生请求\n      interval: 1m30s   # 发送请求时间  \n      timeout: 10s  # 超时时间\n      retries: 3  # 重试次数\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n启动后，Docker 每隔 1 分 30 秒发送一次 curl -f http://localhost 的 CMD 请求，如果 10 秒内不响应，则重试 3 次。\n\n\n# sysctls\n\n用来配置容器中系统内部参数﹒并不是必须有些服务启动受容器内操作系统参数限制可能会无法启动必须通过修改容器中参数才能启动。\n\nsysctls:  \n  net.core.somaxconn: 1024\n  net.ipv4.tcp_syncookies: 0\n\n# 必须在这里进行声明，否则报错\nsysctls:\n  - net.core.somaxconn: 1024\n  - net.ipv4.tcp_syncookies: 0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n必须声明。\n\n> 例子 1：\n\nyml 文件内容：\n\n\n\n\n\n\n\n\n \n \n \n\n\n \n \n \n\n\nversion: "3.0"\n\nservices:\n  mysql01:  # 服务名，唯一\n    image: mysql:8.0.27   # 启动的 MySQL 镜像\n    container_name: mysql\n    sysctls:  \n      net.core.somaxconn: 1024\n      net.ipv4.tcp_syncookies: 0\n\n# 必须在这里进行声明，否则报错\nsysctls:\n  - net.core.somaxconn: 1024\n  - net.ipv4.tcp_syncookies: 0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# ulimits\n\n指定容器的 ulimits 限制值。\n\n例如，指定最大进程数为 65535，指定文件句柄数为 20000 (软限制，应用可以随时修改，不能超过硬限制)和 40000 (系统硬限制，只能 root 用户提高)。\n\nulimits:\n  nproc: 65535\n  nofile:\n    soft: 20000\n    hard: 40000\n\n\n1\n2\n3\n4\n5\n\n\n> 例子 1：\n\nyml 文件内容：\n\n\n\n\n\n\n\n\n \n \n \n \n \n\n\nversion: "3.0"\n\nservices:\n  mysql01:  # 服务名，唯一\n    image: mysql:8.0.27   # 启动的 MySQL 镜像\n    container_name: mysql\n    ulimits:\n    nproc: 65535\n    nofile:\n      soft: 20000\n      hard: 40000\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 模板文件参考\n\nversion: "3.0"\n\nservices:\n  \n  tomcat01:  # 服务名，唯一\n    container_name: tomcat01  # 相当于 run 的 --name\n    image: tomcat:8.5.73   # 启动镜像，相当于 run image\n    ports:  # 用来完成 host 与容器的端口映射关系，相当于 run -p\n      - "8080:8080"\n    volumes:  # 完成宿主机与容器中目录数据卷共享相当于 run -v\n    # - /root/apps:/usr/local/tomcat/webapps  # 使用具体目录挂载\n      - tomcat01:/usr/local/tomcat  # 使用默认目录挂载\n    networks:    # 代表当前服务使用哪个网络桥，相当于 run --network\n      - kele\n  \n  tomcat02:  # 服务名，唯一\n    container_name: tomcat02  # 容器名\n    image: tomcat:8.5.73    # 镜像\n    ports:     # 映射端口\n      - "8081:8080"\n    volumes:  # 宿主机和容器的数据卷共享\n      - tomcat02:/usr/local/tomcat  # 使用默认目录挂载\n    networks:   # 代表当前服务使用哪个网络桥\n      - kele\n\n  tomcat03:\n    build:   # 构建模式，相当于 docker build \n      context: ./    # 指定上下文的路径：Dockerfile 所在的目录\n      args:   # 传参，相当于 docker build --build-arg\n        ARGS: hello docker     \n  \n  mysql:\n    image: mysql:8.0.27\n    container_name: mysql\n    ports:\n      - "3307:3306"\n    volumes:\n      - mysqlData:/var/lib/mysql\n      - mysqlConf:/etc/myconf\n    environment:\n      - MYSQL_ROOT_PASSWORD=123456\n    networks:\n      - kele\n  \n  redis:\n    image: redis:5.0.10\n    container_name: redis\n    ports:\n      - "6379:6379"\n    volumes:\n      - redisData:/data\n    networks:\n      - bing\n    command: "redis-server --appendonly yes"  # run 镜像之后来覆盖容器内默认命令\n    \nvolumes:   # 声明上面的服务所使用的自带创建的数据卷名\n  tomcat01:   # 声明指令的数据卷名，compose 自带创建该卷，但是会加入项目名作为前缀\n    external:  # 使用自定义数据卷名\n      true    # 代表确认使用指定的数据卷名，注意：一旦使用外部自定义数据卷名，启动服务前必须手动创建 \n  tomcat02:\n  mysqlData:\n  mysqlConf:\n  redisData:\n    \nnetworks:   # 声明服务用到的网桥\n  kele:    # 定义上面的服务用到的网桥，默认创建时 bridge\n    external:    \n      true    # 使用外部指定的网桥，注意：启动前网桥必须存在\n  bing:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n\n\n\n# 常用指令\n\n\n# 模板指令和常用指令的区别\n\n * 模板指令：用来书写在docker-compose.yml文件中指令称之为模板指令用来为服务进行服务的\n * 常用指令：用来对整个 docker-compose.yml 对应的这个项目操作\n\n\n# 命令对象格式\n\n对于 Compose 来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务或者容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到命令影响。\n\n执行 docker-compose [COMMAND] --help 或者 docker-compose help [CONMAND] 可以查看具体某个命令的使用格式。\n\ndocker-compose 命令的基本的使用格式是：\n\ndocker-compose [-f=<arg> ......] [options] [COMMAND] [ARGS ......]\n\n\n1\n\n\n\n# 命令选项\n\n                           \n-f <模板文件名>                 指定使用的 Conpose 模板文件，默认为 docker-compose.yml，可以多次指定\n--file <模板文件名>\n-p <项目名>                   指定项目名称，默认将使用所在目录名称作为项目名\n--project-name 项目名\n--x-networking             使用 Docker 的可拔插网络后端特性\n--x-network-driver <驱动名>   指定网络后端的驱动，默认为 bridge\n--verbose                  输出更多调试信息\n-v                         打印版本并退出\n--version\n\n> 例子 1：假设不叫 docker-compose.yml 文件，叫 kele.yml 文件，启动它\n\ndocker-compose -f kele.yml up\n\n\n1\n\n\n> 例子 2：虽然 docker-compose.yml 文件在 aa 目录下，但是我希望项目名不叫 aa名，而是叫 bb，启动它\n\ndocker-compose -P bb up\n\n\n1\n\n\n\n# up\n\n启动 yml 文件里的单个/所有服务，如果不指定服务 id，默认启动所有服务。\n\n格式：docker-compose up [options] [ service ... ]。\n\ndocker-compose up [options] [ service .. . ]\n\n# 后台启动\ndocker-compose up -d [ service ...]\n\n# 指定 yml 文件所在的目录启动\ndocker-compose -f <文件路径> up\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n * 该命令十分强大，它将尝试自动完成包括构建镜像，(重新）创建服务，启动服务，并关联服务相关容器的一系列操作\n\n * 链接的服务都将会被自动启动，除非已经处于运行状态\n\n * 可以说，大部分时候都可以直接通过该命令来启动一个项目\n\n * 默认情况，docker-compose up 启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试\n\n * 当通过 Ctrl-C 停止命令时，所有容器将会停止\n\n * 如果使用 docker-compose up -d，将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项\n\n * 默认情况，如果服务容器已经存在，docker-compose up 将会尝试停止容器，然后重新创建（保持使用 volumes-from 挂载的卷)，以保证新启动的服务匹配 docker-compose.yml 文件的最新内容\n\n\n# down\n\n此命令将会停止 up 命令启动的单个/所有服务，并移出自己创建的网络，但不会移出数据卷。\n\n格式：docker-compose down [ service ...]\n\ndocker-compose down [ service ...]\n\n\n1\n\n\n\n# exec\n\n进入指定的服务，使用的是服务 id，并非容器 id。\n\n格式：docker-compose exec [ service ] [窗口命令]\n\ndocker-compose exec [ service ] [窗口命令]\n\n\n1\n\n\n\n# ps\n\n列出项目中目前的单个/所有服务，如果不指定服务 id，默认列出所有服务。\n\n格式：docker-compose ps [options] [ service ...]\n\ndocker-compose ps [options] [ service ...]\n\n\n1\n\n\n选项：\n\n * -q：只打印容器的 ID 信息。\n\n\n# restart\n\n重启项目中的单个/所有服务，如果不指定服务 id，默认重启所有服务。\n\n格式：docker-compose restart [options] [ service ...]\n\ndocker-compose restart [options] [ service ...]\n\n\n1\n\n\n选项：\n\n * 简写：-t，完整 --timeout 时间数：重启前停止容器的超时（默认为 10 秒）\n\n\n# rm\n\n删除单个/所有（停止状态的）服务，如果不指定服务 id，默认删除所有服务。推荐先执行 docker-compose stop 指令来停止容器给再删除。\n\n格式：docker-compose rm [options] [ service ...]\n\ndocker-compose rm [options] [ service ...]\n\n\n1\n\n\n选项：\n\n * 简写 -f、完整 --force：强制直接删除，包括运行状态的容器，一般尽量不要使用该选项\n * -v：删除容器所挂载的数据卷，同样慎用\n\n\n# start\n\n启动已经存在的单个/所有服务。\n\n格式：docker-compose start [service ...]\n\ndocker-compose start [service ...]\n\n\n1\n\n\n\n# stop\n\n停止已经处于运行状态的单个/所有服务，但不会删除它，如果不指定服务 id，默认停止所有服务。通过 docker-compose start 可以再次启动这些容器。\n\n格式：docker-compose stop [options] [ service ...]\n\ndocker-compose stop [options] [ service ...]\n\n\n1\n\n\n选项：\n\n * 简写：-t，完整 --timeout 时间数：停止容器时候的超时（默认为 10 秒）\n\n\n# top\n\n查看单个/所有服务内运行的进程。\n\n格式：docker-compose top [ service ...]\n\ndocker-compose top [ service ...]\n\n\n1\n\n\n\n# pause\n\n暂停单个/所有服务。\n\n格式：docker-compose pause [ service ...]\n\ndocker-compose pause [ service ...]\n\n\n1\n\n\n\n# unpause\n\n恢复处于暂停状态的单个/所有服务。\n\n格式：docker-compose unpause [ service ...]\n\ndocker-compose unpause [ service ...]\n\n\n1\n\n\n\n# logs\n\n查看单个/所有服务的日志信息。\n\n格式：docker-compose logs [ service ...]\n\ndocker-compose logs [ service ...]\n\n\n1\n',normalizedContent:' * 简介\n * docker-compose使用\n * 安装与卸载\n   * 安装\n   * 卸载\n * idea 工具\n * 模板文件\n   * image\n   * ports\n   * container_name\n   * volumes\n   * networks\n   * build\n   * depends_on\n   * environment\n   * env_file\n   * command\n   * healthcheck\n   * sysctls\n   * ulimits\n   * 模板文件参考\n * 常用指令\n   * 模板指令和常用指令的区别\n   * 命令对象格式\n   * 命令选项\n   * up\n   * down\n   * exec\n   * ps\n   * restart\n   * rm\n   * start\n   * stop\n   * top\n   * pause\n   * unpause\n   * logs\n\n\n\n\n# 简介\n\ndocker-compose 官网\n\ndocker-compose 指令地址\n\ncompose 项目是 docker 官方的开源项目，负责实现对 docker 容器集群的 快速编排。从功能上看，跟 openstack 中的 heat 十分类似。\n\n其代码目前在 https://github.com/docker/compose 上开源。\n\ncompose 定位是「定义和运行多个 docker 容器的应用(defining and running multi-container docker applications)」，其前身是开源项目 fig。\n\n过第一部分中的介绍，我们知道使用一个 dockerfile 模板文件，可以让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 web 项目，除了 web 服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容\n\ncompose 恰好满足了这样的需求。它允许用户通过一个单独的 docker-compose.yml 模板文件（haml格式）来定义一组相关联的应用容器为一个项目（project）。\n\ncompose 中有两个重要的概念:\n\n * 服务（service）:一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。\n\n * 项目（ project）：由一组关联的应用容器组成的一个完整业务单元，在 docker-compose.yml 文件中定义。\n\ncompose 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生命周期管理。\n\ncompose 项目由 python 编写，实现上调用了 docer 服务提供的 api 来对容器进行管理。因此，只要所操作的平台支持 docker apl，就可以在其上利用 compose 来进行编排管理。\n\n笔记\n\ncompose 就是一个 yml 文件，利用文件来替代 docker run 指令，大部分指令该指令存在的选项如 --name 等，compose 都有。\n\n2021-11-24 @村长\n\n\n# docker-compose使用\n\n相关概念\n\n首先介绍几个术语：\n\n * 服务（service）：一个服务就是一个应用容器，实际上可以运行多个相同镜像的实例\n * 项目（project）：由多个服务共同组成一个具有相同的业务逻辑单元，项目在 docker-compose.yml 里定义\n\n使用 compose 基本上是一个三步过程：\n\n 1. 使用 定义您的应用程序的环境，dockerfile 以便它可以在任何地方复制。\n 2. 定义组成您的应用程序的服务，docker-compose.yml 以便它们可以在隔离的环境中一起运行。\n 3. 运行 docker compose up 和 docker compose command 启动并运行你的整个应用程序。您也可以 docker-compose up 使用 docker-compose 二进制文件运行。\n\n一个 docker-compose.yml 看起来像这样：\n\nversion: "3.9"  # 3.9 要求版本大于等于 v1.27.0\nservices:\n  web:\n    build: .\n    ports:\n      - "5000:5000"\n    volumes:\n      - .:/code\n      - logvolume01:/var/log\n    links:\n      - redis\n  redis:\n    image: redis\nvolumes:\n  logvolume01: {}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 安装与卸载\n\n\n# 安装\n\n * linux\n   \n   在 linux 上的也安装十分简单，从官方 gitub release 处直接下载编译好的二进制文件即可。例如，在 linux 64位系统上直接下载对应的二进制包,\n   \n   sudo curl -l "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose\n   \n   \n   1\n   \n   \n   要安装不同版本的 compose，请替换 1.29.2 为您要使用的 compose 版本。它将下载到 /usr/local/bin/ 目录。这是全局指令目录，建议放到这里。\n\n * 对二进制文件应用可执行权限：\n   \n   sudo chmod +x /usr/local/bin/docker-compose\n   \n   \n   1\n   \n\n * mac、windows\n   \n   docker desktop for mac/windows 自带 docker-compose 二进制文件，安装 docker 之后可以直接使用。compose 可以通过 python 的包管理工具 pip 进行安装，也可以直接下载编译好的二进制文件使用，甚至能够直接在 docker 容器中运行。\n\n * bash 命令补全\n   \n   sudo curl -l "https://raw.githubusercontent.com/docker/compose/1.29.2/contrib/completion/bash/docker-compose" > /etc/bash_completion.d/docker-compose\n   \n   \n   1\n   \n\n * 测试安装成功\n   \n   docker-compose -v\n   # 或者\n   docker-compose --version\n   \n   \n   1\n   2\n   3\n   \n   \n   如果提示权限不够，请先赋予权限\n   \n   sudo chmod +x /usr/local/bin/docker-compose\n   \n   \n   1\n   \n\n\n# 卸载\n\n如果是二进制包方式安装的，删除二进制文件即可。\n\nsudo rm /usr/local/bin/docker-compose\n\n\n1\n\n\n如果您使用 pip 以下命令安装，则卸载 docker compose ：\n\nspip uninstall docker-compose\n\n\n1\n\n\n\n# idea 工具\n\n这里介绍使用 idea 来操作 yml 文件，因为在 linux 里，编写 yml 文件非常麻烦，要注意缩进两个空格，并非四个空格。\n\n使用 idea 工具连接 linux：\n\n\n\n然后右侧弹出内容，点击 ... 进入配置：\n\n\n\n再次按下 ok 即可。\n\n我是在 /opt/docker-compose 里进行操作：\n\n\n\n利用 idea 可以实现从 linux 系统里拉取文件（直接拖动到项目里，无法拖动到 idea 界面外面）、创建文件，读写文件（双击会在 idea 界面自动打开）等操作。\n\n\n\n\n# 模板文件\n\n模板文件是使用 compose 的核心，涉及到的指令关键字也比较多。但请不用担心，这里面大部分指令跟 docker run 相关参数的含义都是类似的。\n\n首先这里说明一些，模板文件写好后是需要启动的，而启动的指令是 docker-compose up，如果打算后台启动，则是 docker-compose up -d，下面都是用到这个指令。如果想要详细了解更多指令，在 常用指令。\n\n默认的模板文件名称为 docker-compose.yml，格式为 yaml 格式。\n\nversion "3.0"\n\nservices:\n  tomcat01:  # 服务名，唯一\n    image: tomcat:8.5.73   # 启动的镜像\n    ports:  # 端口映射，类似于 docker run 的 -p\n      - 8080:8080\n    volumes:  # 数据卷，类似于 ，类似于 docker run 的 -v\n      - /data     # 匿名目录挂载\n      - aa:/data   # 默认目录挂载\n      - /opt/aa:   # 具体目录挂载\n    networks:     # 网桥\n      - kele\n\nvolumes:   # 声明服务用到的数据卷\n  aa:    \n    external: true   # 开启指定数据卷名，否则数据卷名的前缀是项目名\nnetworks:   # 声明服务用到的网桥\n  kele:\n    external: true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n开头的 version 版本目前最高是3.9。\n\n注意每个服务都必须通过 image 指令指定镜像或 build 指令(需要 dockerfile)等来自动构建生成镜像。\n\n如果使用 build 指令，在 dockerfile 中设置的选项例如：cnd ，expose，volume ,env 等)将会自动被获取，无需在 docker-compose.yml 中重复设置。\n\n下面分别介绍各个指令的用法和例子。\n\n每一个指令的例子都是独立的，没有关联，所以服务名可能重复，一个例子的容器信息不会出现在下一个例子中等等。所以是独立的！\n\n\n# image\n\n指定镜像名称或镜像 id。如果镜像在本地不存在，compose 将会尝试拉取这个镜像。\n\n# 最新版\nimage: centos\n# 版本号\nimage: centos:centos7\n# 摘要\nimage: a4basdgv\n\n\n1\n2\n3\n4\n5\n6\n\n\n> 例子 1：在 yml 文件里启动 tomcat 镜像\n\nyml 文件内容：\n\n\n\n\n\n\n \n\n\nversion: "3.0"\n\nservices:\n  tomcat01:  # 服务名，唯一\n    image: tomcat:8.5.73\n\n\n1\n2\n3\n4\n5\n\n\n启动 yml 文件前，记得点击向上箭头在 idea 同步文件内容到 linux。\n\n启动 yml 文件的命令是 docker-compose up，如果后台启动，请加入 -d：docker-compose up -d：\n\n\n\n \n\n\n\n\n\n# 启动 yml 文件\ndocker-compose up -d\n\n# 返回结果\nstarting docker-compose_tomcat01_1 ... done\n\n\n1\n2\n3\n4\n5\n\n\n查看容器是否启动：\n\n\n\n\n\n\n\n \n\n\n# 查看启动容器\ndocker ps\n\n# 返回结果\ncontainer id   image           command             created          status          ports      names\n38c797769cc4   tomcat:8.5.73   "catalina.sh run"   56 seconds ago   up 42 seconds   8080/tcp   docker-compose_tomcat01_1\n\n\n1\n2\n3\n4\n5\n6\n\n\n容器启动成功，我们也可以看出容器的名字前缀都加上了 docker-compose，不再是 完全随机。\n\n\n# ports\n\n暴露端口信息，等价于 docker run -p。\n\n使用宿主端口∶容器端口（host:container）格式，或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。\n\nports:\n  - "3000"\n  - "8000:8000"\n  - "80:80"\n  - "127.0.0.1:8080:8080"\n\n\n1\n2\n3\n4\n5\n\n\n注意:当使用 host:container 格式来映射端口时，如果你使用的容器端口小于 60 并且没放到引号里，可能会得到错误结果，因为 yaml 会自动解析 xx:yy 这种数字格式为 60 进制。为避免出现这种问题，建议数字串都采用引号包括起来的字符串格式。\n\n> 例子 1：启动 tomcat，并指定两个映射端口\n\nyml 文件内容：\n\n\n\n\n\n\n\n \n \n \n\n\nversion: "3.0"\n\nservices:\n  tomcat01:  # 服务名，唯一\n    image: tomcat:8.5.73\n    ports:\n    - "8081:8080"\n    - "8082:8080"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n启动 yml 文件，并验证是否启动：\n\n# 启动 yml 文件\ndocker-compose up -d\n\n# 返回结果\nstarting docker-compose_tomcat01_1 ... done\n\n# 查看启动的容器\ndocker ps\n\n# 返回结果\ncontainer id   image           command             created         status         ports                                                                                  names\nc06c886ec78b   tomcat:8.5.73   "catalina.sh run"   7 seconds ago   up 6 seconds   0.0.0.0:8081->8080/tcp, 0.0.0.0:8082->8080/tcp, :::8081->8080/tcp, :::8082->8080/tcp   docker-compose_tomcat01_1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# container_name\n\n指定容器名称。默认将会使用 项目名称_服务名称_序号 这样的格式，等价于 docker run --name。\n\ncontainer_name: docker-web-container  # 相当于 run 的 --name\n\n\n1\n\n\n> 注意：指定容器名称后，该服务将无法进行拓展（scale），因为 docker 不允许多个容器具有相同的名称。\n\n> 例子 1：启动 tomcat，指定容器名字\n\nyml 文件内容：\n\n\n\n\n\n\n\n \n\n\nversion: "3.0"\n\nservices:\n  tomcat01:  # 服务名，唯一\n    image: tomcat:8.5.73\n    container_name: tomcat01\n\n\n1\n2\n3\n4\n5\n6\n\n\n启动 yml 文件，并查看容器是否启动：\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n# 启动 yml 文件\ndocker-compose up -d\n\n# 返回结果\nstarting tomcat01 ... done\n\n# 查看启动容器\ndocker ps\n\n# 返回结果\ncontainer id   image           command             created         status         ports      names\n777df200aa36   tomcat:8.5.73   "catalina.sh run"   3 seconds ago   up 2 seconds   8080/tcp   tomcat01\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n如果容器已经在运行，则使用 yml 文件启动时，会将运行的容器停止，然后以新的 yml 文件配置重新启动。\n\n\n# volumes\n\n数挥卷所挂载路径设置。可以设置为宿主机路径(host:contaimer)或者数据卷名称(volunme:contatner)，并且可以设置访问模式（host:container:ro)。该指令中路径支持相对路径，等价于 docker run -v\n\nvolumes:\n  - /usr/local/tomcat   # 匿名目录挂载\n  - aa:/usr/local/tomcat   # 默认目录挂载\n  - /opt/aa:/usr/local/tomcat   # 具体目录挂载\n  - ~/configs:/usr/local/tomcat:ro   # 指定容器的只读权限\n\n\n1\n2\n3\n4\n5\n\n\n如果是默认目录挂载，必须在文件中声明数据卷。\n\n\n\n\n\n\n\n \n \n\n\n \n \n\n\nversion "3.0"\n\nservices:\n  tomcat01:  # 服务名，唯一\n    image: tomcat:8.5.73\n    volumes: \n      - aa:/usr/local/tomcat\n\n# 必须在这里进行声明，否则报错\nvolumes:\n  aa:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n但是默认目录挂载生成数据卷名会加上项目名。如上方文件生成的数据卷名叫：docker-compose_aa，注意不是服务名，是项目名（yml 文件所在的目录名）。\n\n如果不想要加上项目名，则加上 external 为 true。\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\nversion "3.0"\n\nservices:\n  my_src:\n    image: tomcat:8.5.73\n    volumes: \n      - aa:/usr/local/tomcat\n\n# 必须在这里进行声明，否则报错\nvolumes:\n  aa:  # 声明数据卷名\n    external: true  # 确认使用指定的数据卷名，前缀不会加上项目名\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n加入 external 为 true 又引起新的问题：如果该数据卷名不存在，则会报错，它不会主动创建不存在的数据卷，所以需要先手动创建数据卷。\n\n> 例子 1：不加 external 为 true 的默认目录挂载\n\nyml 文件内容：\n\n\n\n\n\n\n\n\n \n \n\n\nversion: "3.0"\n\nservices:\n  tomcat01:  # 服务名，唯一\n    image: tomcat:8.5.73\n    container_name: tomcat01\n    volumes:\n    - tomcat:/usr/local/tomcat\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n如果直接启动 yml 文件，它会报错，知道为什么吗？\n\n之前说过，使用 volumes 必须要进行声明，否则会报错：\n\nerror: named volume "tomcat:/usr/local/tomcat:rw" is used in service "tomcat01" but no declaration was found in the volumes section.\n\n\n1\n\n\n所以正确的 yml 文件内容：(声明数据卷)\n\n\n\n\n\n\n\n\n\n\n\n \n \n\n\nversion: "3.0"\n\nservices:\n  tomcat01:  # 服务名，唯一\n    image: tomcat:8.5.73\n    container_name: tomcat01\n    volumes:\n    - tomcat:/usr/local/tomcat\n\nvolumes:  # 声明数据卷\n  tomcat:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n查看容器是否启动：\n\n# 查看容器\ndocker ps\n\n# 返回结果\ncontainer id   image           command             created         status         ports      names\nc8acd0e644ef   tomcat:8.5.73   "catalina.sh run"   4 seconds ago   up 2 seconds   8080/tcp   tomcat01\n\n\n1\n2\n3\n4\n5\n6\n\n\n查看数据卷是否会自动创建：\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n# 查看数据卷\ndocker volume ls\n\n# 返回结果\ndriver    volume name\nlocal     docker-compose_tomcat\n\n# 查看数据卷的宿主机位置\ndocker volume inspect docker-compose_tomcat \n\n# 返回结果\n[\n    {\n        "createdat": "2021-11-24t18:26:33+08:00",\n        "driver": "local",\n        "labels": {\n            "com.docker.compose.project": "docker-compose",\n            "com.docker.compose.version": "1.29.2",\n            "com.docker.compose.volume": "tomcat"\n        },\n        "mountpoint": "/var/lib/docker/volumes/docker-compose_tomcat/_data",\n        "name": "docker-compose_tomcat",\n        "options": null,\n        "scope": "local"\n    }\n]\n\n# 进入数据卷的目录\ncd /var/lib/docker/volumes/docker-compose_tomcat/_data\n\n# 查看目录内容\nls\n\n# 返回结果\nbin  building.txt  conf  contributing.md  lib  license  logs  native-jni-lib  notice  readme.md  release-notes  running.txt  temp  webapps  webapps.dist  work\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n证明了创建的数据卷名带有项目名（yml 文件所在的目录名），并且说明了：默认目录挂载方式，容器的挂载目录内容覆盖了宿主机的挂载内容。\n\n如果不想数据卷名带有项目名（yml 文件所在的目录名），请添加 external 为 true，看例子 2。\n\n> 例子 2：加 external 为 true 的默认目录挂载\n\nyml 文件：\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\nversion: "3.0"\n\nservices:\n  tomcat01:  # 服务名，唯一\n    image: tomcat:8.5.73\n    container_name: tomcat01\n    volumes:\n    - tomcat:/usr/local/tomcat\n\nvolumes:\n  tomcat:\n    external: true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n如果直接启动 yml 文件，它会报错，知道为什么吗？\n\n前面说过，虽然此时的数据卷确实叫做 tomcat 而不是带有项目名，但是目前的 tocmat 数据卷就不存在，而 external 为 true 时，不会创建不存在的数据卷名。所以我们必修先创建数据卷：\n\ndocker volume create tomcat\n\n\n1\n\n\n启动 yml 文件\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n# 启动 yml 文件\ndocker-compose up -d\n\n# 返回结果\nrecreating tomcat01 ... done\n\n# 进入数据卷目录\ncd /var/lib/docker/volumes/tomcat/_data\n\n# 查看目录内容\nls\n\n# 返回结果\nbin  building.txt  conf  contributing.md  lib  license  logs  native-jni-lib  notice  readme.md  release-notes  running.txt  temp  webapps  webapps.dist  work\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# networks\n\n配置容器连接的网络，等价于 docker run -network。\n\n * 利用 docker run 启动的容器，默认网桥名为 bridge\n * 利用 yml 文件启动的容器，默认网桥名为 docker-compose_default\n\nversion "3.0"\n\nservices:\n  some-service:\n    networks:\n     - some-network\n     - other-network\n\n# 必须在这里进行声明，否则报错\nnetworks:\n  some-network\n  other-network\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n和 volumes 一样：\n\n * 创建的网桥名默认加上项目名（yml 文件所在的目录名），如果不想加上项目名，请添加 external 为 true\n * 使用网桥需要进行声明，否则报错\n * 如果添加 external 为 true，该网桥必须先存在，否则报错，它不会主动创建不存在的网桥\n\nversion "3.0"\n\nservices:\n  some-service:\n    networks:\n     - some-network\n     - other-network\n\n# 必须在这里进行声明，否则报错\nnetworks:\n  some-network  # 网桥名不加上项目名\n    external:\n      true\n  other-network   # 这个网桥名会带有项目名前缀\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n> 例子 1：容器有两个网桥，一个网桥使用带有项目名，一个不带有项目名\n\nyml 文件内容：\n\n\n\n\n\n\n\n\n \n \n \n\n \n \n \n \n \n\n\nversion: "3.0"\n\nservices:\n  tomcat01:  # 服务名，唯一\n    image: tomcat:8.5.73\n    container_name: tomcat01\n    networks:\n      - kele\n      - bing\n\nnetworks:\n  kele:\n    external: \n      true\n  bing:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n不演示 kele 网桥不存在报错的问题了，直接创建 kele 网桥：\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n# 创建网桥\ndocker network create kele\n\n# 查看网桥\ndocker network ls\n\n# 返回结果（部分）\nnetwork id     name                     driver    scope\n6a9007e442ce   bridge                   bridge    local\n28f389726875   docker-compose_default   bridge    local\n922ea0d2e922   kele                     bridge    local\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n启动 yml 文件：\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n# 启动 yml 文件\ndocker-compose up -d\n\n# 返回结果\ncreating network "docker-compose_bing" with the default driver\ncreating tomcat01 ... done\n\n# 查看网桥\ndocker network ls\n\n# 返回结果（部分）\nnetwork id     name                     driver    scope\n6a9007e442ce   bridge                   bridge    local\n6f723cfea57c   docker-compose_bing      bridge    local\n28f389726875   docker-compose_default   bridge    local\n922ea0d2e922   kele                     bridge    local\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n可以看到，yml 文件启动容器的默认网桥是 docker-compose_bing，而指定的 bing 网桥带有项目名（yml 文件所在的目录名）：docker-compose_bing。\n\n\n# build\n\n指定 dockerfile 所在文件夹的路径(可以是绝对路径，或者相对 docker-compose.yml 文件的路径)，compose 将会利用它自动构建这个镜像，然后使用这个镜像，等价于 docker build。\n\nversion "3.0"\n\nservices:\n  tomcat01:\n    build: ./dir  # 当前目录下的 dir 目录为上下文目录（dockerfile 所在的目录）\n\n\n1\n2\n3\n4\n5\n\n\n * 使用 context 指令指定 dockerfile 所在文件夹的路径\n\n * 使用 dockerfile 指令指定 dockerfile 文件名\n\n * 使用 arg 指令指定构建镜像时的变量，等价 docker build --build-arg，即给 arg 变量传参\n\nversion "3.0"\n\nservices:\n  tomcat01:   # 服务名，唯一\n    build:\n      context: /xxx   # 上下文命令：dockerfile 所在的目录\n      dockerfile: dockerfile-othername    # 默认叫 dockerfile，如果是其他名，这里设置 \n      args:       # 给 arg 变量传参\n        变量名: 值\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n> 例子 1：创建一个 dockerfile 文件，并构建\n\n首先创建一个 dockerfile 文件，添加内容：（内容较少，这里只是演示 yml 文件进行构建，详细 dockfile 内容请看：docker - dockerfile）\n\nfrom tomcat:8.5.73\n\narg args\n\nrun echo $args\n\n\n1\n2\n3\n4\n5\n\n\nyml 文件内容：\n\n\n\n\n\n\n\n \n \n \n \n\n\nversion: "3.0"\n\nservices:\n  container_name: tomcat01   #  容器名\n  tomcat01:  # 服务名，唯一\n    build:\n      context: ./   # 指定上下文目录：dockerfile 所在的目录\n      args:\n        args: hello docker\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n启动 yml 文件，查看镜像是否生成和启动：\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n \n\n\n# 启动 yml 文件\ndocker-compose up -d\n\n# 查看镜像\ndocker images\n\n# 返回结果\nrepository                tag       image id       created        size\ndocker-compose_tomcat01   latest    39e47af1a1c1   3 hours ago    249mb\n\n# 查看运行的容器\ndocker ps\n\n# 返回结果\ncontainer id   image                     command             created         status         ports      names\nc7f73ee44c49   docker-compose_tomcat01   "catalina.sh run"   2 minutes ago   up 2 minutes   8080/tcp   tomcat01\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n可以看出，镜像名也是基于项目名（yml 文件所处的目录名）而命名的。\n\nargs 是否生效呢，请看构建过程图例：\n\n\n\n\n# depends_on\n\n解决容器的依赖、启动先后的问题。\n\nversion "3.0"\n\nservices:\n  服务名1:   \n    image: 服务 1 镜像\n    depends_on:\n      - 服务名 2\n      - 服务名 3\n      \n  服务名2:\n    image: 服务 2 镜像\n    \n  服务名3:\n    image: 服务 3 镜像\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n服务 1 启动前，先等服务 2 和服务 3启动后自己再启动。\n\n> 注意： 服务 1 不会等待服务 2 和服务 3 「完全启动」之后才启动，两个服务启动过半即可。depends_on 必须是服务名\n\n> 例子 1：先启动 redis、es 再启动 tomcat\n\nyml 文件内容：\n\n\n\n\n\n\n \n \n \n \n \n \n \n \n \n\n\nversion "3"\n\nservices:\n  tomcat:\n    depends_on:\n      - db\n      - redis\n      \n  redis:\n    image: redis\n    \n  es:\n    image: elasticsearch\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# environment\n\n设置环境变量。你可以使用数组或字典两种格式。\n\n只给定名称的变量会自动获取运行 compose 主机上对应变量的值，可以用来防止泄露不必要的数据。\n\n有两种形式：\n\n * key: value\n * - key=value\n\n# 形式 1\nenvironment:\n  rack_env: development\n  session_secret: 123456\n\n# 形式 2\nenvironment:\n  - rack_env=development\n  - session_secret=123456\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n如果变量名称或者值中用到 true | false，yes | no 等表达 布尔 含义的词汇，最好放到引号里 （如"true" | "false"），避免 yaml 自动解析某些内容为对应的布尔语义。这些特定词汇，包括：\n\ny|y|yes|yes|yes|n|n|no|no|no|true|true|true|false|false|false|on|on|on|off|off|off\n\n\n1\n\n\n> 例子 1：启动 mysql 时，需要密码\n\n我们都知道，启动 mysql 镜像，需要给 mysql 密码，否则报错。给定密码格式 docker run -e mysql_root_password=密码 mysql。\n\nyml 文件内容：\n\n\n\n\n\n\n\n\n \n\n\n\nversion: "3.0"\n\nservices:\n  container_name: tomcat01   #  容器名\n  tomcat01:  # 服务名，唯一\n    image: mysql:8.0.27   # 启动的 mysql 镜像\n    environment:\n      mysql_root_password: 123456   # 假设这是 mysql 密码\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# env_file\n\n从文件中获取环境变量，可以为单独的文件路径或列表。其实就是把上面的 environment 变量（数据库密码）放到一个 .env 文件里，然后引用这个文件（就相当于引用变量）\n\n如果通过 docker-compose -f file 方式来指定 compose 模板文件，则 env_file 中变量的路径会基于模板文件路径。\n\n如果镜像自带的变量名称与 environment 指令冲突，则按照惯例，以后者为准。\n\n两种形式：\n\n * 单文件： .env\n * 多文件：- .env、- .env\n\n# 单文件\nenv_file: .env\n\n# 多文件\nenv_file:\n  - ./common.env\n  - ./apps/web.env\n  - /opt/secrets.env\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n环境变量文件中有一个必须符合格式，支持 # 开头的注释行，且内容格式是 key=value\n\n# common.env: set development environment\nprog_env=development\n\n\n1\n2\n\n\n> 例子 1：在 mysql.env 文件里加上 mysql 密码\n\nmysql.env 文件内容：（先创建 touch mysql.env）\n\n# 这是一个 mysql 环境变量文件\nmysql_root_password=123456\n\n\n1\n2\n\n\nyml 文件内容：\n\n\n\n\n\n\n\n \n \n\n\nversion: "3.0"\n\nservices:\n  tomcat01:  # 服务名，唯一\n    image: mysql:8.0.27   # 启动的 mysql 镜像\n    env_file:\n      - ./mysql.env   # 存放 mysql 密码的 .env 文件\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# command\n\n覆盖容器启动后默认执行的命令，等价于 docker run 镜像 command 的 command。\n\ncommand: echo "hello docker"\n\n\n1\n\n\n> 例子 1：启动 redis，开启 aop 持久化\n\n我们知道，启动 redis 持久化的 docker 指令是：docker run redis redis-server --appendonly yes\n\nyml 文件内容：\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\nversion: "3.0"\n\nservices:\n  redis:   # 服务名，唯一\n    image: redis  \n    container_name: redis\n    ports:    # 映射端口\n    - "6379:6379"\n    volumes:     # 数据卷\n    - redisdata:/data\n    command: "redis-server --appendonly yes"    # 启动容器执行的命令\n    \nvolumes:   # 声明数据卷\n  redisdata:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# healthcheck\n\n通过命令检查容器是否健康运行。\n\nhealthcheck:\n  test: ["cmd", "curl", "-f", "http://localhost"] # 发生请求\n  interval: 1m30s   # 发送请求时间\n  timeout: 10s  # 超时时间\n  retries: 3  # 重试次数\n\n\n1\n2\n3\n4\n5\n\n\n> 例子 1：启动 tomcat，并不断检测检测健康运行\n\n\n\n\n\n\n\n\n \n \n \n \n \n\n\nversion: "3.0"\n\nservices:\n  mysql01:  # 服务名，唯一\n    image: mysql:8.0.27   # 启动的 mysql 镜像\n    container_name: mysql\n    healthcheck:\n      test: ["cmd", "curl", "-f", "http://localhost"] # 发生请求\n      interval: 1m30s   # 发送请求时间  \n      timeout: 10s  # 超时时间\n      retries: 3  # 重试次数\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n启动后，docker 每隔 1 分 30 秒发送一次 curl -f http://localhost 的 cmd 请求，如果 10 秒内不响应，则重试 3 次。\n\n\n# sysctls\n\n用来配置容器中系统内部参数﹒并不是必须有些服务启动受容器内操作系统参数限制可能会无法启动必须通过修改容器中参数才能启动。\n\nsysctls:  \n  net.core.somaxconn: 1024\n  net.ipv4.tcp_syncookies: 0\n\n# 必须在这里进行声明，否则报错\nsysctls:\n  - net.core.somaxconn: 1024\n  - net.ipv4.tcp_syncookies: 0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n必须声明。\n\n> 例子 1：\n\nyml 文件内容：\n\n\n\n\n\n\n\n\n \n \n \n\n\n \n \n \n\n\nversion: "3.0"\n\nservices:\n  mysql01:  # 服务名，唯一\n    image: mysql:8.0.27   # 启动的 mysql 镜像\n    container_name: mysql\n    sysctls:  \n      net.core.somaxconn: 1024\n      net.ipv4.tcp_syncookies: 0\n\n# 必须在这里进行声明，否则报错\nsysctls:\n  - net.core.somaxconn: 1024\n  - net.ipv4.tcp_syncookies: 0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# ulimits\n\n指定容器的 ulimits 限制值。\n\n例如，指定最大进程数为 65535，指定文件句柄数为 20000 (软限制，应用可以随时修改，不能超过硬限制)和 40000 (系统硬限制，只能 root 用户提高)。\n\nulimits:\n  nproc: 65535\n  nofile:\n    soft: 20000\n    hard: 40000\n\n\n1\n2\n3\n4\n5\n\n\n> 例子 1：\n\nyml 文件内容：\n\n\n\n\n\n\n\n\n \n \n \n \n \n\n\nversion: "3.0"\n\nservices:\n  mysql01:  # 服务名，唯一\n    image: mysql:8.0.27   # 启动的 mysql 镜像\n    container_name: mysql\n    ulimits:\n    nproc: 65535\n    nofile:\n      soft: 20000\n      hard: 40000\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 模板文件参考\n\nversion: "3.0"\n\nservices:\n  \n  tomcat01:  # 服务名，唯一\n    container_name: tomcat01  # 相当于 run 的 --name\n    image: tomcat:8.5.73   # 启动镜像，相当于 run image\n    ports:  # 用来完成 host 与容器的端口映射关系，相当于 run -p\n      - "8080:8080"\n    volumes:  # 完成宿主机与容器中目录数据卷共享相当于 run -v\n    # - /root/apps:/usr/local/tomcat/webapps  # 使用具体目录挂载\n      - tomcat01:/usr/local/tomcat  # 使用默认目录挂载\n    networks:    # 代表当前服务使用哪个网络桥，相当于 run --network\n      - kele\n  \n  tomcat02:  # 服务名，唯一\n    container_name: tomcat02  # 容器名\n    image: tomcat:8.5.73    # 镜像\n    ports:     # 映射端口\n      - "8081:8080"\n    volumes:  # 宿主机和容器的数据卷共享\n      - tomcat02:/usr/local/tomcat  # 使用默认目录挂载\n    networks:   # 代表当前服务使用哪个网络桥\n      - kele\n\n  tomcat03:\n    build:   # 构建模式，相当于 docker build \n      context: ./    # 指定上下文的路径：dockerfile 所在的目录\n      args:   # 传参，相当于 docker build --build-arg\n        args: hello docker     \n  \n  mysql:\n    image: mysql:8.0.27\n    container_name: mysql\n    ports:\n      - "3307:3306"\n    volumes:\n      - mysqldata:/var/lib/mysql\n      - mysqlconf:/etc/myconf\n    environment:\n      - mysql_root_password=123456\n    networks:\n      - kele\n  \n  redis:\n    image: redis:5.0.10\n    container_name: redis\n    ports:\n      - "6379:6379"\n    volumes:\n      - redisdata:/data\n    networks:\n      - bing\n    command: "redis-server --appendonly yes"  # run 镜像之后来覆盖容器内默认命令\n    \nvolumes:   # 声明上面的服务所使用的自带创建的数据卷名\n  tomcat01:   # 声明指令的数据卷名，compose 自带创建该卷，但是会加入项目名作为前缀\n    external:  # 使用自定义数据卷名\n      true    # 代表确认使用指定的数据卷名，注意：一旦使用外部自定义数据卷名，启动服务前必须手动创建 \n  tomcat02:\n  mysqldata:\n  mysqlconf:\n  redisdata:\n    \nnetworks:   # 声明服务用到的网桥\n  kele:    # 定义上面的服务用到的网桥，默认创建时 bridge\n    external:    \n      true    # 使用外部指定的网桥，注意：启动前网桥必须存在\n  bing:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n\n\n\n# 常用指令\n\n\n# 模板指令和常用指令的区别\n\n * 模板指令：用来书写在docker-compose.yml文件中指令称之为模板指令用来为服务进行服务的\n * 常用指令：用来对整个 docker-compose.yml 对应的这个项目操作\n\n\n# 命令对象格式\n\n对于 compose 来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务或者容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到命令影响。\n\n执行 docker-compose [command] --help 或者 docker-compose help [conmand] 可以查看具体某个命令的使用格式。\n\ndocker-compose 命令的基本的使用格式是：\n\ndocker-compose [-f=<arg> ......] [options] [command] [args ......]\n\n\n1\n\n\n\n# 命令选项\n\n                           \n-f <模板文件名>                 指定使用的 conpose 模板文件，默认为 docker-compose.yml，可以多次指定\n--file <模板文件名>\n-p <项目名>                   指定项目名称，默认将使用所在目录名称作为项目名\n--project-name 项目名\n--x-networking             使用 docker 的可拔插网络后端特性\n--x-network-driver <驱动名>   指定网络后端的驱动，默认为 bridge\n--verbose                  输出更多调试信息\n-v                         打印版本并退出\n--version\n\n> 例子 1：假设不叫 docker-compose.yml 文件，叫 kele.yml 文件，启动它\n\ndocker-compose -f kele.yml up\n\n\n1\n\n\n> 例子 2：虽然 docker-compose.yml 文件在 aa 目录下，但是我希望项目名不叫 aa名，而是叫 bb，启动它\n\ndocker-compose -p bb up\n\n\n1\n\n\n\n# up\n\n启动 yml 文件里的单个/所有服务，如果不指定服务 id，默认启动所有服务。\n\n格式：docker-compose up [options] [ service ... ]。\n\ndocker-compose up [options] [ service .. . ]\n\n# 后台启动\ndocker-compose up -d [ service ...]\n\n# 指定 yml 文件所在的目录启动\ndocker-compose -f <文件路径> up\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n * 该命令十分强大，它将尝试自动完成包括构建镜像，(重新）创建服务，启动服务，并关联服务相关容器的一系列操作\n\n * 链接的服务都将会被自动启动，除非已经处于运行状态\n\n * 可以说，大部分时候都可以直接通过该命令来启动一个项目\n\n * 默认情况，docker-compose up 启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试\n\n * 当通过 ctrl-c 停止命令时，所有容器将会停止\n\n * 如果使用 docker-compose up -d，将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项\n\n * 默认情况，如果服务容器已经存在，docker-compose up 将会尝试停止容器，然后重新创建（保持使用 volumes-from 挂载的卷)，以保证新启动的服务匹配 docker-compose.yml 文件的最新内容\n\n\n# down\n\n此命令将会停止 up 命令启动的单个/所有服务，并移出自己创建的网络，但不会移出数据卷。\n\n格式：docker-compose down [ service ...]\n\ndocker-compose down [ service ...]\n\n\n1\n\n\n\n# exec\n\n进入指定的服务，使用的是服务 id，并非容器 id。\n\n格式：docker-compose exec [ service ] [窗口命令]\n\ndocker-compose exec [ service ] [窗口命令]\n\n\n1\n\n\n\n# ps\n\n列出项目中目前的单个/所有服务，如果不指定服务 id，默认列出所有服务。\n\n格式：docker-compose ps [options] [ service ...]\n\ndocker-compose ps [options] [ service ...]\n\n\n1\n\n\n选项：\n\n * -q：只打印容器的 id 信息。\n\n\n# restart\n\n重启项目中的单个/所有服务，如果不指定服务 id，默认重启所有服务。\n\n格式：docker-compose restart [options] [ service ...]\n\ndocker-compose restart [options] [ service ...]\n\n\n1\n\n\n选项：\n\n * 简写：-t，完整 --timeout 时间数：重启前停止容器的超时（默认为 10 秒）\n\n\n# rm\n\n删除单个/所有（停止状态的）服务，如果不指定服务 id，默认删除所有服务。推荐先执行 docker-compose stop 指令来停止容器给再删除。\n\n格式：docker-compose rm [options] [ service ...]\n\ndocker-compose rm [options] [ service ...]\n\n\n1\n\n\n选项：\n\n * 简写 -f、完整 --force：强制直接删除，包括运行状态的容器，一般尽量不要使用该选项\n * -v：删除容器所挂载的数据卷，同样慎用\n\n\n# start\n\n启动已经存在的单个/所有服务。\n\n格式：docker-compose start [service ...]\n\ndocker-compose start [service ...]\n\n\n1\n\n\n\n# stop\n\n停止已经处于运行状态的单个/所有服务，但不会删除它，如果不指定服务 id，默认停止所有服务。通过 docker-compose start 可以再次启动这些容器。\n\n格式：docker-compose stop [options] [ service ...]\n\ndocker-compose stop [options] [ service ...]\n\n\n1\n\n\n选项：\n\n * 简写：-t，完整 --timeout 时间数：停止容器时候的超时（默认为 10 秒）\n\n\n# top\n\n查看单个/所有服务内运行的进程。\n\n格式：docker-compose top [ service ...]\n\ndocker-compose top [ service ...]\n\n\n1\n\n\n\n# pause\n\n暂停单个/所有服务。\n\n格式：docker-compose pause [ service ...]\n\ndocker-compose pause [ service ...]\n\n\n1\n\n\n\n# unpause\n\n恢复处于暂停状态的单个/所有服务。\n\n格式：docker-compose unpause [ service ...]\n\ndocker-compose unpause [ service ...]\n\n\n1\n\n\n\n# logs\n\n查看单个/所有服务的日志信息。\n\n格式：docker-compose logs [ service ...]\n\ndocker-compose logs [ service ...]\n\n\n1\n',charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"Docker - Maven插件",frontmatter:{title:"Docker - Maven插件",date:"2021-12-10T21:17:19.000Z",permalink:"/docker/maven-plugin/",categories:["Docker"],tags:["容器部署"],readingShow:"top"},regularPath:"/40.%E5%B7%A5%E5%85%B7/40.%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2%20-%20Docker/23.Docker%20-%20Maven%E6%8F%92%E4%BB%B6.html",relativePath:"40.工具/40.容器部署 - Docker/23.Docker - Maven插件.md",key:"v-5933aeef",path:"/docker/maven-plugin/",headers:[{level:2,title:"插件介绍",slug:"插件介绍",normalizedTitle:"插件介绍",charIndex:134},{level:2,title:"开放Docker",slug:"开放docker",normalizedTitle:"开放docker",charIndex:142},{level:3,title:"开启远程访问",slug:"开启远程访问",normalizedTitle:"开启远程访问",charIndex:156},{level:3,title:"远程访问测试",slug:"远程访问测试",normalizedTitle:"远程访问测试",charIndex:168},{level:2,title:"Docker工具",slug:"docker工具",normalizedTitle:"docker工具",charIndex:178},{level:3,title:"工具下载",slug:"工具下载",normalizedTitle:"工具下载",charIndex:192},{level:3,title:"工具使用",slug:"工具使用",normalizedTitle:"工具使用",charIndex:202},{level:2,title:"Docker插件",slug:"docker插件",normalizedTitle:"docker插件",charIndex:210},{level:3,title:"标签方式",slug:"标签方式",normalizedTitle:"标签方式",charIndex:224},{level:3,title:"Dockerfile方式",slug:"dockerfile方式",normalizedTitle:"dockerfile方式",charIndex:234},{level:3,title:"Dockerfile文件",slug:"dockerfile文件",normalizedTitle:"dockerfile文件",charIndex:252},{level:3,title:"pom.xml文件",slug:"pom-xml文件",normalizedTitle:"pom.xml文件",charIndex:270},{level:2,title:"Dockerfile插件",slug:"dockerfile插件",normalizedTitle:"dockerfile插件",charIndex:283},{level:2,title:"插件使用",slug:"插件使用",normalizedTitle:"插件使用",charIndex:299},{level:2,title:"插件总结",slug:"插件总结",normalizedTitle:"插件总结",charIndex:307}],headersStr:"插件介绍 开放Docker 开启远程访问 远程访问测试 Docker工具 工具下载 工具使用 Docker插件 标签方式 Dockerfile方式 Dockerfile文件 pom.xml文件 Dockerfile插件 插件使用 插件总结",content:'笔记\n\n开发完一个 Java Web 项目，我们希望测试它，把它变成一个 Docker 的镜像，然后上传到服务器进行测试，本内容将介绍如何在项目打包的时候构建该包成 Docker 镜像，然后自动上传到服务器上。\n\n2021-12-10 @YoungKbt\n\n\n\n * 插件介绍\n * 开放Docker\n   * 开启远程访问\n   * 远程访问测试\n * Docker工具\n   * 工具下载\n   * 工具使用\n * Docker插件\n   * 标签方式\n   * Dockerfile方式\n   * Dockerfile文件\n   * pom.xml文件\n * Dockerfile插件\n * 插件使用\n * 插件总结\n\n\n\n\n# 插件介绍\n\n插件官网\n\n本内容将在 IDEA 使用一个插件实现：写完一个项目如 Spring 项目，使用 Maven 打成 jar 包的时候，将该 jar 包构建成一个 Docker 镜像，然后自动上传到服务器上，接着你就可以进入服务器，用 Docker 启动这个镜像。\n\nEclipse 同理，只是界面布局、按钮位置不一样。\n\n这个插件支持两种模式：\n\n * Docker 插件 docker-maven-plugin：在 pom.xml 文件指定生成镜像的 jar 包，生成的镜像名、版本等，也可以指定 Dockerfile 文件的路径进行构建\n * Dockerfile 插件 dockerfile-maven-plugin：完全依赖 Dockerfile 文件，利用 Docker 的缓存等优化技术，更快构建镜像\n\n官方更推荐第二种「Dockerfile 插件」，但是身为开发的我们，第一种更直观。\n\n\n# 开放Docker\n\n前面我们说过，将构建的镜像自动上传到服务器，那么怎么自动上传呢，当然是我们需要开放 Docker 的端口，让我们在本地能连接上服务器的 Docker，这样，IDEA 才能上传构建的镜像给 Docker。\n\n\n# 开启远程访问\n\n首先在服务器打开 Docker 的服务文件\n\nvim /usr/lib/systemd/system/docker.service\n\n\n1\n\n\n找到 ExecStart 开头的代码，我的是在 13 行左右，如图：\n\n\n\n将这段代码注释掉，# 代表注释，然后在它下方添加如下内容：\n\n# 注释掉自带的\n#ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock\n\n# 开启 Docker 暴露端口，外界可以连接\nExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock\n\n\n1\n2\n3\n4\n5\n\n\n值得注意的是：2375 端口是 Docker 默认的端口，你也可以换成其他未被使用过的端口。除了端口，其他不用修改\n\n配置完后重启 Docker\n\nsystemctl daemon-reload \nsystemctl restart docker\n\n\n1\n2\n\n\n虚拟机开放 2375 端口\n\nfirewall-cmd --zone=public --add-port=2375/tcp --permanent \nfirewall-cmd --reload\n\n\n1\n2\n\n\n如果是阿里云服务器，则前往阿里云的安全组开放端口。\n\n\n# 远程访问测试\n\n重启 Docker，开放端口后，则需要测试是否成功配置了。\n\n在服务器里执行如下代码：（可以直接执行第 4 行代码）\n\n# 查看端口监听是否开启 \nnetstat -nlpt \n# curl测试是否生效 \ncurl http://127.0.0.1:2375/info\n\n\n1\n2\n3\n4\n\n\n如果返回一大堆东西，则代表 Docker 开放远程访问成功，如图：\n\n\n\n\n# Docker工具\n\n使用 IDEA 安装 Docker 工具，这个工具能让你在 IDEA 直接连接并操作 Docker。不需要连接服务器，即可在 IDEA 启动容器。你想想，一旦将 jar 包构建成镜像并上传到远程服务器的 Docker 后，那么如何启动这个镜像呢，你可以利用 Xshell 等工具连接服务器，然后启动镜像，但是 IDEA 也能直接启动镜像。\n\nIDEA 能操作 Docker，启动镜像，就需要安装这个 Docker 工具。\n\n\n# 工具下载\n\nIDEA 安装 Docker 工具，打开插件市场（File->Settings->Plugins）\n\n\n\n安装 Docker 后，配置 Docker 的远程访问连接\n\n\n\n记住连接的 URL 以 tcp 开头，并且填写之前在 Docker 服务文件配置的暴露端口。\n\n\n# 工具使用\n\n\n\n如果启动一个镜像，则右键->create Container\n\n\n\n点击 create Container 后弹出一个窗口，这些就是 docker run 需要的其他指令，如 --name、-p 等\n\n\n\n如果觉得别扭，直接在 Run options 写除了 docerk run 镜像 的其他完整的命令。\n\n\n\n注意看 Command preview 的命令演示，对比确保自己的命令正确。\n\n\n# Docker插件\n\n首先构建的镜像需要基于 jdk 镜像，我安装的是 jdk8\n\ndocker pull openjdk:8u312-jdk-slim-buster\n\n\n1\n\n\n\n\n\n# 标签方式\n\n言语不及代码来的直接，在 pom.xml 文件添加如下代码\n\n<build>\n    <plugins>\n        \x3c!-- 其他插件 --\x3e\n        <plugin>\n            <groupId>com.spotify</groupId>\n            <artifactId>docker-maven-plugin</artifactId>\n            <version>1.2.2</version>\n            <executions>\n                \x3c!-- Maven 打包后，然后对该包执行 docker build 构建成镜像--\x3e\n                <execution>\n                    <id>build-image</id>\n                    <phase>package</phase>\n                    <goals>\n                        \x3c!-- Maven 打包时，不希望构建镜像，则注释掉下面的 goal --\x3e\n                        <goal>build</goal>\n                    </goals>\n                </execution>\n            </executions>\n            \x3c!-- 配置构建的镜像信息 --\x3e\n            < <configuration>\n            \x3c!-- 指定远程 Docker API 地址，http 开头 --\x3e\n            <dockerHost>http://192.168.199.27:2375</dockerHost>\n            \x3c!-- 构建的镜像名称以及版本号。${project.artifactId} 代表项目的 <artifactId> 名 --\x3e\n            <imageName>${project.artifactId}</imageName>\n            <imageTags>\n                <imageTag>latest</imageTag>\n            </imageTags>\n            \x3c!-- 依赖的基础镜像 --\x3e\n            <baseImage>openjdk:8u312-jdk-slim-buster</baseImage>\n            \x3c!-- 暴露的端口，和项目保持一致 --\x3e\n            <exposes>8080</exposes>\n            \x3c!-- 工作目录，即进入容器后所处的默认目录 --\x3e\n            <workdir>/ROOT</workdir>\n            \x3c!-- 启动容器时，自动执行的命令。${project.build.finalName}是 打成 jar 包的名字 --\x3e\n            <entryPoint>["java", "-jar", "${project.build.finalName}.jar"]</entryPoint>\n            \x3c!-- 下面是复制 jar 包到 docker 容器指定目录配置--\x3e\n            <resources>\n                <resource>\n                    \x3c!-- 复制到容器的 /ROOT 目录下 --\x3e\n                    <targetPath>/ROOT</targetPath>\n                    \x3c!-- 用于指定需要复制的根目录。${project.build.directory} 表示 target 目录 --\x3e\n                    <directory>${project.build.directory}</directory>\n                    \x3c!-- 用于指定需要复制的文件，${project.build.finalName}.jar 是打包后的 target 目录下的 jar 包名称　--\x3e\n                    <include>${project.build.finalName}.jar</include>\n                </resource>\n            </resources>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n\n\n该插件目前最新版是 1.2.2，可以在官网查看。\n\n代码我都有注释讲解，而且和 Dockerfile 的知识差不多，只不过以标签形式输出\n\n这里说明下 <workdir> 和 <targetPath> 的联系：\n\n * <workdir> 是容器的工作目录，即进入容器时，所处的默认目录，这里是 /ROOT 目录\n * <targetPath> 是将生成的 jar 包拷贝到的目录名\n\n因为启动镜像后，镜像会执行 <entryPoint> 指定的命令：java -jar xx.jar，那么它会在哪里执行呢？肯定是在工作目录，也就是在 /ROOT 目录执行这个命令，那么 xx.jar 也需要处于这个 /ROOT 目录，不然会报错找不到 xx.jar 包。所以我们需要确保 jar 包拷贝到 <targetPath> 指定的目录和 <workdir> 一致。\n\n要么两者都是 /ROOT 目录，要么都是其他名字一样的目录。\n\n注意\n\n无法在复制的时候，对 jar 包重命名，比如 jar 包名叫 bx.jar，无法在复制到容器时修改为其他名 xx.jar，如果你希望能在容器中重命名 jar 包，请使用 Dockerfile 插件方式。\n\n如果写成 /ROOT/xx.jar，那么它会创建 xx.jar 目录而不是重命名为 xx.jar。\n\n2021-11-11 @村长\n\n\n# Dockerfile方式\n\n该方式依然使用 docker-maven-plugin 插件，实际上就是先写个 Dockerfile 文件，然后填写这个文件所在的路径即可，文件内容就是上方指定的那些标签数据。\n\n\n# Dockerfile文件\n\n首先在与 pom.xml 同级目录下创建 Dockerfile 文件（你也可以在其他路径创建该文件，但我建议就与 pom.xml 同级，为什么？请看下面）\n\n\n\nDockerfile 文件内容：\n\nFROM openjdk:8u312-jdk-slim-buster8\t\t# 基于 jdk8 镜像构建\nMAINTAINER YoungKbt 2456019588@qq.com\t# 镜像的作者信息\nEXPOSE 8080\t\t\t\t\t\t\t\t# 镜像暴露的端口\nWORKDIR /ROOT\t\t\t\t\t\t\t# 工作目录，也是进入容器所处的默认目录\nADD target/bx.jar /ROOT/app.jar\t    \t# 将 target 目录下的jar包，拷贝至容器里的 /ROO目录，并改名\nENTRYPOINT ["java", "-jar"]   \t\t\t# 容器启动时，执行的命令\nCMD ["app.jar"]\t\t\t\t\t\t\t# 容器启动时，执行的命令\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n其实我给 openjdk 的版本重命名了，叫 8，所以我的是 FROM openjdk:8。不懂如何重命名？重命名传送门。\n\n你要确定你生成的 jar 包目录在哪，我的就在 target 目录下，因为 Dockerfile 和 target 目录同级，所以不需要使用 ../、/xx/xx 之类的路径。建议 Dockerfile 文件路径和 pom.xml、target 保持一致。\n\n这里主要介绍 ENTRYPOINT 和 CMD 之类的组合使用：\n\n * 两者都是在镜像启动时，执行相应的命令\n * CMD 要执行的命令在启动时可以被覆盖\n * ENTRYPOINT 要执行的命令在启动时虽然也可以被覆盖，但是需要 --entrypoint 指令，比较麻烦\n\n举个例子，如果直接启动镜像，如 bx 镜像：\n\ndocker run bx:1.0\n\n\n1\n\n\n那么启动镜像后，该镜像就会执行 java -jar app.jar 命令。\n\n我们也可以这样写：\n\ndocker run bx:1.0 bx.jar\n\n\n1\n\n\n此时启动镜像后，该镜像就会执行 java -jar bx.jarr 命令，将相当于可以传参给 CMD，如果不传参，CMD 也有一个自己的默认值 app.jar。\n\n\n# pom.xml文件\n\n写完 Dockerfile 文件后，我们需要在 pom.xml 文件引用写好的 Dockerfile 文件\n\n<build>\n    <plugins>\n        \x3c!-- 其他插件 --\x3e\n        <plugin>\n            <groupId>com.spotify</groupId>\n            <artifactId>docker-maven-plugin</artifactId>\n            <version>1.2.2</version>\n            <executions>\n                \x3c!-- Maven 打包后，然后对该包执行 docker build 构建成镜像--\x3e\n                <execution>\n                    <id>build-image</id>\n                    <phase>package</phase>\n                    <goals>\n                        <goal>build</goal>\n                    </goals>\n                </execution>\n            </executions>\n            \x3c!-- 配置构建的镜像信息 --\x3e\n            <configuration>\n                \x3c!-- 指定远程 Docker API 地址，http 开头 --\x3e\n                <dockerHost>http://192.168.199.27:2375</dockerHost>\n                \x3c!-- 构建的镜像名称以及版本号。${project.artifactId} 代表项目的 <artifactId> 名 --\x3e\n                <imageName>${project.artifactId}</imageName>\n                <imageTags>\n                    <imageTag>latest</imageTag>\n                </imageTags>\n                \x3c!-- Dockerfile 的位置。${project.basedir} 是项目的根路径--\x3e\n                <dockerDirectory>${project.basedir}</dockerDirectory>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n代码非常简单，除了指定构建镜像的名字和版本，只需要引入 Dockerfile 文件即可，${project.basedir} 是项目的根路径。\n\n\n# Dockerfile插件\n\nDockerfile 的专属插件叫 dockerfile-maven-plugin，虽然 Docker 插件也支持引入 Dockerfile 文件，但是 Dockerfile 插件对 Dockerfile 的支持以及构建的过程处理更加得当。\n\n<build>\n    <plugins>\n        <plugin>\n            <groupId>com.spotify</groupId>\n            <artifactId>dockerfile-maven-plugin</artifactId>\n            <version>1.4.13</version>\n            <executions>\n                <execution>\n                    <id>default</id>\n                    <goals>\n                        \x3c!-- 如果 Maven 打包时不想用构建镜像，就注释掉这个 goal --\x3e\n                        <goal>build</goal>\n                    </goals>\n                </execution>\n            </executions>\n            <configuration>\n                \x3c!-- 上下文目录，也就是 Dockerfile 的目录 --\x3e\n                <contextDirectory>${project.basedir}</contextDirectory>\n                \x3c!-- 服务器地址，以及镜像名，斜杠隔开 --\x3e\n                <repository>192.168.199.27:2375/${project.artifactId}</repository>\n                \x3c!-- 镜像版本 TAG --\x3e\n                <tag>${project.version}</tag>\n                \x3c!-- 向 Dockerfile 传递参数--\x3e\n                <buildArgs>\n                    \x3c!-- 传递了打包的包路径给 Dockerfile 的 ARG 变量，基于当前目录下的 target --\x3e\n                    <JAR_FILE>target/${project.build.finalName}.jar</JAR_FILE>\n                </buildArgs>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n值得做注意的是：服务器地址填写在 <repository> 标签里的第一个位置，/ 后的是镜像名。\n\nDockerfile 文件内容：\n\nFROM openjdk:8\nMAINTAINER YoungKbt 2456019588@qq.com\nEXPOSE 8080\nARG JAR_FILE\nADD ${JAR_FILE} /app.jar\nENTRYPOINT ["java", "-jar"]\nCMD ["app.jar"]\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nARG 代表定义变量，并且获取传来的 jar 包路径，赋值给变量 JAR_FILE。\n\nDockerfile 插件需要进行配置本地变量，容易报错。建议初学者使用 Docker 插件。\n\n\n# 插件使用\n\n无论是使用 Docker 插件还是 Dockerfile 插件，使用起来非常简单，直接使用 Maven 执行打包即可，Maven 打包后会自动将该包构建成镜像，然后上传到服务器的 Docker 中。\n\n\n\n点击 package，执行打包操作后，等待、看着控制台的变化，当出现 BUILD SUCCESS，则代表成功。此时可以使用刚刚安装的 Docker 工具，连接服务器的 Docker，然后启动这个镜像。\n\n\n\n\n# 插件总结\n\n至于选择 Docker 插件还是 Dockerfile 插件，取决于你的想法，我比较喜欢 Docker 插件，清晰直观，并且 Docker 插件也支持 Dockerfile 方式。最主要的是 Dockerfile 插件需要配置环境变量，如果快速开发选择 Docker 插件。\n\n官方建议的是 Dockerfile 插件。\n\n可能大家有些疑惑，如果 Docker 插件的两种方式都写上去，也就是把 <dockerDirectory>${project.basedir}</dockerDirectory> 写到 Docker 插件的 pom.xml 文件，那么谁生效，当然是 Dockerfile 生效，官方说：使用 Dockerfile 后，如果指定了 baseImage、maintainer、exposes、cmd 和 entryPoint 等元素，它们将被忽略掉，直接使用 Dockerfile 文件的内容。\n\n当然你也可以像我一样，两种方式全部一股脑的放在 pom.xml 文件里\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n        </plugin>\n        \x3c!--  Docker 镜像  --\x3e\n        <plugin>\n            <groupId>com.spotify</groupId>\n            <artifactId>docker-maven-plugin</artifactId>\n            <version>1.2.2</version>\n            <executions>\n                \x3c!--执行 mvn package，即执行 mvn clean package docker:build--\x3e\n                <execution>\n                    <id>build-image</id>\n                    <phase>package</phase>\n                    <goals>\n                        <goal>build</goal>\n                    </goals>\n                </execution>\n            </executions>\n\n            <configuration>\n               \x3c!-- 指定远程 Docker API 地址，http 开头 --\x3e\n                <dockerHost>http://192.168.199.27:2375</dockerHost>\n                \x3c!-- 构建的镜像名称以及版本号。${project.artifactId} 代表项目的 <artifactId> 名 --\x3e\n                <imageName>${project.artifactId}</imageName>\n                <imageTags>\n                    <imageTag>latest</imageTag>\n                </imageTags>\n                \x3c!--依赖的基础镜像--\x3e\n                <baseImage>openjdk:8</baseImage>\n                \x3c!-- Dockerfile 的位置--\x3e\n                \x3c!--<dockerDirectory>${project.basedir}</dockerDirectory>--\x3e\n                \x3c!-- 暴露的端口，和项目保持一致 --\x3e\n                <exposes>8080</exposes>\n                \x3c!-- 工作目录，即进入容器后所处的默认目录 --\x3e\n                <workdir>/ROOT</workdir>\n                \x3c!-- 启动容器时，自动执行的命令。${project.build.finalName}是 打成 jar 包的名字 --\x3e\n                <entryPoint>["java", "-jar", "${project.build.finalName}.jar"]</entryPoint>\n                \x3c!-- 下面是复制 jar 包到 docker 容器指定目录配置--\x3e\n                <resources>\n                    <resource>\n                        \x3c!-- 复制到容器的 /ROOT 目录下 --\x3e\n                        <targetPath>/ROOT</targetPath>\n                        \x3c!-- 用于指定需要复制的根目录，${project.build.directory} 表示 target 目录 --\x3e\n                        <directory>${project.build.directory}</directory>\n                        \x3c!-- 用于指定需要复制的文件，${project.build.finalName}.jar 是打包后的 target 目录下的 jar 包名称　--\x3e\n                        <include>${project.build.finalName}.jar</include>\n                    </resource>\n                </resources>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n\n\n需要 Dockerfile 方式的时候将 34 行代码取消注释，不需要的时候打开注释。\n\n笔记\n\n如果构建两次名字和版本相同的镜像到 Docker 中，那么第一个镜像会变成 <none>，如图：\n\n\n\n2021-12-11 @村长\n\n如果希望打成 war 包，那么只需要把基础镜像换成 tomcat 镜像，并将 target/xx.war 拷贝到 tomcat 容器的 usr/local/tomcat/webapps/ 目录下即可。',normalizedContent:'笔记\n\n开发完一个 java web 项目，我们希望测试它，把它变成一个 docker 的镜像，然后上传到服务器进行测试，本内容将介绍如何在项目打包的时候构建该包成 docker 镜像，然后自动上传到服务器上。\n\n2021-12-10 @youngkbt\n\n\n\n * 插件介绍\n * 开放docker\n   * 开启远程访问\n   * 远程访问测试\n * docker工具\n   * 工具下载\n   * 工具使用\n * docker插件\n   * 标签方式\n   * dockerfile方式\n   * dockerfile文件\n   * pom.xml文件\n * dockerfile插件\n * 插件使用\n * 插件总结\n\n\n\n\n# 插件介绍\n\n插件官网\n\n本内容将在 idea 使用一个插件实现：写完一个项目如 spring 项目，使用 maven 打成 jar 包的时候，将该 jar 包构建成一个 docker 镜像，然后自动上传到服务器上，接着你就可以进入服务器，用 docker 启动这个镜像。\n\neclipse 同理，只是界面布局、按钮位置不一样。\n\n这个插件支持两种模式：\n\n * docker 插件 docker-maven-plugin：在 pom.xml 文件指定生成镜像的 jar 包，生成的镜像名、版本等，也可以指定 dockerfile 文件的路径进行构建\n * dockerfile 插件 dockerfile-maven-plugin：完全依赖 dockerfile 文件，利用 docker 的缓存等优化技术，更快构建镜像\n\n官方更推荐第二种「dockerfile 插件」，但是身为开发的我们，第一种更直观。\n\n\n# 开放docker\n\n前面我们说过，将构建的镜像自动上传到服务器，那么怎么自动上传呢，当然是我们需要开放 docker 的端口，让我们在本地能连接上服务器的 docker，这样，idea 才能上传构建的镜像给 docker。\n\n\n# 开启远程访问\n\n首先在服务器打开 docker 的服务文件\n\nvim /usr/lib/systemd/system/docker.service\n\n\n1\n\n\n找到 execstart 开头的代码，我的是在 13 行左右，如图：\n\n\n\n将这段代码注释掉，# 代表注释，然后在它下方添加如下内容：\n\n# 注释掉自带的\n#execstart=/usr/bin/dockerd -h fd:// --containerd=/run/containerd/containerd.sock\n\n# 开启 docker 暴露端口，外界可以连接\nexecstart=/usr/bin/dockerd -h tcp://0.0.0.0:2375 -h unix:///var/run/docker.sock\n\n\n1\n2\n3\n4\n5\n\n\n值得注意的是：2375 端口是 docker 默认的端口，你也可以换成其他未被使用过的端口。除了端口，其他不用修改\n\n配置完后重启 docker\n\nsystemctl daemon-reload \nsystemctl restart docker\n\n\n1\n2\n\n\n虚拟机开放 2375 端口\n\nfirewall-cmd --zone=public --add-port=2375/tcp --permanent \nfirewall-cmd --reload\n\n\n1\n2\n\n\n如果是阿里云服务器，则前往阿里云的安全组开放端口。\n\n\n# 远程访问测试\n\n重启 docker，开放端口后，则需要测试是否成功配置了。\n\n在服务器里执行如下代码：（可以直接执行第 4 行代码）\n\n# 查看端口监听是否开启 \nnetstat -nlpt \n# curl测试是否生效 \ncurl http://127.0.0.1:2375/info\n\n\n1\n2\n3\n4\n\n\n如果返回一大堆东西，则代表 docker 开放远程访问成功，如图：\n\n\n\n\n# docker工具\n\n使用 idea 安装 docker 工具，这个工具能让你在 idea 直接连接并操作 docker。不需要连接服务器，即可在 idea 启动容器。你想想，一旦将 jar 包构建成镜像并上传到远程服务器的 docker 后，那么如何启动这个镜像呢，你可以利用 xshell 等工具连接服务器，然后启动镜像，但是 idea 也能直接启动镜像。\n\nidea 能操作 docker，启动镜像，就需要安装这个 docker 工具。\n\n\n# 工具下载\n\nidea 安装 docker 工具，打开插件市场（file->settings->plugins）\n\n\n\n安装 docker 后，配置 docker 的远程访问连接\n\n\n\n记住连接的 url 以 tcp 开头，并且填写之前在 docker 服务文件配置的暴露端口。\n\n\n# 工具使用\n\n\n\n如果启动一个镜像，则右键->create container\n\n\n\n点击 create container 后弹出一个窗口，这些就是 docker run 需要的其他指令，如 --name、-p 等\n\n\n\n如果觉得别扭，直接在 run options 写除了 docerk run 镜像 的其他完整的命令。\n\n\n\n注意看 command preview 的命令演示，对比确保自己的命令正确。\n\n\n# docker插件\n\n首先构建的镜像需要基于 jdk 镜像，我安装的是 jdk8\n\ndocker pull openjdk:8u312-jdk-slim-buster\n\n\n1\n\n\n\n\n\n# 标签方式\n\n言语不及代码来的直接，在 pom.xml 文件添加如下代码\n\n<build>\n    <plugins>\n        \x3c!-- 其他插件 --\x3e\n        <plugin>\n            <groupid>com.spotify</groupid>\n            <artifactid>docker-maven-plugin</artifactid>\n            <version>1.2.2</version>\n            <executions>\n                \x3c!-- maven 打包后，然后对该包执行 docker build 构建成镜像--\x3e\n                <execution>\n                    <id>build-image</id>\n                    <phase>package</phase>\n                    <goals>\n                        \x3c!-- maven 打包时，不希望构建镜像，则注释掉下面的 goal --\x3e\n                        <goal>build</goal>\n                    </goals>\n                </execution>\n            </executions>\n            \x3c!-- 配置构建的镜像信息 --\x3e\n            < <configuration>\n            \x3c!-- 指定远程 docker api 地址，http 开头 --\x3e\n            <dockerhost>http://192.168.199.27:2375</dockerhost>\n            \x3c!-- 构建的镜像名称以及版本号。${project.artifactid} 代表项目的 <artifactid> 名 --\x3e\n            <imagename>${project.artifactid}</imagename>\n            <imagetags>\n                <imagetag>latest</imagetag>\n            </imagetags>\n            \x3c!-- 依赖的基础镜像 --\x3e\n            <baseimage>openjdk:8u312-jdk-slim-buster</baseimage>\n            \x3c!-- 暴露的端口，和项目保持一致 --\x3e\n            <exposes>8080</exposes>\n            \x3c!-- 工作目录，即进入容器后所处的默认目录 --\x3e\n            <workdir>/root</workdir>\n            \x3c!-- 启动容器时，自动执行的命令。${project.build.finalname}是 打成 jar 包的名字 --\x3e\n            <entrypoint>["java", "-jar", "${project.build.finalname}.jar"]</entrypoint>\n            \x3c!-- 下面是复制 jar 包到 docker 容器指定目录配置--\x3e\n            <resources>\n                <resource>\n                    \x3c!-- 复制到容器的 /root 目录下 --\x3e\n                    <targetpath>/root</targetpath>\n                    \x3c!-- 用于指定需要复制的根目录。${project.build.directory} 表示 target 目录 --\x3e\n                    <directory>${project.build.directory}</directory>\n                    \x3c!-- 用于指定需要复制的文件，${project.build.finalname}.jar 是打包后的 target 目录下的 jar 包名称　--\x3e\n                    <include>${project.build.finalname}.jar</include>\n                </resource>\n            </resources>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n\n\n该插件目前最新版是 1.2.2，可以在官网查看。\n\n代码我都有注释讲解，而且和 dockerfile 的知识差不多，只不过以标签形式输出\n\n这里说明下 <workdir> 和 <targetpath> 的联系：\n\n * <workdir> 是容器的工作目录，即进入容器时，所处的默认目录，这里是 /root 目录\n * <targetpath> 是将生成的 jar 包拷贝到的目录名\n\n因为启动镜像后，镜像会执行 <entrypoint> 指定的命令：java -jar xx.jar，那么它会在哪里执行呢？肯定是在工作目录，也就是在 /root 目录执行这个命令，那么 xx.jar 也需要处于这个 /root 目录，不然会报错找不到 xx.jar 包。所以我们需要确保 jar 包拷贝到 <targetpath> 指定的目录和 <workdir> 一致。\n\n要么两者都是 /root 目录，要么都是其他名字一样的目录。\n\n注意\n\n无法在复制的时候，对 jar 包重命名，比如 jar 包名叫 bx.jar，无法在复制到容器时修改为其他名 xx.jar，如果你希望能在容器中重命名 jar 包，请使用 dockerfile 插件方式。\n\n如果写成 /root/xx.jar，那么它会创建 xx.jar 目录而不是重命名为 xx.jar。\n\n2021-11-11 @村长\n\n\n# dockerfile方式\n\n该方式依然使用 docker-maven-plugin 插件，实际上就是先写个 dockerfile 文件，然后填写这个文件所在的路径即可，文件内容就是上方指定的那些标签数据。\n\n\n# dockerfile文件\n\n首先在与 pom.xml 同级目录下创建 dockerfile 文件（你也可以在其他路径创建该文件，但我建议就与 pom.xml 同级，为什么？请看下面）\n\n\n\ndockerfile 文件内容：\n\nfrom openjdk:8u312-jdk-slim-buster8\t\t# 基于 jdk8 镜像构建\nmaintainer youngkbt 2456019588@qq.com\t# 镜像的作者信息\nexpose 8080\t\t\t\t\t\t\t\t# 镜像暴露的端口\nworkdir /root\t\t\t\t\t\t\t# 工作目录，也是进入容器所处的默认目录\nadd target/bx.jar /root/app.jar\t    \t# 将 target 目录下的jar包，拷贝至容器里的 /roo目录，并改名\nentrypoint ["java", "-jar"]   \t\t\t# 容器启动时，执行的命令\ncmd ["app.jar"]\t\t\t\t\t\t\t# 容器启动时，执行的命令\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n其实我给 openjdk 的版本重命名了，叫 8，所以我的是 from openjdk:8。不懂如何重命名？重命名传送门。\n\n你要确定你生成的 jar 包目录在哪，我的就在 target 目录下，因为 dockerfile 和 target 目录同级，所以不需要使用 ../、/xx/xx 之类的路径。建议 dockerfile 文件路径和 pom.xml、target 保持一致。\n\n这里主要介绍 entrypoint 和 cmd 之类的组合使用：\n\n * 两者都是在镜像启动时，执行相应的命令\n * cmd 要执行的命令在启动时可以被覆盖\n * entrypoint 要执行的命令在启动时虽然也可以被覆盖，但是需要 --entrypoint 指令，比较麻烦\n\n举个例子，如果直接启动镜像，如 bx 镜像：\n\ndocker run bx:1.0\n\n\n1\n\n\n那么启动镜像后，该镜像就会执行 java -jar app.jar 命令。\n\n我们也可以这样写：\n\ndocker run bx:1.0 bx.jar\n\n\n1\n\n\n此时启动镜像后，该镜像就会执行 java -jar bx.jarr 命令，将相当于可以传参给 cmd，如果不传参，cmd 也有一个自己的默认值 app.jar。\n\n\n# pom.xml文件\n\n写完 dockerfile 文件后，我们需要在 pom.xml 文件引用写好的 dockerfile 文件\n\n<build>\n    <plugins>\n        \x3c!-- 其他插件 --\x3e\n        <plugin>\n            <groupid>com.spotify</groupid>\n            <artifactid>docker-maven-plugin</artifactid>\n            <version>1.2.2</version>\n            <executions>\n                \x3c!-- maven 打包后，然后对该包执行 docker build 构建成镜像--\x3e\n                <execution>\n                    <id>build-image</id>\n                    <phase>package</phase>\n                    <goals>\n                        <goal>build</goal>\n                    </goals>\n                </execution>\n            </executions>\n            \x3c!-- 配置构建的镜像信息 --\x3e\n            <configuration>\n                \x3c!-- 指定远程 docker api 地址，http 开头 --\x3e\n                <dockerhost>http://192.168.199.27:2375</dockerhost>\n                \x3c!-- 构建的镜像名称以及版本号。${project.artifactid} 代表项目的 <artifactid> 名 --\x3e\n                <imagename>${project.artifactid}</imagename>\n                <imagetags>\n                    <imagetag>latest</imagetag>\n                </imagetags>\n                \x3c!-- dockerfile 的位置。${project.basedir} 是项目的根路径--\x3e\n                <dockerdirectory>${project.basedir}</dockerdirectory>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n代码非常简单，除了指定构建镜像的名字和版本，只需要引入 dockerfile 文件即可，${project.basedir} 是项目的根路径。\n\n\n# dockerfile插件\n\ndockerfile 的专属插件叫 dockerfile-maven-plugin，虽然 docker 插件也支持引入 dockerfile 文件，但是 dockerfile 插件对 dockerfile 的支持以及构建的过程处理更加得当。\n\n<build>\n    <plugins>\n        <plugin>\n            <groupid>com.spotify</groupid>\n            <artifactid>dockerfile-maven-plugin</artifactid>\n            <version>1.4.13</version>\n            <executions>\n                <execution>\n                    <id>default</id>\n                    <goals>\n                        \x3c!-- 如果 maven 打包时不想用构建镜像，就注释掉这个 goal --\x3e\n                        <goal>build</goal>\n                    </goals>\n                </execution>\n            </executions>\n            <configuration>\n                \x3c!-- 上下文目录，也就是 dockerfile 的目录 --\x3e\n                <contextdirectory>${project.basedir}</contextdirectory>\n                \x3c!-- 服务器地址，以及镜像名，斜杠隔开 --\x3e\n                <repository>192.168.199.27:2375/${project.artifactid}</repository>\n                \x3c!-- 镜像版本 tag --\x3e\n                <tag>${project.version}</tag>\n                \x3c!-- 向 dockerfile 传递参数--\x3e\n                <buildargs>\n                    \x3c!-- 传递了打包的包路径给 dockerfile 的 arg 变量，基于当前目录下的 target --\x3e\n                    <jar_file>target/${project.build.finalname}.jar</jar_file>\n                </buildargs>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n值得做注意的是：服务器地址填写在 <repository> 标签里的第一个位置，/ 后的是镜像名。\n\ndockerfile 文件内容：\n\nfrom openjdk:8\nmaintainer youngkbt 2456019588@qq.com\nexpose 8080\narg jar_file\nadd ${jar_file} /app.jar\nentrypoint ["java", "-jar"]\ncmd ["app.jar"]\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\narg 代表定义变量，并且获取传来的 jar 包路径，赋值给变量 jar_file。\n\ndockerfile 插件需要进行配置本地变量，容易报错。建议初学者使用 docker 插件。\n\n\n# 插件使用\n\n无论是使用 docker 插件还是 dockerfile 插件，使用起来非常简单，直接使用 maven 执行打包即可，maven 打包后会自动将该包构建成镜像，然后上传到服务器的 docker 中。\n\n\n\n点击 package，执行打包操作后，等待、看着控制台的变化，当出现 build success，则代表成功。此时可以使用刚刚安装的 docker 工具，连接服务器的 docker，然后启动这个镜像。\n\n\n\n\n# 插件总结\n\n至于选择 docker 插件还是 dockerfile 插件，取决于你的想法，我比较喜欢 docker 插件，清晰直观，并且 docker 插件也支持 dockerfile 方式。最主要的是 dockerfile 插件需要配置环境变量，如果快速开发选择 docker 插件。\n\n官方建议的是 dockerfile 插件。\n\n可能大家有些疑惑，如果 docker 插件的两种方式都写上去，也就是把 <dockerdirectory>${project.basedir}</dockerdirectory> 写到 docker 插件的 pom.xml 文件，那么谁生效，当然是 dockerfile 生效，官方说：使用 dockerfile 后，如果指定了 baseimage、maintainer、exposes、cmd 和 entrypoint 等元素，它们将被忽略掉，直接使用 dockerfile 文件的内容。\n\n当然你也可以像我一样，两种方式全部一股脑的放在 pom.xml 文件里\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<build>\n    <plugins>\n        <plugin>\n            <groupid>org.springframework.boot</groupid>\n            <artifactid>spring-boot-maven-plugin</artifactid>\n        </plugin>\n        \x3c!--  docker 镜像  --\x3e\n        <plugin>\n            <groupid>com.spotify</groupid>\n            <artifactid>docker-maven-plugin</artifactid>\n            <version>1.2.2</version>\n            <executions>\n                \x3c!--执行 mvn package，即执行 mvn clean package docker:build--\x3e\n                <execution>\n                    <id>build-image</id>\n                    <phase>package</phase>\n                    <goals>\n                        <goal>build</goal>\n                    </goals>\n                </execution>\n            </executions>\n\n            <configuration>\n               \x3c!-- 指定远程 docker api 地址，http 开头 --\x3e\n                <dockerhost>http://192.168.199.27:2375</dockerhost>\n                \x3c!-- 构建的镜像名称以及版本号。${project.artifactid} 代表项目的 <artifactid> 名 --\x3e\n                <imagename>${project.artifactid}</imagename>\n                <imagetags>\n                    <imagetag>latest</imagetag>\n                </imagetags>\n                \x3c!--依赖的基础镜像--\x3e\n                <baseimage>openjdk:8</baseimage>\n                \x3c!-- dockerfile 的位置--\x3e\n                \x3c!--<dockerdirectory>${project.basedir}</dockerdirectory>--\x3e\n                \x3c!-- 暴露的端口，和项目保持一致 --\x3e\n                <exposes>8080</exposes>\n                \x3c!-- 工作目录，即进入容器后所处的默认目录 --\x3e\n                <workdir>/root</workdir>\n                \x3c!-- 启动容器时，自动执行的命令。${project.build.finalname}是 打成 jar 包的名字 --\x3e\n                <entrypoint>["java", "-jar", "${project.build.finalname}.jar"]</entrypoint>\n                \x3c!-- 下面是复制 jar 包到 docker 容器指定目录配置--\x3e\n                <resources>\n                    <resource>\n                        \x3c!-- 复制到容器的 /root 目录下 --\x3e\n                        <targetpath>/root</targetpath>\n                        \x3c!-- 用于指定需要复制的根目录，${project.build.directory} 表示 target 目录 --\x3e\n                        <directory>${project.build.directory}</directory>\n                        \x3c!-- 用于指定需要复制的文件，${project.build.finalname}.jar 是打包后的 target 目录下的 jar 包名称　--\x3e\n                        <include>${project.build.finalname}.jar</include>\n                    </resource>\n                </resources>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n\n\n需要 dockerfile 方式的时候将 34 行代码取消注释，不需要的时候打开注释。\n\n笔记\n\n如果构建两次名字和版本相同的镜像到 docker 中，那么第一个镜像会变成 <none>，如图：\n\n\n\n2021-12-11 @村长\n\n如果希望打成 war 包，那么只需要把基础镜像换成 tomcat 镜像，并将 target/xx.war 拷贝到 tomcat 容器的 usr/local/tomcat/webapps/ 目录下即可。',charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"友情连接",frontmatter:{title:"友情连接",date:"2021-10-28T12:52:20.000Z",permalink:"/friends",article:!1,sidebar:!1,comment:!0,readingShow:"top"},regularPath:"/55.%E6%9B%B4%E5%A4%9A/99.%E5%8F%8B%E6%83%85%E8%BF%9E%E6%8E%A5.html",relativePath:"55.更多/99.友情连接.md",key:"v-eb6c7c6e",path:"/friends/",headersStr:null,content:"George Chan\n\n让我给你讲讲他的传奇故事吧\n\nbutcher2000\n\n即使再小的帆，也能远航\n\nEvan's blog\n\n前端的小学生\n\n二丫讲梵\n\n💻学习📝记录🔗分享\n\nWeibw\n\n一个没有梦想的咸鱼\n\nJava 全栈知识体系\n\nJava 全栈知识体系\n\n- name: George Chan\n  desc: 让我给你讲讲他的传奇故事吧\n  avatar: https://z3.ax1x.com/2021/09/30/4oKMVI.jpg\n  link: https://cyc0819.top/\n  bgColor: '#FFB6C1'\n  textColor: '#621529'  \n  \n- name: butcher2000\n  desc: 即使再小的帆，也能远航\n  avatar: https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/user/20211029181901.png\n  link: https://blog.csdn.net/weixin_46827107\n  bgColor: '#CBEAFA'\n  textColor: '#6854A1'\n  \n- name: Evan's blog\n  desc: 前端的小学生\n  avatar: https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200103123203.jpg\n  link: https://xugaoyi.com/\n  bgColor: '#B9D59C'\n  textColor: '#3B551F'\n\n- name: 二丫讲梵\n  desc: 💻学习📝记录🔗分享\n  avatar: https://wiki.eryajf.net/img/logo.png\n  link: https://wiki.eryajf.net/\n  bgColor: '#FBEBEC'\n  textColor: '#603420'\n\n- name: Weibw\n  link: http://weibw162.com/\n  avatar: https://cdn.jsdelivr.net/gh/Weibw162/image-hosting@dev/%E6%9D%82%E5%BD%95/image.735febsv1zo0.webp\n  desc: 一个没有梦想的咸鱼\n  bgColor: '#FFCEDE'\n  textColor: '#621529'\n  \n- name: Java 全栈知识体系\n  desc: Java 全栈知识体系\n  avatar: https://www.pdai.tech/_images/index-read.gif\n  link: https://www.pdai.tech/\n  bgColor: '#FCDBA0'\n  textColor: '#A05F2C'\n  \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n与我 联系 或者 在本页面评论区留言您的友链信息，格式：(点击代码块右上角一键复制)\n\n- name: 村长的菜鸟驿站\t# 昵称\n  desc: 你所有的悲伤都是源于技术的不足\t# 介绍\n  avatar: https://qiniu.image.cq-wnl.com/content/202203306f5a2eb785aa45b2be021bb262e84397_647.jpg\t# 头像\n  link: https://haungguanhao.com/\t# 链接\n  bgColor: '#FFB6C1'\t# 可选\n  textColor: '#621529'\t# 可选\n\n\n1\n2\n3\n4\n5\n6\n\n\n申请前记得先添加本站哦~",normalizedContent:"george chan\n\n让我给你讲讲他的传奇故事吧\n\nbutcher2000\n\n即使再小的帆，也能远航\n\nevan's blog\n\n前端的小学生\n\n二丫讲梵\n\n💻学习📝记录🔗分享\n\nweibw\n\n一个没有梦想的咸鱼\n\njava 全栈知识体系\n\njava 全栈知识体系\n\n- name: george chan\n  desc: 让我给你讲讲他的传奇故事吧\n  avatar: https://z3.ax1x.com/2021/09/30/4okmvi.jpg\n  link: https://cyc0819.top/\n  bgcolor: '#ffb6c1'\n  textcolor: '#621529'  \n  \n- name: butcher2000\n  desc: 即使再小的帆，也能远航\n  avatar: https://cdn.jsdelivr.net/gh/kele-bingtang/static/user/20211029181901.png\n  link: https://blog.csdn.net/weixin_46827107\n  bgcolor: '#cbeafa'\n  textcolor: '#6854a1'\n  \n- name: evan's blog\n  desc: 前端的小学生\n  avatar: https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200103123203.jpg\n  link: https://xugaoyi.com/\n  bgcolor: '#b9d59c'\n  textcolor: '#3b551f'\n\n- name: 二丫讲梵\n  desc: 💻学习📝记录🔗分享\n  avatar: https://wiki.eryajf.net/img/logo.png\n  link: https://wiki.eryajf.net/\n  bgcolor: '#fbebec'\n  textcolor: '#603420'\n\n- name: weibw\n  link: http://weibw162.com/\n  avatar: https://cdn.jsdelivr.net/gh/weibw162/image-hosting@dev/%e6%9d%82%e5%bd%95/image.735febsv1zo0.webp\n  desc: 一个没有梦想的咸鱼\n  bgcolor: '#ffcede'\n  textcolor: '#621529'\n  \n- name: java 全栈知识体系\n  desc: java 全栈知识体系\n  avatar: https://www.pdai.tech/_images/index-read.gif\n  link: https://www.pdai.tech/\n  bgcolor: '#fcdba0'\n  textcolor: '#a05f2c'\n  \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n与我 联系 或者 在本页面评论区留言您的友链信息，格式：(点击代码块右上角一键复制)\n\n- name: 村长的菜鸟驿站\t# 昵称\n  desc: 你所有的悲伤都是源于技术的不足\t# 介绍\n  avatar: https://qiniu.image.cq-wnl.com/content/202203306f5a2eb785aa45b2be021bb262e84397_647.jpg\t# 头像\n  link: https://haungguanhao.com/\t# 链接\n  bgcolor: '#ffb6c1'\t# 可选\n  textcolor: '#621529'\t# 可选\n\n\n1\n2\n3\n4\n5\n6\n\n\n申请前记得先添加本站哦~",charsets:{cjk:!0},lastUpdated:"2022/04/07, 12:28:10"},{title:"工具介绍",frontmatter:{title:"工具介绍",date:"2021-10-29T14:04:17.000Z",permalink:"/whells-use/",categories:["轮子使用"],tags:["轮子"],readingShow:"top"},regularPath:"/57.%E8%BD%AE%E5%AD%90%E5%B7%A5%E5%85%B7/05.%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/01.%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D.html",relativePath:"57.轮子工具/05.工具使用/01.工具介绍.md",key:"v-79a818aa",path:"/whells-use/",headers:[{level:2,title:"Windows 装机",slug:"windows-装机",normalizedTitle:"windows 装机",charIndex:31},{level:2,title:"图床",slug:"图床",normalizedTitle:"图床",charIndex:249},{level:2,title:"公式",slug:"公式",normalizedTitle:"公式",charIndex:282}],headersStr:"Windows 装机 图床 公式",content:"不定时更新一些网站、工具、插件的使用过程，以及心得。\n\n\n# Windows 装机\n\n * 1clipboard：粘贴板工具\n * Snipaste：截图工具，能固定在桌面\n * FastStone Capture：截图工具 & 编辑工具 & 录屏工具，轻巧\n * mybase：个人知识管理工具\n * utools：uTools 是一个极简、插件化、跨平台的现代桌面软件。通过自由选配丰富的插件，打造你得心应手的工具集合。当你熟悉它后，能够为你节约大量时间，让你可以更加专注地改变世界。\n\n\n# 图床\n\n * PicGo：支持多种网站，有各种丰富的插件\n\n\n# 公式\n\n * Mathpix Snip：通过截图识别公式，然后粘贴生成的代码到 MathType，该软件自动解析代码还原成公式，然后就可以粘贴公式到 Word 或者其他文件中\n   \n   Mathpix Snip 官网：https://mathpix.com/\n   \n   Math Type 需要付费，可以下载破解版",normalizedContent:"不定时更新一些网站、工具、插件的使用过程，以及心得。\n\n\n# windows 装机\n\n * 1clipboard：粘贴板工具\n * snipaste：截图工具，能固定在桌面\n * faststone capture：截图工具 & 编辑工具 & 录屏工具，轻巧\n * mybase：个人知识管理工具\n * utools：utools 是一个极简、插件化、跨平台的现代桌面软件。通过自由选配丰富的插件，打造你得心应手的工具集合。当你熟悉它后，能够为你节约大量时间，让你可以更加专注地改变世界。\n\n\n# 图床\n\n * picgo：支持多种网站，有各种丰富的插件\n\n\n# 公式\n\n * mathpix snip：通过截图识别公式，然后粘贴生成的代码到 mathtype，该软件自动解析代码还原成公式，然后就可以粘贴公式到 word 或者其他文件中\n   \n   mathpix snip 官网：https://mathpix.com/\n   \n   math type 需要付费，可以下载破解版",charsets:{cjk:!0},lastUpdated:"2022/04/05, 14:44:34"},{title:"Shields - 徽章",frontmatter:{title:"Shields - 徽章",date:"2021-10-29T14:08:41.000Z",permalink:"/shields/",categories:["轮子使用"],tags:["徽章"],readingShow:"top"},regularPath:"/57.%E8%BD%AE%E5%AD%90%E5%B7%A5%E5%85%B7/05.%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/03.Shields%20-%20%E5%BE%BD%E7%AB%A0.html",relativePath:"57.轮子工具/05.工具使用/03.Shields - 徽章.md",key:"v-6b4d5401",path:"/shields/",headers:[{level:2,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:2},{level:2,title:"静态徽章",slug:"静态徽章",normalizedTitle:"静态徽章",charIndex:86},{level:3,title:"介绍",slug:"介绍-2",normalizedTitle:"介绍",charIndex:2},{level:3,title:"例子",slug:"例子",normalizedTitle:"例子",charIndex:786},{level:2,title:"端点徽章",slug:"端点徽章",normalizedTitle:"端点徽章",charIndex:908},{level:3,title:"例子",slug:"例子-2",normalizedTitle:"例子",charIndex:786},{level:3,title:"总结：",slug:"总结",normalizedTitle:"总结：",charIndex:2107},{level:2,title:"动态徽章",slug:"动态徽章",normalizedTitle:"动态徽章",charIndex:932},{level:3,title:"例子1",slug:"例子1",normalizedTitle:"例子1",charIndex:2586},{level:3,title:"例子2",slug:"例子2",normalizedTitle:"例子2",charIndex:2918},{level:2,title:"图标徽章",slug:"图标徽章",normalizedTitle:"图标徽章",charIndex:1643}],headersStr:"介绍 静态徽章 介绍 例子 端点徽章 例子 总结： 动态徽章 例子1 例子2 图标徽章",content:"# 介绍\n\n如果你曾在很多地方看到如下徽章：\n\n\n\n如果你也对此眼热，想自己的主页或者其他地方有类似的徽章，那么 Shields 会满足你\n\nShields 官网\n\n\n# 静态徽章\n\n进入 Shields 网站，会看到密密麻麻的英文，如果看不懂，可以使用谷歌翻译。\n\n往下滑，找到如图所示：\n\n\n\n圈住的红框代表这是静态的徽章设计区域，即设计出来的徽章是固定的，不是动态的。\n\n静态的徽章设计很简单，如果记得格式，不需要每次都来官网设计，直接敲 url 对应的格式即可\n\n\n# 介绍\n\n静态徽章的 url 格式如上图：https://img.shields.io/badge/<LABEL>-<MESSAGE>-<COLOR>\n\n只需要在三个文本框输入想要的内容即可，并点击Make Badge，这三个参数从左到右分别为左边内容、右边内容、右边背景色\n\n如下图：\n\n\n\n最后生成的内容为\n\n\n\n结合上方图片的不同的颜色箭头，再根据 url 的格式可以得出总结、理解这个格式：https://img.shields.io/badge/<LABEL>-<MESSAGE>-<COLOR>\n\n需要改变的是 <LABEL>、<MESSAGE>、<COLOR>\n\n只要记住了 Shields 的 url 前缀，通过手动输入 url 也可以自动生成徽章，不需要来到官网。\n\n提示\n\n三个参数之间用 - 隔开，如果前两个参数想要出现空格，比如 spring boot，需要输入 spring%20boot，因为 url 无法直接识别空格，但是可以知道 %20 代表空格。\n\n2021-10-29 @村长\n\n在 Markdown 里，直接使用徽章生成的 url 地址并不会生成徽章，它仅仅只是一个 url，生成徽章的格式：\n\n![一些描述](徽章生成的 url 地址)\n\n\n1\n\n\n\n# 例子\n\n> 需求：左边内容为 vuepress，右边为 vdoing，颜色为红色\n\n只需在网址上敲：https://img.shields.io/badge/vuepress-vdoing-red即可\n\n\n\n颜色请参考官网给出的：\n\n\n\n\n# 端点徽章\n\n端点徽章既不是意义上的静态徽章也不是动态徽章，但是也可以说是静态徽章，下面会给出解释\n\n看图：\n\n\n\n可知它的 url 格式为：https://img.shields.io/endpoint?url=<URL>&style<STYLE>\n\n而其中 https://img.shields.io/endpoint? 是固定的，只需要改后面的参数即可，参数其实有很多个，点击箭头指示的地址跳转查看\n\n图片太大，点击可打开，再点击会折叠\n\n\n\n参数虽然很多，但是常用的不多，就是 url，type，label，color\n\n根据上方图片点击箭头指示的位置后，进入到跳转的页面，往下滑，找到如图所示：\n\n\n\n提示\n\n红色框的内容就是你的 url 地址\n\n很多人不懂 url 要干什么的，如果你学过后端的 Spring，就懂了，输入一个 url 地址，就会返回 json 格式的信息，这个信息就是徽章的右侧内容\n\n2021-10-29 @村长\n\nurl 返回的 json 格式必须有 label、message\n\n具体内容可看例子，下面介绍图片里的参数\n\n参数介绍，点击打开，再次点击折叠\n\n * style：徽章的形状，可以根据的需求选择，都是些大小，有无圆角之类的形状\n\n * override label：覆盖徽章的左侧内容。因为 url 返回的 json 需要一个 label，即左侧内容，如果不需要 url 返回的，可以用子此参数进行覆盖\n\n * override color：覆盖违章的右侧背景色。同理不需要 url 返回的 color，可以覆盖\n\n * name logo：只是一个 logo 名字，不会影响徽章的内容，logo 指的是左侧的图标，具体看图标徽章大概。\n\n * override logo color：覆盖徽章 logo 的颜色，不会影响徽章的内容\n\n\n# 例子\n\n> 需求1：生成一个徽章。左侧内容为可乐，右侧内容为 Kbt\n\n 1. 首先需要一个 url，返回的是 json 格式，必须有 label、message参数。我使用 Fast Mock 接口工具进行数据获取。如图：\n    \n    \n\n 2. 工具会给我一个 url 地址，这里安全考虑就不写出来了\n\n 3. 把这个 url 粘贴到上图的红色框里，然后 Shields 会请求这个 url，获得 label 为可乐，message 为Kbt。如图：\n    \n    \n\n> 需求2：徽章左侧内容覆盖为冰糖。徽章右侧背景色改为蓝色\n\n 1. 只需要在 override label 填入 冰糖，override color 填入 blue 即可\n    \n    \n\n回归开头的解释，应该都知道端点徽章另类的静态徽章，如果想要修改内容，只需要在 url 返回的内容里修改，徽章随之修改。\n\n\n# 总结：\n\n静态徽章要在 url 里修改\n\n端点徽章要在 url 的源头（响应数据里）修改\n\n\n# 动态徽章\n\n动态徽章用处比较广，一般用于网站统计访问量、评论区的数量等等。\n\n实际上是动态的端点徽章，因为访问量，评论量变化时，url 返回的数据也会改变，这就是动态。\n\n位置在端点徽章的下面，如图：\n\n\n\n可以看出参数很多。它相比较端点徽章的特点：多了个请求参数，也就是 query，不需要整个 url 的内容。点击 data type 下拉菜单，知道返回的内容支持 json、xml、yaml。\n\n图片的参数，点击打开，再次点击折叠\n * data type\n * label：徽章左侧内容\n * data url：url 地址\n * query：url 后面的请求内容。就是 url?xxx=??...\n * color：徽章右侧背景色\n * prefix：或者右侧内容的前缀\n * suffix：或者右侧内容的后缀\n\n提示\n\n动态徽章的真正用途，看例子 2，例子 1 只是简单的 demo，便于理解，实际不会用\n\n2021-10-29 @村长\n\n\n# 例子1\n\n> 需求：徽章左侧内容为可乐，右侧内容为 村长，前缀加上 this is，后缀加上 's Blog，右侧颜色为蓝色\n\n 1. 利用 Fast Mock 工具设置 url 返回的数据，我这里使用 json 格式，如图：\n    \n    \n    \n    注意\n    \n    name 只是随便写的，不一定是 name，根据需求决定\n    \n    2021-10-29 @村长\n\n 2. 填写结果如图：（下图 name 对应上方图片的 name）\n    \n    \n\n 3. 点击 Make Badge，效果如下：\n    \n    \n\n实际就是请求了 url?query=info，得到结果，显示在右侧。即 key=value 格式\n\n\n# 例子2\n\n实际上需要用到统计网站访问量等等\n\n前提：你必须知道你的网站关于访问量的参数是什么\n\n> 需求：统计自己的 GitHub 某个仓库的访问量\n\n网址格式：\n\n![stars](https://img.shields.io/github/stars/用户名/仓库名)\n\n\n1\n\n\n如我的notes-blog仓库可以写成\n\n![stars](https://img.shields.io/github/stars/Kele-Bingtang/notes-blog)\n\n\n1\n\n\n效果：\n\n\n\n可以看出：例子 2 和例子 1 的区别犹如天壤之别，其实例子 2 才是实际用到的，因为例子 1 是自己规定的 url 和参数，例子 2 是其他人规定的 url，现在流行的 url 规范是 Restful 风格的格式。所以不太一样。\n\n\n# 图标徽章\n\n目前没有需求用到，所以暂时没更这个\n\n大概讲下，就是在徽章左侧内容加了个图标，也就是 url 后面加了 logo=?，其中 ? 就是图标的名字。\n\n\n\nShields 支持输入 simple-icons 图标网站的提供的图标名字，即可显示图标，也就是 ?logo=该图标网站的图标名字",normalizedContent:"# 介绍\n\n如果你曾在很多地方看到如下徽章：\n\n\n\n如果你也对此眼热，想自己的主页或者其他地方有类似的徽章，那么 shields 会满足你\n\nshields 官网\n\n\n# 静态徽章\n\n进入 shields 网站，会看到密密麻麻的英文，如果看不懂，可以使用谷歌翻译。\n\n往下滑，找到如图所示：\n\n\n\n圈住的红框代表这是静态的徽章设计区域，即设计出来的徽章是固定的，不是动态的。\n\n静态的徽章设计很简单，如果记得格式，不需要每次都来官网设计，直接敲 url 对应的格式即可\n\n\n# 介绍\n\n静态徽章的 url 格式如上图：https://img.shields.io/badge/<label>-<message>-<color>\n\n只需要在三个文本框输入想要的内容即可，并点击make badge，这三个参数从左到右分别为左边内容、右边内容、右边背景色\n\n如下图：\n\n\n\n最后生成的内容为\n\n\n\n结合上方图片的不同的颜色箭头，再根据 url 的格式可以得出总结、理解这个格式：https://img.shields.io/badge/<label>-<message>-<color>\n\n需要改变的是 <label>、<message>、<color>\n\n只要记住了 shields 的 url 前缀，通过手动输入 url 也可以自动生成徽章，不需要来到官网。\n\n提示\n\n三个参数之间用 - 隔开，如果前两个参数想要出现空格，比如 spring boot，需要输入 spring%20boot，因为 url 无法直接识别空格，但是可以知道 %20 代表空格。\n\n2021-10-29 @村长\n\n在 markdown 里，直接使用徽章生成的 url 地址并不会生成徽章，它仅仅只是一个 url，生成徽章的格式：\n\n![一些描述](徽章生成的 url 地址)\n\n\n1\n\n\n\n# 例子\n\n> 需求：左边内容为 vuepress，右边为 vdoing，颜色为红色\n\n只需在网址上敲：https://img.shields.io/badge/vuepress-vdoing-red即可\n\n\n\n颜色请参考官网给出的：\n\n\n\n\n# 端点徽章\n\n端点徽章既不是意义上的静态徽章也不是动态徽章，但是也可以说是静态徽章，下面会给出解释\n\n看图：\n\n\n\n可知它的 url 格式为：https://img.shields.io/endpoint?url=<url>&style<style>\n\n而其中 https://img.shields.io/endpoint? 是固定的，只需要改后面的参数即可，参数其实有很多个，点击箭头指示的地址跳转查看\n\n图片太大，点击可打开，再点击会折叠\n\n\n\n参数虽然很多，但是常用的不多，就是 url，type，label，color\n\n根据上方图片点击箭头指示的位置后，进入到跳转的页面，往下滑，找到如图所示：\n\n\n\n提示\n\n红色框的内容就是你的 url 地址\n\n很多人不懂 url 要干什么的，如果你学过后端的 spring，就懂了，输入一个 url 地址，就会返回 json 格式的信息，这个信息就是徽章的右侧内容\n\n2021-10-29 @村长\n\nurl 返回的 json 格式必须有 label、message\n\n具体内容可看例子，下面介绍图片里的参数\n\n参数介绍，点击打开，再次点击折叠\n\n * style：徽章的形状，可以根据的需求选择，都是些大小，有无圆角之类的形状\n\n * override label：覆盖徽章的左侧内容。因为 url 返回的 json 需要一个 label，即左侧内容，如果不需要 url 返回的，可以用子此参数进行覆盖\n\n * override color：覆盖违章的右侧背景色。同理不需要 url 返回的 color，可以覆盖\n\n * name logo：只是一个 logo 名字，不会影响徽章的内容，logo 指的是左侧的图标，具体看图标徽章大概。\n\n * override logo color：覆盖徽章 logo 的颜色，不会影响徽章的内容\n\n\n# 例子\n\n> 需求1：生成一个徽章。左侧内容为可乐，右侧内容为 kbt\n\n 1. 首先需要一个 url，返回的是 json 格式，必须有 label、message参数。我使用 fast mock 接口工具进行数据获取。如图：\n    \n    \n\n 2. 工具会给我一个 url 地址，这里安全考虑就不写出来了\n\n 3. 把这个 url 粘贴到上图的红色框里，然后 shields 会请求这个 url，获得 label 为可乐，message 为kbt。如图：\n    \n    \n\n> 需求2：徽章左侧内容覆盖为冰糖。徽章右侧背景色改为蓝色\n\n 1. 只需要在 override label 填入 冰糖，override color 填入 blue 即可\n    \n    \n\n回归开头的解释，应该都知道端点徽章另类的静态徽章，如果想要修改内容，只需要在 url 返回的内容里修改，徽章随之修改。\n\n\n# 总结：\n\n静态徽章要在 url 里修改\n\n端点徽章要在 url 的源头（响应数据里）修改\n\n\n# 动态徽章\n\n动态徽章用处比较广，一般用于网站统计访问量、评论区的数量等等。\n\n实际上是动态的端点徽章，因为访问量，评论量变化时，url 返回的数据也会改变，这就是动态。\n\n位置在端点徽章的下面，如图：\n\n\n\n可以看出参数很多。它相比较端点徽章的特点：多了个请求参数，也就是 query，不需要整个 url 的内容。点击 data type 下拉菜单，知道返回的内容支持 json、xml、yaml。\n\n图片的参数，点击打开，再次点击折叠\n * data type\n * label：徽章左侧内容\n * data url：url 地址\n * query：url 后面的请求内容。就是 url?xxx=??...\n * color：徽章右侧背景色\n * prefix：或者右侧内容的前缀\n * suffix：或者右侧内容的后缀\n\n提示\n\n动态徽章的真正用途，看例子 2，例子 1 只是简单的 demo，便于理解，实际不会用\n\n2021-10-29 @村长\n\n\n# 例子1\n\n> 需求：徽章左侧内容为可乐，右侧内容为 村长，前缀加上 this is，后缀加上 's blog，右侧颜色为蓝色\n\n 1. 利用 fast mock 工具设置 url 返回的数据，我这里使用 json 格式，如图：\n    \n    \n    \n    注意\n    \n    name 只是随便写的，不一定是 name，根据需求决定\n    \n    2021-10-29 @村长\n\n 2. 填写结果如图：（下图 name 对应上方图片的 name）\n    \n    \n\n 3. 点击 make badge，效果如下：\n    \n    \n\n实际就是请求了 url?query=info，得到结果，显示在右侧。即 key=value 格式\n\n\n# 例子2\n\n实际上需要用到统计网站访问量等等\n\n前提：你必须知道你的网站关于访问量的参数是什么\n\n> 需求：统计自己的 github 某个仓库的访问量\n\n网址格式：\n\n![stars](https://img.shields.io/github/stars/用户名/仓库名)\n\n\n1\n\n\n如我的notes-blog仓库可以写成\n\n![stars](https://img.shields.io/github/stars/kele-bingtang/notes-blog)\n\n\n1\n\n\n效果：\n\n\n\n可以看出：例子 2 和例子 1 的区别犹如天壤之别，其实例子 2 才是实际用到的，因为例子 1 是自己规定的 url 和参数，例子 2 是其他人规定的 url，现在流行的 url 规范是 restful 风格的格式。所以不太一样。\n\n\n# 图标徽章\n\n目前没有需求用到，所以暂时没更这个\n\n大概讲下，就是在徽章左侧内容加了个图标，也就是 url 后面加了 logo=?，其中 ? 就是图标的名字。\n\n\n\nshields 支持输入 simple-icons 图标网站的提供的图标名字，即可显示图标，也就是 ?logo=该图标网站的图标名字",charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"DBeaver - SQL连接器",frontmatter:{title:"DBeaver - SQL连接器",date:"2021-12-12T00:49:42.000Z",permalink:"/dbeaver/",categories:["轮子使用"],tags:["SQL连接器"],readingShow:"top"},regularPath:"/57.%E8%BD%AE%E5%AD%90%E5%B7%A5%E5%85%B7/05.%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/05.DBeaver%20-%20SQL%E8%BF%9E%E6%8E%A5%E5%99%A8.html",relativePath:"57.轮子工具/05.工具使用/05.DBeaver - SQL连接器.md",key:"v-5341d2e1",path:"/dbeaver/",headers:[{level:2,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:3},{level:2,title:"下载",slug:"下载",normalizedTitle:"下载",charIndex:9},{level:2,title:"破解",slug:"破解",normalizedTitle:"破解",charIndex:15},{level:3,title:"下载jar包",slug:"下载jar包",normalizedTitle:"下载jar包",charIndex:23},{level:3,title:"jre11环境",slug:"jre11环境",normalizedTitle:"jre11环境",charIndex:35},{level:3,title:"jdk11环境配置",slug:"jdk11环境配置",normalizedTitle:"jdk11环境配置",charIndex:48},{level:2,title:"问题",slug:"问题",normalizedTitle:"问题",charIndex:61},{level:2,title:"结束语",slug:"结束语",normalizedTitle:"结束语",charIndex:67}],headersStr:"介绍 下载 破解 下载jar包 jre11环境 jdk11环境配置 问题 结束语",content:" * 介绍\n * 下载\n * 破解\n   * 下载jar包\n   * jre11环境\n   * jdk11环境配置\n * 问题\n * 结束语\n\n\n\n\n# 介绍\n\nDBeaver 官网\n\nDBeaver 是一款优秀的数据库管理工具，支持管理众多数据库产品，如 Mysql、Redis、MongoDB 等数据库。它是由 Java 编写，使用各种数据库的 jar 包进行连接，而下载 jar 包的途径是 Maven。\n\nDBeaver 有两个版本，在官网可以看到，分为社区版（免费版）和企业版（付费版）。\n\n\n\nDBeaver Enterprise（企业版，简称 DBeaverEE）支持 MongoDB、Redis、Apache Hive 等，但是需要付费使用。而本内容讲解的是如何使用「企业破解版」。\n\n为什么要破解企业版呢？因为在使用社区版后，发现不能连接 Redis，因为只有企业版才能连接 Redis，所以就对企业版打起了小心思。\n\n破解之后的缺点也很明显：无法联网下载驱动包，只能手动下载，然后导入 DBeaverEE。\n\n\n# 下载\n\n下载 DBeaverEE 版本，可以直接官网下载（开头有跳转链接），或者使用我提供的下载地址进行下载。\n\n企业破解版下载地址：\n\n主地址：https://www.youngkbt.cn/download/常用工具/\n\n备用地址：https://pan.baidu.com/s/12zzdYr0ZCatfwqYvzbPKjQ，提取码：29tb。\n\n下载 dbeaver-ee-21.3.0-win32.win32.x86_64.zip 和 dbeaver-agent-latest.zip，前者是软件，后者是破解 jar 包。\n\n目前我使用的是 DBeaverEE 21.3.0 版本，至于之后的版本是否支持破解，我就不懂了。\n\n下载压缩包并压缩后，文件结构如图所示：\n\n\n\n\n# 破解\n\n下载后不要立即点击 dbeaver.exe，因为此时它不是破解版，我们需要对它进行破解，如何破解呢？需要三步。\n\n\n# 下载jar包\n\n下载一个 jar 包，名叫 dbeaver-agent.jar，这个 jar 可以理解为破解包。下载地址已经在 下载 提供出来了。\n\n下载后，把该 jar 包拷贝至根目录下，如图：\n\n\n\n在根目录下打开 dbeaver.ini 文件，如上图，在 dbeaver-agent.jar 包的上方。\n\n在尾部添加：\n\n-javaagent:/absolute-path-to/dbeaver-agent.jar\n\n\n1\n\n\n/absolute-path-to/ 是 dbeaver-agent.jar 所在的绝对路径，因为我的 DBeaverEE 安装目录是 D:\\Programming area\\dbeaver\\dbeaver-21.3.0，所以我添加的内容如图：\n\n\n\n如果你不希望把 dbeaver-agent.jar 放到 DBeaverEE 的安装目录，那么请填写该 jar 包所在的绝对路径（Windows 包含磁盘名）。\n\n\n# jre11环境\n\nDBeaverEE 高版本需要 jre11 的运行环境，所以需要安装 jre11 的环境。这里通过 jdk11 使用命令编译出 jre11 环境。\n\n首先安装 jdk11：\n\n下载路径：https://www.youngkbt.cn/download/轮子库/，找到 jdk-11.0.13_windows-x64_bin.exe 文件下载。\n\n备用地址：https://pan.baidu.com/s/12zzdYr0ZCatfwqYvzbPKjQ，提取码：29tb。\n\n我的 jdk11 安装路径在 F:\\Programming area\\java\\jdk11，所以进入安装目录，打开命令行窗口，执行如下命令：\n\nbin\\jlink.exe --module-path jmods --add-modules java.desktop --output jre\n\n\n1\n\n\n或者进入安装目录下的 bin 命令，执行如下命令：\n\njlink.exe --module-path jmods --add-modules java.desktop --output jre\n\n\n1\n\n\n如果无法执行命令，请以管理员身份运行命令行窗口。\n\n提示\n\n直接在地址栏输入 cmd，然后敲回车即可快速进入命令行窗口。缺点是不能以管理员身份运行，我不需要管理员身份也能执行上方代码。\n\n\n\n执行完命令后，会在 bin 目录下生成 jre 目录，这个目录就是 jre11 的环境，如图：\n\n\n\n然后回到 DBeaverEE 的安装目录，打开 dbeaver.ini 文件，添加如下内容\n\n-vm\nF:\\Programming area\\java\\jdk11\\bin\n\n\n1\n2\n\n\n如果存在 -vm ，则将存在的 jre11 绝对路径替换成我们生成的 jre11 绝对路径。\n\n如图所示：\n\n\n\n你完全可以把生成的 jre 目录移到任何地方，只要 -vm 下方填写的是 jre 目录的绝对路径即可。\n\n附上原始的 dbeaver.ini 文件内容：\n\n-startup\nplugins/org.eclipse.equinox.launcher_1.6.300.v20210813-1054.jar\n--launcher.library\nplugins/org.eclipse.equinox.launcher.win32.win32.x86_64_1.2.300.v20210828-0802\n-vmargs\n-XX:+IgnoreUnrecognizedVMOptions\n--add-modules=ALL-SYSTEM\n-Dosgi.requiredJavaVersion=11\n-Xms128m\n-Xmx2048m\n-Djavax.net.ssl.trustStoreType=WINDOWS-ROOT\n-Ddbeaver.distribution.type=zip\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# jdk11环境配置\n\n曾经配过 jdk8 或其他的 jdk 都很熟悉步骤了。\n\n此电脑 -> 右键 -> 属性 -> 高级系统设置 -> 环境变量\n\n\n\n\n\n在系统变量新建一个变量\n\n\n\n\n\n * 变量名随便取，尽量符合规范\n * 变量值是 jdk11 安装的绝对路径\n\n最后找到并双击打开 Path 环境变量（已经存在的）\n\n\n\n新建，填写两个环境变量，如图：\n\n\n\n\n# 问题\n\n> Error opening zip file or JAR manifest missing : dbeaver-agent.jar\n\n请填上 dbeaver-agent.jar 包的绝对路径，不能填相对路径。\n\n> 在末尾添加 -javaagent:/xx/dbeaver-agent.jar 之后，打开 DBeaverEE 闪退\n\n请配置 jdk11 的环境变量，上面已经提供了配置步骤。\n\n\n# 结束语\n\n本内容只做学习研究之用，不得用于商业用途！\n\n若资金允许，请支持正版，谢谢！",normalizedContent:" * 介绍\n * 下载\n * 破解\n   * 下载jar包\n   * jre11环境\n   * jdk11环境配置\n * 问题\n * 结束语\n\n\n\n\n# 介绍\n\ndbeaver 官网\n\ndbeaver 是一款优秀的数据库管理工具，支持管理众多数据库产品，如 mysql、redis、mongodb 等数据库。它是由 java 编写，使用各种数据库的 jar 包进行连接，而下载 jar 包的途径是 maven。\n\ndbeaver 有两个版本，在官网可以看到，分为社区版（免费版）和企业版（付费版）。\n\n\n\ndbeaver enterprise（企业版，简称 dbeaveree）支持 mongodb、redis、apache hive 等，但是需要付费使用。而本内容讲解的是如何使用「企业破解版」。\n\n为什么要破解企业版呢？因为在使用社区版后，发现不能连接 redis，因为只有企业版才能连接 redis，所以就对企业版打起了小心思。\n\n破解之后的缺点也很明显：无法联网下载驱动包，只能手动下载，然后导入 dbeaveree。\n\n\n# 下载\n\n下载 dbeaveree 版本，可以直接官网下载（开头有跳转链接），或者使用我提供的下载地址进行下载。\n\n企业破解版下载地址：\n\n主地址：https://www.youngkbt.cn/download/常用工具/\n\n备用地址：https://pan.baidu.com/s/12zzdyr0zcatfwqyvzbpkjq，提取码：29tb。\n\n下载 dbeaver-ee-21.3.0-win32.win32.x86_64.zip 和 dbeaver-agent-latest.zip，前者是软件，后者是破解 jar 包。\n\n目前我使用的是 dbeaveree 21.3.0 版本，至于之后的版本是否支持破解，我就不懂了。\n\n下载压缩包并压缩后，文件结构如图所示：\n\n\n\n\n# 破解\n\n下载后不要立即点击 dbeaver.exe，因为此时它不是破解版，我们需要对它进行破解，如何破解呢？需要三步。\n\n\n# 下载jar包\n\n下载一个 jar 包，名叫 dbeaver-agent.jar，这个 jar 可以理解为破解包。下载地址已经在 下载 提供出来了。\n\n下载后，把该 jar 包拷贝至根目录下，如图：\n\n\n\n在根目录下打开 dbeaver.ini 文件，如上图，在 dbeaver-agent.jar 包的上方。\n\n在尾部添加：\n\n-javaagent:/absolute-path-to/dbeaver-agent.jar\n\n\n1\n\n\n/absolute-path-to/ 是 dbeaver-agent.jar 所在的绝对路径，因为我的 dbeaveree 安装目录是 d:\\programming area\\dbeaver\\dbeaver-21.3.0，所以我添加的内容如图：\n\n\n\n如果你不希望把 dbeaver-agent.jar 放到 dbeaveree 的安装目录，那么请填写该 jar 包所在的绝对路径（windows 包含磁盘名）。\n\n\n# jre11环境\n\ndbeaveree 高版本需要 jre11 的运行环境，所以需要安装 jre11 的环境。这里通过 jdk11 使用命令编译出 jre11 环境。\n\n首先安装 jdk11：\n\n下载路径：https://www.youngkbt.cn/download/轮子库/，找到 jdk-11.0.13_windows-x64_bin.exe 文件下载。\n\n备用地址：https://pan.baidu.com/s/12zzdyr0zcatfwqyvzbpkjq，提取码：29tb。\n\n我的 jdk11 安装路径在 f:\\programming area\\java\\jdk11，所以进入安装目录，打开命令行窗口，执行如下命令：\n\nbin\\jlink.exe --module-path jmods --add-modules java.desktop --output jre\n\n\n1\n\n\n或者进入安装目录下的 bin 命令，执行如下命令：\n\njlink.exe --module-path jmods --add-modules java.desktop --output jre\n\n\n1\n\n\n如果无法执行命令，请以管理员身份运行命令行窗口。\n\n提示\n\n直接在地址栏输入 cmd，然后敲回车即可快速进入命令行窗口。缺点是不能以管理员身份运行，我不需要管理员身份也能执行上方代码。\n\n\n\n执行完命令后，会在 bin 目录下生成 jre 目录，这个目录就是 jre11 的环境，如图：\n\n\n\n然后回到 dbeaveree 的安装目录，打开 dbeaver.ini 文件，添加如下内容\n\n-vm\nf:\\programming area\\java\\jdk11\\bin\n\n\n1\n2\n\n\n如果存在 -vm ，则将存在的 jre11 绝对路径替换成我们生成的 jre11 绝对路径。\n\n如图所示：\n\n\n\n你完全可以把生成的 jre 目录移到任何地方，只要 -vm 下方填写的是 jre 目录的绝对路径即可。\n\n附上原始的 dbeaver.ini 文件内容：\n\n-startup\nplugins/org.eclipse.equinox.launcher_1.6.300.v20210813-1054.jar\n--launcher.library\nplugins/org.eclipse.equinox.launcher.win32.win32.x86_64_1.2.300.v20210828-0802\n-vmargs\n-xx:+ignoreunrecognizedvmoptions\n--add-modules=all-system\n-dosgi.requiredjavaversion=11\n-xms128m\n-xmx2048m\n-djavax.net.ssl.truststoretype=windows-root\n-ddbeaver.distribution.type=zip\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# jdk11环境配置\n\n曾经配过 jdk8 或其他的 jdk 都很熟悉步骤了。\n\n此电脑 -> 右键 -> 属性 -> 高级系统设置 -> 环境变量\n\n\n\n\n\n在系统变量新建一个变量\n\n\n\n\n\n * 变量名随便取，尽量符合规范\n * 变量值是 jdk11 安装的绝对路径\n\n最后找到并双击打开 path 环境变量（已经存在的）\n\n\n\n新建，填写两个环境变量，如图：\n\n\n\n\n# 问题\n\n> error opening zip file or jar manifest missing : dbeaver-agent.jar\n\n请填上 dbeaver-agent.jar 包的绝对路径，不能填相对路径。\n\n> 在末尾添加 -javaagent:/xx/dbeaver-agent.jar 之后，打开 dbeaveree 闪退\n\n请配置 jdk11 的环境变量，上面已经提供了配置步骤。\n\n\n# 结束语\n\n本内容只做学习研究之用，不得用于商业用途！\n\n若资金允许，请支持正版，谢谢！",charsets:{cjk:!0},lastUpdated:"2022/04/05, 14:44:34"},{title:"Log4j - 配置",frontmatter:{title:"Log4j - 配置",date:"2021-12-24T14:04:35.000Z",permalink:"/log4j/",categories:["轮子使用"],tags:["日志"],readingShow:"top"},regularPath:"/57.%E8%BD%AE%E5%AD%90%E5%B7%A5%E5%85%B7/05.%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/07.Log4j%20-%20%E9%85%8D%E7%BD%AE.html",relativePath:"57.轮子工具/05.工具使用/07.Log4j - 配置.md",key:"v-2a51247f",path:"/log4j/",headers:[{level:2,title:"什么是日志框架",slug:"什么是日志框架",normalizedTitle:"什么是日志框架",charIndex:109},{level:2,title:"日志框架介绍",slug:"日志框架介绍",normalizedTitle:"日志框架介绍",charIndex:120},{level:2,title:"SpringBoot配置",slug:"springboot配置",normalizedTitle:"springboot配置",charIndex:130},{level:3,title:"log4j.xml详解",slug:"log4j-xml详解",normalizedTitle:"log4j.xml详解",charIndex:148},{level:3,title:"log4j.properties详解",slug:"log4j-properties详解",normalizedTitle:"log4j.properties详解",charIndex:165},{level:2,title:"log4js配置",slug:"log4js配置",normalizedTitle:"log4js配置",charIndex:187},{level:3,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:201},{level:3,title:"配置文件",slug:"配置文件",normalizedTitle:"配置文件",charIndex:209}],headersStr:"什么是日志框架 日志框架介绍 SpringBoot配置 log4j.xml详解 log4j.properties详解 log4js配置 安装 配置文件",content:'笔记\n\n日志能记录项目运行的一点一滴，生产上，我们也能通过日志快速定位和处理问题。本内容介绍 log4j 的一些基本使用，以及在 JS、SpringBoot 下的配置模板。\n\n2021-12-24 @村长\n\n\n\n * 什么是日志框架\n * 日志框架介绍\n * SpringBoot配置\n   * log4j.xml详解\n   * log4j.properties详解\n * log4js配置\n   * 安装\n   * 配置文件\n\n\n\n\n# 什么是日志框架\n\n我们在系统中对于记录日志的需求并不单纯。首先，我们希望日志要能持久化到磁盘，最基本的就是要能够保存到文件中；其次，我们希望在开发和生产环境中记录的日志并不相同，明显开发环境的日志记录会更多方便调试，但放到生产环境下大量的日志很容易会撑爆服务器，因此在生产环境我们希望只记录重要信息。\n\n基于不单纯的目的，System.out.println 是直接不能满足我们的要求，因此抛弃它，选择功能更强的日志框架。而 log4j 是 apache 下一款著名的开源日志框架，log4j 满足上面的一切需求。\n\n记录日志的框架并不仅仅只有 log4j，比较有名的还有 logback 等，现在比较火的 Spring Boot 默认集成的日志就是 logback。不管哪种日志框架，一般都能够实现日志的持久化功能。\n\n\n# 日志框架介绍\n\nLog4j 是 Apache 下的一款开源的日志框架，能够满足我们在项目中对于日志记录的需求。一般来讲，在项目中，我们会结合 slf4j 和 log4j 一起使用。Log4j 提供了简单的 API 调用，强大的日志格式定义以及灵活的扩展性。我们可以自己定义 Appender 来满足我们对于日志输出的需求。\n\nLog4j 由三个重要的组件构成：日志信息的优先级(Logger)，日志信息的输出目的地(Appender)，日志信息的输出格式(Layout)。\n\n * 日志信息的优先级别分为四级，优先级从低到高有 DEBUG、INFO、WARN、ERROR，用来指定这条日志信息的重要程度\n\n * 日志信息的输出目的地指定了日志将打印到控制台还是文件中，官方已经默认给我们提供了大量的 Appender，基本上可以满足我们的日常需求，当然如果你的需求比较特殊，可以自己实现 Appender，也是非常简单的\n\n * 日志信息的输出格式则控制了日志信息的显示内容\n\n> 注意：从源码知道，Log4j 日志级别是定义在 org.apache.log4j.Level 类中。Log4j 只建议使用 4 个级别，优先级从高到低分别是 ERROR、WARN、INFO、DEBUG。\n\n * off 最高等级，用于关闭所有日志记录。\n\n * fatal 指出每个严重的错误事件将会导致应用程序的退出。\n\n * error 指出虽然发生错误事件，但仍然不影响系统的继续运行。\n\n * warm 表明会出现潜在的错误情形。\n\n * info 一般和在粗粒度级别上，强调应用程序的运行全程。\n\n * debug 一般用于细粒度级别上，对调试应用程序非常有帮助。\n\n * TRACE 一般用于更细粒度级别上，比debug级别更低\n\n * all 最低等级，用于打开所有日志记录。\n\n日志的输出格式配置如下：\n\n%p：输出日志信息的优先级，即 DEBUG，INFO，WARN，ERROR，FATAL。\n%d：输出日志时间点的日期或时间，默认格式为 ISO8601，也可以在其后指定格式，如：%d{yyyy/MM/dd HH:mm:ss,SSS}。\n%r：输出自应用程序启动到输出该 log 信息耗费的毫秒数。\n%t：输出产生该日志事件的线程名。\n%l：输出日志事件的发生位置，相当于 %c.%M(%F:%L) 的组合，包括类全名、方法、文件名以及在代码中的行数。例如：test.TestLog4j.main(TestLog4j.java:10)。\n%c：输出日志信息所属的类目，通常就是所在类的全名。\n%M：输出产生日志信息的方法名。\n%F：输出日志消息产生时所在的文件名称。\n%L:：输出代码中的行号。\n%m:：输出代码中指定的具体日志信息。\n%n：输出一个回车换行符，Windows平台为 "/r/n" ，Unix平台为 "/n"。\n%x：输出和当前线程相关联的NDC(嵌套诊断环境)，尤其用到像 java servlets 这样的多客户多线程的应用中。\n%%：输出一个 "%" 字符。\n另外，还可以在%与格式字符之间加上修饰符来控制其最小长度、最大长度、和文本的对齐方式。如：\n%20c：指定输出 category 的名称，最小的长度是 20，如果 category 的名称长度小于 20 的话，默认的情况下右对齐。\n%-20c："-" 号表示左对齐。\n%.30c：指定输出 category 的名称，最大的长度是 30，如果 category 的名称长度大于 30 的话，就会将左边多出的字符截掉，但小于 30 的话也不会补空格。\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# SpringBoot配置\n\nlog4j 的配置文件分为两种，log4j.xml 和 log4j.properties，推荐使用 log4j.xml。\n\n引入依赖\n\n<dependency>\n    <groupId>org.slf4j</groupId>\n    <artifactId>slf4j-log4j12</artifactId>\n    <version>1.7.25</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\n依赖、版本不唯一，请自行选择。\n\n如何进行测试呢？首先在类上面加上 @Slf4j 注解，然后使用 log 对象即可，因为该注解自动创建了 log 全局对象，如下：\n\n@Slf4j\npublic class Log4jTest {\n    public void test() {\n        log.debug("现在是早上六点，开始自动签到");\n        log.info("现在是早上六点，开始自动签到");\n        log.error("现在是早上六点，开始自动签到");\n        log.warn("现在是早上六点，开始自动签到");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n这样运行项目后，就可以输出到控制台，如果您不单单想要输出到控制台，也想要输出到文件里，请看下面。\n\n\n# log4j.xml详解\n\n首先配置在 application.properties 或 application.yml 引用 log4j.xml，路径在 resource 下。\n\nlogging:\n  config: classpath:log4j.xml\n\n\n1\n2\n\n\nlog4j.xml 内容：\n\n<?xml version="1.0" encoding="UTF-8"?>\n\x3c!-- 日志级别从低到高分为 TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为 WARN，则低于 WARN 的信息都不会输出 --\x3e\n\x3c!-- scan：当此属性设置为 true 时，配置文档如果发生改变，将会被重新加载，默认值为 true --\x3e\n\x3c!-- scanPeriod：设置监测配置文档是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。\n                 当 scan 为 true 时，此属性生效。默认的时间间隔为 1 分钟。 --\x3e\n\x3c!-- debug：当此属性设置为 true 时，将打印出 logback 内部日志信息，实时查看 logback 运行状态。默认值为 false --\x3e\n<configuration  scan="true" scanPeriod="10 seconds">\n    <contextName>logback-spring</contextName>\n\n    \x3c!-- name 的值是变量的名称，value 的值时变量定义的值。通过定义的值会被插入到 logger 上下文中。定义后，可以使 ${} 来使用变量。 --\x3e\n    \x3c!-- 如果是 Windows，则 value="D:/logs" 类似 --\x3e\n    <property name="logging.path" value="/ROOT/logs" />\n    \x3c!-- 当天日志的文件名 --\x3e\n    <property name="logFile.name" value="bx" />\n    \x3c!-- 时间归档日志的文件名 --\x3e\n    <property name="logDateFile.name" value="bx" />\n\n    \x3c!-- 日志格式和颜色渲染 --\x3e\n    \x3c!-- 彩色日志依赖的渲染类 --\x3e\n    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />\n    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />\n    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />\n    \x3c!-- 彩色日志格式 --\x3e\n    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.CTT}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>\n\n    \x3c!--1. 输出到控制台--\x3e\n    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">\n        \x3c!--此日志 appender 是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--\x3e\n        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">\n            <level>debug</level>\n        </filter>\n        <encoder>\n            <Pattern>${CONSOLE_LOG_PATTERN}</Pattern>\n            \x3c!-- 设置字符集 --\x3e\n            <charset>UTF-8</charset>\n        </encoder>\n    </appender>\n\n    \x3c!--2. 输出到文档--\x3e\n    \x3c!-- 2.1 level 为 DEBUG 日志，按时间滚动输出  --\x3e\n    <appender name="DEBUG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">\n        \x3c!-- 正在记录的日志文档的路径及文档名 --\x3e\n        <file>${logging.path}/${logFile.name}_debug.log</file>\n        \x3c!--日志文档输出格式--\x3e\n        <encoder>\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.CTT} [%thread] %-5level %logger{50} - %msg%n</pattern>\n            <charset>UTF-8</charset> \x3c!-- 设置字符集 --\x3e\n        </encoder>\n        \x3c!-- 日志记录器的滚动策略，按日期，按大小记录 --\x3e\n        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">\n            \x3c!-- 日志归档 --\x3e\n            <fileNamePattern>${logging.path}/${logDateFile.name}_debug-%d{yyyy-MM-dd}.%i.log</fileNamePattern>\n            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">\n                \x3c!-- maxFileSize：这是活动文件的大小，默认值是 10MB --\x3e\n                <maxFileSize>10MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n            \x3c!--日志文档保留天数--\x3e\n            <maxHistory>15</maxHistory>\n        </rollingPolicy>\n        \x3c!-- 此日志文档只记录 DEBUG 级别的 --\x3e\n        <filter class="ch.qos.logback.classic.filter.LevelFilter">\n            <level>DEBUG</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n    </appender>\n\n    \x3c!-- 2.2 level 为 INFO 日志，时间滚动输出  --\x3e\n    <appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">\n        \x3c!-- 正在记录的日志文档的路径及文档名 --\x3e\n        <file>${logging.path}/${logFile.name}_info.log</file>\n        \x3c!--日志文档输出格式--\x3e\n        <encoder>\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.CTT} [%thread] %-5level %logger{50} - %msg%n</pattern>\n            <charset>UTF-8</charset>\n        </encoder>\n        \x3c!-- 日志记录器的滚动策略，按日期，按大小记录 --\x3e\n        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">\n            \x3c!-- 每天日志归档路径以及格式 --\x3e\n            <fileNamePattern>${logging.path}/${logDateFile.name}_info-%d{yyyy-MM-dd}.%i.log</fileNamePattern>\n            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">\n                \x3c!-- maxFileSize：这是活动文件的大小，默认值是 10MB --\x3e\n                <maxFileSize>10MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n            \x3c!--日志文档保留天数--\x3e\n            <maxHistory>15</maxHistory>\n        </rollingPolicy>\n        \x3c!-- 此日志文档只记录 INFO 级别的 --\x3e\n        <filter class="ch.qos.logback.classic.filter.LevelFilter">\n            <level>INFO</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n    </appender>\n\n    \x3c!-- 2.3 level为 WARN 日志，时间滚动输出  --\x3e\n    <appender name="WARN_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">\n        \x3c!-- 正在记录的日志文档的路径及文档名 --\x3e\n        <file>${logging.path}/${logFile.name}_warn.log</file>\n        \x3c!--日志文档输出格式--\x3e\n        <encoder>\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.CTT} [%thread] %-5level %logger{50} - %msg%n</pattern>\n            <charset>UTF-8</charset> \x3c!-- 此处设置字符集 --\x3e\n        </encoder>\n        \x3c!-- 日志记录器的滚动策略，按日期，按大小记录 --\x3e\n        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">\n            <fileNamePattern>${logging.path}/${logDateFile.name}_warn-%d{yyyy-MM-dd}.%i.log</fileNamePattern>\n            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">\n                \x3c!-- maxFileSize：这是活动文件的大小，默认值是 10MB --\x3e\n                <maxFileSize>10MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n            \x3c!--日志文档保留天数--\x3e\n            <maxHistory>15</maxHistory>\n        </rollingPolicy>\n        \x3c!-- 此日志文档只记录 WARN 级别的 --\x3e\n        <filter class="ch.qos.logback.classic.filter.LevelFilter">\n            <level>WARN</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n    </appender>\n\n    \x3c!-- 2.4 level为 ERROR 日志，时间滚动输出  --\x3e\n    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">\n        \x3c!-- 正在记录的日志文档的路径及文档名 --\x3e\n        <file>${logging.path}/${logFile.name}_error.log</file>\n        \x3c!--日志文档输出格式--\x3e\n        <encoder>\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.CTT} [%thread] %-5level %logger{50} - %msg%n</pattern>\n            <charset>UTF-8</charset> \x3c!-- 此处设置字符集 --\x3e\n        </encoder>\n        \x3c!-- 日志记录器的滚动策略，按日期，按大小记录 --\x3e\n        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">\n            <fileNamePattern>${logging.path}/${logDateFile.name}_error-%d{yyyy-MM-dd}.%i.log</fileNamePattern>\n            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">\n                \x3c!-- maxFileSize：这是活动文件的大小，默认值是 10MB --\x3e\n                <maxFileSize>10MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n            \x3c!--日志文档保留天数--\x3e\n            <maxHistory>15</maxHistory>\n        </rollingPolicy>\n        \x3c!-- 此日志文档只记录 ERROR 级别的 --\x3e\n        <filter class="ch.qos.logback.classic.filter.LevelFilter">\n            <level>ERROR</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n    </appender>\n    \n    \x3c!-- \n        File 标签是日志文件的输出地址：必须要为 ${LOG_PATH}/${LOG_FILE}。\n        level 标签：如果设置了 level 为 info，只会输出 info 的日志信息，其他日志级别的日志就会过滤掉，\n                   appender 的 level 标签优先级最高，如果指定了，则其他标签的 level 将会失效。\n    --\x3e\n\n    \x3c!--\n        <logger> 用来设置某一个包或者具体的某一个类的日志打印级别，以及指定 <appender>。\n        <logger> 仅有一个 name 属性，一个可选的 level 和一个可选的 addtivity 属性。\n        name：用来指定受此 logger 约束的某一个包或者具体的某一个类。\n        level：用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，\n              还有一个特俗值 INHERITED 或者同义词 NULL，代表强制执行上级的级别。\n              如果未设置此属性，那么当前 logger 将会继承上级的级别（appender 里指定的），\n              优先级高于 root 的 level，低于 appender 的 level。\n        addtivity：是否传递打印信息给上级的其他的 logger 或者 root 节点。默认是 true。\n                   为 ture，意思是日志级别高的其他 logger 或 root 都会捕获到该 looger 的日志信息，并「给自己」进行日志输出。\n            例子：\n            <logger name="org.springframework.web" level="info"/>\n            <logger name="org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor" level="INFO"/>\n            <logger name="你的 controller 包路径" level="debug"/>\n        \n        注意 logger 里的 level 是一个下限，比其日志级别高的日志信息也会输出。\n    --\x3e\n\n    \x3c!--\n        使用 mybatis 的时候，sql 语句是 debug 下才会打印，而这里我们只配置了 info，所以想要查看 sql 语句的话，有以下两种操作：\n        第一种把 <root level="info"> 改成 <root level="DEBUG">，这样就会打印 sql，不过这样日志那边会出现很多其他消息。\n        第二种就是单独给 dao 层下目录配置 debug 模式，这样配置 sql 语句会打印，其他还是正常 info 级别：\n        XML 文件配置：\n            全局配置（可选）\n                <logger name="com.apache.ibatis" level="DEBUG"/>\n                <logger name="java.sql.Connection" level="DEBUG"/>\n                <logger name="java.sql.Statement" level="DEBUG"/>\n                <logger name="java.sql.PreparedStatement" level="DEBUG"/>\n            包名配置（建议）\n                <logger name="com.xxx.dao" level="DEBUG"/>\n        \n        properties 文件配置：\n            全局配置（可选）\n                logging.level.org.apache.ibatis=DEBUG\n                logging.level.org.mybatis=DEBUG\n                logging.level.java.sql.Connection=DEBUG\n                logging.level.java.sql.Statement=DEBUG \n            包名配置（建议）\n                logging.level.com.xxx.dao=debug\n        \n        注意：com.xxx.dao 是你的包名。\n     --\x3e\n\n    \x3c!--\n        root 节点是必选节点，用来指定最基础的日志输出级别，只有一个 level 属性。\n        level：用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，\n               不能设置为 INHERITED 或者同义词 NULL。默认是 DEBUG，不设置 level 不会输出到文件。\n               可以包含零个或多个元素，标识这个 appender 将会添加到这个 logger。\n               其输出会受到 logger 的影响，即注意 logger 中的 additivity 属性，如果为 false，则指定的包名下的日志不会输出。\n    --\x3e\n\n    \x3c!-- 4. 最终的策略 --\x3e\n    \x3c!-- 4.1 开发环境：打印控制台--\x3e\n    <springProfile name="dev">\n        \x3c!-- 修改此处的扫描包名，指定这个包的日志级别最低下限 --\x3e\n        <logger name="com.glyxybxhtxt.controller" level="debug"/>\n        \x3c!-- logger 的 level 是一个下限，所有大于这个下限的日志级别都会输出 --\x3e\n    </springProfile>\n\n    \x3c!-- \n        因为 logger 指定了 level 的下限和 addtivity 默认为 true ，所以 root 的 level 可以不写。\n        root 能捕获 level 低的 logger 的日志信息，是因为 addtivity 为 true，从而导致 logger 的 level 优先级比 root 高。\n     --\x3e\n    <root level="info">\n        \x3c!-- \n            appender-ref 是 appender 的引用。\n            如果 appender 里指定了 level，则只按照 appender 里的 level 进行输出。\n         --\x3e\n        <appender-ref ref="CONSOLE" />\n        <appender-ref ref="DEBUG_FILE" />\n        <appender-ref ref="INFO_FILE" />\n        <appender-ref ref="WARN_FILE" />\n        <appender-ref ref="ERROR_FILE" />\n    </root>\n\n    \x3c!-- 4.2 生产环境:输出到文档\n    <springProfile name="pro">\n        <root level="info">\n            <appender-ref ref="CONSOLE" />\n            <appender-ref ref="DEBUG_FILE" />\n            <appender-ref ref="INFO_FILE" />\n            <appender-ref ref="ERROR_FILE" />\n            <appender-ref ref="WARN_FILE" />\n        </root>\n    </springProfile> --\x3e\n</configuration>\n\n\x3c!-- level 优先级：appender > logger > root --\x3e\n\n\x3c!-- 修改日志输出目录，输出日志大小，项目指定扫描包即可使用 --\x3e\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n\n\n> 我已经配置好了这个模板，你只需要修改的是 12 - 16 行的日志路径以及名字。\n\nFile 标签是日志文件的输出地址：必须要为 ${LOG_PATH}/${LOG_FILE}。\n\nlevel 标签：如果设置了 level 为 info，只会输出 info 的日志信息，其他日志级别的日志就会过滤掉，appender 的 level 标签优先级最高，如果指定了，则其他标签的 level 将会失效。\n\nlogger 用来设置某一个包或者具体的某一个类的日志打印级别，以及指定 appender。logger 仅有一个 name 属性，一个可选的 level 和一个可选的 addtivity 属性。\n\n * name：用来指定受此 logger 约束的某一个包或者具体的某一个类。\n\n * level：用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值 INHERITED 或者同义词 NULL，代表强制执行上级的级别。如果未设置此属性，那么当前 logger 将会继承上级的级别（appender 里指定的），优先级高于 root 的 level，低于 appender 的 level。\n\n * addtivity：是否传递打印信息给上级的其他的 logger 或者 root 节点。默认是 true。如果为 ture，意思是日志级别高的其他 logger 或 root 都会捕获到该 looger 的日志信息，并「给自己」进行日志输出。 例子：\n   \n   <logger name="org.springframework.web" level="info"/>\n   <logger name="org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor" level="INFO"/>\n   <logger name="你的 controller 包路径" level="debug"/>\n   \n   \n   1\n   2\n   3\n   \n   \n   注意 logger 里的 level 是一个下限，比其日志级别高的日志信息也会输出。\n\n使用 mybatis 的时候，sql 语句是 debug 下才会打印，而这里我们只配置了 info，所以想要查看 sql 语句的话，有以下两种操作：\n\n * 第一种把 <root level="info"> 改成 <root level="DEBUG">，这样就会打印 sql，不过这样日志那边会出现很多其他消息。\n\n * 第二种就是单独给 dao 层下目录配置 debug 模式，这样配置 sql 语句会打印，其他还是正常 info 级别，如下： XML 文件配置：\n   \n   * 全局配置（可选）\n     \n     <logger name="com.apache.ibatis" level="DEBUG"/>\n     <logger name="java.sql.Connection" level="DEBUG"/>\n     <logger name="java.sql.Statement" level="DEBUG"/>\n     <logger name="java.sql.PreparedStatement" level="DEBUG"/>\n     \n     \n     1\n     2\n     3\n     4\n     \n   \n   * 包名配置（建议）\n     \n     <logger name="com.xxx.dao" level="DEBUG"/>\n     \n     \n     1\n     \n   \n   properties 文件配置：\n   \n   * 全局配置（可选）\n     \n     logging.level.org.apache.ibatis=DEBUG\n     logging.level.org.mybatis=DEBUG\n     logging.level.java.sql.Connection=DEBUG\n     logging.level.java.sql.Statement=DEBUG \n     \n     \n     1\n     2\n     3\n     4\n     \n   \n   * 包名配置（建议）\n     \n     logging.level.com.xxx.dao=debug\n     \n     \n     1\n     \n     \n     注意：com.xxx.dao 是你的包名。\n\nroot 节点是必选节点，用来指定最基础的日志输出级别，只有一个 level 属性。\n\n * level：用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为 INHERITED 或者同义词 NULL。默认是 DEBUG，不设置 level 不会输出到文件。可以包含零个或多个元素，标识这个 appender 将会添加到这个 logger。其输出会受到 logger 的影响，即注意 logger 中的 additivity 属性，如果为 false，则指定的包名下的日志不会输出。\n\n对比 12 - 16 行的日志路径以及名字。路径以及名字的效果如图：\n\n\n\nINFO 日志内容的效果如图：\n\n\n\nERROR 日志内容的效果如图：\n\n\n\n\n# log4j.properties详解\n\n如果不喜欢在 log4j.xml 配置，那么也可以在 log4j.properties 配置，但是我建议在 xml 配置。\n\n## 设置全局日志 Logger\nlog4j.rootLogger=DEBUG,CONSOLE,FILEOUT\n# DEBUG、CONSOLE、FILE、ROLLING_FILE、MAIL、DATABASE\nlog4j.addivity.org.apache=true\n\n## 输出控制台 Appender ##\nlog4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender\nlog4j.appender.Threshold=DEBUG\nlog4j.appender.CONSOLE.Target=System.out\nlog4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout\nlog4j.appender.CONSOLE.layout.ConversionPattern=[%-5p][%d{yyyy-MM-dd HH\\:mm\\:ss,SSS}][%c] \\:%m%n\n## 另外两种输出格式，可选\n# log4j.appender.CONSOLE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n\\u00A0\n# log4j.appender.CONSOLE.layout.ConversionPattern=[start]%d{DATE}[DATE]%n%p[PRIORITY]%n%x[NDC]%n%t[THREAD] n%c[CATEGORY]%n%m[MESSAGE]%n%n\n\n## 输出 DEBUG 级别以上的日志到 E://logs/debug.log\nlog4j.appender.D=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.D.File=E://logs/log.log\nlog4j.appender.D.Append=true\nlog4j.appender.D.Threshold=DEBUG\nlog4j.appender.D.layout=org.apache.log4j.PatternLayout\nlog4j.appender.D.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n\n\n## 输出 ERROR 级别以上的日志到 E://logs/error.log\nlog4j.appender.E=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.E.File=E://logs/error.log\nlog4j.appender.E.Append=true\nlog4j.appender.E.Threshold=ERROR\nlog4j.appender.E.layout=org.apache.log4j.PatternLayout\nlog4j.appender.E.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n\n\n## ...... 其他级别的日志同理\n\n\n## 日志发生到服务器 Appender \n#log4j.appender.SOCKET=org.apache.log4j.RollingFileAppender\n#log4j.appender.SOCKET.RemoteHost=localhost\n#log4j.appender.SOCKET.Port=7272\n#log4j.appender.SOCKET.LocationInfo=true\n## Set up for Log Facter 5 \n#log4j.appender.SOCKET.layout=org.apache.log4j.PatternLayout\n#log4j.appender.SOCET.layout.ConversionPattern=[start]%d{DATE}[DATE]%n%p[PRIORITY]%n%x[NDC]%n%t[THREAD]%n%c[CATEGORY]%n%m[MESSAGE]%n%n\n\n## Log Factor 5 Appender \n#log4j.appender.LF5_APPENDER=org.apache.log4j.lf5.LF5Appender\n#log4j.appender.LF5_APPENDER.MaxNumberOfRecords=2000\n\n## 日志发生到邮箱 Appender \n#log4j.appender.MAIL=org.apache.log4j.net.SMTPAppender\n#log4j.appender.MAIL.Threshold=FATAL\n#log4j.appender.MAIL.BufferSize=10\n#log4j.appender.MAIL.From=openwolfl@163.com\n#log4j.appender.MAIL.SMTPHost=mail.openwolf.com\n#log4j.appender.MAIL.Subject=Log4J Message\n#log4j.appender.MAIL.To=openwolfl@163.com\n#log4j.appender.MAIL.layout=org.apache.log4j.PatternLayout\n#log4j.appender.MAIL.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n\n\n## JDBC Appender  \n#log4j.appender.DATABASE=org.apache.log4j.jdbc.JDBCAppender\n#log4j.appender.DATABASE.URL=jdbc:mysql://localhost:3306/test\n#log4j.appender.DATABASE.driver=com.mysql.jdbc.Driver\n#log4j.appender.DATABASE.user=root\n#log4j.appender.DATABASE.password=123456\n#log4j.appender.DATABASE.sql=INSERT INTO LOG4J (Message) VALUES (\'[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n\')\n#log4j.appender.DATABASE.layout=org.apache.log4j.PatternLayout\n#log4j.appender.DATABASE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n\n#log4j.appender.A1=org.apache.log4j.DailyRollingFileAppender\n#log4j.appender.A1.File=SampleMessages.log4j\n#log4j.appender.A1.DatePattern=yyyyMMdd-HH\'.log4j\'\n#log4j.appender.A1.layout=org.apache.log4j.xml.XMLLayout\n\n### 自定义 Appender \n#log4j.appender.im = net.cybercorlin.util.logger.appender.IMAppender\n#log4j.appender.im.host = mail.cybercorlin.net \n#log4j.appender.im.username = username \n#log4j.appender.im.password = password \n#log4j.appender.im.recipient = 2456019588@qq.com\n#log4j.appender.im.layout=org.apache.log4j.PatternLayout\n#log4j.appender.im.layout.ConversionPattern =[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n\n\n\n# log4js配置\n\n我使用 JS 来配置 log4j 日志，是因为我的邮箱项目是基于 node 构建。但是其原理 Java 的log4j 类似。\n\n本内容基于 node 进行 log4js 配置，其他框架的同理，只需要引入 log4js 即可使用日志功能。\n\n\n# 安装\n\n在 package.json 添加 log4js 依赖\n\n"dependencies": {\n    "log4js": "^6.3.0",\n}\n\n\n1\n2\n3\n\n\n我的完整 package.json 如下：\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n{\n    "name": "email",\n    "version": "1.0",\n    "private": true,\n    "scripts": {\n        "dev": "node app.js"\n    },\n    "dependencies": {\n        "express": "^4.17.1",\n        "log4js": "^6.3.0",\n        "nodemailer": "^6.7.2"\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n安装依赖：\n\nnpm install\n\n# 如果使用的是 yarn\nyarn install\n\n\n1\n2\n3\n4\n\n\n\n# 配置文件\n\n安装完 log4js 依赖，我们就可以引用这个依赖，并且配置日志的级别、输出内容、输出路径。\n\n// 引入插件 log4js\nvar log4js = require(\'log4js\')\nlog4js.configure({\n    appenders: {\n        access: {    // info 日志的 name\n            type: \'file\',     \n            filename: "logs/access.log",\n            layout: {\n                type: \'pattern\',\n                pattern: \'[%d{yyyy-MM-dd hh:mm:ss SSS}] [%p] %c - %m\'\n            },\n        },\n        error: {    // 错误日志的 name\n            type: \'file\',\n            filename: "logs/error.log",\n            layout: {   // 定义日志输出的样式\n                type: \'pattern\',\n                pattern: \'[%d{yyyy MM dd hh:mm:ss SSS}] [%p] %c - %m%n\'\n            },\n        },\n    },\n\t// 引用 appenders\n    categories: {\n        default: { appenders: [\'access\'], level: \'info\' },  // 上方 appenders 的 name\n        error: { appenders: [\'error\'], level: \'error\' }\n    },\n})\n\nexports.logger = function (name) {  // name 取 categories 的 name\n    return log4js.getLogger(name || \'default\')  // name 为undefined 时，取 default\n};\nexports.use = function (app, logger) {\n    app.use(log4js.connectLogger(logger || log4js.getLogger(\'default\'), { level: \'info\', format: \'请求类型/URI：「 :method:url 」\' }))\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n可能无法理解 29 行的 name，这个是引用 logger 时，传入的参数，根据这个参数，获取不同的日志输出格式，如下：\n\n// 引入 info 日志\nconst logger = require("./log").logger();\n// 引入 error 日志，传入错误日志的 name，对应 categories\nconst errLogger = require("./log").logger("error");\n\n// 以下仅仅是测试，实际根据需求输出\nlogger.info("info 信息");\nerrLogger.error("error 信息")\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n日志文件路径以及名字如图：\n\n\n\naccess 日志内容如图：\n\n\n\n图片内容和我给的代码不一样，因为这是我实际使用的日志输出。不一样的地方仅仅是 default - 后面的内容，前面的内容都是在配置文件配置好了格式，你输出的内容就会放到 default - 后面。',normalizedContent:'笔记\n\n日志能记录项目运行的一点一滴，生产上，我们也能通过日志快速定位和处理问题。本内容介绍 log4j 的一些基本使用，以及在 js、springboot 下的配置模板。\n\n2021-12-24 @村长\n\n\n\n * 什么是日志框架\n * 日志框架介绍\n * springboot配置\n   * log4j.xml详解\n   * log4j.properties详解\n * log4js配置\n   * 安装\n   * 配置文件\n\n\n\n\n# 什么是日志框架\n\n我们在系统中对于记录日志的需求并不单纯。首先，我们希望日志要能持久化到磁盘，最基本的就是要能够保存到文件中；其次，我们希望在开发和生产环境中记录的日志并不相同，明显开发环境的日志记录会更多方便调试，但放到生产环境下大量的日志很容易会撑爆服务器，因此在生产环境我们希望只记录重要信息。\n\n基于不单纯的目的，system.out.println 是直接不能满足我们的要求，因此抛弃它，选择功能更强的日志框架。而 log4j 是 apache 下一款著名的开源日志框架，log4j 满足上面的一切需求。\n\n记录日志的框架并不仅仅只有 log4j，比较有名的还有 logback 等，现在比较火的 spring boot 默认集成的日志就是 logback。不管哪种日志框架，一般都能够实现日志的持久化功能。\n\n\n# 日志框架介绍\n\nlog4j 是 apache 下的一款开源的日志框架，能够满足我们在项目中对于日志记录的需求。一般来讲，在项目中，我们会结合 slf4j 和 log4j 一起使用。log4j 提供了简单的 api 调用，强大的日志格式定义以及灵活的扩展性。我们可以自己定义 appender 来满足我们对于日志输出的需求。\n\nlog4j 由三个重要的组件构成：日志信息的优先级(logger)，日志信息的输出目的地(appender)，日志信息的输出格式(layout)。\n\n * 日志信息的优先级别分为四级，优先级从低到高有 debug、info、warn、error，用来指定这条日志信息的重要程度\n\n * 日志信息的输出目的地指定了日志将打印到控制台还是文件中，官方已经默认给我们提供了大量的 appender，基本上可以满足我们的日常需求，当然如果你的需求比较特殊，可以自己实现 appender，也是非常简单的\n\n * 日志信息的输出格式则控制了日志信息的显示内容\n\n> 注意：从源码知道，log4j 日志级别是定义在 org.apache.log4j.level 类中。log4j 只建议使用 4 个级别，优先级从高到低分别是 error、warn、info、debug。\n\n * off 最高等级，用于关闭所有日志记录。\n\n * fatal 指出每个严重的错误事件将会导致应用程序的退出。\n\n * error 指出虽然发生错误事件，但仍然不影响系统的继续运行。\n\n * warm 表明会出现潜在的错误情形。\n\n * info 一般和在粗粒度级别上，强调应用程序的运行全程。\n\n * debug 一般用于细粒度级别上，对调试应用程序非常有帮助。\n\n * trace 一般用于更细粒度级别上，比debug级别更低\n\n * all 最低等级，用于打开所有日志记录。\n\n日志的输出格式配置如下：\n\n%p：输出日志信息的优先级，即 debug，info，warn，error，fatal。\n%d：输出日志时间点的日期或时间，默认格式为 iso8601，也可以在其后指定格式，如：%d{yyyy/mm/dd hh:mm:ss,sss}。\n%r：输出自应用程序启动到输出该 log 信息耗费的毫秒数。\n%t：输出产生该日志事件的线程名。\n%l：输出日志事件的发生位置，相当于 %c.%m(%f:%l) 的组合，包括类全名、方法、文件名以及在代码中的行数。例如：test.testlog4j.main(testlog4j.java:10)。\n%c：输出日志信息所属的类目，通常就是所在类的全名。\n%m：输出产生日志信息的方法名。\n%f：输出日志消息产生时所在的文件名称。\n%l:：输出代码中的行号。\n%m:：输出代码中指定的具体日志信息。\n%n：输出一个回车换行符，windows平台为 "/r/n" ，unix平台为 "/n"。\n%x：输出和当前线程相关联的ndc(嵌套诊断环境)，尤其用到像 java servlets 这样的多客户多线程的应用中。\n%%：输出一个 "%" 字符。\n另外，还可以在%与格式字符之间加上修饰符来控制其最小长度、最大长度、和文本的对齐方式。如：\n%20c：指定输出 category 的名称，最小的长度是 20，如果 category 的名称长度小于 20 的话，默认的情况下右对齐。\n%-20c："-" 号表示左对齐。\n%.30c：指定输出 category 的名称，最大的长度是 30，如果 category 的名称长度大于 30 的话，就会将左边多出的字符截掉，但小于 30 的话也不会补空格。\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# springboot配置\n\nlog4j 的配置文件分为两种，log4j.xml 和 log4j.properties，推荐使用 log4j.xml。\n\n引入依赖\n\n<dependency>\n    <groupid>org.slf4j</groupid>\n    <artifactid>slf4j-log4j12</artifactid>\n    <version>1.7.25</version>\n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\n依赖、版本不唯一，请自行选择。\n\n如何进行测试呢？首先在类上面加上 @slf4j 注解，然后使用 log 对象即可，因为该注解自动创建了 log 全局对象，如下：\n\n@slf4j\npublic class log4jtest {\n    public void test() {\n        log.debug("现在是早上六点，开始自动签到");\n        log.info("现在是早上六点，开始自动签到");\n        log.error("现在是早上六点，开始自动签到");\n        log.warn("现在是早上六点，开始自动签到");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n这样运行项目后，就可以输出到控制台，如果您不单单想要输出到控制台，也想要输出到文件里，请看下面。\n\n\n# log4j.xml详解\n\n首先配置在 application.properties 或 application.yml 引用 log4j.xml，路径在 resource 下。\n\nlogging:\n  config: classpath:log4j.xml\n\n\n1\n2\n\n\nlog4j.xml 内容：\n\n<?xml version="1.0" encoding="utf-8"?>\n\x3c!-- 日志级别从低到高分为 trace < debug < info < warn < error < fatal，如果设置为 warn，则低于 warn 的信息都不会输出 --\x3e\n\x3c!-- scan：当此属性设置为 true 时，配置文档如果发生改变，将会被重新加载，默认值为 true --\x3e\n\x3c!-- scanperiod：设置监测配置文档是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。\n                 当 scan 为 true 时，此属性生效。默认的时间间隔为 1 分钟。 --\x3e\n\x3c!-- debug：当此属性设置为 true 时，将打印出 logback 内部日志信息，实时查看 logback 运行状态。默认值为 false --\x3e\n<configuration  scan="true" scanperiod="10 seconds">\n    <contextname>logback-spring</contextname>\n\n    \x3c!-- name 的值是变量的名称，value 的值时变量定义的值。通过定义的值会被插入到 logger 上下文中。定义后，可以使 ${} 来使用变量。 --\x3e\n    \x3c!-- 如果是 windows，则 value="d:/logs" 类似 --\x3e\n    <property name="logging.path" value="/root/logs" />\n    \x3c!-- 当天日志的文件名 --\x3e\n    <property name="logfile.name" value="bx" />\n    \x3c!-- 时间归档日志的文件名 --\x3e\n    <property name="logdatefile.name" value="bx" />\n\n    \x3c!-- 日志格式和颜色渲染 --\x3e\n    \x3c!-- 彩色日志依赖的渲染类 --\x3e\n    <conversionrule conversionword="clr" converterclass="org.springframework.boot.logging.logback.colorconverter" />\n    <conversionrule conversionword="wex" converterclass="org.springframework.boot.logging.logback.whitespacethrowableproxyconverter" />\n    <conversionrule conversionword="wex" converterclass="org.springframework.boot.logging.logback.extendedwhitespacethrowableproxyconverter" />\n    \x3c!-- 彩色日志格式 --\x3e\n    <property name="console_log_pattern" value="${console_log_pattern:-%clr(%d{yyyy-mm-dd hh:mm:ss.ctt}){faint} %clr(${log_level_pattern:-%5p}) %clr(${pid:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${log_exception_conversion_word:-%wex}}"/>\n\n    \x3c!--1. 输出到控制台--\x3e\n    <appender name="console" class="ch.qos.logback.core.consoleappender">\n        \x3c!--此日志 appender 是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--\x3e\n        <filter class="ch.qos.logback.classic.filter.thresholdfilter">\n            <level>debug</level>\n        </filter>\n        <encoder>\n            <pattern>${console_log_pattern}</pattern>\n            \x3c!-- 设置字符集 --\x3e\n            <charset>utf-8</charset>\n        </encoder>\n    </appender>\n\n    \x3c!--2. 输出到文档--\x3e\n    \x3c!-- 2.1 level 为 debug 日志，按时间滚动输出  --\x3e\n    <appender name="debug_file" class="ch.qos.logback.core.rolling.rollingfileappender">\n        \x3c!-- 正在记录的日志文档的路径及文档名 --\x3e\n        <file>${logging.path}/${logfile.name}_debug.log</file>\n        \x3c!--日志文档输出格式--\x3e\n        <encoder>\n            <pattern>%d{yyyy-mm-dd hh:mm:ss.ctt} [%thread] %-5level %logger{50} - %msg%n</pattern>\n            <charset>utf-8</charset> \x3c!-- 设置字符集 --\x3e\n        </encoder>\n        \x3c!-- 日志记录器的滚动策略，按日期，按大小记录 --\x3e\n        <rollingpolicy class="ch.qos.logback.core.rolling.timebasedrollingpolicy">\n            \x3c!-- 日志归档 --\x3e\n            <filenamepattern>${logging.path}/${logdatefile.name}_debug-%d{yyyy-mm-dd}.%i.log</filenamepattern>\n            <timebasedfilenamingandtriggeringpolicy class="ch.qos.logback.core.rolling.sizeandtimebasedfnatp">\n                \x3c!-- maxfilesize：这是活动文件的大小，默认值是 10mb --\x3e\n                <maxfilesize>10mb</maxfilesize>\n            </timebasedfilenamingandtriggeringpolicy>\n            \x3c!--日志文档保留天数--\x3e\n            <maxhistory>15</maxhistory>\n        </rollingpolicy>\n        \x3c!-- 此日志文档只记录 debug 级别的 --\x3e\n        <filter class="ch.qos.logback.classic.filter.levelfilter">\n            <level>debug</level>\n            <onmatch>accept</onmatch>\n            <onmismatch>deny</onmismatch>\n        </filter>\n    </appender>\n\n    \x3c!-- 2.2 level 为 info 日志，时间滚动输出  --\x3e\n    <appender name="info_file" class="ch.qos.logback.core.rolling.rollingfileappender">\n        \x3c!-- 正在记录的日志文档的路径及文档名 --\x3e\n        <file>${logging.path}/${logfile.name}_info.log</file>\n        \x3c!--日志文档输出格式--\x3e\n        <encoder>\n            <pattern>%d{yyyy-mm-dd hh:mm:ss.ctt} [%thread] %-5level %logger{50} - %msg%n</pattern>\n            <charset>utf-8</charset>\n        </encoder>\n        \x3c!-- 日志记录器的滚动策略，按日期，按大小记录 --\x3e\n        <rollingpolicy class="ch.qos.logback.core.rolling.timebasedrollingpolicy">\n            \x3c!-- 每天日志归档路径以及格式 --\x3e\n            <filenamepattern>${logging.path}/${logdatefile.name}_info-%d{yyyy-mm-dd}.%i.log</filenamepattern>\n            <timebasedfilenamingandtriggeringpolicy class="ch.qos.logback.core.rolling.sizeandtimebasedfnatp">\n                \x3c!-- maxfilesize：这是活动文件的大小，默认值是 10mb --\x3e\n                <maxfilesize>10mb</maxfilesize>\n            </timebasedfilenamingandtriggeringpolicy>\n            \x3c!--日志文档保留天数--\x3e\n            <maxhistory>15</maxhistory>\n        </rollingpolicy>\n        \x3c!-- 此日志文档只记录 info 级别的 --\x3e\n        <filter class="ch.qos.logback.classic.filter.levelfilter">\n            <level>info</level>\n            <onmatch>accept</onmatch>\n            <onmismatch>deny</onmismatch>\n        </filter>\n    </appender>\n\n    \x3c!-- 2.3 level为 warn 日志，时间滚动输出  --\x3e\n    <appender name="warn_file" class="ch.qos.logback.core.rolling.rollingfileappender">\n        \x3c!-- 正在记录的日志文档的路径及文档名 --\x3e\n        <file>${logging.path}/${logfile.name}_warn.log</file>\n        \x3c!--日志文档输出格式--\x3e\n        <encoder>\n            <pattern>%d{yyyy-mm-dd hh:mm:ss.ctt} [%thread] %-5level %logger{50} - %msg%n</pattern>\n            <charset>utf-8</charset> \x3c!-- 此处设置字符集 --\x3e\n        </encoder>\n        \x3c!-- 日志记录器的滚动策略，按日期，按大小记录 --\x3e\n        <rollingpolicy class="ch.qos.logback.core.rolling.timebasedrollingpolicy">\n            <filenamepattern>${logging.path}/${logdatefile.name}_warn-%d{yyyy-mm-dd}.%i.log</filenamepattern>\n            <timebasedfilenamingandtriggeringpolicy class="ch.qos.logback.core.rolling.sizeandtimebasedfnatp">\n                \x3c!-- maxfilesize：这是活动文件的大小，默认值是 10mb --\x3e\n                <maxfilesize>10mb</maxfilesize>\n            </timebasedfilenamingandtriggeringpolicy>\n            \x3c!--日志文档保留天数--\x3e\n            <maxhistory>15</maxhistory>\n        </rollingpolicy>\n        \x3c!-- 此日志文档只记录 warn 级别的 --\x3e\n        <filter class="ch.qos.logback.classic.filter.levelfilter">\n            <level>warn</level>\n            <onmatch>accept</onmatch>\n            <onmismatch>deny</onmismatch>\n        </filter>\n    </appender>\n\n    \x3c!-- 2.4 level为 error 日志，时间滚动输出  --\x3e\n    <appender name="error_file" class="ch.qos.logback.core.rolling.rollingfileappender">\n        \x3c!-- 正在记录的日志文档的路径及文档名 --\x3e\n        <file>${logging.path}/${logfile.name}_error.log</file>\n        \x3c!--日志文档输出格式--\x3e\n        <encoder>\n            <pattern>%d{yyyy-mm-dd hh:mm:ss.ctt} [%thread] %-5level %logger{50} - %msg%n</pattern>\n            <charset>utf-8</charset> \x3c!-- 此处设置字符集 --\x3e\n        </encoder>\n        \x3c!-- 日志记录器的滚动策略，按日期，按大小记录 --\x3e\n        <rollingpolicy class="ch.qos.logback.core.rolling.timebasedrollingpolicy">\n            <filenamepattern>${logging.path}/${logdatefile.name}_error-%d{yyyy-mm-dd}.%i.log</filenamepattern>\n            <timebasedfilenamingandtriggeringpolicy class="ch.qos.logback.core.rolling.sizeandtimebasedfnatp">\n                \x3c!-- maxfilesize：这是活动文件的大小，默认值是 10mb --\x3e\n                <maxfilesize>10mb</maxfilesize>\n            </timebasedfilenamingandtriggeringpolicy>\n            \x3c!--日志文档保留天数--\x3e\n            <maxhistory>15</maxhistory>\n        </rollingpolicy>\n        \x3c!-- 此日志文档只记录 error 级别的 --\x3e\n        <filter class="ch.qos.logback.classic.filter.levelfilter">\n            <level>error</level>\n            <onmatch>accept</onmatch>\n            <onmismatch>deny</onmismatch>\n        </filter>\n    </appender>\n    \n    \x3c!-- \n        file 标签是日志文件的输出地址：必须要为 ${log_path}/${log_file}。\n        level 标签：如果设置了 level 为 info，只会输出 info 的日志信息，其他日志级别的日志就会过滤掉，\n                   appender 的 level 标签优先级最高，如果指定了，则其他标签的 level 将会失效。\n    --\x3e\n\n    \x3c!--\n        <logger> 用来设置某一个包或者具体的某一个类的日志打印级别，以及指定 <appender>。\n        <logger> 仅有一个 name 属性，一个可选的 level 和一个可选的 addtivity 属性。\n        name：用来指定受此 logger 约束的某一个包或者具体的某一个类。\n        level：用来设置打印级别，大小写无关：trace, debug, info, warn, error, all 和 off，\n              还有一个特俗值 inherited 或者同义词 null，代表强制执行上级的级别。\n              如果未设置此属性，那么当前 logger 将会继承上级的级别（appender 里指定的），\n              优先级高于 root 的 level，低于 appender 的 level。\n        addtivity：是否传递打印信息给上级的其他的 logger 或者 root 节点。默认是 true。\n                   为 ture，意思是日志级别高的其他 logger 或 root 都会捕获到该 looger 的日志信息，并「给自己」进行日志输出。\n            例子：\n            <logger name="org.springframework.web" level="info"/>\n            <logger name="org.springframework.scheduling.annotation.scheduledannotationbeanpostprocessor" level="info"/>\n            <logger name="你的 controller 包路径" level="debug"/>\n        \n        注意 logger 里的 level 是一个下限，比其日志级别高的日志信息也会输出。\n    --\x3e\n\n    \x3c!--\n        使用 mybatis 的时候，sql 语句是 debug 下才会打印，而这里我们只配置了 info，所以想要查看 sql 语句的话，有以下两种操作：\n        第一种把 <root level="info"> 改成 <root level="debug">，这样就会打印 sql，不过这样日志那边会出现很多其他消息。\n        第二种就是单独给 dao 层下目录配置 debug 模式，这样配置 sql 语句会打印，其他还是正常 info 级别：\n        xml 文件配置：\n            全局配置（可选）\n                <logger name="com.apache.ibatis" level="debug"/>\n                <logger name="java.sql.connection" level="debug"/>\n                <logger name="java.sql.statement" level="debug"/>\n                <logger name="java.sql.preparedstatement" level="debug"/>\n            包名配置（建议）\n                <logger name="com.xxx.dao" level="debug"/>\n        \n        properties 文件配置：\n            全局配置（可选）\n                logging.level.org.apache.ibatis=debug\n                logging.level.org.mybatis=debug\n                logging.level.java.sql.connection=debug\n                logging.level.java.sql.statement=debug \n            包名配置（建议）\n                logging.level.com.xxx.dao=debug\n        \n        注意：com.xxx.dao 是你的包名。\n     --\x3e\n\n    \x3c!--\n        root 节点是必选节点，用来指定最基础的日志输出级别，只有一个 level 属性。\n        level：用来设置打印级别，大小写无关：trace, debug, info, warn, error, all 和 off，\n               不能设置为 inherited 或者同义词 null。默认是 debug，不设置 level 不会输出到文件。\n               可以包含零个或多个元素，标识这个 appender 将会添加到这个 logger。\n               其输出会受到 logger 的影响，即注意 logger 中的 additivity 属性，如果为 false，则指定的包名下的日志不会输出。\n    --\x3e\n\n    \x3c!-- 4. 最终的策略 --\x3e\n    \x3c!-- 4.1 开发环境：打印控制台--\x3e\n    <springprofile name="dev">\n        \x3c!-- 修改此处的扫描包名，指定这个包的日志级别最低下限 --\x3e\n        <logger name="com.glyxybxhtxt.controller" level="debug"/>\n        \x3c!-- logger 的 level 是一个下限，所有大于这个下限的日志级别都会输出 --\x3e\n    </springprofile>\n\n    \x3c!-- \n        因为 logger 指定了 level 的下限和 addtivity 默认为 true ，所以 root 的 level 可以不写。\n        root 能捕获 level 低的 logger 的日志信息，是因为 addtivity 为 true，从而导致 logger 的 level 优先级比 root 高。\n     --\x3e\n    <root level="info">\n        \x3c!-- \n            appender-ref 是 appender 的引用。\n            如果 appender 里指定了 level，则只按照 appender 里的 level 进行输出。\n         --\x3e\n        <appender-ref ref="console" />\n        <appender-ref ref="debug_file" />\n        <appender-ref ref="info_file" />\n        <appender-ref ref="warn_file" />\n        <appender-ref ref="error_file" />\n    </root>\n\n    \x3c!-- 4.2 生产环境:输出到文档\n    <springprofile name="pro">\n        <root level="info">\n            <appender-ref ref="console" />\n            <appender-ref ref="debug_file" />\n            <appender-ref ref="info_file" />\n            <appender-ref ref="error_file" />\n            <appender-ref ref="warn_file" />\n        </root>\n    </springprofile> --\x3e\n</configuration>\n\n\x3c!-- level 优先级：appender > logger > root --\x3e\n\n\x3c!-- 修改日志输出目录，输出日志大小，项目指定扫描包即可使用 --\x3e\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n\n\n> 我已经配置好了这个模板，你只需要修改的是 12 - 16 行的日志路径以及名字。\n\nfile 标签是日志文件的输出地址：必须要为 ${log_path}/${log_file}。\n\nlevel 标签：如果设置了 level 为 info，只会输出 info 的日志信息，其他日志级别的日志就会过滤掉，appender 的 level 标签优先级最高，如果指定了，则其他标签的 level 将会失效。\n\nlogger 用来设置某一个包或者具体的某一个类的日志打印级别，以及指定 appender。logger 仅有一个 name 属性，一个可选的 level 和一个可选的 addtivity 属性。\n\n * name：用来指定受此 logger 约束的某一个包或者具体的某一个类。\n\n * level：用来设置打印级别，大小写无关：trace, debug, info, warn, error, all 和 off，还有一个特俗值 inherited 或者同义词 null，代表强制执行上级的级别。如果未设置此属性，那么当前 logger 将会继承上级的级别（appender 里指定的），优先级高于 root 的 level，低于 appender 的 level。\n\n * addtivity：是否传递打印信息给上级的其他的 logger 或者 root 节点。默认是 true。如果为 ture，意思是日志级别高的其他 logger 或 root 都会捕获到该 looger 的日志信息，并「给自己」进行日志输出。 例子：\n   \n   <logger name="org.springframework.web" level="info"/>\n   <logger name="org.springframework.scheduling.annotation.scheduledannotationbeanpostprocessor" level="info"/>\n   <logger name="你的 controller 包路径" level="debug"/>\n   \n   \n   1\n   2\n   3\n   \n   \n   注意 logger 里的 level 是一个下限，比其日志级别高的日志信息也会输出。\n\n使用 mybatis 的时候，sql 语句是 debug 下才会打印，而这里我们只配置了 info，所以想要查看 sql 语句的话，有以下两种操作：\n\n * 第一种把 <root level="info"> 改成 <root level="debug">，这样就会打印 sql，不过这样日志那边会出现很多其他消息。\n\n * 第二种就是单独给 dao 层下目录配置 debug 模式，这样配置 sql 语句会打印，其他还是正常 info 级别，如下： xml 文件配置：\n   \n   * 全局配置（可选）\n     \n     <logger name="com.apache.ibatis" level="debug"/>\n     <logger name="java.sql.connection" level="debug"/>\n     <logger name="java.sql.statement" level="debug"/>\n     <logger name="java.sql.preparedstatement" level="debug"/>\n     \n     \n     1\n     2\n     3\n     4\n     \n   \n   * 包名配置（建议）\n     \n     <logger name="com.xxx.dao" level="debug"/>\n     \n     \n     1\n     \n   \n   properties 文件配置：\n   \n   * 全局配置（可选）\n     \n     logging.level.org.apache.ibatis=debug\n     logging.level.org.mybatis=debug\n     logging.level.java.sql.connection=debug\n     logging.level.java.sql.statement=debug \n     \n     \n     1\n     2\n     3\n     4\n     \n   \n   * 包名配置（建议）\n     \n     logging.level.com.xxx.dao=debug\n     \n     \n     1\n     \n     \n     注意：com.xxx.dao 是你的包名。\n\nroot 节点是必选节点，用来指定最基础的日志输出级别，只有一个 level 属性。\n\n * level：用来设置打印级别，大小写无关：trace, debug, info, warn, error, all 和 off，不能设置为 inherited 或者同义词 null。默认是 debug，不设置 level 不会输出到文件。可以包含零个或多个元素，标识这个 appender 将会添加到这个 logger。其输出会受到 logger 的影响，即注意 logger 中的 additivity 属性，如果为 false，则指定的包名下的日志不会输出。\n\n对比 12 - 16 行的日志路径以及名字。路径以及名字的效果如图：\n\n\n\ninfo 日志内容的效果如图：\n\n\n\nerror 日志内容的效果如图：\n\n\n\n\n# log4j.properties详解\n\n如果不喜欢在 log4j.xml 配置，那么也可以在 log4j.properties 配置，但是我建议在 xml 配置。\n\n## 设置全局日志 logger\nlog4j.rootlogger=debug,console,fileout\n# debug、console、file、rolling_file、mail、database\nlog4j.addivity.org.apache=true\n\n## 输出控制台 appender ##\nlog4j.appender.console=org.apache.log4j.consoleappender\nlog4j.appender.threshold=debug\nlog4j.appender.console.target=system.out\nlog4j.appender.console.layout=org.apache.log4j.patternlayout\nlog4j.appender.console.layout.conversionpattern=[%-5p][%d{yyyy-mm-dd hh\\:mm\\:ss,sss}][%c] \\:%m%n\n## 另外两种输出格式，可选\n# log4j.appender.console.layout.conversionpattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n\\u00a0\n# log4j.appender.console.layout.conversionpattern=[start]%d{date}[date]%n%p[priority]%n%x[ndc]%n%t[thread] n%c[category]%n%m[message]%n%n\n\n## 输出 debug 级别以上的日志到 e://logs/debug.log\nlog4j.appender.d=org.apache.log4j.dailyrollingfileappender\nlog4j.appender.d.file=e://logs/log.log\nlog4j.appender.d.append=true\nlog4j.appender.d.threshold=debug\nlog4j.appender.d.layout=org.apache.log4j.patternlayout\nlog4j.appender.d.layout.conversionpattern=%-d{yyyy-mm-dd hh:mm:ss}  [ %t:%r ] - [ %p ]  %m%n\n\n## 输出 error 级别以上的日志到 e://logs/error.log\nlog4j.appender.e=org.apache.log4j.dailyrollingfileappender\nlog4j.appender.e.file=e://logs/error.log\nlog4j.appender.e.append=true\nlog4j.appender.e.threshold=error\nlog4j.appender.e.layout=org.apache.log4j.patternlayout\nlog4j.appender.e.layout.conversionpattern=%-d{yyyy-mm-dd hh:mm:ss}  [ %t:%r ] - [ %p ]  %m%n\n\n## ...... 其他级别的日志同理\n\n\n## 日志发生到服务器 appender \n#log4j.appender.socket=org.apache.log4j.rollingfileappender\n#log4j.appender.socket.remotehost=localhost\n#log4j.appender.socket.port=7272\n#log4j.appender.socket.locationinfo=true\n## set up for log facter 5 \n#log4j.appender.socket.layout=org.apache.log4j.patternlayout\n#log4j.appender.socet.layout.conversionpattern=[start]%d{date}[date]%n%p[priority]%n%x[ndc]%n%t[thread]%n%c[category]%n%m[message]%n%n\n\n## log factor 5 appender \n#log4j.appender.lf5_appender=org.apache.log4j.lf5.lf5appender\n#log4j.appender.lf5_appender.maxnumberofrecords=2000\n\n## 日志发生到邮箱 appender \n#log4j.appender.mail=org.apache.log4j.net.smtpappender\n#log4j.appender.mail.threshold=fatal\n#log4j.appender.mail.buffersize=10\n#log4j.appender.mail.from=openwolfl@163.com\n#log4j.appender.mail.smtphost=mail.openwolf.com\n#log4j.appender.mail.subject=log4j message\n#log4j.appender.mail.to=openwolfl@163.com\n#log4j.appender.mail.layout=org.apache.log4j.patternlayout\n#log4j.appender.mail.layout.conversionpattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n\n\n## jdbc appender  \n#log4j.appender.database=org.apache.log4j.jdbc.jdbcappender\n#log4j.appender.database.url=jdbc:mysql://localhost:3306/test\n#log4j.appender.database.driver=com.mysql.jdbc.driver\n#log4j.appender.database.user=root\n#log4j.appender.database.password=123456\n#log4j.appender.database.sql=insert into log4j (message) values (\'[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n\')\n#log4j.appender.database.layout=org.apache.log4j.patternlayout\n#log4j.appender.database.layout.conversionpattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n\n#log4j.appender.a1=org.apache.log4j.dailyrollingfileappender\n#log4j.appender.a1.file=samplemessages.log4j\n#log4j.appender.a1.datepattern=yyyymmdd-hh\'.log4j\'\n#log4j.appender.a1.layout=org.apache.log4j.xml.xmllayout\n\n### 自定义 appender \n#log4j.appender.im = net.cybercorlin.util.logger.appender.imappender\n#log4j.appender.im.host = mail.cybercorlin.net \n#log4j.appender.im.username = username \n#log4j.appender.im.password = password \n#log4j.appender.im.recipient = 2456019588@qq.com\n#log4j.appender.im.layout=org.apache.log4j.patternlayout\n#log4j.appender.im.layout.conversionpattern =[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n\n\n\n# log4js配置\n\n我使用 js 来配置 log4j 日志，是因为我的邮箱项目是基于 node 构建。但是其原理 java 的log4j 类似。\n\n本内容基于 node 进行 log4js 配置，其他框架的同理，只需要引入 log4js 即可使用日志功能。\n\n\n# 安装\n\n在 package.json 添加 log4js 依赖\n\n"dependencies": {\n    "log4js": "^6.3.0",\n}\n\n\n1\n2\n3\n\n\n我的完整 package.json 如下：\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n{\n    "name": "email",\n    "version": "1.0",\n    "private": true,\n    "scripts": {\n        "dev": "node app.js"\n    },\n    "dependencies": {\n        "express": "^4.17.1",\n        "log4js": "^6.3.0",\n        "nodemailer": "^6.7.2"\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n安装依赖：\n\nnpm install\n\n# 如果使用的是 yarn\nyarn install\n\n\n1\n2\n3\n4\n\n\n\n# 配置文件\n\n安装完 log4js 依赖，我们就可以引用这个依赖，并且配置日志的级别、输出内容、输出路径。\n\n// 引入插件 log4js\nvar log4js = require(\'log4js\')\nlog4js.configure({\n    appenders: {\n        access: {    // info 日志的 name\n            type: \'file\',     \n            filename: "logs/access.log",\n            layout: {\n                type: \'pattern\',\n                pattern: \'[%d{yyyy-mm-dd hh:mm:ss sss}] [%p] %c - %m\'\n            },\n        },\n        error: {    // 错误日志的 name\n            type: \'file\',\n            filename: "logs/error.log",\n            layout: {   // 定义日志输出的样式\n                type: \'pattern\',\n                pattern: \'[%d{yyyy mm dd hh:mm:ss sss}] [%p] %c - %m%n\'\n            },\n        },\n    },\n\t// 引用 appenders\n    categories: {\n        default: { appenders: [\'access\'], level: \'info\' },  // 上方 appenders 的 name\n        error: { appenders: [\'error\'], level: \'error\' }\n    },\n})\n\nexports.logger = function (name) {  // name 取 categories 的 name\n    return log4js.getlogger(name || \'default\')  // name 为undefined 时，取 default\n};\nexports.use = function (app, logger) {\n    app.use(log4js.connectlogger(logger || log4js.getlogger(\'default\'), { level: \'info\', format: \'请求类型/uri：「 :method:url 」\' }))\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n可能无法理解 29 行的 name，这个是引用 logger 时，传入的参数，根据这个参数，获取不同的日志输出格式，如下：\n\n// 引入 info 日志\nconst logger = require("./log").logger();\n// 引入 error 日志，传入错误日志的 name，对应 categories\nconst errlogger = require("./log").logger("error");\n\n// 以下仅仅是测试，实际根据需求输出\nlogger.info("info 信息");\nerrlogger.error("error 信息")\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n日志文件路径以及名字如图：\n\n\n\naccess 日志内容如图：\n\n\n\n图片内容和我给的代码不一样，因为这是我实际使用的日志输出。不一样的地方仅仅是 default - 后面的内容，前面的内容都是在配置文件配置好了格式，你输出的内容就会放到 default - 后面。',charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"网站轮子",frontmatter:{title:"网站轮子",permalink:"/whell/web/",date:"2020-04-19T11:33:04.000Z",article:!1,readingShow:"top"},regularPath:"/57.%E8%BD%AE%E5%AD%90%E5%B7%A5%E5%85%B7/75.%E6%94%B6%E8%97%8F%E5%A4%B9/01.%E7%BD%91%E7%AB%99%E8%BD%AE%E5%AD%90.html",relativePath:"57.轮子工具/75.收藏夹/01.网站轮子.md",key:"v-da1689fc",path:"/whell/web/",headers:[{level:2,title:"文档",slug:"文档",normalizedTitle:"文档",charIndex:12},{level:2,title:"社区",slug:"社区",normalizedTitle:"社区",charIndex:220},{level:2,title:"博客",slug:"博客",normalizedTitle:"博客",charIndex:407},{level:2,title:"电子书",slug:"电子书",normalizedTitle:"电子书",charIndex:471},{level:2,title:"文章",slug:"文章",normalizedTitle:"文章",charIndex:359},{level:2,title:"科学上网",slug:"科学上网",normalizedTitle:"科学上网",charIndex:563},{level:2,title:"视频",slug:"视频",normalizedTitle:"视频",charIndex:623},{level:3,title:"电视直播",slug:"电视直播",normalizedTitle:"电视直播",charIndex:756},{level:2,title:"Github",slug:"github",normalizedTitle:"github",charIndex:227},{level:2,title:"在线工具",slug:"在线工具",normalizedTitle:"在线工具",charIndex:877},{level:3,title:"开发",slug:"开发",normalizedTitle:"开发",charIndex:63},{level:3,title:"代码编辑",slug:"代码编辑",normalizedTitle:"代码编辑",charIndex:955},{level:3,title:"Emoji表情",slug:"emoji表情",normalizedTitle:"emoji表情",charIndex:1016},{level:3,title:"图片工具",slug:"图片工具",normalizedTitle:"图片工具",charIndex:1116},{level:3,title:"作图",slug:"作图",normalizedTitle:"作图",charIndex:1350},{level:3,title:"CSS",slug:"css",normalizedTitle:"css",charIndex:551},{level:3,title:"CDN加速",slug:"cdn加速",normalizedTitle:"cdn加速",charIndex:1646},{level:3,title:"网站托管",slug:"网站托管",normalizedTitle:"网站托管",charIndex:1706},{level:3,title:"正则",slug:"正则",normalizedTitle:"正则",charIndex:1736},{level:3,title:"其他",slug:"其他",normalizedTitle:"其他",charIndex:1797},{level:2,title:"设计",slug:"设计",normalizedTitle:"设计",charIndex:385},{level:3,title:"图库",slug:"图库",normalizedTitle:"图库",charIndex:2898},{level:2,title:"有趣",slug:"有趣",normalizedTitle:"有趣",charIndex:3059},{level:2,title:"交互",slug:"交互",normalizedTitle:"交互",charIndex:1976},{level:2,title:"教程",slug:"教程",normalizedTitle:"教程",charIndex:96},{level:2,title:"产品",slug:"产品",normalizedTitle:"产品",charIndex:2885},{level:2,title:"实用",slug:"实用",normalizedTitle:"实用",charIndex:3866},{level:2,title:"Talk",slug:"talk",normalizedTitle:"talk",charIndex:4239},{level:2,title:"算法",slug:"算法",normalizedTitle:"算法",charIndex:1886},{level:2,title:"生活",slug:"生活",normalizedTitle:"生活",charIndex:4319}],headersStr:"文档 社区 博客 电子书 文章 科学上网 视频 电视直播 Github 在线工具 开发 代码编辑 Emoji表情 图片工具 作图 CSS CDN加速 网站托管 正则 其他 设计 图库 有趣 交互 教程 产品 实用 Talk 算法 生活",content:"# 个人收藏夹\n\n\n# 文档\n\n * MDN | MDN-JS标准内置对象 Web技术权威文档\n * DevDocs Web 开发技术文档，非常不错的学习手册！\n * 现代JavaScript教程 以最新标准为基准的JS教程\n * ES5教程 阮一峰的JS教程\n * ES6教程 阮一峰的ES6教程\n * Bash 脚本教程 阮一峰编写\n * ECMA ECMA官网\n * 菜鸟教程 涵盖多种语言的初级教程\n * 腾讯云开发者手册\n\n\n# 社区\n\n * Github 程序员社区\n * 掘金 一个帮助开发者成长的社区\n * 简书 有很多频道的创作社区\n * 思否 解决技术问题的社区\n * stack overflow 同上，外网的\n * InfoQ\n * V2EX\n * 鱼塘热榜 划水网站，收集了很多网站，当天热门文章\n * 码力全开资源库 很全很强大，独立开发者/设计干货/优质利器/工具资源...\n\n\n# 博客\n\n * 阮一峰的网络日志\n * samanthaming 对前端小知识点的总结，并为每个知识点制作精美的小卡片。\n\n\n# 电子书\n\n * 高教书苑 高等教育出版社的书籍，包含多种学科。\n * 前端电子书收集\n * SoBooks 免费的电子书资源网站\n\n\n# 文章\n\n * 灵活运用CSS开发技巧\n\n\n# 科学上网\n\n * 谷歌chrome商店访问助手\n\n * 谷歌云(GCP)一键搭建 V2Ray 让你畅快科学上网\n\n\n# 视频\n\n * 慕课网 实战视频教程\n * 妙味课堂 比较系统的前端入门视频教程\n * 中国大学MOOC 涵盖计算机、外语、心理学等专业免费课程\n * bilibili B站，上面也有一些可供学习的免费视频\n * egghead 质量还不错的短视频教程，外网\n\n\n# 电视直播\n\n * CCTV、卫视高清直播\n\n\n# Github\n\n * github 短域名服务\n * shields 徽章图标\n * followers 全球排名\n * star-history 展示一个项目 Stars 增长曲线\n\n\n# 在线工具\n\n\n# 开发\n\n * Can I use 查看属性和方法的兼容性\n * 30 seconds of code 收集了许多有用的代码小片段\n\n\n# 代码编辑\n\n * codepen 在线代码编辑与演示\n * codesandbox 内嵌VSCode的在线IDE\n\n\n# Emoji表情\n\n * emoji表情\n * emoji表情备忘录\n * gitmoji 通过 emoji 表达 git 的操作内容\n\n> windows系统下按Win+.快速打开表情选择框\n\n\n# 图片工具\n\n * tinypng图片压缩 压缩png很有用\n * Squoosh 谷歌出品在线免费图片压缩工具（jpg、png等,压缩效果比tinypng稍好）\n * waifu2x 通过卷积网络放大图片\n * vectormagic 转换矢量图\n * vectorizer 真正的 png 转 svg 神器\n * 在线AI图片处理 黑白修复、无损放大、动漫化、铅笔画等。\n * remove AI抠图\n * backgroundremover 又一个抠图的\n\n\n# 作图\n\n * processon在线作图 流程图、思维导图、原型图等\n * 百度脑图 思维导图\n\n\n# CSS\n\n * CSS Tricks CSS技巧收集与演示\n * CSS生成器\n * CSS渐变生成器\n * CSS3-Box Shadow(阴影)\n * 贝塞尔曲线生成器\n * 花纹背景生成器\n * 花纹背景-pattern.css\n * 3D字体\n * css-tricks css技巧文章\n * You-need-to-know-css CSS的各种DEMO，很全\n * animista CSS动画可视化工具，复制代码就能用\n * navnav 各种炫酷的CSS动画组件\n\n\n# CDN加速\n\n * jsDelivr 国外的一家优秀的公共 CDN 服务提供商\n * unpkg cdn 服务\n\n\n# 网站托管\n\n * vercel 好用的网站托管服务\n\n\n# 正则\n\n * 正则可视化\n * iHateRegex 正则搜索，细节做得很好\n * 正则迷你书 学习正则的小手册\n\n\n# 其他\n\n * Linux命令手册\n * carbon代码图片生成器 生成好看的代码图片\n\n\n# 设计\n\n * 创造师导航\n * 设计师网址导航\n * remove AI抠图，抠图算法很厉害\n * Manypixels 插画\n * Undraw 插画\n * storytale 插画，种类丰富，包含3D插画\n * uimovement 能从这个网站找到不少动画交互的灵感\n * awwwards是一个一个专门为设计精美的网站以及富有创意的网站颁奖的网站\n * dribbble 经常能在上面找到很多有创意好看的 gif 或者图片\n * Bēhance dribbble 是设计师的微博，Bēhance 是设计师的博客\n * Logojoy 使用 ai 做 logo 的网站，做出来的 logo 质量还不错。\n * brandmark 另一个在线制作 logo 网站\n * instant 又一个 logo 制作网站\n * namecheap又一个 logo 制作网站\n * logo-maker 又一个 logo 制作网站 这个更简单点 就是选模板之后微调\n * coolors 帮你在线配色的网站 你能找到不少配色灵感\n * colorhunt 另一个配色网站\n * uigradients 渐变色网站\n * designcap 在线海报设计\n * Flat UI 色表 Flat UI 色表\n * 0to255 颜色梯度\n * Ikonate 提供免费的图标 icons\n * remixicon 又一个提供免费图标 icons\n * feather 免费的 icons\n * nord 北欧性冷淡风主题配色\n * Unsplash 提供免费的高清图片\n * Pexels 提供免费的高清图片\n * colorkitty 从你的图片中提取配色\n * design.youzan 有赞设计原则\n * iconfont 阿里巴巴矢量图标库\n * undraw 免费的矢量插画\n * icomoon 矢量图标库\n * cssicon 所有的 icon 都是纯 css 画的 缺点：icon 不够多\n * CSS triangle generator 帮你快速用 css 做出三角形\n * clippy 在线帮你使用 css clip-path 做出各种形状的图形\n * Lorem Picsum 提供免费的占位图\n * Canva 可画 生成插画、封面、海报、头像等\n * 404页 404页素材\n * collectui 按功能组件分类的设计图\n * smartmockups 产品模板生成工具\n\n\n# 图库\n\n * uigradients 渐变色生成工具\n * freepik banner 图库\n * 觅元素一天免费下载十张 psd\n * 搞定设计 可以抠图\n * vectorizer 真正的 png 转 svg 神器\n * 站酷\n * 花瓣\n * 虎克 Ps 学习教程\n * beTheme\n * UI 中国\n\n\n# 有趣\n\n * 奇趣网站收藏家 收藏了很多有趣的网站\n * FC在线模拟器(小霸王游戏机) 童年回忆\n * 帮你百度一下 可以 点我测试一下-\n * 国际版 同帮我百度一下-点我测试一下-\n * wallhaven 壁纸网站-\n * URL 地址播放 Emojis 动画 在地址栏里面播放 emoji\n * Can't Unsee 强烈建议前端、客户端、UI 开发的同学玩下，检查一下自己对设计稿的敏感度怎么样\n * ggtalk 平时一直在听的一个技术博客\n * awesome-comment 里面收集了很多有趣的代码注释\n * text-img 都将图片转化为 ascii 用来写注释\n * weird-fonts 将普通字母转化为 特殊 unicode\n * snake 在地址栏里面玩贪吃蛇\n * zero-width-lib 利用零宽度字符实现 隐形水印、加密信息分享、逃脱词匹配，很有创意\n * abbreviations 查看一个简写是什么意思的网站\n * magi ai 搜索神器，超屌\n * 诺基亚短信图片生成器\n\n\n# 交互\n\n * 微交互 里面收集了市面上很多很好的微交互例子 值得学习\n * Little Big Details 同上，一个国外微交互汇集网站\n * cruip 登录页的各种页面设计，可以免费下载模板\n * Comixify 一个波兰团队做了非常好玩的工具，可以把视频自动转成漫画，上图是他们提供的 demo，效果很棒。\n * taiko-web 太鼓达人网页版 只能说很 6\n\n\n# 教程\n\n * npx 教你怎么合理的使用 npx\n * hacksplaining 网络安全学习网站\n * mobile-web-best-practice 移动 web 最佳实践\n\n\n# 产品\n\n * 产品大牛 什么有很多完整的产品原型可以借鉴\n * 磨刀 快速出 ui 原型\n\n\n# 实用\n\n * webden 在线网页编辑器，轻便快捷\n * browser-update 浏览器版本更新提示插件\n * typeform 一个国外的在线调查问卷网站\n * VideoFk VideoFk 视频在线解析下载\n * 全历史 历史内容聚合网站\n * UzerMe 云端办公工具\n * SoBooks 强大的电子书资源网站\n * 稿定设计 键式设计工具+智能抠图\n * 大力盘 百度网盘搜索\n * ENFI 下载器 不限速下载器\n * 来画视频 像做 PPT 一样做短视频\n * Arkie 海报制作工具\n * 优品 PPT\n * 比格 PPT\n * 高清免费图片\n * 高清免费图片 2\n * shapedivider 生成波浪分隔线\n * Notion 知识库、快速笔记、TaskList、日记、读书清单，各种类型，应有尽有\n\n\n# Talk\n\n * peerigon-talks 收集了不少有意思的 talks\n\n\n# 算法\n\n * leetcode 用 js 刷 leetcode\n\n\n# 生活\n\n * Ventusky 风雨气温图",normalizedContent:"# 个人收藏夹\n\n\n# 文档\n\n * mdn | mdn-js标准内置对象 web技术权威文档\n * devdocs web 开发技术文档，非常不错的学习手册！\n * 现代javascript教程 以最新标准为基准的js教程\n * es5教程 阮一峰的js教程\n * es6教程 阮一峰的es6教程\n * bash 脚本教程 阮一峰编写\n * ecma ecma官网\n * 菜鸟教程 涵盖多种语言的初级教程\n * 腾讯云开发者手册\n\n\n# 社区\n\n * github 程序员社区\n * 掘金 一个帮助开发者成长的社区\n * 简书 有很多频道的创作社区\n * 思否 解决技术问题的社区\n * stack overflow 同上，外网的\n * infoq\n * v2ex\n * 鱼塘热榜 划水网站，收集了很多网站，当天热门文章\n * 码力全开资源库 很全很强大，独立开发者/设计干货/优质利器/工具资源...\n\n\n# 博客\n\n * 阮一峰的网络日志\n * samanthaming 对前端小知识点的总结，并为每个知识点制作精美的小卡片。\n\n\n# 电子书\n\n * 高教书苑 高等教育出版社的书籍，包含多种学科。\n * 前端电子书收集\n * sobooks 免费的电子书资源网站\n\n\n# 文章\n\n * 灵活运用css开发技巧\n\n\n# 科学上网\n\n * 谷歌chrome商店访问助手\n\n * 谷歌云(gcp)一键搭建 v2ray 让你畅快科学上网\n\n\n# 视频\n\n * 慕课网 实战视频教程\n * 妙味课堂 比较系统的前端入门视频教程\n * 中国大学mooc 涵盖计算机、外语、心理学等专业免费课程\n * bilibili b站，上面也有一些可供学习的免费视频\n * egghead 质量还不错的短视频教程，外网\n\n\n# 电视直播\n\n * cctv、卫视高清直播\n\n\n# github\n\n * github 短域名服务\n * shields 徽章图标\n * followers 全球排名\n * star-history 展示一个项目 stars 增长曲线\n\n\n# 在线工具\n\n\n# 开发\n\n * can i use 查看属性和方法的兼容性\n * 30 seconds of code 收集了许多有用的代码小片段\n\n\n# 代码编辑\n\n * codepen 在线代码编辑与演示\n * codesandbox 内嵌vscode的在线ide\n\n\n# emoji表情\n\n * emoji表情\n * emoji表情备忘录\n * gitmoji 通过 emoji 表达 git 的操作内容\n\n> windows系统下按win+.快速打开表情选择框\n\n\n# 图片工具\n\n * tinypng图片压缩 压缩png很有用\n * squoosh 谷歌出品在线免费图片压缩工具（jpg、png等,压缩效果比tinypng稍好）\n * waifu2x 通过卷积网络放大图片\n * vectormagic 转换矢量图\n * vectorizer 真正的 png 转 svg 神器\n * 在线ai图片处理 黑白修复、无损放大、动漫化、铅笔画等。\n * remove ai抠图\n * backgroundremover 又一个抠图的\n\n\n# 作图\n\n * processon在线作图 流程图、思维导图、原型图等\n * 百度脑图 思维导图\n\n\n# css\n\n * css tricks css技巧收集与演示\n * css生成器\n * css渐变生成器\n * css3-box shadow(阴影)\n * 贝塞尔曲线生成器\n * 花纹背景生成器\n * 花纹背景-pattern.css\n * 3d字体\n * css-tricks css技巧文章\n * you-need-to-know-css css的各种demo，很全\n * animista css动画可视化工具，复制代码就能用\n * navnav 各种炫酷的css动画组件\n\n\n# cdn加速\n\n * jsdelivr 国外的一家优秀的公共 cdn 服务提供商\n * unpkg cdn 服务\n\n\n# 网站托管\n\n * vercel 好用的网站托管服务\n\n\n# 正则\n\n * 正则可视化\n * ihateregex 正则搜索，细节做得很好\n * 正则迷你书 学习正则的小手册\n\n\n# 其他\n\n * linux命令手册\n * carbon代码图片生成器 生成好看的代码图片\n\n\n# 设计\n\n * 创造师导航\n * 设计师网址导航\n * remove ai抠图，抠图算法很厉害\n * manypixels 插画\n * undraw 插画\n * storytale 插画，种类丰富，包含3d插画\n * uimovement 能从这个网站找到不少动画交互的灵感\n * awwwards是一个一个专门为设计精美的网站以及富有创意的网站颁奖的网站\n * dribbble 经常能在上面找到很多有创意好看的 gif 或者图片\n * behance dribbble 是设计师的微博，behance 是设计师的博客\n * logojoy 使用 ai 做 logo 的网站，做出来的 logo 质量还不错。\n * brandmark 另一个在线制作 logo 网站\n * instant 又一个 logo 制作网站\n * namecheap又一个 logo 制作网站\n * logo-maker 又一个 logo 制作网站 这个更简单点 就是选模板之后微调\n * coolors 帮你在线配色的网站 你能找到不少配色灵感\n * colorhunt 另一个配色网站\n * uigradients 渐变色网站\n * designcap 在线海报设计\n * flat ui 色表 flat ui 色表\n * 0to255 颜色梯度\n * ikonate 提供免费的图标 icons\n * remixicon 又一个提供免费图标 icons\n * feather 免费的 icons\n * nord 北欧性冷淡风主题配色\n * unsplash 提供免费的高清图片\n * pexels 提供免费的高清图片\n * colorkitty 从你的图片中提取配色\n * design.youzan 有赞设计原则\n * iconfont 阿里巴巴矢量图标库\n * undraw 免费的矢量插画\n * icomoon 矢量图标库\n * cssicon 所有的 icon 都是纯 css 画的 缺点：icon 不够多\n * css triangle generator 帮你快速用 css 做出三角形\n * clippy 在线帮你使用 css clip-path 做出各种形状的图形\n * lorem picsum 提供免费的占位图\n * canva 可画 生成插画、封面、海报、头像等\n * 404页 404页素材\n * collectui 按功能组件分类的设计图\n * smartmockups 产品模板生成工具\n\n\n# 图库\n\n * uigradients 渐变色生成工具\n * freepik banner 图库\n * 觅元素一天免费下载十张 psd\n * 搞定设计 可以抠图\n * vectorizer 真正的 png 转 svg 神器\n * 站酷\n * 花瓣\n * 虎克 ps 学习教程\n * betheme\n * ui 中国\n\n\n# 有趣\n\n * 奇趣网站收藏家 收藏了很多有趣的网站\n * fc在线模拟器(小霸王游戏机) 童年回忆\n * 帮你百度一下 可以 点我测试一下-\n * 国际版 同帮我百度一下-点我测试一下-\n * wallhaven 壁纸网站-\n * url 地址播放 emojis 动画 在地址栏里面播放 emoji\n * can't unsee 强烈建议前端、客户端、ui 开发的同学玩下，检查一下自己对设计稿的敏感度怎么样\n * ggtalk 平时一直在听的一个技术博客\n * awesome-comment 里面收集了很多有趣的代码注释\n * text-img 都将图片转化为 ascii 用来写注释\n * weird-fonts 将普通字母转化为 特殊 unicode\n * snake 在地址栏里面玩贪吃蛇\n * zero-width-lib 利用零宽度字符实现 隐形水印、加密信息分享、逃脱词匹配，很有创意\n * abbreviations 查看一个简写是什么意思的网站\n * magi ai 搜索神器，超屌\n * 诺基亚短信图片生成器\n\n\n# 交互\n\n * 微交互 里面收集了市面上很多很好的微交互例子 值得学习\n * little big details 同上，一个国外微交互汇集网站\n * cruip 登录页的各种页面设计，可以免费下载模板\n * comixify 一个波兰团队做了非常好玩的工具，可以把视频自动转成漫画，上图是他们提供的 demo，效果很棒。\n * taiko-web 太鼓达人网页版 只能说很 6\n\n\n# 教程\n\n * npx 教你怎么合理的使用 npx\n * hacksplaining 网络安全学习网站\n * mobile-web-best-practice 移动 web 最佳实践\n\n\n# 产品\n\n * 产品大牛 什么有很多完整的产品原型可以借鉴\n * 磨刀 快速出 ui 原型\n\n\n# 实用\n\n * webden 在线网页编辑器，轻便快捷\n * browser-update 浏览器版本更新提示插件\n * typeform 一个国外的在线调查问卷网站\n * videofk videofk 视频在线解析下载\n * 全历史 历史内容聚合网站\n * uzerme 云端办公工具\n * sobooks 强大的电子书资源网站\n * 稿定设计 键式设计工具+智能抠图\n * 大力盘 百度网盘搜索\n * enfi 下载器 不限速下载器\n * 来画视频 像做 ppt 一样做短视频\n * arkie 海报制作工具\n * 优品 ppt\n * 比格 ppt\n * 高清免费图片\n * 高清免费图片 2\n * shapedivider 生成波浪分隔线\n * notion 知识库、快速笔记、tasklist、日记、读书清单，各种类型，应有尽有\n\n\n# talk\n\n * peerigon-talks 收集了不少有意思的 talks\n\n\n# 算法\n\n * leetcode 用 js 刷 leetcode\n\n\n# 生活\n\n * ventusky 风雨气温图",charsets:{cjk:!0},lastUpdated:"2022/04/08, 22:02:16"},{title:"前端轮子",frontmatter:{title:"前端轮子",date:"2021-10-09T19:42:02.000Z",permalink:"/whell/front",article:!1,readingShow:"top"},regularPath:"/57.%E8%BD%AE%E5%AD%90%E5%B7%A5%E5%85%B7/75.%E6%94%B6%E8%97%8F%E5%A4%B9/02.%E5%89%8D%E7%AB%AF%E8%BD%AE%E5%AD%90.html",relativePath:"57.轮子工具/75.收藏夹/02.前端轮子.md",key:"v-1f2c2a98",path:"/whell/front/",headers:[{level:2,title:"React UI 组件库",slug:"react-ui-组件库",normalizedTitle:"react ui 组件库",charIndex:2},{level:2,title:"Vue UI组件库",slug:"vue-ui组件库",normalizedTitle:"vue ui组件库",charIndex:68},{level:2,title:"常用效果组件",slug:"常用效果组件",normalizedTitle:"常用效果组件",charIndex:124},{level:2,title:"工具类",slug:"工具类",normalizedTitle:"工具类",charIndex:201},{level:2,title:"Vue工具类",slug:"vue工具类",normalizedTitle:"vue工具类",charIndex:331}],headersStr:"React UI 组件库 Vue UI组件库 常用效果组件 工具类 Vue工具类",content:"# React UI 组件库\n\n * Ant Design\n * React Bootstrap\n * MATERIAL-UI\n\n\n# Vue UI组件库\n\n * Element UI PC端\n * Vant 移动端\n * View UI\n\n\n# 常用效果组件\n\n * Animate.css 动画库\n * Swiper 轮播组件\n * mescroll 下拉刷新和上拉加载框架-基于原生JS\n\n\n# 工具类\n\n * Lodash.js\n * Day.js 处理日期\n * Timeago.js 相对时间，如N小时前\n * Echarts 百度图表\n * Meditor.md 开源在线 Markdown 编辑器\n * validator.js 验证库\n\n\n# Vue工具类\n\n * vue-draggable 基于Sortable.js实现的vue拖拽插件\n * vue-qr 文本转二维码\n * vue-cropper 图片裁剪插件\n * vue-lazyload 懒加载\n * vue-simple-upload 上传组件",normalizedContent:"# react ui 组件库\n\n * ant design\n * react bootstrap\n * material-ui\n\n\n# vue ui组件库\n\n * element ui pc端\n * vant 移动端\n * view ui\n\n\n# 常用效果组件\n\n * animate.css 动画库\n * swiper 轮播组件\n * mescroll 下拉刷新和上拉加载框架-基于原生js\n\n\n# 工具类\n\n * lodash.js\n * day.js 处理日期\n * timeago.js 相对时间，如n小时前\n * echarts 百度图表\n * meditor.md 开源在线 markdown 编辑器\n * validator.js 验证库\n\n\n# vue工具类\n\n * vue-draggable 基于sortable.js实现的vue拖拽插件\n * vue-qr 文本转二维码\n * vue-cropper 图片裁剪插件\n * vue-lazyload 懒加载\n * vue-simple-upload 上传组件",charsets:{cjk:!0},lastUpdated:"2022/04/05, 14:44:34"},{title:"插件轮子",frontmatter:{title:"插件轮子",date:"2021-10-28T16:27:50.000Z",permalink:"/plugins",article:!1,readingShow:"top"},regularPath:"/57.%E8%BD%AE%E5%AD%90%E5%B7%A5%E5%85%B7/75.%E6%94%B6%E8%97%8F%E5%A4%B9/03.%E6%8F%92%E4%BB%B6%E9%80%89%E6%8B%A9.html",relativePath:"57.轮子工具/75.收藏夹/03.插件选择.md",key:"v-b4fa01ca",path:"/plugins/",headers:[{level:2,title:"vuepress插件",slug:"vuepress插件",normalizedTitle:"vuepress插件",charIndex:2},{level:3,title:"vuepress-plugin-tabs",slug:"vuepress-plugin-tabs",normalizedTitle:"vuepress-plugin-tabs",charIndex:80},{level:3,title:"vuepress-plugin-demo-block",slug:"vuepress-plugin-demo-block",normalizedTitle:"vuepress-plugin-demo-block",charIndex:314},{level:3,title:"vuepress-plugin-reading-progress",slug:"vuepress-plugin-reading-progress",normalizedTitle:"vuepress-plugin-reading-progress",charIndex:483},{level:3,title:"vuepress-plugin-meting",slug:"vuepress-plugin-meting",normalizedTitle:"vuepress-plugin-meting",charIndex:596},{level:3,title:"vuepress-plugin-cursor-effects",slug:"vuepress-plugin-cursor-effects",normalizedTitle:"vuepress-plugin-cursor-effects",charIndex:703},{level:3,title:"vuepress-plugin-dynamic-title",slug:"vuepress-plugin-dynamic-title",normalizedTitle:"vuepress-plugin-dynamic-title",charIndex:826},{level:3,title:"vuepress-plugin-fulltext-search",slug:"vuepress-plugin-fulltext-search",normalizedTitle:"vuepress-plugin-fulltext-search",charIndex:956}],headersStr:"vuepress插件 vuepress-plugin-tabs vuepress-plugin-demo-block vuepress-plugin-reading-progress vuepress-plugin-meting vuepress-plugin-cursor-effects vuepress-plugin-dynamic-title vuepress-plugin-fulltext-search",content:"# vuepress插件\n\nVuepress 的社区所有插件：https://github.com/vuepress/awesome-vuepress\n\n\n# vuepress-plugin-tabs\n\n实现切换 tab。\n\n官网：https://github.com/pskordilakis/vuepress-plugin-tabs\n\n安装：https://notes.youngkbt.cn/about/mdskill/#tabs插件\n\n效果：\n\nmarkdown content\n\n() => {\n\n console.log('Javascript code example')\n\n}\n\n\n1\n2\n3\n4\n5\n\n\n\n# vuepress-plugin-demo-block\n\n官网：https://github.com/xiguaxigua/vuepress-plugin-demo-block/\n\n功能：既能看代码，也能看代码运行的效果。\n\nDemo：https://notes.youngkbt.cn/about/mdskill/#demo插件\n\n\n# vuepress-plugin-reading-progress\n\n顶部的阅读进度插件。\n\n官网：https://github.com/tolking/vuepress-plugin-reading-progress\n\n\n# vuepress-plugin-meting\n\n左小角的音乐播放器插件。\n\n官网：https://moefyit.github.io/moefy-vuepress/packages/meting.html\n\n\n# vuepress-plugin-cursor-effects\n\n鼠标点击页面的爆炸效果。\n\n官网：https://moefyit.github.io/moefy-vuepress/packages/cursor-effects.html\n\n\n# vuepress-plugin-dynamic-title\n\n动态标题，离开和回来网页后的标题发生变化。\n\n官网：https://moefyit.github.io/moefy-vuepress/packages/dynamic-title.html\n\n\n# vuepress-plugin-fulltext-search\n\n网站搜索插件，能搜索到文章的具体内容。\n\n官网：https://github.com/leo-buneev/vuepress-plugin-fulltext-search",normalizedContent:"# vuepress插件\n\nvuepress 的社区所有插件：https://github.com/vuepress/awesome-vuepress\n\n\n# vuepress-plugin-tabs\n\n实现切换 tab。\n\n官网：https://github.com/pskordilakis/vuepress-plugin-tabs\n\n安装：https://notes.youngkbt.cn/about/mdskill/#tabs插件\n\n效果：\n\nmarkdown content\n\n() => {\n\n console.log('javascript code example')\n\n}\n\n\n1\n2\n3\n4\n5\n\n\n\n# vuepress-plugin-demo-block\n\n官网：https://github.com/xiguaxigua/vuepress-plugin-demo-block/\n\n功能：既能看代码，也能看代码运行的效果。\n\ndemo：https://notes.youngkbt.cn/about/mdskill/#demo插件\n\n\n# vuepress-plugin-reading-progress\n\n顶部的阅读进度插件。\n\n官网：https://github.com/tolking/vuepress-plugin-reading-progress\n\n\n# vuepress-plugin-meting\n\n左小角的音乐播放器插件。\n\n官网：https://moefyit.github.io/moefy-vuepress/packages/meting.html\n\n\n# vuepress-plugin-cursor-effects\n\n鼠标点击页面的爆炸效果。\n\n官网：https://moefyit.github.io/moefy-vuepress/packages/cursor-effects.html\n\n\n# vuepress-plugin-dynamic-title\n\n动态标题，离开和回来网页后的标题发生变化。\n\n官网：https://moefyit.github.io/moefy-vuepress/packages/dynamic-title.html\n\n\n# vuepress-plugin-fulltext-search\n\n网站搜索插件，能搜索到文章的具体内容。\n\n官网：https://github.com/leo-buneev/vuepress-plugin-fulltext-search",charsets:{cjk:!0},lastUpdated:"2022/04/05, 14:44:34"},{title:"项目介绍",frontmatter:{title:"项目介绍",date:"2021-10-28T14:29:00.000Z",permalink:"/projects/intro/",titleTag:"项目",categories:["tbeam"],tags:["Vue3UI"],readingShow:"top"},regularPath:"/59.%E9%A1%B9%E7%9B%AE%E5%B7%A5%E7%A8%8B/04.tbeam/01.%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D.html",relativePath:"59.项目工程/04.tbeam/01.项目介绍.md",key:"v-14f2c9c7",path:"/projects/intro/",headers:[{level:2,title:"项目介绍",slug:"项目介绍",normalizedTitle:"项目介绍",charIndex:3},{level:2,title:"项目技术",slug:"项目技术",normalizedTitle:"项目技术",charIndex:11},{level:2,title:"框架版本",slug:"框架版本",normalizedTitle:"框架版本",charIndex:19}],headersStr:"项目介绍 项目技术 框架版本",content:" * 项目介绍\n * 项目技术\n * 框架版本\n\n\n\n\n# 项目介绍\n\n这是一个ERP后台管理系统，实现了销售、采购、生产、人事、财务、权限的管理功能。旨在打造一体化的管理系统，为企业提供更好的内部管理方式。\n\n项目技术进行了讨论，使用流行的前后端分离技术，先设计好前端的页面和一些功能，后设计好后端包括微服务，数据库，接口文档等。\n\n目前我负责的是采购模块，包括前端和后端。\n\n\n# 项目技术\n\n前端框架：Vue3 全家桶、Ant Design Vue3.x UI\n\n前端技术：ES6、dayjs库、Echart图表、driverjs 和 introjs 的新手引导\n\n接口数据平台：fastmock\n\n后端框架：Spring Boot、Spring Cloud、Spring Cloud Alibaba\n\n安全框架：Spring Security\n\n接口文档技术：smart-doc\n\n接口文档：torna\n\n\n# 框架版本\n\n\n\n\n\n\n\n",normalizedContent:" * 项目介绍\n * 项目技术\n * 框架版本\n\n\n\n\n# 项目介绍\n\n这是一个erp后台管理系统，实现了销售、采购、生产、人事、财务、权限的管理功能。旨在打造一体化的管理系统，为企业提供更好的内部管理方式。\n\n项目技术进行了讨论，使用流行的前后端分离技术，先设计好前端的页面和一些功能，后设计好后端包括微服务，数据库，接口文档等。\n\n目前我负责的是采购模块，包括前端和后端。\n\n\n# 项目技术\n\n前端框架：vue3 全家桶、ant design vue3.x ui\n\n前端技术：es6、dayjs库、echart图表、driverjs 和 introjs 的新手引导\n\n接口数据平台：fastmock\n\n后端框架：spring boot、spring cloud、spring cloud alibaba\n\n安全框架：spring security\n\n接口文档技术：smart-doc\n\n接口文档：torna\n\n\n# 框架版本\n\n\n\n\n\n\n\n",charsets:{cjk:!0},lastUpdated:"2022/04/05, 14:44:34"},{title:"Ant Design Vue 3.x - 表格",frontmatter:{title:"Ant Design Vue 3.x - 表格",date:"2021-10-26T23:41:08.000Z",titleTag:"项目",permalink:"/advue3/table/",categories:["tbeam"],tags:["Vue3UI"],readingShow:"top"},regularPath:"/59.%E9%A1%B9%E7%9B%AE%E5%B7%A5%E7%A8%8B/04.tbeam/02.ADVue3%E7%9A%84%E8%A1%A8%E6%A0%BC.html",relativePath:"59.项目工程/04.tbeam/02.ADVue3的表格.md",key:"v-77493b55",path:"/advue3/table/",headers:[{level:2,title:"前言",slug:"前言",normalizedTitle:"前言",charIndex:3},{level:2,title:"使用步骤",slug:"使用步骤",normalizedTitle:"使用步骤",charIndex:9},{level:2,title:"效果",slug:"效果",normalizedTitle:"效果",charIndex:17},{level:2,title:"问题",slug:"问题",normalizedTitle:"问题",charIndex:23},{level:3,title:"1.表格无法单选",slug:"_1-表格无法单选",normalizedTitle:"1.表格无法单选",charIndex:31},{level:3,title:"2.编辑的简单原理",slug:"_2-编辑的简单原理",normalizedTitle:"2.编辑的简单原理",charIndex:45},{level:2,title:"其他",slug:"其他",normalizedTitle:"其他",charIndex:58},{level:3,title:"操作",slug:"操作",normalizedTitle:"操作",charIndex:66},{level:3,title:"修改表格",slug:"修改表格",normalizedTitle:"修改表格",charIndex:74},{level:2,title:"完整代码",slug:"完整代码",normalizedTitle:"完整代码",charIndex:82}],headersStr:"前言 使用步骤 效果 问题 1.表格无法单选 2.编辑的简单原理 其他 操作 修改表格 完整代码",content:' * 前言\n * 使用步骤\n * 效果\n * 问题\n   * 1.表格无法单选\n   * 2.编辑的简单原理\n * 其他\n   * 操作\n   * 修改表格\n * 完整代码\n\n\n\n\n# 前言\n\n项目组长决定使用 Ant Design Vue 的最新3.x版本。（以下简称 ADVue）\n\n我也是第一次使用这个 Vue 的 UI，之前在学习 Vue2 的时候听过这个 UI，是由饿了么团队打造出来的。\n\n因为我是采购模块，所以我首先设计采购订单的界面，需要用到 ADVue 的 table 组件。\n\nAnt Design Vue 3.x传送门\n\n进入官网，找到组件，然后左侧往下拉，找到 Table 表格\n\n\n\n然后往下翻，我们使用的是有多选的表格，即每一列都可以进行选择。\n\n\n# 使用步骤\n\n 1. 当然是进行代码的 copy，然后 paste\n 2. 根据模块，对官方自带的变量进行重命名\n 3. 根据页面的显示，进行调式\n 4. 模拟接口的数据请求\n 5. 对表格的增删改操作\n\n\n# 效果\n\n经过一个下午的调式，我得出了如下结果\n\n\n\n笔记\n\n操作的内容原本是文字，即增删改查，后来考虑字太长，替换为图标。\n\n2021-10-26 @村长\n\n代码如下\n\n考虑代码长度，只有表格部分的代码。完整代码放到最下面\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<template>\n  \x3c!-- 加载表格数据 --\x3e\n  <a-spin tip="数据正在加载中" :spinning="loading">\n    <a-table\n      :row-selection="{\n        onChange: onSelectChange,\n        selectedRowKeys,\n        onSelect,\n        onSelectAll,\n      }"\n      :columns="columns"\n      :data-source="tableDataList"\n      rowKey="id"\n      bordered\n    >\n    </a-table>\n  </a-spin>\n</template>\n\n<script lang=\'ts\'>\nimport {\n  getCurrentInstance,\n  defineComponent,\n  ref,\n  toRefs,\n  reactive,\n  onMounted,\n  UnwrapRef,\n} from "vue";\nimport { message, Modal } from "ant-design-vue";\nimport IconFont from "../../config/iconfont";\nimport { cloneDeep } from "lodash-es";\nimport { PurOrderType } from "../../assets/types/purchase/order";\nimport { SupplierType } from "../../assets/types/purchase/supplier";\n\n// 表格表头\nconst columns = [\n  {\n    title: "采购单号",\n    dataIndex: "id",\n  },\n  {\n    title: "供应商",\n    dataIndex: "supplier",\n  },\n  {\n    title: "采购数量",\n    dataIndex: "count",\n    sorter: (a: PurOrderType, b: PurOrderType) => a.count - b.count,\n  },\n  {\n    title: "单价",\n    dataIndex: "price",\n    sorter: (a: PurOrderType, b: PurOrderType) => a.price - b.price,\n  },\n  {\n    title: "总价",\n    dataIndex: "total",\n    sorter: (a: PurOrderType, b: PurOrderType) => a.total - b.total,\n  },\n  {\n    title: "采购日期",\n    dataIndex: "buyTime",\n    sorter: (a: PurOrderType, b: PurOrderType) => a.buyTime - b.buyTime,\n  },\n  {\n    title: "结算日期",\n    dataIndex: "settleTime",\n    sorter: (a: PurOrderType, b: PurOrderType) =>\n      a.settleTime - b.settleTime,\n  },\n  {\n    title: "负责人",\n    dataIndex: "leader",\n  },\n  {\n    title: "订单状态",\n    dataIndex: "status",\n  },\n  {\n    title: "操作",\n    dataIndex: "operate",\n    width: 155,\n  },\n];\n\nexport default defineComponent({\n  name: "PurchaseOrder",\n  components: {\n    // 引入自定义图标\n    IconFont,\n  },\n  setup() {\n\n    // axios请求\n    const $http = getCurrentInstance().appContext.config.globalProperties.$http;\n    // 判断加载\n    const loading = ref<boolean>(false);\n    // reactive统一管理的数据\n    const state = reactive({\n      tableDataList: [],  // 必须响应式\n      selectedRowKeys: [],\n    });\n    // 表格的数据存储区\n    const editableData: UnwrapRef<Record<string, PurOrderType>> = reactive({});\n\n    // 初始化数据\n    const initData = () => {\n      loading.value = true;\n      initTable();\n      loading.value = false;\n      message.success("数据加载成功");\n    };\n\n    // 加载表格数据\n    const initTable = () => {\n      $http.get("/purchase/order/orderList").then((res: any) => {\n        state.tableDataList = res.data;\n      });\n    };\n\n    // 目前没用,第一个参数是选中后的列id,第二个参数是选中的列信息\n    const onSelectChange = (\n      selectedRowKeys: (string | number)[],\n      selectedRows: PurOrderType\n    ) => {\n      console.log(\n        `selectedRowKeys: ${selectedRowKeys}`,\n        "selectedRows: ",\n        selectedRows\n      );\n      state.selectedRowKeys = selectedRowKeys;\n    };\n    // 选择某一列的回调\n    const onSelect = (record, selected, selectedRows, nativeEvent) => {\n      console.log("onSelect", record, selected, selectedRows, nativeEvent);\n    };\n    // 全选的回调\n    const onSelectAll = (selected, selectedRows, changeRows) => {\n      console.log("onSelectAll", selected, selectedRows, changeRows);\n    };\n\n    \n    // 组件挂载页面后的回调,生命函数\n    onMounted(() => {\n      initData();\n    });\n\n    return {\n      // 数据\n      ...toRefs(state),\n      columns,\n      loading,\n      editableData, //操作表格需要的存储区\n      // 函数  \n      // 表格的选中 回到函数\n      onSelectChange,  // 选中表格某一列的回调\n      onSelect,   // 选中表格某一列的回调\n      onSelectAll,    // 全选表格的回调\n      // 最后一列:操作 回调函数\n      onProduce,    // 点击商品类型回调\n      onMaterial,   // 点击商品原料回调\n      onEdit,   // 编辑回到\n      onSave,   // 保存回调\n      onDelete, // 删除回调\n      onCancel, // 返回回调\n    };\n  },\n});\n<\/script>\n\n<style lang=\'less\'>\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n\n\n\n# 问题\n\n写下这次文档的最终目的，就是记录自己遇到的问题啦~~~\n\n编辑此处时间\n\n现在是凌晨12点43分。\n\n2021-11-27 @村长\n\n\n# 1.表格无法单选\n\n调式过程，有时候选择某一列就全选所有列（不是点击采购订单左侧的按钮，而是表格里随便一个按钮）\n\n\n\n刚洗完澡，还是冷水，宿舍已经停热水 ~~~ 继续更\n\n原因：\n\n * 经过多次调式，发觉还是要明白原理，才能解决问题\n\n * 选择一列，实际上就是选择该列的唯一标识符，我这里就是id，即采购订单，我出现上述问题是因为没有指定id作为唯一标识符，官方默认是key为标识符\n\n * 于是，只需在 table 标签里加上 rowKey="id" 即可，如果自己的唯一标识符不是 id，也不是 key，则替换即可\n\n<a-table\n      :row-selection="{\n        onChange: onSelectChange,\n        selectedRowKeys,\n        onSelect,\n        onSelectAll,\n      }"\n      :columns="columns"\n      :data-source="tableDataList"\n      rowKey="id"  // 这里\n      bordered\n    >\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n主要官方的示例代码没有用到 rowKey，它的例子直接指名唯一标识符为 key，也就是默认，所以不加 rowKey。\n\n> 注意：如果指定的 rowKey 有两个重复，则选择任意一个，双方都会被选中。\n\n\n# 2.编辑的简单原理\n\n这个其实不是问题，是我在自己创建一个变量实现编辑的原理时，发现我 copy 官方的代码，已经自带了这个变量，于是我去掉了自己创建的变量，直接用官方的。\n\n 1. 创建reactive变量 editableData 用于存储要编辑的列数据\n    \n    const editableData: UnwrapRef<Record<string, PurOrderType>> = reactive({});\n    \n    \n    1\n    \n\n 2. 当点击编辑按钮时，触发回调函数，在回调里获得参数，通过该参数获得编辑的列数据，深克隆给 editableData\n    \n    深克隆：复制了一份一模一样的数据，虽然双方拥有一样的数据，但是彼此互不干扰。\n    \n    浅克隆：拿了对方一份数据，双方共享一份数据，任意一方修改，双方看到的数据就是修改后的数据。\n    \n    // 编辑列信息的回调\n    const onEdit = (key: string) => {\n        // 深克隆 编辑的第一个列数据给editableData\n        editableData[key] = cloneDeep(\n            // tableDataList 存储所有表格的数据，可以通过id获取每一列的数据\n            state.tableDataList.filter((item) => key === item.id)[0]\n        );\n    };\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    \n\n 3. 编辑列数据其实就是修改 editableData 的值，当编辑后，点击保存，即可触发保存的回调函数\n    \n    // 保存编辑后列信息的回调\n    const onSave = (key: string) => {\n        Object.assign(\n            // 获取第一个修改的列\n            state.tableDataList.filter((item) => key === item.id)[0],\n            // 整个表格的数据\n            editableData[key]\n        );\n        // 退出编辑列信息\n        delete editableData[key];\n    };\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    11\n    \n    \n    我觉得最妙的就是使用了 Object.assign 来进行对象的合并。\n    \n    第一个参数是编辑前的列数据；\n    \n    第二个参数是编辑后的列数据。\n    \n    这个方法合并的两个参数对象里，如果出现了重复的属性，则以第二个参数为准，合并后的对象赋给第一个参数，所以最终第一个参数 state.tableDataList 既有自己不变的属性，也有修改后的属性，实现了编辑功能\n\n)\n\n最后将修改后的列数据合并到之前没修改的数据里\n\n\n\n\n# 其他\n\n\n# 操作\n\n原本操作的那一行是以文字表示，即\n\n\n\n但是太多文字，容易发生页面能够左右移动，影响体验，所以替换为了图标\n\n<a-button size="small" @click="onEdit(record.id)">\n    \x3c!-- <p>编辑</p> --\x3e\n    <icon-font type="bt-bianji" />\n</a-button>\n\n\n1\n2\n3\n4\n\n\n其实把 p 标签换成了 icon 标签，这个标签是 ADVue 提供的，类型是阿里巴巴自己下载的图标，引入阿里巴巴矢量图标库即可。\n\niconfont.ts 文件\n\nimport {\n    createFromIconfontCN\n} from "@ant-design/icons-vue";\n\nconst IconFont = createFromIconfontCN({\n    scriptUrl: "//at.alicdn.com/t/font_2856200_a28y0lzjxuv.js",\n});\n\nexport default IconFont\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n自己写的 Vue 文件并注册，即可使用 icon 标签引入，type 对应的是矢量图标库的图标名字\n\nimport IconFont from "../../config/iconfont";\nexport default defineComponent({\n    components: {\n        // 引入自定义图标\n        IconFont,\n    },\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 修改表格\n\n如果想修改表格的某一行，通过 bodyCell 获取该列的信息，进行修改。后面我还利用这个实现了判断某一行数据是否为空，则默认显示一个数据的需求\n\n\x3c!-- 操作表格信息 column：当前列的信息 text：当前列的数据 record：当前行的数据--\x3e\n<template #bodyCell="{ column, text, record }">\n    \x3c!-- 总价由价格和数量计算 --\x3e\n    <span v-if="column.dataIndex == \'total\'">\n    \t{{ record.count * record.price }}\n    </span>\n</template>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 完整代码\n\n完整代码\n\n<template>\n  <a-space size="middle">\n    \x3c!-- 新增按钮 --\x3e\n    <a-button type="primary" style="left: 10px; margin: 10px">\n      新增采购订单\n    </a-button>\n    \x3c!-- 搜索供应商 --\x3e\n    <a-select\n      show-search\n      placeholder="查询或选择供应商"\n      style="width: 200px"\n      :options="supplierNameList"\n      @focus="supplierFocus"\n      @blur="supplierBlur"\n      @change="supplierChange"\n    />\n  </a-space>\n  \x3c!-- 范围搜索和精准搜索 --\x3e\n  <a-tooltip placement="top" title="范围查询&精准查询&双点查询">\n    <a-select\n      style="width: 110px; margin-left: 18px"\n      placeholder="选择类型"\n      @select="onSearchType"\n      allowClear\n    >\n      <template v-for="item in searchTitle" :key="item.dataIndex">\n        <a-select-option :value="item.title">{{ item.title }}</a-select-option>\n      </template>\n    </a-select>\n    <a-input\n      v-model:value="minCodition"\n      style="width: 130px; text-align: center"\n      placeholder="Minimum"\n    />\n    <a-input\n      style="\n        width: 30px;\n        border-left: 0;\n        pointer-events: none;\n        background-color: #fff;\n      "\n      placeholder="~"\n      disabled\n    />\n    <a-input\n      v-model:value="maxCodition"\n      style="width: 130px; text-align: center; border-left: 0"\n      placeholder="Maximum"\n    />\n    <a-button\n      type="primary"\n      :disabled="(minCodition == \'\' || searchType == \'\') && (maxCodition == \'\' || searchType == \'\')"\n      @click="onSearch"\n    >\n      搜索\n    </a-button>\n  </a-tooltip>\n  \x3c!-- 加载表格数据 --\x3e\n  <a-spin tip="数据正在加载中" :spinning="loading">\n    <a-table\n      :row-selection="{\n        onChange: onSelectChange,\n        selectedRowKeys,\n        onSelect,\n        onSelectAll,\n      }"\n      :columns="columns"\n      :data-source="tableDataList"\n      rowKey="id"\n      bordered\n    >\n      \x3c!-- 操作表格信息 column：当前列的信息 text：当前列的数据 record：当前行的数据--\x3e\n      <template #bodyCell="{ column, text, record }">\n        \x3c!-- 总价由价格和数量计算 --\x3e\n        <span v-if="column.dataIndex == \'total\'">\n          {{ record.count * record.price }}\n        </span>\n        <template\n          v-if="\n            [\'supplier\', \'count\', \'price\', \'settle\', \'leader\'].includes(\n              column.dataIndex\n            )\n          "\n        >\n          <a-input\n            v-if="editableData[record.id]"\n            v-model:value="editableData[record.id][column.dataIndex]"\n            style="margin: -5px 0"\n          />\n          <template v-else>\n            {{ text }}\n          </template>\n        </template>\n\n        \x3c!-- 如果是操作,则设置行工具 --\x3e\n        <div v-else-if="column.dataIndex == \'operate\'">\n          \x3c!-- 编辑订单 --\x3e\n          <template v-if="editableData[record.id]">\n            <a-button size="small" @click="onSave(record.id)">\n              <icon-font type="bt-baocun" />\n            </a-button>\n            <a-button size="small" @click="onCancel(record.id)" danger>\n              <icon-font type="bt-quxiao" />\n            </a-button>\n          </template>\n          <template v-else>\n            \x3c!-- 查看产品信息 --\x3e\n            <a-tooltip placement="top" title="产品信息">\n              <a-button size="small" @click="onProduce(record.produceId)">\n                <icon-font type="bt-chanpin" />\n              </a-button>\n            </a-tooltip>\n            \x3c!-- 查看原料信息 --\x3e\n            <a-tooltip placement="top" title="原料信息">\n              <a-button size="small" @click="onMaterial(record.id)">\n                <icon-font type="bt-yuanliaoguanli" />\n              </a-button>\n            </a-tooltip>\n            \x3c!-- 编辑 --\x3e\n            <a-button size="small" @click="onEdit(record.id)">\n              <icon-font type="bt-bianji" />\n            </a-button>\n            \x3c!-- 删除 --\x3e\n            <a-popconfirm\n              :title="\'您确认删除\' + record.id + \'订单吗?\'"\n              ok-text="没毛病"\n              cancel-text="点错了"\n              @confirm="onDelete(record.id)"\n            >\n              <a-button danger size="small">\n                <icon-font type="bt-shanchu" />\n              </a-button>\n            </a-popconfirm>\n          </template>\n        </div>\n      </template>\n    </a-table>\n  </a-spin>\n</template>\n\n<script lang=\'ts\'>\nimport {\n  getCurrentInstance,\n  defineComponent,\n  ref,\n  toRefs,\n  reactive,\n  onMounted,\n  UnwrapRef,\n} from "vue";\nimport { message, Modal } from "ant-design-vue";\nimport IconFont from "../../config/iconfont";\nimport { cloneDeep } from "lodash-es";\nimport { PurOrderType } from "../../assets/types/purchase/order";\nimport { SupplierType } from "../../assets/types/purchase/supplier";\n\n// 表格表头\nconst columns = [\n  {\n    title: "采购单号",\n    dataIndex: "id",\n  },\n  {\n    title: "供应商",\n    dataIndex: "supplier",\n  },\n  {\n    title: "采购数量",\n    dataIndex: "count",\n    sorter: (a: PurOrderType, b: PurOrderType) => a.count - b.count,\n  },\n  {\n    title: "单价",\n    dataIndex: "price",\n    sorter: (a: PurOrderType, b: PurOrderType) => a.price - b.price,\n  },\n  {\n    title: "总价",\n    dataIndex: "total",\n    sorter: (a: PurOrderType, b: PurOrderType) => a.total - b.total,\n  },\n  {\n    title: "采购日期",\n    dataIndex: "buyTime",\n    sorter: (a: PurOrderType, b: PurOrderType) => a.buyTime - b.buyTime,\n  },\n  {\n    title: "结算日期",\n    dataIndex: "settleTime",\n    sorter: (a: PurOrderType, b: PurOrderType) =>\n      a.settleTime - b.settleTime,\n  },\n  {\n    title: "负责人",\n    dataIndex: "leader",\n  },\n  {\n    title: "订单状态",\n    dataIndex: "status",\n  },\n  {\n    title: "操作",\n    dataIndex: "operate",\n    width: 155,\n  },\n];\n\nexport default defineComponent({\n  name: "PurchaseOrder",\n  components: {\n    // 引入自定义图标\n    IconFont,\n  },\n  setup() {\n\n    // axios请求\n    const $http = getCurrentInstance().appContext.config.globalProperties.$http;\n    // 判断加载\n    const loading = ref<boolean>(false);\n    // reactive统一管理的数据\n    const state = reactive({\n      tableDataList: [],  // 必须响应式\n      supplierNameList: [],  // 如果优化，需要转为普通数组，因为无序修改，则无需响应式\n      searchTitle: [],    // 同理，响应式消耗性能，不一定为响应式\n      selectedRowKeys: [],\n    });\n    // 搜索的左侧输入框内容\n    const minCodition = ref<string>(\'\');\n    // 搜索的右侧输入框内容\n    const maxCodition = ref<string>(\'\');\n    // 搜索的选择类型\n    const searchType = ref<string>(\'\');\n    // 表格的数据存储区\n    const editableData: UnwrapRef<Record<string, PurOrderType>> = reactive({});\n\n    // 初始化数据\n    const initData = () => {\n      loading.value = true;\n      initSupplier();\n      initSearchTitle();\n      initTable();\n      loading.value = false;\n      message.success("数据加载成功");\n    };\n\n    // 加载表格数据\n    const initTable = () => {\n      $http.get("/purchase/order/orderList").then((res: any) => {\n        state.tableDataList = res.data;\n      });\n    };\n    // 初始化供应商\n    const initSupplier = () => {\n      $http.get("/purchase/order/supplierList").then((res: any) => {\n        // 后期如果接口返回的是供应商名字，则去掉下面代码\n        res.data.map((item: SupplierType) => {\n          state.supplierNameList.push(\n            Object.assign({}, {}, { value: item.name, label: item.name })\n          );\n        });\n      });\n    };\n\n     // 供应商选择后的回调\n    const supplierChange = (value: string) => {\n      console.log(`selected ${value}`);\n    };\n    // 供应商正在选择的回调\n    const supplierFocus = () => {\n      message.success("正在选择供应商");\n    };\n     // 供应商选择完成的回到\n    const supplierBlur = () => {\n      message.success("选择完成");\n    };\n\n    // 搜索选择，过滤掉供应商和操作\n    const initSearchTitle = () => {\n      state.searchTitle = columns\n        .filter((item) => item.dataIndex != "operate")\n        .filter((item) => item.dataIndex != "supplier");\n    };\n    // 选择搜索类型的回调\n    const onSearchType = (value) => {\n      console.log(`搜索的关键字：${value}`);\n      searchType.value = value;\n    };\n    // 搜索按钮的回调\n    const onSearch = () => {\n      console.log(`搜索的内容：${minCodition.value} - ${maxCodition.value}`);\n    };\n\n\n    // 目前没用,第一个参数是选中后的列id,第二个参数是选中的列信息\n    const onSelectChange = (\n      selectedRowKeys: (string | number)[],\n      selectedRows: PurOrderType\n    ) => {\n      console.log(\n        `selectedRowKeys: ${selectedRowKeys}`,\n        "selectedRows: ",\n        selectedRows\n      );\n      state.selectedRowKeys = selectedRowKeys;\n    };\n    // 选择某一列的回调\n    const onSelect = (record, selected, selectedRows, nativeEvent) => {\n      console.log("onSelect", record, selected, selectedRows, nativeEvent);\n    };\n    // 全选的回调\n    const onSelectAll = (selected, selectedRows, changeRows) => {\n      console.log("onSelectAll", selected, selectedRows, changeRows);\n    };\n\n    // 查看订单产品信息\n    const onProduce = (produceId: string) => {\n      Modal.info({\n        title: produceId + "的产品信息为",\n        content: "无",\n      });\n    };\n\n    // 查看原料详情\n    const onMaterial = (id: string) => {\n      Modal.info({\n        title: id + "订单详情",\n        content: "无",\n      });\n    };\n    // 编辑列信息的回调\n    const onEdit = (key: string) => {\n      // 深克隆 编辑的第一个列数据给editableData\n      editableData[key] = cloneDeep(\n        state.tableDataList.filter((item) => key === item.id)[0]\n      );\n    };\n    // 保存编辑后列信息的回调\n    const onSave = (key: string) => {\n      Object.assign(\n        // 获取第一个修改的列\n        state.tableDataList.filter((item) => key === item.id)[0],\n        // 整个表格的数据\n        editableData[key]\n      );\n      // 退出编辑列信息\n      delete editableData[key];\n    };\n    // 删除列信息的回调\n    const onDelete = (key: string) => {\n      state.tableDataList = state.tableDataList.filter((item) => item.id !== key);\n    };\n    // 退出编辑列信息的回调\n    const onCancel = (id: string) => {\n      delete editableData[id];\n    };\n    // 组件挂载页面后的回调,生命函数\n    onMounted(() => {\n      initData();\n    });\n\n    return {\n      // 数据\n      ...toRefs(state),\n      columns,\n      loading,\n      minCodition,\n      maxCodition,\n      searchType,\n      editableData, //操作表格需要的存储区\n      // 函数\n      // 表上方的工具栏 回调函数\n      supplierChange,  //供应商选中回调\n      supplierFocus,  //供应商获得焦点\n      supplierBlur,   //供应商失去焦点回调\n      onSearchType, // 查询类型回调\n      onSearch,   //查询回调\n      // 表格的选中 回到函数\n      onSelectChange,  // 选中表格某一列的回调\n      onSelect,   // 选中表格某一列的回调\n      onSelectAll,    // 全选表格的回调\n      // 最后一列:操作 回调函数\n      onProduce,    // 点击商品类型回调\n      onMaterial,   // 点击商品原料回调\n      onEdit,   // 编辑回到\n      onSave,   // 保存回调\n      onDelete, // 删除回调\n      onCancel, // 返回回调\n    };\n  },\n});\n<\/script>\n\n<style lang=\'less\'>\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n',normalizedContent:' * 前言\n * 使用步骤\n * 效果\n * 问题\n   * 1.表格无法单选\n   * 2.编辑的简单原理\n * 其他\n   * 操作\n   * 修改表格\n * 完整代码\n\n\n\n\n# 前言\n\n项目组长决定使用 ant design vue 的最新3.x版本。（以下简称 advue）\n\n我也是第一次使用这个 vue 的 ui，之前在学习 vue2 的时候听过这个 ui，是由饿了么团队打造出来的。\n\n因为我是采购模块，所以我首先设计采购订单的界面，需要用到 advue 的 table 组件。\n\nant design vue 3.x传送门\n\n进入官网，找到组件，然后左侧往下拉，找到 table 表格\n\n\n\n然后往下翻，我们使用的是有多选的表格，即每一列都可以进行选择。\n\n\n# 使用步骤\n\n 1. 当然是进行代码的 copy，然后 paste\n 2. 根据模块，对官方自带的变量进行重命名\n 3. 根据页面的显示，进行调式\n 4. 模拟接口的数据请求\n 5. 对表格的增删改操作\n\n\n# 效果\n\n经过一个下午的调式，我得出了如下结果\n\n\n\n笔记\n\n操作的内容原本是文字，即增删改查，后来考虑字太长，替换为图标。\n\n2021-10-26 @村长\n\n代码如下\n\n考虑代码长度，只有表格部分的代码。完整代码放到最下面\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<template>\n  \x3c!-- 加载表格数据 --\x3e\n  <a-spin tip="数据正在加载中" :spinning="loading">\n    <a-table\n      :row-selection="{\n        onchange: onselectchange,\n        selectedrowkeys,\n        onselect,\n        onselectall,\n      }"\n      :columns="columns"\n      :data-source="tabledatalist"\n      rowkey="id"\n      bordered\n    >\n    </a-table>\n  </a-spin>\n</template>\n\n<script lang=\'ts\'>\nimport {\n  getcurrentinstance,\n  definecomponent,\n  ref,\n  torefs,\n  reactive,\n  onmounted,\n  unwrapref,\n} from "vue";\nimport { message, modal } from "ant-design-vue";\nimport iconfont from "../../config/iconfont";\nimport { clonedeep } from "lodash-es";\nimport { purordertype } from "../../assets/types/purchase/order";\nimport { suppliertype } from "../../assets/types/purchase/supplier";\n\n// 表格表头\nconst columns = [\n  {\n    title: "采购单号",\n    dataindex: "id",\n  },\n  {\n    title: "供应商",\n    dataindex: "supplier",\n  },\n  {\n    title: "采购数量",\n    dataindex: "count",\n    sorter: (a: purordertype, b: purordertype) => a.count - b.count,\n  },\n  {\n    title: "单价",\n    dataindex: "price",\n    sorter: (a: purordertype, b: purordertype) => a.price - b.price,\n  },\n  {\n    title: "总价",\n    dataindex: "total",\n    sorter: (a: purordertype, b: purordertype) => a.total - b.total,\n  },\n  {\n    title: "采购日期",\n    dataindex: "buytime",\n    sorter: (a: purordertype, b: purordertype) => a.buytime - b.buytime,\n  },\n  {\n    title: "结算日期",\n    dataindex: "settletime",\n    sorter: (a: purordertype, b: purordertype) =>\n      a.settletime - b.settletime,\n  },\n  {\n    title: "负责人",\n    dataindex: "leader",\n  },\n  {\n    title: "订单状态",\n    dataindex: "status",\n  },\n  {\n    title: "操作",\n    dataindex: "operate",\n    width: 155,\n  },\n];\n\nexport default definecomponent({\n  name: "purchaseorder",\n  components: {\n    // 引入自定义图标\n    iconfont,\n  },\n  setup() {\n\n    // axios请求\n    const $http = getcurrentinstance().appcontext.config.globalproperties.$http;\n    // 判断加载\n    const loading = ref<boolean>(false);\n    // reactive统一管理的数据\n    const state = reactive({\n      tabledatalist: [],  // 必须响应式\n      selectedrowkeys: [],\n    });\n    // 表格的数据存储区\n    const editabledata: unwrapref<record<string, purordertype>> = reactive({});\n\n    // 初始化数据\n    const initdata = () => {\n      loading.value = true;\n      inittable();\n      loading.value = false;\n      message.success("数据加载成功");\n    };\n\n    // 加载表格数据\n    const inittable = () => {\n      $http.get("/purchase/order/orderlist").then((res: any) => {\n        state.tabledatalist = res.data;\n      });\n    };\n\n    // 目前没用,第一个参数是选中后的列id,第二个参数是选中的列信息\n    const onselectchange = (\n      selectedrowkeys: (string | number)[],\n      selectedrows: purordertype\n    ) => {\n      console.log(\n        `selectedrowkeys: ${selectedrowkeys}`,\n        "selectedrows: ",\n        selectedrows\n      );\n      state.selectedrowkeys = selectedrowkeys;\n    };\n    // 选择某一列的回调\n    const onselect = (record, selected, selectedrows, nativeevent) => {\n      console.log("onselect", record, selected, selectedrows, nativeevent);\n    };\n    // 全选的回调\n    const onselectall = (selected, selectedrows, changerows) => {\n      console.log("onselectall", selected, selectedrows, changerows);\n    };\n\n    \n    // 组件挂载页面后的回调,生命函数\n    onmounted(() => {\n      initdata();\n    });\n\n    return {\n      // 数据\n      ...torefs(state),\n      columns,\n      loading,\n      editabledata, //操作表格需要的存储区\n      // 函数  \n      // 表格的选中 回到函数\n      onselectchange,  // 选中表格某一列的回调\n      onselect,   // 选中表格某一列的回调\n      onselectall,    // 全选表格的回调\n      // 最后一列:操作 回调函数\n      onproduce,    // 点击商品类型回调\n      onmaterial,   // 点击商品原料回调\n      onedit,   // 编辑回到\n      onsave,   // 保存回调\n      ondelete, // 删除回调\n      oncancel, // 返回回调\n    };\n  },\n});\n<\/script>\n\n<style lang=\'less\'>\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n\n\n\n# 问题\n\n写下这次文档的最终目的，就是记录自己遇到的问题啦~~~\n\n编辑此处时间\n\n现在是凌晨12点43分。\n\n2021-11-27 @村长\n\n\n# 1.表格无法单选\n\n调式过程，有时候选择某一列就全选所有列（不是点击采购订单左侧的按钮，而是表格里随便一个按钮）\n\n\n\n刚洗完澡，还是冷水，宿舍已经停热水 ~~~ 继续更\n\n原因：\n\n * 经过多次调式，发觉还是要明白原理，才能解决问题\n\n * 选择一列，实际上就是选择该列的唯一标识符，我这里就是id，即采购订单，我出现上述问题是因为没有指定id作为唯一标识符，官方默认是key为标识符\n\n * 于是，只需在 table 标签里加上 rowkey="id" 即可，如果自己的唯一标识符不是 id，也不是 key，则替换即可\n\n<a-table\n      :row-selection="{\n        onchange: onselectchange,\n        selectedrowkeys,\n        onselect,\n        onselectall,\n      }"\n      :columns="columns"\n      :data-source="tabledatalist"\n      rowkey="id"  // 这里\n      bordered\n    >\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n主要官方的示例代码没有用到 rowkey，它的例子直接指名唯一标识符为 key，也就是默认，所以不加 rowkey。\n\n> 注意：如果指定的 rowkey 有两个重复，则选择任意一个，双方都会被选中。\n\n\n# 2.编辑的简单原理\n\n这个其实不是问题，是我在自己创建一个变量实现编辑的原理时，发现我 copy 官方的代码，已经自带了这个变量，于是我去掉了自己创建的变量，直接用官方的。\n\n 1. 创建reactive变量 editabledata 用于存储要编辑的列数据\n    \n    const editabledata: unwrapref<record<string, purordertype>> = reactive({});\n    \n    \n    1\n    \n\n 2. 当点击编辑按钮时，触发回调函数，在回调里获得参数，通过该参数获得编辑的列数据，深克隆给 editabledata\n    \n    深克隆：复制了一份一模一样的数据，虽然双方拥有一样的数据，但是彼此互不干扰。\n    \n    浅克隆：拿了对方一份数据，双方共享一份数据，任意一方修改，双方看到的数据就是修改后的数据。\n    \n    // 编辑列信息的回调\n    const onedit = (key: string) => {\n        // 深克隆 编辑的第一个列数据给editabledata\n        editabledata[key] = clonedeep(\n            // tabledatalist 存储所有表格的数据，可以通过id获取每一列的数据\n            state.tabledatalist.filter((item) => key === item.id)[0]\n        );\n    };\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    \n\n 3. 编辑列数据其实就是修改 editabledata 的值，当编辑后，点击保存，即可触发保存的回调函数\n    \n    // 保存编辑后列信息的回调\n    const onsave = (key: string) => {\n        object.assign(\n            // 获取第一个修改的列\n            state.tabledatalist.filter((item) => key === item.id)[0],\n            // 整个表格的数据\n            editabledata[key]\n        );\n        // 退出编辑列信息\n        delete editabledata[key];\n    };\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    11\n    \n    \n    我觉得最妙的就是使用了 object.assign 来进行对象的合并。\n    \n    第一个参数是编辑前的列数据；\n    \n    第二个参数是编辑后的列数据。\n    \n    这个方法合并的两个参数对象里，如果出现了重复的属性，则以第二个参数为准，合并后的对象赋给第一个参数，所以最终第一个参数 state.tabledatalist 既有自己不变的属性，也有修改后的属性，实现了编辑功能\n\n)\n\n最后将修改后的列数据合并到之前没修改的数据里\n\n\n\n\n# 其他\n\n\n# 操作\n\n原本操作的那一行是以文字表示，即\n\n\n\n但是太多文字，容易发生页面能够左右移动，影响体验，所以替换为了图标\n\n<a-button size="small" @click="onedit(record.id)">\n    \x3c!-- <p>编辑</p> --\x3e\n    <icon-font type="bt-bianji" />\n</a-button>\n\n\n1\n2\n3\n4\n\n\n其实把 p 标签换成了 icon 标签，这个标签是 advue 提供的，类型是阿里巴巴自己下载的图标，引入阿里巴巴矢量图标库即可。\n\niconfont.ts 文件\n\nimport {\n    createfromiconfontcn\n} from "@ant-design/icons-vue";\n\nconst iconfont = createfromiconfontcn({\n    scripturl: "//at.alicdn.com/t/font_2856200_a28y0lzjxuv.js",\n});\n\nexport default iconfont\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n自己写的 vue 文件并注册，即可使用 icon 标签引入，type 对应的是矢量图标库的图标名字\n\nimport iconfont from "../../config/iconfont";\nexport default definecomponent({\n    components: {\n        // 引入自定义图标\n        iconfont,\n    },\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 修改表格\n\n如果想修改表格的某一行，通过 bodycell 获取该列的信息，进行修改。后面我还利用这个实现了判断某一行数据是否为空，则默认显示一个数据的需求\n\n\x3c!-- 操作表格信息 column：当前列的信息 text：当前列的数据 record：当前行的数据--\x3e\n<template #bodycell="{ column, text, record }">\n    \x3c!-- 总价由价格和数量计算 --\x3e\n    <span v-if="column.dataindex == \'total\'">\n    \t{{ record.count * record.price }}\n    </span>\n</template>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 完整代码\n\n完整代码\n\n<template>\n  <a-space size="middle">\n    \x3c!-- 新增按钮 --\x3e\n    <a-button type="primary" style="left: 10px; margin: 10px">\n      新增采购订单\n    </a-button>\n    \x3c!-- 搜索供应商 --\x3e\n    <a-select\n      show-search\n      placeholder="查询或选择供应商"\n      style="width: 200px"\n      :options="suppliernamelist"\n      @focus="supplierfocus"\n      @blur="supplierblur"\n      @change="supplierchange"\n    />\n  </a-space>\n  \x3c!-- 范围搜索和精准搜索 --\x3e\n  <a-tooltip placement="top" title="范围查询&精准查询&双点查询">\n    <a-select\n      style="width: 110px; margin-left: 18px"\n      placeholder="选择类型"\n      @select="onsearchtype"\n      allowclear\n    >\n      <template v-for="item in searchtitle" :key="item.dataindex">\n        <a-select-option :value="item.title">{{ item.title }}</a-select-option>\n      </template>\n    </a-select>\n    <a-input\n      v-model:value="mincodition"\n      style="width: 130px; text-align: center"\n      placeholder="minimum"\n    />\n    <a-input\n      style="\n        width: 30px;\n        border-left: 0;\n        pointer-events: none;\n        background-color: #fff;\n      "\n      placeholder="~"\n      disabled\n    />\n    <a-input\n      v-model:value="maxcodition"\n      style="width: 130px; text-align: center; border-left: 0"\n      placeholder="maximum"\n    />\n    <a-button\n      type="primary"\n      :disabled="(mincodition == \'\' || searchtype == \'\') && (maxcodition == \'\' || searchtype == \'\')"\n      @click="onsearch"\n    >\n      搜索\n    </a-button>\n  </a-tooltip>\n  \x3c!-- 加载表格数据 --\x3e\n  <a-spin tip="数据正在加载中" :spinning="loading">\n    <a-table\n      :row-selection="{\n        onchange: onselectchange,\n        selectedrowkeys,\n        onselect,\n        onselectall,\n      }"\n      :columns="columns"\n      :data-source="tabledatalist"\n      rowkey="id"\n      bordered\n    >\n      \x3c!-- 操作表格信息 column：当前列的信息 text：当前列的数据 record：当前行的数据--\x3e\n      <template #bodycell="{ column, text, record }">\n        \x3c!-- 总价由价格和数量计算 --\x3e\n        <span v-if="column.dataindex == \'total\'">\n          {{ record.count * record.price }}\n        </span>\n        <template\n          v-if="\n            [\'supplier\', \'count\', \'price\', \'settle\', \'leader\'].includes(\n              column.dataindex\n            )\n          "\n        >\n          <a-input\n            v-if="editabledata[record.id]"\n            v-model:value="editabledata[record.id][column.dataindex]"\n            style="margin: -5px 0"\n          />\n          <template v-else>\n            {{ text }}\n          </template>\n        </template>\n\n        \x3c!-- 如果是操作,则设置行工具 --\x3e\n        <div v-else-if="column.dataindex == \'operate\'">\n          \x3c!-- 编辑订单 --\x3e\n          <template v-if="editabledata[record.id]">\n            <a-button size="small" @click="onsave(record.id)">\n              <icon-font type="bt-baocun" />\n            </a-button>\n            <a-button size="small" @click="oncancel(record.id)" danger>\n              <icon-font type="bt-quxiao" />\n            </a-button>\n          </template>\n          <template v-else>\n            \x3c!-- 查看产品信息 --\x3e\n            <a-tooltip placement="top" title="产品信息">\n              <a-button size="small" @click="onproduce(record.produceid)">\n                <icon-font type="bt-chanpin" />\n              </a-button>\n            </a-tooltip>\n            \x3c!-- 查看原料信息 --\x3e\n            <a-tooltip placement="top" title="原料信息">\n              <a-button size="small" @click="onmaterial(record.id)">\n                <icon-font type="bt-yuanliaoguanli" />\n              </a-button>\n            </a-tooltip>\n            \x3c!-- 编辑 --\x3e\n            <a-button size="small" @click="onedit(record.id)">\n              <icon-font type="bt-bianji" />\n            </a-button>\n            \x3c!-- 删除 --\x3e\n            <a-popconfirm\n              :title="\'您确认删除\' + record.id + \'订单吗?\'"\n              ok-text="没毛病"\n              cancel-text="点错了"\n              @confirm="ondelete(record.id)"\n            >\n              <a-button danger size="small">\n                <icon-font type="bt-shanchu" />\n              </a-button>\n            </a-popconfirm>\n          </template>\n        </div>\n      </template>\n    </a-table>\n  </a-spin>\n</template>\n\n<script lang=\'ts\'>\nimport {\n  getcurrentinstance,\n  definecomponent,\n  ref,\n  torefs,\n  reactive,\n  onmounted,\n  unwrapref,\n} from "vue";\nimport { message, modal } from "ant-design-vue";\nimport iconfont from "../../config/iconfont";\nimport { clonedeep } from "lodash-es";\nimport { purordertype } from "../../assets/types/purchase/order";\nimport { suppliertype } from "../../assets/types/purchase/supplier";\n\n// 表格表头\nconst columns = [\n  {\n    title: "采购单号",\n    dataindex: "id",\n  },\n  {\n    title: "供应商",\n    dataindex: "supplier",\n  },\n  {\n    title: "采购数量",\n    dataindex: "count",\n    sorter: (a: purordertype, b: purordertype) => a.count - b.count,\n  },\n  {\n    title: "单价",\n    dataindex: "price",\n    sorter: (a: purordertype, b: purordertype) => a.price - b.price,\n  },\n  {\n    title: "总价",\n    dataindex: "total",\n    sorter: (a: purordertype, b: purordertype) => a.total - b.total,\n  },\n  {\n    title: "采购日期",\n    dataindex: "buytime",\n    sorter: (a: purordertype, b: purordertype) => a.buytime - b.buytime,\n  },\n  {\n    title: "结算日期",\n    dataindex: "settletime",\n    sorter: (a: purordertype, b: purordertype) =>\n      a.settletime - b.settletime,\n  },\n  {\n    title: "负责人",\n    dataindex: "leader",\n  },\n  {\n    title: "订单状态",\n    dataindex: "status",\n  },\n  {\n    title: "操作",\n    dataindex: "operate",\n    width: 155,\n  },\n];\n\nexport default definecomponent({\n  name: "purchaseorder",\n  components: {\n    // 引入自定义图标\n    iconfont,\n  },\n  setup() {\n\n    // axios请求\n    const $http = getcurrentinstance().appcontext.config.globalproperties.$http;\n    // 判断加载\n    const loading = ref<boolean>(false);\n    // reactive统一管理的数据\n    const state = reactive({\n      tabledatalist: [],  // 必须响应式\n      suppliernamelist: [],  // 如果优化，需要转为普通数组，因为无序修改，则无需响应式\n      searchtitle: [],    // 同理，响应式消耗性能，不一定为响应式\n      selectedrowkeys: [],\n    });\n    // 搜索的左侧输入框内容\n    const mincodition = ref<string>(\'\');\n    // 搜索的右侧输入框内容\n    const maxcodition = ref<string>(\'\');\n    // 搜索的选择类型\n    const searchtype = ref<string>(\'\');\n    // 表格的数据存储区\n    const editabledata: unwrapref<record<string, purordertype>> = reactive({});\n\n    // 初始化数据\n    const initdata = () => {\n      loading.value = true;\n      initsupplier();\n      initsearchtitle();\n      inittable();\n      loading.value = false;\n      message.success("数据加载成功");\n    };\n\n    // 加载表格数据\n    const inittable = () => {\n      $http.get("/purchase/order/orderlist").then((res: any) => {\n        state.tabledatalist = res.data;\n      });\n    };\n    // 初始化供应商\n    const initsupplier = () => {\n      $http.get("/purchase/order/supplierlist").then((res: any) => {\n        // 后期如果接口返回的是供应商名字，则去掉下面代码\n        res.data.map((item: suppliertype) => {\n          state.suppliernamelist.push(\n            object.assign({}, {}, { value: item.name, label: item.name })\n          );\n        });\n      });\n    };\n\n     // 供应商选择后的回调\n    const supplierchange = (value: string) => {\n      console.log(`selected ${value}`);\n    };\n    // 供应商正在选择的回调\n    const supplierfocus = () => {\n      message.success("正在选择供应商");\n    };\n     // 供应商选择完成的回到\n    const supplierblur = () => {\n      message.success("选择完成");\n    };\n\n    // 搜索选择，过滤掉供应商和操作\n    const initsearchtitle = () => {\n      state.searchtitle = columns\n        .filter((item) => item.dataindex != "operate")\n        .filter((item) => item.dataindex != "supplier");\n    };\n    // 选择搜索类型的回调\n    const onsearchtype = (value) => {\n      console.log(`搜索的关键字：${value}`);\n      searchtype.value = value;\n    };\n    // 搜索按钮的回调\n    const onsearch = () => {\n      console.log(`搜索的内容：${mincodition.value} - ${maxcodition.value}`);\n    };\n\n\n    // 目前没用,第一个参数是选中后的列id,第二个参数是选中的列信息\n    const onselectchange = (\n      selectedrowkeys: (string | number)[],\n      selectedrows: purordertype\n    ) => {\n      console.log(\n        `selectedrowkeys: ${selectedrowkeys}`,\n        "selectedrows: ",\n        selectedrows\n      );\n      state.selectedrowkeys = selectedrowkeys;\n    };\n    // 选择某一列的回调\n    const onselect = (record, selected, selectedrows, nativeevent) => {\n      console.log("onselect", record, selected, selectedrows, nativeevent);\n    };\n    // 全选的回调\n    const onselectall = (selected, selectedrows, changerows) => {\n      console.log("onselectall", selected, selectedrows, changerows);\n    };\n\n    // 查看订单产品信息\n    const onproduce = (produceid: string) => {\n      modal.info({\n        title: produceid + "的产品信息为",\n        content: "无",\n      });\n    };\n\n    // 查看原料详情\n    const onmaterial = (id: string) => {\n      modal.info({\n        title: id + "订单详情",\n        content: "无",\n      });\n    };\n    // 编辑列信息的回调\n    const onedit = (key: string) => {\n      // 深克隆 编辑的第一个列数据给editabledata\n      editabledata[key] = clonedeep(\n        state.tabledatalist.filter((item) => key === item.id)[0]\n      );\n    };\n    // 保存编辑后列信息的回调\n    const onsave = (key: string) => {\n      object.assign(\n        // 获取第一个修改的列\n        state.tabledatalist.filter((item) => key === item.id)[0],\n        // 整个表格的数据\n        editabledata[key]\n      );\n      // 退出编辑列信息\n      delete editabledata[key];\n    };\n    // 删除列信息的回调\n    const ondelete = (key: string) => {\n      state.tabledatalist = state.tabledatalist.filter((item) => item.id !== key);\n    };\n    // 退出编辑列信息的回调\n    const oncancel = (id: string) => {\n      delete editabledata[id];\n    };\n    // 组件挂载页面后的回调,生命函数\n    onmounted(() => {\n      initdata();\n    });\n\n    return {\n      // 数据\n      ...torefs(state),\n      columns,\n      loading,\n      mincodition,\n      maxcodition,\n      searchtype,\n      editabledata, //操作表格需要的存储区\n      // 函数\n      // 表上方的工具栏 回调函数\n      supplierchange,  //供应商选中回调\n      supplierfocus,  //供应商获得焦点\n      supplierblur,   //供应商失去焦点回调\n      onsearchtype, // 查询类型回调\n      onsearch,   //查询回调\n      // 表格的选中 回到函数\n      onselectchange,  // 选中表格某一列的回调\n      onselect,   // 选中表格某一列的回调\n      onselectall,    // 全选表格的回调\n      // 最后一列:操作 回调函数\n      onproduce,    // 点击商品类型回调\n      onmaterial,   // 点击商品原料回调\n      onedit,   // 编辑回到\n      onsave,   // 保存回调\n      ondelete, // 删除回调\n      oncancel, // 返回回调\n    };\n  },\n});\n<\/script>\n\n<style lang=\'less\'>\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n',charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"tbeam - 技巧",frontmatter:{title:"tbeam - 技巧",date:"2021-11-07T15:58:18.000Z",titleTag:"项目",permalink:"/advue3/skill/",categories:["tbeam"],tags:["Vue3UI"],readingShow:"top"},regularPath:"/59.%E9%A1%B9%E7%9B%AE%E5%B7%A5%E7%A8%8B/04.tbeam/06.tbeam%E5%AD%A6%E5%88%B0%E7%9A%84%E6%8A%80%E5%B7%A7.html",relativePath:"59.项目工程/04.tbeam/06.tbeam学到的技巧.md",key:"v-2438b6f8",path:"/advue3/skill/",headers:[{level:2,title:"技巧1",slug:"技巧1",normalizedTitle:"技巧1",charIndex:2},{level:2,title:"技巧2",slug:"技巧2",normalizedTitle:"技巧2",charIndex:1144}],headersStr:"技巧1 技巧2",content:"# 技巧1\n\n把一个数组对象的部分属性给另一个空数组对象的部分属性，该空数组对象自带创建这些部分属性，如 state.sourceList 内容：\n\nstate.sourceList = [\n\t{\n\t\tsourceId: '1111',\n        sourceName: '可乐',\n        sourceTime: '2021-11-07'\n\t},\n    {\n\t\tsourceId: '2222',\n        sourceName: '冰糖',\n        sourceTime: '2021-11-06'\n\t},\n    {\n\t\tsourceId: '3333',\n        sourceName: '雪梨',\n        sourceTime: '2021-11-05'\n\t},\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n空数组 state.sourceNameList value 和 label 的获得 sourceName 的值\n\nstate.sourceNameList = [\n\t{\n\t\tlabel: `可乐`,\n        value: `可乐`\n\t},\n    {\n\t\tlabel: `冰糖`,\n        value: `冰糖`\n\t},\n    {\n\t\tlabel: `雪梨`,\n        value: `雪梨`\n\t},\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n将该数组对象的 sourceName 给一个空对象数组的 value 和 label 属性，代码如下：\n\n// 把value绑定到select需要的key\nstate.sourceList.map((item) => {\n    state.sourceNameList.push(\n        Object.assign(\n            {},\n            {},\n            { value: item.sourceName, label: item.sourceName }\n        )\n    );\t\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nstate.sourceList 指：state 对象的 sourceList 属性\n\nstate.sourceNameList 指：state 对象的 sourceNameList 属性\n\nconst state = {\n    sourceList: [...],\n    sourceNameList: []\n}\n\n\n1\n2\n3\n4\n\n\n\n# 技巧2\n\n去掉数组集合的重复部分，只获取不重复部分，如 state.sourceNameList 内容为：\n\nstate.sourceNameList = [\n\t{\n\t\tlabel: '1111',\n        value: '可乐'\n\t},\n    {\n\t\tlabel: '1111',\n        value: '可乐'\n\t},\n    {\n\t\tlabel: '2222',\n        value: '冰糖'\n\t},\n    {\n\t\tlabel: '2222',\n        value: '冰糖'\n\t},\n    {\n\t\tlabel: '3333',\n        value: '雪梨'\n\t},\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n去掉上方重复的部分，获取不重复的部分给 state.sourceNameList：\n\nstate.sourceNameList = [\n\t{\n\t\tlabel: '1111',\n        value: '可乐'\n\t},\n    {\n\t\tlabel: '2222',\n        value: '冰糖'\n\t},\n    {\n\t\tlabel: '3333',\n        value: '雪梨'\n\t},\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n去重代码为：\n\n// 去重\nlet hash = [];\nstate.sourceNameList = state.sourceNameList.reduce((item, next) => {\n    hash[next.label] ? \"\" : (hash[next.label] = true && item.push(next));\n    return item;\n}, []);\n\n\n1\n2\n3\n4\n5\n6\n\n\nstate.sourceNameList 指：state 对象的sourceNameList 属性\n\nconst state = {\n    sourceNameList: []\n}\n\n\n1\n2\n3\n\n\nhash 自定义名，next.label 的 label 取决于要去重的属性",normalizedContent:"# 技巧1\n\n把一个数组对象的部分属性给另一个空数组对象的部分属性，该空数组对象自带创建这些部分属性，如 state.sourcelist 内容：\n\nstate.sourcelist = [\n\t{\n\t\tsourceid: '1111',\n        sourcename: '可乐',\n        sourcetime: '2021-11-07'\n\t},\n    {\n\t\tsourceid: '2222',\n        sourcename: '冰糖',\n        sourcetime: '2021-11-06'\n\t},\n    {\n\t\tsourceid: '3333',\n        sourcename: '雪梨',\n        sourcetime: '2021-11-05'\n\t},\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n空数组 state.sourcenamelist value 和 label 的获得 sourcename 的值\n\nstate.sourcenamelist = [\n\t{\n\t\tlabel: `可乐`,\n        value: `可乐`\n\t},\n    {\n\t\tlabel: `冰糖`,\n        value: `冰糖`\n\t},\n    {\n\t\tlabel: `雪梨`,\n        value: `雪梨`\n\t},\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n将该数组对象的 sourcename 给一个空对象数组的 value 和 label 属性，代码如下：\n\n// 把value绑定到select需要的key\nstate.sourcelist.map((item) => {\n    state.sourcenamelist.push(\n        object.assign(\n            {},\n            {},\n            { value: item.sourcename, label: item.sourcename }\n        )\n    );\t\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nstate.sourcelist 指：state 对象的 sourcelist 属性\n\nstate.sourcenamelist 指：state 对象的 sourcenamelist 属性\n\nconst state = {\n    sourcelist: [...],\n    sourcenamelist: []\n}\n\n\n1\n2\n3\n4\n\n\n\n# 技巧2\n\n去掉数组集合的重复部分，只获取不重复部分，如 state.sourcenamelist 内容为：\n\nstate.sourcenamelist = [\n\t{\n\t\tlabel: '1111',\n        value: '可乐'\n\t},\n    {\n\t\tlabel: '1111',\n        value: '可乐'\n\t},\n    {\n\t\tlabel: '2222',\n        value: '冰糖'\n\t},\n    {\n\t\tlabel: '2222',\n        value: '冰糖'\n\t},\n    {\n\t\tlabel: '3333',\n        value: '雪梨'\n\t},\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n去掉上方重复的部分，获取不重复的部分给 state.sourcenamelist：\n\nstate.sourcenamelist = [\n\t{\n\t\tlabel: '1111',\n        value: '可乐'\n\t},\n    {\n\t\tlabel: '2222',\n        value: '冰糖'\n\t},\n    {\n\t\tlabel: '3333',\n        value: '雪梨'\n\t},\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n去重代码为：\n\n// 去重\nlet hash = [];\nstate.sourcenamelist = state.sourcenamelist.reduce((item, next) => {\n    hash[next.label] ? \"\" : (hash[next.label] = true && item.push(next));\n    return item;\n}, []);\n\n\n1\n2\n3\n4\n5\n6\n\n\nstate.sourcenamelist 指：state 对象的sourcenamelist 属性\n\nconst state = {\n    sourcenamelist: []\n}\n\n\n1\n2\n3\n\n\nhash 自定义名，next.label 的 label 取决于要去重的属性",charsets:{cjk:!0},lastUpdated:"2022/04/05, 14:44:34"},{title:"Ant Design Vue 3.x - 新增",frontmatter:{title:"Ant Design Vue 3.x - 新增",date:"2021-10-28T00:33:06.000Z",titleTag:"项目",permalink:"/advue3/add/",categories:["tbeam"],tags:["Vue3UI"],readingShow:"top"},regularPath:"/59.%E9%A1%B9%E7%9B%AE%E5%B7%A5%E7%A8%8B/04.tbeam/03.ADVue3%E7%9A%84%E6%96%B0%E5%A2%9E.html",relativePath:"59.项目工程/04.tbeam/03.ADVue3的新增.md",key:"v-2ba03862",path:"/advue3/add/",headers:[{level:2,title:"抽屉式新增",slug:"抽屉式新增",normalizedTitle:"抽屉式新增",charIndex:3},{level:2,title:"问题1",slug:"问题1",normalizedTitle:"问题1",charIndex:12},{level:2,title:"问题2",slug:"问题2",normalizedTitle:"问题2",charIndex:19},{level:2,title:"更新",slug:"更新",normalizedTitle:"更新",charIndex:26}],headersStr:"抽屉式新增 问题1 问题2 更新",content:' * 抽屉式新增\n * 问题1\n * 问题2\n * 更新\n\n\n\n\n# 抽屉式新增\n\n新增界面原本我是想用弹窗式窗口来做，但是经过讨论，还是决定用抽屉来做。（PS：主要有现成的组件😄）\n\n直接附上部分代码\n\n<template>\n  <a-space size="middle">\n    \x3c!-- 新增按钮 --\x3e\n    <a-button type="primary" style="margin: 10px" @click="onAddOrder">\n      <PlusOutlined />新增采购订单\n    </a-button>\n\n    <a-drawer\n      title="新增采购订单"\n      :width="720"\n      :visible="addVisible"\n      :body-style="{ paddingBottom: \'80px\' }"\n      :footer-style="{ textAlign: \'right\' }"\n      @close="onAddClose"\n      :maskClosable="false"\n    >\n      <a-form :model="addForm" :rules="addRules" layout="vertical">\n        <a-row :gutter="16">\n          <a-col :span="12">\n            <a-form-item label="采购订单号" name="id" has-feedback>\n              <a-input\n                v-model:value="addForm.id"\n                placeholder="请输入采购订单号"\n                autocomplete="off"\n              />\n            </a-form-item>\n          </a-col>\n          <a-col :span="12">\n            <a-form-item label="供应商" name="supplier">\n              <a-select\n                v-model:value="addForm.supplier"\n                placeholder="请选择供应商"\n                :options="supplierNameList"\n              ></a-select>\n            </a-form-item>\n          </a-col>\n        </a-row>\n        <a-row :gutter="16">\n          <a-col :span="12">\n            <a-form-item label="采购日期" name="buyTime">\n              <a-date-picker\n                v-model:value="addForm.buyTime"\n                style="width: 100%"\n                :get-popup-container="(trigger) => trigger.parentNode"\n              />\n            </a-form-item>\n          </a-col>\n          <a-col :span="12">\n            <a-form-item label="结算日期" name="settleTime">\n              <a-date-picker\n                v-model:value="addForm.settleTime"\n                style="width: 100%"\n                :get-popup-container="(trigger) => trigger.parentNode"\n              />\n            </a-form-item>\n          </a-col>\n        </a-row>\n          <a-col :span="12">\n            <a-form-item label="订单状态" name="status">\n              <a-select\n                v-model:value="addForm.status"\n                placeholder="请选择订单状态"\n              >\n                <a-select-option value="1">未审核</a-select-option>\n                <a-select-option value="2">未采购</a-select-option>\n                <a-select-option value="3">采购中</a-select-option>\n                <a-select-option value="4">已采购</a-select-option>\n              </a-select>\n            </a-form-item>\n          </a-col>\n        </a-row>\n      </a-form>\n      <template #footer>\n        <a-button style="margin-right: 8px" @click="onAddClose"\n          >取消</a-button\n        >\n        <a-button style="margin-right: 8px" @click="onAddBack"\n          >返回</a-button\n        >\n        <a-button type="primary" @click="onAddSure">确定</a-button>\n      </template>\n    </a-drawer>\n  </a-spin>\n</template>\n\n<script lang=\'ts\'>\nimport {\n  getCurrentInstance,\n  defineComponent,\n  ref,\n  toRefs,\n  reactive,\n  onMounted,\n  UnwrapRef,\n} from "vue";\n\nimport { message, Modal } from "ant-design-vue";\nimport { PlusOutlined } from "@ant-design/icons-vue";\nimport dayjs from "../../config/dayjs_zh_cn";\nimport IconFont from "../../config/iconfont";\nimport { cloneDeep } from "lodash-es";\nimport { PurOrderType } from "../../assets/types/purchase/order";\nimport { SupplierType } from "../../assets/types/purchase/supplier";\n\n\n// 表格表头\nconst columns = [\n  {\n    title: "采购单号",\n    dataIndex: "id",\n  },\n  {\n    title: "供应商",\n    dataIndex: "supplier",\n  },\n  {\n    title: "采购数量",\n    dataIndex: "count",\n    sorter: (a: PurOrderType, b: PurOrderType) => a.count - b.count,\n  },\n  {\n    title: "单价",\n    dataIndex: "price",\n    sorter: (a: PurOrderType, b: PurOrderType) => a.price - b.price,\n  },\n  {\n    title: "总价",\n    dataIndex: "total",\n    sorter: (a: PurOrderType, b: PurOrderType) => a.total - b.total,\n  },\n  {\n    title: "采购日期",\n    dataIndex: "buyTime",\n    sorter: (a: PurOrderType, b: PurOrderType) => a.buyTime - b.buyTime,\n  },\n  {\n    title: "结算日期",\n    dataIndex: "settleTime",\n    sorter: (a: PurOrderType, b: PurOrderType) => a.settleTime - b.settleTime,\n  },\n  {\n    title: "负责人",\n    dataIndex: "leader",\n  },\n  {\n    title: "订单状态",\n    dataIndex: "status",\n  },\n  {\n    title: "操作",\n    dataIndex: "operate",\n    width: 155,\n  },\n];\n\nexport default defineComponent({\n  name: "PurchaseOrder",\n  components: {\n    // 引入自定义图标\n    IconFont,\n    PlusOutlined,\n  },\n  setup() {\n    // axios请求\n    const $http = getCurrentInstance().appContext.config.globalProperties.$http;\n    // 判断加载\n    const loading = ref<boolean>(false);\n    // reactive统一管理的数据\n    const state = reactive({\n      tableDataList: [], // 必须响应式\n      supplierNameList: [], // 如果优化，需要转为普通数组，因为无序修改，则无需响应式\n      searchTitle: [], // 同理，响应式消耗性能，不一定为响应式\n      selectedRowKeys: [],\n    });\n\n    // 初始化数据\n    const initData = () => {\n      loading.value = true;\n      initSupplier();\n      initSearchTitle();\n      initTable();\n      loading.value = false;\n      message.success("数据加载成功");\n    };\n\n    // 加载表格数据\n    const initTable = () => {\n      $http.get("/purchase/order/orderList").then((res: any) => {\n        state.tableDataList = res.data;\n      });\n    };\n    // 初始化供应商\n    const initSupplier = () => {\n      $http.get("/purchase/order/supplierList").then((res: any) => {\n        // 后期如果接口返回的是供应商名字，则去掉下面代码\n        res.data.map((item: SupplierType) => {\n          state.supplierNameList.push(\n            Object.assign({}, {}, { value: item.name, label: item.name })\n          );\n        });\n      });\n    };\n\n    const addForm = reactive<PurOrderType>({\n      id: undefined,\n      supplier: undefined,\n      count: undefined,\n      price: undefined,\n      total: undefined,\n      buyTime: undefined,\n      settleTime: undefined,\n      leader: undefined,\n      status: undefined,\n    });\n    const addRules = {\n      id: [{ type: "string", required: true, message: "必须输入采购订单号" }],\n      supplier: [{ required: true, message: "请选择一位供应商" }],\n      count: [{ type: "number", message: "只能是数字哦~~" }],\n      price: [{ type: "number", message: "只能是数字哦~~" }],\n    };\n\n    const addVisible = ref<boolean>(false);\n    // 打开新增采购订单界面\n    const onAddOrder = () => {\n      addVisible.value = true;\n    };\n    // 关闭新增界面，并清空内容\n    const onAddClose = () => {\n      Object.keys(addForm).map(key => {\n        addForm[key] = undefined;\n      })\n      addVisible.value = false;\n    };\n    // 仅仅关闭新增界面\n    const onAddBack = () => {\n      addVisible.value = false;\n    }\n\n    const onAddSure = () => {\n      let buyTime = \'\';\n      let settleTime = \'\';\n      if(addForm.buyTime || addForm.settleTime){\n        buyTime = dayjs(addForm.buyTime).format(\'YYYY-MM-DD\');\n        settleTime = dayjs(addForm.settleTime).format(\'YYYY-MM-DD\');\n      }\n      const newAddData = Object.assign({},addForm,{ buyTime,settleTime});\n      state.tableDataList.unshift(newAddData);\n      \n      onAddClose();\n    }\n\n    // 组件挂载页面后的回调,生命函数\n    onMounted(() => {\n      initData();\n    });\n\n    return {\n      // 数据\n      ...toRefs(state),\n      columns,\n      loading,\n      addForm,\n      addRules,\n      // 函数\n      // 表上方的工具栏 回调函数\n      addVisible,\n      onAddOrder,\n      onAddClose,\n      onAddBack,\n      onAddSure,\n    };\n  },\n});\n<\/script>\n\n<style lang=\'less\'>\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n\n\n因为官方直接有例子，copy 过来，直接改成自己需要的名字即可。\n\n效果如图：\n\n\n\n当然没那么简单。\n\n\n# 问题1\n\n我相信日期的格式一直都是表单的一个难点，我现在也遇到了，就是转换格式问题，官方默认是标准的国际日期格式，即带有英文。我需要格式化为 YYYY-MM-DD。\n\n我是用了 day.js 库来进行格式化\n\n引入：\n\nimport dayjs from "../../config/dayjs_zh_cn";\n\n\n1\n\n\n由代码看出引入的是上两级目录的一个 js 文件，内容为：\n\nimport "dayjs/locale/zh-cn";\nimport dayjs from "dayjs";\n\ndayjs.locale("zh-cn");\n\nexport default dayjs;\n\n\n1\n2\n3\n4\n5\n6\n\n\n不难看出，这里才是引入 day.js 库的文件。这个文件把官方默认的国际格式改为中国格式，并导出。\n\n接着在按下确定的时候，获取表单的数据，我是放在 addForm 里，使用 v-model 进行同步数据\n\nconst onAddSure = () => {\n    let buyTime = \'\';\n    let settleTime = \'\';\n    // 进行日期的格式：YYYY-MM-DD\n    if(addForm.buyTime || addForm.settleTime){\n        buyTime = dayjs(addForm.buyTime).format(\'YYYY-MM-DD\');\n        settleTime = dayjs(addForm.settleTime).format(\'YYYY-MM-DD\');\n    }\n    // 深克隆一个新的对象\n    const newAddData = Object.assign({},addForm,{ buyTime,settleTime});\n    state.tableDataList.unshift(newAddData); // 新数据添加到第一行，更新页面\n\n    onAddClose();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n这需求困扰我很久，才写出这段简单的代码💯。他是点击保存的回调函数，是打算将添加的数据更新到表格里\n\n * 但是出现了一些问题，我原本想把 addForm 的两个日期取出来，进行格式化然后重新赋值覆盖掉原来的，接着利用 Object.assign() 进行合并新的对象，然后添加到表格的第一行，更新页面\n * 但是控制台报错了，我也不知道如何解决，我大概猜到 addForm 的日期不允许进行替换，于是我就新建了另一个变量 newAddData，合并了 addForm 的值，并修改日期的格式，于是这样成功了，就是上方的代码\n\n提示\n\n晚上回来后再次测试，竟然发现前面报错的代码成功了，真是有点莫名其妙，哈哈~~~\n\n代码：（就是上方说的报错的代码，晚上回来测试后竟然成功了）\n\nconst onAddSure = () => {\n    addForm.buyTime = dayjs(addForm.buyTime).format(\'YYYY-MM-DD\');\n    addForm.settleTime = dayjs(addForm.settleTime).format(\'YYYY-MM-DD\');\n    const newAddData = Object.assign({},addForm);\n    state.tableDataList.unshift(newAddData);\n    onAddClose();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 问题2\n\n其实在解决问题 1 的报错后，我发现了一个新的问题，这个问题我相信很多人都会遇到。那就是深克隆和浅克隆。\n\n * 深克隆：复制了一份一模一样的数据，虽然双方拥有一样的数据，但是彼此互不干扰\n\n * 浅克隆：拿了对方一份数据，双方共享一份数据，任意一方修改，双方看到的数据就是修改后的数据\n\n如上方代码所示，我为什么不直接在第五行代码添加 addForm 呢，即\n\n\n\n\n\n \n\n\n\n\nconst onAddSure = () => {\n    addForm.buyTime = dayjs(addForm.buyTime).format(\'YYYY-MM-DD\');\n    addForm.settleTime = dayjs(addForm.settleTime).format(\'YYYY-MM-DD\');\n    state.tableDataList.unshift(addForm);\n    onAddClose();\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n因为添加的 addForm 是浅克隆添加，意思是当 addForm 的数据发生改变了，添加的数据也会随机改变，他们共用一套数据，所以我必须把这份数据深克隆给另一个变量，然后添加该变量。\n\n为什么我会意识到呢？因为 onAddClose() 困扰我了挺久，看下代码：\n\n\n\n\n \n\n\n\n\n\n\n// 关闭新增界面，并清空内容的回调\nconst onAddClose = () => {\n    Object.keys(addForm).map((key) => {\n        addForm[key] = undefined;\n    });\n    addVisible.value = false;\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n注意到了吗？这个函数里我把 addForm的数据全部清空了，如果 tableDataList 添加的是 addForm，当清空了 addForm，就相当于白添加了空数据。\n\n如图所示：添加了数据，最后却是空\n\n\n\n\n\n因为清除了 addForm，等于清除了表格数据，所以需要深克隆给新变量，由新变量代替addForm加到表格。\n\n----------------------------------------\n\n其实问题 2 是我在设计供应商的添加界面时遇到的，因为订单的已经采用了报错后调式出来的代码，天生深克隆了一份。\n\n晚上回来还原问题 1 出现的代码，没想到报错的代码成功了。哈哈哈哈~~~~ 😄\n\n晚安\n\n现在是 2021-10-28 01:41:29，先洗冷水，然后睡觉咯\n\n\n# 更新\n\n后续更新\n\n需求：把新增界面封装到一个组件中\n\n2021-11-07 @村长\n\n因为考虑到维护性和可读性，所以需要进行封装，而进行封装的过程，要考虑事件的触发，以及数据的传递等因素。\n\n创建一个 WarehouseAdd.vue 组件，把新增相关的代码放入其中，原代码则为：\n\n\n\n\n\n\n\n\n\n \n\n\n\n \n \n\n\n\n\n \n\n\n\n\n\x3c!-- 新增界面 --\x3e\n<a-drawer\n          title="新增供应商"\n          :width="720"\n          :visible="addVisible"\n          :body-style="{ paddingBottom: \'80px\' }"\n          :footer-style="{ textAlign: \'right\' }"\n          @close="onAddClose"\n          :maskClosable="false"\n          >\n    <WarehouseAdd\n                  ref="warehouseAddRef"\n                  @onSure="onSubmitForm"\n                  :sourceLabels="sourceLabels"\n                  />\n    <template #footer>\n<a-button style="margin-right: 8px" @click="onAddBack">返回</a-button>\n<a-button type="primary" @click="onAddSure">确定</a-button>\n    </template>\n</a-drawer>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n其中 <WarehouseAdd/> 子组件则放新增的代码。\n\n流程之确定\n\n当父组件点击确定按钮（18 行代码）时，需要调用子组件的某个函数，该函数里，子组件会把新增表单传递给父组件。\n\nonSubmitForm 是父组件传递给子组件的函数，子组件通过该函数把新增的表单传递给父组件\n\n// 父组件：addForm 是子组件传递过来的新增表单\nconst onSubmitForm = (addForm) => {\n\t// ......\n};\n\n\n1\n2\n3\n4\n\n\nwarehouseAddRef 是子组件标签，当点击确定按钮（18 行代码）时候，触发 onAddSure 函数，该函数就会主动触发子组件的 submitProdoce 函数\n\n// 父组件：确定新增的回调\nconst onAddSure = () => {\n    // warehouseAddRef 是 ref，所以需要 .value\n    warehouseAddRef.value.submitProdoce();\n};\n\n\n1\n2\n3\n4\n5\n\n\nsubmitProdoce 函数是子组件的一个函数，这个函数如果被调用，则内部触发 onSure 事件，该事件绑定父组件的 onSubmitForm 函数，把新增表单传递给父组件\n\n// WarehouseAdd 子组件：提交表单的回调，由父组件调用\nconst submitProdoce = () => {\n    // ......\n    emit("onSure",addForm); // onSure是一个触发事件，该事件绑定了 onSubmitForm\n    // ......\n};\n\n\n1\n2\n3\n4\n5\n6\n\n\n流程之关闭\n\n和确认同理，当点击关闭（第 8 行代码），触发 onAddClose 函数， 该函数通过子组件标签调用子组件的某个函数，这个函数自动清除表单数据\n\n//父组件：关闭新增界面，并清空内容\nconst onAddClose = () => {\n    warehouseAddRef.value.onAddClose();\n    // 关闭抽屉\n    addVisible.value = false;\n};\n\n//子组件：关闭新增界面，并清空内容，初始化默认行为\nconst onAddClose = () => {\n    Object.keys(addForm).map((key) => {\n        Object.keys(sourceForm).map((key) => {\n            sourceForm[key] = undefined;\n        });\n    });\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n点击查看新增源码\n\n<template>\n  \x3c!-- 默认展开1 --\x3e\n  <a-collapse v-model:activeKey="activeKey">\n    <a-collapse-panel key="1" header="物品入库表单">\n      <a-form :model="addForm" :rules="addRules" layout="vertical">\n        <a-row :gutter="16">\n          <a-col :span="12">\n            <a-form-item label="物品编号" name="id" has-feedback>\n              <a-input\n                v-model:value="addForm.id"\n                placeholder="请输入物品编号"\n                autocomplete="off"\n              />\n            </a-form-item>\n          </a-col>\n          <a-col :span="12">\n            <a-form-item label="物品名称" name="name">\n              <a-input\n                v-model:value="addForm.name"\n                placeholder="请新增物品名称"\n                autocomplete="off"\n              />\n            </a-form-item>\n          </a-col>\n        </a-row>\n        <a-row :gutter="16">\n          <a-col :span="12">\n            <a-form-item label="型号规格" name="type" has-feedback>\n              <a-input\n                v-model:value="addForm.type"\n                placeholder="请输入型号规格"\n                autocomplete="off"\n                style="width: 100%"\n              />\n            </a-form-item>\n          </a-col>\n        </a-row>\n        <a-row :gutter="16">\n          <a-col :span="12">\n            <a-form-item label="库存" name="num">\n              <a-input-number\n                v-model:value="addForm.num"\n                placeholder="请新增库存"\n                style="width: 100%"\n              />\n            </a-form-item>\n          </a-col>\n          <a-col :span="12">\n            <a-form-item label="单位" name="unit">\n              <a-select v-model:value="addForm.status" placeholder="请选择单位">\n                <a-select-option value="个">个</a-select-option>\n                <a-select-option value="件">件</a-select-option>\n              </a-select>\n            </a-form-item>\n          </a-col>\n        </a-row>\n        <a-row :gutter="16">\n          <a-col :span="12">\n            <a-form-item label="销量" name="sale">\n              <a-input-number\n                v-model:value="addForm.sale"\n                placeholder="请新增销量"\n                style="width: 100%"\n              />\n            </a-form-item>\n          </a-col>\n          <a-col :span="12">\n            <a-form-item label="单价" name="price" has-feedback>\n              <a-input-number\n                v-model:value="addForm.price"\n                placeholder="请新增单价"\n                style="width: 100%"\n              />\n            </a-form-item>\n          </a-col>\n        </a-row>\n      </a-form>\n    </a-collapse-panel>\n    <a-collapse-panel key="2" header="物品来源表单">\n      <a-form :model="sourceForm" :rules="sourceRules" layout="vertical">\n        <a-row :gutter="16">\n          <a-col :span="12">\n            <a-form-item label="来源编号" name="sourceId" has-feedback>\n              <a-input\n                v-model:value="addForm.source.sourceId"\n                placeholder="请输入来源编号"\n                autocomplete="off"\n              />\n            </a-form-item>\n          </a-col>\n          <a-col :span="12">\n            <a-form-item label="来源名称" name="sourceName">\n              <a-cascader\n                v-model:value="addForm.source.sourceName"\n                :options="options"\n                expand-trigger="hover"\n                placeholder="请选择供应商"\n              />\n            </a-form-item>\n          </a-col>\n        </a-row>\n        <a-row :gutter="16">\n          <a-col :span="12">\n            <a-form-item label="入库时间" name="stockTime" has-feedback>\n              <a-date-picker\n                v-model:value="addForm.source.stockTime"\n                style="width: 100%"\n                :get-popup-container="(trigger) => trigger.parentNode"\n              />\n            </a-form-item>\n          </a-col>\n          <a-col :span="12">\n            <a-form-item label="物品状态" name="status">\n              <a-select\n                v-model:value="addForm.source.status"\n                placeholder="请选择物品状态"\n              >\n                <a-select-option value="待售">待售</a-select-option>\n                <a-select-option value="售空">售空</a-select-option>\n              </a-select>\n            </a-form-item>\n          </a-col>\n        </a-row>\n      </a-form>\n    </a-collapse-panel>\n  </a-collapse>\n</template>\n\n<script lang=\'ts\'>\nimport { defineComponent, reactive, ref } from "vue";\nimport {\n  ProduceType,\n  ProduceSource,\n} from "../../assets/types/purchase/warehouse";\nimport { PlusOutlined } from "@ant-design/icons-vue";\nimport dayjs from "../../config/dayjs_zh_cn";\n\ninterface Option {\n  value: string;\n  label: string;\n  children?: Option[];\n}\n\nconst options: Option[] = [\n  {\n    value: "供应商",\n    label: "供应商",\n    children: [\n      {\n        value: "bteam",\n        label: "bteam",\n      },\n      {\n        value: "kbt",\n        label: "kbt",\n      },\n    ],\n  },\n  {\n    value: "自生产",\n    label: "自生产",\n    children: [\n      {\n        value: "工厂一号",\n        label: "工厂一号",\n      },\n      {\n        value: "工厂二号",\n        label: "工厂二号",\n      },\n      {\n        value: "工厂三号",\n        label: "工厂三号",\n      },\n    ],\n  },\n];\nexport default defineComponent({\n  name: "WarehouseAdd",\n  components: {\n    PlusOutlined,\n  },\n  emits: ["onSure"],\n  props: {\n    sourceLabels: Array,\n  },\n  setup(props, { emit }) {\n    // 获取父组件传来的物品明细Label\n    const { sourceLabels } = props;\n    // 隐藏框的key\n    const activeKey = ref(["1"]);\n\n    const displayRender = ({ labels }: { labels: string[] }) => {\n      return labels[labels.length - 1];\n    };\n    // 物品来源表单\n    const sourceForm = reactive<ProduceSource>({\n      sourceId: undefined,\n      sourceName: undefined,\n      stockTime: undefined,\n      status: undefined,\n      remarks: undefined,\n    });\n    // 物品入库表单\n    const addForm = reactive<ProduceType>({\n      id: undefined,\n      name: undefined,\n      type: undefined,\n      price: undefined,\n      num: undefined,\n      unit: undefined,\n      sale: undefined,\n      totalPrice: undefined,\n      status: undefined,\n      source: sourceForm,\n    });\n    // 物品入库表单效验规则\n    const addRules = {\n      id: [{ type: "string", required: true, message: "必须输入采购订单号" }],\n      name: [{ required: true, message: "请选择一位供应商" }],\n      num: [{ type: "number", message: "只能是数字哦~~" }],\n    };\n    // 物品来源表单效验规则\n    const sourceRules = {\n      sourceId: [\n        { type: "string", required: true, message: "必须输入采购订单号" },\n      ],\n    };\n    // 提交表单的回调，由父组件调用\n    const submitProdoce = () => {\n      if (addForm.id == undefined) {\n        emit("onSure", false);\n      } else {\n        addForm.source.stockTime = dayjs(addForm.source.stockTime).format(\n          "YYYY-MM-DD"\n        );\n        addForm.source.sourceName = addForm.source.sourceName[0] + \'-\' + addForm.source.sourceName[1];\n        emit("onSure", true, addForm);\n      }\n    };\n\n    // 关闭新增界面，并清空内容，初始化默认行为\n    const onAddClose = () => {\n      Object.keys(addForm).map((key) => {\n        if (key != "source") {\n          addForm[key] = undefined;\n        } else {\n          Object.keys(sourceForm).map((key) => {\n            sourceForm[key] = undefined;\n          });\n        }\n      });\n      activeKey.value = ["1"];\n    };\n\n    return {\n      // 数据\n      options,\n      activeKey,\n      sourceLabels,\n      sourceForm,\n      addForm,\n      addRules,\n      sourceRules,\n      // 函数\n      displayRender,\n      submitProdoce,\n      onAddClose,\n    };\n  },\n});\n<\/script>\n\n<style lang=\'less\'>\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n',normalizedContent:' * 抽屉式新增\n * 问题1\n * 问题2\n * 更新\n\n\n\n\n# 抽屉式新增\n\n新增界面原本我是想用弹窗式窗口来做，但是经过讨论，还是决定用抽屉来做。（ps：主要有现成的组件😄）\n\n直接附上部分代码\n\n<template>\n  <a-space size="middle">\n    \x3c!-- 新增按钮 --\x3e\n    <a-button type="primary" style="margin: 10px" @click="onaddorder">\n      <plusoutlined />新增采购订单\n    </a-button>\n\n    <a-drawer\n      title="新增采购订单"\n      :width="720"\n      :visible="addvisible"\n      :body-style="{ paddingbottom: \'80px\' }"\n      :footer-style="{ textalign: \'right\' }"\n      @close="onaddclose"\n      :maskclosable="false"\n    >\n      <a-form :model="addform" :rules="addrules" layout="vertical">\n        <a-row :gutter="16">\n          <a-col :span="12">\n            <a-form-item label="采购订单号" name="id" has-feedback>\n              <a-input\n                v-model:value="addform.id"\n                placeholder="请输入采购订单号"\n                autocomplete="off"\n              />\n            </a-form-item>\n          </a-col>\n          <a-col :span="12">\n            <a-form-item label="供应商" name="supplier">\n              <a-select\n                v-model:value="addform.supplier"\n                placeholder="请选择供应商"\n                :options="suppliernamelist"\n              ></a-select>\n            </a-form-item>\n          </a-col>\n        </a-row>\n        <a-row :gutter="16">\n          <a-col :span="12">\n            <a-form-item label="采购日期" name="buytime">\n              <a-date-picker\n                v-model:value="addform.buytime"\n                style="width: 100%"\n                :get-popup-container="(trigger) => trigger.parentnode"\n              />\n            </a-form-item>\n          </a-col>\n          <a-col :span="12">\n            <a-form-item label="结算日期" name="settletime">\n              <a-date-picker\n                v-model:value="addform.settletime"\n                style="width: 100%"\n                :get-popup-container="(trigger) => trigger.parentnode"\n              />\n            </a-form-item>\n          </a-col>\n        </a-row>\n          <a-col :span="12">\n            <a-form-item label="订单状态" name="status">\n              <a-select\n                v-model:value="addform.status"\n                placeholder="请选择订单状态"\n              >\n                <a-select-option value="1">未审核</a-select-option>\n                <a-select-option value="2">未采购</a-select-option>\n                <a-select-option value="3">采购中</a-select-option>\n                <a-select-option value="4">已采购</a-select-option>\n              </a-select>\n            </a-form-item>\n          </a-col>\n        </a-row>\n      </a-form>\n      <template #footer>\n        <a-button style="margin-right: 8px" @click="onaddclose"\n          >取消</a-button\n        >\n        <a-button style="margin-right: 8px" @click="onaddback"\n          >返回</a-button\n        >\n        <a-button type="primary" @click="onaddsure">确定</a-button>\n      </template>\n    </a-drawer>\n  </a-spin>\n</template>\n\n<script lang=\'ts\'>\nimport {\n  getcurrentinstance,\n  definecomponent,\n  ref,\n  torefs,\n  reactive,\n  onmounted,\n  unwrapref,\n} from "vue";\n\nimport { message, modal } from "ant-design-vue";\nimport { plusoutlined } from "@ant-design/icons-vue";\nimport dayjs from "../../config/dayjs_zh_cn";\nimport iconfont from "../../config/iconfont";\nimport { clonedeep } from "lodash-es";\nimport { purordertype } from "../../assets/types/purchase/order";\nimport { suppliertype } from "../../assets/types/purchase/supplier";\n\n\n// 表格表头\nconst columns = [\n  {\n    title: "采购单号",\n    dataindex: "id",\n  },\n  {\n    title: "供应商",\n    dataindex: "supplier",\n  },\n  {\n    title: "采购数量",\n    dataindex: "count",\n    sorter: (a: purordertype, b: purordertype) => a.count - b.count,\n  },\n  {\n    title: "单价",\n    dataindex: "price",\n    sorter: (a: purordertype, b: purordertype) => a.price - b.price,\n  },\n  {\n    title: "总价",\n    dataindex: "total",\n    sorter: (a: purordertype, b: purordertype) => a.total - b.total,\n  },\n  {\n    title: "采购日期",\n    dataindex: "buytime",\n    sorter: (a: purordertype, b: purordertype) => a.buytime - b.buytime,\n  },\n  {\n    title: "结算日期",\n    dataindex: "settletime",\n    sorter: (a: purordertype, b: purordertype) => a.settletime - b.settletime,\n  },\n  {\n    title: "负责人",\n    dataindex: "leader",\n  },\n  {\n    title: "订单状态",\n    dataindex: "status",\n  },\n  {\n    title: "操作",\n    dataindex: "operate",\n    width: 155,\n  },\n];\n\nexport default definecomponent({\n  name: "purchaseorder",\n  components: {\n    // 引入自定义图标\n    iconfont,\n    plusoutlined,\n  },\n  setup() {\n    // axios请求\n    const $http = getcurrentinstance().appcontext.config.globalproperties.$http;\n    // 判断加载\n    const loading = ref<boolean>(false);\n    // reactive统一管理的数据\n    const state = reactive({\n      tabledatalist: [], // 必须响应式\n      suppliernamelist: [], // 如果优化，需要转为普通数组，因为无序修改，则无需响应式\n      searchtitle: [], // 同理，响应式消耗性能，不一定为响应式\n      selectedrowkeys: [],\n    });\n\n    // 初始化数据\n    const initdata = () => {\n      loading.value = true;\n      initsupplier();\n      initsearchtitle();\n      inittable();\n      loading.value = false;\n      message.success("数据加载成功");\n    };\n\n    // 加载表格数据\n    const inittable = () => {\n      $http.get("/purchase/order/orderlist").then((res: any) => {\n        state.tabledatalist = res.data;\n      });\n    };\n    // 初始化供应商\n    const initsupplier = () => {\n      $http.get("/purchase/order/supplierlist").then((res: any) => {\n        // 后期如果接口返回的是供应商名字，则去掉下面代码\n        res.data.map((item: suppliertype) => {\n          state.suppliernamelist.push(\n            object.assign({}, {}, { value: item.name, label: item.name })\n          );\n        });\n      });\n    };\n\n    const addform = reactive<purordertype>({\n      id: undefined,\n      supplier: undefined,\n      count: undefined,\n      price: undefined,\n      total: undefined,\n      buytime: undefined,\n      settletime: undefined,\n      leader: undefined,\n      status: undefined,\n    });\n    const addrules = {\n      id: [{ type: "string", required: true, message: "必须输入采购订单号" }],\n      supplier: [{ required: true, message: "请选择一位供应商" }],\n      count: [{ type: "number", message: "只能是数字哦~~" }],\n      price: [{ type: "number", message: "只能是数字哦~~" }],\n    };\n\n    const addvisible = ref<boolean>(false);\n    // 打开新增采购订单界面\n    const onaddorder = () => {\n      addvisible.value = true;\n    };\n    // 关闭新增界面，并清空内容\n    const onaddclose = () => {\n      object.keys(addform).map(key => {\n        addform[key] = undefined;\n      })\n      addvisible.value = false;\n    };\n    // 仅仅关闭新增界面\n    const onaddback = () => {\n      addvisible.value = false;\n    }\n\n    const onaddsure = () => {\n      let buytime = \'\';\n      let settletime = \'\';\n      if(addform.buytime || addform.settletime){\n        buytime = dayjs(addform.buytime).format(\'yyyy-mm-dd\');\n        settletime = dayjs(addform.settletime).format(\'yyyy-mm-dd\');\n      }\n      const newadddata = object.assign({},addform,{ buytime,settletime});\n      state.tabledatalist.unshift(newadddata);\n      \n      onaddclose();\n    }\n\n    // 组件挂载页面后的回调,生命函数\n    onmounted(() => {\n      initdata();\n    });\n\n    return {\n      // 数据\n      ...torefs(state),\n      columns,\n      loading,\n      addform,\n      addrules,\n      // 函数\n      // 表上方的工具栏 回调函数\n      addvisible,\n      onaddorder,\n      onaddclose,\n      onaddback,\n      onaddsure,\n    };\n  },\n});\n<\/script>\n\n<style lang=\'less\'>\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n\n\n因为官方直接有例子，copy 过来，直接改成自己需要的名字即可。\n\n效果如图：\n\n\n\n当然没那么简单。\n\n\n# 问题1\n\n我相信日期的格式一直都是表单的一个难点，我现在也遇到了，就是转换格式问题，官方默认是标准的国际日期格式，即带有英文。我需要格式化为 yyyy-mm-dd。\n\n我是用了 day.js 库来进行格式化\n\n引入：\n\nimport dayjs from "../../config/dayjs_zh_cn";\n\n\n1\n\n\n由代码看出引入的是上两级目录的一个 js 文件，内容为：\n\nimport "dayjs/locale/zh-cn";\nimport dayjs from "dayjs";\n\ndayjs.locale("zh-cn");\n\nexport default dayjs;\n\n\n1\n2\n3\n4\n5\n6\n\n\n不难看出，这里才是引入 day.js 库的文件。这个文件把官方默认的国际格式改为中国格式，并导出。\n\n接着在按下确定的时候，获取表单的数据，我是放在 addform 里，使用 v-model 进行同步数据\n\nconst onaddsure = () => {\n    let buytime = \'\';\n    let settletime = \'\';\n    // 进行日期的格式：yyyy-mm-dd\n    if(addform.buytime || addform.settletime){\n        buytime = dayjs(addform.buytime).format(\'yyyy-mm-dd\');\n        settletime = dayjs(addform.settletime).format(\'yyyy-mm-dd\');\n    }\n    // 深克隆一个新的对象\n    const newadddata = object.assign({},addform,{ buytime,settletime});\n    state.tabledatalist.unshift(newadddata); // 新数据添加到第一行，更新页面\n\n    onaddclose();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n这需求困扰我很久，才写出这段简单的代码💯。他是点击保存的回调函数，是打算将添加的数据更新到表格里\n\n * 但是出现了一些问题，我原本想把 addform 的两个日期取出来，进行格式化然后重新赋值覆盖掉原来的，接着利用 object.assign() 进行合并新的对象，然后添加到表格的第一行，更新页面\n * 但是控制台报错了，我也不知道如何解决，我大概猜到 addform 的日期不允许进行替换，于是我就新建了另一个变量 newadddata，合并了 addform 的值，并修改日期的格式，于是这样成功了，就是上方的代码\n\n提示\n\n晚上回来后再次测试，竟然发现前面报错的代码成功了，真是有点莫名其妙，哈哈~~~\n\n代码：（就是上方说的报错的代码，晚上回来测试后竟然成功了）\n\nconst onaddsure = () => {\n    addform.buytime = dayjs(addform.buytime).format(\'yyyy-mm-dd\');\n    addform.settletime = dayjs(addform.settletime).format(\'yyyy-mm-dd\');\n    const newadddata = object.assign({},addform);\n    state.tabledatalist.unshift(newadddata);\n    onaddclose();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 问题2\n\n其实在解决问题 1 的报错后，我发现了一个新的问题，这个问题我相信很多人都会遇到。那就是深克隆和浅克隆。\n\n * 深克隆：复制了一份一模一样的数据，虽然双方拥有一样的数据，但是彼此互不干扰\n\n * 浅克隆：拿了对方一份数据，双方共享一份数据，任意一方修改，双方看到的数据就是修改后的数据\n\n如上方代码所示，我为什么不直接在第五行代码添加 addform 呢，即\n\n\n\n\n\n \n\n\n\n\nconst onaddsure = () => {\n    addform.buytime = dayjs(addform.buytime).format(\'yyyy-mm-dd\');\n    addform.settletime = dayjs(addform.settletime).format(\'yyyy-mm-dd\');\n    state.tabledatalist.unshift(addform);\n    onaddclose();\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n因为添加的 addform 是浅克隆添加，意思是当 addform 的数据发生改变了，添加的数据也会随机改变，他们共用一套数据，所以我必须把这份数据深克隆给另一个变量，然后添加该变量。\n\n为什么我会意识到呢？因为 onaddclose() 困扰我了挺久，看下代码：\n\n\n\n\n \n\n\n\n\n\n\n// 关闭新增界面，并清空内容的回调\nconst onaddclose = () => {\n    object.keys(addform).map((key) => {\n        addform[key] = undefined;\n    });\n    addvisible.value = false;\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n注意到了吗？这个函数里我把 addform的数据全部清空了，如果 tabledatalist 添加的是 addform，当清空了 addform，就相当于白添加了空数据。\n\n如图所示：添加了数据，最后却是空\n\n\n\n\n\n因为清除了 addform，等于清除了表格数据，所以需要深克隆给新变量，由新变量代替addform加到表格。\n\n----------------------------------------\n\n其实问题 2 是我在设计供应商的添加界面时遇到的，因为订单的已经采用了报错后调式出来的代码，天生深克隆了一份。\n\n晚上回来还原问题 1 出现的代码，没想到报错的代码成功了。哈哈哈哈~~~~ 😄\n\n晚安\n\n现在是 2021-10-28 01:41:29，先洗冷水，然后睡觉咯\n\n\n# 更新\n\n后续更新\n\n需求：把新增界面封装到一个组件中\n\n2021-11-07 @村长\n\n因为考虑到维护性和可读性，所以需要进行封装，而进行封装的过程，要考虑事件的触发，以及数据的传递等因素。\n\n创建一个 warehouseadd.vue 组件，把新增相关的代码放入其中，原代码则为：\n\n\n\n\n\n\n\n\n\n \n\n\n\n \n \n\n\n\n\n \n\n\n\n\n\x3c!-- 新增界面 --\x3e\n<a-drawer\n          title="新增供应商"\n          :width="720"\n          :visible="addvisible"\n          :body-style="{ paddingbottom: \'80px\' }"\n          :footer-style="{ textalign: \'right\' }"\n          @close="onaddclose"\n          :maskclosable="false"\n          >\n    <warehouseadd\n                  ref="warehouseaddref"\n                  @onsure="onsubmitform"\n                  :sourcelabels="sourcelabels"\n                  />\n    <template #footer>\n<a-button style="margin-right: 8px" @click="onaddback">返回</a-button>\n<a-button type="primary" @click="onaddsure">确定</a-button>\n    </template>\n</a-drawer>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n其中 <warehouseadd/> 子组件则放新增的代码。\n\n流程之确定\n\n当父组件点击确定按钮（18 行代码）时，需要调用子组件的某个函数，该函数里，子组件会把新增表单传递给父组件。\n\nonsubmitform 是父组件传递给子组件的函数，子组件通过该函数把新增的表单传递给父组件\n\n// 父组件：addform 是子组件传递过来的新增表单\nconst onsubmitform = (addform) => {\n\t// ......\n};\n\n\n1\n2\n3\n4\n\n\nwarehouseaddref 是子组件标签，当点击确定按钮（18 行代码）时候，触发 onaddsure 函数，该函数就会主动触发子组件的 submitprodoce 函数\n\n// 父组件：确定新增的回调\nconst onaddsure = () => {\n    // warehouseaddref 是 ref，所以需要 .value\n    warehouseaddref.value.submitprodoce();\n};\n\n\n1\n2\n3\n4\n5\n\n\nsubmitprodoce 函数是子组件的一个函数，这个函数如果被调用，则内部触发 onsure 事件，该事件绑定父组件的 onsubmitform 函数，把新增表单传递给父组件\n\n// warehouseadd 子组件：提交表单的回调，由父组件调用\nconst submitprodoce = () => {\n    // ......\n    emit("onsure",addform); // onsure是一个触发事件，该事件绑定了 onsubmitform\n    // ......\n};\n\n\n1\n2\n3\n4\n5\n6\n\n\n流程之关闭\n\n和确认同理，当点击关闭（第 8 行代码），触发 onaddclose 函数， 该函数通过子组件标签调用子组件的某个函数，这个函数自动清除表单数据\n\n//父组件：关闭新增界面，并清空内容\nconst onaddclose = () => {\n    warehouseaddref.value.onaddclose();\n    // 关闭抽屉\n    addvisible.value = false;\n};\n\n//子组件：关闭新增界面，并清空内容，初始化默认行为\nconst onaddclose = () => {\n    object.keys(addform).map((key) => {\n        object.keys(sourceform).map((key) => {\n            sourceform[key] = undefined;\n        });\n    });\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n点击查看新增源码\n\n<template>\n  \x3c!-- 默认展开1 --\x3e\n  <a-collapse v-model:activekey="activekey">\n    <a-collapse-panel key="1" header="物品入库表单">\n      <a-form :model="addform" :rules="addrules" layout="vertical">\n        <a-row :gutter="16">\n          <a-col :span="12">\n            <a-form-item label="物品编号" name="id" has-feedback>\n              <a-input\n                v-model:value="addform.id"\n                placeholder="请输入物品编号"\n                autocomplete="off"\n              />\n            </a-form-item>\n          </a-col>\n          <a-col :span="12">\n            <a-form-item label="物品名称" name="name">\n              <a-input\n                v-model:value="addform.name"\n                placeholder="请新增物品名称"\n                autocomplete="off"\n              />\n            </a-form-item>\n          </a-col>\n        </a-row>\n        <a-row :gutter="16">\n          <a-col :span="12">\n            <a-form-item label="型号规格" name="type" has-feedback>\n              <a-input\n                v-model:value="addform.type"\n                placeholder="请输入型号规格"\n                autocomplete="off"\n                style="width: 100%"\n              />\n            </a-form-item>\n          </a-col>\n        </a-row>\n        <a-row :gutter="16">\n          <a-col :span="12">\n            <a-form-item label="库存" name="num">\n              <a-input-number\n                v-model:value="addform.num"\n                placeholder="请新增库存"\n                style="width: 100%"\n              />\n            </a-form-item>\n          </a-col>\n          <a-col :span="12">\n            <a-form-item label="单位" name="unit">\n              <a-select v-model:value="addform.status" placeholder="请选择单位">\n                <a-select-option value="个">个</a-select-option>\n                <a-select-option value="件">件</a-select-option>\n              </a-select>\n            </a-form-item>\n          </a-col>\n        </a-row>\n        <a-row :gutter="16">\n          <a-col :span="12">\n            <a-form-item label="销量" name="sale">\n              <a-input-number\n                v-model:value="addform.sale"\n                placeholder="请新增销量"\n                style="width: 100%"\n              />\n            </a-form-item>\n          </a-col>\n          <a-col :span="12">\n            <a-form-item label="单价" name="price" has-feedback>\n              <a-input-number\n                v-model:value="addform.price"\n                placeholder="请新增单价"\n                style="width: 100%"\n              />\n            </a-form-item>\n          </a-col>\n        </a-row>\n      </a-form>\n    </a-collapse-panel>\n    <a-collapse-panel key="2" header="物品来源表单">\n      <a-form :model="sourceform" :rules="sourcerules" layout="vertical">\n        <a-row :gutter="16">\n          <a-col :span="12">\n            <a-form-item label="来源编号" name="sourceid" has-feedback>\n              <a-input\n                v-model:value="addform.source.sourceid"\n                placeholder="请输入来源编号"\n                autocomplete="off"\n              />\n            </a-form-item>\n          </a-col>\n          <a-col :span="12">\n            <a-form-item label="来源名称" name="sourcename">\n              <a-cascader\n                v-model:value="addform.source.sourcename"\n                :options="options"\n                expand-trigger="hover"\n                placeholder="请选择供应商"\n              />\n            </a-form-item>\n          </a-col>\n        </a-row>\n        <a-row :gutter="16">\n          <a-col :span="12">\n            <a-form-item label="入库时间" name="stocktime" has-feedback>\n              <a-date-picker\n                v-model:value="addform.source.stocktime"\n                style="width: 100%"\n                :get-popup-container="(trigger) => trigger.parentnode"\n              />\n            </a-form-item>\n          </a-col>\n          <a-col :span="12">\n            <a-form-item label="物品状态" name="status">\n              <a-select\n                v-model:value="addform.source.status"\n                placeholder="请选择物品状态"\n              >\n                <a-select-option value="待售">待售</a-select-option>\n                <a-select-option value="售空">售空</a-select-option>\n              </a-select>\n            </a-form-item>\n          </a-col>\n        </a-row>\n      </a-form>\n    </a-collapse-panel>\n  </a-collapse>\n</template>\n\n<script lang=\'ts\'>\nimport { definecomponent, reactive, ref } from "vue";\nimport {\n  producetype,\n  producesource,\n} from "../../assets/types/purchase/warehouse";\nimport { plusoutlined } from "@ant-design/icons-vue";\nimport dayjs from "../../config/dayjs_zh_cn";\n\ninterface option {\n  value: string;\n  label: string;\n  children?: option[];\n}\n\nconst options: option[] = [\n  {\n    value: "供应商",\n    label: "供应商",\n    children: [\n      {\n        value: "bteam",\n        label: "bteam",\n      },\n      {\n        value: "kbt",\n        label: "kbt",\n      },\n    ],\n  },\n  {\n    value: "自生产",\n    label: "自生产",\n    children: [\n      {\n        value: "工厂一号",\n        label: "工厂一号",\n      },\n      {\n        value: "工厂二号",\n        label: "工厂二号",\n      },\n      {\n        value: "工厂三号",\n        label: "工厂三号",\n      },\n    ],\n  },\n];\nexport default definecomponent({\n  name: "warehouseadd",\n  components: {\n    plusoutlined,\n  },\n  emits: ["onsure"],\n  props: {\n    sourcelabels: array,\n  },\n  setup(props, { emit }) {\n    // 获取父组件传来的物品明细label\n    const { sourcelabels } = props;\n    // 隐藏框的key\n    const activekey = ref(["1"]);\n\n    const displayrender = ({ labels }: { labels: string[] }) => {\n      return labels[labels.length - 1];\n    };\n    // 物品来源表单\n    const sourceform = reactive<producesource>({\n      sourceid: undefined,\n      sourcename: undefined,\n      stocktime: undefined,\n      status: undefined,\n      remarks: undefined,\n    });\n    // 物品入库表单\n    const addform = reactive<producetype>({\n      id: undefined,\n      name: undefined,\n      type: undefined,\n      price: undefined,\n      num: undefined,\n      unit: undefined,\n      sale: undefined,\n      totalprice: undefined,\n      status: undefined,\n      source: sourceform,\n    });\n    // 物品入库表单效验规则\n    const addrules = {\n      id: [{ type: "string", required: true, message: "必须输入采购订单号" }],\n      name: [{ required: true, message: "请选择一位供应商" }],\n      num: [{ type: "number", message: "只能是数字哦~~" }],\n    };\n    // 物品来源表单效验规则\n    const sourcerules = {\n      sourceid: [\n        { type: "string", required: true, message: "必须输入采购订单号" },\n      ],\n    };\n    // 提交表单的回调，由父组件调用\n    const submitprodoce = () => {\n      if (addform.id == undefined) {\n        emit("onsure", false);\n      } else {\n        addform.source.stocktime = dayjs(addform.source.stocktime).format(\n          "yyyy-mm-dd"\n        );\n        addform.source.sourcename = addform.source.sourcename[0] + \'-\' + addform.source.sourcename[1];\n        emit("onsure", true, addform);\n      }\n    };\n\n    // 关闭新增界面，并清空内容，初始化默认行为\n    const onaddclose = () => {\n      object.keys(addform).map((key) => {\n        if (key != "source") {\n          addform[key] = undefined;\n        } else {\n          object.keys(sourceform).map((key) => {\n            sourceform[key] = undefined;\n          });\n        }\n      });\n      activekey.value = ["1"];\n    };\n\n    return {\n      // 数据\n      options,\n      activekey,\n      sourcelabels,\n      sourceform,\n      addform,\n      addrules,\n      sourcerules,\n      // 函数\n      displayrender,\n      submitprodoce,\n      onaddclose,\n    };\n  },\n});\n<\/script>\n\n<style lang=\'less\'>\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n',charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"报修系统 - 部署",frontmatter:{title:"报修系统 - 部署",date:"2021-11-30T17:36:05.000Z",permalink:"/rrs/deploy/",titleTag:"项目",categories:["报修系统"],tags:[null],readingShow:"top"},regularPath:"/59.%E9%A1%B9%E7%9B%AE%E5%B7%A5%E7%A8%8B/05.%E6%8A%A5%E4%BF%AE%E7%B3%BB%E7%BB%9F/04.%E6%8A%A5%E4%BF%AE%E7%B3%BB%E7%BB%9F%20-%20%E9%83%A8%E7%BD%B2.html",relativePath:"59.项目工程/05.报修系统/04.报修系统 - 部署.md",key:"v-beb409b2",path:"/rrs/deploy/",headers:[{level:2,title:"war包准备",slug:"war包准备",normalizedTitle:"war包准备",charIndex:39},{level:2,title:"软件下载",slug:"软件下载",normalizedTitle:"软件下载",charIndex:49},{level:2,title:"后端部署",slug:"后端部署",normalizedTitle:"后端部署",charIndex:57},{level:2,title:"前端部署",slug:"前端部署",normalizedTitle:"前端部署",charIndex:65},{level:2,title:"日志查看",slug:"日志查看",normalizedTitle:"日志查看",charIndex:73}],headersStr:"war包准备 软件下载 后端部署 前端部署 日志查看",content:"笔记\n\n简单记录项目的部署过程。\n\n2021-11-30 @村长\n\n\n\n * war包准备\n * 软件下载\n * 后端部署\n * 前端部署\n * 日志查看\n\n\n\n提示\n\nGitee Pages 的检查很很严苛，出现敏感词则无法部署，本文就有一个敏感词，我用「翻墙 URL」代替它，大家都应该知道它是谁吧。V....P.....en。\n\n2021-11-30 @村长\n\n\n# war包准备\n\n利用 Maven 将项目打成 war 包。打成 war 包后，会生成有两个 war 包：\n\n * 完整版（.war 结尾）\n * 压缩版（.war.original 结尾）\n\n我们要选压缩版，将压缩版复制到桌面上，然后改名为 bx.war。名字必须是这个。\n\n注意\n\n只识别 bx.war 包名，其他包名无法起效。\n\n2021-11-30 @村长\n\n\n\n\n# 软件下载\n\n * 首先下载能登录「翻墙 URL」的软件：Easy Connect，如何下载呢？\n   \n   打开文档，三个「翻墙 URL」任选一个，在浏览器访问该「翻墙 URL」，然后提示下载 Easy Connect 软件到本地，它默认安装在 C 盘，只能通过注册表修改默认安装目录，这里建议 C 盘大的就不折腾了。\n\n * 下载软件后，打开软件，刚才三个「翻墙 URL」任选一个，然后登录\n   \n   \n   \n   初始化后，需要输入用户名，密码。两个都在文档里，就叫用户名和密码。然后成功登录「翻墙 URL」。\n   \n   \n   \n   登录成功后，它隐藏在后台，如果右键退出则代表退出「翻墙 URL」。\n   \n   \n\n\n# 后端部署\n\n * 使用 IE 浏览器 访问：https://10.10.9.11，记得先登录「翻墙 URL」才能访问该网站\n   \n   \n   \n   在文档找到堡垒机用户和密码，进行登录。\n\n * 登录成功后，IE 浏览器下方弹出 xxxx公司xxx安装，要点击安装，只有安装这个插件，才能访问远端桌面\n   \n   安装插件后，打开文档，找到用户 1 的用户名和密码。进行如下登录：\n   \n   \n\n * 输入账号和密码后，运维备注选择数据备份恢复，最后点击远程桌面，然后等待，它会打开一个远程桌面\n   \n   进入远程桌面后，打开 webapps9.0 文件夹，先把里面 bx.war 下载到本地进行备份（右键复制到本机粘贴），然后上传新的 bx.war 覆盖即可（右键复制新的 war 包，然后粘贴进来）\n   \n   注意\n   \n   只识别 bx.war 包名，其他包名无法起效。\n   \n   2021-11-30 @村长\n   \n   \n\n部署后，静待一两分钟，然后访问报修系统学生端访问地址：https://yiban.glmc.edu.cn/bxht/\n\n接着登录报修系统，看看里面是否出现异常或者功能缺失等，没有则证明部署成功，且 war 包没有问题。\n\n\n# 前端部署\n\n前端打包后，在 ROOT 文件夹里，有两个文件夹，一个是 bxqt（报修前台），另一个是 bxht（报修后台）\n\n\n\n\n\n前端打完包，将里面的内容覆盖即可。\n\n\n# 日志查看\n\n日志位置在 E 盘，日志文件夹就叫 logs，里面有很多 .log 文件。\n\n\n\n建议不要直接打开，先右键复制，然后回到自己的电脑桌面，右键粘贴出来，然后在本机打开 .log 文件。\n\n为什么不建议直接打开呢？\n\n远程桌面的配置以及系统非常老，打开大的文件，会直接卡住，所以建议下载到本机再打开。",normalizedContent:"笔记\n\n简单记录项目的部署过程。\n\n2021-11-30 @村长\n\n\n\n * war包准备\n * 软件下载\n * 后端部署\n * 前端部署\n * 日志查看\n\n\n\n提示\n\ngitee pages 的检查很很严苛，出现敏感词则无法部署，本文就有一个敏感词，我用「翻墙 url」代替它，大家都应该知道它是谁吧。v....p.....en。\n\n2021-11-30 @村长\n\n\n# war包准备\n\n利用 maven 将项目打成 war 包。打成 war 包后，会生成有两个 war 包：\n\n * 完整版（.war 结尾）\n * 压缩版（.war.original 结尾）\n\n我们要选压缩版，将压缩版复制到桌面上，然后改名为 bx.war。名字必须是这个。\n\n注意\n\n只识别 bx.war 包名，其他包名无法起效。\n\n2021-11-30 @村长\n\n\n\n\n# 软件下载\n\n * 首先下载能登录「翻墙 url」的软件：easy connect，如何下载呢？\n   \n   打开文档，三个「翻墙 url」任选一个，在浏览器访问该「翻墙 url」，然后提示下载 easy connect 软件到本地，它默认安装在 c 盘，只能通过注册表修改默认安装目录，这里建议 c 盘大的就不折腾了。\n\n * 下载软件后，打开软件，刚才三个「翻墙 url」任选一个，然后登录\n   \n   \n   \n   初始化后，需要输入用户名，密码。两个都在文档里，就叫用户名和密码。然后成功登录「翻墙 url」。\n   \n   \n   \n   登录成功后，它隐藏在后台，如果右键退出则代表退出「翻墙 url」。\n   \n   \n\n\n# 后端部署\n\n * 使用 ie 浏览器 访问：https://10.10.9.11，记得先登录「翻墙 url」才能访问该网站\n   \n   \n   \n   在文档找到堡垒机用户和密码，进行登录。\n\n * 登录成功后，ie 浏览器下方弹出 xxxx公司xxx安装，要点击安装，只有安装这个插件，才能访问远端桌面\n   \n   安装插件后，打开文档，找到用户 1 的用户名和密码。进行如下登录：\n   \n   \n\n * 输入账号和密码后，运维备注选择数据备份恢复，最后点击远程桌面，然后等待，它会打开一个远程桌面\n   \n   进入远程桌面后，打开 webapps9.0 文件夹，先把里面 bx.war 下载到本地进行备份（右键复制到本机粘贴），然后上传新的 bx.war 覆盖即可（右键复制新的 war 包，然后粘贴进来）\n   \n   注意\n   \n   只识别 bx.war 包名，其他包名无法起效。\n   \n   2021-11-30 @村长\n   \n   \n\n部署后，静待一两分钟，然后访问报修系统学生端访问地址：https://yiban.glmc.edu.cn/bxht/\n\n接着登录报修系统，看看里面是否出现异常或者功能缺失等，没有则证明部署成功，且 war 包没有问题。\n\n\n# 前端部署\n\n前端打包后，在 root 文件夹里，有两个文件夹，一个是 bxqt（报修前台），另一个是 bxht（报修后台）\n\n\n\n\n\n前端打完包，将里面的内容覆盖即可。\n\n\n# 日志查看\n\n日志位置在 e 盘，日志文件夹就叫 logs，里面有很多 .log 文件。\n\n\n\n建议不要直接打开，先右键复制，然后回到自己的电脑桌面，右键粘贴出来，然后在本机打开 .log 文件。\n\n为什么不建议直接打开呢？\n\n远程桌面的配置以及系统非常老，打开大的文件，会直接卡住，所以建议下载到本机再打开。",charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"报修系统 - 详解",frontmatter:{title:"报修系统 - 详解",date:"2021-10-30T13:49:42.000Z",permalink:"/rrs/details/",titleTag:"项目",categories:["报修系统"],tags:[null],readingShow:"top"},regularPath:"/59.%E9%A1%B9%E7%9B%AE%E5%B7%A5%E7%A8%8B/05.%E6%8A%A5%E4%BF%AE%E7%B3%BB%E7%BB%9F/02.%E6%8A%A5%E4%BF%AE%E7%B3%BB%E7%BB%9F%20-%20%E8%AF%A6%E8%A7%A3.html",relativePath:"59.项目工程/05.报修系统/02.报修系统 - 详解.md",key:"v-179b3e7c",path:"/rrs/details/",headers:[{level:2,title:"角色",slug:"角色",normalizedTitle:"角色",charIndex:18},{level:2,title:"名词翻译",slug:"名词翻译",normalizedTitle:"名词翻译",charIndex:87},{level:3,title:"实体类简称",slug:"实体类简称",normalizedTitle:"实体类简称",charIndex:96},{level:3,title:"其他简称",slug:"其他简称",normalizedTitle:"其他简称",charIndex:1133},{level:3,title:"service类对象简称",slug:"service类对象简称",normalizedTitle:"service类对象简称",charIndex:1156},{level:2,title:"名词解释",slug:"名词解释",normalizedTitle:"名词解释",charIndex:1313},{level:2,title:"util包",slug:"util包",normalizedTitle:"util包",charIndex:1478},{level:3,title:"类结构",slug:"类结构",normalizedTitle:"类结构",charIndex:1488},{level:3,title:"内容",slug:"内容",normalizedTitle:"内容",charIndex:260},{level:3,title:"优化",slug:"优化",normalizedTitle:"优化",charIndex:4221},{level:2,title:"config包",slug:"config包",normalizedTitle:"config包",charIndex:4344},{level:3,title:"结构",slug:"结构",normalizedTitle:"结构",charIndex:1489},{level:3,title:"内容",slug:"内容-2",normalizedTitle:"内容",charIndex:260},{level:2,title:"constant包",slug:"constant包",normalizedTitle:"constant包",charIndex:5244},{level:3,title:"结构",slug:"结构-2",normalizedTitle:"结构",charIndex:1489},{level:3,title:"内容",slug:"内容-3",normalizedTitle:"内容",charIndex:260},{level:2,title:"exception包",slug:"exception包",normalizedTitle:"exception包",charIndex:5512},{level:3,title:"结构",slug:"结构-3",normalizedTitle:"结构",charIndex:1489},{level:3,title:"内容",slug:"内容-4",normalizedTitle:"内容",charIndex:260},{level:2,title:"filter包",slug:"filter包",normalizedTitle:"filter包",charIndex:5676},{level:3,title:"结构",slug:"结构-4",normalizedTitle:"结构",charIndex:1489},{level:3,title:"内容",slug:"内容-5",normalizedTitle:"内容",charIndex:260},{level:2,title:"response包",slug:"response包",normalizedTitle:"response包",charIndex:5933},{level:3,title:"结构",slug:"结构-5",normalizedTitle:"结构",charIndex:1489},{level:3,title:"内容",slug:"内容-6",normalizedTitle:"内容",charIndex:260},{level:2,title:"service包",slug:"service包",normalizedTitle:"service包",charIndex:6185},{level:3,title:"结构",slug:"结构-6",normalizedTitle:"结构",charIndex:1489},{level:3,title:"内容",slug:"内容-7",normalizedTitle:"内容",charIndex:260},{level:2,title:"controller包",slug:"controller包",normalizedTitle:"controller包",charIndex:10220},{level:3,title:"结构",slug:"结构-7",normalizedTitle:"结构",charIndex:1489},{level:3,title:"内容",slug:"内容-8",normalizedTitle:"内容",charIndex:260},{level:2,title:"学到的技巧",slug:"学到的技巧",normalizedTitle:"学到的技巧",charIndex:13349}],headersStr:"角色 名词翻译 实体类简称 其他简称 service类对象简称 名词解释 util包 类结构 内容 优化 config包 结构 内容 constant包 结构 内容 exception包 结构 内容 filter包 结构 内容 response包 结构 内容 service包 结构 内容 controller包 结构 内容 学到的技巧",content:'笔记\n\n反规范的命名，唉。\n\n\n# 角色\n\n审核员2名：审核订单的人。2名都审核通过才会通过\n\n接单人多名：处理订单的人，一对一\n\n申报人多名：报修的人，一般为学生\n\n\n# 名词翻译\n\n\n# 实体类简称\n\nAdmin：用户\n\n属性详解\n\nid：用户id\n\naccount：用户名\n\npassword：密码\n\nbxd：报修单\n\n属性详解\n\nid：报修单id\n\nsbsj：申报时间\n\neid：二维码id\n\nxxdd：详细地点\n\nyysj：预约时间（不是具体时间，是字符串）公共区域不用\n\nbxlb：报修类别\n\nbxnr：报修内容\n\nsp：视频（视频地址）\n\ntp：图片（图片地址）\n\nsbr：申报人\n\nshy1state：0未审核，1审核通过，2审核未通过\n\nsbrxh：申报人学号\n\nhc：耗材使用\n\ngs：工时\n\njid：接单人ybid\n\nshy1：第一位审核员\n\nsbrsj：申报人手机号码\n\nshy2：第二位审核员\n\nshy2state：0未审核，1审核通过，2审核未通过\n\nwxsj：维修时间(或者是撤销时间）\n\ncxsy：撤销事由\n\npj：评价星级\n\npjnr：评价内容\n\npjzj：评价追加\n\nstate：1已派单，2已维修，3撤销单，4已验收，5不通过验收 qy：报修区域\n\nqylb：报修区域列表\n\nxq：校区\n\newmdd：二维码所在区域\n\nfgts：返工天数\n\njdsj：交单时间？\n\nyssj：验收时间\n\nbxqy：报修区域\n\n属性详解\n\nid：区域编号\n\nqy：区域名称\n\nqylb：区域类别\n\nxq：校区\n\nx：后台管理x坐标\n\ny：后台管理Y坐标\n\newm：二维码集合\n\nb：保修单集合\n\ncountb：\n\newm：二维码\n\n属性详解\n\nid：二维码编号\n\nqid：区域编号\n\nxxdd：二维码详细地点（不等于报修的详细地点）\n\nqy：报修区域\n\nhc：耗材\n\n属性详解\n\nid：耗材编号\n\nmc：材料名称\n\njg：价格\n\ndw：单位\n\nkc：库存\n\nlb：耗材类别\n\nxh：耗材型号\n\njdr：接单人\n\n属性详解\n\nybid：易班id\n\ngh：工号\n\nxm：姓名\n\nsj：手机\n\nyx：邮箱\n\nstate：1在职，2休假，3离职\n\nywfw：（业务范围）1,2,4,8,16,32,64\n\nzjds：\n\ndqds：\n\npjpj：\n\nqdb：签到表\n\n属性详解\n\nid：签到表编号\n\nqdsj：签到时间\n\nshyid：审核员id\n\nxq：校区\n\nstate：1签到，2签退\n\nshy：审核员\n\n属性详解\n\nybid：易班id\n\ngh：工号\n\nxm：姓名\n\nzw：1普通职员，2高级职员\n\nxq：当前校区\n\nx：X坐标\n\ny：Y坐标\n\n\n# 其他简称\n\nyb：易班\n\nxq：校区\n\n\n# service类对象简称\n\nbs：报修单的service类对象\n\nes：二维码的service类对象\n\nzdpd：自动派单的service类对象\n\nss：审核员的service类对象\n\nqs：签到表的service类对象\n\njs：接单人的service类对象\n\nybmsg：请求易班的service类对象\n\n\n# 名词解释\n\n标记的名词看不懂，这里有解释，都有标记\n\n审核单：审核员要审核的订单\n\n下班单：审核员下班了，但是还没来得及审核的订单。\n\n笔记\n\n问就是审核员不想加班，到点直接下班 😄\n\n返工天数：接单人处理完订单后，开始对该订单计时。类似于淘宝拿到快递后，却没有去app点击确认收货，但是一定时间后app会自动确认收货\n\n\n# util包\n\n\n# 类结构\n\n其他99%不会被修改\n\nconfig\n|—— quartzUtils\n\t  |—— BxdCheckTask \n\t  |—— FgAndPjTask\n\t  |—— OrderListener\n\t  |—— ShyCheck\n├── AesTra\n|── AutoOrder\n├── DictItemTree\n├── EwmUtil\n├── GetInfo\n├── GetSqlSession\n├── Me\n├── ParseUtil\n├── PathUtil\n├── RealMe\n├── UnicodeEncode\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 内容\n\n * quartzUtils包：都是定时任务执行的类\n   \n   * BxdCheckTask类：获取未派送的订单，将这些订单分配给有工时的接单人，并在易班推送消息给接单人\n     \n     * executeBxdCheck方法：获取未派送的订单，将这些订单分配给有工时的接单人，并在易班推送消息给接单人\n   \n   * FgAndPjTask类：返工天数减一以及15天后默认好评\n     \n     * reduceFgts方法：返工天数减1。用到两个mapper：一个是获取已完成的订单，一个是给这些完成订单的返工时间减1\n     \n     * setPjnr方法：15天后默认好评。用到两个mapper：一个获取已满15天却未验收的订单，一个是给这些未验收订单主动验收，并给好评\n       \n       警告\n       \n       疑惑：怎么知道已满15天呢，我猜有定时任务，自动加1天吧，目前没看到，如果这条内容没有被删除，代表我没看到加1天的代码\n   \n   * OrderListener类：获取工时超过12的接单人的未处理的订单，交给其他人\n     \n     * executeGsCheck方法：当总订单派单工时已经超过12的接单人，他的其他订单重新派给未满12的接单人\n   \n   * ShyCheck类：获取下班单，随机分配给在上夜班的审核员进行审核\n     \n     * executeShyCheck：获取下班单，随机分配给在上夜班的审核员处进行审核\n\n * AesTra类：加密解密类\n   \n   * encrypt方法：传入密钥和密码进行加密。目前没用到该方法\n   * decrypt方法：传入密钥和密码进行解密。目前没用到该方法\n   * parseByte2HexStr方法：位运算进行加密。由encrypt方法调用\n   * parseHexStr2Byte方法：位运算进行解密。由decrypt方法调用\n\n * AutoOrder类：处理派送订单类\n   \n   * zdpd方法：查找符合接单条件的接单人直接派单。条件：在职、工时小于12、在负责的区域里，当天签到了\n\n * DictItemTree类：维修列表的实体类。存储如物业维修、热随维修、家电维修、空调维修等信息\n   \n   警告\n   \n   疑惑：为什么放在utils目录下\n\n * EwmUtil类：二维码工具类\n   \n   * generateQRCodeImage方法：生成二维码的条纹格式。用到的BarcodeFormat.QR_CODE枚举代表条纹格式的二维码\n\n * GetInfo类：与易班进行授权，并获取登录用户的隐私信息（token）和普通信息（用户名，头像）和真实信息（真实姓名）\n   \n   * init方法：要求授权并获得token，将token存入session域里，如果授权失败，则返回登录页面继续授权\n   \n   * getMe方法：获取用户的基本信息，如用户名，头像，学校名等，存入Me实体类中。\n     \n     注意\n     \n     项目里并没有用到这个方法！用到下面这个方法\n   \n   * getRealMe方法：在getMe方法上，多了一个实体类RealMe，它不仅封装了Me实体类，还有用户其他的真实信息如身份证。都存入session\n   \n   * printError方法：获取报错信息，存储session中，key为message\n\n * GetSqlSession类：获取mybatis的openSession对象。\n   \n   注意\n   \n   项目没有用到！\n\n * Me类：用户信息的实体类，如昵称、性别、头像、学校等信息。主要存储与易班请求后得到数据的一个实体类。\n\n * ParseUtil类：解析报修类型和耗材内容。大部分内容都在数据库的bxd表\n   \n   * paraseBxlb方法：参数为数字-数字。如2-2，3-1。根据数字获得不同的报修内容，最终返回的结果是报修类型-具体类型。如 物业报修-家具。\n     \n     提示\n     \n     其实传来的参数是数字，解析后就是内容。数据库里已经规定一个数字代表一个内容\n     \n     点击我查看数字对应的类型\n     \n     第一个数字：\n     \n      * 1：物业保修\n     \n      * 2：水电维修\n     \n      * 3：热水维修\n     \n      * 4：家电维修\n     \n      * 5：空调维修\n     \n      * 6：其他维修\n     \n     第二个数字：\n     \n     1：家具\n     \n     2：腻子\n     \n     3：墙砖\n     \n     ......\n     \n     具体数据库，第二个数字有60个左右\n   \n   * paraseHc方法：获取耗材的相关信息。和上面方法类似，解析分割传来的参数，获得不同的小参数，去数据库获取内容，具体看源码\n   \n   * paraseHc1方法：和paraseHc几乎一样，只不过返回结果前，多加了一个字符串作为标识符\n   \n   * getzlb方法：提供保修类型的英文，转化对应的中文，就是上方隐藏的内容\n\n * PathUtil类：获取存放信息表格的路径，即static所在的路径，分为生产和开发两个路径。前者是resource目录，后者是指定一个本地的文件夹\n\n * RealMe类：Me类的封装实体类，在Me的基础上多加了一些用户的真实信息\n\n * UnicodeEncode类：\n   \n   警告\n   \n   不知道有何用处\n\n\n# 优化\n\n 1. 命名要规范\n 2. GetInfo类的getMe方法和getRealMe方法合并\n 3. Me和RealMe和DictItemTree实体类不应该放在util目录下\n 4. ParseUtil类有switch，可尝试解构\n\n\n# config包\n\n\n# 结构\n\nconfig\n├── CrosConfig\n|── QuartzConfiguration\n├── RestTemplateConfig\n├── Swagger2Config\n\n\n1\n2\n3\n4\n5\n\n\n\n# 内容\n\n * CrosConfig类：解决跨域问题\n\n * QuartzConfiguration类：定时任务。一共有4个定时任务。分别为\n   \n   1. OrderListener类的executeGsCheck方法：当总订单派单工时已经超过12的接单人，他的其他订单重新派给未满12的接单人\n      \n      > 每天9点-18点内 每隔20分钟 执行一次这个方法\n   \n   2. ShyCheck类的executeShyCheck方法：获取下班单，随机分配给在上夜班的审核员进行审核\n      \n      > 早上8点-早上10点 每隔15分钟 执行一次这个方法\n      \n      警告\n      \n      有疑惑，既然获取下班单，那么应该是晚上的夜班才对，怎么是早上\n   \n   3. BxdCheckTask类的executeBxdCheck方法：处理没有派送的订单，让这些订单分配给空闲的接单人去处理。轮询查找\n      \n      > 早上9点-早上18点 每隔20分钟 执行一次\n   \n   4. FgAndPjTask类的executeFgAndPjTask：返工天数减一以及15天后默认好评\n      \n      > 每天凌晨 3:30 触发一次\n\n * RestTemplateConfig类：将RestTemplate类放入IOC容器里，该类是restful风格的http。并给该http设置一些参数如请求超时时间，响应超时时间等，因为项目打算用RestTemplate来和易班进行请求。不可能无线请求下去，一定时间内易班不给数据，则撤回请求，并报错，存入日志\n\n * Swagger2Config类：配置swagger，用于生成接口文档。指定了标题、描述、版本、作者、许可证等\n\n\n# constant包\n\n\n# 结构\n\nconstant\n├── GlmcConstants\n\n\n1\n2\n\n\n\n# 内容\n\n * GlmcConstants类：桂林医学院报修系统的常量类。只有两个内容\n   \n   /**\n   * 总工时，单位：小时\n    */\n   public static final double GS = 12.0;\n   public static final String HC_APPEND_SYMBOL = "=";\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n\n\n# exception包\n\n\n# 结构\n\nexception\n├── GlobalExceptionHandler\n\n\n1\n2\n\n\n\n# 内容\n\n * GlobalExceptionHandler类：全局异常处理类。\n   \n   笔记\n   \n   用到了@ControllerAdvice注解，指定哪些方法处理哪些异常\n\n\n# filter包\n\n\n# 结构\n\nfilter\n├── AddResponseHeaderFilter\n\n\n1\n2\n\n\n\n# 内容\n\n * AddResponseHeaderFilter类：给响应头配置参数，如UTF-8，保证返回给前端的信息不乱码\n   \n   笔记\n   \n   该类继承了OncePerRequestFilter类，表示能够确保在一次请求只通过一次filter，而不需要重复执行。\n   \n   其实在spring里，每个filter都默认继承OncePerRequestFilter\n\n\n# response包\n\n\n# 结构\n\nresponse\n├── ResponseData\n\n\n1\n2\n\n\n\n# 内容\n\n * ResponseData类：封装返回前端信息实体类，有状态码、信息数字、数据\n   \n   * 状态status：success、false\n   \n   * 信息数字info：\n     \n     * 0：未登录授权请登录，\n     * 1：程序错误请刷新，\n     * 2：无效参数，\n     * 3：缺少传递必要参数\n     * 其余的info就自己定义\n\n\n# service包\n\n\n# 结构\n\nservice\n|—— impl\n\t|—— 实现类\n├── AdminService\n|── BxdService\n├── BxqyService\n├── EwmService\n├── ExportService\n├── HcService\n├── IDictService\n├── JdrService\n├── QdbService\n├── ShyService\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 内容\n\n * AdminService接口：用户相关操作\n   \n   * login 方法：登录\n\n * BxdService 接口：报修单相关操作\n   \n   * selforsbr 方法：根据申报人学号，获取该申报人申报的报修单\n   \n   * selbxdforshyid 方法：根据报修单id，获取该报修单，返回内容只要求有审核员、审核员是否同意、接单人id，二维码id的信息\n   \n   * selbxdbyadmin 方法：\n   \n   * selbxdforeid 方法：根据二维码id，获取由该二维码扫描出的没有完成的报修单\n   \n   * selbxdbyjdr 方法：根据接单人的易班id，获取由该接单人处理的报修单，如果报修单的状态不为空、二维码id不为空，也加入判断中\n   \n   * selbxdbyshy 方法：根据审核员id，获得该审核员 处理 过的报修单。报修单不包括已撤回的，如果二维码id不为空，获得的报修单是该二维码区域的\n   \n   * upbxdbysbr 方法：根据申报人学号、报修单id，来更新该报修单\n     \n     更新条件\n     \n      1. 如果申报人撤销了，则将报修单状态改为已撤销\n     \n      2. 如果申报人进行评价，则将该报修单的评价体系 加上 评价星级和内容\n     \n      3. 如果申报人追加评价，则将该报修单的评价体系 加上 该追加评价内容\n   \n   * upbxd1byshy 方法：当审核员 1 处理报修单，则根据该报修单 id，来进行更新处理结果\n     \n     更新条件\n     \n      1. 如果耗材了，则在报修单表加上耗材内容\n     \n      2. 如果接单人消耗工时了，则在报修单表加上消耗的工时\n     \n      3. 审核员2也处理了报修单，则在报修单表上加上处理结果\n   \n   * upbxd2byshy 方法：和上方同理，只是审核员1和审核员2调换位置\n   \n   * upbxdhcbyshy 方法：当审核员1或者审核员2处理报修单，则根据该报修单id，来进行更新处理结果\n     \n     更新条件\n     \n      1. 如果耗材了，则在报修单表加上耗材内容\n      2. 如果接单人消耗工时了，则在报修单表加上消耗的工时\n   \n   * upbxdbyadmin 方法：只要报修单表的任意字段不为空，则进行更新\n   \n   * fg 方法：更新申报时间、交单时间、验收时间，只要报修单表的任意字段不为空，则进行更新\n   \n   * upbxdbyjdr 方法：通过接单人id和报修单id，来更新该报修单\n   \n   * del 方法：根据报修单id，删除该报修单\n   \n   * newbxdbysbr 方法：插入数据到报修单表中\n   \n   * selnumforstate 方法：查询不同状态的报修单总数，如已派单的报修单有多少个、已维修的报修单有多少个\n   \n   * selnumforpj 方法：查询不同评价星级的报修单总和，如 5星的报修单有多少个\n   \n   * allcount 方法：查询一共有多少个报修单，即表里的全部报修单\n   \n   * selgs 方法：查询接单人当天 已维修和已验收 报修单的所花费的工时，工时四舍五入计算，保留小数点 12 位\n   \n   * tj 方法：获取一些不同状态的报修单数量\n   \n   * getsbrbxdnewid 方法：根据申报人学号，获取他最新申报的报修单，可能申报了多个，这方法只获取最新时间的那个\n   \n   * upbxdbyysr 方法：更新报修单的状态，如果验收时间不为空，则也进行更新\n   \n   * selishc 方法：根据报修单id，查询该报修单的耗材数据\n   \n   * selonebxd 方法：根据报修单id，查询该报修单的全部信息\n   \n   * xxsjBxd 方法：查看在休息时间内 有一个审核员审核，另一个审核员未审核的报修单的报修单。休息时间：当天 18点 到第二天 10点\n   \n   * selwpdbxd 方法：查询前20个未派单的报修单\n   \n   * selBxdByMap 方法：根据一个 map，查询符合条件的报修单\n     \n     map 内容\n     \n      1. 当status状态不为空，则返回对应状态的报修单。支持多个。状态对应： 1已派单，2已维修，3撤销单，4已验收，5不通过验收\n     \n      2. 当taskFgts不为空，则获取返工天数大于0的报修单\n     \n      3. 当taskPjnr不为空，则获取评价内容为空、评价星级为空、返工天数为0的报修单\n   \n   * updateBatch 方法：根据多个id，批量更新对应id的报修单\n     \n     更新条件\n     \n      1. taskFgts不为空，代表返工天数未满15天，则进行返工天数减少1\n     \n      2. taskPjnr不为空，代表返工天数到达15天，则默认五星评价星级评价，内容为好评\n   \n   * seljdrforpd 方法：仅查询出有 接单人易班id、业务范围，不同状态的接单人信息，还包括 所有在职的易班id总数\n\n * BxqyService 接口：报修区域相关操作\n   \n   * selbxqy 方法：根据报修区域id，获取该报修区域的数据\n   * selallqy 方法：获取所有报修区域的数据\n   * ditu 方法：获取某个报修区域的数据\n   * newqy 方法：插入一条报修区域的数据\n   * upqy 方法：更新一条报修区域的数据\n   * selByEwmId 方法：根据二维码id，查询该二维码数据\n\n * EwmService 接口：二维码相关操作\n   \n   * selewm 方法：根据区域id，查询该区域的二维码数据\n   * selqyidbyewm 方法：根据二维码id，查询该二维码的数据\n   * selqybysbr 方法：根据二维码id，查询该二维码和所在的报修区域的数据\n   * newewm 方法：插入一个二维码\n   * upewm 方法：更新一个二维码\n   * selxxwz 方法：获得二维码的详细地点信息\n   * selById 方法：根据二维码id，获取该二维码的数据\n   * updQidyAdmin 方法：根据二维码id范围，更新范围内的二维码所处的区域\n\n * ExportService 接口：将数据以xls文件形式导出\n\n * HcService 接口：耗材相关操作\n   \n   * selall 方法：查询所有耗材表的数据\n   * selHcByLb 方法：根据一级类别和二级类别获取耗材表的数据\n   * selOneHc 方法：根据耗材id，获取该耗材的数据\n   * delhc 方法：根据耗材id，删除该耗材的数据\n   * newhc 方法：插入一条耗材数据到耗材表\n   * uphc 方法：根据耗材id，更新该耗材的数据\n\n * JdrService 接口：\n   \n   * selalljdr 方法：查询接单人的数据\n   * del 方法：根据接单人易班id，删除该接单人的数据\n   * newjdr 方法：插入一条接单人的数据\n   * upjdr 方法：更新一条接单人的数据\n   * selOptimaljdr 方法：\n   * selOptimaljdrPC 方法：\n\n * MsgPushService 接口：发布消息给易班\n\n * QdbService 接口：\n   \n   * selallqy 方法：根据审核员id，查询该审核员的所有签到表\n   * qd 方法：插入一条审核员的签到数据到签到表\n   * selectOptimalXq 方法：根据审核员id，从签到表查询该审核员签到的校区地点，前提：审核员在职\n   * selectOptimalXqForShy 方法：根据审核员id，从签到表查询该审核员签到的校区地点，和上方方法比较：该方法不管审核员是否在职\n\n * ShyService 接口：\n   \n   * selallqy 方法：查询所有的审核员数据\n   * del 方法：根据审核员id，删除该审核员\n   * newshy 方法：插入一条审核员数据\n   * UPshy 方法：根据审核员id，更新该审核员的姓名和职位，职位：1：普通职员、2：高级职员\n   * selOptimalShy 方法：根据签到区域，查询今日到第二天早上9点前签到的并且没有签退的审核员\n   * selqtShy 方法：根据签到区域，查询今日签退的审核员\n   * sellsqdshy 方法：根据签到区域，查询历史签到以及签退的审核员，也有可能是今天的\n   * selOneShy 方法：根据易班id，查询id对于的审核员数据\n\n\n# controller包\n\n\n# 结构\n\ncontroller\n|—— admin\n\t|—— AdminLogin\n\t|—— AdminServlet\n├── bxd\n\t|—— BxdServlet\n\t|—— Fileload\n\t|—— VideoController\n|── bxqy\n\t|—— BxqyServlet\n├── dict\n\t|—— DictController\n├── ewm\n\t|—— EwmServlet\n├── export\n\t|—— export\n├── hc\n\t|—— HcServlet\n├── jdr\n\t|—— JdrServlet\n├── shy\n\t|—— ShyServlet\n├── Info\n├── Login\n├── Service\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# 内容\n\n * AdminLogin 类：用户相关的controller\n   \n   * adminLogin 方法：用户登录相关，成功则存入 session\n\n * AdminServlet 类：用户的请求处理类\n   \n   * adminServlet 方法：获取用户相关的请求，根据请求参数处理内容\n   \n   处理内容：\n   \n   * adminindex 方法：获取首页数据\n   * bxnum 方法：获取报修单总数\n   * newewm 方法：插入二维码到数据库\n   * newqy 方法：插入一个报修区域到数据\n   * upewm 方法：更新二维码到数据库\n   * upqy 方法：更新报修区域到数据库\n   * selewm 方法：查询一个二维码数据\n   * uppeople 方法：根据条件：删除一个审核员、修改一个审核员、删除一个接单人、修改一个接单人\n   * newpeople 方法：根据条件：添加一个审核员、添加一个接单人\n   * upbxdbyadmin 方法：分配或者审核报修单，并更新该报修单到数据库\n   * selqdb 方法：查询某个审核员的签到表数据\n   * selalljdr 方法：查询接单人的数据\n   * selOptimaljdrPC 方法：查询适合的接单人\n   * selallqy 方法：获取某个报修区域的数据\n   * selbxdbyadmin 方法：\n   * selbxdbyadminpc 方法：\n\n * BxdServlet 类：报修单相关的controller\n   \n   * bxdServlet 方法：获取报修单相关的请求，根据请求参数处理内容\n   \n   处理内容：\n   \n   * selbxdforeid 方法：根据二维码id，获取由该二维码扫描出的没有完成的报修单\n   * selqybysbr 方法：提供二维码id，查询该二维码和所在的报修区域的数据\n   * filebase64 方法：整合返工和新增工单，返工要传jdr的jid和本单的id\n   * upbxdbysbr 方法：根据申报人学号、报修单id，来更新该报修单，如果报修单已被接单人接到，就提供易班告诉接单人：报修单的更新\n   * sbr 方法：根据申报人学号，获取该申报人申报的报修单\n\n * Fileload 类：文件上传处理相关的controller\n\n * VideoController 类：视频上传处理相关的controller\n\n * BxqyServlet 类：报修区域相关的controller\n   \n   * bxqyServlet 方法：获取报修区域相关的请求，根据请求参数处理内容\n   \n   处理内容：\n   \n   * selqybyid 方法：根据报修区域id，获取该报修区域的数据\n\n * DictController 类：维修类型相关的controller\n   \n   * getAllWxlb 方法：获取维修类别，根据字符串解析为中文\n\n * EwmServlet 类：二维码相关的controller\n   \n   * ewmServlet 方法：获取二维码相关的请求，根据请求参数处理内容\n   \n   处理内容：\n   \n   * selEwmById 方法：根据二维码id，获取该二维码的数据\n   * updEwmQid 方法：根据二维码id范围，更新范围内的二维码所处的区域\n\n * export 类：导出为 xls 的文件相关的controller\n   \n   * export2xlsx 方法：导出为 xls 文件\n\n * HcServlet 类：耗材相关的controller\n   \n   * hcServlet 方法：获取耗材相关的请求，根据请求参数处理内容\n   \n   处理内容：\n   \n   * selHcByLb 方法：根据一级类别和二级类别获取耗材表的数据\n   * newhc 方法：插入一条耗材数据\n   * uphc 方法：更新一条耗材数据\n   * delhc 方法：删除一条耗材数据\n   * selhc 方法：查询所有耗材表的数据\n\n * JdrServlet 类：接单人相关的controller\n   \n   * jdrServlet 方法：获取接单人相关的请求，根据请求参数处理内容\n   \n   处理内容：\n   \n   * selgs 方法：查询接单人当天 已维修和已验收 报修单的所花费的工时，存在工时则四舍五入计算，保留小数点 12 位，否则为0\n   * upbxdbyjdr 方法：通过接单人id和报修单id，来更新该报修单的数据，如耗材工时\n   * selbxdbyjdr 方法：根据接单人的易班id，获取由该接单人处理的报修单，如果报修单的状态不为空、二维码id不为空，也加入判断中\n\n * ShyServlet 类：审核员相关的controller\n   \n   * shyServlet 方法：获取审核员相关的请求，根据请求参数处理内容\n   \n   处理内容：\n   \n   * upbxdhcbyshy 方法：当审核员1或者审核员2处理报修单，则根据该报修单id，来进行更新处理结果\n     \n     更新条件\n     \n      1. 如果耗材了，则在报修单表加上耗材内容\n     \n      2. 如果接单人消耗工时了，则在报修单表加上消耗的工时\n   \n   * selqdb 方法：根据审核员id，查询该审核员的所有签到表\n   \n   * qd 方法：插入一条审核员的签到数据到签到表\n   \n   * upbxdbyshy 方法：当审核员1或者审核员2处理报修单，则根据该报修单id，来进行更新处理结果，并查询该报修单是否已经真正处理，然后推送结果给接单人\n   \n   * upbxdbyysr 方法：更新报修单的状态，并通知处理该报修单的接单人\n   \n   * selbxdbyshy 方法：根据审核员id，获得该审核员 处理 过的报修单。报修单不包括已撤回的，如果二维码id不为空，获得的报修单是该二维码区域的\n\n * Info 类：从session获取用户的信息\n\n * Login 类：登录成功或者失败，页面的跳转，后者因为用户名密码错误或者过期，跳转登录页\n\n * Service 类：通过易班id，获取该id的个人信息，并通过工号判断属于哪类人。1：申报人、2：接单人、3：审核员\n\n\n# 学到的技巧\n\n大部分学到的内容都在上方用 笔记蓝色框 标记了\n\n * 如果对数据库进行批量的增删改。不要在Java代码里循环，然后调用mapper层。而是以集合的方式把所有参数传给mybatis，让mybatis进行遍历，即使用forreach标签\n * @ControllerAdvice 注解实现全局异常处理\n * OncePerRequestFilter的概念',normalizedContent:'笔记\n\n反规范的命名，唉。\n\n\n# 角色\n\n审核员2名：审核订单的人。2名都审核通过才会通过\n\n接单人多名：处理订单的人，一对一\n\n申报人多名：报修的人，一般为学生\n\n\n# 名词翻译\n\n\n# 实体类简称\n\nadmin：用户\n\n属性详解\n\nid：用户id\n\naccount：用户名\n\npassword：密码\n\nbxd：报修单\n\n属性详解\n\nid：报修单id\n\nsbsj：申报时间\n\neid：二维码id\n\nxxdd：详细地点\n\nyysj：预约时间（不是具体时间，是字符串）公共区域不用\n\nbxlb：报修类别\n\nbxnr：报修内容\n\nsp：视频（视频地址）\n\ntp：图片（图片地址）\n\nsbr：申报人\n\nshy1state：0未审核，1审核通过，2审核未通过\n\nsbrxh：申报人学号\n\nhc：耗材使用\n\ngs：工时\n\njid：接单人ybid\n\nshy1：第一位审核员\n\nsbrsj：申报人手机号码\n\nshy2：第二位审核员\n\nshy2state：0未审核，1审核通过，2审核未通过\n\nwxsj：维修时间(或者是撤销时间）\n\ncxsy：撤销事由\n\npj：评价星级\n\npjnr：评价内容\n\npjzj：评价追加\n\nstate：1已派单，2已维修，3撤销单，4已验收，5不通过验收 qy：报修区域\n\nqylb：报修区域列表\n\nxq：校区\n\newmdd：二维码所在区域\n\nfgts：返工天数\n\njdsj：交单时间？\n\nyssj：验收时间\n\nbxqy：报修区域\n\n属性详解\n\nid：区域编号\n\nqy：区域名称\n\nqylb：区域类别\n\nxq：校区\n\nx：后台管理x坐标\n\ny：后台管理y坐标\n\newm：二维码集合\n\nb：保修单集合\n\ncountb：\n\newm：二维码\n\n属性详解\n\nid：二维码编号\n\nqid：区域编号\n\nxxdd：二维码详细地点（不等于报修的详细地点）\n\nqy：报修区域\n\nhc：耗材\n\n属性详解\n\nid：耗材编号\n\nmc：材料名称\n\njg：价格\n\ndw：单位\n\nkc：库存\n\nlb：耗材类别\n\nxh：耗材型号\n\njdr：接单人\n\n属性详解\n\nybid：易班id\n\ngh：工号\n\nxm：姓名\n\nsj：手机\n\nyx：邮箱\n\nstate：1在职，2休假，3离职\n\nywfw：（业务范围）1,2,4,8,16,32,64\n\nzjds：\n\ndqds：\n\npjpj：\n\nqdb：签到表\n\n属性详解\n\nid：签到表编号\n\nqdsj：签到时间\n\nshyid：审核员id\n\nxq：校区\n\nstate：1签到，2签退\n\nshy：审核员\n\n属性详解\n\nybid：易班id\n\ngh：工号\n\nxm：姓名\n\nzw：1普通职员，2高级职员\n\nxq：当前校区\n\nx：x坐标\n\ny：y坐标\n\n\n# 其他简称\n\nyb：易班\n\nxq：校区\n\n\n# service类对象简称\n\nbs：报修单的service类对象\n\nes：二维码的service类对象\n\nzdpd：自动派单的service类对象\n\nss：审核员的service类对象\n\nqs：签到表的service类对象\n\njs：接单人的service类对象\n\nybmsg：请求易班的service类对象\n\n\n# 名词解释\n\n标记的名词看不懂，这里有解释，都有标记\n\n审核单：审核员要审核的订单\n\n下班单：审核员下班了，但是还没来得及审核的订单。\n\n笔记\n\n问就是审核员不想加班，到点直接下班 😄\n\n返工天数：接单人处理完订单后，开始对该订单计时。类似于淘宝拿到快递后，却没有去app点击确认收货，但是一定时间后app会自动确认收货\n\n\n# util包\n\n\n# 类结构\n\n其他99%不会被修改\n\nconfig\n|—— quartzutils\n\t  |—— bxdchecktask \n\t  |—— fgandpjtask\n\t  |—— orderlistener\n\t  |—— shycheck\n├── aestra\n|── autoorder\n├── dictitemtree\n├── ewmutil\n├── getinfo\n├── getsqlsession\n├── me\n├── parseutil\n├── pathutil\n├── realme\n├── unicodeencode\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 内容\n\n * quartzutils包：都是定时任务执行的类\n   \n   * bxdchecktask类：获取未派送的订单，将这些订单分配给有工时的接单人，并在易班推送消息给接单人\n     \n     * executebxdcheck方法：获取未派送的订单，将这些订单分配给有工时的接单人，并在易班推送消息给接单人\n   \n   * fgandpjtask类：返工天数减一以及15天后默认好评\n     \n     * reducefgts方法：返工天数减1。用到两个mapper：一个是获取已完成的订单，一个是给这些完成订单的返工时间减1\n     \n     * setpjnr方法：15天后默认好评。用到两个mapper：一个获取已满15天却未验收的订单，一个是给这些未验收订单主动验收，并给好评\n       \n       警告\n       \n       疑惑：怎么知道已满15天呢，我猜有定时任务，自动加1天吧，目前没看到，如果这条内容没有被删除，代表我没看到加1天的代码\n   \n   * orderlistener类：获取工时超过12的接单人的未处理的订单，交给其他人\n     \n     * executegscheck方法：当总订单派单工时已经超过12的接单人，他的其他订单重新派给未满12的接单人\n   \n   * shycheck类：获取下班单，随机分配给在上夜班的审核员进行审核\n     \n     * executeshycheck：获取下班单，随机分配给在上夜班的审核员处进行审核\n\n * aestra类：加密解密类\n   \n   * encrypt方法：传入密钥和密码进行加密。目前没用到该方法\n   * decrypt方法：传入密钥和密码进行解密。目前没用到该方法\n   * parsebyte2hexstr方法：位运算进行加密。由encrypt方法调用\n   * parsehexstr2byte方法：位运算进行解密。由decrypt方法调用\n\n * autoorder类：处理派送订单类\n   \n   * zdpd方法：查找符合接单条件的接单人直接派单。条件：在职、工时小于12、在负责的区域里，当天签到了\n\n * dictitemtree类：维修列表的实体类。存储如物业维修、热随维修、家电维修、空调维修等信息\n   \n   警告\n   \n   疑惑：为什么放在utils目录下\n\n * ewmutil类：二维码工具类\n   \n   * generateqrcodeimage方法：生成二维码的条纹格式。用到的barcodeformat.qr_code枚举代表条纹格式的二维码\n\n * getinfo类：与易班进行授权，并获取登录用户的隐私信息（token）和普通信息（用户名，头像）和真实信息（真实姓名）\n   \n   * init方法：要求授权并获得token，将token存入session域里，如果授权失败，则返回登录页面继续授权\n   \n   * getme方法：获取用户的基本信息，如用户名，头像，学校名等，存入me实体类中。\n     \n     注意\n     \n     项目里并没有用到这个方法！用到下面这个方法\n   \n   * getrealme方法：在getme方法上，多了一个实体类realme，它不仅封装了me实体类，还有用户其他的真实信息如身份证。都存入session\n   \n   * printerror方法：获取报错信息，存储session中，key为message\n\n * getsqlsession类：获取mybatis的opensession对象。\n   \n   注意\n   \n   项目没有用到！\n\n * me类：用户信息的实体类，如昵称、性别、头像、学校等信息。主要存储与易班请求后得到数据的一个实体类。\n\n * parseutil类：解析报修类型和耗材内容。大部分内容都在数据库的bxd表\n   \n   * parasebxlb方法：参数为数字-数字。如2-2，3-1。根据数字获得不同的报修内容，最终返回的结果是报修类型-具体类型。如 物业报修-家具。\n     \n     提示\n     \n     其实传来的参数是数字，解析后就是内容。数据库里已经规定一个数字代表一个内容\n     \n     点击我查看数字对应的类型\n     \n     第一个数字：\n     \n      * 1：物业保修\n     \n      * 2：水电维修\n     \n      * 3：热水维修\n     \n      * 4：家电维修\n     \n      * 5：空调维修\n     \n      * 6：其他维修\n     \n     第二个数字：\n     \n     1：家具\n     \n     2：腻子\n     \n     3：墙砖\n     \n     ......\n     \n     具体数据库，第二个数字有60个左右\n   \n   * parasehc方法：获取耗材的相关信息。和上面方法类似，解析分割传来的参数，获得不同的小参数，去数据库获取内容，具体看源码\n   \n   * parasehc1方法：和parasehc几乎一样，只不过返回结果前，多加了一个字符串作为标识符\n   \n   * getzlb方法：提供保修类型的英文，转化对应的中文，就是上方隐藏的内容\n\n * pathutil类：获取存放信息表格的路径，即static所在的路径，分为生产和开发两个路径。前者是resource目录，后者是指定一个本地的文件夹\n\n * realme类：me类的封装实体类，在me的基础上多加了一些用户的真实信息\n\n * unicodeencode类：\n   \n   警告\n   \n   不知道有何用处\n\n\n# 优化\n\n 1. 命名要规范\n 2. getinfo类的getme方法和getrealme方法合并\n 3. me和realme和dictitemtree实体类不应该放在util目录下\n 4. parseutil类有switch，可尝试解构\n\n\n# config包\n\n\n# 结构\n\nconfig\n├── crosconfig\n|── quartzconfiguration\n├── resttemplateconfig\n├── swagger2config\n\n\n1\n2\n3\n4\n5\n\n\n\n# 内容\n\n * crosconfig类：解决跨域问题\n\n * quartzconfiguration类：定时任务。一共有4个定时任务。分别为\n   \n   1. orderlistener类的executegscheck方法：当总订单派单工时已经超过12的接单人，他的其他订单重新派给未满12的接单人\n      \n      > 每天9点-18点内 每隔20分钟 执行一次这个方法\n   \n   2. shycheck类的executeshycheck方法：获取下班单，随机分配给在上夜班的审核员进行审核\n      \n      > 早上8点-早上10点 每隔15分钟 执行一次这个方法\n      \n      警告\n      \n      有疑惑，既然获取下班单，那么应该是晚上的夜班才对，怎么是早上\n   \n   3. bxdchecktask类的executebxdcheck方法：处理没有派送的订单，让这些订单分配给空闲的接单人去处理。轮询查找\n      \n      > 早上9点-早上18点 每隔20分钟 执行一次\n   \n   4. fgandpjtask类的executefgandpjtask：返工天数减一以及15天后默认好评\n      \n      > 每天凌晨 3:30 触发一次\n\n * resttemplateconfig类：将resttemplate类放入ioc容器里，该类是restful风格的http。并给该http设置一些参数如请求超时时间，响应超时时间等，因为项目打算用resttemplate来和易班进行请求。不可能无线请求下去，一定时间内易班不给数据，则撤回请求，并报错，存入日志\n\n * swagger2config类：配置swagger，用于生成接口文档。指定了标题、描述、版本、作者、许可证等\n\n\n# constant包\n\n\n# 结构\n\nconstant\n├── glmcconstants\n\n\n1\n2\n\n\n\n# 内容\n\n * glmcconstants类：桂林医学院报修系统的常量类。只有两个内容\n   \n   /**\n   * 总工时，单位：小时\n    */\n   public static final double gs = 12.0;\n   public static final string hc_append_symbol = "=";\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n\n\n# exception包\n\n\n# 结构\n\nexception\n├── globalexceptionhandler\n\n\n1\n2\n\n\n\n# 内容\n\n * globalexceptionhandler类：全局异常处理类。\n   \n   笔记\n   \n   用到了@controlleradvice注解，指定哪些方法处理哪些异常\n\n\n# filter包\n\n\n# 结构\n\nfilter\n├── addresponseheaderfilter\n\n\n1\n2\n\n\n\n# 内容\n\n * addresponseheaderfilter类：给响应头配置参数，如utf-8，保证返回给前端的信息不乱码\n   \n   笔记\n   \n   该类继承了onceperrequestfilter类，表示能够确保在一次请求只通过一次filter，而不需要重复执行。\n   \n   其实在spring里，每个filter都默认继承onceperrequestfilter\n\n\n# response包\n\n\n# 结构\n\nresponse\n├── responsedata\n\n\n1\n2\n\n\n\n# 内容\n\n * responsedata类：封装返回前端信息实体类，有状态码、信息数字、数据\n   \n   * 状态status：success、false\n   \n   * 信息数字info：\n     \n     * 0：未登录授权请登录，\n     * 1：程序错误请刷新，\n     * 2：无效参数，\n     * 3：缺少传递必要参数\n     * 其余的info就自己定义\n\n\n# service包\n\n\n# 结构\n\nservice\n|—— impl\n\t|—— 实现类\n├── adminservice\n|── bxdservice\n├── bxqyservice\n├── ewmservice\n├── exportservice\n├── hcservice\n├── idictservice\n├── jdrservice\n├── qdbservice\n├── shyservice\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 内容\n\n * adminservice接口：用户相关操作\n   \n   * login 方法：登录\n\n * bxdservice 接口：报修单相关操作\n   \n   * selforsbr 方法：根据申报人学号，获取该申报人申报的报修单\n   \n   * selbxdforshyid 方法：根据报修单id，获取该报修单，返回内容只要求有审核员、审核员是否同意、接单人id，二维码id的信息\n   \n   * selbxdbyadmin 方法：\n   \n   * selbxdforeid 方法：根据二维码id，获取由该二维码扫描出的没有完成的报修单\n   \n   * selbxdbyjdr 方法：根据接单人的易班id，获取由该接单人处理的报修单，如果报修单的状态不为空、二维码id不为空，也加入判断中\n   \n   * selbxdbyshy 方法：根据审核员id，获得该审核员 处理 过的报修单。报修单不包括已撤回的，如果二维码id不为空，获得的报修单是该二维码区域的\n   \n   * upbxdbysbr 方法：根据申报人学号、报修单id，来更新该报修单\n     \n     更新条件\n     \n      1. 如果申报人撤销了，则将报修单状态改为已撤销\n     \n      2. 如果申报人进行评价，则将该报修单的评价体系 加上 评价星级和内容\n     \n      3. 如果申报人追加评价，则将该报修单的评价体系 加上 该追加评价内容\n   \n   * upbxd1byshy 方法：当审核员 1 处理报修单，则根据该报修单 id，来进行更新处理结果\n     \n     更新条件\n     \n      1. 如果耗材了，则在报修单表加上耗材内容\n     \n      2. 如果接单人消耗工时了，则在报修单表加上消耗的工时\n     \n      3. 审核员2也处理了报修单，则在报修单表上加上处理结果\n   \n   * upbxd2byshy 方法：和上方同理，只是审核员1和审核员2调换位置\n   \n   * upbxdhcbyshy 方法：当审核员1或者审核员2处理报修单，则根据该报修单id，来进行更新处理结果\n     \n     更新条件\n     \n      1. 如果耗材了，则在报修单表加上耗材内容\n      2. 如果接单人消耗工时了，则在报修单表加上消耗的工时\n   \n   * upbxdbyadmin 方法：只要报修单表的任意字段不为空，则进行更新\n   \n   * fg 方法：更新申报时间、交单时间、验收时间，只要报修单表的任意字段不为空，则进行更新\n   \n   * upbxdbyjdr 方法：通过接单人id和报修单id，来更新该报修单\n   \n   * del 方法：根据报修单id，删除该报修单\n   \n   * newbxdbysbr 方法：插入数据到报修单表中\n   \n   * selnumforstate 方法：查询不同状态的报修单总数，如已派单的报修单有多少个、已维修的报修单有多少个\n   \n   * selnumforpj 方法：查询不同评价星级的报修单总和，如 5星的报修单有多少个\n   \n   * allcount 方法：查询一共有多少个报修单，即表里的全部报修单\n   \n   * selgs 方法：查询接单人当天 已维修和已验收 报修单的所花费的工时，工时四舍五入计算，保留小数点 12 位\n   \n   * tj 方法：获取一些不同状态的报修单数量\n   \n   * getsbrbxdnewid 方法：根据申报人学号，获取他最新申报的报修单，可能申报了多个，这方法只获取最新时间的那个\n   \n   * upbxdbyysr 方法：更新报修单的状态，如果验收时间不为空，则也进行更新\n   \n   * selishc 方法：根据报修单id，查询该报修单的耗材数据\n   \n   * selonebxd 方法：根据报修单id，查询该报修单的全部信息\n   \n   * xxsjbxd 方法：查看在休息时间内 有一个审核员审核，另一个审核员未审核的报修单的报修单。休息时间：当天 18点 到第二天 10点\n   \n   * selwpdbxd 方法：查询前20个未派单的报修单\n   \n   * selbxdbymap 方法：根据一个 map，查询符合条件的报修单\n     \n     map 内容\n     \n      1. 当status状态不为空，则返回对应状态的报修单。支持多个。状态对应： 1已派单，2已维修，3撤销单，4已验收，5不通过验收\n     \n      2. 当taskfgts不为空，则获取返工天数大于0的报修单\n     \n      3. 当taskpjnr不为空，则获取评价内容为空、评价星级为空、返工天数为0的报修单\n   \n   * updatebatch 方法：根据多个id，批量更新对应id的报修单\n     \n     更新条件\n     \n      1. taskfgts不为空，代表返工天数未满15天，则进行返工天数减少1\n     \n      2. taskpjnr不为空，代表返工天数到达15天，则默认五星评价星级评价，内容为好评\n   \n   * seljdrforpd 方法：仅查询出有 接单人易班id、业务范围，不同状态的接单人信息，还包括 所有在职的易班id总数\n\n * bxqyservice 接口：报修区域相关操作\n   \n   * selbxqy 方法：根据报修区域id，获取该报修区域的数据\n   * selallqy 方法：获取所有报修区域的数据\n   * ditu 方法：获取某个报修区域的数据\n   * newqy 方法：插入一条报修区域的数据\n   * upqy 方法：更新一条报修区域的数据\n   * selbyewmid 方法：根据二维码id，查询该二维码数据\n\n * ewmservice 接口：二维码相关操作\n   \n   * selewm 方法：根据区域id，查询该区域的二维码数据\n   * selqyidbyewm 方法：根据二维码id，查询该二维码的数据\n   * selqybysbr 方法：根据二维码id，查询该二维码和所在的报修区域的数据\n   * newewm 方法：插入一个二维码\n   * upewm 方法：更新一个二维码\n   * selxxwz 方法：获得二维码的详细地点信息\n   * selbyid 方法：根据二维码id，获取该二维码的数据\n   * updqidyadmin 方法：根据二维码id范围，更新范围内的二维码所处的区域\n\n * exportservice 接口：将数据以xls文件形式导出\n\n * hcservice 接口：耗材相关操作\n   \n   * selall 方法：查询所有耗材表的数据\n   * selhcbylb 方法：根据一级类别和二级类别获取耗材表的数据\n   * selonehc 方法：根据耗材id，获取该耗材的数据\n   * delhc 方法：根据耗材id，删除该耗材的数据\n   * newhc 方法：插入一条耗材数据到耗材表\n   * uphc 方法：根据耗材id，更新该耗材的数据\n\n * jdrservice 接口：\n   \n   * selalljdr 方法：查询接单人的数据\n   * del 方法：根据接单人易班id，删除该接单人的数据\n   * newjdr 方法：插入一条接单人的数据\n   * upjdr 方法：更新一条接单人的数据\n   * seloptimaljdr 方法：\n   * seloptimaljdrpc 方法：\n\n * msgpushservice 接口：发布消息给易班\n\n * qdbservice 接口：\n   \n   * selallqy 方法：根据审核员id，查询该审核员的所有签到表\n   * qd 方法：插入一条审核员的签到数据到签到表\n   * selectoptimalxq 方法：根据审核员id，从签到表查询该审核员签到的校区地点，前提：审核员在职\n   * selectoptimalxqforshy 方法：根据审核员id，从签到表查询该审核员签到的校区地点，和上方方法比较：该方法不管审核员是否在职\n\n * shyservice 接口：\n   \n   * selallqy 方法：查询所有的审核员数据\n   * del 方法：根据审核员id，删除该审核员\n   * newshy 方法：插入一条审核员数据\n   * upshy 方法：根据审核员id，更新该审核员的姓名和职位，职位：1：普通职员、2：高级职员\n   * seloptimalshy 方法：根据签到区域，查询今日到第二天早上9点前签到的并且没有签退的审核员\n   * selqtshy 方法：根据签到区域，查询今日签退的审核员\n   * sellsqdshy 方法：根据签到区域，查询历史签到以及签退的审核员，也有可能是今天的\n   * seloneshy 方法：根据易班id，查询id对于的审核员数据\n\n\n# controller包\n\n\n# 结构\n\ncontroller\n|—— admin\n\t|—— adminlogin\n\t|—— adminservlet\n├── bxd\n\t|—— bxdservlet\n\t|—— fileload\n\t|—— videocontroller\n|── bxqy\n\t|—— bxqyservlet\n├── dict\n\t|—— dictcontroller\n├── ewm\n\t|—— ewmservlet\n├── export\n\t|—— export\n├── hc\n\t|—— hcservlet\n├── jdr\n\t|—— jdrservlet\n├── shy\n\t|—— shyservlet\n├── info\n├── login\n├── service\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# 内容\n\n * adminlogin 类：用户相关的controller\n   \n   * adminlogin 方法：用户登录相关，成功则存入 session\n\n * adminservlet 类：用户的请求处理类\n   \n   * adminservlet 方法：获取用户相关的请求，根据请求参数处理内容\n   \n   处理内容：\n   \n   * adminindex 方法：获取首页数据\n   * bxnum 方法：获取报修单总数\n   * newewm 方法：插入二维码到数据库\n   * newqy 方法：插入一个报修区域到数据\n   * upewm 方法：更新二维码到数据库\n   * upqy 方法：更新报修区域到数据库\n   * selewm 方法：查询一个二维码数据\n   * uppeople 方法：根据条件：删除一个审核员、修改一个审核员、删除一个接单人、修改一个接单人\n   * newpeople 方法：根据条件：添加一个审核员、添加一个接单人\n   * upbxdbyadmin 方法：分配或者审核报修单，并更新该报修单到数据库\n   * selqdb 方法：查询某个审核员的签到表数据\n   * selalljdr 方法：查询接单人的数据\n   * seloptimaljdrpc 方法：查询适合的接单人\n   * selallqy 方法：获取某个报修区域的数据\n   * selbxdbyadmin 方法：\n   * selbxdbyadminpc 方法：\n\n * bxdservlet 类：报修单相关的controller\n   \n   * bxdservlet 方法：获取报修单相关的请求，根据请求参数处理内容\n   \n   处理内容：\n   \n   * selbxdforeid 方法：根据二维码id，获取由该二维码扫描出的没有完成的报修单\n   * selqybysbr 方法：提供二维码id，查询该二维码和所在的报修区域的数据\n   * filebase64 方法：整合返工和新增工单，返工要传jdr的jid和本单的id\n   * upbxdbysbr 方法：根据申报人学号、报修单id，来更新该报修单，如果报修单已被接单人接到，就提供易班告诉接单人：报修单的更新\n   * sbr 方法：根据申报人学号，获取该申报人申报的报修单\n\n * fileload 类：文件上传处理相关的controller\n\n * videocontroller 类：视频上传处理相关的controller\n\n * bxqyservlet 类：报修区域相关的controller\n   \n   * bxqyservlet 方法：获取报修区域相关的请求，根据请求参数处理内容\n   \n   处理内容：\n   \n   * selqybyid 方法：根据报修区域id，获取该报修区域的数据\n\n * dictcontroller 类：维修类型相关的controller\n   \n   * getallwxlb 方法：获取维修类别，根据字符串解析为中文\n\n * ewmservlet 类：二维码相关的controller\n   \n   * ewmservlet 方法：获取二维码相关的请求，根据请求参数处理内容\n   \n   处理内容：\n   \n   * selewmbyid 方法：根据二维码id，获取该二维码的数据\n   * updewmqid 方法：根据二维码id范围，更新范围内的二维码所处的区域\n\n * export 类：导出为 xls 的文件相关的controller\n   \n   * export2xlsx 方法：导出为 xls 文件\n\n * hcservlet 类：耗材相关的controller\n   \n   * hcservlet 方法：获取耗材相关的请求，根据请求参数处理内容\n   \n   处理内容：\n   \n   * selhcbylb 方法：根据一级类别和二级类别获取耗材表的数据\n   * newhc 方法：插入一条耗材数据\n   * uphc 方法：更新一条耗材数据\n   * delhc 方法：删除一条耗材数据\n   * selhc 方法：查询所有耗材表的数据\n\n * jdrservlet 类：接单人相关的controller\n   \n   * jdrservlet 方法：获取接单人相关的请求，根据请求参数处理内容\n   \n   处理内容：\n   \n   * selgs 方法：查询接单人当天 已维修和已验收 报修单的所花费的工时，存在工时则四舍五入计算，保留小数点 12 位，否则为0\n   * upbxdbyjdr 方法：通过接单人id和报修单id，来更新该报修单的数据，如耗材工时\n   * selbxdbyjdr 方法：根据接单人的易班id，获取由该接单人处理的报修单，如果报修单的状态不为空、二维码id不为空，也加入判断中\n\n * shyservlet 类：审核员相关的controller\n   \n   * shyservlet 方法：获取审核员相关的请求，根据请求参数处理内容\n   \n   处理内容：\n   \n   * upbxdhcbyshy 方法：当审核员1或者审核员2处理报修单，则根据该报修单id，来进行更新处理结果\n     \n     更新条件\n     \n      1. 如果耗材了，则在报修单表加上耗材内容\n     \n      2. 如果接单人消耗工时了，则在报修单表加上消耗的工时\n   \n   * selqdb 方法：根据审核员id，查询该审核员的所有签到表\n   \n   * qd 方法：插入一条审核员的签到数据到签到表\n   \n   * upbxdbyshy 方法：当审核员1或者审核员2处理报修单，则根据该报修单id，来进行更新处理结果，并查询该报修单是否已经真正处理，然后推送结果给接单人\n   \n   * upbxdbyysr 方法：更新报修单的状态，并通知处理该报修单的接单人\n   \n   * selbxdbyshy 方法：根据审核员id，获得该审核员 处理 过的报修单。报修单不包括已撤回的，如果二维码id不为空，获得的报修单是该二维码区域的\n\n * info 类：从session获取用户的信息\n\n * login 类：登录成功或者失败，页面的跳转，后者因为用户名密码错误或者过期，跳转登录页\n\n * service 类：通过易班id，获取该id的个人信息，并通过工号判断属于哪类人。1：申报人、2：接单人、3：审核员\n\n\n# 学到的技巧\n\n大部分学到的内容都在上方用 笔记蓝色框 标记了\n\n * 如果对数据库进行批量的增删改。不要在java代码里循环，然后调用mapper层。而是以集合的方式把所有参数传给mybatis，让mybatis进行遍历，即使用forreach标签\n * @controlleradvice 注解实现全局异常处理\n * onceperrequestfilter的概念',charsets:{cjk:!0},lastUpdated:"2022/04/05, 14:44:34"},{title:"报修系统 - Tomcat问题",frontmatter:{title:"报修系统 - Tomcat问题",date:"2021-12-30T15:27:38.000Z",permalink:"/rrs/tomcat/",titleTag:"项目",categories:["报修系统"],tags:[null],readingShow:"top"},regularPath:"/59.%E9%A1%B9%E7%9B%AE%E5%B7%A5%E7%A8%8B/05.%E6%8A%A5%E4%BF%AE%E7%B3%BB%E7%BB%9F/06.%E6%8A%A5%E4%BF%AE%E7%B3%BB%E7%BB%9F%20-%20Tomcat%E9%97%AE%E9%A2%98.html",relativePath:"59.项目工程/05.报修系统/06.报修系统 - Tomcat问题.md",key:"v-7a9069fa",path:"/rrs/tomcat/",headers:[{level:2,title:"前言",slug:"前言",normalizedTitle:"前言",charIndex:45},{level:2,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:51},{level:2,title:"配置",slug:"配置",normalizedTitle:"配置",charIndex:57},{level:3,title:"server.xml",slug:"server-xml",normalizedTitle:"server.xml",charIndex:65},{level:3,title:"logging.properties",slug:"logging-properties",normalizedTitle:"logging.properties",charIndex:81},{level:2,title:"后台启动",slug:"后台启动",normalizedTitle:"后台启动",charIndex:103},{level:3,title:"修改setclasspath.bat文件",slug:"修改setclasspath-bat文件",normalizedTitle:"修改setclasspath.bat文件",charIndex:113},{level:3,title:"配置Windows服务",slug:"配置windows服务",normalizedTitle:"配置windows服务",charIndex:139},{level:3,title:"总结",slug:"总结",normalizedTitle:"总结",charIndex:156},{level:2,title:"问题",slug:"问题",normalizedTitle:"问题",charIndex:19}],headersStr:"前言 安装 配置 server.xml logging.properties 后台启动 修改setclasspath.bat文件 配置Windows服务 总结 问题",content:'笔记\n\n记录 Tomcat 升级遇到的问题。\n\n2021-12-30 @村长\n\n\n\n * 前言\n * 安装\n * 配置\n   * server.xml\n   * logging.properties\n * 后台启动\n   * 修改setclasspath.bat文件\n   * 配置Windows服务\n   * 总结\n * 问题\n\n\n\n\n# 前言\n\n因为项目的一期验收，漏洞扫描发现 Tocmat 的漏洞比较多，所以目前打算升级 Tomcat 来解决一些自带的漏洞。\n\nTomcat 是 9.0 版本，已经用了一年半，现在升级到 Tomcat 9.0.56 版本，是目前 9.X 的最新版。\n\n如果本内容步骤遇到了问题，请看最下面的 问题，记录了我遇到的问题。\n\n\n# 安装\n\n安装不细说了，直接下载解压即可使用，值得一提的是，我们需要的 Tomcat 是 64-bit Windows.zip 的，而不是 .zip 的。\n\n\n\n这两个有什么区别呢，64-bit Windows.zip 有需要的一些 .bat 文件如后台启动，而 .zip 没有。\n\n\n# 配置\n\n我们需要进行一些项目需要的配置，首先进入 Tomcat 安装目录下的 conf 目录，这个目录就是 Tomcat 全局的的配置目录。\n\n\n# server.xml\n\n打开 server.xml，大概在 69 行，将 8080 端口改为 80。因为项目是直接通过域名访问，80 是默认端口。\n\n<Connector port="80" protocol="HTTP/1.1"\n           connectionTimeout="20000"\n           redirectPort="8443"\n           acceptCount="1500" \n           maxThreads="1600"\n           minSpareThreads="500"\n           maxHttpHeaderSize ="102400"  />\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n\n往下找，大概在 119 行处，添加如下内容：\n\n<Connector protocol="AJP/1.3"\n           address="::1"\n           port="8009"\n           redirectPort="8443" \n           secretRequired="" />\n\n\n1\n2\n3\n4\n5\n\n\n\n\n往下继续，大概在 154 行代码，添加如下内容：（有些 Tomcat 已经自带）\n\n<Host name="localhost" appBase="webapps"\n      unpackWARs="true" autoDeploy="true">\n\n\n1\n2\n\n\n\n\nname 是 IP 地址。\n\nautoDeploy 为 true 就是启动 Tomcat 后，将新的 war 包放在 webapps 目录下，就会自动编译出文件夹，自动部署。\n\nappBase 是指定监听的目录，一旦这个目录发生变化（添加 WAR 包等），就会自动部署，不需要重新启动 Tomcat。\n\nunpackWARs 为 true，则 Tomcat 会自动将 WAR 文件解压，否则不解压，直接从 WAR 文件中运行应用程序。\n\n\n# logging.properties\n\n这个文件修改日志文件的生成路径等信息。\n\n大概在 25 行，覆盖如下内容：\n\n1catalina.org.apache.juli.AsyncFileHandler.level = FINE\n1catalina.org.apache.juli.AsyncFileHandler.directory = E:/logs\n1catalina.org.apache.juli.AsyncFileHandler.prefix = catalina.\n1catalina.org.apache.juli.AsyncFileHandler.maxDays = 15\n\n2localhost.org.apache.juli.AsyncFileHandler.level = FINE\n2localhost.org.apache.juli.AsyncFileHandler.directory = E:/logs\n2localhost.org.apache.juli.AsyncFileHandler.prefix = localhost.\n2localhost.org.apache.juli.AsyncFileHandler.maxDays = 15\n\n3manager.org.apache.juli.AsyncFileHandler.level = FINE\n3manager.org.apache.juli.AsyncFileHandler.directory = E:/logs\n3manager.org.apache.juli.AsyncFileHandler.prefix = manager.\n3manager.org.apache.juli.AsyncFileHandler.maxDays = 15\n\n4host-manager.org.apache.juli.AsyncFileHandler.level = FINE\n4host-manager.org.apache.juli.AsyncFileHandler.directory = E:/logs\n4host-manager.org.apache.juli.AsyncFileHandler.prefix = host-manager.\n4host-manager.org.apache.juli.AsyncFileHandler.maxDays = 15\n\njava.util.logging.ConsoleHandler.level = FINE\njava.util.logging.ConsoleHandler.formatter = org.apache.juli.OneLineFormatter\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n日志放在 E:/logs 目录下，日志保存 15 天后被清除，以及日志语言格式根据服务器环境一样。避免乱码。\n\n\n# 后台启动\n\n前台启动，只需要启动 bin 目录下的 startup.bat 即可，但是这样会出现一个窗口，不小心关闭了就会停止运行，所以我们需要设置后台启动。\n\n后台启动有两种方式：\n\n * 修改 setclasspath.bat 文件\n * 配置 Windows 服务\n\n第一种方式其实是隐藏了 startup.bat 的窗口，拥有 startup.bat 窗口的功能，即触发上面 server.xml 配置的 Host，实现自动编译，自动部署。\n\n第二种能设置开机自启，完全处于后台启动，缺点是不能触发上面 server.xml 配置的 Host，无法实现自动编译，自动部署。\n\n我试过了两种，后来使用了第一种方式，因为我目前还要开发新功能，每次开发一个功能要部署一次，所以为了方便，让其自动编译，自动部署。第二种适用于项目已经完全开发，不需要频繁部署新的 WAR 包。\n\n\n# 修改setclasspath.bat文件\n\n非常简单，进入 Tomcat 安装目录下的 bin 目录，右键以记事本打开（不能双击），在 79 行左右，将 set _RUNJAVA="%JRE_HOME%\\bin\\java.exe" 改为 set _RUNJAVA="%JRE_HOME%\\bin\\javaw.exe"，利用 jdk 的另一种启动方式 javaw.exe 代替 java.exe，实现自动编译，自动部署。\n\n\n\nrem 是注释的意思，把原来的注释掉，或者删除。\n\n然后双击启动同目录下的 startup.bat 文件，此时你会发现窗口一闪而过，此时它会进入后台运行，等待半分钟左右，就可以看到效果了。\n\n如果没有效果，那么就是 Tomcat 无法找到 jdk，需要进行环境变量配置。\n\n如果想停止运行，就双击启动 shutdown.bat 文件。\n\n\n# 配置Windows服务\n\n打开 CMD ，进入 Tomcat 安装目录的 bin 目录下，执行如下命令：\n\nservice.bat install\n\n\n1\n\n\n就会安装 Tomcat 服务，然后进入 Windows 的服务，看到如下内容代表生成服务成功：\n\n\n\n右键点击属性，然后修改启动类型为自动，这样就会 开机自启，然后启动该服务即可，此时 Tomcat 就会内部悄悄启动，只需要静等待半分钟，就可以了，不需要去运行 startup.bat 文件。\n\n附带删除 Tomcat 服务命令，进入 bin 目录，执行如下命令即可删除 Tomcat 服务：\n\nservice.bat remove\n\n\n1\n\n\n\n# 总结\n\n修改 setclasspath.bat 文件其实是启动 startup.bat 时，隐藏窗口，适合不断部署新 WAR 包的环境。\n\n配置 Windows 服务是融入 Windows 服务里，交给 Windows 来启动，适合开发完项目，不频繁部署 WAR 包的环境。\n\n\n# 问题\n\n> java.security.InvalidKeyException: Illegal key size\n\n这是无法访问手机端的原因。\n\n如果密钥大于 128, 会抛出 java.security.InvalidKeyException: Illegal key size 异常. 因为密钥长度是受限制的，这是美国对软件出口的一种控制，只允许密钥低于 128 才能运行。它是检测两个 jar 包来进行控制。\n\n如果你的项目用到密钥大于 128，则需要去下载不受限制的密钥 jar 包。\n\njdk 5: http://www.oracle.com/technetwork/java/javasebusiness/downloads/java-archive-downloads-java-plat-419418.html#jce_policy-1.5.0-oth-JPR\n\njdk6: http://www.oracle.com/technetwork/java/javase/downloads/jce-6-download-429243.html\n\nJDK7的下载地址: http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html\n\nJDK8的下载地址: http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html\n\n需要登录 Oracle 用户，没有请邮箱注册。\n\n下载后解压，可以看到 local_policy.jar 和 US_export_policy.jar 以及 readme.txt。\n\n\n\n如果安装了 JRE，将两个 jar 文件放到 %JRE_HOME%\\lib\\security 目录下覆盖原来的文件。\n\n如果安装了 JDK，还要将两个 jar 文件也放到 %JDK_HOME%\\jre\\lib\\security 目录下覆盖原来文件。\n\n如果两个都安装了，则两个都要覆盖。\n\n * %JDK_HOME% 是 jdk 的根目录。\n\n * %JRE_HOME% 是 jre 的根目录，一般在 jdk 的 bin 目录下。\n\n覆盖后，重新启动 Tomcat 就可以了。\n\n> 配置 JDK 环境变量\n\n前台启动时，双击打开 startup.bat 后，CMD 窗口一闪而过，就是因为没有配置 JDK 环境变量，JDK 的环境变量名字必须叫做 JAVA_HOME。',normalizedContent:'笔记\n\n记录 tomcat 升级遇到的问题。\n\n2021-12-30 @村长\n\n\n\n * 前言\n * 安装\n * 配置\n   * server.xml\n   * logging.properties\n * 后台启动\n   * 修改setclasspath.bat文件\n   * 配置windows服务\n   * 总结\n * 问题\n\n\n\n\n# 前言\n\n因为项目的一期验收，漏洞扫描发现 tocmat 的漏洞比较多，所以目前打算升级 tomcat 来解决一些自带的漏洞。\n\ntomcat 是 9.0 版本，已经用了一年半，现在升级到 tomcat 9.0.56 版本，是目前 9.x 的最新版。\n\n如果本内容步骤遇到了问题，请看最下面的 问题，记录了我遇到的问题。\n\n\n# 安装\n\n安装不细说了，直接下载解压即可使用，值得一提的是，我们需要的 tomcat 是 64-bit windows.zip 的，而不是 .zip 的。\n\n\n\n这两个有什么区别呢，64-bit windows.zip 有需要的一些 .bat 文件如后台启动，而 .zip 没有。\n\n\n# 配置\n\n我们需要进行一些项目需要的配置，首先进入 tomcat 安装目录下的 conf 目录，这个目录就是 tomcat 全局的的配置目录。\n\n\n# server.xml\n\n打开 server.xml，大概在 69 行，将 8080 端口改为 80。因为项目是直接通过域名访问，80 是默认端口。\n\n<connector port="80" protocol="http/1.1"\n           connectiontimeout="20000"\n           redirectport="8443"\n           acceptcount="1500" \n           maxthreads="1600"\n           minsparethreads="500"\n           maxhttpheadersize ="102400"  />\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n\n往下找，大概在 119 行处，添加如下内容：\n\n<connector protocol="ajp/1.3"\n           address="::1"\n           port="8009"\n           redirectport="8443" \n           secretrequired="" />\n\n\n1\n2\n3\n4\n5\n\n\n\n\n往下继续，大概在 154 行代码，添加如下内容：（有些 tomcat 已经自带）\n\n<host name="localhost" appbase="webapps"\n      unpackwars="true" autodeploy="true">\n\n\n1\n2\n\n\n\n\nname 是 ip 地址。\n\nautodeploy 为 true 就是启动 tomcat 后，将新的 war 包放在 webapps 目录下，就会自动编译出文件夹，自动部署。\n\nappbase 是指定监听的目录，一旦这个目录发生变化（添加 war 包等），就会自动部署，不需要重新启动 tomcat。\n\nunpackwars 为 true，则 tomcat 会自动将 war 文件解压，否则不解压，直接从 war 文件中运行应用程序。\n\n\n# logging.properties\n\n这个文件修改日志文件的生成路径等信息。\n\n大概在 25 行，覆盖如下内容：\n\n1catalina.org.apache.juli.asyncfilehandler.level = fine\n1catalina.org.apache.juli.asyncfilehandler.directory = e:/logs\n1catalina.org.apache.juli.asyncfilehandler.prefix = catalina.\n1catalina.org.apache.juli.asyncfilehandler.maxdays = 15\n\n2localhost.org.apache.juli.asyncfilehandler.level = fine\n2localhost.org.apache.juli.asyncfilehandler.directory = e:/logs\n2localhost.org.apache.juli.asyncfilehandler.prefix = localhost.\n2localhost.org.apache.juli.asyncfilehandler.maxdays = 15\n\n3manager.org.apache.juli.asyncfilehandler.level = fine\n3manager.org.apache.juli.asyncfilehandler.directory = e:/logs\n3manager.org.apache.juli.asyncfilehandler.prefix = manager.\n3manager.org.apache.juli.asyncfilehandler.maxdays = 15\n\n4host-manager.org.apache.juli.asyncfilehandler.level = fine\n4host-manager.org.apache.juli.asyncfilehandler.directory = e:/logs\n4host-manager.org.apache.juli.asyncfilehandler.prefix = host-manager.\n4host-manager.org.apache.juli.asyncfilehandler.maxdays = 15\n\njava.util.logging.consolehandler.level = fine\njava.util.logging.consolehandler.formatter = org.apache.juli.onelineformatter\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n日志放在 e:/logs 目录下，日志保存 15 天后被清除，以及日志语言格式根据服务器环境一样。避免乱码。\n\n\n# 后台启动\n\n前台启动，只需要启动 bin 目录下的 startup.bat 即可，但是这样会出现一个窗口，不小心关闭了就会停止运行，所以我们需要设置后台启动。\n\n后台启动有两种方式：\n\n * 修改 setclasspath.bat 文件\n * 配置 windows 服务\n\n第一种方式其实是隐藏了 startup.bat 的窗口，拥有 startup.bat 窗口的功能，即触发上面 server.xml 配置的 host，实现自动编译，自动部署。\n\n第二种能设置开机自启，完全处于后台启动，缺点是不能触发上面 server.xml 配置的 host，无法实现自动编译，自动部署。\n\n我试过了两种，后来使用了第一种方式，因为我目前还要开发新功能，每次开发一个功能要部署一次，所以为了方便，让其自动编译，自动部署。第二种适用于项目已经完全开发，不需要频繁部署新的 war 包。\n\n\n# 修改setclasspath.bat文件\n\n非常简单，进入 tomcat 安装目录下的 bin 目录，右键以记事本打开（不能双击），在 79 行左右，将 set _runjava="%jre_home%\\bin\\java.exe" 改为 set _runjava="%jre_home%\\bin\\javaw.exe"，利用 jdk 的另一种启动方式 javaw.exe 代替 java.exe，实现自动编译，自动部署。\n\n\n\nrem 是注释的意思，把原来的注释掉，或者删除。\n\n然后双击启动同目录下的 startup.bat 文件，此时你会发现窗口一闪而过，此时它会进入后台运行，等待半分钟左右，就可以看到效果了。\n\n如果没有效果，那么就是 tomcat 无法找到 jdk，需要进行环境变量配置。\n\n如果想停止运行，就双击启动 shutdown.bat 文件。\n\n\n# 配置windows服务\n\n打开 cmd ，进入 tomcat 安装目录的 bin 目录下，执行如下命令：\n\nservice.bat install\n\n\n1\n\n\n就会安装 tomcat 服务，然后进入 windows 的服务，看到如下内容代表生成服务成功：\n\n\n\n右键点击属性，然后修改启动类型为自动，这样就会 开机自启，然后启动该服务即可，此时 tomcat 就会内部悄悄启动，只需要静等待半分钟，就可以了，不需要去运行 startup.bat 文件。\n\n附带删除 tomcat 服务命令，进入 bin 目录，执行如下命令即可删除 tomcat 服务：\n\nservice.bat remove\n\n\n1\n\n\n\n# 总结\n\n修改 setclasspath.bat 文件其实是启动 startup.bat 时，隐藏窗口，适合不断部署新 war 包的环境。\n\n配置 windows 服务是融入 windows 服务里，交给 windows 来启动，适合开发完项目，不频繁部署 war 包的环境。\n\n\n# 问题\n\n> java.security.invalidkeyexception: illegal key size\n\n这是无法访问手机端的原因。\n\n如果密钥大于 128, 会抛出 java.security.invalidkeyexception: illegal key size 异常. 因为密钥长度是受限制的，这是美国对软件出口的一种控制，只允许密钥低于 128 才能运行。它是检测两个 jar 包来进行控制。\n\n如果你的项目用到密钥大于 128，则需要去下载不受限制的密钥 jar 包。\n\njdk 5: http://www.oracle.com/technetwork/java/javasebusiness/downloads/java-archive-downloads-java-plat-419418.html#jce_policy-1.5.0-oth-jpr\n\njdk6: http://www.oracle.com/technetwork/java/javase/downloads/jce-6-download-429243.html\n\njdk7的下载地址: http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html\n\njdk8的下载地址: http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html\n\n需要登录 oracle 用户，没有请邮箱注册。\n\n下载后解压，可以看到 local_policy.jar 和 us_export_policy.jar 以及 readme.txt。\n\n\n\n如果安装了 jre，将两个 jar 文件放到 %jre_home%\\lib\\security 目录下覆盖原来的文件。\n\n如果安装了 jdk，还要将两个 jar 文件也放到 %jdk_home%\\jre\\lib\\security 目录下覆盖原来文件。\n\n如果两个都安装了，则两个都要覆盖。\n\n * %jdk_home% 是 jdk 的根目录。\n\n * %jre_home% 是 jre 的根目录，一般在 jdk 的 bin 目录下。\n\n覆盖后，重新启动 tomcat 就可以了。\n\n> 配置 jdk 环境变量\n\n前台启动时，双击打开 startup.bat 后，cmd 窗口一闪而过，就是因为没有配置 jdk 环境变量，jdk 的环境变量名字必须叫做 java_home。',charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"YonYou - 节点配置",frontmatter:{title:"YonYou - 节点配置",date:"2022-02-22T16:51:22.000Z",permalink:"/yonyou/configuration-node/",titleTag:"原创",categories:["YonYou"],tags:["YonYou"],readingShow:"top"},regularPath:"/59.%E9%A1%B9%E7%9B%AE%E5%B7%A5%E7%A8%8B/10.yonyou/01.yonyou%20-%20%E8%8A%82%E7%82%B9%E9%85%8D%E7%BD%AE.html",relativePath:"59.项目工程/10.yonyou/01.yonyou - 节点配置.md",key:"v-1a9f2e82",path:"/yonyou/configuration-node/",headers:[{level:2,title:"前提",slug:"前提",normalizedTitle:"前提",charIndex:3},{level:2,title:"生成硬件锁",slug:"生成硬件锁",normalizedTitle:"生成硬件锁",charIndex:9},{level:2,title:"申请License",slug:"申请license",normalizedTitle:"申请license",charIndex:18},{level:2,title:"问题",slug:"问题",normalizedTitle:"问题",charIndex:31}],headersStr:"前提 生成硬件锁 申请License 问题",content:" * 前提\n * 生成硬件锁\n * 申请License\n * 问题\n\n\n\n\n# 前提\n\n下载 home-uat.7z 压缩包，并解压，解压后的文件夹叫 home-uat。\n\n\n# 生成硬件锁\n\n在 home-uat 的 bin 目录下，打开 sysConfig.bat 文件，在左侧菜单找到 License，点击 生成硬件锁，产品号随便填写，网卡选第一个。\n\n如图：\n\n\n\n点击确定后，会在 home-uat 的 bin 目录下生成 hardkey.req 文件，记住该文件的位置。\n\n\n\n\n# 申请License\n\n申请 License 先访问：https://developer.yonyoucloud.com/。\n\n此时进入开发者中心首页，先登录，再点击左上方的「控制台」，接着点击右上角的「全部产品」，找到「资源申请」下的「试用License申请」。\n\n申请资源选择 NC Cloud，时间都选择当前日期，原因填写测试，硬件码选择上方生成的 hardkey.req 文件。\n\n\n\n申请完成后，前往用友邮箱并进行登录：https://mail.yonyou.com/。\n\n不久后会在自己的邮箱收到带有文件的邮件，下载文件。\n\n\n\n下载 licese.resp 文件，放在 home-uat 的根目录下，也可以创建一个文件夹存放 license。\n\n打开 sysConfig.bat 文件，在左侧菜单找到 License，点击 导入授权，找到刚才的 licese.resp 文件，如果成功，在下方会看到产品号等内容。\n\n\n\n重新启动 home-uat 的 startup.bat 文件，静待几分钟重启成功后（有 Server startup in xxxms 出现），访问 localhost:8088 页面，输入用户名和密码：\n\n * 用户名：sc01 或者 src04\n * 密码：123qwe\n\n看到如下界面就代表成功。\n\n\n\n\n# 问题\n\n重新启动 home-uat 时，出现 Address already in use 错误，原因是 home-uat 需要的 8088 端口被占用了，需要释放 8088 端口。\n\n打开命令行，输入命令 netstat -ano，找到 8088 端口的 PID。\n\n打开任务管理器，找到 8088 端口对于的 PID 程序，结束即可。",normalizedContent:" * 前提\n * 生成硬件锁\n * 申请license\n * 问题\n\n\n\n\n# 前提\n\n下载 home-uat.7z 压缩包，并解压，解压后的文件夹叫 home-uat。\n\n\n# 生成硬件锁\n\n在 home-uat 的 bin 目录下，打开 sysconfig.bat 文件，在左侧菜单找到 license，点击 生成硬件锁，产品号随便填写，网卡选第一个。\n\n如图：\n\n\n\n点击确定后，会在 home-uat 的 bin 目录下生成 hardkey.req 文件，记住该文件的位置。\n\n\n\n\n# 申请license\n\n申请 license 先访问：https://developer.yonyoucloud.com/。\n\n此时进入开发者中心首页，先登录，再点击左上方的「控制台」，接着点击右上角的「全部产品」，找到「资源申请」下的「试用license申请」。\n\n申请资源选择 nc cloud，时间都选择当前日期，原因填写测试，硬件码选择上方生成的 hardkey.req 文件。\n\n\n\n申请完成后，前往用友邮箱并进行登录：https://mail.yonyou.com/。\n\n不久后会在自己的邮箱收到带有文件的邮件，下载文件。\n\n\n\n下载 licese.resp 文件，放在 home-uat 的根目录下，也可以创建一个文件夹存放 license。\n\n打开 sysconfig.bat 文件，在左侧菜单找到 license，点击 导入授权，找到刚才的 licese.resp 文件，如果成功，在下方会看到产品号等内容。\n\n\n\n重新启动 home-uat 的 startup.bat 文件，静待几分钟重启成功后（有 server startup in xxxms 出现），访问 localhost:8088 页面，输入用户名和密码：\n\n * 用户名：sc01 或者 src04\n * 密码：123qwe\n\n看到如下界面就代表成功。\n\n\n\n\n# 问题\n\n重新启动 home-uat 时，出现 address already in use 错误，原因是 home-uat 需要的 8088 端口被占用了，需要释放 8088 端口。\n\n打开命令行，输入命令 netstat -ano，找到 8088 端口的 pid。\n\n打开任务管理器，找到 8088 端口对于的 pid 程序，结束即可。",charsets:{cjk:!0},lastUpdated:"2022/04/05, 14:44:34"},{title:"YonYou - NCC节点开发",frontmatter:{title:"YonYou - NCC节点开发",date:"2022-02-23T22:21:47.000Z",permalink:"/yonyou/ncc-metadata/basic/",titleTag:"原创",categories:["YonYou"],tags:["YonYou"],readingShow:"top"},regularPath:"/59.%E9%A1%B9%E7%9B%AE%E5%B7%A5%E7%A8%8B/10.yonyou/03.YonYou%20-%20NCC%E8%8A%82%E7%82%B9%E5%BC%80%E5%8F%91.html",relativePath:"59.项目工程/10.yonyou/03.YonYou - NCC节点开发.md",key:"v-91fa07b2",path:"/yonyou/ncc-metadata/basic/",headers:[{level:2,title:"说明",slug:"说明",normalizedTitle:"说明",charIndex:3},{level:2,title:"创建 NCCloud",slug:"创建-nccloud",normalizedTitle:"创建 nccloud",charIndex:9},{level:2,title:"代码定制",slug:"代码定制",normalizedTitle:"代码定制",charIndex:23},{level:2,title:"启动",slug:"启动",normalizedTitle:"启动",charIndex:31},{level:2,title:"前端配置",slug:"前端配置",normalizedTitle:"前端配置",charIndex:37},{level:2,title:"授权",slug:"授权",normalizedTitle:"授权",charIndex:45},{level:2,title:"启动方式解释",slug:"启动方式解释",normalizedTitle:"启动方式解释",charIndex:51},{level:2,title:"优化启动方式",slug:"优化启动方式",normalizedTitle:"优化启动方式",charIndex:61},{level:2,title:"无法删除问题",slug:"无法删除问题",normalizedTitle:"无法删除问题",charIndex:71}],headersStr:"说明 创建 NCCloud 代码定制 启动 前端配置 授权 启动方式解释 优化启动方式 无法删除问题",content:' * 说明\n * 创建 NCCloud\n * 代码定制\n * 启动\n * 前端配置\n * 授权\n * 启动方式解释\n * 优化启动方式\n * 无法删除问题\n\n\n\n\n# 说明\n\n本内容记录如何创建 NCCloud 项目和组件，以及进行代码定制。\n\n\n# 创建 NCCloud\n\n运行 YonBuilder.bat 文件，会打开内部 Eclipse。然后左上角【File】->【new】->【Other...】->【Genral】->【NCCloud 项目】，项目名字为 emm（当时测试），创建完项目，则在其创建位置的下方创建 NCCCloud 组件，NCCCloud 组件名字要记住，后面的元数据组件要对应上。\n\n想象 NCCCloud 项目就是 Java 项目，NCCCloud 组件就是一个模块。\n\n\n\n\n\n\n# 代码定制\n\n启动 startup.bat 命令，可以在 vscode 的命令行启动。\n\n启动后，访问 http://localhost:8088，并进行登录：用户名 sc01，密码 123qwe。\n\n登录成功后，点击左上角的红色 B，找到 应用工程，打开 代码定制。\n\n\n\n进入代码定制后，点击 加号，然后点击右上角的 新增。\n\n添加内容，内容不详细说，对着 Excel 表格添加数据即可，值得注意的是子实体类和枚举类的添加，以及类型：\n\n类型          描述\nString      对应数据库的 VARCHAR2\nUFBoolean   对应勾选框\nUFDouble    对应数据库的 Number\n【枚举类】       先创建一个枚举类，然后通过名字连接该枚举类\n【主实体】       先创建一个子实体，然后通过名字连接该子实体\n\n\n\n * 导入导出插件：选择\n * 单据特性插件：生成一些常用字段，如最后修改时间等\n * 档案特性插件：生成的代码定制用于给别人参考\n\n添加完内容，点击保存并发布，然后点击代码定制\n\n\n\n点击右上角的代码定制，进入到最终页面，填写信息\n\n\n\n * 应用名称：与元数据组件名保持一致\n * 应用编码：应用分类的编码 + 两个自定义识别编码，必须唯一，否则会覆盖其他人的，或者自己的被其他人覆盖\n * 菜单项编码：与应用编码保持一致\n * 菜单项名称：与应用名称保持一致\n * 组织类型为 全局，这样下面才能被使用，功能点类型为 管理+业务类应用。\n * 菜单项编码要求 8 个字符。\n\n生成的参照类型：\n\n * 表型参照：单表、主子表、树表\n * 树形参照：单表树卡\n\n\n\n本地开发，如果选择的话，则前端导出路径是 NCCCloud 项目的 hotwebs 目录下，后端导出路径是 NCCCloud 项目根目录，这样下载源码会自带适配项目。\n\n不使用本地开发，则是下载源码压缩包，自行将压缩包的文件放到项目相应的目录：\n\n * 前端放在 hotwebs/src/emm 目录下（emm 是 NCCCloud 项目名，注意自己的）\n\n * 后端放在 NCCCloud 项目根目录下，打开压缩包，进入 java/项目名/组件名里，所有目录放到 NCCCloud 组件目录下\n   \n   \n\n注销当前用户，登录管理员，进入 集团应用管理，右上角 修改，将自己的项目菜单从左边移到右边。（赋予权限）\n\n\n# 启动\n\n * 首先关闭 startup.bat 启动的项目。\n\n * 下载源码并放到 NCCloud 项目后，进入项目，对项目名「右键 -> Debug AS -> 2 NCCloud中间件服务器」来启动后端项目（确保第一步已经实现，否则端口冲突）\n\n\n# 前端配置\n\n在 eclipse 启动的项目是后端项目，我们可以通过 8088 端口访问页面，但是也有前端，端口为 3006，当我们访问 3006 端口后，自动代理到 8088 端口。\n\n> 为什么不直接访问 8088 端口呢，偏偏访问 3006 端口，然后代理到 8088 端口？\n> \n> 前端是给客户使用，不可能给他们直接使用后端。\n\n代理配置\n\n进入 hotwebs 项目，打开 config.json 文件，替换如下内容：\n\n{\n\t"buildEntryPath": [\n\t\t"./src/*/*/*/*/index.js"\n\t],\n\t"proxy":"http://127.0.0.1:8088",\n\t"buildWithoutHTML": [ "uapbd/refer", "uap/refer" ],\n\t"devPort": 3006\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n解决 404 问题：打开 config/webpack.dev.config.js 文件，在 56 行添加如下代码：\n\n\'/nccloud/resources/emm\': {\n    target: \'http://localhost:3006\', pathRewrite: { \'/nccloud/resources/emm\': \'/emm\' }\n},\n\n\n1\n2\n3\n\n\n如图：\n\n\n\n继续在 79 行代码添加如下代码：\n\nnew OpenBrowserPlugin({ url: `http://${host}:${port}/nccloud` }), // 构建完成打开浏览器插件\n\n\n1\n\n\n如图：\n\n\n\n最后执行命令 yarn run dev 启动前端项目。\n\n\n# 授权\n\n访问前端项目 http://localhost:3006，登录后，找到资产基础设置，点击自己的项目菜单名，进入后进行表的增删改查，如果可以使用，则代表成功。\n\n\n\n\n# 启动方式解释\n\n通过 startup.bat 文件启动的后端是「管理员、服务器」，通过 localhost:8088 端口访问，用于添加元数据、代码定制、菜单权限赋予显示等，不允许进行表的增删改查等。\n\n通过 Eclipse 启动的后端是「开发环境」，不建议通过 localhost:8088 端口访问，而是通过前端 localhost:3006 端口进行访问，用于进行表的增删改查，不允许添加元数据、代码定制、菜单权限赋予显示等。\n\n\n# 优化启动方式\n\n上面的两个启动方式比较繁琐，因为每个启动的时间都非常久，那么最好一个启动方式能解决所有问题，即运行 startup.bat 文件后，就能进行任何操作，包括 Eclipse 启动的权限，这样进行增删改查就不需要启动 Eclipse。\n\n将 home-uat/hotwebs/nccloud/resources 下的 codefactory 文件夹复制到 NCCloud 项目的 hotwebs 目录下的 src 中，然后在 home-uat 运行 startup.bat 文件即可。\n\n\n# 无法删除问题\n\n无法删除是因为前端的一些代码有问题，我们需要修改这些代码。\n\n如果生成的是树表页面，则在 hotwebs/模块名/组件名/组件名/index.js 文件，修改 1614 行代码：\n\nif(showmode == SHOWMODE_CARD && editmode != EDITMODE_BROWSE){\n\n\n1\n\n\n如果生成的是树卡页面，则在 hotwebs/模块名/组件名/组件名/index.js 文件，修改 683 行代码：\n\nclickDelIconEve : (node)=>{this.pageEventForward({btncode:ACTIONS.DELETE,selectedNode : node});},    // 删除点击 回调\n\n\n1\n',normalizedContent:' * 说明\n * 创建 nccloud\n * 代码定制\n * 启动\n * 前端配置\n * 授权\n * 启动方式解释\n * 优化启动方式\n * 无法删除问题\n\n\n\n\n# 说明\n\n本内容记录如何创建 nccloud 项目和组件，以及进行代码定制。\n\n\n# 创建 nccloud\n\n运行 yonbuilder.bat 文件，会打开内部 eclipse。然后左上角【file】->【new】->【other...】->【genral】->【nccloud 项目】，项目名字为 emm（当时测试），创建完项目，则在其创建位置的下方创建 ncccloud 组件，ncccloud 组件名字要记住，后面的元数据组件要对应上。\n\n想象 ncccloud 项目就是 java 项目，ncccloud 组件就是一个模块。\n\n\n\n\n\n\n# 代码定制\n\n启动 startup.bat 命令，可以在 vscode 的命令行启动。\n\n启动后，访问 http://localhost:8088，并进行登录：用户名 sc01，密码 123qwe。\n\n登录成功后，点击左上角的红色 b，找到 应用工程，打开 代码定制。\n\n\n\n进入代码定制后，点击 加号，然后点击右上角的 新增。\n\n添加内容，内容不详细说，对着 excel 表格添加数据即可，值得注意的是子实体类和枚举类的添加，以及类型：\n\n类型          描述\nstring      对应数据库的 varchar2\nufboolean   对应勾选框\nufdouble    对应数据库的 number\n【枚举类】       先创建一个枚举类，然后通过名字连接该枚举类\n【主实体】       先创建一个子实体，然后通过名字连接该子实体\n\n\n\n * 导入导出插件：选择\n * 单据特性插件：生成一些常用字段，如最后修改时间等\n * 档案特性插件：生成的代码定制用于给别人参考\n\n添加完内容，点击保存并发布，然后点击代码定制\n\n\n\n点击右上角的代码定制，进入到最终页面，填写信息\n\n\n\n * 应用名称：与元数据组件名保持一致\n * 应用编码：应用分类的编码 + 两个自定义识别编码，必须唯一，否则会覆盖其他人的，或者自己的被其他人覆盖\n * 菜单项编码：与应用编码保持一致\n * 菜单项名称：与应用名称保持一致\n * 组织类型为 全局，这样下面才能被使用，功能点类型为 管理+业务类应用。\n * 菜单项编码要求 8 个字符。\n\n生成的参照类型：\n\n * 表型参照：单表、主子表、树表\n * 树形参照：单表树卡\n\n\n\n本地开发，如果选择的话，则前端导出路径是 ncccloud 项目的 hotwebs 目录下，后端导出路径是 ncccloud 项目根目录，这样下载源码会自带适配项目。\n\n不使用本地开发，则是下载源码压缩包，自行将压缩包的文件放到项目相应的目录：\n\n * 前端放在 hotwebs/src/emm 目录下（emm 是 ncccloud 项目名，注意自己的）\n\n * 后端放在 ncccloud 项目根目录下，打开压缩包，进入 java/项目名/组件名里，所有目录放到 ncccloud 组件目录下\n   \n   \n\n注销当前用户，登录管理员，进入 集团应用管理，右上角 修改，将自己的项目菜单从左边移到右边。（赋予权限）\n\n\n# 启动\n\n * 首先关闭 startup.bat 启动的项目。\n\n * 下载源码并放到 nccloud 项目后，进入项目，对项目名「右键 -> debug as -> 2 nccloud中间件服务器」来启动后端项目（确保第一步已经实现，否则端口冲突）\n\n\n# 前端配置\n\n在 eclipse 启动的项目是后端项目，我们可以通过 8088 端口访问页面，但是也有前端，端口为 3006，当我们访问 3006 端口后，自动代理到 8088 端口。\n\n> 为什么不直接访问 8088 端口呢，偏偏访问 3006 端口，然后代理到 8088 端口？\n> \n> 前端是给客户使用，不可能给他们直接使用后端。\n\n代理配置\n\n进入 hotwebs 项目，打开 config.json 文件，替换如下内容：\n\n{\n\t"buildentrypath": [\n\t\t"./src/*/*/*/*/index.js"\n\t],\n\t"proxy":"http://127.0.0.1:8088",\n\t"buildwithouthtml": [ "uapbd/refer", "uap/refer" ],\n\t"devport": 3006\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n解决 404 问题：打开 config/webpack.dev.config.js 文件，在 56 行添加如下代码：\n\n\'/nccloud/resources/emm\': {\n    target: \'http://localhost:3006\', pathrewrite: { \'/nccloud/resources/emm\': \'/emm\' }\n},\n\n\n1\n2\n3\n\n\n如图：\n\n\n\n继续在 79 行代码添加如下代码：\n\nnew openbrowserplugin({ url: `http://${host}:${port}/nccloud` }), // 构建完成打开浏览器插件\n\n\n1\n\n\n如图：\n\n\n\n最后执行命令 yarn run dev 启动前端项目。\n\n\n# 授权\n\n访问前端项目 http://localhost:3006，登录后，找到资产基础设置，点击自己的项目菜单名，进入后进行表的增删改查，如果可以使用，则代表成功。\n\n\n\n\n# 启动方式解释\n\n通过 startup.bat 文件启动的后端是「管理员、服务器」，通过 localhost:8088 端口访问，用于添加元数据、代码定制、菜单权限赋予显示等，不允许进行表的增删改查等。\n\n通过 eclipse 启动的后端是「开发环境」，不建议通过 localhost:8088 端口访问，而是通过前端 localhost:3006 端口进行访问，用于进行表的增删改查，不允许添加元数据、代码定制、菜单权限赋予显示等。\n\n\n# 优化启动方式\n\n上面的两个启动方式比较繁琐，因为每个启动的时间都非常久，那么最好一个启动方式能解决所有问题，即运行 startup.bat 文件后，就能进行任何操作，包括 eclipse 启动的权限，这样进行增删改查就不需要启动 eclipse。\n\n将 home-uat/hotwebs/nccloud/resources 下的 codefactory 文件夹复制到 nccloud 项目的 hotwebs 目录下的 src 中，然后在 home-uat 运行 startup.bat 文件即可。\n\n\n# 无法删除问题\n\n无法删除是因为前端的一些代码有问题，我们需要修改这些代码。\n\n如果生成的是树表页面，则在 hotwebs/模块名/组件名/组件名/index.js 文件，修改 1614 行代码：\n\nif(showmode == showmode_card && editmode != editmode_browse){\n\n\n1\n\n\n如果生成的是树卡页面，则在 hotwebs/模块名/组件名/组件名/index.js 文件，修改 683 行代码：\n\nclickdeliconeve : (node)=>{this.pageeventforward({btncode:actions.delete,selectednode : node});},    // 删除点击 回调\n\n\n1\n',charsets:{cjk:!0},lastUpdated:"2022/04/05, 14:44:34"},{title:"自我 - 介绍",frontmatter:{title:"自我 - 介绍",date:"2021-11-03T01:24:12.000Z",permalink:"/about/me/introduce",titleTag:"原创",sticky:1,categories:["关于 - 自我"],tags:["关于"],readingShow:"top"},regularPath:"/80.%E5%85%B3%E4%BA%8E/03.%E5%85%B3%E4%BA%8E%20-%20%E8%87%AA%E6%88%91/02.%E8%87%AA%E6%88%91%20-%20%E4%BB%8B%E7%BB%8D.html",relativePath:"80.关于/03.关于 - 自我/02.自我 - 介绍.md",key:"v-77495e9b",path:"/about/me/introduce/",headers:[{level:2,title:"网站初衷",slug:"网站初衷",normalizedTitle:"网站初衷",charIndex:42},{level:2,title:"联系我",slug:"联系我",normalizedTitle:"联系我",charIndex:269}],excerpt:'<div class="custom-block note"><p class="custom-block-title">序言</p>\n<p>书写自己，亦是内省自己，重塑根基。</p>\n<div class="custom-block right">\n<p>2021-11-03 @村长</p>\n</div>\n</div>\n',headersStr:"网站初衷 联系我",content:"序言\n\n书写自己，亦是内省自己，重塑根基。\n\n2021-11-03 @村长\n\n\n# 网站初衷\n\n技术如繁星之多，迭代如春笋涌出。而人的脑海无法储存这些大量的知识。所以需要一个平台来整理学习到的知识体系或者记录生活的琐事。\n\n搭建这个网站，不仅为了将学到的东西都记录下来📌，也是为了督促自己学习✊，当然，希望分享自己的知识，来帮助更多的人🦾。\n\n我只是个初学者，本站关于知识体系的文章基本是在书籍或者视频学习的过程中，总结或参考作者写好的讲义文章而来，对于这些文章，我会在文章页进行说明来源。\n\n加油，写出更多💯的文章📄。\n\n\n# 联系我\n\n📫：64867944@qq.com\n\n🐧🐧：64867944\n\nWechat：okk0711",normalizedContent:"序言\n\n书写自己，亦是内省自己，重塑根基。\n\n2021-11-03 @村长\n\n\n# 网站初衷\n\n技术如繁星之多，迭代如春笋涌出。而人的脑海无法储存这些大量的知识。所以需要一个平台来整理学习到的知识体系或者记录生活的琐事。\n\n搭建这个网站，不仅为了将学到的东西都记录下来📌，也是为了督促自己学习✊，当然，希望分享自己的知识，来帮助更多的人🦾。\n\n我只是个初学者，本站关于知识体系的文章基本是在书籍或者视频学习的过程中，总结或参考作者写好的讲义文章而来，对于这些文章，我会在文章页进行说明来源。\n\n加油，写出更多💯的文章📄。\n\n\n# 联系我\n\n📫：64867944@qq.com\n\n🐧🐧：64867944\n\nwechat：okk0711",charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"YonYou - Client端开发",frontmatter:{title:"YonYou - Client端开发",date:"2022-03-03T17:38:24.000Z",permalink:"/yonyou/client-development/",titleTag:"原创",categories:["YonYou"],tags:["YonYou"],readingShow:"top"},regularPath:"/59.%E9%A1%B9%E7%9B%AE%E5%B7%A5%E7%A8%8B/10.yonyou/07.YonYou%20-%20Client%E7%AB%AF%E5%BC%80%E5%8F%91.html",relativePath:"59.项目工程/10.yonyou/07.YonYou - Client端开发.md",key:"v-d6614562",path:"/yonyou/client-development/",headers:[{level:2,title:"UAP创建生成",slug:"uap创建生成",normalizedTitle:"uap创建生成",charIndex:3},{level:2,title:"前端配置",slug:"前端配置",normalizedTitle:"前端配置",charIndex:14},{level:3,title:"功能注册",slug:"功能注册",normalizedTitle:"功能注册",charIndex:24},{level:3,title:"菜单注册",slug:"菜单注册",normalizedTitle:"菜单注册",charIndex:34},{level:3,title:"菜单授权",slug:"菜单授权",normalizedTitle:"菜单授权",charIndex:44},{level:3,title:"单据模板初始化",slug:"单据模板初始化",normalizedTitle:"单据模板初始化",charIndex:54},{level:3,title:"查询模板初始化",slug:"查询模板初始化",normalizedTitle:"查询模板初始化",charIndex:67},{level:3,title:"功能节点默认模板输出",slug:"功能节点默认模板输出",normalizedTitle:"功能节点默认模板输出",charIndex:80},{level:2,title:"后端配置",slug:"后端配置",normalizedTitle:"后端配置",charIndex:94},{level:3,title:"配置文件",slug:"配置文件",normalizedTitle:"配置文件",charIndex:104},{level:3,title:"Client 的 Action 类",slug:"client-的-action-类",normalizedTitle:"client 的 action 类",charIndex:114},{level:3,title:"public 的 Service 接口",slug:"public-的-service-接口",normalizedTitle:"public 的 service 接口",charIndex:137},{level:3,title:"private 的 Service 实现类",slug:"private-的-service-实现类",normalizedTitle:"private 的 service 实现类",charIndex:162},{level:3,title:"注册 Service",slug:"注册-service",normalizedTitle:"注册 service",charIndex:189}],headersStr:"UAP创建生成 前端配置 功能注册 菜单注册 菜单授权 单据模板初始化 查询模板初始化 功能节点默认模板输出 后端配置 配置文件 Client 的 Action 类 public 的 Service 接口 private 的 Service 实现类 注册 Service",content:' * UAP创建生成\n * 前端配置\n   * 功能注册\n   * 菜单注册\n   * 菜单授权\n   * 单据模板初始化\n   * 查询模板初始化\n   * 功能节点默认模板输出\n * 后端配置\n   * 配置文件\n   * Client 的 Action 类\n   * public 的 Service 接口\n   * private 的 Service 实现类\n   * 注册 Service\n\n\n\n\n# UAP创建生成\n\n启动「UAP-STUDIO」，【文件】->【新建】->【其他】->【UAP Project development】->【UAP 业务项目】。创建过程的模板选择 ftpub。\n\n接着继续创建「UAP 业务组件项目」。\n\n\n\n【窗口】->【显示视图】->【其他】，打开 MDP 透视图。\n\n对刚刚创建的 UAP 业务组件项目右键：新建实体组件，接着创建一个「实体」，并右键实体，找到特性，分别选择「组织信息、审计信息、富客户端单据信息」。\n\n\n\n * 左键点击实体，在右边的「访问器类型」选择 AggVO，修改名称、显示名称，主属性选择 id\n   \n   \n\n * 左键点击空白处，在右边的「代码风格」选择自定义样式\n   \n   \n\n * 最后右键「发布元数据」，然后「生成 java 代码」\n\n\n# 前端配置\n\n回到项目，「UAP 中间件服务器」运行，运行成功后，再次在相同的位置「UAP 客户端」运行，来到了前端。\n\n前端流程：\n\n * 功能注册\n * 菜单注册\n * 菜单授权\n * 单据模板初始化\n * 查询模板初始化\n * 默认模板输出\n\n\n\n\n# 功能注册\n\n\n\n\n# 菜单注册\n\n\n\n\n# 菜单授权\n\n【动态建模平台】->【权限管理】->【职责-集团】，进入权限管理。\n\n\n\n首先点击查询，然后确定，就会查出很多的数据，点击末页，找到 yongyou_qq，打开。\n\n\n\n然后把自己的菜单添加到右边。\n\n\n\n\n# 单据模板初始化\n\n搜索发布的实体，添加。\n\n\n\n\n# 查询模板初始化\n\n查询自己的模板编码。\n\n\n\n进入修改界面，添加数据。\n\n\n\n输入模板的信息，并且将数据库的字段拖到右边。\n\n\n\n\n# 功能节点默认模板输出\n\n所属银行和国家地区不需要填写。\n\n\n\n\n# 后端配置\n\n在前面我们已经创建了元数据的 Java 类，有三个：Agg 类、Agg 菜单类、实体类。\n\n先看看后端的目录结构：\n\n\n\n\n# 配置文件\n\n配置文件类似于 Spring 的 xml，配置前端 URL 对应的处理类（Controller），这边是叫 Action。\n\n当前端发送 URL 请求，则会在该文件找到与请求对应的 Action 类。\n\n<?xml version="1.0" encoding="GBK"?>\n\n<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">\n\n<beans>\n\n    \x3c!-- 环境变量 --\x3e\n    <bean id="context" class="nc.vo.uif2.LoginContext"></bean>\n\n    \x3c!-- 模型部分配置*********************************************************** --\x3e\n\n    \x3c!-- 应用服务类，负责进行模型操作的处理 --\x3e\n    <bean id="bmModelModelService" class="nc.ui.ftpub.study.serviceproxy.AceStudyKbtClientServiceProxy"/>\n\n\n    \x3c!-- 对象转换器工厂，由此获取操作对象的特征信息 --\x3e\n    <bean id="BOAdapterFactory" class="nc.vo.bd.meta.GeneralBDObjectAdapterFactory">\n        <property name="mode" value="MD"/>\n    </bean>\n\n\n    \x3c!-- 层次结构构造策略 --\x3e\n\n    \x3c!-- 模型元素 --\x3e\n    \x3c!--========= 模型元素：[PUBAPP平面模型(BillManageModel)实例对象] ==========--\x3e\n    <bean id="bmModel" class="nc.ui.pubapp.uif2app.model.BillManageModel">\n        <property name="context"><ref bean="context"/></property>\n        <property name="businessObjectAdapterFactory"><ref bean="BOAdapterFactory"/></property>\n    </bean>\n\n\n    \x3c!-- 数据模型管理器，主要负责各种方式的模型初始化 --\x3e\n    <bean id="bmModelModelDataManager" class="nc.ui.pubapp.uif2app.query2.model.ModelDataManager">\n        <property name="model"><ref bean="bmModel"/></property>\n        <property name="service"><ref bean="bmModelModelService" /></property>\n    </bean>\n\n\n    \x3c!-- Mediator，模型之间监听关系部分 --\x3e\n\n\n    \x3c!-- 组织面板//newadd --\x3e\n\n    \x3c!-- 卡片界面的工具栏和返回按钮 --\x3e\n\n\n    \x3c!-- 模板容器，负责对模板的统一装载 --\x3e\n    <bean id="templateContainer" class="nc.ui.pubapp.uif2app.view.TemplateContainer"  init-method="load">\n        <property name="context" ref="context"/>\n        <property name="nodeKeies">\n            <list>\n                <value>bt</value>\n            </list>\n        </property>\n    </bean>\n\n\n    \x3c!-- 界面元素 ***********************************************************--\x3e\n    \x3c!--====== 视图元素：[查询区域控件实例对象] ==============--\x3e\n    <bean id="viewa" class="nc.ui.pubapp.uif2app.tangramlayout.UEQueryAreaShell" init-method="initUI">\n        <property name="queryAreaCreator" ref="defaultQueryAction" />\n    </bean>\n\n    \x3c!--====== 视图元素：[PUBAPP列表视图控件(ShowUpableBillListView)实例对象] ==============--\x3e\n    <bean id="billListView" class="nc.ui.pubapp.uif2app.view.ShowUpableBillListView" init-method="initUI">\n        <property name="model"><ref bean="bmModel" /></property>\n        <property name="nodekey" value="bt" />\n        \x3c!-- \t\t<property name="multiSelectionMode" value="1"/> --\x3e\n        \x3c!-- \t\t<property name="multiSelectionEnable" value="true" /> --\x3e\n        <property name="templateContainer" ref="templateContainer"/>\n        <property name="showTotalLine" value="true" />\n    </bean>\n\n    \x3c!--====== 视图元素：[卡片界面工具栏和返回按钮控件实例对象] ==============--\x3e\n    <bean id="viewb" class="nc.ui.pubapp.uif2app.tangramlayout.UECardLayoutToolbarPanel" >\n        <property name="model"><ref bean="bmModel" /></property>\n        <property name="actions">\n            <list>\n                <ref bean="actionsBarSeparator" />\n                <ref bean="firstLineAction" />\n                <ref bean="preLineAction" />\n                <ref bean="nextLineAction" />\n                <ref bean="lastLineAction" />\n                <ref bean="actionsBarSeparator" />\n            </list>\n        </property>\n        <property name="titleAction">\n            <bean id="returnAction" class="nc.ui.pubapp.uif2app.actions.UEReturnAction">\n                <property name="goComponent" ref="billListView" />\n                <property name="saveAction" ref="saveScriptAction" />\n                <property name="model" ref="bmModel" />\n            </bean>\n        </property>\n    </bean>\n    <bean id="actionsBarSeparator" class="nc.ui.pub.beans.ActionsBar$ActionsBarSeparator" />\n\n\n    \x3c!-- 浏览按钮 卡片界面共享信息按钮--\x3e\n    <bean id="firstLineAction" class="nc.ui.uif2.actions.FirstLineAction">\n        <property name="model" ref="bmModel" />\n    </bean>\n    <bean id="nextLineAction" class="nc.ui.uif2.actions.NextLineAction">\n        <property name="model" ref="bmModel" />\n    </bean>\n    <bean id="preLineAction" class="nc.ui.uif2.actions.PreLineAction">\n        <property name="model" ref="bmModel" />\n    </bean>\n    <bean id="lastLineAction" class="nc.ui.uif2.actions.LastLineAction">\n        <property name="model" ref="bmModel" />\n    </bean>\n\n    \x3c!--====== 视图元素：[PUBAPP表单控件(ShowUpableBillForm)实例对象] ==============--\x3e\n    <bean id="billForm" class="nc.ui.pubapp.uif2app.view.ShowUpableBillForm" init-method="initUI">\n        <property name="model"><ref bean="bmModel" /></property>\n        <property name="showOrgPanel" value="false" />\n        <property name="nodekey" value="bt" />\n    </bean>\n\n\n    \x3c!-- 界面布局总装*********************************************************** --\x3e\n    <bean id="container" class="nc.ui.uif2.TangramContainer" init-method="initUI">\n        <property name="tangramLayoutRoot">\n            <bean class="nc.ui.uif2.tangramlayout.node.TBNode">\n                <property name="tabs">\n                    <list>\n                        <bean class="nc.ui.uif2.tangramlayout.node.HSNode">\n                            <property name="left">\n                                <bean class="nc.ui.uif2.tangramlayout.node.CNode">\n                                    <property name="component">\n                                        <ref bean="viewa" />\n                                    </property>\n                                </bean>\n                            </property>\n                            <property name="right">\n                                <bean class="nc.ui.uif2.tangramlayout.node.CNode">\n                                    <property name="component">\n                                        <ref bean="billListView" />\n                                    </property>\n                                </bean>\n                            </property>\n                            <property name="dividerLocation" value="215.0f" />\n                            <property name="name" value="列表" />\n                        </bean>\n                        <bean class="nc.ui.uif2.tangramlayout.node.VSNode">\n                            <property name="up">\n                                <bean class="nc.ui.uif2.tangramlayout.node.CNode">\n                                    <property name="component">\n                                        <ref bean="viewb" />\n                                    </property>\n                                </bean>\n                            </property>\n                            <property name="down">\n                                <bean class="nc.ui.uif2.tangramlayout.node.CNode">\n                                    <property name="component">\n                                        <ref bean="billForm" />\n                                    </property>\n                                </bean>\n                            </property>\n                            <property name="dividerLocation" value="43.0f" />\n                            <property name="name" value="卡片" />\n                        </bean>\n                    </list>\n                </property>\n                <property name="name" value="cardLayout" />\n                <property name="showMode" value="CardLayout" />\n            </bean>\n\n        </property>\n        <property name="actions">\n            <list>\n                <ref bean="addAction" />\n                <ref bean="editAction" />\n                <ref bean="deleteScriptAction" />\n                <ref bean="defaultQueryAction" />\n                <ref bean="separatorAction" />\n                <ref bean="defaultRefreshAction" />\n                <ref bean="separatorAction" />\n                \x3c!-- \t\t\t\t<ref bean="defAction"/> --\x3e\n\n            </list>\n        </property>\n\n        <property name="editActions">\n            <list>\n                <ref bean="saveScriptAction" />\n                <ref bean="cancelAction" />\n\n            </list>\n        </property>\n\n        <property name="model">\n            <ref bean="bmModel" />\n        </property>\t\t\n        \x3c!--\n  <property name="model">\n   <ref bean="$vmObject.topActionDependModel"/>\n  </property>\n  --\x3e\n    </bean>\n\n    \x3c!-- 打开节点监听 newadd--\x3e\n    <bean id="InitDataListener" class="nc.ui.pubapp.uif2app.model.DefaultFuncNodeInitDataListener">\n        <property name="model" ref="bmModel"/>\n        <property name="context" ref="context"></property>\n        <property name="voClassName" value="nc.vo.nccclient.study_client.AggStudyDemo"/>\n    </bean>\n\n\n\n    \x3c!-- ClosingListener 编辑态关闭节点时提示是否保存//newadd***************************************************--\x3e\n    \x3c!-- 节点关闭前校验 --\x3e\n    <bean id="ClosingListener" class="nc.ui.pubapp.common.validateservice.ClosingCheck" >\n        <property name="model" ref="bmModel" />\n        <property name="saveAction" ref="saveScriptAction" />\n    </bean>\n\n\n    \x3c!-- 事件监听newadd --\x3e\n    <bean id="bmModelEventMediator" class="nc.ui.pubapp.uif2app.model.AppEventHandlerMediator">\n        <property name="model" ref="bmModel" />\n        <property name="handlerGroup">\n            <list>\n                \x3c!-- nc.ui.pubapp.uif2app.event.OrgChangedEvent --\x3e\n                \x3c!-- \t\t\t\t<bean class="nc.ui.pubapp.uif2app.event.EventHandlerGroup"> --\x3e\n                \x3c!-- \t\t\t\t\t<property name="event" value="nc.ui.pubapp.uif2app.event.OrgChangedEvent" /> --\x3e\n                \x3c!-- \t\t\t\t\t<property name="handler"> --\x3e\n                \x3c!-- \t\t\t\t\t\t<bean class="nc.ui.ftpub.study.handler.AceOrgChangeHandler" > --\x3e\n                \x3c!-- \t\t\t\t\t\t\t<property name="billForm" ref="billForm" /> --\x3e\n                \x3c!-- \t\t\t\t\t\t</bean> --\x3e\n                \x3c!-- \t\t\t\t\t</property> --\x3e\n                \x3c!-- \t\t\t\t</bean> --\x3e\n                \x3c!-- nc.ui.pubapp.uif2app.event.billform.AddEvent --\x3e\n                \x3c!-- \t\t\t\t<bean class="nc.ui.pubapp.uif2app.event.EventHandlerGroup"> --\x3e\n                \x3c!-- \t\t\t\t\t<property name="event" value="nc.ui.pubapp.uif2app.event.billform.AddEvent" /> --\x3e\n                \x3c!-- \t\t\t\t\t<property name="handler"> --\x3e\n                \x3c!-- \t\t\t\t\t\t<bean class="nc.ui.ftpub.study.handler.AceAddHandler" /> --\x3e\n                \x3c!-- \t\t\t\t\t</property> --\x3e\n                \x3c!-- \t\t\t\t</bean> --\x3e\n\n            </list>\n        </property>\n    </bean>\n\n    \x3c!--懒加载信息配置*******************************************************--\x3e\n\n\n    \x3c!-- 行号自动处理 --\x3e\n    \x3c!-- \t<bean id="rowNoMediator" class="nc.ui.pubapp.uif2app.view.RowNoMediator"> --\x3e\n    \x3c!-- \t\t<property name="model" ref="bmModel" /> --\x3e\n    \x3c!-- \t\t<property name="editor" ref="billForm" /> --\x3e\n    \x3c!-- \t</bean> --\x3e\n    \x3c!-- 双击列表行后显示卡片 --\x3e\n    <bean id="mouseClickShowPanelMediator" class="nc.ui.pubapp.uif2app.view.MouseClickShowPanelMediator">\n        <property name="listView" ref="billListView" />\n        <property name="showUpComponent" ref="billForm" />\n        <property name="hyperLinkColumn" value="billno" />\n    </bean>\n    \x3c!-- 单据号 --\x3e\n    \x3c!-- \t<bean id="billCodeMediator" class="nc.ui.pubapp.bill.BillCodeMediator" init-method="initUI"> --\x3e\n    \x3c!-- \t\t<property name="billForm" ref="billForm"></property> --\x3e\n    \x3c!-- \t\t<property name="billCodeKey" value="billno"></property> --\x3e\n    \x3c!-- \t\t<property name="billType" value="HQSA"></property> --\x3e\n    \x3c!-- \t</bean> --\x3e\n\n\n\n    \x3c!-- Action部分 ***********************************************************--\x3e\n    \x3c!--======= 动作：[newActions] [新增] ===========--\x3e\n    <bean id="addAction" class="nc.ui.pubapp.uif2app.actions.AddAction">\n        <property name="model"><ref bean="bmModel"/></property>\n        <property name="interceptor">\n            <bean class="nc.ui.pubapp.uif2app.actions.interceptor.CompositeActionInterceptor">\n                <property name="interceptors">\n                    <list>\n                        <bean class="nc.ui.pubapp.uif2app.actions.interceptor.ShowUpComponentInterceptor">\n                            <property name="showUpComponent" ref="billForm" />\n                        </bean>\n                        \x3c!--此处可以扩展添加自己的拦截器--\x3e\n                    </list>\n                </property>\n            </bean>\n        </property>\n        <property name="exceptionHandler"><ref bean="exceptionHandler" /></property>\n    </bean>\n\n    <bean id="cardRefreshAction" class="nc.ui.pubapp.uif2app.actions.RefreshSingleAction">\n        <property name="model" ref="bmModel" />\n    </bean>\n\n    \x3c!--======= 动作：[newActions] [修改] ===========--\x3e\n    <bean id="editAction" class="nc.ui.pubapp.uif2app.actions.EditAction">\n        <property name="model"><ref bean="bmModel"/></property>\n        <property name="interceptor">\n            <bean class="nc.ui.pubapp.uif2app.actions.interceptor.CompositeActionInterceptor">\n                <property name="interceptors">\n                    <list>\n                        <bean class="nc.ui.pubapp.uif2app.actions.interceptor.ShowUpComponentInterceptor">\n                            <property name="showUpComponent" ref="billForm" />\n                        </bean>\n                        \x3c!--此处可以扩展添加自己的拦截器--\x3e\n                    </list>\n                </property>\n            </bean>\n        </property>\n        <property name="exceptionHandler"><ref bean="exceptionHandler" /></property>\n    </bean>\n\n    \x3c!--======= 动作：[newActions] [删除] ===========--\x3e\n    <bean id="deleteScriptAction" class="nc.ui.pubapp.uif2app.actions.pflow.DeleteScriptAction">\n        <property name="model"><ref bean="bmModel"/></property>\n        <property name="billType" value="HQSA" />\n        <property name="filledUpInFlow" value="true" />\n        <property name="actionName" value="DELETE" />\n        <property name="exceptionHandler"><ref bean="exceptionHandler" /></property>\n    </bean>\n\n    \x3c!-- \t<bean id="deleteScriptAction" class="nc.ui.pubapp.uif2app.actions.DeleteAction"> --\x3e\n    \x3c!-- \t\t<property name="model"><ref bean="bmModel"/></property> --\x3e\n    \x3c!-- \t\t<property name="exceptionHandler"><ref bean="exceptionHandler" /></property> --\x3e\n    \x3c!-- \t</bean> --\x3e\n\n    <bean id="defaultQueryActionQueryTemplateContainer" class="nc.ui.uif2.editor.QueryTemplateContainer">\n        <property name="nodeKey" value="qt" />\n        <property name="context"><ref bean="context"/></property>\n    </bean>\n\n    \x3c!--======= 动作：[newActions] [查询] ===========--\x3e\n    <bean id="defaultQueryAction" class="nc.ui.pubapp.uif2app.query2.action.DefaultQueryAction">\n        <property name="model"><ref bean="bmModel"/></property>\n        <property name="templateContainer"><ref bean="defaultQueryActionQueryTemplateContainer" /></property>\n        <property name="nodeKey" value="qt"></property>\n        <property name="dataManager"><ref bean="bmModelModelDataManager"/></property>\n        \x3c!-- \t\t<property name="qryCondDLGInitializer"><ref bean="qryCondDLGInitializer"/></property> --\x3e\n        <property name="exceptionHandler"><ref bean="exceptionHandler" /></property>\n        <property name="btnName" value="查询" />\n    </bean>\n\n    \x3c!-- \t<bean id="qryCondDLGInitializer" class="nc.ui.ftm_ftax.fta_agricloan_info.ace.query.QueryDLGInitializer"/> --\x3e\n\n    \x3c!--======= 动作：[newActions] [刷新] ===========--\x3e\n    <bean id="defaultRefreshAction" class="nc.ui.pubapp.uif2app.query2.action.DefaultRefreshAction">\n        <property name="model"><ref bean="bmModel"/></property>\n        <property name="dataManager"><ref bean="bmModelModelDataManager"/></property>\n        <property name="exceptionHandler"><ref bean="exceptionHandler" /></property>\n    </bean>\n\n    \x3c!--======= 动作：[newActions] [提交按钮组] ===========--\x3e\n    <bean id="commitScriptGroup" class="nc.funcnode.ui.action.GroupAction">\n        <property name="code" value="commitScriptGroup" />\n        <property name="name" value="提交" />\n        <property name="actions">\n            <list>\n                <ref bean="commitScriptAction" />\n                <ref bean="unCommitScriptAction" /> \n            </list>\n        </property>\n    </bean>\n\n    \x3c!--======= 动作：[newActions] [提交] ===========--\x3e\n    <bean id="commitScriptAction" class="nc.ui.pubapp.uif2app.actions.pflow.CommitScriptAction">\n        <property name="model"><ref bean="bmModel"/></property>\n        <property name="editor"><ref bean="billForm"/></property>\n        <property name="billType" value="HQSA" />\n        <property name="filledUpInFlow" value="true" />\n        <property name="actionName" value="SAVE" />\n        <property name="exceptionHandler"><ref bean="exceptionHandler" /></property>\n    </bean>\n\n    \x3c!--======= 动作：[newActions] [收回] ===========--\x3e\n    <bean id="unCommitScriptAction" class="nc.ui.pubapp.uif2app.actions.pflow.UnCommitScriptAction">\n        <property name="model"><ref bean="bmModel"/></property>\n        <property name="editor"><ref bean="billForm"/></property>\n        <property name="billType" value="HQSA" />\n        <property name="filledUpInFlow" value="true" />\n        <property name="actionName" value="UNSAVEBILL" />\n        <property name="exceptionHandler"><ref bean="exceptionHandler" /></property>\n    </bean>\n\n    \x3c!--======= 动作：[newActions] [审核按钮组] ===========--\x3e\n    <bean id="approveScriptGroup" class="nc.funcnode.ui.action.GroupAction">\n        <property name="code" value="approveScriptGroup" />\n        <property name="name" value="审核" />\n        <property name="actions">\n            <list>\n                <ref bean="approveScriptAction" />\n                <ref bean="uNApproveScriptAction" /> \n            </list>\n        </property>\n    </bean>\n\n    \x3c!--======= 动作：[newActions] [审批] ===========--\x3e\n    <bean id="approveScriptAction" class="nc.ui.pubapp.uif2app.actions.pflow.ApproveScriptAction">\n        <property name="model"><ref bean="bmModel"/></property>\n        <property name="editor"><ref bean="billForm"/></property>\n        <property name="billType" value="HQSA" />\n        <property name="filledUpInFlow" value="true" />\n        <property name="actionName" value="APPROVE" />\n        <property name="exceptionHandler"><ref bean="exceptionHandler" /></property>\n    </bean>\n\n    \x3c!--======= 动作：[newActions] [取消审批] ===========--\x3e\n    <bean id="uNApproveScriptAction" class="nc.ui.pubapp.uif2app.actions.pflow.UNApproveScriptAction">\n        <property name="model"><ref bean="bmModel"/></property>\n        <property name="editor"><ref bean="billForm"/></property>\n        <property name="billType" value="HQSA" />\n        <property name="filledUpInFlow" value="true" />\n        <property name="actionName" value="UNAPPROVE" />\n        <property name="exceptionHandler"><ref bean="exceptionHandler" /></property>\n    </bean>\n\n    \x3c!--======= 动作：[newActions] [预览] ===========--\x3e\n    <bean id="metaDataBasedPrintAction" class="nc.ui.pubapp.uif2app.actions.MetaDataBasedPrintAction">\n        <property name="model"><ref bean="bmModel"/></property>\n        <property name="actioncode" value="Preview"></property>\n        <property name="actionname" value="预览"></property>\n        <property name="preview" value="true"></property>\n        <property name="nodeKey" value="ot" />\n        <property name="exceptionHandler"><ref bean="exceptionHandler" /></property>\n        <property name="btnName" value="预览" />\n    </bean>\n\n    \x3c!--======= 动作：[newActions] [打印] ===========--\x3e\n    <bean id="metaDataBasedPrintActiona" class="nc.ui.pubapp.uif2app.actions.MetaDataBasedPrintAction">\n        <property name="model"><ref bean="bmModel"/></property>\n        <property name="actioncode" value="Print"></property>\n        <property name="actionname" value="打印"></property>\n        <property name="preview" value="false"></property>\n        <property name="nodeKey" value="ot" />\n        <property name="exceptionHandler"><ref bean="exceptionHandler" /></property>\n        <property name="btnName" value="打印" />\n    </bean>\n\n    \x3c!--======= 动作：[newActions] [输出...] ===========--\x3e\n    <bean id="outputAction" class="nc.ui.pubapp.uif2app.actions.OutputAction">\n        <property name="model"><ref bean="bmModel"/></property>\n        <property name="editor"><ref bean="billForm"/></property>\n        <property name="nodeKey" value="ot" />\n        <property name="exceptionHandler"><ref bean="exceptionHandler" /></property>\n    </bean>\n\n    \x3c!--======= 动作：[newActions] [查看审批意见] ===========--\x3e\n    <bean id="pFApproveStatusInfoAction" class="nc.ui.pubapp.uif2app.actions.pflow.PFApproveStatusInfoAction">\n        <property name="model"><ref bean="bmModel"/></property>\n        <property name="billType" value="HQSA" />\n        <property name="exceptionHandler"><ref bean="exceptionHandler" /></property>\n    </bean>\n\n    \x3c!--======= 动作：[newActions] [保存] ===========--\x3e\n    \x3c!-- \t<bean id="saveScriptAction" class="nc.ui.pubapp.uif2app.actions.pflow.SaveScriptAction"> --\x3e\n    \x3c!-- \t\t<property name="model"><ref bean="bmModel"/></property> --\x3e\n    \x3c!-- \t\t<property name="editor"><ref bean="billForm"/></property> --\x3e\n    \x3c!-- \t\t<property name="billType" value="HQSA" /> --\x3e\n    \x3c!-- \t\t<property name="filledUpInFlow" value="true" /> --\x3e\n    \x3c!-- \t\t<property name="actionName" value="SAVEBASE" /> --\x3e\n    \x3c!-- \t\t<property name="validationService" ref="saveValidateService" /> --\x3e\n    \x3c!-- \t\t<property name="exceptionHandler"><ref bean="exceptionHandler" /></property> --\x3e\n    \x3c!-- \t</bean> --\x3e\n\n    <bean id="saveScriptAction" class="nc.ui.ftpub.study.action.AceSaveAction">\n        \x3c!-- \t<bean id="saveScriptAction" class="nc.ui.pubapp.uif2app.actions.SaveAction"> --\x3e\n        <property name="model"><ref bean="bmModel"/></property>\n        <property name="editor"><ref bean="billForm"/></property>\n        \x3c!-- \t\t<property name="validationService" ref="saveValidateService" /> --\x3e\n        <property name="exceptionHandler"><ref bean="exceptionHandler" /></property>\n    </bean>\n\n\n    \x3c!--======= 动作：[newActions] [取消] ===========--\x3e\n    <bean id="cancelAction" class="nc.ui.pubapp.uif2app.actions.CancelAction">\n        <property name="model"><ref bean="bmModel"/></property>\n        <property name="editor"><ref bean="billForm"/></property>\n        <property name="exceptionHandler"><ref bean="exceptionHandler" /></property>\n    </bean>\n\n\n    \x3c!--======= 动作：[newActions] [测试按钮] ===========--\x3e\n    <bean id="defAction" class="nc.ui.ftpub.study.action.DefAction">\n        <property name="model"><ref bean="bmModel"/></property>\n        <property name="exceptionHandler"><ref bean="exceptionHandler" /></property>\n    </bean>\n    \x3c!--分隔按钮--\x3e\n    <bean id="separatorAction" class="nc.funcnode.ui.action.SeparatorAction" />\n\n    <bean id="exceptionHandler" class="nc.ui.uif2.DefaultExceptionHanler">\n        <constructor-arg><ref bean="container"/></constructor-arg>\n        <property name="context"><ref bean="context" /></property>\n    </bean>\n\n    \x3c!-- 批量保存校验服务类 --\x3e\n    \x3c!--保存校验 --\x3e\n    \x3c!--     <bean id="saveValidateService" class="nc.ui.pubapp.uif2app.validation.CompositeValidation"> --\x3e\n    \x3c!--         <property name="validators"> --\x3e\n    \x3c!-- \t        <list> --\x3e\n    \x3c!-- \t             <bean class="nc.ui.ftpub.study.validate.SaveRuleValidation"> --\x3e\n    \x3c!-- \t             </bean> --\x3e\n    \x3c!-- \t        </list> --\x3e\n    \x3c!--         </property> --\x3e\n    \x3c!--     </bean> --\x3e\n</beans>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n\n\n\n# Client 的 Action 类\n\nAction 类类似于 Spring 的 Controller，专门处理前端发送的请求，并分配到 Service 类。Action 位于 Client 模块下。\n\n这里只是写了保存的 Action 类，实际还有其他的 Action 类，如增删改。\n\nimport java.awt.event.ActionEvent;\n\nimport nc.bs.framework.common.NCLocator;\nimport nc.ui.pubapp.uif2app.actions.SaveAction;\nimport nc.ui.uif2.UIState;\nimport nc.ui.uif2.model.HierachicalDataAppModel;\nimport nc.vo.ftpub.studydemokbt.AggStudyEntitykbt;\nimport nc.vo.ftpub.studydemokbt.itf.IStudyKbtClientService;\n\n\npublic class AceSaveAction extends SaveAction {\n\t \n\tpublic AceSaveAction() {\n\t\tsuper();\n\t} \n\t\n\tpublic void doAction(ActionEvent e) throws Exception {\n\t\t\n\t\tObject value = getEditor().getValue();\n\t\t\n\t\tvalidate(value); \n\t\t\n\t\tif(getModel().getUiState()==UIState.ADD){\n\t\t\tdoAddSave(value);\n\t\t}else if(getModel().getUiState()==UIState.EDIT){\n\t\t\tdoEditSave(value); \n\t\t} \n\t\t\n\t\tshowSuccessInfo();\n\t}\n\n\n\tprotected void doEditSave(Object value) throws Exception {\n//\t\tgetModel().update(value);\n\t\tIStudyKbtClientService service = NCLocator.getInstance().lookup(IStudyKbtClientService.class);\n\t\tservice.update(new AggStudyEntitykbt[]{(AggStudyEntitykbt) value}, null);\n\t\tgetModel().setUiState(UIState.NOT_EDIT);\n\t\tgetModel().setOtherUiState(UIState.NOT_EDIT);\n\t}\n\n\n\tprotected void doAddSave(Object value) throws Exception {\n//\t\tObject returnObj = getModel().add(value);\n\t\tIStudyKbtClientService service = NCLocator.getInstance().lookup(IStudyKbtClientService.class);\n\t\tAggStudyEntitykbt[] returnObjArr = service.insert(new AggStudyEntitykbt[]{(AggStudyEntitykbt) value}, null);\n\t\tgetModel().setUiState(UIState.NOT_EDIT);\n\t\tgetModel().setOtherUiState(UIState.NOT_EDIT);\n\t\tif(getModel() instanceof HierachicalDataAppModel)\n\t\t\t((HierachicalDataAppModel)getModel()).setSelectedData(returnObjArr[0]);\n\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n\n\n查询的 Action\n\npackage nc.ui.ftpub.study.serviceproxy;\n\nimport nc.bs.framework.common.NCLocator;\nimport nc.ui.pubapp.uif2app.query2.model.IQueryService;\nimport nc.ui.querytemplate.querytree.IQueryScheme;\nimport nc.vo.ftpub.studydemokbt.itf.IStudyKbtClientService;\n\npublic class AceStudyKbtClientServiceProxy implements IQueryService {\n\n\t@Override\n\tpublic Object[] queryByQueryScheme(IQueryScheme queryScheme) throws Exception {\n\t\tIStudyKbtClientService service = NCLocator.getInstance().lookup(IStudyKbtClientService.class);\n\t\treturn service.query(queryScheme);\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# public 的 Service 接口\n\nService 接口位于 public模块下。\n\npublic interface IStudyKbtClientService {\n\t// 删除\n    public void delete(AggStudyEntitykbt[] clientFullVOs, AggStudyEntitykbt[] originBills) throws BusinessException;\n\t// 添加\n    public AggStudyEntitykbt[] insert(AggStudyEntitykbt[] clientFullVOs, AggStudyEntitykbt[] originBills) throws BusinessException;\n\t// 修改\n    public AggStudyEntitykbt[] update(AggStudyEntitykbt[] clientFullVOs, AggStudyEntitykbt[] originBills) throws BusinessException;\n\t// 查询\n    public AggStudyEntitykbt[] query(IQueryScheme queryScheme) throws BusinessException;\t\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# private 的 Service 实现类\n\n因为 Service 实现类与数据库交互所以放在 private 模块下，提高安全性。\n\npublic class StudyKbtClientImpl extends AceStudyKbtClientImpl implements IStudyKbtClientService {\n\t@Override\n\tpublic void delete(AggStudyEntitykbt[] clientFullVOs,\n\t\t\tAggStudyEntitykbt[] originBills) throws BusinessException {\n\t\tsuper.pubdeleteBills(clientFullVOs, originBills);\n\t}\n\n\t@Override\n\tpublic AggStudyEntitykbt[] insert(AggStudyEntitykbt[] clientFullVOs,\n\t\t\tAggStudyEntitykbt[] originBills) throws BusinessException {\n\t\treturn super.pubinsertBills(clientFullVOs, originBills);\n\t}\n\n\t@Override\n\tpublic AggStudyEntitykbt[] update(AggStudyEntitykbt[] clientFullVOs,\n\t\t\tAggStudyEntitykbt[] originBills) throws BusinessException {\n\t\treturn super.pubupdateBills(clientFullVOs, originBills);\n\t}\n\n\t@Override\n\tpublic AggStudyEntitykbt[] query(IQueryScheme queryScheme)\n\t\t\tthrows BusinessException {\n\t\treturn super.pubquerybills(queryScheme);\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n下面是实际的处理实现类，上面的流程最终都汇集在这个类。\n\npublic class AceStudyKbtClientImpl {\n\n\n\t// 新增\n\tpublic AggStudyEntitykbt[] pubinsertBills(AggStudyEntitykbt[] clientFullVOs,\n\t\t\tAggStudyEntitykbt[] originBills) throws BusinessException {\n\t\t//try {\n\t\t\t// 数据库中数据和前台传递过来的差异VO合并后的结果\n\t\t\t//BillTransferTool<AggStudyEntitykbt> transferTool = new BillTransferTool<AggStudyEntitykbt>(clientFullVOs);\n\t\t\t// 调用BP\n\t\t\t//AceStudyClientInsertBP action = new AceStudyClientInsertBP();\n\t\t\t//AggStudyEntitykbt[] retvos = action.insert(clientFullVOs);\n\t\t\t// 构造返回数据\n\t\t\t//return transferTool.getBillForToClient(retvos);\n\t\t//} catch (Exception e) {\n\t\t\t//ExceptionUtils.marsh(e);\n\t\t//}\n\t\t\n\t\tBaseDAO dao = new BaseDAO();\n\t\tString code = clientFullVOs[0].getParentVO().getCode();\n\t\tString name = clientFullVOs[0].getParentVO().getName();\n\t\tdouble id = Math.random() * 10;\n\t\tStringBuffer sql = new StringBuffer();\n\t\tSQLParameter sqlParamter = new SQLParameter();\n\t\t\n\t\tsql.append("INSERT INTO bd_tang_lsp(PK_BD_TANG_LSP,CODE,NAME) VALUES (?,?,?)");\n\t\tsqlParamter.addParam(id);\n\t\tsqlParamter.addParam(code);\n\t\tsqlParamter.addParam(name);\n\t\t\n\t\tdao.executeUpdate(sql.toString(), sqlParamter);\n\t\treturn null;\n\t}\n\n\t// 删除\n\tpublic void pubdeleteBills(AggStudyEntitykbt[] clientFullVOs,\n\t\t\tAggStudyEntitykbt[] originBills) throws BusinessException {\n\t\t//try {\n\t\t\t// 调用BP\n\t\t\t//new AceFta_agricloan_infoDeleteBP().delete(clientFullVOs);\n\t\t//} catch (Exception e) {\n\t\t\t//ExceptionUtils.marsh(e);\n\t\t//}\n\t\tBaseDAO dao = new BaseDAO();\n\t\tString code = clientFullVOs[0].getParentVO().getCode();\n\t\tString name = clientFullVOs[0].getParentVO().getName();\n\t\tdouble id = Math.random() * 10;\n\t\tStringBuffer sql = new StringBuffer();\n\t\tSQLParameter sqlParamter = new SQLParameter();\n\t\t\n\t\tsql.append("DELETE bd_tang_lsp WHERE PK_BD_TANG_LSP = \'?\'");\n\t\tsqlParamter.addParam(id);\n\t\t\n\t\t//dao.executeUpdate(sql.toString(), sqlParamter);\n\t}\n\n\t// 修改\n\tpublic AggStudyEntitykbt[] pubupdateBills(AggStudyEntitykbt[] clientFullVOs,\n\t\t\tAggStudyEntitykbt[] originBills) throws BusinessException {\n\t\t//try {\n\t\t\t// 加锁 + 检查ts\n\t\t\t//BillTransferTool<AggStudyEntitykbt> transferTool = new BillTransferTool<AggStudyEntitykbt>(clientFullVOs);\n\t\t\t//AceFta_agricloan_infoUpdateBP bp = new AceFta_agricloan_infoUpdateBP();\n\t\t\t//AggStudyEntitykbt[] retvos = bp.update(clientFullVOs, originBills);\n\t\t\t// 构造返回数据\n\t\t\t//return transferTool.getBillForToClient(retvos);\n\t\t//} catch (Exception e) {\n\t\t\t//ExceptionUtils.marsh(e);\n\t\t//}\n\t\t\n\t\tBaseDAO dao = new BaseDAO();\n\t\tString code = clientFullVOs[0].getParentVO().getCode();\n\t\tString name = clientFullVOs[0].getParentVO().getName();\n\t\tdouble id = Math.random() * 10000;\n\t\tStringBuffer sql = new StringBuffer();\n\t\tSQLParameter sqlParamter = new SQLParameter();\n\t\t\n\t\tsql.append("UPDATE bd_tang_lsp SET CODE = ? WHERE PK_BD_TANG_LSP = \'1001ZZ10000000018QCW\'");\n\t\t\n\t\tsqlParamter.addParam(code);\n\t\tdao.executeUpdate(sql.toString(), sqlParamter);\n\t\treturn null;\n\t}\n\n\tpublic AggStudyEntitykbt[] pubquerybills(IQueryScheme queryScheme)\n\t\t\tthrows BusinessException {\n\t\t//AggStudyEntitykbt[] bills = null;\n\t\t//try {\n\t\t\t//this.preQuery(queryScheme);\n\t\t\t//BillLazyQuery<AggStudyEntitykbt> query = new BillLazyQuery<AggStudyEntitykbt>(AggStudyEntitykbt.class);\n\t\t\t//bills = query.query(queryScheme, null);\n\t\t//} catch (Exception e) {\n\t\t\t//ExceptionUtils.marsh(e);\n\t\t//}\n\t\tBaseDAO dao = new BaseDAO();\n\t\tStringBuffer sql = new StringBuffer();\n\t\tsql.append("select code,name,pk_group,pk_org,pk_org,creator,creationtime id from org_orgs where dr = 0");\n\t\tif(null != queryScheme.getWhereSQLOnly() && queryScheme.getWhereSQLOnly().trim().length() > 0){\n\t\t\tsql.append(" and ");\n\t\t\tsql.append(queryScheme.getWhereSQLOnly());\n\t\t}\n\t\tList<StudyEntitykbt> list = (List<StudyEntitykbt>) dao.executeQuery(sql.toString(), new BeanListProcessor(StudyEntitykbt.class));\n\t\n\t\tAggStudyEntitykbt[] bills = null;\n\t\tif(null != list && list.size() > 0 ){\n\t\t\tbills = new AggStudyEntitykbt[list.size()];\n\t\t\tfor (int index = 0; index < bills.length; index++) {\n\t\t\t\tbills[index] = new AggStudyEntitykbt();\n\t\t\t\tbills[index].setParentVO(list.get(index));\n\t\t\t}\n\t\t}\n\t\treturn bills;\n\t}\n\n\t/**\n\t * 由子类实现，查询之前对queryScheme进行加工，加入自己的逻辑\n\t * \n\t * @param queryScheme\n\t */\n\tprotected void preQuery(IQueryScheme queryScheme) throws BusinessException {\n\t\t\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n\n\n\n# 注册 Service\n\n最后一步还需要注册 Service 的接口和实现类，让系统知道位置，并且配置事务、单例等信息。\n\n在组件的 META-INF 文件下创建一个 upm 文件\n\n<?xml version="1.0" encoding="gb2312"?>\n<module name="emm">\n\t<public>\n\t\t<component priority="0" singleton="true" remote="true" tx="CMT" supportAlias="true">\n\t\t\t<interface>nc.vo.ftpub.studydemokbt.itf.IStudyKbtClientService</interface>\n\t\t\t<implementation>nc.impl.StudyKbtClientImpl</implementation>\n\t\t</component>\n\t</public>\n</module>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n结构如图：\n\n',normalizedContent:' * uap创建生成\n * 前端配置\n   * 功能注册\n   * 菜单注册\n   * 菜单授权\n   * 单据模板初始化\n   * 查询模板初始化\n   * 功能节点默认模板输出\n * 后端配置\n   * 配置文件\n   * client 的 action 类\n   * public 的 service 接口\n   * private 的 service 实现类\n   * 注册 service\n\n\n\n\n# uap创建生成\n\n启动「uap-studio」，【文件】->【新建】->【其他】->【uap project development】->【uap 业务项目】。创建过程的模板选择 ftpub。\n\n接着继续创建「uap 业务组件项目」。\n\n\n\n【窗口】->【显示视图】->【其他】，打开 mdp 透视图。\n\n对刚刚创建的 uap 业务组件项目右键：新建实体组件，接着创建一个「实体」，并右键实体，找到特性，分别选择「组织信息、审计信息、富客户端单据信息」。\n\n\n\n * 左键点击实体，在右边的「访问器类型」选择 aggvo，修改名称、显示名称，主属性选择 id\n   \n   \n\n * 左键点击空白处，在右边的「代码风格」选择自定义样式\n   \n   \n\n * 最后右键「发布元数据」，然后「生成 java 代码」\n\n\n# 前端配置\n\n回到项目，「uap 中间件服务器」运行，运行成功后，再次在相同的位置「uap 客户端」运行，来到了前端。\n\n前端流程：\n\n * 功能注册\n * 菜单注册\n * 菜单授权\n * 单据模板初始化\n * 查询模板初始化\n * 默认模板输出\n\n\n\n\n# 功能注册\n\n\n\n\n# 菜单注册\n\n\n\n\n# 菜单授权\n\n【动态建模平台】->【权限管理】->【职责-集团】，进入权限管理。\n\n\n\n首先点击查询，然后确定，就会查出很多的数据，点击末页，找到 yongyou_qq，打开。\n\n\n\n然后把自己的菜单添加到右边。\n\n\n\n\n# 单据模板初始化\n\n搜索发布的实体，添加。\n\n\n\n\n# 查询模板初始化\n\n查询自己的模板编码。\n\n\n\n进入修改界面，添加数据。\n\n\n\n输入模板的信息，并且将数据库的字段拖到右边。\n\n\n\n\n# 功能节点默认模板输出\n\n所属银行和国家地区不需要填写。\n\n\n\n\n# 后端配置\n\n在前面我们已经创建了元数据的 java 类，有三个：agg 类、agg 菜单类、实体类。\n\n先看看后端的目录结构：\n\n\n\n\n# 配置文件\n\n配置文件类似于 spring 的 xml，配置前端 url 对应的处理类（controller），这边是叫 action。\n\n当前端发送 url 请求，则会在该文件找到与请求对应的 action 类。\n\n<?xml version="1.0" encoding="gbk"?>\n\n<!doctype beans public "-//spring//dtd bean//en" "http://www.springframework.org/dtd/spring-beans.dtd">\n\n<beans>\n\n    \x3c!-- 环境变量 --\x3e\n    <bean id="context" class="nc.vo.uif2.logincontext"></bean>\n\n    \x3c!-- 模型部分配置*********************************************************** --\x3e\n\n    \x3c!-- 应用服务类，负责进行模型操作的处理 --\x3e\n    <bean id="bmmodelmodelservice" class="nc.ui.ftpub.study.serviceproxy.acestudykbtclientserviceproxy"/>\n\n\n    \x3c!-- 对象转换器工厂，由此获取操作对象的特征信息 --\x3e\n    <bean id="boadapterfactory" class="nc.vo.bd.meta.generalbdobjectadapterfactory">\n        <property name="mode" value="md"/>\n    </bean>\n\n\n    \x3c!-- 层次结构构造策略 --\x3e\n\n    \x3c!-- 模型元素 --\x3e\n    \x3c!--========= 模型元素：[pubapp平面模型(billmanagemodel)实例对象] ==========--\x3e\n    <bean id="bmmodel" class="nc.ui.pubapp.uif2app.model.billmanagemodel">\n        <property name="context"><ref bean="context"/></property>\n        <property name="businessobjectadapterfactory"><ref bean="boadapterfactory"/></property>\n    </bean>\n\n\n    \x3c!-- 数据模型管理器，主要负责各种方式的模型初始化 --\x3e\n    <bean id="bmmodelmodeldatamanager" class="nc.ui.pubapp.uif2app.query2.model.modeldatamanager">\n        <property name="model"><ref bean="bmmodel"/></property>\n        <property name="service"><ref bean="bmmodelmodelservice" /></property>\n    </bean>\n\n\n    \x3c!-- mediator，模型之间监听关系部分 --\x3e\n\n\n    \x3c!-- 组织面板//newadd --\x3e\n\n    \x3c!-- 卡片界面的工具栏和返回按钮 --\x3e\n\n\n    \x3c!-- 模板容器，负责对模板的统一装载 --\x3e\n    <bean id="templatecontainer" class="nc.ui.pubapp.uif2app.view.templatecontainer"  init-method="load">\n        <property name="context" ref="context"/>\n        <property name="nodekeies">\n            <list>\n                <value>bt</value>\n            </list>\n        </property>\n    </bean>\n\n\n    \x3c!-- 界面元素 ***********************************************************--\x3e\n    \x3c!--====== 视图元素：[查询区域控件实例对象] ==============--\x3e\n    <bean id="viewa" class="nc.ui.pubapp.uif2app.tangramlayout.uequeryareashell" init-method="initui">\n        <property name="queryareacreator" ref="defaultqueryaction" />\n    </bean>\n\n    \x3c!--====== 视图元素：[pubapp列表视图控件(showupablebilllistview)实例对象] ==============--\x3e\n    <bean id="billlistview" class="nc.ui.pubapp.uif2app.view.showupablebilllistview" init-method="initui">\n        <property name="model"><ref bean="bmmodel" /></property>\n        <property name="nodekey" value="bt" />\n        \x3c!-- \t\t<property name="multiselectionmode" value="1"/> --\x3e\n        \x3c!-- \t\t<property name="multiselectionenable" value="true" /> --\x3e\n        <property name="templatecontainer" ref="templatecontainer"/>\n        <property name="showtotalline" value="true" />\n    </bean>\n\n    \x3c!--====== 视图元素：[卡片界面工具栏和返回按钮控件实例对象] ==============--\x3e\n    <bean id="viewb" class="nc.ui.pubapp.uif2app.tangramlayout.uecardlayouttoolbarpanel" >\n        <property name="model"><ref bean="bmmodel" /></property>\n        <property name="actions">\n            <list>\n                <ref bean="actionsbarseparator" />\n                <ref bean="firstlineaction" />\n                <ref bean="prelineaction" />\n                <ref bean="nextlineaction" />\n                <ref bean="lastlineaction" />\n                <ref bean="actionsbarseparator" />\n            </list>\n        </property>\n        <property name="titleaction">\n            <bean id="returnaction" class="nc.ui.pubapp.uif2app.actions.uereturnaction">\n                <property name="gocomponent" ref="billlistview" />\n                <property name="saveaction" ref="savescriptaction" />\n                <property name="model" ref="bmmodel" />\n            </bean>\n        </property>\n    </bean>\n    <bean id="actionsbarseparator" class="nc.ui.pub.beans.actionsbar$actionsbarseparator" />\n\n\n    \x3c!-- 浏览按钮 卡片界面共享信息按钮--\x3e\n    <bean id="firstlineaction" class="nc.ui.uif2.actions.firstlineaction">\n        <property name="model" ref="bmmodel" />\n    </bean>\n    <bean id="nextlineaction" class="nc.ui.uif2.actions.nextlineaction">\n        <property name="model" ref="bmmodel" />\n    </bean>\n    <bean id="prelineaction" class="nc.ui.uif2.actions.prelineaction">\n        <property name="model" ref="bmmodel" />\n    </bean>\n    <bean id="lastlineaction" class="nc.ui.uif2.actions.lastlineaction">\n        <property name="model" ref="bmmodel" />\n    </bean>\n\n    \x3c!--====== 视图元素：[pubapp表单控件(showupablebillform)实例对象] ==============--\x3e\n    <bean id="billform" class="nc.ui.pubapp.uif2app.view.showupablebillform" init-method="initui">\n        <property name="model"><ref bean="bmmodel" /></property>\n        <property name="showorgpanel" value="false" />\n        <property name="nodekey" value="bt" />\n    </bean>\n\n\n    \x3c!-- 界面布局总装*********************************************************** --\x3e\n    <bean id="container" class="nc.ui.uif2.tangramcontainer" init-method="initui">\n        <property name="tangramlayoutroot">\n            <bean class="nc.ui.uif2.tangramlayout.node.tbnode">\n                <property name="tabs">\n                    <list>\n                        <bean class="nc.ui.uif2.tangramlayout.node.hsnode">\n                            <property name="left">\n                                <bean class="nc.ui.uif2.tangramlayout.node.cnode">\n                                    <property name="component">\n                                        <ref bean="viewa" />\n                                    </property>\n                                </bean>\n                            </property>\n                            <property name="right">\n                                <bean class="nc.ui.uif2.tangramlayout.node.cnode">\n                                    <property name="component">\n                                        <ref bean="billlistview" />\n                                    </property>\n                                </bean>\n                            </property>\n                            <property name="dividerlocation" value="215.0f" />\n                            <property name="name" value="列表" />\n                        </bean>\n                        <bean class="nc.ui.uif2.tangramlayout.node.vsnode">\n                            <property name="up">\n                                <bean class="nc.ui.uif2.tangramlayout.node.cnode">\n                                    <property name="component">\n                                        <ref bean="viewb" />\n                                    </property>\n                                </bean>\n                            </property>\n                            <property name="down">\n                                <bean class="nc.ui.uif2.tangramlayout.node.cnode">\n                                    <property name="component">\n                                        <ref bean="billform" />\n                                    </property>\n                                </bean>\n                            </property>\n                            <property name="dividerlocation" value="43.0f" />\n                            <property name="name" value="卡片" />\n                        </bean>\n                    </list>\n                </property>\n                <property name="name" value="cardlayout" />\n                <property name="showmode" value="cardlayout" />\n            </bean>\n\n        </property>\n        <property name="actions">\n            <list>\n                <ref bean="addaction" />\n                <ref bean="editaction" />\n                <ref bean="deletescriptaction" />\n                <ref bean="defaultqueryaction" />\n                <ref bean="separatoraction" />\n                <ref bean="defaultrefreshaction" />\n                <ref bean="separatoraction" />\n                \x3c!-- \t\t\t\t<ref bean="defaction"/> --\x3e\n\n            </list>\n        </property>\n\n        <property name="editactions">\n            <list>\n                <ref bean="savescriptaction" />\n                <ref bean="cancelaction" />\n\n            </list>\n        </property>\n\n        <property name="model">\n            <ref bean="bmmodel" />\n        </property>\t\t\n        \x3c!--\n  <property name="model">\n   <ref bean="$vmobject.topactiondependmodel"/>\n  </property>\n  --\x3e\n    </bean>\n\n    \x3c!-- 打开节点监听 newadd--\x3e\n    <bean id="initdatalistener" class="nc.ui.pubapp.uif2app.model.defaultfuncnodeinitdatalistener">\n        <property name="model" ref="bmmodel"/>\n        <property name="context" ref="context"></property>\n        <property name="voclassname" value="nc.vo.nccclient.study_client.aggstudydemo"/>\n    </bean>\n\n\n\n    \x3c!-- closinglistener 编辑态关闭节点时提示是否保存//newadd***************************************************--\x3e\n    \x3c!-- 节点关闭前校验 --\x3e\n    <bean id="closinglistener" class="nc.ui.pubapp.common.validateservice.closingcheck" >\n        <property name="model" ref="bmmodel" />\n        <property name="saveaction" ref="savescriptaction" />\n    </bean>\n\n\n    \x3c!-- 事件监听newadd --\x3e\n    <bean id="bmmodeleventmediator" class="nc.ui.pubapp.uif2app.model.appeventhandlermediator">\n        <property name="model" ref="bmmodel" />\n        <property name="handlergroup">\n            <list>\n                \x3c!-- nc.ui.pubapp.uif2app.event.orgchangedevent --\x3e\n                \x3c!-- \t\t\t\t<bean class="nc.ui.pubapp.uif2app.event.eventhandlergroup"> --\x3e\n                \x3c!-- \t\t\t\t\t<property name="event" value="nc.ui.pubapp.uif2app.event.orgchangedevent" /> --\x3e\n                \x3c!-- \t\t\t\t\t<property name="handler"> --\x3e\n                \x3c!-- \t\t\t\t\t\t<bean class="nc.ui.ftpub.study.handler.aceorgchangehandler" > --\x3e\n                \x3c!-- \t\t\t\t\t\t\t<property name="billform" ref="billform" /> --\x3e\n                \x3c!-- \t\t\t\t\t\t</bean> --\x3e\n                \x3c!-- \t\t\t\t\t</property> --\x3e\n                \x3c!-- \t\t\t\t</bean> --\x3e\n                \x3c!-- nc.ui.pubapp.uif2app.event.billform.addevent --\x3e\n                \x3c!-- \t\t\t\t<bean class="nc.ui.pubapp.uif2app.event.eventhandlergroup"> --\x3e\n                \x3c!-- \t\t\t\t\t<property name="event" value="nc.ui.pubapp.uif2app.event.billform.addevent" /> --\x3e\n                \x3c!-- \t\t\t\t\t<property name="handler"> --\x3e\n                \x3c!-- \t\t\t\t\t\t<bean class="nc.ui.ftpub.study.handler.aceaddhandler" /> --\x3e\n                \x3c!-- \t\t\t\t\t</property> --\x3e\n                \x3c!-- \t\t\t\t</bean> --\x3e\n\n            </list>\n        </property>\n    </bean>\n\n    \x3c!--懒加载信息配置*******************************************************--\x3e\n\n\n    \x3c!-- 行号自动处理 --\x3e\n    \x3c!-- \t<bean id="rownomediator" class="nc.ui.pubapp.uif2app.view.rownomediator"> --\x3e\n    \x3c!-- \t\t<property name="model" ref="bmmodel" /> --\x3e\n    \x3c!-- \t\t<property name="editor" ref="billform" /> --\x3e\n    \x3c!-- \t</bean> --\x3e\n    \x3c!-- 双击列表行后显示卡片 --\x3e\n    <bean id="mouseclickshowpanelmediator" class="nc.ui.pubapp.uif2app.view.mouseclickshowpanelmediator">\n        <property name="listview" ref="billlistview" />\n        <property name="showupcomponent" ref="billform" />\n        <property name="hyperlinkcolumn" value="billno" />\n    </bean>\n    \x3c!-- 单据号 --\x3e\n    \x3c!-- \t<bean id="billcodemediator" class="nc.ui.pubapp.bill.billcodemediator" init-method="initui"> --\x3e\n    \x3c!-- \t\t<property name="billform" ref="billform"></property> --\x3e\n    \x3c!-- \t\t<property name="billcodekey" value="billno"></property> --\x3e\n    \x3c!-- \t\t<property name="billtype" value="hqsa"></property> --\x3e\n    \x3c!-- \t</bean> --\x3e\n\n\n\n    \x3c!-- action部分 ***********************************************************--\x3e\n    \x3c!--======= 动作：[newactions] [新增] ===========--\x3e\n    <bean id="addaction" class="nc.ui.pubapp.uif2app.actions.addaction">\n        <property name="model"><ref bean="bmmodel"/></property>\n        <property name="interceptor">\n            <bean class="nc.ui.pubapp.uif2app.actions.interceptor.compositeactioninterceptor">\n                <property name="interceptors">\n                    <list>\n                        <bean class="nc.ui.pubapp.uif2app.actions.interceptor.showupcomponentinterceptor">\n                            <property name="showupcomponent" ref="billform" />\n                        </bean>\n                        \x3c!--此处可以扩展添加自己的拦截器--\x3e\n                    </list>\n                </property>\n            </bean>\n        </property>\n        <property name="exceptionhandler"><ref bean="exceptionhandler" /></property>\n    </bean>\n\n    <bean id="cardrefreshaction" class="nc.ui.pubapp.uif2app.actions.refreshsingleaction">\n        <property name="model" ref="bmmodel" />\n    </bean>\n\n    \x3c!--======= 动作：[newactions] [修改] ===========--\x3e\n    <bean id="editaction" class="nc.ui.pubapp.uif2app.actions.editaction">\n        <property name="model"><ref bean="bmmodel"/></property>\n        <property name="interceptor">\n            <bean class="nc.ui.pubapp.uif2app.actions.interceptor.compositeactioninterceptor">\n                <property name="interceptors">\n                    <list>\n                        <bean class="nc.ui.pubapp.uif2app.actions.interceptor.showupcomponentinterceptor">\n                            <property name="showupcomponent" ref="billform" />\n                        </bean>\n                        \x3c!--此处可以扩展添加自己的拦截器--\x3e\n                    </list>\n                </property>\n            </bean>\n        </property>\n        <property name="exceptionhandler"><ref bean="exceptionhandler" /></property>\n    </bean>\n\n    \x3c!--======= 动作：[newactions] [删除] ===========--\x3e\n    <bean id="deletescriptaction" class="nc.ui.pubapp.uif2app.actions.pflow.deletescriptaction">\n        <property name="model"><ref bean="bmmodel"/></property>\n        <property name="billtype" value="hqsa" />\n        <property name="filledupinflow" value="true" />\n        <property name="actionname" value="delete" />\n        <property name="exceptionhandler"><ref bean="exceptionhandler" /></property>\n    </bean>\n\n    \x3c!-- \t<bean id="deletescriptaction" class="nc.ui.pubapp.uif2app.actions.deleteaction"> --\x3e\n    \x3c!-- \t\t<property name="model"><ref bean="bmmodel"/></property> --\x3e\n    \x3c!-- \t\t<property name="exceptionhandler"><ref bean="exceptionhandler" /></property> --\x3e\n    \x3c!-- \t</bean> --\x3e\n\n    <bean id="defaultqueryactionquerytemplatecontainer" class="nc.ui.uif2.editor.querytemplatecontainer">\n        <property name="nodekey" value="qt" />\n        <property name="context"><ref bean="context"/></property>\n    </bean>\n\n    \x3c!--======= 动作：[newactions] [查询] ===========--\x3e\n    <bean id="defaultqueryaction" class="nc.ui.pubapp.uif2app.query2.action.defaultqueryaction">\n        <property name="model"><ref bean="bmmodel"/></property>\n        <property name="templatecontainer"><ref bean="defaultqueryactionquerytemplatecontainer" /></property>\n        <property name="nodekey" value="qt"></property>\n        <property name="datamanager"><ref bean="bmmodelmodeldatamanager"/></property>\n        \x3c!-- \t\t<property name="qryconddlginitializer"><ref bean="qryconddlginitializer"/></property> --\x3e\n        <property name="exceptionhandler"><ref bean="exceptionhandler" /></property>\n        <property name="btnname" value="查询" />\n    </bean>\n\n    \x3c!-- \t<bean id="qryconddlginitializer" class="nc.ui.ftm_ftax.fta_agricloan_info.ace.query.querydlginitializer"/> --\x3e\n\n    \x3c!--======= 动作：[newactions] [刷新] ===========--\x3e\n    <bean id="defaultrefreshaction" class="nc.ui.pubapp.uif2app.query2.action.defaultrefreshaction">\n        <property name="model"><ref bean="bmmodel"/></property>\n        <property name="datamanager"><ref bean="bmmodelmodeldatamanager"/></property>\n        <property name="exceptionhandler"><ref bean="exceptionhandler" /></property>\n    </bean>\n\n    \x3c!--======= 动作：[newactions] [提交按钮组] ===========--\x3e\n    <bean id="commitscriptgroup" class="nc.funcnode.ui.action.groupaction">\n        <property name="code" value="commitscriptgroup" />\n        <property name="name" value="提交" />\n        <property name="actions">\n            <list>\n                <ref bean="commitscriptaction" />\n                <ref bean="uncommitscriptaction" /> \n            </list>\n        </property>\n    </bean>\n\n    \x3c!--======= 动作：[newactions] [提交] ===========--\x3e\n    <bean id="commitscriptaction" class="nc.ui.pubapp.uif2app.actions.pflow.commitscriptaction">\n        <property name="model"><ref bean="bmmodel"/></property>\n        <property name="editor"><ref bean="billform"/></property>\n        <property name="billtype" value="hqsa" />\n        <property name="filledupinflow" value="true" />\n        <property name="actionname" value="save" />\n        <property name="exceptionhandler"><ref bean="exceptionhandler" /></property>\n    </bean>\n\n    \x3c!--======= 动作：[newactions] [收回] ===========--\x3e\n    <bean id="uncommitscriptaction" class="nc.ui.pubapp.uif2app.actions.pflow.uncommitscriptaction">\n        <property name="model"><ref bean="bmmodel"/></property>\n        <property name="editor"><ref bean="billform"/></property>\n        <property name="billtype" value="hqsa" />\n        <property name="filledupinflow" value="true" />\n        <property name="actionname" value="unsavebill" />\n        <property name="exceptionhandler"><ref bean="exceptionhandler" /></property>\n    </bean>\n\n    \x3c!--======= 动作：[newactions] [审核按钮组] ===========--\x3e\n    <bean id="approvescriptgroup" class="nc.funcnode.ui.action.groupaction">\n        <property name="code" value="approvescriptgroup" />\n        <property name="name" value="审核" />\n        <property name="actions">\n            <list>\n                <ref bean="approvescriptaction" />\n                <ref bean="unapprovescriptaction" /> \n            </list>\n        </property>\n    </bean>\n\n    \x3c!--======= 动作：[newactions] [审批] ===========--\x3e\n    <bean id="approvescriptaction" class="nc.ui.pubapp.uif2app.actions.pflow.approvescriptaction">\n        <property name="model"><ref bean="bmmodel"/></property>\n        <property name="editor"><ref bean="billform"/></property>\n        <property name="billtype" value="hqsa" />\n        <property name="filledupinflow" value="true" />\n        <property name="actionname" value="approve" />\n        <property name="exceptionhandler"><ref bean="exceptionhandler" /></property>\n    </bean>\n\n    \x3c!--======= 动作：[newactions] [取消审批] ===========--\x3e\n    <bean id="unapprovescriptaction" class="nc.ui.pubapp.uif2app.actions.pflow.unapprovescriptaction">\n        <property name="model"><ref bean="bmmodel"/></property>\n        <property name="editor"><ref bean="billform"/></property>\n        <property name="billtype" value="hqsa" />\n        <property name="filledupinflow" value="true" />\n        <property name="actionname" value="unapprove" />\n        <property name="exceptionhandler"><ref bean="exceptionhandler" /></property>\n    </bean>\n\n    \x3c!--======= 动作：[newactions] [预览] ===========--\x3e\n    <bean id="metadatabasedprintaction" class="nc.ui.pubapp.uif2app.actions.metadatabasedprintaction">\n        <property name="model"><ref bean="bmmodel"/></property>\n        <property name="actioncode" value="preview"></property>\n        <property name="actionname" value="预览"></property>\n        <property name="preview" value="true"></property>\n        <property name="nodekey" value="ot" />\n        <property name="exceptionhandler"><ref bean="exceptionhandler" /></property>\n        <property name="btnname" value="预览" />\n    </bean>\n\n    \x3c!--======= 动作：[newactions] [打印] ===========--\x3e\n    <bean id="metadatabasedprintactiona" class="nc.ui.pubapp.uif2app.actions.metadatabasedprintaction">\n        <property name="model"><ref bean="bmmodel"/></property>\n        <property name="actioncode" value="print"></property>\n        <property name="actionname" value="打印"></property>\n        <property name="preview" value="false"></property>\n        <property name="nodekey" value="ot" />\n        <property name="exceptionhandler"><ref bean="exceptionhandler" /></property>\n        <property name="btnname" value="打印" />\n    </bean>\n\n    \x3c!--======= 动作：[newactions] [输出...] ===========--\x3e\n    <bean id="outputaction" class="nc.ui.pubapp.uif2app.actions.outputaction">\n        <property name="model"><ref bean="bmmodel"/></property>\n        <property name="editor"><ref bean="billform"/></property>\n        <property name="nodekey" value="ot" />\n        <property name="exceptionhandler"><ref bean="exceptionhandler" /></property>\n    </bean>\n\n    \x3c!--======= 动作：[newactions] [查看审批意见] ===========--\x3e\n    <bean id="pfapprovestatusinfoaction" class="nc.ui.pubapp.uif2app.actions.pflow.pfapprovestatusinfoaction">\n        <property name="model"><ref bean="bmmodel"/></property>\n        <property name="billtype" value="hqsa" />\n        <property name="exceptionhandler"><ref bean="exceptionhandler" /></property>\n    </bean>\n\n    \x3c!--======= 动作：[newactions] [保存] ===========--\x3e\n    \x3c!-- \t<bean id="savescriptaction" class="nc.ui.pubapp.uif2app.actions.pflow.savescriptaction"> --\x3e\n    \x3c!-- \t\t<property name="model"><ref bean="bmmodel"/></property> --\x3e\n    \x3c!-- \t\t<property name="editor"><ref bean="billform"/></property> --\x3e\n    \x3c!-- \t\t<property name="billtype" value="hqsa" /> --\x3e\n    \x3c!-- \t\t<property name="filledupinflow" value="true" /> --\x3e\n    \x3c!-- \t\t<property name="actionname" value="savebase" /> --\x3e\n    \x3c!-- \t\t<property name="validationservice" ref="savevalidateservice" /> --\x3e\n    \x3c!-- \t\t<property name="exceptionhandler"><ref bean="exceptionhandler" /></property> --\x3e\n    \x3c!-- \t</bean> --\x3e\n\n    <bean id="savescriptaction" class="nc.ui.ftpub.study.action.acesaveaction">\n        \x3c!-- \t<bean id="savescriptaction" class="nc.ui.pubapp.uif2app.actions.saveaction"> --\x3e\n        <property name="model"><ref bean="bmmodel"/></property>\n        <property name="editor"><ref bean="billform"/></property>\n        \x3c!-- \t\t<property name="validationservice" ref="savevalidateservice" /> --\x3e\n        <property name="exceptionhandler"><ref bean="exceptionhandler" /></property>\n    </bean>\n\n\n    \x3c!--======= 动作：[newactions] [取消] ===========--\x3e\n    <bean id="cancelaction" class="nc.ui.pubapp.uif2app.actions.cancelaction">\n        <property name="model"><ref bean="bmmodel"/></property>\n        <property name="editor"><ref bean="billform"/></property>\n        <property name="exceptionhandler"><ref bean="exceptionhandler" /></property>\n    </bean>\n\n\n    \x3c!--======= 动作：[newactions] [测试按钮] ===========--\x3e\n    <bean id="defaction" class="nc.ui.ftpub.study.action.defaction">\n        <property name="model"><ref bean="bmmodel"/></property>\n        <property name="exceptionhandler"><ref bean="exceptionhandler" /></property>\n    </bean>\n    \x3c!--分隔按钮--\x3e\n    <bean id="separatoraction" class="nc.funcnode.ui.action.separatoraction" />\n\n    <bean id="exceptionhandler" class="nc.ui.uif2.defaultexceptionhanler">\n        <constructor-arg><ref bean="container"/></constructor-arg>\n        <property name="context"><ref bean="context" /></property>\n    </bean>\n\n    \x3c!-- 批量保存校验服务类 --\x3e\n    \x3c!--保存校验 --\x3e\n    \x3c!--     <bean id="savevalidateservice" class="nc.ui.pubapp.uif2app.validation.compositevalidation"> --\x3e\n    \x3c!--         <property name="validators"> --\x3e\n    \x3c!-- \t        <list> --\x3e\n    \x3c!-- \t             <bean class="nc.ui.ftpub.study.validate.saverulevalidation"> --\x3e\n    \x3c!-- \t             </bean> --\x3e\n    \x3c!-- \t        </list> --\x3e\n    \x3c!--         </property> --\x3e\n    \x3c!--     </bean> --\x3e\n</beans>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n\n\n\n# client 的 action 类\n\naction 类类似于 spring 的 controller，专门处理前端发送的请求，并分配到 service 类。action 位于 client 模块下。\n\n这里只是写了保存的 action 类，实际还有其他的 action 类，如增删改。\n\nimport java.awt.event.actionevent;\n\nimport nc.bs.framework.common.nclocator;\nimport nc.ui.pubapp.uif2app.actions.saveaction;\nimport nc.ui.uif2.uistate;\nimport nc.ui.uif2.model.hierachicaldataappmodel;\nimport nc.vo.ftpub.studydemokbt.aggstudyentitykbt;\nimport nc.vo.ftpub.studydemokbt.itf.istudykbtclientservice;\n\n\npublic class acesaveaction extends saveaction {\n\t \n\tpublic acesaveaction() {\n\t\tsuper();\n\t} \n\t\n\tpublic void doaction(actionevent e) throws exception {\n\t\t\n\t\tobject value = geteditor().getvalue();\n\t\t\n\t\tvalidate(value); \n\t\t\n\t\tif(getmodel().getuistate()==uistate.add){\n\t\t\tdoaddsave(value);\n\t\t}else if(getmodel().getuistate()==uistate.edit){\n\t\t\tdoeditsave(value); \n\t\t} \n\t\t\n\t\tshowsuccessinfo();\n\t}\n\n\n\tprotected void doeditsave(object value) throws exception {\n//\t\tgetmodel().update(value);\n\t\tistudykbtclientservice service = nclocator.getinstance().lookup(istudykbtclientservice.class);\n\t\tservice.update(new aggstudyentitykbt[]{(aggstudyentitykbt) value}, null);\n\t\tgetmodel().setuistate(uistate.not_edit);\n\t\tgetmodel().setotheruistate(uistate.not_edit);\n\t}\n\n\n\tprotected void doaddsave(object value) throws exception {\n//\t\tobject returnobj = getmodel().add(value);\n\t\tistudykbtclientservice service = nclocator.getinstance().lookup(istudykbtclientservice.class);\n\t\taggstudyentitykbt[] returnobjarr = service.insert(new aggstudyentitykbt[]{(aggstudyentitykbt) value}, null);\n\t\tgetmodel().setuistate(uistate.not_edit);\n\t\tgetmodel().setotheruistate(uistate.not_edit);\n\t\tif(getmodel() instanceof hierachicaldataappmodel)\n\t\t\t((hierachicaldataappmodel)getmodel()).setselecteddata(returnobjarr[0]);\n\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n\n\n查询的 action\n\npackage nc.ui.ftpub.study.serviceproxy;\n\nimport nc.bs.framework.common.nclocator;\nimport nc.ui.pubapp.uif2app.query2.model.iqueryservice;\nimport nc.ui.querytemplate.querytree.iqueryscheme;\nimport nc.vo.ftpub.studydemokbt.itf.istudykbtclientservice;\n\npublic class acestudykbtclientserviceproxy implements iqueryservice {\n\n\t@override\n\tpublic object[] querybyqueryscheme(iqueryscheme queryscheme) throws exception {\n\t\tistudykbtclientservice service = nclocator.getinstance().lookup(istudykbtclientservice.class);\n\t\treturn service.query(queryscheme);\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# public 的 service 接口\n\nservice 接口位于 public模块下。\n\npublic interface istudykbtclientservice {\n\t// 删除\n    public void delete(aggstudyentitykbt[] clientfullvos, aggstudyentitykbt[] originbills) throws businessexception;\n\t// 添加\n    public aggstudyentitykbt[] insert(aggstudyentitykbt[] clientfullvos, aggstudyentitykbt[] originbills) throws businessexception;\n\t// 修改\n    public aggstudyentitykbt[] update(aggstudyentitykbt[] clientfullvos, aggstudyentitykbt[] originbills) throws businessexception;\n\t// 查询\n    public aggstudyentitykbt[] query(iqueryscheme queryscheme) throws businessexception;\t\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# private 的 service 实现类\n\n因为 service 实现类与数据库交互所以放在 private 模块下，提高安全性。\n\npublic class studykbtclientimpl extends acestudykbtclientimpl implements istudykbtclientservice {\n\t@override\n\tpublic void delete(aggstudyentitykbt[] clientfullvos,\n\t\t\taggstudyentitykbt[] originbills) throws businessexception {\n\t\tsuper.pubdeletebills(clientfullvos, originbills);\n\t}\n\n\t@override\n\tpublic aggstudyentitykbt[] insert(aggstudyentitykbt[] clientfullvos,\n\t\t\taggstudyentitykbt[] originbills) throws businessexception {\n\t\treturn super.pubinsertbills(clientfullvos, originbills);\n\t}\n\n\t@override\n\tpublic aggstudyentitykbt[] update(aggstudyentitykbt[] clientfullvos,\n\t\t\taggstudyentitykbt[] originbills) throws businessexception {\n\t\treturn super.pubupdatebills(clientfullvos, originbills);\n\t}\n\n\t@override\n\tpublic aggstudyentitykbt[] query(iqueryscheme queryscheme)\n\t\t\tthrows businessexception {\n\t\treturn super.pubquerybills(queryscheme);\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n下面是实际的处理实现类，上面的流程最终都汇集在这个类。\n\npublic class acestudykbtclientimpl {\n\n\n\t// 新增\n\tpublic aggstudyentitykbt[] pubinsertbills(aggstudyentitykbt[] clientfullvos,\n\t\t\taggstudyentitykbt[] originbills) throws businessexception {\n\t\t//try {\n\t\t\t// 数据库中数据和前台传递过来的差异vo合并后的结果\n\t\t\t//billtransfertool<aggstudyentitykbt> transfertool = new billtransfertool<aggstudyentitykbt>(clientfullvos);\n\t\t\t// 调用bp\n\t\t\t//acestudyclientinsertbp action = new acestudyclientinsertbp();\n\t\t\t//aggstudyentitykbt[] retvos = action.insert(clientfullvos);\n\t\t\t// 构造返回数据\n\t\t\t//return transfertool.getbillfortoclient(retvos);\n\t\t//} catch (exception e) {\n\t\t\t//exceptionutils.marsh(e);\n\t\t//}\n\t\t\n\t\tbasedao dao = new basedao();\n\t\tstring code = clientfullvos[0].getparentvo().getcode();\n\t\tstring name = clientfullvos[0].getparentvo().getname();\n\t\tdouble id = math.random() * 10;\n\t\tstringbuffer sql = new stringbuffer();\n\t\tsqlparameter sqlparamter = new sqlparameter();\n\t\t\n\t\tsql.append("insert into bd_tang_lsp(pk_bd_tang_lsp,code,name) values (?,?,?)");\n\t\tsqlparamter.addparam(id);\n\t\tsqlparamter.addparam(code);\n\t\tsqlparamter.addparam(name);\n\t\t\n\t\tdao.executeupdate(sql.tostring(), sqlparamter);\n\t\treturn null;\n\t}\n\n\t// 删除\n\tpublic void pubdeletebills(aggstudyentitykbt[] clientfullvos,\n\t\t\taggstudyentitykbt[] originbills) throws businessexception {\n\t\t//try {\n\t\t\t// 调用bp\n\t\t\t//new acefta_agricloan_infodeletebp().delete(clientfullvos);\n\t\t//} catch (exception e) {\n\t\t\t//exceptionutils.marsh(e);\n\t\t//}\n\t\tbasedao dao = new basedao();\n\t\tstring code = clientfullvos[0].getparentvo().getcode();\n\t\tstring name = clientfullvos[0].getparentvo().getname();\n\t\tdouble id = math.random() * 10;\n\t\tstringbuffer sql = new stringbuffer();\n\t\tsqlparameter sqlparamter = new sqlparameter();\n\t\t\n\t\tsql.append("delete bd_tang_lsp where pk_bd_tang_lsp = \'?\'");\n\t\tsqlparamter.addparam(id);\n\t\t\n\t\t//dao.executeupdate(sql.tostring(), sqlparamter);\n\t}\n\n\t// 修改\n\tpublic aggstudyentitykbt[] pubupdatebills(aggstudyentitykbt[] clientfullvos,\n\t\t\taggstudyentitykbt[] originbills) throws businessexception {\n\t\t//try {\n\t\t\t// 加锁 + 检查ts\n\t\t\t//billtransfertool<aggstudyentitykbt> transfertool = new billtransfertool<aggstudyentitykbt>(clientfullvos);\n\t\t\t//acefta_agricloan_infoupdatebp bp = new acefta_agricloan_infoupdatebp();\n\t\t\t//aggstudyentitykbt[] retvos = bp.update(clientfullvos, originbills);\n\t\t\t// 构造返回数据\n\t\t\t//return transfertool.getbillfortoclient(retvos);\n\t\t//} catch (exception e) {\n\t\t\t//exceptionutils.marsh(e);\n\t\t//}\n\t\t\n\t\tbasedao dao = new basedao();\n\t\tstring code = clientfullvos[0].getparentvo().getcode();\n\t\tstring name = clientfullvos[0].getparentvo().getname();\n\t\tdouble id = math.random() * 10000;\n\t\tstringbuffer sql = new stringbuffer();\n\t\tsqlparameter sqlparamter = new sqlparameter();\n\t\t\n\t\tsql.append("update bd_tang_lsp set code = ? where pk_bd_tang_lsp = \'1001zz10000000018qcw\'");\n\t\t\n\t\tsqlparamter.addparam(code);\n\t\tdao.executeupdate(sql.tostring(), sqlparamter);\n\t\treturn null;\n\t}\n\n\tpublic aggstudyentitykbt[] pubquerybills(iqueryscheme queryscheme)\n\t\t\tthrows businessexception {\n\t\t//aggstudyentitykbt[] bills = null;\n\t\t//try {\n\t\t\t//this.prequery(queryscheme);\n\t\t\t//billlazyquery<aggstudyentitykbt> query = new billlazyquery<aggstudyentitykbt>(aggstudyentitykbt.class);\n\t\t\t//bills = query.query(queryscheme, null);\n\t\t//} catch (exception e) {\n\t\t\t//exceptionutils.marsh(e);\n\t\t//}\n\t\tbasedao dao = new basedao();\n\t\tstringbuffer sql = new stringbuffer();\n\t\tsql.append("select code,name,pk_group,pk_org,pk_org,creator,creationtime id from org_orgs where dr = 0");\n\t\tif(null != queryscheme.getwheresqlonly() && queryscheme.getwheresqlonly().trim().length() > 0){\n\t\t\tsql.append(" and ");\n\t\t\tsql.append(queryscheme.getwheresqlonly());\n\t\t}\n\t\tlist<studyentitykbt> list = (list<studyentitykbt>) dao.executequery(sql.tostring(), new beanlistprocessor(studyentitykbt.class));\n\t\n\t\taggstudyentitykbt[] bills = null;\n\t\tif(null != list && list.size() > 0 ){\n\t\t\tbills = new aggstudyentitykbt[list.size()];\n\t\t\tfor (int index = 0; index < bills.length; index++) {\n\t\t\t\tbills[index] = new aggstudyentitykbt();\n\t\t\t\tbills[index].setparentvo(list.get(index));\n\t\t\t}\n\t\t}\n\t\treturn bills;\n\t}\n\n\t/**\n\t * 由子类实现，查询之前对queryscheme进行加工，加入自己的逻辑\n\t * \n\t * @param queryscheme\n\t */\n\tprotected void prequery(iqueryscheme queryscheme) throws businessexception {\n\t\t\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n\n\n\n# 注册 service\n\n最后一步还需要注册 service 的接口和实现类，让系统知道位置，并且配置事务、单例等信息。\n\n在组件的 meta-inf 文件下创建一个 upm 文件\n\n<?xml version="1.0" encoding="gb2312"?>\n<module name="emm">\n\t<public>\n\t\t<component priority="0" singleton="true" remote="true" tx="cmt" supportalias="true">\n\t\t\t<interface>nc.vo.ftpub.studydemokbt.itf.istudykbtclientservice</interface>\n\t\t\t<implementation>nc.impl.studykbtclientimpl</implementation>\n\t\t</component>\n\t</public>\n</module>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n结构如图：\n\n',charsets:{cjk:!0},lastUpdated:"2022/04/05, 14:44:34"},{title:"自我 - 清单",frontmatter:{title:"自我 - 清单",date:"2021-11-13T12:31:23.000Z",permalink:"/about/list/",titleTag:"原创",categories:["关于 - 自我"],tags:["关于"],readingShow:"top"},regularPath:"/80.%E5%85%B3%E4%BA%8E/03.%E5%85%B3%E4%BA%8E%20-%20%E8%87%AA%E6%88%91/05.%E8%87%AA%E6%88%91%20-%20%E6%B8%85%E5%8D%95.html",relativePath:"80.关于/03.关于 - 自我/05.自我 - 清单.md",key:"v-77e1fd86",path:"/about/list/",headers:[{level:2,title:"设计模式清单",slug:"设计模式清单",normalizedTitle:"设计模式清单",charIndex:123},{level:2,title:"React清单",slug:"react清单",normalizedTitle:"react清单",charIndex:1537},{level:2,title:"Java版本新特性清单",slug:"java版本新特性清单",normalizedTitle:"java版本新特性清单",charIndex:1946},{level:2,title:"Git清单",slug:"git清单",normalizedTitle:"git清单",charIndex:2439},{level:2,title:"Maven清单",slug:"maven清单",normalizedTitle:"maven清单",charIndex:2852},{level:2,title:"JVM清单",slug:"jvm清单",normalizedTitle:"jvm清单",charIndex:3004},{level:2,title:"Redis清单",slug:"redis清单",normalizedTitle:"redis清单",charIndex:4556},{level:2,title:"Spring Security清单",slug:"spring-security清单",normalizedTitle:"spring security清单",charIndex:5315},{level:2,title:"Nginx清单",slug:"nginx清单",normalizedTitle:"nginx清单",charIndex:5793},{level:2,title:"Docker清单",slug:"docker清单",normalizedTitle:"docker清单",charIndex:6677},{level:2,title:"ElasticSearch清单",slug:"elasticsearch清单",normalizedTitle:"elasticsearch清单",charIndex:7301},{level:2,title:"RabbitMQ清单",slug:"rabbitmq清单",normalizedTitle:"rabbitmq清单",charIndex:8438},{level:2,title:"轮子使用清单",slug:"轮子使用清单",normalizedTitle:"轮子使用清单",charIndex:9121},{level:2,title:"随笔清单",slug:"随笔清单",normalizedTitle:"随笔清单",charIndex:9335},{level:2,title:"关于清单",slug:"关于清单",normalizedTitle:"关于清单",charIndex:9771},{level:2,title:"项目工程清单",slug:"项目工程清单",normalizedTitle:"项目工程清单",charIndex:11096},{level:2,title:"MySQL清单",slug:"mysql清单",normalizedTitle:"mysql清单",charIndex:11771}],excerpt:'<div class="custom-block note"><p class="custom-block-title">序言</p>\n<p>记录习惯，生活更加可见性有序。</p>\n<div class="custom-block right">\n<p>2021-11-13 @村长</p>\n</div>\n</div>\n',headersStr:"设计模式清单 React清单 Java版本新特性清单 Git清单 Maven清单 JVM清单 Redis清单 Spring Security清单 Nginx清单 Docker清单 ElasticSearch清单 RabbitMQ清单 轮子使用清单 随笔清单 关于清单 项目工程清单 MySQL清单",content:"序言\n\n记录习惯，生活更加可见性有序。\n\n2021-11-13 @村长\n\n记录一些知识体系的创建和更新清单，养成一种好习惯。\n\n更新时间要么是发布的时间，要么是发布后最后一次更新的时间。\n\n按照最新体系的第一个知识内容创建时间进行升序。\n\n\n# 设计模式清单\n\n设计模式目录\n\n知识体系   知识内容               创建时间         更新时间\n设计模式   设计模式 - 设计模式总结      2022-03-26   2022-03-27\n设计模式   设计模式 - 行为型职责链模式    2022-03-26   2022-03-27\n设计模式   设计模式 - 行为型策略模式     2022-03-26   2022-03-27\n设计模式   设计模式 - 行为型状态模式     2022-03-26   2022-03-27\n设计模式   设计模式 - 行为型解释器模式    2022-03-26   2022-03-27\n设计模式   设计模式 - 行为型备忘录模式    2022-03-26   2022-03-27\n设计模式   设计模式 - 行为型中介模式     2022-03-26   2022-03-27\n设计模式   设计模式 - 行为型观察者模式    2022-03-26   2022-03-27\n设计模式   设计模式 - 行为型迭代器模式    2022-03-26   2022-03-27\n设计模式   设计模式 - 行为型访问者模式    2022-03-26   2022-03-27\n设计模式   设计模式 - 行为型命令模式     2022-03-26   2022-03-27\n设计模式   设计模式 - 行为型模板方法模式   2022-03-26   2022-03-27\n设计模式   设计模式 - 结构型代理模式     2022-03-16   2022-03-16\n设计模式   设计模式 - 结构型享元模式     2022-03-14   2022-03-16\n设计模式   设计模式 - 结构型外观模式     2022-03-14   2022-03-16\n设计模式   设计模式 - 结构型组合模式     2022-03-14   2022-03-16\n设计模式   设计模式 - 结构型装饰者模式    2022-03-14   2022-03-16\n设计模式   设计模式 - 结构型桥接模式     2022-03-14   2022-03-16\n设计模式   设计模式 - 结构型适配器模式    2022-03-07   2022-03-08\n设计模式   设计模式 - 创建型建造者模式    2022-03-01   2022-03-01\n设计模式   设计模式 - 创建型原型模式     2022-03-01   2022-03-01\n设计模式   设计模式 - 创建型工厂模式     2022-02-27   2022-02-27\n设计模式   设计模式 - 创建型单例模式     2022-02-26   2022-02-26\n设计模式   设计模式 - 设计模式概述      2022-02-26   2022-02-26\n设计模式   设计模式 - UML类图       2022-02-26   2022-02-26\n设计模式   设计模式 - 设计思想        2022-02-24   2022-02-26\n设计模式   设计模式 - 七大原则认识      2022-02-24   2022-02-24\n\n\n# React清单\n\nReact 目录\n\n知识体系    知识内容             创建时间         更新时间\nReact   父子传值与循环key       2022-02-26   2022-02-26\nReact   React - 进阶知识     2022-02-21   2022-02-21\nReact   React - 函数类型     2022-02-21   2022-02-21\nReact   React - Redux    2022-02-21   2022-02-21\nReact   React - 路由       2022-02-21   2022-02-21\nReact   React - 脚手架及使用   2022-02-21   2022-02-21\nReact   React - 基础与核心    2022-02-21   2022-02-21\n\n\n# Java版本新特性清单\n\nJava 版本新特性目录\n\n知识体系         知识内容           创建时间         更新时间\nJava 版本新特性   Java15 - 新特性   2022-02-13   2022-02-13\nJava 版本新特性   Java14 - 新特性   2022-02-12   2022-02-12\nJava 版本新特性   Java13 - 新特性   2022-02-12   2022-02-12\nJava 版本新特性   Java12 - 新特性   2022-02-11   2022-02-12\nJava 版本新特性   Java11 - 新特性   2022-02-10   2022-02-11\nJava 版本新特性   Java10 - 新特性   2022-02-10   2022-02-10\nJava 版本新特性   Java9 - 新特性    2022-02-10   2022-02-10\nJava 版本新特性   Java8 - 新特性    2022-02-09   2022-02-10\n\n\n# Git清单\n\nGit 目录\n\n知识体系   知识内容               创建时间         更新时间\nGit    Git - Commit常用表情   2022-02-08   2022-02-08\nGit    Git - 自建代码托管平台     2022-02-08   2022-02-08\nGit    Git - IDEA集成       2022-02-08   2022-02-08\nGit    Git - SSH免密登录      2022-02-08   2022-02-08\nGit    Git - 基本原理         2022-02-08   2022-02-08\nGit    Git - 常用命令         2022-02-08   2022-02-08\nGit    Git - 介绍与安装        2022-02-08   2022-02-08\n\n\n# Maven清单\n\nMaven 目录\n\n知识体系    知识内容         创建时间         更新时间\nMaven   Maven - 进阶   2022-02-05   2022-02-06\nMaven   Maven - 基础   2022-02-04   2022-02-06\n\n\n# JVM清单\n\nJVM 目录\n\n知识体系   知识内容                      创建时间         更新时间\nJVM    JVM - 分析GC日志              2022-02-01   2022-02-01\nJVM    JVM - 运行时参数               2022-02-01   2022-02-01\nJVM    JVM - 监控及诊断工具GUI          2022-01-31   2022-02-01\nJVM    JVM - 监控及诊断工具命令行          2022-01-31   2022-02-01\nJVM    JVM - 调优概述                2022-01-30   2022-02-01\nJVM    JVM - 再谈类的加载器             2022-01-30   2022-01-30\nJVM    JVM - 类的加载过程详解            2022-01-29   2022-01-30\nJVM    JVM - 字节码指令集与解析举例         2022-01-28   2022-01-29\nJVM    JVM - Class文件结构           2022-01-26   2022-01-27\nJVM    JVM - 垃圾回收器               2022-01-24   2022-01-25\nJVM    JVM - 垃圾回收相关概念            2022-01-24   2022-01-24\nJVM    JVM - 垃圾回收相关算法            2022-01-24   2022-01-24\nJVM    JVM - 垃圾回收概述              2022-01-24   2022-01-24\nJVM    JVM - StringTable字符串常量池   2022-01-23   2022-01-24\nJVM    JVM - 执行引擎                2022-01-23   2022-01-24\nJVM    JVM - 直接内存                2022-01-22   2022-01-23\nJVM    JVM - 对象实例化内存布局与访问定位      2022-01-22   2022-01-23\nJVM    JVM - 方法区                 2022-01-20   2022-01-22\nJVM    JVM - 堆                   2022-01-19   2022-01-20\nJVM    JVM - 本地方法栈               2022-01-18   2022-01-18\nJVM    JVM - 本地方法接口              2022-01-18   2022-01-18\nJVM    JVM - 虚拟机栈                2022-01-17   2022-01-18\nJVM    JVM - 程序计数器               2022-01-17   2022-01-18\nJVM    JVM - 运行时数据区概述及线程         2022-01-17   2022-01-18\nJVM    JVM - 类加载子系统              2022-01-17   2022-01-18\nJVM    JVM - Java体系结构            2022-01-15   2022-01-18\n\n\n# Redis清单\n\nRedis 目录\n\n知识体系    知识内容                 创建时间         更新时间\nRedis   Redis - 分布式锁         2021-12-26   2021-12-27\nRedis   Redis - 应用问题         2021-12-26   2021-12-27\nRedis   Redis - 集群搭建         2021-12-26   2021-12-27\nRedis   Redis - 主从复制         2021-12-26   2021-12-27\nRedis   Redis - 两种持久化        2021-12-26   2021-12-27\nRedis   Redis - 事务与锁         2021-12-26   2021-12-27\nRedis   Redis - Java整合       2021-12-26   2021-12-27\nRedis   Redis - 发布和订阅        2021-12-26   2021-12-27\nRedis   Redis - 配置文件         2021-12-26   2021-12-27\nRedis   Redis - 新增三大数据类型     2021-12-26   2021-12-27\nRedis   Redis - 五大数据类型及API   2021-12-25   2021-12-27\nRedis   Redis - 安装           2021-12-25   2021-12-27\nRedis   Redis - 介绍           2021-12-25   2021-12-27\n\n\n# Spring Security清单\n\nSpring Security 目录\n\n知识体系              知识内容                 创建时间         更新时间\nSpring Security   Security - 源码与流程     2021-12-25   2021-12-27\nSpring Security   Security - JWT介绍     2021-12-25   2021-12-27\nSpring Security   Security - 信息验证      2021-12-25   2021-12-27\nSpring Security   Security - 概念与权限     2021-12-25   2021-12-27\nSpring Security   Security - 介绍        2021-12-25   2021-12-27\nSpring Security   Security - JWT登录实战   2021-12-24   2021-12-27\n\n\n# Nginx清单\n\nNginx 目录\n\n知识体系    知识内容               创建时间         更新时间\nNginx   Nginx - 自定义镜像      2021-12-14   2021-12-15\nNginx   Nginx - Lua模块文档表   2021-11-30   2021-11-30\nNginx   Nginx - Lua扩展模块    2021-11-29   2021-11-30\nNginx   Nginx - Lau学习      2021-11-29   2021-11-30\nNginx   Nginx - 站点与认证      2021-11-29   2021-11-30\nNginx   Nginx - 部署与集群      2021-11-29   2021-11-30\nNginx   Nginx - 缓存集成       2021-11-28   2021-11-29\nNginx   Nginx - 负载均衡       2021-11-28   2021-11-29\nNginx   Nginx - 反向代理       2021-11-27   2021-11-29\nNginx   Nginx - 静态资源访问     2021-11-27   2021-11-29\nNginx   Nginx - 静态资源部署     2021-11-27   2021-11-29\nNginx   Nginx - 配置巩固实例     2021-11-26   2021-11-29\nNginx   Nginx - 核心配置文件     2021-11-26   2021-11-29\nNginx   Nginx - 基础指令       2021-11-26   2021-11-29\nNginx   Nginx - 环境准备       2021-11-25   2021-11-26\nNginx   Nginx - 介绍         2021-11-25   2021-11-26\n\n\n# Docker清单\n\nDocker 目录\n\n知识体系     知识内容                  创建时间         更新时间\nDocker   Docker - Maven插件      2021-12-10   2021-12-11\nDocker   Docker - 软件安装         2021-11-24   2021-11-24\nDocker   Docker - Compose      2021-11-22   2021-11-24\nDocker   Docker - Dockerfile   2021-11-21   2021-11-24\nDocker   Docker - 数据卷          2021-11-20   2021-11-24\nDocker   Docker - 网络网桥         2021-11-20   2021-11-24\nDocker   Docker - 镜像原理         2021-11-20   2021-11-24\nDocker   Docker - 常用命令         2021-11-19   2021-11-24\nDocker   Docker - 安装           2021-11-19   2021-11-24\nDocker   Docker - 介绍           2021-11-19   2021-11-24\n\n\n# ElasticSearch清单\n\nElasticSearch 目录\n\n知识体系            知识内容                         创建时间         更新时间\nElasticSearch   ElasticSearch - 面试题          2021-11-18   2021-11-18\nElasticSearch   ElasticSearch - 进阶优化         2021-11-18   2021-11-18\nElasticSearch   ElasticSearch - 多框架集成        2021-11-17   2021-11-18\nElasticSearch   ElasticSearch - 冲突问题处理       2021-11-17   2021-11-18\nElasticSearch   ElasticSearch - 多种分析器        2021-11-16   2021-11-18\nElasticSearch   ElasticSearch - 分片操作原理       2021-11-16   2021-11-18\nElasticSearch   ElasticSearch - 分片控制流程       2021-11-16   2021-11-18\nElasticSearch   ElasticSearch - 分布式集群和路由计算   2021-11-16   2021-11-18\nElasticSearch   ElasticSearch - 进阶概念         2021-11-16   2021-11-18\nElasticSearch   ElasticSearch - 搭建集群         2021-11-16   2021-11-18\nElasticSearch   ElasticSearch - Java操作       2021-11-15   2021-11-18\nElasticSearch   ElasticSearch - 高级操作         2021-11-14   2021-11-18\nElasticSearch   ElasticSearch - 基本操作         2021-11-14   2021-11-18\nElasticSearch   ElasticSearch - 安装           2021-11-14   2021-11-18\nElasticSearch   ElasticSearch - 基础概念         2021-11-14   2021-11-18\n\n\n# RabbitMQ清单\n\nRabbitMQ 目录\n\n知识体系       知识内容                创建时间         更新时间\nRabbitMQ   RabbitMQ - 优先级      2021-11-12   2021-11-12\nRabbitMQ   RabbitMQ - 高级发布确认   2021-11-11   2021-11-12\nRabbitMQ   RabbitMQ - 延迟队列     2021-11-10   2021-11-12\nRabbitMQ   RabbitMQ - 死信队列     2021-11-10   2021-11-12\nRabbitMQ   RabbitMQ - 交换机      2021-11-10   2021-11-12\nRabbitMQ   RabbitMQ - 应答与发布    2021-11-09   2021-11-12\nRabbitMQ   RabbitMQ - 基础案例     2021-11-09   2021-11-12\nRabbitMQ   RabbitMQ - 安装       2021-11-08   2021-11-12\nRabbitMQ   RabbitMQ - 介绍       2021-11-08   2021-11-12\nRabbitMQ   消息队列 - 介绍           2021-11-08   2021-11-12\nRabbitMQ   中间件 - 介绍            2021-11-08   2021-11-12\n\n\n# 轮子使用清单\n\n轮子介绍目录\n\n知识体系   知识内容               创建时间         更新时间\n轮子使用   DBeaver - SQL连接器   2021-12-12   2021-12-15\n轮子使用   Shields 徽章         2021-10-29   2021-10-29\n轮子使用   轮子介绍               2021-10-29   2021-10-29\n\n\n# 随笔清单\n\n技术随笔目录\n\n生活随笔目录\n\n知识体系   知识内容                 创建时间         更新时间\n生活随笔   生活随笔 - 习惯            2022-02-19   2022-02-19\n生活随笔   生活随笔 - 美词            2022-02-19   2022-02-19\n技术随笔   技术随笔 - Java启动的-D参数   2022-03-02   2022-03-02\n技术随笔   技术随笔 - 360天擎关闭       2022-02-22   2022-02-22\n技术随笔   Maven - 上传中央仓库       2022-02-07   2022-02-07\n技术随笔   Github - 好看的主页       2022-01-09   2022-01-09\n技术随笔   技术随笔 - 域名解析          2021-12-01   2021-12-17\n\n\n# 关于清单\n\n关于自我目录\n\n关于本站目录\n\n关于技巧目录\n\n知识体系      知识内容              创建时间         更新时间\n关于 - 自我   自我 - 温润少年         2022-02-19   2022-02-19\n关于 - 自我   自我 - 尊贵公子         2022-02-19   2022-02-19\n关于 - 自我   自我 - 学习线          2021-11-13   2021-11-13\n关于 - 自我   自我 - 清单           2021-11-13   一直在更新清单\n关于 - 自我   自我 - 介绍           2021-11-03   2021-11-03\n关于 - 本站   本站 - 全局时间消息提示模块   2022-02-13   2022-02-13\n关于 - 本站   本站 - 代码块隐藏模块      2022-02-13   2022-02-13\n关于 - 本站   本站 - 首页大图模块       2022-01-12   2022-01-13\n关于 - 本站   本站 - 导航站模块        2022-01-11   2022-01-11\n关于 - 本站   本站 - 私密文章模块       2022-01-07   2022-01-08\n关于 - 本站   本站 - 记录曾阅读位置插件    2022-01-04   2022-01-04\n关于 - 本站   本站 - 自定义样式        2021-01-01   2021-01-02\n关于 - 本站   本站 - 站点信息         2021-12-30   2021-01-02\n关于 - 本站   本站 - 服务器部署        2021-12-03   2021-12-09\n关于 - 本站   本站 - 主题           2021-11-07   2021-11-07\n关于 - 本站   本站 - 网站部署         2021-11-01   2021-11-01\n关于 - 本站   本站 - 规划           2021-11-01   2021-11-01\n关于 - 本站   本站 - 介绍           2021-11-01   2021-11-01\n关于 - 本站   本站 - 搭建           2021-10-31   2021-10-31\n关于 - 本站   本站 - 评论           2021-10-29   2021-10-29\n关于 - 首页   首页 - 下载站点         2021-12-14   2021-12-15\n关于 - 首页   首页 - 部署           2021-12-09   2021-12-10\n关于 - 技巧   排版 - 技巧           2021-11-13   2021-11-13\n关于 - 技巧   笔记 - 技巧           2021-10-28   2021-10-28\n\n\n# 项目工程清单\n\n项目过程目录页\n\ntbeam 项目目录\n\n报修系统目录\n\nYonYou 工程目录\n\n知识体系   知识内容                      发布时间         更新时间\n项目工程   YonYou - Client端开发        2022-03-03   2022-03-03\n项目工程   YonYou - 开发流程             2022-03-02   2022-03-02\n项目工程   YonYou - NCC节点开发          2022-02-23   2022-02-23\n项目工程   YonYou - 节点配置             2022-02-22   2022-02-22\n项目工程   报修系统 - 部署                 2021-11-30   2021-11-30\n项目工程   报修系统 - 详解                 2021-10-30   2021-11-02\n项目工程   tbeam - 技巧                2021-11-07   2021-11-07\n项目工程   Ant Design Vue 3.x - 新增   2021-10-28   2021-11-07\n项目工程   Ant Design Vue 3.x - 表格   2021-10-26   2021-10-26\n项目工程   tbeam 项目介绍                2021-10-28   2021-10-28\n\n\n# MySQL清单\n\nMySQL 目录\n\n知识体系       知识内容              发布时间         更新时间\nMySQL 高级   MySQL - 主从复制      2021-10-24   2021-10-24\nMySQL 高级   MySQL - 日志        2021-10-24   2021-10-24\nMySQL 高级   MySQL - 常用工具      2021-10-24   2021-10-24\nMySQL 高级   MySQL - 常用sql     2021-10-24   2021-10-24\nMySQL 高级   MySQL - 锁问题       2021-10-24   2021-10-24\nMySQL 高级   MySQL - 并发参数优化    2021-10-24   2021-10-24\nMySQL 高级   MySQL - 内存管理优化    2021-10-24   2021-10-24\nMySQL 高级   MySQL - 缓存查询优化    2021-10-24   2021-10-24\nMySQL 高级   MySQL - SQL语句优化   2021-10-24   2021-10-24\nMySQL 高级   MySQL - 索引的使用     2021-10-24   2021-10-24\nMySQL 高级   MySQL - 检测优化SQL   2021-10-24   2021-10-24\nMySQL 高级   MySQL - 逻辑架构简介    2021-10-24   2021-10-24\nMySQL 高级   MySQL - 索引介绍      2021-10-24   2021-10-24\nMySQL 高级   初识MySQL           2021-10-24   2021-10-24",normalizedContent:"序言\n\n记录习惯，生活更加可见性有序。\n\n2021-11-13 @村长\n\n记录一些知识体系的创建和更新清单，养成一种好习惯。\n\n更新时间要么是发布的时间，要么是发布后最后一次更新的时间。\n\n按照最新体系的第一个知识内容创建时间进行升序。\n\n\n# 设计模式清单\n\n设计模式目录\n\n知识体系   知识内容               创建时间         更新时间\n设计模式   设计模式 - 设计模式总结      2022-03-26   2022-03-27\n设计模式   设计模式 - 行为型职责链模式    2022-03-26   2022-03-27\n设计模式   设计模式 - 行为型策略模式     2022-03-26   2022-03-27\n设计模式   设计模式 - 行为型状态模式     2022-03-26   2022-03-27\n设计模式   设计模式 - 行为型解释器模式    2022-03-26   2022-03-27\n设计模式   设计模式 - 行为型备忘录模式    2022-03-26   2022-03-27\n设计模式   设计模式 - 行为型中介模式     2022-03-26   2022-03-27\n设计模式   设计模式 - 行为型观察者模式    2022-03-26   2022-03-27\n设计模式   设计模式 - 行为型迭代器模式    2022-03-26   2022-03-27\n设计模式   设计模式 - 行为型访问者模式    2022-03-26   2022-03-27\n设计模式   设计模式 - 行为型命令模式     2022-03-26   2022-03-27\n设计模式   设计模式 - 行为型模板方法模式   2022-03-26   2022-03-27\n设计模式   设计模式 - 结构型代理模式     2022-03-16   2022-03-16\n设计模式   设计模式 - 结构型享元模式     2022-03-14   2022-03-16\n设计模式   设计模式 - 结构型外观模式     2022-03-14   2022-03-16\n设计模式   设计模式 - 结构型组合模式     2022-03-14   2022-03-16\n设计模式   设计模式 - 结构型装饰者模式    2022-03-14   2022-03-16\n设计模式   设计模式 - 结构型桥接模式     2022-03-14   2022-03-16\n设计模式   设计模式 - 结构型适配器模式    2022-03-07   2022-03-08\n设计模式   设计模式 - 创建型建造者模式    2022-03-01   2022-03-01\n设计模式   设计模式 - 创建型原型模式     2022-03-01   2022-03-01\n设计模式   设计模式 - 创建型工厂模式     2022-02-27   2022-02-27\n设计模式   设计模式 - 创建型单例模式     2022-02-26   2022-02-26\n设计模式   设计模式 - 设计模式概述      2022-02-26   2022-02-26\n设计模式   设计模式 - uml类图       2022-02-26   2022-02-26\n设计模式   设计模式 - 设计思想        2022-02-24   2022-02-26\n设计模式   设计模式 - 七大原则认识      2022-02-24   2022-02-24\n\n\n# react清单\n\nreact 目录\n\n知识体系    知识内容             创建时间         更新时间\nreact   父子传值与循环key       2022-02-26   2022-02-26\nreact   react - 进阶知识     2022-02-21   2022-02-21\nreact   react - 函数类型     2022-02-21   2022-02-21\nreact   react - redux    2022-02-21   2022-02-21\nreact   react - 路由       2022-02-21   2022-02-21\nreact   react - 脚手架及使用   2022-02-21   2022-02-21\nreact   react - 基础与核心    2022-02-21   2022-02-21\n\n\n# java版本新特性清单\n\njava 版本新特性目录\n\n知识体系         知识内容           创建时间         更新时间\njava 版本新特性   java15 - 新特性   2022-02-13   2022-02-13\njava 版本新特性   java14 - 新特性   2022-02-12   2022-02-12\njava 版本新特性   java13 - 新特性   2022-02-12   2022-02-12\njava 版本新特性   java12 - 新特性   2022-02-11   2022-02-12\njava 版本新特性   java11 - 新特性   2022-02-10   2022-02-11\njava 版本新特性   java10 - 新特性   2022-02-10   2022-02-10\njava 版本新特性   java9 - 新特性    2022-02-10   2022-02-10\njava 版本新特性   java8 - 新特性    2022-02-09   2022-02-10\n\n\n# git清单\n\ngit 目录\n\n知识体系   知识内容               创建时间         更新时间\ngit    git - commit常用表情   2022-02-08   2022-02-08\ngit    git - 自建代码托管平台     2022-02-08   2022-02-08\ngit    git - idea集成       2022-02-08   2022-02-08\ngit    git - ssh免密登录      2022-02-08   2022-02-08\ngit    git - 基本原理         2022-02-08   2022-02-08\ngit    git - 常用命令         2022-02-08   2022-02-08\ngit    git - 介绍与安装        2022-02-08   2022-02-08\n\n\n# maven清单\n\nmaven 目录\n\n知识体系    知识内容         创建时间         更新时间\nmaven   maven - 进阶   2022-02-05   2022-02-06\nmaven   maven - 基础   2022-02-04   2022-02-06\n\n\n# jvm清单\n\njvm 目录\n\n知识体系   知识内容                      创建时间         更新时间\njvm    jvm - 分析gc日志              2022-02-01   2022-02-01\njvm    jvm - 运行时参数               2022-02-01   2022-02-01\njvm    jvm - 监控及诊断工具gui          2022-01-31   2022-02-01\njvm    jvm - 监控及诊断工具命令行          2022-01-31   2022-02-01\njvm    jvm - 调优概述                2022-01-30   2022-02-01\njvm    jvm - 再谈类的加载器             2022-01-30   2022-01-30\njvm    jvm - 类的加载过程详解            2022-01-29   2022-01-30\njvm    jvm - 字节码指令集与解析举例         2022-01-28   2022-01-29\njvm    jvm - class文件结构           2022-01-26   2022-01-27\njvm    jvm - 垃圾回收器               2022-01-24   2022-01-25\njvm    jvm - 垃圾回收相关概念            2022-01-24   2022-01-24\njvm    jvm - 垃圾回收相关算法            2022-01-24   2022-01-24\njvm    jvm - 垃圾回收概述              2022-01-24   2022-01-24\njvm    jvm - stringtable字符串常量池   2022-01-23   2022-01-24\njvm    jvm - 执行引擎                2022-01-23   2022-01-24\njvm    jvm - 直接内存                2022-01-22   2022-01-23\njvm    jvm - 对象实例化内存布局与访问定位      2022-01-22   2022-01-23\njvm    jvm - 方法区                 2022-01-20   2022-01-22\njvm    jvm - 堆                   2022-01-19   2022-01-20\njvm    jvm - 本地方法栈               2022-01-18   2022-01-18\njvm    jvm - 本地方法接口              2022-01-18   2022-01-18\njvm    jvm - 虚拟机栈                2022-01-17   2022-01-18\njvm    jvm - 程序计数器               2022-01-17   2022-01-18\njvm    jvm - 运行时数据区概述及线程         2022-01-17   2022-01-18\njvm    jvm - 类加载子系统              2022-01-17   2022-01-18\njvm    jvm - java体系结构            2022-01-15   2022-01-18\n\n\n# redis清单\n\nredis 目录\n\n知识体系    知识内容                 创建时间         更新时间\nredis   redis - 分布式锁         2021-12-26   2021-12-27\nredis   redis - 应用问题         2021-12-26   2021-12-27\nredis   redis - 集群搭建         2021-12-26   2021-12-27\nredis   redis - 主从复制         2021-12-26   2021-12-27\nredis   redis - 两种持久化        2021-12-26   2021-12-27\nredis   redis - 事务与锁         2021-12-26   2021-12-27\nredis   redis - java整合       2021-12-26   2021-12-27\nredis   redis - 发布和订阅        2021-12-26   2021-12-27\nredis   redis - 配置文件         2021-12-26   2021-12-27\nredis   redis - 新增三大数据类型     2021-12-26   2021-12-27\nredis   redis - 五大数据类型及api   2021-12-25   2021-12-27\nredis   redis - 安装           2021-12-25   2021-12-27\nredis   redis - 介绍           2021-12-25   2021-12-27\n\n\n# spring security清单\n\nspring security 目录\n\n知识体系              知识内容                 创建时间         更新时间\nspring security   security - 源码与流程     2021-12-25   2021-12-27\nspring security   security - jwt介绍     2021-12-25   2021-12-27\nspring security   security - 信息验证      2021-12-25   2021-12-27\nspring security   security - 概念与权限     2021-12-25   2021-12-27\nspring security   security - 介绍        2021-12-25   2021-12-27\nspring security   security - jwt登录实战   2021-12-24   2021-12-27\n\n\n# nginx清单\n\nnginx 目录\n\n知识体系    知识内容               创建时间         更新时间\nnginx   nginx - 自定义镜像      2021-12-14   2021-12-15\nnginx   nginx - lua模块文档表   2021-11-30   2021-11-30\nnginx   nginx - lua扩展模块    2021-11-29   2021-11-30\nnginx   nginx - lau学习      2021-11-29   2021-11-30\nnginx   nginx - 站点与认证      2021-11-29   2021-11-30\nnginx   nginx - 部署与集群      2021-11-29   2021-11-30\nnginx   nginx - 缓存集成       2021-11-28   2021-11-29\nnginx   nginx - 负载均衡       2021-11-28   2021-11-29\nnginx   nginx - 反向代理       2021-11-27   2021-11-29\nnginx   nginx - 静态资源访问     2021-11-27   2021-11-29\nnginx   nginx - 静态资源部署     2021-11-27   2021-11-29\nnginx   nginx - 配置巩固实例     2021-11-26   2021-11-29\nnginx   nginx - 核心配置文件     2021-11-26   2021-11-29\nnginx   nginx - 基础指令       2021-11-26   2021-11-29\nnginx   nginx - 环境准备       2021-11-25   2021-11-26\nnginx   nginx - 介绍         2021-11-25   2021-11-26\n\n\n# docker清单\n\ndocker 目录\n\n知识体系     知识内容                  创建时间         更新时间\ndocker   docker - maven插件      2021-12-10   2021-12-11\ndocker   docker - 软件安装         2021-11-24   2021-11-24\ndocker   docker - compose      2021-11-22   2021-11-24\ndocker   docker - dockerfile   2021-11-21   2021-11-24\ndocker   docker - 数据卷          2021-11-20   2021-11-24\ndocker   docker - 网络网桥         2021-11-20   2021-11-24\ndocker   docker - 镜像原理         2021-11-20   2021-11-24\ndocker   docker - 常用命令         2021-11-19   2021-11-24\ndocker   docker - 安装           2021-11-19   2021-11-24\ndocker   docker - 介绍           2021-11-19   2021-11-24\n\n\n# elasticsearch清单\n\nelasticsearch 目录\n\n知识体系            知识内容                         创建时间         更新时间\nelasticsearch   elasticsearch - 面试题          2021-11-18   2021-11-18\nelasticsearch   elasticsearch - 进阶优化         2021-11-18   2021-11-18\nelasticsearch   elasticsearch - 多框架集成        2021-11-17   2021-11-18\nelasticsearch   elasticsearch - 冲突问题处理       2021-11-17   2021-11-18\nelasticsearch   elasticsearch - 多种分析器        2021-11-16   2021-11-18\nelasticsearch   elasticsearch - 分片操作原理       2021-11-16   2021-11-18\nelasticsearch   elasticsearch - 分片控制流程       2021-11-16   2021-11-18\nelasticsearch   elasticsearch - 分布式集群和路由计算   2021-11-16   2021-11-18\nelasticsearch   elasticsearch - 进阶概念         2021-11-16   2021-11-18\nelasticsearch   elasticsearch - 搭建集群         2021-11-16   2021-11-18\nelasticsearch   elasticsearch - java操作       2021-11-15   2021-11-18\nelasticsearch   elasticsearch - 高级操作         2021-11-14   2021-11-18\nelasticsearch   elasticsearch - 基本操作         2021-11-14   2021-11-18\nelasticsearch   elasticsearch - 安装           2021-11-14   2021-11-18\nelasticsearch   elasticsearch - 基础概念         2021-11-14   2021-11-18\n\n\n# rabbitmq清单\n\nrabbitmq 目录\n\n知识体系       知识内容                创建时间         更新时间\nrabbitmq   rabbitmq - 优先级      2021-11-12   2021-11-12\nrabbitmq   rabbitmq - 高级发布确认   2021-11-11   2021-11-12\nrabbitmq   rabbitmq - 延迟队列     2021-11-10   2021-11-12\nrabbitmq   rabbitmq - 死信队列     2021-11-10   2021-11-12\nrabbitmq   rabbitmq - 交换机      2021-11-10   2021-11-12\nrabbitmq   rabbitmq - 应答与发布    2021-11-09   2021-11-12\nrabbitmq   rabbitmq - 基础案例     2021-11-09   2021-11-12\nrabbitmq   rabbitmq - 安装       2021-11-08   2021-11-12\nrabbitmq   rabbitmq - 介绍       2021-11-08   2021-11-12\nrabbitmq   消息队列 - 介绍           2021-11-08   2021-11-12\nrabbitmq   中间件 - 介绍            2021-11-08   2021-11-12\n\n\n# 轮子使用清单\n\n轮子介绍目录\n\n知识体系   知识内容               创建时间         更新时间\n轮子使用   dbeaver - sql连接器   2021-12-12   2021-12-15\n轮子使用   shields 徽章         2021-10-29   2021-10-29\n轮子使用   轮子介绍               2021-10-29   2021-10-29\n\n\n# 随笔清单\n\n技术随笔目录\n\n生活随笔目录\n\n知识体系   知识内容                 创建时间         更新时间\n生活随笔   生活随笔 - 习惯            2022-02-19   2022-02-19\n生活随笔   生活随笔 - 美词            2022-02-19   2022-02-19\n技术随笔   技术随笔 - java启动的-d参数   2022-03-02   2022-03-02\n技术随笔   技术随笔 - 360天擎关闭       2022-02-22   2022-02-22\n技术随笔   maven - 上传中央仓库       2022-02-07   2022-02-07\n技术随笔   github - 好看的主页       2022-01-09   2022-01-09\n技术随笔   技术随笔 - 域名解析          2021-12-01   2021-12-17\n\n\n# 关于清单\n\n关于自我目录\n\n关于本站目录\n\n关于技巧目录\n\n知识体系      知识内容              创建时间         更新时间\n关于 - 自我   自我 - 温润少年         2022-02-19   2022-02-19\n关于 - 自我   自我 - 尊贵公子         2022-02-19   2022-02-19\n关于 - 自我   自我 - 学习线          2021-11-13   2021-11-13\n关于 - 自我   自我 - 清单           2021-11-13   一直在更新清单\n关于 - 自我   自我 - 介绍           2021-11-03   2021-11-03\n关于 - 本站   本站 - 全局时间消息提示模块   2022-02-13   2022-02-13\n关于 - 本站   本站 - 代码块隐藏模块      2022-02-13   2022-02-13\n关于 - 本站   本站 - 首页大图模块       2022-01-12   2022-01-13\n关于 - 本站   本站 - 导航站模块        2022-01-11   2022-01-11\n关于 - 本站   本站 - 私密文章模块       2022-01-07   2022-01-08\n关于 - 本站   本站 - 记录曾阅读位置插件    2022-01-04   2022-01-04\n关于 - 本站   本站 - 自定义样式        2021-01-01   2021-01-02\n关于 - 本站   本站 - 站点信息         2021-12-30   2021-01-02\n关于 - 本站   本站 - 服务器部署        2021-12-03   2021-12-09\n关于 - 本站   本站 - 主题           2021-11-07   2021-11-07\n关于 - 本站   本站 - 网站部署         2021-11-01   2021-11-01\n关于 - 本站   本站 - 规划           2021-11-01   2021-11-01\n关于 - 本站   本站 - 介绍           2021-11-01   2021-11-01\n关于 - 本站   本站 - 搭建           2021-10-31   2021-10-31\n关于 - 本站   本站 - 评论           2021-10-29   2021-10-29\n关于 - 首页   首页 - 下载站点         2021-12-14   2021-12-15\n关于 - 首页   首页 - 部署           2021-12-09   2021-12-10\n关于 - 技巧   排版 - 技巧           2021-11-13   2021-11-13\n关于 - 技巧   笔记 - 技巧           2021-10-28   2021-10-28\n\n\n# 项目工程清单\n\n项目过程目录页\n\ntbeam 项目目录\n\n报修系统目录\n\nyonyou 工程目录\n\n知识体系   知识内容                      发布时间         更新时间\n项目工程   yonyou - client端开发        2022-03-03   2022-03-03\n项目工程   yonyou - 开发流程             2022-03-02   2022-03-02\n项目工程   yonyou - ncc节点开发          2022-02-23   2022-02-23\n项目工程   yonyou - 节点配置             2022-02-22   2022-02-22\n项目工程   报修系统 - 部署                 2021-11-30   2021-11-30\n项目工程   报修系统 - 详解                 2021-10-30   2021-11-02\n项目工程   tbeam - 技巧                2021-11-07   2021-11-07\n项目工程   ant design vue 3.x - 新增   2021-10-28   2021-11-07\n项目工程   ant design vue 3.x - 表格   2021-10-26   2021-10-26\n项目工程   tbeam 项目介绍                2021-10-28   2021-10-28\n\n\n# mysql清单\n\nmysql 目录\n\n知识体系       知识内容              发布时间         更新时间\nmysql 高级   mysql - 主从复制      2021-10-24   2021-10-24\nmysql 高级   mysql - 日志        2021-10-24   2021-10-24\nmysql 高级   mysql - 常用工具      2021-10-24   2021-10-24\nmysql 高级   mysql - 常用sql     2021-10-24   2021-10-24\nmysql 高级   mysql - 锁问题       2021-10-24   2021-10-24\nmysql 高级   mysql - 并发参数优化    2021-10-24   2021-10-24\nmysql 高级   mysql - 内存管理优化    2021-10-24   2021-10-24\nmysql 高级   mysql - 缓存查询优化    2021-10-24   2021-10-24\nmysql 高级   mysql - sql语句优化   2021-10-24   2021-10-24\nmysql 高级   mysql - 索引的使用     2021-10-24   2021-10-24\nmysql 高级   mysql - 检测优化sql   2021-10-24   2021-10-24\nmysql 高级   mysql - 逻辑架构简介    2021-10-24   2021-10-24\nmysql 高级   mysql - 索引介绍      2021-10-24   2021-10-24\nmysql 高级   初识mysql           2021-10-24   2021-10-24",charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"YonYou - 开发流程",frontmatter:{title:"YonYou - 开发流程",date:"2022-03-02T12:29:47.000Z",permalink:"/yonyou/development-process/",titleTag:"原创",categories:["YonYou"],tags:["YonYou"],readingShow:"top"},regularPath:"/59.%E9%A1%B9%E7%9B%AE%E5%B7%A5%E7%A8%8B/10.yonyou/05.YonYou%20-%20%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B.html",relativePath:"59.项目工程/10.yonyou/05.YonYou - 开发流程.md",key:"v-f0f781e2",path:"/yonyou/development-process/",headers:[{level:2,title:"按钮注册",slug:"按钮注册",normalizedTitle:"按钮注册",charIndex:3},{level:2,title:"后端处理",slug:"后端处理",normalizedTitle:"后端处理",charIndex:11}],headersStr:"按钮注册 后端处理",content:" * 按钮注册\n * 后端处理\n\n\n\n\n# 按钮注册\n\n在前端添加一个按钮并不像之前的普通项目，button、文字。而是利用先利用网页创建一个按钮存入数据库，再在自己的项目使用。\n\n * 首先在网页（后端 8088 或者前端 3006）里登录，然后左上角找到 动态建模平台/开发配置/应用管理/应用注册，注册一个按钮，类型是 command，并记住按钮的 key\n\n> 进入 hotwebs/src/模块名/模块名/main/index.js\n\n * URLS 对象中添加后端能响应按钮的 action 类，例子：\n   \n   const URLS = { // 后台请求路径\n       AddUrl: '/nccloud/emm/tang_lsp/AddTang_liuspAction.do', // 新增时请求默认值 Action\n       SaveUrl: '/nccloud/emm/tang_lsp/SaveTang_liuspAction.do', // 保存 Action\n       QueryUrl: '/nccloud/emm/tang_lsp/ListTang_liuspAction.do', // 查询 Action\n       PrintUrl: '/nccloud/emm/tang_lsp/PrintTang_liuspAction.do', // 打印 Action\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   \n\n * ACTIONS 里添加自己的按钮，例子：\n   \n   const ACTIONS = {                   // 按钮编码\n       ADD: 'Add',                     // 新增\n       EDIT: 'Edit',                   // 修改\n       DELETE: 'Delete',               // 删除\n       SAVE: 'Save',                   // 保存\n       CANCEL: 'Cancel',               // 取消\n       REFRESH: 'Refresh',             // 刷新\n       PRINT: 'Print',                 // 打印\n       OUTPUT: 'Output',               // 打印输出\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   \n   \n   key 随便去，规范是大写，然后 value 就是在网页添加按钮的 key。\n\n * 添加按钮的可见性，否则页面上不会显示改按钮，例子：\n   \n   // 按钮显隐性控制\n   this.props.button.setButtonsVisible({\n       [ACTIONS.ADD]: true,\n       [ACTIONS.DELETE]: true,\n       [ACTIONS.EDIT]: isBrowse,\n       [ACTIONS.SAVE]: isEdit,\n       [ACTIONS.CANCEL]: isEdit,\n       [ACTIONS.REFRESH]: isBrowse,\n       [ACTIONS.PRINT]: isBrowse,\n   });\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   \n\n * 添加按钮的点击事件，例子：\n   \n   onButtonClick = (props, btncode, record, index) => {\n       let selectedRows = this.props.editTable.getCheckedRows(this.state.table.area) || [];\n       let pks = selectedRows.length > 0 && selectedRows.map(row => row.data.values[FIELDS.PRIMARYKEY].value);\n       // let { pks } = this.getPksByShowMode();\n       switch (btncode) {\n           case ACTIONS.ADD: // 新增\n               this.onAdd();\n               break;\n           case ACTIONS.EDIT: // 编辑\n               this.onEdit();\n               break;\n           case ACTIONS.DELETE: // 删除\n               record ? this.onRowDelete(record, index) : this.onDelete();\n               break;\n           case ACTIONS.SAVE: // 保存\n               this.onSave();\n               break;\n           case ACTIONS.CANCEL: // 取消\n               this.onCancel();\n               break;\n           case ACTIONS.REFRESH: // 刷新\n               this.onRefresh();\n               break;\n           case ACTIONS.PRINT: // 打印\n               this.onPrint(pks);\n               break;\n           case ACTIONS.OUTPUT: // 打印输出\n               this.onOutPut(pks);\n               break;\n           default:\n               break;\n       }\n   }\n   // 函数太多，这里演示一个\n   onPrint = (pkarray, callback = EMPTY_FN) => {\n       print(\n           'pdf', // 支持两类: 'html' 为模板打印,' pdf' 为 pdf 打印\n           URLS.PrintUrl,  // 打印请求的 url\n           {\n               uncode: this.config.moduleid,   // 功能节点编码\n               nodekey: nodeKey,   // 模板节点标识\n               oids: pkarray   // 需要打印的单据主键\n           }\n       );\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   23\n   24\n   25\n   26\n   27\n   28\n   29\n   30\n   31\n   32\n   33\n   34\n   35\n   36\n   37\n   38\n   39\n   40\n   41\n   42\n   43\n   44\n   45\n   \n   \n   注意：print 内部其实有个 ajax 请求，其中 url 是 URLS.xxx，要能响应后端处理的 Action 类。\n\n\n# 后端处理\n\n按钮注册并且写好了点击事件，下面开始配置后端，放回给前端。\n\n * 找到自己的 public、client、private 模块\n   \n   * public 专门写 Service 接口\n   * client 专门写 Action 类，Action 类类似于 SpringBoot 的 Controller\n   * private 专门 Service 的实现类\n\n * 首先在 client 的 yyconfig 的 action 包添加前端访问的 url 请求\n   \n   <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n   <actions>\n       <action>\n           <name>emm.tang_lsp.SaveTang_liuspAction</name>\n           <label>保存动作</label>\n           <clazz>nccloud.web.emm.tang_lsp.tang_lsp.action.SaveTang_liuspAction</clazz>\n       </action>\n       <action>\n           <name>emm.tang_lsp.Tang_lspTreeRefAction</name>\n           <label>档案特性默认树型参照</label>\n           <clazz>nccloud.web.emm.tang_lsp.tang_lsp.action.Tang_lspTreeRefAction</clazz>\n       </action>\n       <action>\n           <name>emm.tang_lsp.ListTang_liuspAction</name>\n           <label>列表查询动作</label>\n           <clazz>nccloud.web.emm.tang_lsp.tang_lsp.action.ListTang_liuspAction</clazz>\n       </action>\n       <action>\n           <name>emm.tang_lsp.Tang_lspGridRefAction</name>\n           <label>档案特性默认表型参照</label>\n           <clazz>nccloud.web.emm.tang_lsp.tang_lsp.action.Tang_lspGridRefAction</clazz>\n       </action>\n       <action>\n           <name>emm.tang_lsp.Tang_lspDefaultGridRefAction</name>\n           <label>默认表型参照（非档案特性生成）</label>\n           <clazz>nccloud.web.emm.tang_lsp.tang_lsp.action.Tang_lspDefaultGridRefAction</clazz>\n       </action>\n       <action>\n           <name>emm.tang_lsp.AddTang_liuspAction</name>\n           <label>新增动作</label>\n           <clazz>nccloud.web.emm.tang_lsp.tang_lsp.action.AddTang_liuspAction</clazz>\n       </action>\n       <action>\n           <name>emm.tang_lsp.PrintTang_liuspAction</name>\n           <label>打印动作</label>\n           <clazz>nccloud.web.emm.tang_lsp.tang_lsp.action.PrintTang_liuspAction</clazz>\n       </action>\n   </actions>\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   23\n   24\n   25\n   26\n   27\n   28\n   29\n   30\n   31\n   32\n   33\n   34\n   35\n   36\n   37\n   38\n   \n   \n   其中 name 对应前端的 url，前缀 /nccloud 是是项目固定的前缀。\n   \n   当前端的请求对应上某个 name，则去找到对应的 clazz。\n\n * 下面给每个 Action 类进行授权，否则找到 clazz 类，也无法进行处理，在 client 的 yyconfig 的 authorize 包授权\n   \n   <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n   <authorizes>\n       <authorize>\n           <appcode>*</appcode>\n           <actions>\n               <action>emm.tang_lsp.SaveTang_liuspAction</action>\n               <action>emm.tang_lsp.Tang_lspTreeRefAction</action>\n               <action>emm.tang_lsp.ListTang_liuspAction</action>\n               <action>emm.tang_lsp.Tang_lspGridRefAction</action>\n               <action>emm.tang_lsp.Tang_lspDefaultGridRefAction</action>\n               <action>emm.tang_lsp.AddTang_liuspAction</action>\n               <action>emm.tang_lsp.PrintTang_liuspAction</action>\n           </actions>\n       </authorize>\n   </authorizes>\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   \n\n * 然后编写 Action 类，继承 BaseAction：\n   \n   public class ListTang_liuspAction extends BaseAction {\n       @Override\n       public Object doAction(IRequest request, RequstParamWapper paramWapper) throws Throwable{\n   \t\t// ...，调用 Service 实现类\n       }\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   \n\n * Service 实现类与 Dao 层交互，Dao 因为已经封装好了（类似于 Mybatis-Plus），所以继承封装好的 Dao 类即可：\n   \n   public class ServiceImpl extends ServiceSupport implements Service接口 {\n       // ....\n   }\n   \n   \n   1\n   2\n   3\n   ",normalizedContent:" * 按钮注册\n * 后端处理\n\n\n\n\n# 按钮注册\n\n在前端添加一个按钮并不像之前的普通项目，button、文字。而是利用先利用网页创建一个按钮存入数据库，再在自己的项目使用。\n\n * 首先在网页（后端 8088 或者前端 3006）里登录，然后左上角找到 动态建模平台/开发配置/应用管理/应用注册，注册一个按钮，类型是 command，并记住按钮的 key\n\n> 进入 hotwebs/src/模块名/模块名/main/index.js\n\n * urls 对象中添加后端能响应按钮的 action 类，例子：\n   \n   const urls = { // 后台请求路径\n       addurl: '/nccloud/emm/tang_lsp/addtang_liuspaction.do', // 新增时请求默认值 action\n       saveurl: '/nccloud/emm/tang_lsp/savetang_liuspaction.do', // 保存 action\n       queryurl: '/nccloud/emm/tang_lsp/listtang_liuspaction.do', // 查询 action\n       printurl: '/nccloud/emm/tang_lsp/printtang_liuspaction.do', // 打印 action\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   \n\n * actions 里添加自己的按钮，例子：\n   \n   const actions = {                   // 按钮编码\n       add: 'add',                     // 新增\n       edit: 'edit',                   // 修改\n       delete: 'delete',               // 删除\n       save: 'save',                   // 保存\n       cancel: 'cancel',               // 取消\n       refresh: 'refresh',             // 刷新\n       print: 'print',                 // 打印\n       output: 'output',               // 打印输出\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   \n   \n   key 随便去，规范是大写，然后 value 就是在网页添加按钮的 key。\n\n * 添加按钮的可见性，否则页面上不会显示改按钮，例子：\n   \n   // 按钮显隐性控制\n   this.props.button.setbuttonsvisible({\n       [actions.add]: true,\n       [actions.delete]: true,\n       [actions.edit]: isbrowse,\n       [actions.save]: isedit,\n       [actions.cancel]: isedit,\n       [actions.refresh]: isbrowse,\n       [actions.print]: isbrowse,\n   });\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   \n\n * 添加按钮的点击事件，例子：\n   \n   onbuttonclick = (props, btncode, record, index) => {\n       let selectedrows = this.props.edittable.getcheckedrows(this.state.table.area) || [];\n       let pks = selectedrows.length > 0 && selectedrows.map(row => row.data.values[fields.primarykey].value);\n       // let { pks } = this.getpksbyshowmode();\n       switch (btncode) {\n           case actions.add: // 新增\n               this.onadd();\n               break;\n           case actions.edit: // 编辑\n               this.onedit();\n               break;\n           case actions.delete: // 删除\n               record ? this.onrowdelete(record, index) : this.ondelete();\n               break;\n           case actions.save: // 保存\n               this.onsave();\n               break;\n           case actions.cancel: // 取消\n               this.oncancel();\n               break;\n           case actions.refresh: // 刷新\n               this.onrefresh();\n               break;\n           case actions.print: // 打印\n               this.onprint(pks);\n               break;\n           case actions.output: // 打印输出\n               this.onoutput(pks);\n               break;\n           default:\n               break;\n       }\n   }\n   // 函数太多，这里演示一个\n   onprint = (pkarray, callback = empty_fn) => {\n       print(\n           'pdf', // 支持两类: 'html' 为模板打印,' pdf' 为 pdf 打印\n           urls.printurl,  // 打印请求的 url\n           {\n               uncode: this.config.moduleid,   // 功能节点编码\n               nodekey: nodekey,   // 模板节点标识\n               oids: pkarray   // 需要打印的单据主键\n           }\n       );\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   23\n   24\n   25\n   26\n   27\n   28\n   29\n   30\n   31\n   32\n   33\n   34\n   35\n   36\n   37\n   38\n   39\n   40\n   41\n   42\n   43\n   44\n   45\n   \n   \n   注意：print 内部其实有个 ajax 请求，其中 url 是 urls.xxx，要能响应后端处理的 action 类。\n\n\n# 后端处理\n\n按钮注册并且写好了点击事件，下面开始配置后端，放回给前端。\n\n * 找到自己的 public、client、private 模块\n   \n   * public 专门写 service 接口\n   * client 专门写 action 类，action 类类似于 springboot 的 controller\n   * private 专门 service 的实现类\n\n * 首先在 client 的 yyconfig 的 action 包添加前端访问的 url 请求\n   \n   <?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\" ?>\n   <actions>\n       <action>\n           <name>emm.tang_lsp.savetang_liuspaction</name>\n           <label>保存动作</label>\n           <clazz>nccloud.web.emm.tang_lsp.tang_lsp.action.savetang_liuspaction</clazz>\n       </action>\n       <action>\n           <name>emm.tang_lsp.tang_lsptreerefaction</name>\n           <label>档案特性默认树型参照</label>\n           <clazz>nccloud.web.emm.tang_lsp.tang_lsp.action.tang_lsptreerefaction</clazz>\n       </action>\n       <action>\n           <name>emm.tang_lsp.listtang_liuspaction</name>\n           <label>列表查询动作</label>\n           <clazz>nccloud.web.emm.tang_lsp.tang_lsp.action.listtang_liuspaction</clazz>\n       </action>\n       <action>\n           <name>emm.tang_lsp.tang_lspgridrefaction</name>\n           <label>档案特性默认表型参照</label>\n           <clazz>nccloud.web.emm.tang_lsp.tang_lsp.action.tang_lspgridrefaction</clazz>\n       </action>\n       <action>\n           <name>emm.tang_lsp.tang_lspdefaultgridrefaction</name>\n           <label>默认表型参照（非档案特性生成）</label>\n           <clazz>nccloud.web.emm.tang_lsp.tang_lsp.action.tang_lspdefaultgridrefaction</clazz>\n       </action>\n       <action>\n           <name>emm.tang_lsp.addtang_liuspaction</name>\n           <label>新增动作</label>\n           <clazz>nccloud.web.emm.tang_lsp.tang_lsp.action.addtang_liuspaction</clazz>\n       </action>\n       <action>\n           <name>emm.tang_lsp.printtang_liuspaction</name>\n           <label>打印动作</label>\n           <clazz>nccloud.web.emm.tang_lsp.tang_lsp.action.printtang_liuspaction</clazz>\n       </action>\n   </actions>\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   23\n   24\n   25\n   26\n   27\n   28\n   29\n   30\n   31\n   32\n   33\n   34\n   35\n   36\n   37\n   38\n   \n   \n   其中 name 对应前端的 url，前缀 /nccloud 是是项目固定的前缀。\n   \n   当前端的请求对应上某个 name，则去找到对应的 clazz。\n\n * 下面给每个 action 类进行授权，否则找到 clazz 类，也无法进行处理，在 client 的 yyconfig 的 authorize 包授权\n   \n   <?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\" ?>\n   <authorizes>\n       <authorize>\n           <appcode>*</appcode>\n           <actions>\n               <action>emm.tang_lsp.savetang_liuspaction</action>\n               <action>emm.tang_lsp.tang_lsptreerefaction</action>\n               <action>emm.tang_lsp.listtang_liuspaction</action>\n               <action>emm.tang_lsp.tang_lspgridrefaction</action>\n               <action>emm.tang_lsp.tang_lspdefaultgridrefaction</action>\n               <action>emm.tang_lsp.addtang_liuspaction</action>\n               <action>emm.tang_lsp.printtang_liuspaction</action>\n           </actions>\n       </authorize>\n   </authorizes>\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   \n\n * 然后编写 action 类，继承 baseaction：\n   \n   public class listtang_liuspaction extends baseaction {\n       @override\n       public object doaction(irequest request, requstparamwapper paramwapper) throws throwable{\n   \t\t// ...，调用 service 实现类\n       }\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   \n\n * service 实现类与 dao 层交互，dao 因为已经封装好了（类似于 mybatis-plus），所以继承封装好的 dao 类即可：\n   \n   public class serviceimpl extends servicesupport implements service接口 {\n       // ....\n   }\n   \n   \n   1\n   2\n   3\n   ",charsets:{cjk:!0},lastUpdated:"2022/04/05, 14:44:34"},{title:"自我 - 学习线",frontmatter:{title:"自我 - 学习线",date:"2021-11-13T15:09:47.000Z",permalink:"/about/learn-line/",titleTag:"原创",categories:["关于 - 自我"],tags:["关于"],readingShow:"top"},regularPath:"/80.%E5%85%B3%E4%BA%8E/03.%E5%85%B3%E4%BA%8E%20-%20%E8%87%AA%E6%88%91/07.%E8%87%AA%E6%88%91%20-%20%E5%AD%A6%E4%B9%A0%E7%BA%BF.html",relativePath:"80.关于/03.关于 - 自我/07.自我 - 学习线.md",key:"v-07031292",path:"/about/learn-line/",headers:[{level:2,title:"为什么做学习路线",slug:"为什么做学习路线",normalizedTitle:"为什么做学习路线",charIndex:51},{level:2,title:"编程路线",slug:"编程路线",normalizedTitle:"编程路线",charIndex:171},{level:2,title:"后续路线",slug:"后续路线",normalizedTitle:"后续路线",charIndex:4353},{level:2,title:"其他路线",slug:"其他路线",normalizedTitle:"其他路线",charIndex:4870},{level:2,title:"图片路线",slug:"图片路线",normalizedTitle:"图片路线",charIndex:5384}],excerpt:'<div class="custom-block note"><p class="custom-block-title">笔记</p>\n<p>很久之前，我决定踏上的这条路，映照了我与未来的因果。</p>\n<div class="custom-block right">\n<p>2021-11-13 @村长</p>\n</div>\n</div>\n',headersStr:"为什么做学习路线 编程路线 后续路线 其他路线 图片路线",content:"笔记\n\n很久之前，我决定踏上的这条路，映照了我与未来的因果。\n\n2021-11-13 @村长\n\n\n# 为什么做学习路线\n\n * 回忆自己的学习历程，养成好习惯\n\n * 记录路线，以后重塑时可以参考\n\n * 对自己走过的路程有个清晰的梳理，不会担心遗忘\n\n * 后面走的路有个规划，不会迷茫\n\n * 性格原因，喜欢记录\n\n......\n\n\n# 编程路线\n\n学习 Java 的路线非常之多，网上提供的路线有很多，并且内容大抵相同。\n\n这里记录我学习一年多到现在的路线，包括之后的路线规划。\n\n时间线排序规则：升序\n\n路线                         屋子                                  时间                        类型\nJava SE 基础（了解）             《Java 基础入门到精通》                      2019-12                   书籍\nJava SE 基础（深入）             Java300集 - 高琪视频                     2020-02                   视频\n学生信息管理系统                   无地址，控制台数字技术                         2020-06                   项目\nJava FX 桌面开发（GUI）          JavaFX桌面开发(GUI)_52集视频教程             2020-07                   视频\nJava Swing 桌面开发（GUI）       Java Swing入门课程_图形界面GUI编程_100集视频教程   2020-08                   视频\nJava SE 基础（重塑）             培训                                  2020-10 ~ 2021-04         培训/书籍\n仿 QQ 聊天系统（GUI）             自己写，GitHub 地址                       2021-04-31 ~ 2021-05-10   项目\nWeb 前端基础（Html、Css、Js、JQ）   WEB前端零基础入门                          2021-05-24 ~ 2021-06-10   视频\nWeb 后端基础（Servlet、Jsp）      java web零基础入门完整版                    2021-06-10 ~ 2021-06-20   视频\nWeb 前端进阶（PHP、Webpack）      视频已下架                               2021-06-21 ~ 2021-07-12   视频\nDbdToBean（v1.0 ~ v1.1）     自己手写逆向工程                            2021-06-28 ~ 2021-07-05   jar 包\n医院药品管理系统                   让我们从零打造一个基于Springboot2的《医院药品管理系统》   2021-07-16 ~ 2021-07-20   项目/视频\n网上购物商城                     团队写，GitHub 地址                       2021-07-21 ~ 2021-08-03   项目\nJava 框架 SSM                最全SSM框架教程                           2021-07-13 ~ 2021-07-20   视频\nJava 框架 Spring Boot        SpringBoot教程，6小时快速入门                2021-08-01 ~ 2021-08-03   视频\n微信小程序（React + Taro）和后台     团队写，小程序 Github 地址                   2021-08-04 ~ 2021-08-17   项目\nDbdToBean（v1.2）            升级自己写的 jar 包                        2021-08-09                jar 包\nJava 框架 Spring Security    细说SpringSecurity安全框架                2021-08-10 ~ 2021-08-17   视频\n                           spring security源码剖析从入门到精通\nReact                      React技术全家桶                          2021-08-10 ~ 2021-08-26   视频\nVue2 ~ Vue3 基础             Vue2.0+Vue3.0全套教程                   2021-08-19 ~ 2021-08-22   视频\n中医药门户系统                    无地址                                 2021-08-24 ~ 2021-09-01   项目\nJava 面试复习                  Java集合                              2021-09-01 ~ 2021-09-15   视频/文章/书籍\n                           基础、异常、IO流、TCP、servlet、框架均是文章和书籍复习\nJava MySQL 数据库             MySQL高级教程（一）                        2021-09-04 ~ 2021-09-07   视频\n                           MySQL高级教程（二）\nDbdToBean（v1.3）            支持 Spring Boot starter              2021-09-19 ~ 2021-09-24   jar 包\nJava 微服务 Dubbo             Dubbo快速入门                           2021-09-25 ~ 2021-09-27   视频\n                           Dubbo源码分析\n                           彻底精通Dubbo源码\nJava 微服务 Zookeeper         Zookeeper 3.5.7版本教程                 2021-09-28 ~ 2021-09-30   视频\nJava 微服务 全家桶               SpringCloud框架开发                     2021-09-30 ~ 2021-10-06   视频\nLinux                      一周学会Linux                           2021-10-07 ~ 2021-10-12   视频\nJava 数据库 Redis 6           Redis 6 入门到精通                       2021-10-13 ~ 2021-10-16   视频\nJava 中间件 ActiveMQ          ActiveMQ教程                          2021-10-17 ~ 2021-10-20   视频\nT-Beam-REP 后台管理系统          隐私，无地址                              2021-10-20 ~ 2021-11-07   项目\nJava 中间件 RabbitMQ          新版RabbitMQ教程                        2021-11-08 ~ 2021-11-12   视频\nElasticSearch              ElasticSearch教程入门到精通                2021-11-14 ~ 2021-11-18   视频\nDocker                     2021年最新Docker容器技术                   2021-11-19 ~ 2021-11-24   视频\nNginx                      从0到1学会Nginx分布式框架                    2021-11-25 ~ 2021-11-30   视频\nJVM                        尚硅谷宋红康JVM全套教程（详解java虚拟机）            2022-01-15 ~ 2021-02-01   视频\nMaven（重塑）                  maven项目管理从基础到高级                     2022-02-04 ~ 2021-02-05   视频/文章\nGit（重塑）                    Git入门到精通全套教程                        2022-02-06                视频\nJava 8 - 15 新特性            Java 8、9、11 新特性                     2022-02-09 ~ 2022-02-13   视频\n                           Java 10 新特性\n                           Java 12、13 新特性\n                           Java 14 新特性\n                           Java 15 新特性\n\n\n# 后续路线\n\n路线                  完成度\nElasticsearch       done\nDocker              done\nNginx               done\nJVM                 done\nJUC                 none\nMaven（重塑）           done\nGit（重塑）             done\nJava 8 - 15 新特性     done\n设计模式                doing\nMycat               none\nKubernetes          none\n算法                  doing\nSpring 生态源码         none\n2 个项目               none\nElasticsearch（重塑）   none\nwebpack & node      none\n\nElasticsearch（重塑）是我在学完 Elasticsearch 后，依然觉得需要研究的内容还有很多，而规划的。\n\n提供重塑地址：\n\n地址1\n\n地址2\n\n\n# 其他路线\n\n路线               屋子                     时间                  类型\nExcel            Excel零基础入门起步           2018-11             视频\nPhotoshop        敬伟PS教程全集               2018-11 ~ 2019-02   视频\nAdobe Premiere   Pr教程全57集               2019-05             视频\nAfter Effect     AE软件课程入门首选             2019-06             视频\nAdobe Audition   AU全套教程                 2019-07             视频\nAxure            Axure RP7 .0高级全套视频教程   2020-11             视频\nVuePress         搭建vuepress高大上个人博客      2021-10-18          视频\n\n\n# 图片路线\n\n这里提供一些学习时收集并且按照路线学习过的图片\n\n某培训机构前端学习课程：\n\n\n\n某培训结构后端学习课程：\n\n\n\n某培训机构后端学习路线：\n\n",normalizedContent:"笔记\n\n很久之前，我决定踏上的这条路，映照了我与未来的因果。\n\n2021-11-13 @村长\n\n\n# 为什么做学习路线\n\n * 回忆自己的学习历程，养成好习惯\n\n * 记录路线，以后重塑时可以参考\n\n * 对自己走过的路程有个清晰的梳理，不会担心遗忘\n\n * 后面走的路有个规划，不会迷茫\n\n * 性格原因，喜欢记录\n\n......\n\n\n# 编程路线\n\n学习 java 的路线非常之多，网上提供的路线有很多，并且内容大抵相同。\n\n这里记录我学习一年多到现在的路线，包括之后的路线规划。\n\n时间线排序规则：升序\n\n路线                         屋子                                  时间                        类型\njava se 基础（了解）             《java 基础入门到精通》                      2019-12                   书籍\njava se 基础（深入）             java300集 - 高琪视频                     2020-02                   视频\n学生信息管理系统                   无地址，控制台数字技术                         2020-06                   项目\njava fx 桌面开发（gui）          javafx桌面开发(gui)_52集视频教程             2020-07                   视频\njava swing 桌面开发（gui）       java swing入门课程_图形界面gui编程_100集视频教程   2020-08                   视频\njava se 基础（重塑）             培训                                  2020-10 ~ 2021-04         培训/书籍\n仿 qq 聊天系统（gui）             自己写，github 地址                       2021-04-31 ~ 2021-05-10   项目\nweb 前端基础（html、css、js、jq）   web前端零基础入门                          2021-05-24 ~ 2021-06-10   视频\nweb 后端基础（servlet、jsp）      java web零基础入门完整版                    2021-06-10 ~ 2021-06-20   视频\nweb 前端进阶（php、webpack）      视频已下架                               2021-06-21 ~ 2021-07-12   视频\ndbdtobean（v1.0 ~ v1.1）     自己手写逆向工程                            2021-06-28 ~ 2021-07-05   jar 包\n医院药品管理系统                   让我们从零打造一个基于springboot2的《医院药品管理系统》   2021-07-16 ~ 2021-07-20   项目/视频\n网上购物商城                     团队写，github 地址                       2021-07-21 ~ 2021-08-03   项目\njava 框架 ssm                最全ssm框架教程                           2021-07-13 ~ 2021-07-20   视频\njava 框架 spring boot        springboot教程，6小时快速入门                2021-08-01 ~ 2021-08-03   视频\n微信小程序（react + taro）和后台     团队写，小程序 github 地址                   2021-08-04 ~ 2021-08-17   项目\ndbdtobean（v1.2）            升级自己写的 jar 包                        2021-08-09                jar 包\njava 框架 spring security    细说springsecurity安全框架                2021-08-10 ~ 2021-08-17   视频\n                           spring security源码剖析从入门到精通\nreact                      react技术全家桶                          2021-08-10 ~ 2021-08-26   视频\nvue2 ~ vue3 基础             vue2.0+vue3.0全套教程                   2021-08-19 ~ 2021-08-22   视频\n中医药门户系统                    无地址                                 2021-08-24 ~ 2021-09-01   项目\njava 面试复习                  java集合                              2021-09-01 ~ 2021-09-15   视频/文章/书籍\n                           基础、异常、io流、tcp、servlet、框架均是文章和书籍复习\njava mysql 数据库             mysql高级教程（一）                        2021-09-04 ~ 2021-09-07   视频\n                           mysql高级教程（二）\ndbdtobean（v1.3）            支持 spring boot starter              2021-09-19 ~ 2021-09-24   jar 包\njava 微服务 dubbo             dubbo快速入门                           2021-09-25 ~ 2021-09-27   视频\n                           dubbo源码分析\n                           彻底精通dubbo源码\njava 微服务 zookeeper         zookeeper 3.5.7版本教程                 2021-09-28 ~ 2021-09-30   视频\njava 微服务 全家桶               springcloud框架开发                     2021-09-30 ~ 2021-10-06   视频\nlinux                      一周学会linux                           2021-10-07 ~ 2021-10-12   视频\njava 数据库 redis 6           redis 6 入门到精通                       2021-10-13 ~ 2021-10-16   视频\njava 中间件 activemq          activemq教程                          2021-10-17 ~ 2021-10-20   视频\nt-beam-rep 后台管理系统          隐私，无地址                              2021-10-20 ~ 2021-11-07   项目\njava 中间件 rabbitmq          新版rabbitmq教程                        2021-11-08 ~ 2021-11-12   视频\nelasticsearch              elasticsearch教程入门到精通                2021-11-14 ~ 2021-11-18   视频\ndocker                     2021年最新docker容器技术                   2021-11-19 ~ 2021-11-24   视频\nnginx                      从0到1学会nginx分布式框架                    2021-11-25 ~ 2021-11-30   视频\njvm                        尚硅谷宋红康jvm全套教程（详解java虚拟机）            2022-01-15 ~ 2021-02-01   视频\nmaven（重塑）                  maven项目管理从基础到高级                     2022-02-04 ~ 2021-02-05   视频/文章\ngit（重塑）                    git入门到精通全套教程                        2022-02-06                视频\njava 8 - 15 新特性            java 8、9、11 新特性                     2022-02-09 ~ 2022-02-13   视频\n                           java 10 新特性\n                           java 12、13 新特性\n                           java 14 新特性\n                           java 15 新特性\n\n\n# 后续路线\n\n路线                  完成度\nelasticsearch       done\ndocker              done\nnginx               done\njvm                 done\njuc                 none\nmaven（重塑）           done\ngit（重塑）             done\njava 8 - 15 新特性     done\n设计模式                doing\nmycat               none\nkubernetes          none\n算法                  doing\nspring 生态源码         none\n2 个项目               none\nelasticsearch（重塑）   none\nwebpack & node      none\n\nelasticsearch（重塑）是我在学完 elasticsearch 后，依然觉得需要研究的内容还有很多，而规划的。\n\n提供重塑地址：\n\n地址1\n\n地址2\n\n\n# 其他路线\n\n路线               屋子                     时间                  类型\nexcel            excel零基础入门起步           2018-11             视频\nphotoshop        敬伟ps教程全集               2018-11 ~ 2019-02   视频\nadobe premiere   pr教程全57集               2019-05             视频\nafter effect     ae软件课程入门首选             2019-06             视频\nadobe audition   au全套教程                 2019-07             视频\naxure            axure rp7 .0高级全套视频教程   2020-11             视频\nvuepress         搭建vuepress高大上个人博客      2021-10-18          视频\n\n\n# 图片路线\n\n这里提供一些学习时收集并且按照路线学习过的图片\n\n某培训机构前端学习课程：\n\n\n\n某培训结构后端学习课程：\n\n\n\n某培训机构后端学习路线：\n\n",charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"本站 - 介绍",frontmatter:{title:"本站 - 介绍",date:"2021-11-01T11:03:34.000Z",permalink:"/about/website/introduce",categories:["关于 - 本站"],tags:["本站"],readingShow:"top"},regularPath:"/80.%E5%85%B3%E4%BA%8E/06.%E5%85%B3%E4%BA%8E%20-%20%E6%9C%AC%E7%AB%99/01.%E6%9C%AC%E7%AB%99%20-%20%E4%BB%8B%E7%BB%8D.html",relativePath:"80.关于/06.关于 - 本站/01.本站 - 介绍.md",key:"v-79bfbfb5",path:"/about/website/introduce/",headers:[{level:2,title:"由来",slug:"由来",normalizedTitle:"由来",charIndex:3},{level:2,title:"时间线",slug:"时间线",normalizedTitle:"时间线",charIndex:9},{level:2,title:"VuePress介绍",slug:"vuepress介绍",normalizedTitle:"vuepress介绍",charIndex:16},{level:3,title:"它是如何工作的？",slug:"它是如何工作的",normalizedTitle:"它是如何工作的？",charIndex:32},{level:3,title:"为什么不是...?",slug:"为什么不是",normalizedTitle:"为什么不是...?",charIndex:46},{level:3,title:"Nuxt",slug:"nuxt",normalizedTitle:"nuxt",charIndex:61},{level:3,title:"Docsify / Docute",slug:"docsify-docute",normalizedTitle:"docsify / docute",charIndex:71},{level:3,title:"Hexo",slug:"hexo",normalizedTitle:"hexo",charIndex:93},{level:3,title:"GitBook",slug:"gitbook",normalizedTitle:"gitbook",charIndex:103},{level:2,title:"Vdoing介绍",slug:"vdoing介绍",normalizedTitle:"vdoing介绍",charIndex:114},{level:3,title:"主题初衷与诞生",slug:"主题初衷与诞生",normalizedTitle:"主题初衷与诞生",charIndex:128},{level:3,title:"Markdown",slug:"markdown",normalizedTitle:"markdown",charIndex:141},{level:3,title:"知识管理",slug:"知识管理",normalizedTitle:"知识管理",charIndex:155},{level:3,title:"VuePress",slug:"vuepress",normalizedTitle:"vuepress",charIndex:16},{level:3,title:"知识管理&博客主题-Vdoing的诞生",slug:"知识管理-博客主题-vdoing的诞生",normalizedTitle:"知识管理&amp;博客主题-vdoing的诞生",charIndex:null},{level:3,title:"主题名称",slug:"主题名称",normalizedTitle:"主题名称",charIndex:204}],headersStr:"由来 时间线 VuePress介绍 它是如何工作的？ 为什么不是...? Nuxt Docsify / Docute Hexo GitBook Vdoing介绍 主题初衷与诞生 Markdown 知识管理 VuePress 知识管理&博客主题-Vdoing的诞生 主题名称",content:" * 由来\n * 时间线\n * VuePress介绍\n   * 它是如何工作的？\n   * 为什么不是...?\n   * Nuxt\n   * Docsify / Docute\n   * Hexo\n   * GitBook\n * Vdoing介绍\n   * 主题初衷与诞生\n   * Markdown\n   * 知识管理\n   * VuePress\n   * 知识管理&博客主题-Vdoing的诞生\n   * 主题名称\n\n\n\n\n# 由来\n\n我曾经在 B 站学习 Rabbit 消息中间件时，偶然翻了评论区，看到一位 up 的个人博客推荐。心脏骤然跳动间，进去浏览了一番，发现这个博客的 UI 似曾相识。是我喜欢的风格。经过一番寻找，发现了这是由 VuePress 搭建的。于是我有了搭建个人博客的冲动。也慢慢和本站有了缘分😄；\n\n本站使用了 VuePress 进行搭建，属于 Vue 全家桶的一员，它的诞生初衷是为了支持 Vue 及其子项目的文档需求；\n\n快速上手后，我使用了 Vdoing 主题。基于 VuePress 进行了一些功能添加和主题设计，🚀一款简洁高效的VuePress 知识管理&博客 主题。\n\n\n# 时间线\n\n事件          事件\n本站搭建        2021-10-19 下午\nVdoing 主题   2021-10-20 15:04:53\n\n\n# VuePress介绍\n\n前言\n\n以下内容均来自 VuePress 官网\n\n2021-11-01 @村长\n\nVuePress 由两部分组成：第一部分是一个极简静态网站生成器 (opens new window)，它包含由 Vue 驱动的主题系统和插件 API，另一个部分是为书写技术文档而优化的默认主题，它的诞生初衷是为了支持 Vue 及其子项目的文档需求。\n\n每一个由 VuePress 生成的页面都带有预渲染好的 HTML，也因此具有非常好的加载性能和搜索引擎优化（SEO）。同时，一旦页面被加载，Vue 将接管这些静态内容，并将其转换成一个完整的单页应用（SPA），其他的页面则会只在用户浏览到的时候才按需加载。\n\n\n# 它是如何工作的？\n\n事实上，一个 VuePress 网站是一个由 Vue (opens new window)、Vue Router (opens new window)和 webpack (opens new window)驱动的单页应用。如果你以前使用过 Vue 的话，当你在开发一个自定义主题的时候，你会感受到非常熟悉的开发体验，你甚至可以使用 Vue DevTools 去调试你的自定义主题。\n\n在构建时，我们会为应用创建一个服务端渲染（SSR）的版本，然后通过虚拟访问每一条路径来渲染对应的HTML。这种做法的灵感来源于 Nuxt (opens new window)的 nuxt generate 命令，以及其他的一些项目，比如 Gatsby (opens new window)。\n\n\n# 为什么不是...?\n\n\n# Nuxt\n\nVuePress 能做的事情，Nuxt 理论上确实能够胜任，但 Nuxt 是为构建应用程序而生的，而 VuePress 则专注在以内容为中心的静态网站上，同时提供了一些为技术文档定制的开箱即用的特性。\n\n\n# Docsify / Docute\n\n这两个项目同样都是基于 Vue，然而它们都是完全的运行时驱动，因此对 SEO 不够友好。如果你并不关注 SEO，同时也不想安装大量依赖，它们仍然是非常好的选择！\n\n\n# Hexo\n\nHexo 一直驱动着 Vue 的文档 —— 事实上，在把我们的主站从 Hexo 迁移到 VuePress 之前，我们可能还有很长的路要走。Hexo 最大的问题在于他的主题系统太过于静态以及过度地依赖纯字符串，而我们十分希望能够好好地利用 Vue 来处理我们的布局和交互，同时，Hexo 的 Markdown 渲染的配置也不是最灵活的。\n\n\n# GitBook\n\n我们的子项目文档一直都在使用 GitBook。GitBook 最大的问题在于当文件很多时，每次编辑后的重新加载时间长得令人无法忍受。它的默认主题导航结构也比较有限制性，并且，主题系统也不是 Vue 驱动的。GitBook 背后的团队如今也更专注于将其打造为一个商业产品而不是开源工具。\n\n\n# Vdoing介绍\n\nVdoing 全名为 vuepress-theme-vdoing，是一款基于 VuePress 打造的主题\n\n前言\n\n以下内容均来自 Vdoing 官网\n\n2021-11-01 @村长\n\n\n# 主题初衷与诞生\n\n这个主题的初衷是打造一个好用的、面向程序员的知识管理工具。\n\n对于程序员来说，繁杂的知识体系难免会有遗忘的地方。如果有一个方便好用的知识管理工具，可以帮助我们很好的管理知识，并能够快速地把遗忘的知识点找回来。\n\n\n# Markdown\n\n最初接触 Markdown (opens new window) 的时候，我就被它简洁的语法干净的文本结构吸引住，它的代码块和兼容html标签的能力更是让我爱上它，很高兴找到了一个高效记录学习笔记的工具。\n\n\n# 知识管理\n\n在一段学习的日子里，我尝试过用 txt 记录笔记、云笔记、Markdown笔记，并把 Markdown 文件上传到 github 进行管理，但总感觉还是不够方便...直到我发现了 VuePress，它似乎可以管理我的学习笔记，并且把站点部署到 GiHub Pages 不就是一个在线的云笔记网站了吗\n\n\n# VuePress\n\nVuePress (opens new window) 是一个 Vue 驱动的静态网站生成器，正是以 Markdown 为中心的项目结构，它简洁至上的理念正合我心。对于我这个对Vue还算有一些了解的前端，迫不及待的想去使用它来搭建一个我的云笔记网站。\n\n\n# 知识管理&博客主题-Vdoing的诞生\n\n我以前的一个领导和我们说过一个好的知识管理可以帮助我们提高开发质量和开发效率，下面这张图就是他想传达的，我表示赞同：\n\n什么是一个好用的知识管理工具呢？其实我也在不断的寻找和思考中。不过我觉得它至少要结构清晰、管理方便，在查找知识点的过程中可以快速的找到，正像上图所说的要在15秒内找到一个知识点，在添加内容的时候可以很方便的添加，并且保证结构清晰。\n\nVuePress 的官方默认主题是专门为写文档而生的，和我心目中的知识库有一些差距，比如在满足结构清晰这点上，每添加一个内容就得手动的添加侧边栏数据，还有在满足 15 秒内找到一个知识点上还是不够好，因此我觉得需要做一些改造。\n\n在知识管理方面，有三种典型的知识形态：\n\n>  * 结构化：看重知识的条理性和实用性，有一定专业背景才能看懂\n>  * 碎片化：描述具体的知识点，通俗易懂\n>  * 体系化：对某一领域的完整解读，通常是某类知识的专业之作\n\n从这三种知识形态出发，我给主题添加了自动生成结构化侧边栏、目录页、面包屑等等。在满足了结构化之后，写博客应该算得上是一种碎片化的形态，我就给主题添加了分类、标签、归档等等。在满足更方便添加内容上，有了自动生成front matter、批量操作front matter等，更多关于主题的知识从开始使用它去探索吧~~\n\n\n# 主题名称\n\nVdoing，中文大概是维度的意思。起这个名的原因，首先是我看过一个视频《尤雨溪创立vue的心路历程》B站传送 (opens new window)youtube传送 (opens new window)，里面有讲到vue起名的故事，一开始想起的名其实是 Seed.js，但是在npm上被占用了，然后发现vue是一个挺酷的一个词，才决定用 vue。发现大佬起名可以这么酷。再者，这个主题我想它可以多维度的快速寻找一个知识点，要么就叫维度吧，那英文名就用 Vdoing 好了...\n\n尾语\n\n尝试，即是走向成功。\n\n2021-11-01 @村长",normalizedContent:" * 由来\n * 时间线\n * vuepress介绍\n   * 它是如何工作的？\n   * 为什么不是...?\n   * nuxt\n   * docsify / docute\n   * hexo\n   * gitbook\n * vdoing介绍\n   * 主题初衷与诞生\n   * markdown\n   * 知识管理\n   * vuepress\n   * 知识管理&博客主题-vdoing的诞生\n   * 主题名称\n\n\n\n\n# 由来\n\n我曾经在 b 站学习 rabbit 消息中间件时，偶然翻了评论区，看到一位 up 的个人博客推荐。心脏骤然跳动间，进去浏览了一番，发现这个博客的 ui 似曾相识。是我喜欢的风格。经过一番寻找，发现了这是由 vuepress 搭建的。于是我有了搭建个人博客的冲动。也慢慢和本站有了缘分😄；\n\n本站使用了 vuepress 进行搭建，属于 vue 全家桶的一员，它的诞生初衷是为了支持 vue 及其子项目的文档需求；\n\n快速上手后，我使用了 vdoing 主题。基于 vuepress 进行了一些功能添加和主题设计，🚀一款简洁高效的vuepress 知识管理&博客 主题。\n\n\n# 时间线\n\n事件          事件\n本站搭建        2021-10-19 下午\nvdoing 主题   2021-10-20 15:04:53\n\n\n# vuepress介绍\n\n前言\n\n以下内容均来自 vuepress 官网\n\n2021-11-01 @村长\n\nvuepress 由两部分组成：第一部分是一个极简静态网站生成器 (opens new window)，它包含由 vue 驱动的主题系统和插件 api，另一个部分是为书写技术文档而优化的默认主题，它的诞生初衷是为了支持 vue 及其子项目的文档需求。\n\n每一个由 vuepress 生成的页面都带有预渲染好的 html，也因此具有非常好的加载性能和搜索引擎优化（seo）。同时，一旦页面被加载，vue 将接管这些静态内容，并将其转换成一个完整的单页应用（spa），其他的页面则会只在用户浏览到的时候才按需加载。\n\n\n# 它是如何工作的？\n\n事实上，一个 vuepress 网站是一个由 vue (opens new window)、vue router (opens new window)和 webpack (opens new window)驱动的单页应用。如果你以前使用过 vue 的话，当你在开发一个自定义主题的时候，你会感受到非常熟悉的开发体验，你甚至可以使用 vue devtools 去调试你的自定义主题。\n\n在构建时，我们会为应用创建一个服务端渲染（ssr）的版本，然后通过虚拟访问每一条路径来渲染对应的html。这种做法的灵感来源于 nuxt (opens new window)的 nuxt generate 命令，以及其他的一些项目，比如 gatsby (opens new window)。\n\n\n# 为什么不是...?\n\n\n# nuxt\n\nvuepress 能做的事情，nuxt 理论上确实能够胜任，但 nuxt 是为构建应用程序而生的，而 vuepress 则专注在以内容为中心的静态网站上，同时提供了一些为技术文档定制的开箱即用的特性。\n\n\n# docsify / docute\n\n这两个项目同样都是基于 vue，然而它们都是完全的运行时驱动，因此对 seo 不够友好。如果你并不关注 seo，同时也不想安装大量依赖，它们仍然是非常好的选择！\n\n\n# hexo\n\nhexo 一直驱动着 vue 的文档 —— 事实上，在把我们的主站从 hexo 迁移到 vuepress 之前，我们可能还有很长的路要走。hexo 最大的问题在于他的主题系统太过于静态以及过度地依赖纯字符串，而我们十分希望能够好好地利用 vue 来处理我们的布局和交互，同时，hexo 的 markdown 渲染的配置也不是最灵活的。\n\n\n# gitbook\n\n我们的子项目文档一直都在使用 gitbook。gitbook 最大的问题在于当文件很多时，每次编辑后的重新加载时间长得令人无法忍受。它的默认主题导航结构也比较有限制性，并且，主题系统也不是 vue 驱动的。gitbook 背后的团队如今也更专注于将其打造为一个商业产品而不是开源工具。\n\n\n# vdoing介绍\n\nvdoing 全名为 vuepress-theme-vdoing，是一款基于 vuepress 打造的主题\n\n前言\n\n以下内容均来自 vdoing 官网\n\n2021-11-01 @村长\n\n\n# 主题初衷与诞生\n\n这个主题的初衷是打造一个好用的、面向程序员的知识管理工具。\n\n对于程序员来说，繁杂的知识体系难免会有遗忘的地方。如果有一个方便好用的知识管理工具，可以帮助我们很好的管理知识，并能够快速地把遗忘的知识点找回来。\n\n\n# markdown\n\n最初接触 markdown (opens new window) 的时候，我就被它简洁的语法干净的文本结构吸引住，它的代码块和兼容html标签的能力更是让我爱上它，很高兴找到了一个高效记录学习笔记的工具。\n\n\n# 知识管理\n\n在一段学习的日子里，我尝试过用 txt 记录笔记、云笔记、markdown笔记，并把 markdown 文件上传到 github 进行管理，但总感觉还是不够方便...直到我发现了 vuepress，它似乎可以管理我的学习笔记，并且把站点部署到 gihub pages 不就是一个在线的云笔记网站了吗\n\n\n# vuepress\n\nvuepress (opens new window) 是一个 vue 驱动的静态网站生成器，正是以 markdown 为中心的项目结构，它简洁至上的理念正合我心。对于我这个对vue还算有一些了解的前端，迫不及待的想去使用它来搭建一个我的云笔记网站。\n\n\n# 知识管理&博客主题-vdoing的诞生\n\n我以前的一个领导和我们说过一个好的知识管理可以帮助我们提高开发质量和开发效率，下面这张图就是他想传达的，我表示赞同：\n\n什么是一个好用的知识管理工具呢？其实我也在不断的寻找和思考中。不过我觉得它至少要结构清晰、管理方便，在查找知识点的过程中可以快速的找到，正像上图所说的要在15秒内找到一个知识点，在添加内容的时候可以很方便的添加，并且保证结构清晰。\n\nvuepress 的官方默认主题是专门为写文档而生的，和我心目中的知识库有一些差距，比如在满足结构清晰这点上，每添加一个内容就得手动的添加侧边栏数据，还有在满足 15 秒内找到一个知识点上还是不够好，因此我觉得需要做一些改造。\n\n在知识管理方面，有三种典型的知识形态：\n\n>  * 结构化：看重知识的条理性和实用性，有一定专业背景才能看懂\n>  * 碎片化：描述具体的知识点，通俗易懂\n>  * 体系化：对某一领域的完整解读，通常是某类知识的专业之作\n\n从这三种知识形态出发，我给主题添加了自动生成结构化侧边栏、目录页、面包屑等等。在满足了结构化之后，写博客应该算得上是一种碎片化的形态，我就给主题添加了分类、标签、归档等等。在满足更方便添加内容上，有了自动生成front matter、批量操作front matter等，更多关于主题的知识从开始使用它去探索吧~~\n\n\n# 主题名称\n\nvdoing，中文大概是维度的意思。起这个名的原因，首先是我看过一个视频《尤雨溪创立vue的心路历程》b站传送 (opens new window)youtube传送 (opens new window)，里面有讲到vue起名的故事，一开始想起的名其实是 seed.js，但是在npm上被占用了，然后发现vue是一个挺酷的一个词，才决定用 vue。发现大佬起名可以这么酷。再者，这个主题我想它可以多维度的快速寻找一个知识点，要么就叫维度吧，那英文名就用 vdoing 好了...\n\n尾语\n\n尝试，即是走向成功。\n\n2021-11-01 @村长",charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"自我 - 尊贵公子",frontmatter:{title:"自我 - 尊贵公子",date:"2022-02-19T19:01:31.000Z",permalink:"/about/qin-yu/",private:!0,titleTag:"原创",categories:["关于 - 自我"],tags:["关于"],readingShow:"top"},regularPath:"/80.%E5%85%B3%E4%BA%8E/03.%E5%85%B3%E4%BA%8E%20-%20%E8%87%AA%E6%88%91/09.%E8%87%AA%E6%88%91%20-%20%E5%B0%8A%E8%B4%B5%E5%85%AC%E5%AD%90.html",relativePath:"80.关于/03.关于 - 自我/09.自我 - 尊贵公子.md",key:"v-8acbb556",path:"/about/qin-yu/",headersStr:null,content:"笔记\n\n记录大学的一位朋友。\n\n2022-02-19 @村长\n\n他带着一副金珠渡边的金黄色框眼镜，一圈圈复杂的纹路刻在上面，仿佛上世纪盛行的被无数绅士追捧的饰品，优雅又高贵。他时不时哼上几句流行的歌曲，伴随着微风吹走微热躁动的空气，引起头顶电风扇的共鸣。他双眼微眯，手随着歌曲不自觉的轻敲着桌子，某种旋律浅浅地向天空盘旋，像是沉迷在自己的世界里，开着许多人渴望却止步的演唱会，享受着台下的尖叫声和五颜六色的拥有魔力的聚光灯。风骤然剧烈，吹过他骄傲的经过高级理发师精心修理的时尚的头发，发泽乌黑，略带桀骜的纹边，就像少年嘴角的笑，随风摇荡，肆意张扬。\n\n哼完几句歌，于是他趴在放满书的岁月雕刻的桌子上，双手微掩着脸，兴许是累了，趴了一会，他粗重的呼吸缓缓变轻，像是暴风雨过后的水面，归于平静。\n\n我看着他的侧脸愣了愣神，岁月似乎从未在他的略瘦的英俊的脸留下痕迹，反而衬托得愈发灿烂，如同太阳下的少年手上的钻石，散发着昏眩的金光。他的脸上的线条菱角分明，像是上帝亲手刻的一幅画，掉落人间。我想，他一定与众不凡。\n\n我拿起空白的笔记本的一页，轻轻的写下：遇见了一个与众不凡的人，也许在未来或者不久之后会遇见并且相识，我相信，我会被他的一切折服。记 —— 2018.9.23\n\n寥寥几十个字仿佛深深刻印在了笔记本里，我正要起身离开，余光正好见他缩回了倚靠着脸的左手，我随意一瞥，看到写在他书本上的两个字，大气磅礴。\n\n秦宇!\n\n我轻轻笑了笑，收拾手中的和桌子的书，离开了这间教室。越走越远，我看向远方，有人在那里等着我。",normalizedContent:"笔记\n\n记录大学的一位朋友。\n\n2022-02-19 @村长\n\n他带着一副金珠渡边的金黄色框眼镜，一圈圈复杂的纹路刻在上面，仿佛上世纪盛行的被无数绅士追捧的饰品，优雅又高贵。他时不时哼上几句流行的歌曲，伴随着微风吹走微热躁动的空气，引起头顶电风扇的共鸣。他双眼微眯，手随着歌曲不自觉的轻敲着桌子，某种旋律浅浅地向天空盘旋，像是沉迷在自己的世界里，开着许多人渴望却止步的演唱会，享受着台下的尖叫声和五颜六色的拥有魔力的聚光灯。风骤然剧烈，吹过他骄傲的经过高级理发师精心修理的时尚的头发，发泽乌黑，略带桀骜的纹边，就像少年嘴角的笑，随风摇荡，肆意张扬。\n\n哼完几句歌，于是他趴在放满书的岁月雕刻的桌子上，双手微掩着脸，兴许是累了，趴了一会，他粗重的呼吸缓缓变轻，像是暴风雨过后的水面，归于平静。\n\n我看着他的侧脸愣了愣神，岁月似乎从未在他的略瘦的英俊的脸留下痕迹，反而衬托得愈发灿烂，如同太阳下的少年手上的钻石，散发着昏眩的金光。他的脸上的线条菱角分明，像是上帝亲手刻的一幅画，掉落人间。我想，他一定与众不凡。\n\n我拿起空白的笔记本的一页，轻轻的写下：遇见了一个与众不凡的人，也许在未来或者不久之后会遇见并且相识，我相信，我会被他的一切折服。记 —— 2018.9.23\n\n寥寥几十个字仿佛深深刻印在了笔记本里，我正要起身离开，余光正好见他缩回了倚靠着脸的左手，我随意一瞥，看到写在他书本上的两个字，大气磅礴。\n\n秦宇!\n\n我轻轻笑了笑，收拾手中的和桌子的书，离开了这间教室。越走越远，我看向远方，有人在那里等着我。",charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"自我 - 温润少年",frontmatter:{title:"自我 - 温润少年",date:"2022-02-19T19:05:15.000Z",permalink:"/about/liang-shi-bo/",private:!0,titleTag:"原创",categories:["关于 - 自我"],tags:["关于"],readingShow:"top"},regularPath:"/80.%E5%85%B3%E4%BA%8E/03.%E5%85%B3%E4%BA%8E%20-%20%E8%87%AA%E6%88%91/11.%E8%87%AA%E6%88%91%20-%20%E6%B8%A9%E6%B6%A6%E5%B0%91%E5%B9%B4.html",relativePath:"80.关于/03.关于 - 自我/11.自我 - 温润少年.md",key:"v-5f8704ae",path:"/about/liang-shi-bo/",headersStr:null,content:"笔记\n\n记录大学的一位朋友。\n\n2022-02-19 @村长\n\n他穿着件黄色的短袖，以及灰白色的黑条纹刻边的长裤，遮住了瘦弱的令无数女生嫉妒羡慕的身躯。他戴着普通平凡的没有更换过的蓝色口罩，微露的脸颊两侧有了些许岁月的刻痕。教室的电风扇彼此呼应，共鸣而出的风声又被其旋转绞灭，而卷起的风，轻轻地划过他的头发，色泽发黑，精短清爽，他仿佛遥远的大山的放牧的少年，坐着草地上，轻轻吹着笛声，悠远深情。\n\n此时的他微低着头，眼睛前的概率笔记时不时被他纤细的手往前翻开，笔记的内容仿佛汪洋大海，又仿佛一曲音符，被他缓慢的吸收吐纳。他习惯性的抖着腿，淡蓝色花纹圈住的黑色的镜框点缀了他干净的双眼，也藏不住他对知识的渴望和生命的认知。他恬静优雅，周围的声音似乎无法进入他的世界，扰乱接受知识的心神。徒然间，他皱了皱眉，双腿抖动的频率愈发加快，嘴里喃喃自语，似是遇到了阻碍，微眯着的双眼一点点亮光出现，慢慢照亮前方的那堵墙，分析它的结构，一一分解，逐个击破。\n\n我看了看他的侧脸，有些愣神，他学习的认真似乎让我回到了那个青葱的无比怀念的年代，那时候的我也是如此，揣怀着梦想，在灿烂的阳光下肆意迸发，在油绿的草地里畅意飞奔，在狭隘的空间中无限延伸。看着他，我希望他能一直保持这份在晦暗交错的大时代下的少年精神。\n\n我拿起空白的练习册的一页，轻轻的写下：遇见了一个与众不凡的人，也许在未来或者不久之后会遇见并且相识，我相信，我会被他的一切折服。记 —— 2020.5.18\n\n寥寥几个字深深刻在了练习册里，此时早晨的阳光照进了教室，风扇割裂着它，却让狂暴的风逐渐柔和，暖进每个人的肌肤。我正要起身离开，余光正好见他轻轻地翻到了第一页，我随意一瞥，看到写在他笔记本上的三个字，温润如玉。\n\n梁师博!\n\n我轻轻笑了笑，收拾手中的和桌子的书，离开了这间教室。越走越远，我看向远方，有人在那里等着我。",normalizedContent:"笔记\n\n记录大学的一位朋友。\n\n2022-02-19 @村长\n\n他穿着件黄色的短袖，以及灰白色的黑条纹刻边的长裤，遮住了瘦弱的令无数女生嫉妒羡慕的身躯。他戴着普通平凡的没有更换过的蓝色口罩，微露的脸颊两侧有了些许岁月的刻痕。教室的电风扇彼此呼应，共鸣而出的风声又被其旋转绞灭，而卷起的风，轻轻地划过他的头发，色泽发黑，精短清爽，他仿佛遥远的大山的放牧的少年，坐着草地上，轻轻吹着笛声，悠远深情。\n\n此时的他微低着头，眼睛前的概率笔记时不时被他纤细的手往前翻开，笔记的内容仿佛汪洋大海，又仿佛一曲音符，被他缓慢的吸收吐纳。他习惯性的抖着腿，淡蓝色花纹圈住的黑色的镜框点缀了他干净的双眼，也藏不住他对知识的渴望和生命的认知。他恬静优雅，周围的声音似乎无法进入他的世界，扰乱接受知识的心神。徒然间，他皱了皱眉，双腿抖动的频率愈发加快，嘴里喃喃自语，似是遇到了阻碍，微眯着的双眼一点点亮光出现，慢慢照亮前方的那堵墙，分析它的结构，一一分解，逐个击破。\n\n我看了看他的侧脸，有些愣神，他学习的认真似乎让我回到了那个青葱的无比怀念的年代，那时候的我也是如此，揣怀着梦想，在灿烂的阳光下肆意迸发，在油绿的草地里畅意飞奔，在狭隘的空间中无限延伸。看着他，我希望他能一直保持这份在晦暗交错的大时代下的少年精神。\n\n我拿起空白的练习册的一页，轻轻的写下：遇见了一个与众不凡的人，也许在未来或者不久之后会遇见并且相识，我相信，我会被他的一切折服。记 —— 2020.5.18\n\n寥寥几个字深深刻在了练习册里，此时早晨的阳光照进了教室，风扇割裂着它，却让狂暴的风逐渐柔和，暖进每个人的肌肤。我正要起身离开，余光正好见他轻轻地翻到了第一页，我随意一瞥，看到写在他笔记本上的三个字，温润如玉。\n\n梁师博!\n\n我轻轻笑了笑，收拾手中的和桌子的书，离开了这间教室。越走越远，我看向远方，有人在那里等着我。",charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"本站 - 规划",frontmatter:{title:"本站 - 规划",date:"2021-11-01T12:02:37.000Z",permalink:"/about/website/plan/",titleTag:"原创",categories:["关于 - 本站"],tags:["本站"],readingShow:"top"},regularPath:"/80.%E5%85%B3%E4%BA%8E/06.%E5%85%B3%E4%BA%8E%20-%20%E6%9C%AC%E7%AB%99/02.%E6%9C%AC%E7%AB%99%20-%20%E8%A7%84%E5%88%92.html",relativePath:"80.关于/06.关于 - 本站/02.本站 - 规划.md",key:"v-7f551c36",path:"/about/website/plan/",headers:[{level:2,title:"规划",slug:"规划",normalizedTitle:"规划",charIndex:3},{level:2,title:"参数",slug:"参数",normalizedTitle:"参数",charIndex:9}],excerpt:'<p><div class="table-of-contents"><ul></ul></div></p>\n<div class="custom-block note"><p class="custom-block-title">序言</p>\n<p>完整的规划，勾勒未来的笔。</p>\n<div class="custom-block right">\n<p>2021-11-01 @村长</p>\n</div>\n</div>\n',headersStr:"规划 参数",content:" * 规划\n * 参数\n\n\n\n序言\n\n完整的规划，勾勒未来的笔。\n\n2021-11-01 @村长\n\n\n# 规划\n\n这里是本站搭建后的一些构思规划。因为搭建期间包括后面有很多事情要忙，所以先构思一些规划，等到空闲下来，慢慢完成。\n\n后期也会添加更多的规划内容。\n\n规划          完成      构思时间         完成时间                      备注\n添加本站的早期搭建   done    2021-10-20   2021-11-01                \n添加本站的主题搭建   done    2021-10-01   2021-11-07                \n添加本站的部署过程   none    2021-10-20   2021-11-01 ~ 2021-11-02   \n分享本站的插件     doing   2021-10-20   2021-11-29 ~              \n添加音乐自选功能    none    2021-10-20   2021-01-04                \n添加分享功能      none    2021-10-20                             \n动态title功能   done    2021-10-20   2021-01-04                \n网站百宝箱设计     done    2021-11-01   2021-01-04 ~ 2021-01-21   \n网站站点模块      done    2021-12-20   2021-01-01 ~ 2021-01-03   \n\n\n# 参数\n\n * 规划\n   \n   计划未来完成的事件。\n\n * 完成\n   \n   done：已经完成\n   \n   doing：正在完成\n   \n   none：未开始\n\n * 构思时间\n   \n   计划的时间，原本想精确到秒。细想还是到日期即可。\n\n * 完成时间\n   \n   如果完成的时间很长，则是一个范围，否则就是某一天。\n\n * 备注\n   \n   未开始的情况、完成中的情况、完成后的文档链接。",normalizedContent:" * 规划\n * 参数\n\n\n\n序言\n\n完整的规划，勾勒未来的笔。\n\n2021-11-01 @村长\n\n\n# 规划\n\n这里是本站搭建后的一些构思规划。因为搭建期间包括后面有很多事情要忙，所以先构思一些规划，等到空闲下来，慢慢完成。\n\n后期也会添加更多的规划内容。\n\n规划          完成      构思时间         完成时间                      备注\n添加本站的早期搭建   done    2021-10-20   2021-11-01                \n添加本站的主题搭建   done    2021-10-01   2021-11-07                \n添加本站的部署过程   none    2021-10-20   2021-11-01 ~ 2021-11-02   \n分享本站的插件     doing   2021-10-20   2021-11-29 ~              \n添加音乐自选功能    none    2021-10-20   2021-01-04                \n添加分享功能      none    2021-10-20                             \n动态title功能   done    2021-10-20   2021-01-04                \n网站百宝箱设计     done    2021-11-01   2021-01-04 ~ 2021-01-21   \n网站站点模块      done    2021-12-20   2021-01-01 ~ 2021-01-03   \n\n\n# 参数\n\n * 规划\n   \n   计划未来完成的事件。\n\n * 完成\n   \n   done：已经完成\n   \n   doing：正在完成\n   \n   none：未开始\n\n * 构思时间\n   \n   计划的时间，原本想精确到秒。细想还是到日期即可。\n\n * 完成时间\n   \n   如果完成的时间很长，则是一个范围，否则就是某一天。\n\n * 备注\n   \n   未开始的情况、完成中的情况、完成后的文档链接。",charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"本站 - 搭建",frontmatter:{title:"本站 - 搭建",date:"2021-10-31T14:54:34.000Z",permalink:"/about/website/build/",titleTag:"原创",categories:["关于 - 本站"],tags:["本站"],readingShow:"top"},regularPath:"/80.%E5%85%B3%E4%BA%8E/06.%E5%85%B3%E4%BA%8E%20-%20%E6%9C%AC%E7%AB%99/05.%E6%9C%AC%E7%AB%99%20-%20%E6%90%AD%E5%BB%BA.html",relativePath:"80.关于/06.关于 - 本站/05.本站 - 搭建.md",key:"v-1c79a5da",path:"/about/website/build/",headers:[{level:2,title:"博客选择",slug:"博客选择",normalizedTitle:"博客选择",charIndex:3},{level:2,title:"文档说明",slug:"文档说明",normalizedTitle:"文档说明",charIndex:11},{level:2,title:"版本要求",slug:"版本要求",normalizedTitle:"版本要求",charIndex:19},{level:2,title:"node和npm更新",slug:"node和npm更新",normalizedTitle:"node和npm更新",charIndex:27},{level:2,title:"vuepress安装",slug:"vuepress安装",normalizedTitle:"vuepress安装",charIndex:41},{level:2,title:"核心配置",slug:"核心配置",normalizedTitle:"核心配置",charIndex:55},{level:2,title:"导航栏",slug:"导航栏",normalizedTitle:"导航栏",charIndex:63},{level:3,title:"导航显示",slug:"导航显示",normalizedTitle:"导航显示",charIndex:72},{level:3,title:"永久连接",slug:"永久连接",normalizedTitle:"永久连接",charIndex:82},{level:2,title:"侧边栏",slug:"侧边栏",normalizedTitle:"侧边栏",charIndex:90},{level:3,title:"自动生成侧边栏",slug:"自动生成侧边栏",normalizedTitle:"自动生成侧边栏",charIndex:99},{level:3,title:"禁用侧边栏",slug:"禁用侧边栏",normalizedTitle:"禁用侧边栏",charIndex:112},{level:2,title:"静态资源配置",slug:"静态资源配置",normalizedTitle:"静态资源配置",charIndex:121}],excerpt:'<p><div class="table-of-contents"><ul></ul></div></p>\n<div class="custom-block note"><p class="custom-block-title">笔记</p>\n<p>本站使用了 VuePress 进行搭建，属于 Vue 全家桶的一员，旨在搭建个人的静态博客。</p>\n<p>我第一次接触 Vue，就喜欢 Vue 的简洁。虽然没有 CSDN 等平台的流量，但我喜欢一个人享受。</p>\n<div class="custom-block right">\n<p>2021-10-31 @村长</p>\n</div>\n</div>\n',headersStr:"博客选择 文档说明 版本要求 node和npm更新 vuepress安装 核心配置 导航栏 导航显示 永久连接 侧边栏 自动生成侧边栏 禁用侧边栏 静态资源配置",content:" * 博客选择\n * 文档说明\n * 版本要求\n * node和npm更新\n * vuepress安装\n * 核心配置\n * 导航栏\n   * 导航显示\n   * 永久连接\n * 侧边栏\n   * 自动生成侧边栏\n   * 禁用侧边栏\n * 静态资源配置\n\n\n\n笔记\n\n本站使用了 VuePress 进行搭建，属于 Vue 全家桶的一员，旨在搭建个人的静态博客。\n\n我第一次接触 Vue，就喜欢 Vue 的简洁。虽然没有 CSDN 等平台的流量，但我喜欢一个人享受。\n\n2021-10-31 @村长\n\n\n# 博客选择\n\n * 平台博客有：CSDN、博客园、简书、掘金、知乎、微博、豆瓣等\n\n * 个人博客有：Wordpress、Typecho、Hexo、VuePress 等\n\n平台博客具有高流量，更新便捷、社区活跃、多主题模板、UI 成熟、社交完善等功能。不喜欢折腾可以选择该类。\n\n个人博客具有可定制性高、有独立域名、自由等功能、缺点是维护繁琐、上限极高，下限极低，博客设计的好坏与否很大程度上依赖搭建者自身的审美水平。\n\n建议使用个人博客的伙伴，多去看其他优秀个人博客的 UI、功能等设计，汲取营养。\n\n\n# 文档说明\n\n本文档仅仅是 VuePress 的快速搭建，并未涉及到本站的主题搭建，根据本文搭建的博客风格与本站略有所区别。\n\nVuePress 本身并未提供作者信息、面包屑、主题模式、右侧目录等功能，而本站所用的主题已经实现了这一些优秀的功能以及其他功能。\n\n主题的搭建具体看 本站 - 主题\n\n注意\n\n主题的搭建是基于 VuePress，所以前提是至少会 VuePress 的基本使用和默认主题的基本配置。\n\n2021-11-01 @村长\n\n\n# 版本要求\n\n要求\n\nVuePress 要求你的 Noed.js 版本 >= 8.6\n\n2021-10-31 @村长\n\n\n# node和npm更新\n\n * 更新 npm\n   \n   npm undate -g\n   \n   \n   1\n   \n\n * 更新node\n   \n   1. 安装 node 版本管理工具 n\n      \n      npm install n -g\n      \n      \n      1\n      \n   \n   2. 使用 n 进行更新\n      \n      # 安装node最新版本\n      n stable  \n      \n      # 安装node指定版本10.14.1\n      n v10.14.1\n      \n      \n      1\n      2\n      3\n      4\n      5\n      \n\n\n# vuepress安装\n\n * 全局安装 VuePress\n   \n   yarn global add vuepress\n   \n   \n   1\n   \n   \n   npm install -g vuepress\n   \n   \n   1\n   \n\n * 创建一个文件夹当作博客的根目录\n   \n   mkdir vuepress-doc\n   # 该目录作为博客的项目目录\n   # 名字自定义，我的是 myNotes\n   \n   \n   1\n   2\n   3\n   \n\n * 进入该目录进行初始化\n   \n   cd vuepress-doc\n   yarn init -y # 或者 npm init -y\n   \n   \n   1\n   2\n   \n   \n   初始化后在根目录下生成一个 package.json 文件\n\n接下来要知道官方推荐的目录结构，下面的内容都是基于目录结构创建的\n\n根目录 (vuepress-doc)\n├── docs\n│   ├── .vuepress (可选的)\n│   │   ├── components (可选的)\n│   │   ├── theme (可选的)\n│   │   │   └── Layout.vue\n│   │   ├── public (可选的)\n│   │   ├── styles (可选的)\n│   │   │   ├── index.styl\n│   │   │   └── palette.styl\n│   │   ├── templates (可选的, 谨慎配置)\n│   │   │   ├── dev.html\n│   │   │   └── ssr.html\n│   │   ├── config.js (可选的)\n│   │   └── enhanceApp.js (可选的)\n│   │ \n│   ├── README.md\n│   ├── guide\n│   │   └── README.md\n│   └── config.md\n│ \n└── package.json\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n目录介绍\n * docs/.vuepress: 用于存放全局的配置、组件、静态资源等。\n * docs/.vuepress/components: 该目录中的 Vue 组件将会被自动注册为全局组件。\n * docs/.vuepress/theme: 用于存放本地主题。\n * docs/.vuepress/styles: 用于存放样式相关的文件。\n * docs/.vuepress/styles/index.styl: 将会被自动应用的全局样式文件，会生成在最终的 CSS 文件结尾，具有比默认样式更高的优先级。\n * docs/.vuepress/styles/palette.styl: 用于重写默认颜色常量，或者设置新的 stylus 颜色常量。\n * docs/.vuepress/public: 静态资源目录。\n * docs/.vuepress/templates: 存储 HTML 模板文件。\n * docs/.vuepress/templates/dev.html: 用于开发环境的 HTML 模板文件。\n * docs/.vuepress/templates/ssr.html: 构建时基于 Vue SSR 的 HTML 模板文件。\n * docs/.vuepress/config.js: 配置文件的入口文件，也可以是 YML 或 toml。\n * docs/.vuepress/enhanceApp.js: 客户端应用的增强。\n\n * 在根目录下创建 dosc 目录\n   \n   mkdir docs\n   # 主要存放博客的配置或者文档\n   \n   \n   1\n   2\n   \n\n * 进入 docs 目录，创建 README.md 文档。内容如下：\n   \n   ---\n   home: true\n   heroImage: /logo.jpg\n   actionText: 快速上手 →\n   actionLink: /zh/guide/\n   features:\n   - title: 简洁至上\n     details: 以 Markdown 为中心的项目结构，以最少的配置帮助你专注于写作。\n   - title: Vue驱动\n     details: 享受 Vue + webpack 的开发体验，在 Markdown 中使用 Vue 组件，同时可以使用 Vue 来开发自定义主题。\n   - title: 高性能\n     details: VuePress 为每个页面预渲染生成静态的 HTML，同时在页面被加载的时候，将作为 SPA 运行。\n   footer: MIT Licensed | Copyright © 2018-present Evan You\n   ---\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   \n   \n   你会发现，内容对应着 VuePress 官网的入口页面\n\n\n# 核心配置\n\n注意\n\n熟记上方官方推荐的目录结构，下面的内容都是基于目录结构创建的。\n\n2021-10-31 @村长\n\n * 在 docs 目录下创建 .vuepress 目录\n   \n   cd docs\n   mkdir .vuepress\n   \n   \n   1\n   2\n   \n\n * 新建总配置文件config.js\n   \n   cd .vuepress\n   touch config.js\n   \n   \n   1\n   2\n   \n   \n   config 是整个项目的核心配置文件，所有菜单、栏目相关的配置均配置在该模块中。\n\n * config.js 添加内容：（记得看注释）\n   \n   module.exports = {\n       title: '村长 Blog',  // 首页居中标题\n       description: '这个舞台将会被你的才华踩在脚下，同时你也会把它带到一个新的高度！', // 首页居中文字\n       base: '/', // 格式：'/<仓库名>/'， 默认'/'\n       dest: './dist',  // 打包够的位置。这里是 .vuepress 目录下\n       port: '6486',\t // 端口\n       markdown: {\n           lineNumbers: true, // 显示代码块的行号\n       },\n       head:[\n           ['link', { rel: 'icon', href: '/img/favicon.ico' }], // public目录下的img目录内的图标\n           ['meta',{\n               name: 'keywords',\n               content: 'Young Kbt个人博客，VuePress搭建，学习Java、web、框架、微服务、工具、前端等相关知识',\n           },\n           ],\n       ],\n       themeConfig: {\n           nav: [\n               { text: '关于', link: '/abuot/' } // 右上角导航栏，link 是跳转路径，相当于 a 标签\n           ],\n           sidebar: {'/java/':[\t// 跳转到该路径后，左边的侧边显示内容如下\n               {\n                   title:'关于 - 自我',  // 参考左边的侧边栏\n                   collapsable: true,\n                   children:[\n                       '/about/me/one', // 会去这个路径里找到 one.md 文档，并显示内容。.md 可以省略\n                   ]\n               },\n               {\n                   title:'关于 - 本站',\n                   collapsable: true,\n                   children:[\n                       '/about/build/one', //  会去这个路径里找到 one.md 文档，并显示内容。路径处于dosc目录下\n                   ]\n               }\n           ]\n                    },\n           sidebarDepth: 2,  // 侧边栏显示深度，默认1，最大2（显示到h3标题）\n           lastUpdated: 'Last Updated',  // 开启更新时间，并配置前缀文字  (取值为git提交时间)\n           searchMaxSuggestoins: 10,\t// 搜索结果显示最大数\n           editLinks: true,\t// 启用编辑\n           editLinkText: '编辑此页 '\n       },\n       plugins: [  // 插件相关配置\n       ]\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   23\n   24\n   25\n   26\n   27\n   28\n   29\n   30\n   31\n   32\n   33\n   34\n   35\n   36\n   37\n   38\n   39\n   40\n   41\n   42\n   43\n   44\n   45\n   46\n   47\n   \n\n * 在命令行运行项目\n   \n   vuepress dev docs\n   \n   \n   1\n   \n   \n   yarn run dev\n   \n   \n   1\n   \n   \n   如果 VSCode命令行 无法执行，打开 package.json 文件，手动在 scripts 里填入\n   \n   \"dev\": \"vuepress dev docs\"\n   \n   \n   1\n   \n   \n   \n   \n   再次执行命令即可\n\n\n# 导航栏\n\n笔记\n\n内容分为两部分：\n\n第一部分：如何在网页上显示导航，以及导航的内容；\n\n第二部分：如何实现跳转。\n\n2021-10-31 @村长\n\n\n# 导航显示\n\n上方的 config.js 有一个例子，但是由于导航栏随着后期会逐渐增多，所以需要创建一个 nav.js 文件，专门处理导航栏的内容。（PS：同理包括 themeConfig、head、plugins）\n\n * 首先在 .vuepress 目录创建 nav.js ，然后在 config.js 里引入\n   \n   const nav = require('./nav.js'); // 在 .vuepress 目录下\n   \n   module.exports = {\n       // ...\n       nav, //  等价于 nav: nav，第二个 nav 是上方引入的的名字，因为 ES6 语法，可以实现简写。项目常用\n       // ...\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   \n\n * 在 nav.js 里加入内容\n   \n   // Java导航栏\n   module.exports = {\n       text: '索引', link: '/archives/',  // 跳转链接\n       items: [\n           {\n               text: '本站',\n               items: [\n                   { text: '分类', link: '/categories/' },\n                   { text: '标签', link: '/tags/' },\n                   { text: '归档', link: '/archives/' },\n               ]\n           },\n           {\n               text: '我的',\n               items: [\n                   { text: '收藏', link: '/whell/web/' },\n                   { text: '关于', link: '/about/me/' },\n               ]\n           },\n       ]\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   \n   * text：栏目名（导航名）\n   * link：链接，可以指向本地目录或 http 地址，必须由 / 结尾，如 /about/me 跳转的是为 /about/me.html，而不是 /about/me/\n   * items：可以包含多个 text 和 link ，可以继续反复套用组成复杂的菜单\n   \n   上方代码和图片进行对比，理解更加清晰\n   \n   \n\n\n# 永久连接\n\nlink 的实现有两种方式：\n\n 1. 本地文件目录(基于 docs 下)\n 2. http地址(基于项目地址后)\n\n我推荐第 2 种方式，因为使用第 1 种方式时，如果随着文档的增多，分类必不可少。一旦分类，目录会发生改变，导致都要修改link。所以给一个 markdown 文档指定唯一的http地址，这样无论怎么改变目录位置，都不会影响文件的访问。\n\n * 永久链接用到 Front Matter，即在每个 markdown 文件最上方指定一些内容。具体内容看官网\n   \n   ---\n   title: 本站搭建\n   permalink: /about/build/\n   ---\n   \n   \n   1\n   2\n   3\n   4\n   \n   \n   提示\n   \n   这里的 permalink 指的是项目后的地址，如请看此时的网页地址，应该为 项目地址/about/build/#永久连接\n\n这时，只要在 nav.js 文件让一个 text 加上 link: /about/build/，这样在导航栏点击该 text 标签，即可获取到该 markdown 文档的内容\n\nmodule.exports = {\n    // ...\n    text: '本站搭建', link: '/about/build/',  // 跳转链接\n\t// ...\n}\n\n\n1\n2\n3\n4\n5\n\n\n笔记\n\n你点击 关于 的时候，就是触发此链接，跳转并显示我写的这篇 markdown 文档。\n\n😺已更改，点击后链接跳转到 本站 - 介绍 的 markdown 文档，能理解就好。\n\n2021-10-31 @村长\n\n\n# 侧边栏\n\n笔记\n\n侧边栏我并没有自己配置，是自动读取的，因为配置侧边栏，把需要的 markdown 文档的一级 ~ 三级标题再复制一份到另一个文档。\n\n相当于再创建一个 markdown 文档，专门存放侧边栏标题。所以说配置侧边栏至少需要两份 markdown 文档。\n\n2021-10-31 @村长\n\nsidebar 侧边栏设置处于 themeConfig 里。上方的 config.js 有一个例子\n\n侧边栏例子：（看注释）\n\nmodule.exports = {\n  themeConfig: {\n    sidebar: {\n      '/java/': [\n        'init',  // 查找 /docs/java/init.md 文档，.md可以省略\n      ],\n\n      '/about/build/': [\n        '',      // 代表 README.md 文档\n      ],\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n如果要配置侧边栏，建议把侧边栏文档和写的文档放在同一个目录下\n\n\n# 自动生成侧边栏\n\n如果不想手动配置侧边栏，也可以让系统自动读取文档的标题。缺陷是自动生成一个仅仅包含了当前页面标题（headers）链接的侧边栏。\n\n * 配置文件统一配置，全局文档生效\n\n// .vuepress/config.js\nmodule.exports = {\n  themeConfig: {\n    sidebar: 'auto'\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n * 某个文档单独配置，在该文档 Front Matter 处配置\n\n---\nsidebar: auto\n---\n\n\n1\n2\n3\n\n\n\n# 禁用侧边栏\n\n你可以通过 Front Matter 来禁用指定页面的侧边栏：\n\n---\nsidebar: false\n---\n\n\n1\n2\n3\n\n\n\n# 静态资源配置\n\n前言\n\n静态资源如图片、css 等内容请存放在 /docs/.vuepress/public 目录下。\n\n2021-11-01 @村长\n\n * 图片\n   \n   /docs/README.md 文档里指定首页的图片\n   \n   heroImage: /logo.jpg  # public 下的logo.jpg\n   \n   \n   1\n   \n   \n   图片配置的 / 代表 public 目录，文档配置的 / 代表 docs 目录。项目会自动识别属于哪一类配置\n\n * css 同理，在 .vuepress 目录下创建 css 目录\n   \n   cd public\n   mkdir css\n   touch style.css\n   \n   \n   1\n   2\n   3\n   \n   \n   给 style.css 加样式，然后修改config.js的 head\n   \n   head: [\n       ['link', {rel: 'icon', href: '/logo.jpg'}],\n       [\"link\", { rel: \"stylesheet\", href: \"/css/style.css\" }]\n   ],\n   \n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n\n尾语\n\n加油，你已经成功了一半！\n\n2021-11-01 @村长",normalizedContent:" * 博客选择\n * 文档说明\n * 版本要求\n * node和npm更新\n * vuepress安装\n * 核心配置\n * 导航栏\n   * 导航显示\n   * 永久连接\n * 侧边栏\n   * 自动生成侧边栏\n   * 禁用侧边栏\n * 静态资源配置\n\n\n\n笔记\n\n本站使用了 vuepress 进行搭建，属于 vue 全家桶的一员，旨在搭建个人的静态博客。\n\n我第一次接触 vue，就喜欢 vue 的简洁。虽然没有 csdn 等平台的流量，但我喜欢一个人享受。\n\n2021-10-31 @村长\n\n\n# 博客选择\n\n * 平台博客有：csdn、博客园、简书、掘金、知乎、微博、豆瓣等\n\n * 个人博客有：wordpress、typecho、hexo、vuepress 等\n\n平台博客具有高流量，更新便捷、社区活跃、多主题模板、ui 成熟、社交完善等功能。不喜欢折腾可以选择该类。\n\n个人博客具有可定制性高、有独立域名、自由等功能、缺点是维护繁琐、上限极高，下限极低，博客设计的好坏与否很大程度上依赖搭建者自身的审美水平。\n\n建议使用个人博客的伙伴，多去看其他优秀个人博客的 ui、功能等设计，汲取营养。\n\n\n# 文档说明\n\n本文档仅仅是 vuepress 的快速搭建，并未涉及到本站的主题搭建，根据本文搭建的博客风格与本站略有所区别。\n\nvuepress 本身并未提供作者信息、面包屑、主题模式、右侧目录等功能，而本站所用的主题已经实现了这一些优秀的功能以及其他功能。\n\n主题的搭建具体看 本站 - 主题\n\n注意\n\n主题的搭建是基于 vuepress，所以前提是至少会 vuepress 的基本使用和默认主题的基本配置。\n\n2021-11-01 @村长\n\n\n# 版本要求\n\n要求\n\nvuepress 要求你的 noed.js 版本 >= 8.6\n\n2021-10-31 @村长\n\n\n# node和npm更新\n\n * 更新 npm\n   \n   npm undate -g\n   \n   \n   1\n   \n\n * 更新node\n   \n   1. 安装 node 版本管理工具 n\n      \n      npm install n -g\n      \n      \n      1\n      \n   \n   2. 使用 n 进行更新\n      \n      # 安装node最新版本\n      n stable  \n      \n      # 安装node指定版本10.14.1\n      n v10.14.1\n      \n      \n      1\n      2\n      3\n      4\n      5\n      \n\n\n# vuepress安装\n\n * 全局安装 vuepress\n   \n   yarn global add vuepress\n   \n   \n   1\n   \n   \n   npm install -g vuepress\n   \n   \n   1\n   \n\n * 创建一个文件夹当作博客的根目录\n   \n   mkdir vuepress-doc\n   # 该目录作为博客的项目目录\n   # 名字自定义，我的是 mynotes\n   \n   \n   1\n   2\n   3\n   \n\n * 进入该目录进行初始化\n   \n   cd vuepress-doc\n   yarn init -y # 或者 npm init -y\n   \n   \n   1\n   2\n   \n   \n   初始化后在根目录下生成一个 package.json 文件\n\n接下来要知道官方推荐的目录结构，下面的内容都是基于目录结构创建的\n\n根目录 (vuepress-doc)\n├── docs\n│   ├── .vuepress (可选的)\n│   │   ├── components (可选的)\n│   │   ├── theme (可选的)\n│   │   │   └── layout.vue\n│   │   ├── public (可选的)\n│   │   ├── styles (可选的)\n│   │   │   ├── index.styl\n│   │   │   └── palette.styl\n│   │   ├── templates (可选的, 谨慎配置)\n│   │   │   ├── dev.html\n│   │   │   └── ssr.html\n│   │   ├── config.js (可选的)\n│   │   └── enhanceapp.js (可选的)\n│   │ \n│   ├── readme.md\n│   ├── guide\n│   │   └── readme.md\n│   └── config.md\n│ \n└── package.json\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n目录介绍\n * docs/.vuepress: 用于存放全局的配置、组件、静态资源等。\n * docs/.vuepress/components: 该目录中的 vue 组件将会被自动注册为全局组件。\n * docs/.vuepress/theme: 用于存放本地主题。\n * docs/.vuepress/styles: 用于存放样式相关的文件。\n * docs/.vuepress/styles/index.styl: 将会被自动应用的全局样式文件，会生成在最终的 css 文件结尾，具有比默认样式更高的优先级。\n * docs/.vuepress/styles/palette.styl: 用于重写默认颜色常量，或者设置新的 stylus 颜色常量。\n * docs/.vuepress/public: 静态资源目录。\n * docs/.vuepress/templates: 存储 html 模板文件。\n * docs/.vuepress/templates/dev.html: 用于开发环境的 html 模板文件。\n * docs/.vuepress/templates/ssr.html: 构建时基于 vue ssr 的 html 模板文件。\n * docs/.vuepress/config.js: 配置文件的入口文件，也可以是 yml 或 toml。\n * docs/.vuepress/enhanceapp.js: 客户端应用的增强。\n\n * 在根目录下创建 dosc 目录\n   \n   mkdir docs\n   # 主要存放博客的配置或者文档\n   \n   \n   1\n   2\n   \n\n * 进入 docs 目录，创建 readme.md 文档。内容如下：\n   \n   ---\n   home: true\n   heroimage: /logo.jpg\n   actiontext: 快速上手 →\n   actionlink: /zh/guide/\n   features:\n   - title: 简洁至上\n     details: 以 markdown 为中心的项目结构，以最少的配置帮助你专注于写作。\n   - title: vue驱动\n     details: 享受 vue + webpack 的开发体验，在 markdown 中使用 vue 组件，同时可以使用 vue 来开发自定义主题。\n   - title: 高性能\n     details: vuepress 为每个页面预渲染生成静态的 html，同时在页面被加载的时候，将作为 spa 运行。\n   footer: mit licensed | copyright © 2018-present evan you\n   ---\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   \n   \n   你会发现，内容对应着 vuepress 官网的入口页面\n\n\n# 核心配置\n\n注意\n\n熟记上方官方推荐的目录结构，下面的内容都是基于目录结构创建的。\n\n2021-10-31 @村长\n\n * 在 docs 目录下创建 .vuepress 目录\n   \n   cd docs\n   mkdir .vuepress\n   \n   \n   1\n   2\n   \n\n * 新建总配置文件config.js\n   \n   cd .vuepress\n   touch config.js\n   \n   \n   1\n   2\n   \n   \n   config 是整个项目的核心配置文件，所有菜单、栏目相关的配置均配置在该模块中。\n\n * config.js 添加内容：（记得看注释）\n   \n   module.exports = {\n       title: '村长 blog',  // 首页居中标题\n       description: '这个舞台将会被你的才华踩在脚下，同时你也会把它带到一个新的高度！', // 首页居中文字\n       base: '/', // 格式：'/<仓库名>/'， 默认'/'\n       dest: './dist',  // 打包够的位置。这里是 .vuepress 目录下\n       port: '6486',\t // 端口\n       markdown: {\n           linenumbers: true, // 显示代码块的行号\n       },\n       head:[\n           ['link', { rel: 'icon', href: '/img/favicon.ico' }], // public目录下的img目录内的图标\n           ['meta',{\n               name: 'keywords',\n               content: 'young kbt个人博客，vuepress搭建，学习java、web、框架、微服务、工具、前端等相关知识',\n           },\n           ],\n       ],\n       themeconfig: {\n           nav: [\n               { text: '关于', link: '/abuot/' } // 右上角导航栏，link 是跳转路径，相当于 a 标签\n           ],\n           sidebar: {'/java/':[\t// 跳转到该路径后，左边的侧边显示内容如下\n               {\n                   title:'关于 - 自我',  // 参考左边的侧边栏\n                   collapsable: true,\n                   children:[\n                       '/about/me/one', // 会去这个路径里找到 one.md 文档，并显示内容。.md 可以省略\n                   ]\n               },\n               {\n                   title:'关于 - 本站',\n                   collapsable: true,\n                   children:[\n                       '/about/build/one', //  会去这个路径里找到 one.md 文档，并显示内容。路径处于dosc目录下\n                   ]\n               }\n           ]\n                    },\n           sidebardepth: 2,  // 侧边栏显示深度，默认1，最大2（显示到h3标题）\n           lastupdated: 'last updated',  // 开启更新时间，并配置前缀文字  (取值为git提交时间)\n           searchmaxsuggestoins: 10,\t// 搜索结果显示最大数\n           editlinks: true,\t// 启用编辑\n           editlinktext: '编辑此页 '\n       },\n       plugins: [  // 插件相关配置\n       ]\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   23\n   24\n   25\n   26\n   27\n   28\n   29\n   30\n   31\n   32\n   33\n   34\n   35\n   36\n   37\n   38\n   39\n   40\n   41\n   42\n   43\n   44\n   45\n   46\n   47\n   \n\n * 在命令行运行项目\n   \n   vuepress dev docs\n   \n   \n   1\n   \n   \n   yarn run dev\n   \n   \n   1\n   \n   \n   如果 vscode命令行 无法执行，打开 package.json 文件，手动在 scripts 里填入\n   \n   \"dev\": \"vuepress dev docs\"\n   \n   \n   1\n   \n   \n   \n   \n   再次执行命令即可\n\n\n# 导航栏\n\n笔记\n\n内容分为两部分：\n\n第一部分：如何在网页上显示导航，以及导航的内容；\n\n第二部分：如何实现跳转。\n\n2021-10-31 @村长\n\n\n# 导航显示\n\n上方的 config.js 有一个例子，但是由于导航栏随着后期会逐渐增多，所以需要创建一个 nav.js 文件，专门处理导航栏的内容。（ps：同理包括 themeconfig、head、plugins）\n\n * 首先在 .vuepress 目录创建 nav.js ，然后在 config.js 里引入\n   \n   const nav = require('./nav.js'); // 在 .vuepress 目录下\n   \n   module.exports = {\n       // ...\n       nav, //  等价于 nav: nav，第二个 nav 是上方引入的的名字，因为 es6 语法，可以实现简写。项目常用\n       // ...\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   \n\n * 在 nav.js 里加入内容\n   \n   // java导航栏\n   module.exports = {\n       text: '索引', link: '/archives/',  // 跳转链接\n       items: [\n           {\n               text: '本站',\n               items: [\n                   { text: '分类', link: '/categories/' },\n                   { text: '标签', link: '/tags/' },\n                   { text: '归档', link: '/archives/' },\n               ]\n           },\n           {\n               text: '我的',\n               items: [\n                   { text: '收藏', link: '/whell/web/' },\n                   { text: '关于', link: '/about/me/' },\n               ]\n           },\n       ]\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   \n   * text：栏目名（导航名）\n   * link：链接，可以指向本地目录或 http 地址，必须由 / 结尾，如 /about/me 跳转的是为 /about/me.html，而不是 /about/me/\n   * items：可以包含多个 text 和 link ，可以继续反复套用组成复杂的菜单\n   \n   上方代码和图片进行对比，理解更加清晰\n   \n   \n\n\n# 永久连接\n\nlink 的实现有两种方式：\n\n 1. 本地文件目录(基于 docs 下)\n 2. http地址(基于项目地址后)\n\n我推荐第 2 种方式，因为使用第 1 种方式时，如果随着文档的增多，分类必不可少。一旦分类，目录会发生改变，导致都要修改link。所以给一个 markdown 文档指定唯一的http地址，这样无论怎么改变目录位置，都不会影响文件的访问。\n\n * 永久链接用到 front matter，即在每个 markdown 文件最上方指定一些内容。具体内容看官网\n   \n   ---\n   title: 本站搭建\n   permalink: /about/build/\n   ---\n   \n   \n   1\n   2\n   3\n   4\n   \n   \n   提示\n   \n   这里的 permalink 指的是项目后的地址，如请看此时的网页地址，应该为 项目地址/about/build/#永久连接\n\n这时，只要在 nav.js 文件让一个 text 加上 link: /about/build/，这样在导航栏点击该 text 标签，即可获取到该 markdown 文档的内容\n\nmodule.exports = {\n    // ...\n    text: '本站搭建', link: '/about/build/',  // 跳转链接\n\t// ...\n}\n\n\n1\n2\n3\n4\n5\n\n\n笔记\n\n你点击 关于 的时候，就是触发此链接，跳转并显示我写的这篇 markdown 文档。\n\n😺已更改，点击后链接跳转到 本站 - 介绍 的 markdown 文档，能理解就好。\n\n2021-10-31 @村长\n\n\n# 侧边栏\n\n笔记\n\n侧边栏我并没有自己配置，是自动读取的，因为配置侧边栏，把需要的 markdown 文档的一级 ~ 三级标题再复制一份到另一个文档。\n\n相当于再创建一个 markdown 文档，专门存放侧边栏标题。所以说配置侧边栏至少需要两份 markdown 文档。\n\n2021-10-31 @村长\n\nsidebar 侧边栏设置处于 themeconfig 里。上方的 config.js 有一个例子\n\n侧边栏例子：（看注释）\n\nmodule.exports = {\n  themeconfig: {\n    sidebar: {\n      '/java/': [\n        'init',  // 查找 /docs/java/init.md 文档，.md可以省略\n      ],\n\n      '/about/build/': [\n        '',      // 代表 readme.md 文档\n      ],\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n如果要配置侧边栏，建议把侧边栏文档和写的文档放在同一个目录下\n\n\n# 自动生成侧边栏\n\n如果不想手动配置侧边栏，也可以让系统自动读取文档的标题。缺陷是自动生成一个仅仅包含了当前页面标题（headers）链接的侧边栏。\n\n * 配置文件统一配置，全局文档生效\n\n// .vuepress/config.js\nmodule.exports = {\n  themeconfig: {\n    sidebar: 'auto'\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n * 某个文档单独配置，在该文档 front matter 处配置\n\n---\nsidebar: auto\n---\n\n\n1\n2\n3\n\n\n\n# 禁用侧边栏\n\n你可以通过 front matter 来禁用指定页面的侧边栏：\n\n---\nsidebar: false\n---\n\n\n1\n2\n3\n\n\n\n# 静态资源配置\n\n前言\n\n静态资源如图片、css 等内容请存放在 /docs/.vuepress/public 目录下。\n\n2021-11-01 @村长\n\n * 图片\n   \n   /docs/readme.md 文档里指定首页的图片\n   \n   heroimage: /logo.jpg  # public 下的logo.jpg\n   \n   \n   1\n   \n   \n   图片配置的 / 代表 public 目录，文档配置的 / 代表 docs 目录。项目会自动识别属于哪一类配置\n\n * css 同理，在 .vuepress 目录下创建 css 目录\n   \n   cd public\n   mkdir css\n   touch style.css\n   \n   \n   1\n   2\n   3\n   \n   \n   给 style.css 加样式，然后修改config.js的 head\n   \n   head: [\n       ['link', {rel: 'icon', href: '/logo.jpg'}],\n       [\"link\", { rel: \"stylesheet\", href: \"/css/style.css\" }]\n   ],\n   \n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n\n尾语\n\n加油，你已经成功了一半！\n\n2021-11-01 @村长",charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"本站 - 主题",frontmatter:{title:"本站 - 主题",date:"2021-11-07T17:32:31.000Z",permalink:"/about/website/theme/",titleTag:"原创",categories:["关于 - 本站"],tags:["本站"],readingShow:"top"},regularPath:"/80.%E5%85%B3%E4%BA%8E/06.%E5%85%B3%E4%BA%8E%20-%20%E6%9C%AC%E7%AB%99/07.%E6%9C%AC%E7%AB%99%20-%20%E4%B8%BB%E9%A2%98.html",relativePath:"80.关于/06.关于 - 本站/07.本站 - 主题.md",key:"v-0a6e622c",path:"/about/website/theme/",headers:[{level:2,title:"主题介绍",slug:"主题介绍",normalizedTitle:"主题介绍",charIndex:50},{level:2,title:"获取途径",slug:"获取途径",normalizedTitle:"获取途径",charIndex:58},{level:2,title:"目录结构",slug:"目录结构",normalizedTitle:"目录结构",charIndex:66},{level:2,title:"使用过程",slug:"使用过程",normalizedTitle:"使用过程",charIndex:74},{level:2,title:"级别说明",slug:"级别说明",normalizedTitle:"级别说明",charIndex:82},{level:2,title:"创建文档",slug:"创建文档",normalizedTitle:"创建文档",charIndex:90},{level:2,title:"Front Matter",slug:"front-matter",normalizedTitle:"front matter",charIndex:98},{level:2,title:"碎片化文档",slug:"碎片化文档",normalizedTitle:"碎片化文档",charIndex:114}],headersStr:"主题介绍 获取途径 目录结构 使用过程 级别说明 创建文档 Front Matter 碎片化文档",content:"前言\n\n使用主题的一些总结，并非完整的教程，如果看完整的教程，请去 Vdoing 官网\n\n\n\n * 主题介绍\n * 获取途径\n * 目录结构\n * 使用过程\n * 级别说明\n * 创建文档\n * Front Matter\n * 碎片化文档\n\n\n\n\n# 主题介绍\n\n本站使用的主题是 Vdoing，它是一款简洁高效的 VuePress 知识管理&博客主题，初衷是打造一个好用的、面向程序员的知识管理工具。\n\n主题千千万，我选择这个主题的原因之一是因为它对于文档的命名约定要求非常符合我的想法，即要有两位序号，分清楚顺序，从 00 或 01 开始累计，如 01.文件夹、02.文件.md。如果日后进行文档的梳理也是非常方便的，一眼望去，结构明了。\n\n\n# 获取途径\n\n这里是主题的获取途径。\n\n途径一：主题作者的源代码 GitHub 地址：点击跳转。\n\n途径二：主题官网提供的命令下载：\n\n# 克隆项目，也就是下载项目到本地\ngit clone https://github.com/xugaoyi/vuepress-theme-vdoing.git\n\n# 进入项目的根目录下\ncd vuepress-theme-vdoing\n\n# 安装项目需要的依赖包\nnpm install # or yarn install\n\n# 启动项目\nnpm run dev # or yarn dev\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n# 克隆项目，也就是下载项目到本地\ngit clone https://github.com/xugaoyi/vuepress-theme-vdoing-doc.git\n\n# 进入项目的根目录下\ncd vuepress-theme-vdoing-doc\n\n# 安装项目需要的依赖包\nnpm install # or yarn install\n\n# 启动项目\nrun dev # or yarn dev\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n知识库兼博客风格预设配置：指的是主题作者自己的博客项目内容，也就是作者正在用的博客。\n\n文档风格预设配置：指的是该主题的基本配置项目，不包含作者个人的最新文章更新。\n\n途径三：前往使用该主题的博主 GitHub 地址进行克隆(下载)到本地，如我的地址：跳转地址。\n\n\n# 目录结构\n\n通过获取途径获取到了主题的代码时，它的结构大致如下：\n\n知识库兼博客风格预设配置目录结构：\n\n.\n├── .github   (可选，GitHub Actions 所需文件)\n│   ├── workflows\n│   │   ├── baiduPush.yml (可选，百度定时自动推送)\n│   │   └── ci.yml (可选，自动部署)\n├── docs (必须，不要修改文件夹名称)\n│   ├── .vuepress （同官方，查看：https://vuepress.vuejs.org/zh/guide/directory-structure.html#目录结构）\n│   ├── @pages (可选，自动生成的文件夹，存放分类页、标签页、归档页)\n│   ├── _posts (可选，专门存放碎片化博客文章的文件夹)\n│   ├── <结构化目录>\n│   └── index.md (首页)\n├── theme-vdoing (可选，本地的vdoing主题)\n├── utils  (可选，vdoing主题使用的node工具)\n│   ├── modules\n│   ├── config.yml (可选，批量操作front matter配置)\n│   ├── editFrontmatter.js (可选，批量操作front matter工具)\n├── baiduPush.sh (可选，百度推送命令脚本)\n├── deploy.sh (可选，部署命令脚本)\n│\n└── package.json\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n结构说明\n * docs 文件夹名称请不要修改\n * docs/.vuepress 用于存放全局的配置、样式、静态资源等，同官方，查看 详情(opens new window)\n * docs/@pages 此文件夹是自动生成的，存放分类页、标签页、归档页对应的.md文件，一般不需要改动\n * docs/_posts 专门用于存放碎片化博客文章，里面的.md文件不需要遵循命名约定，不会生成结构化侧边栏和目录页。\n * docs/<结构化目录> 请查看《构建结构化站点的核心配置和约定》。\n * docs/index.md 首页\n * theme-vdoing 存放在本地的vdoing主题文件，如果你想深度的修改主题，首先要在docs/.vuepress/config.js中配置使用的主题指向这个文件。\n\n文档风格预设配置目录结构：\n\n.\n├── .github   (可选，GitHub Actions 所需文件)\n│   ├── workflows\n│   │   └── ci.yml (可选，自动部署)\n├── docs (必须，不要修改文件夹名称)\n│   ├── .vuepress （同官方，查看：https://vuepress.vuejs.org/zh/guide/directory-structure.html#目录结构）\n│   ├── @pages (可选，自动生成的文件夹，存放分类页、标签页、归档页)\n│   ├── _posts (可选，专门存放碎片化博客文章的文件夹)\n│   ├── <结构化目录>\n│   └── index.md (首页)\n├── utils  (可选，vdoing主题使用的node工具)\n│   ├── modules\n│   ├── config.yml (可选，批量操作front matter配置)\n│   ├── editFrontmatter.js (可选，批量操作front matter工具)\n├── deploy.sh (可选，部署命令脚本)\n│—— base.js (可选，指定部署项目根目录)\n└── package.json\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 使用过程\n\n * 获取项目后，首先建议先把 .github/workflows/baiduPush.yml 去掉，这是百度推送相关的，部署时不填入自己的百度信息会报错，后期需要再加入\n\n * 打开 docs/.vuepress/config 目录下的 themeConfig.js 文件，滑到最下方，把 htmlModules 注释掉，这是首页右下方的广告：二维码广告\n\n * 如果不使用本地的 Vdoing 主题，把 theme-vdoing 去掉。theme-vdoing 目录下，可以修改很多的主题样式等，但是使用本地主题就等于放弃了后续的升级服务，所以建议去掉这个。用「在线」的官网主题，即默认\n\n * 因为主题已经配置了很多的内容，所以大部分是不需要自己修改的，建议去 .vuepress 目录下把一些 .js 文件看下，都有注释讲解，里面也有个人信息的配置，以及个性签名，页面的背景图等配置。先启动项目，再看注释配合页面，理解的效果更佳\n\n * 如果想修改首页的上方的背景图，主题默认是黑色栅格背景，请打开 docs/index.md 文档，在 features 同级下加入 bannerBg 属性，这个属性就是配置背景图，如 bannerBg: /img/index/bg.jpg 代表 docs/.vuepress/public/img/index 下的 bg.jpg 图片\n\n * 如果想修改首页的整个大背景图，打开 themeConfig.js 文件，找到被注释的 bodyBgImg 和 bodyBgImgOpacity，并在前者加入大背景图的图片路径，他会覆盖首页上方的背景图，使其失效。后者是大背景图的透明度，范围：0-1\n\n * 如果目录页不想扫描到本身的文档(目录页文档)，则放到专门存放目录页的目录如 00.目录页 下\n\n * 不一定按照导航栏创建文件夹目录，如我的导航栏中，框架下的微服务目录，就是和框架目录同级别，为了不让导航栏那么广，所以放在了框架导航栏里面\n\n * @Pages 目录下三个文档是主题自带的三个功能，删除任意一个文档，都会导致该文档的 url 链接无法访问，如果不需要某个功能，可以删除\n\n * 需要稍微修改主题的样式，打开 docs/.vuepress/styles/index.styl 文件进行样式添加\n\n\n# 级别说明\n\n源目录（一般是docs）底下的级别现在我们称之为一级目录，一级目录的下一级为二级目录，以此类推，最多到四级目录。\n\n * 一级目录\n   1. .vuepress、@pages、_posts、index.md 或 README.md 这些文件(文件夹)不参与数据生成。\n   2. 序号非必须。（如一些专栏，可以不用序号)\n * 二级目录\n   1. 该级别下可以同时放文件夹和.md文件，但是两者序号要连贯（参考下面的例子）。\n   2. 必须有序号\n * 三级目录\n   * (同上)\n * 四级目录v1.6.0 +\n   1. 该级别下只能放.md文件。\n   2. 必须有序号\n\n所有级别内至少有一个文件或文件夹。\n\n.\n├── docs\n│   │  (不参与数据生成)\n│   ├── .vuepress\n│   ├── @pages\n│   ├── _posts\n│   ├── index.md\n│   │\n│   │ (以下部分参与数据生成)\n│   ├── 《JavaScript教程》专栏 (一级目录)\n│   │   ├── 01.章节1 (二级目录)\n│   │   |   ├── 01.js1.md (三级目录-文件)\n│   │   |   ├── 02.js2.md\n│   │   |   └── 03.js3.md\n│   │   └── 02.章节2 (二级目录)\n│   │   |   ├── 01.jsa.md\n│   │   |   ├── 02.小节 (三级目录)\n│   │   |   |   └── 01.jsxx.md (四级目录-文件)\n│   ├── 01.前端\n│   │   ├── 01.JavaScript\n│   │   |   ├── 01.js1.md\n│   │   |   ├── 02.js2.md\n│   │   |   └── 03.js3.md\n│   │   └── 02.vue\n│   │   |   ├── 01.vue1.md\n│   │   |   └── 02.vue2.md\n│   ├── 02.其他\n│   │   ├── 01.学习\n│   │   |   ├── 01.xxa.md\n│   │   |   └── 02.xxb.md\n│   │   ├── 02.学习笔记\n│   │   |   ├── 01.xxa.md\n│   │   |   └── 02.xxb.md\n│   │   ├── 03.文件x.md\n│   │   └── 04.文件xx.md\n│   └── 03.关于我\n│   │   └── 01.关于我.md\n.   .\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n\n\n\n# 创建文档\n\n创建文档必须按照级别说明的约定，比如想创建 Java 的知识体系文档，则在 docs 下创建一级目录，名为 01.Java，再进入 01.Java 目录，创建两个二级目录，分别名为 01.Java基础、02.Java进阶，接着进入 01.Java基础 目录，创建文档 01.Java入门.md。依次类推。\n\n> 注意：一个目录下的文件不能出现相同序号\n\n启动项目时，会根据序号顺序在侧边栏进行排序，最小的在最上方\n\n> 建议序号要有间隔，如00、05、10、15，方便日后在中间插入新的文档。\n\n\n# Front Matter\n\nfront matter 指的是 markdown 文档最上方的一些 yaml 配置，在主题下 front matter 有更多的参数配置。\n\n提供三个模板：（记得去掉注释）\n\n---\npageComponent: \n  name: Catalogue   # 目录页必须为 Catalogue\n  data: \n    path: 01.java # 扫描文档的目录路径，直接指定 docs 下的目录，无需有 / 开头\n    imgUrl: /   # 目录页标题旁边的图片，开头必须有 /：代表.vupress的public目录\n    description: # 目录页的描述 \ntitle: 本站 - 主题 # 目录页的标题\ndate: 2021-11-07 21:15:53  # 文章页生成时间\npermalink: /     # 指定 url 跳转地址，跳转到该url，就获取该文档内容\nsidebar: false     # 是否生成侧边栏，默认为 true\narticle: false\t\t# 是否为文章页，默认为 true，下方有说明\ncomment: false\t\t# 是否生成评论区，默认为 true\neditLink: false\t\t# 是否可以编辑，默认为 true\n---\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n---\ntitle: 本站 - 主题 # 文章页标题\ndate: 2021-11-07 21:15:53  # 文章页生成时间\npermalink: /  # 指定 url 跳转地址，点击该url，获取该文档内容\ncategories:\n  -   # 文章目录，在首页的文章分类出现\ntags: \n  -    # 标签，在首页的热门标签出现\n---\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n---\ntitle: 本站 - 主题 # 文章页标题\ndate: 2021-11-07 21:15:53  # 文章页生成时间\npermalink: /  # 指定 url 跳转地址，点击该url，获取该文档内容\narticle: false\t# 是否为文章页，默认为 true，下方有说明\ncategories:\n  -   # 文章目录，在首页的文章分类出现\ntags: \n  -    # 标签，在首页的热门标签出现\n---\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n目录页：自动扫描 path 的路径下的文档，生成目录，此时你点击我的 Java 导航，弹出的就是目录页，如果不想自身被扫描到，请放到专门存放目录页的目录如 00.目录页 下\n\n文章页：有内容、个人信息，文档目录信息、日期、面包屑的文档，此时看的内容就是文章页，为了区别目录页。不加sidebar、article、comment、editLink 是因为默认为 true。\n\n非文章页非目录页：一般用于友情连接，转载连接等不包含个人信息的页面，并且不存入归档时间线内，以及首页下方的更新目录中。\n\n面包屑：文档所在的路径。滑到最上方，如果看到 关于/关于 - 本站，这就是面包屑，代表该文档的一级目录为关于，二级目录也就是文档名为关于 - 本站。\n\n特别说明：\n\narticle 为 false 时，则是非文章页非目录页。默认为 true。\n\n例子1：滑到最上方，如果看到 关于/关于 - 本站、村长、2021-11-07，则代表这是文章页，即 article 为 true。\n\n例子2：打开更多导航的友情链接，这是一个非文章页非目录页，代表 article 为false。\n\n例子3：点击 Java 导航，弹出的页面就是目录页。\n\n\n# 碎片化文档\n\n碎片化文档是放在 _posts 目录下，比如主题自带的随笔。特点：\n\n * 不遵守命名约定，即不需要有序号前缀\n * 无法通过导航栏进行跳转，只能通过首页的文章分类或者热门标签进行查看。或者 url 地址直接跳转\n * 没有面包屑功能\n * 侧边栏只有自己的大纲标题，无法扫描目录下的其他文档\n * 不构成体系化。记录零碎的生活痕迹、技术感想都可以用到碎片化文档\n\n笔记\n\n部分内容摘录于 Vdoing 主题官网\n\n2021-11-07 @村长",normalizedContent:"前言\n\n使用主题的一些总结，并非完整的教程，如果看完整的教程，请去 vdoing 官网\n\n\n\n * 主题介绍\n * 获取途径\n * 目录结构\n * 使用过程\n * 级别说明\n * 创建文档\n * front matter\n * 碎片化文档\n\n\n\n\n# 主题介绍\n\n本站使用的主题是 vdoing，它是一款简洁高效的 vuepress 知识管理&博客主题，初衷是打造一个好用的、面向程序员的知识管理工具。\n\n主题千千万，我选择这个主题的原因之一是因为它对于文档的命名约定要求非常符合我的想法，即要有两位序号，分清楚顺序，从 00 或 01 开始累计，如 01.文件夹、02.文件.md。如果日后进行文档的梳理也是非常方便的，一眼望去，结构明了。\n\n\n# 获取途径\n\n这里是主题的获取途径。\n\n途径一：主题作者的源代码 github 地址：点击跳转。\n\n途径二：主题官网提供的命令下载：\n\n# 克隆项目，也就是下载项目到本地\ngit clone https://github.com/xugaoyi/vuepress-theme-vdoing.git\n\n# 进入项目的根目录下\ncd vuepress-theme-vdoing\n\n# 安装项目需要的依赖包\nnpm install # or yarn install\n\n# 启动项目\nnpm run dev # or yarn dev\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n# 克隆项目，也就是下载项目到本地\ngit clone https://github.com/xugaoyi/vuepress-theme-vdoing-doc.git\n\n# 进入项目的根目录下\ncd vuepress-theme-vdoing-doc\n\n# 安装项目需要的依赖包\nnpm install # or yarn install\n\n# 启动项目\nrun dev # or yarn dev\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n知识库兼博客风格预设配置：指的是主题作者自己的博客项目内容，也就是作者正在用的博客。\n\n文档风格预设配置：指的是该主题的基本配置项目，不包含作者个人的最新文章更新。\n\n途径三：前往使用该主题的博主 github 地址进行克隆(下载)到本地，如我的地址：跳转地址。\n\n\n# 目录结构\n\n通过获取途径获取到了主题的代码时，它的结构大致如下：\n\n知识库兼博客风格预设配置目录结构：\n\n.\n├── .github   (可选，github actions 所需文件)\n│   ├── workflows\n│   │   ├── baidupush.yml (可选，百度定时自动推送)\n│   │   └── ci.yml (可选，自动部署)\n├── docs (必须，不要修改文件夹名称)\n│   ├── .vuepress （同官方，查看：https://vuepress.vuejs.org/zh/guide/directory-structure.html#目录结构）\n│   ├── @pages (可选，自动生成的文件夹，存放分类页、标签页、归档页)\n│   ├── _posts (可选，专门存放碎片化博客文章的文件夹)\n│   ├── <结构化目录>\n│   └── index.md (首页)\n├── theme-vdoing (可选，本地的vdoing主题)\n├── utils  (可选，vdoing主题使用的node工具)\n│   ├── modules\n│   ├── config.yml (可选，批量操作front matter配置)\n│   ├── editfrontmatter.js (可选，批量操作front matter工具)\n├── baidupush.sh (可选，百度推送命令脚本)\n├── deploy.sh (可选，部署命令脚本)\n│\n└── package.json\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n结构说明\n * docs 文件夹名称请不要修改\n * docs/.vuepress 用于存放全局的配置、样式、静态资源等，同官方，查看 详情(opens new window)\n * docs/@pages 此文件夹是自动生成的，存放分类页、标签页、归档页对应的.md文件，一般不需要改动\n * docs/_posts 专门用于存放碎片化博客文章，里面的.md文件不需要遵循命名约定，不会生成结构化侧边栏和目录页。\n * docs/<结构化目录> 请查看《构建结构化站点的核心配置和约定》。\n * docs/index.md 首页\n * theme-vdoing 存放在本地的vdoing主题文件，如果你想深度的修改主题，首先要在docs/.vuepress/config.js中配置使用的主题指向这个文件。\n\n文档风格预设配置目录结构：\n\n.\n├── .github   (可选，github actions 所需文件)\n│   ├── workflows\n│   │   └── ci.yml (可选，自动部署)\n├── docs (必须，不要修改文件夹名称)\n│   ├── .vuepress （同官方，查看：https://vuepress.vuejs.org/zh/guide/directory-structure.html#目录结构）\n│   ├── @pages (可选，自动生成的文件夹，存放分类页、标签页、归档页)\n│   ├── _posts (可选，专门存放碎片化博客文章的文件夹)\n│   ├── <结构化目录>\n│   └── index.md (首页)\n├── utils  (可选，vdoing主题使用的node工具)\n│   ├── modules\n│   ├── config.yml (可选，批量操作front matter配置)\n│   ├── editfrontmatter.js (可选，批量操作front matter工具)\n├── deploy.sh (可选，部署命令脚本)\n│—— base.js (可选，指定部署项目根目录)\n└── package.json\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 使用过程\n\n * 获取项目后，首先建议先把 .github/workflows/baidupush.yml 去掉，这是百度推送相关的，部署时不填入自己的百度信息会报错，后期需要再加入\n\n * 打开 docs/.vuepress/config 目录下的 themeconfig.js 文件，滑到最下方，把 htmlmodules 注释掉，这是首页右下方的广告：二维码广告\n\n * 如果不使用本地的 vdoing 主题，把 theme-vdoing 去掉。theme-vdoing 目录下，可以修改很多的主题样式等，但是使用本地主题就等于放弃了后续的升级服务，所以建议去掉这个。用「在线」的官网主题，即默认\n\n * 因为主题已经配置了很多的内容，所以大部分是不需要自己修改的，建议去 .vuepress 目录下把一些 .js 文件看下，都有注释讲解，里面也有个人信息的配置，以及个性签名，页面的背景图等配置。先启动项目，再看注释配合页面，理解的效果更佳\n\n * 如果想修改首页的上方的背景图，主题默认是黑色栅格背景，请打开 docs/index.md 文档，在 features 同级下加入 bannerbg 属性，这个属性就是配置背景图，如 bannerbg: /img/index/bg.jpg 代表 docs/.vuepress/public/img/index 下的 bg.jpg 图片\n\n * 如果想修改首页的整个大背景图，打开 themeconfig.js 文件，找到被注释的 bodybgimg 和 bodybgimgopacity，并在前者加入大背景图的图片路径，他会覆盖首页上方的背景图，使其失效。后者是大背景图的透明度，范围：0-1\n\n * 如果目录页不想扫描到本身的文档(目录页文档)，则放到专门存放目录页的目录如 00.目录页 下\n\n * 不一定按照导航栏创建文件夹目录，如我的导航栏中，框架下的微服务目录，就是和框架目录同级别，为了不让导航栏那么广，所以放在了框架导航栏里面\n\n * @pages 目录下三个文档是主题自带的三个功能，删除任意一个文档，都会导致该文档的 url 链接无法访问，如果不需要某个功能，可以删除\n\n * 需要稍微修改主题的样式，打开 docs/.vuepress/styles/index.styl 文件进行样式添加\n\n\n# 级别说明\n\n源目录（一般是docs）底下的级别现在我们称之为一级目录，一级目录的下一级为二级目录，以此类推，最多到四级目录。\n\n * 一级目录\n   1. .vuepress、@pages、_posts、index.md 或 readme.md 这些文件(文件夹)不参与数据生成。\n   2. 序号非必须。（如一些专栏，可以不用序号)\n * 二级目录\n   1. 该级别下可以同时放文件夹和.md文件，但是两者序号要连贯（参考下面的例子）。\n   2. 必须有序号\n * 三级目录\n   * (同上)\n * 四级目录v1.6.0 +\n   1. 该级别下只能放.md文件。\n   2. 必须有序号\n\n所有级别内至少有一个文件或文件夹。\n\n.\n├── docs\n│   │  (不参与数据生成)\n│   ├── .vuepress\n│   ├── @pages\n│   ├── _posts\n│   ├── index.md\n│   │\n│   │ (以下部分参与数据生成)\n│   ├── 《javascript教程》专栏 (一级目录)\n│   │   ├── 01.章节1 (二级目录)\n│   │   |   ├── 01.js1.md (三级目录-文件)\n│   │   |   ├── 02.js2.md\n│   │   |   └── 03.js3.md\n│   │   └── 02.章节2 (二级目录)\n│   │   |   ├── 01.jsa.md\n│   │   |   ├── 02.小节 (三级目录)\n│   │   |   |   └── 01.jsxx.md (四级目录-文件)\n│   ├── 01.前端\n│   │   ├── 01.javascript\n│   │   |   ├── 01.js1.md\n│   │   |   ├── 02.js2.md\n│   │   |   └── 03.js3.md\n│   │   └── 02.vue\n│   │   |   ├── 01.vue1.md\n│   │   |   └── 02.vue2.md\n│   ├── 02.其他\n│   │   ├── 01.学习\n│   │   |   ├── 01.xxa.md\n│   │   |   └── 02.xxb.md\n│   │   ├── 02.学习笔记\n│   │   |   ├── 01.xxa.md\n│   │   |   └── 02.xxb.md\n│   │   ├── 03.文件x.md\n│   │   └── 04.文件xx.md\n│   └── 03.关于我\n│   │   └── 01.关于我.md\n.   .\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n\n\n\n# 创建文档\n\n创建文档必须按照级别说明的约定，比如想创建 java 的知识体系文档，则在 docs 下创建一级目录，名为 01.java，再进入 01.java 目录，创建两个二级目录，分别名为 01.java基础、02.java进阶，接着进入 01.java基础 目录，创建文档 01.java入门.md。依次类推。\n\n> 注意：一个目录下的文件不能出现相同序号\n\n启动项目时，会根据序号顺序在侧边栏进行排序，最小的在最上方\n\n> 建议序号要有间隔，如00、05、10、15，方便日后在中间插入新的文档。\n\n\n# front matter\n\nfront matter 指的是 markdown 文档最上方的一些 yaml 配置，在主题下 front matter 有更多的参数配置。\n\n提供三个模板：（记得去掉注释）\n\n---\npagecomponent: \n  name: catalogue   # 目录页必须为 catalogue\n  data: \n    path: 01.java # 扫描文档的目录路径，直接指定 docs 下的目录，无需有 / 开头\n    imgurl: /   # 目录页标题旁边的图片，开头必须有 /：代表.vupress的public目录\n    description: # 目录页的描述 \ntitle: 本站 - 主题 # 目录页的标题\ndate: 2021-11-07 21:15:53  # 文章页生成时间\npermalink: /     # 指定 url 跳转地址，跳转到该url，就获取该文档内容\nsidebar: false     # 是否生成侧边栏，默认为 true\narticle: false\t\t# 是否为文章页，默认为 true，下方有说明\ncomment: false\t\t# 是否生成评论区，默认为 true\neditlink: false\t\t# 是否可以编辑，默认为 true\n---\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n---\ntitle: 本站 - 主题 # 文章页标题\ndate: 2021-11-07 21:15:53  # 文章页生成时间\npermalink: /  # 指定 url 跳转地址，点击该url，获取该文档内容\ncategories:\n  -   # 文章目录，在首页的文章分类出现\ntags: \n  -    # 标签，在首页的热门标签出现\n---\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n---\ntitle: 本站 - 主题 # 文章页标题\ndate: 2021-11-07 21:15:53  # 文章页生成时间\npermalink: /  # 指定 url 跳转地址，点击该url，获取该文档内容\narticle: false\t# 是否为文章页，默认为 true，下方有说明\ncategories:\n  -   # 文章目录，在首页的文章分类出现\ntags: \n  -    # 标签，在首页的热门标签出现\n---\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n目录页：自动扫描 path 的路径下的文档，生成目录，此时你点击我的 java 导航，弹出的就是目录页，如果不想自身被扫描到，请放到专门存放目录页的目录如 00.目录页 下\n\n文章页：有内容、个人信息，文档目录信息、日期、面包屑的文档，此时看的内容就是文章页，为了区别目录页。不加sidebar、article、comment、editlink 是因为默认为 true。\n\n非文章页非目录页：一般用于友情连接，转载连接等不包含个人信息的页面，并且不存入归档时间线内，以及首页下方的更新目录中。\n\n面包屑：文档所在的路径。滑到最上方，如果看到 关于/关于 - 本站，这就是面包屑，代表该文档的一级目录为关于，二级目录也就是文档名为关于 - 本站。\n\n特别说明：\n\narticle 为 false 时，则是非文章页非目录页。默认为 true。\n\n例子1：滑到最上方，如果看到 关于/关于 - 本站、村长、2021-11-07，则代表这是文章页，即 article 为 true。\n\n例子2：打开更多导航的友情链接，这是一个非文章页非目录页，代表 article 为false。\n\n例子3：点击 java 导航，弹出的页面就是目录页。\n\n\n# 碎片化文档\n\n碎片化文档是放在 _posts 目录下，比如主题自带的随笔。特点：\n\n * 不遵守命名约定，即不需要有序号前缀\n * 无法通过导航栏进行跳转，只能通过首页的文章分类或者热门标签进行查看。或者 url 地址直接跳转\n * 没有面包屑功能\n * 侧边栏只有自己的大纲标题，无法扫描目录下的其他文档\n * 不构成体系化。记录零碎的生活痕迹、技术感想都可以用到碎片化文档\n\n笔记\n\n部分内容摘录于 vdoing 主题官网\n\n2021-11-07 @村长",charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"本站 - 网站部署",frontmatter:{title:"本站 - 网站部署",date:"2021-11-01T15:32:38.000Z",permalink:"/about/website/deploy/",titleTag:"原创",categories:["关于 - 本站"],tags:["本站"],readingShow:"top"},regularPath:"/80.%E5%85%B3%E4%BA%8E/06.%E5%85%B3%E4%BA%8E%20-%20%E6%9C%AC%E7%AB%99/10.%E6%9C%AC%E7%AB%99%20-%20%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2.html",relativePath:"80.关于/06.关于 - 本站/10.本站 - 网站部署.md",key:"v-389f15d1",path:"/about/website/deploy/",headers:[{level:2,title:"手动部署",slug:"手动部署",normalizedTitle:"手动部署",charIndex:55},{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:65},{level:3,title:"优势",slug:"优势",normalizedTitle:"优势",charIndex:73},{level:3,title:"限制",slug:"限制",normalizedTitle:"限制",charIndex:81},{level:3,title:"开始使用",slug:"开始使用",normalizedTitle:"开始使用",charIndex:89},{level:3,title:"上传代码",slug:"上传代码",normalizedTitle:"上传代码",charIndex:99},{level:2,title:"开启部署",slug:"开启部署",normalizedTitle:"开启部署",charIndex:107},{level:2,title:"脚本部署",slug:"脚本部署",normalizedTitle:"脚本部署",charIndex:115},{level:2,title:"自动化部署",slug:"自动化部署",normalizedTitle:"自动化部署",charIndex:123},{level:3,title:"介绍",slug:"介绍-2",normalizedTitle:"介绍",charIndex:65},{level:3,title:"生成token",slug:"生成token",normalizedTitle:"生成token",charIndex:142},{level:3,title:"配置密钥",slug:"配置密钥",normalizedTitle:"配置密钥",charIndex:155},{level:3,title:"自动化文件",slug:"自动化文件",normalizedTitle:"自动化文件",charIndex:165},{level:3,title:"自动化文件流程",slug:"自动化文件流程",normalizedTitle:"自动化文件流程",charIndex:176},{level:2,title:"问答",slug:"问答",normalizedTitle:"问答",charIndex:187},{level:2,title:"问题",slug:"问题",normalizedTitle:"问题",charIndex:193},{level:2,title:"更新base",slug:"更新base",normalizedTitle:"更新base",charIndex:199},{level:2,title:"自定义域名",slug:"自定义域名",normalizedTitle:"自定义域名",charIndex:209}],excerpt:'<div class="custom-block note"><p class="custom-block-title">序言</p>\n<p>部署，打造自己的「身份证」。</p>\n<p>自动化，时间管理的福利。</p>\n<div class="custom-block right">\n<p>2021-11-01 @村长</p>\n</div>\n</div>\n',headersStr:"手动部署 介绍 优势 限制 开始使用 上传代码 开启部署 脚本部署 自动化部署 介绍 生成token 配置密钥 自动化文件 自动化文件流程 问答 问题 更新base 自定义域名",content:'序言\n\n部署，打造自己的「身份证」。\n\n自动化，时间管理的福利。\n\n2021-11-01 @村长\n\n\n\n * 手动部署\n   * 介绍\n   * 优势\n   * 限制\n   * 开始使用\n   * 上传代码\n * 开启部署\n * 脚本部署\n * 自动化部署\n   * 介绍\n   * 生成token\n   * 配置密钥\n   * 自动化文件\n   * 自动化文件流程\n * 问答\n * 问题\n * 更新base\n * 自定义域名\n\n\n\n\n# 手动部署\n\n\n# 介绍\n\nGitHub Pages 是一个静态站点托管服务。\n\n如果你想记录生活、抒发情感、分享见解，这一切都离不开一个可以承载文字的平台，一个独立的、由自己掌控的平台，而 GitHub Pages 就是这么一个平台。\n\n在这个平台里你可以使用自己的个性域名；可以在海量的主题里挑选最适合你的那一款，如果你技术极客，也可以根据自己的喜好，设计属于自己的个性化页面；你既可以在线创建和发布网站，也可以在本地通过客户端工具或者命令行进行网站和内容的管理。\n\n你完全可以通过 GitHub Pages 展示和输出自身价值，甚至可以把它打造成属于自己的互联网「身份证」。\n\n如果你想仔细了解 GitHub Pages，点击这里\n\n\n# 优势\n\n * GitHub Pages 完全免费，不需要个人购买服务器、域名\n * 官方文档详细，不需要强大的编程能力，只需要一步一步按着操作来使用\n * 支持的功能多，你可以绑定你的域名、使用免费的 HTTPS、自己 DIY 网站的主题、使用他人开发好的插件等等\n * 完成搭建后，只需要专注于文章即可，其他诸如环境搭建、系统维护、文件存储的事情一概不用操心，都由 GitHub Pages 处理\n\n......\n\n\n# 限制\n\n * GitHub Pages 源仓库建议限制为 1GB；\n * 发布的 GitHub Pages 网站可能不超过 1GB；\n * GitHub Pages 网站每月的带宽限制为 100GB；\n * GitHub Pages 网站每小时限制 10 个软件。\n\n\n# 开始使用\n\n * 首先，你必须拥有一个 GitHub 账号，注册点击这里\n\n * 创建一个仓库用于存放自己的博客项目，如图：点击右上角的 + 号\n   \n   \n\n * 填写自己的仓库信息\n   \n   \n   \n   如我的博客仓库名就叫 notes-blog，因为我打算创建一个生活博客，类似于 live-blog，所以对博客名进行分类\n   \n   防止图片失效，这里记录步骤和gitignore文件内容\n    1. 填写仓库名\n    2. 填写仓库描述，可以不写\n    3. 选择公有 Public\n    4. 建议选择 Add a README file，添加README文档\n    5. Add .gitignore 是添加 .gitignore 文件，如果不知道文件内容，可以不选。则需要手动在自己的博客目录下创建 .gitignore文档，填入如下内容：\n   \n   # npm\n   package-lock.json\n   node_modules\n   \n   # yarn\n   yarn.lock\n   \n   # vscode\n   .vscode\n   \n   # vuepress\n   docs/.vuepress/dist\n   \n   # 百度链接推送\n   urls.txt\n   \n   # mac\n   .DS_Store\n   \n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   \n\n * 创建仓库后，进入仓库，然后创建一个分支，名字必须叫做gh-pages，可以理解为默认只识别这个名字\n   \n   * 创建好的仓库默认主支是 master 或者 main，现在 GitHub 逐渐让 main 作为默认的主支名\n   * 主支用于仓库的文件汇总，分支则是每一个用户上传到仓库的通道，最终合并到主支\n   \n   \n   \n   防止图片失效，这里记录步骤\n    1. 点击 master，弹出拉下框\n    2. 搜索 gh-pages，必须是这个\n    3. 创建 gh-pages。搜索后，会显示 Create branch：gh-pages from master，点击即可创建\n\n说明\n\n为什么创建 gh-pages 分支呢？因为 master 主支放的是博客源码，而 gh-pages 分支放的是主支打包后的博客代码。\n\n不理解打包，可以这么认为：写的 markdown 文档是源码，要想显示到网页上，需要变成 html 文件，打包就是变成 html 的过程。\n\n2021-11-01 @村长\n\n\n# 上传代码\n\n * 初始化项目根目录\n   \n   git init\n   \n   \n   1\n   \n   \n   如果早期你的项目体系是从其他人的仓库克隆的，说明你不需要初始化根目录，而是需要修改 GitHub 的提交地址，因为提交地址目前是其他人的\n   \n   修改提交地址\n   \n   方法一：\n   \n   执行如下命令进行更改：\n   \n   git remote rm origin  # 删除远程地址\n   git remote add origin URL  #  URL 填写自己的仓库地址，如我的就是 https://github.com/huangguan2001/\n   \n   \n   1\n   2\n   \n   \n   方法二：（执行方法一，其实就会自动执行方法二）\n   \n   打开根目录下的 .git 文件夹，因为这个文件夹默认隐藏，所以需要设置显示隐藏文件\n   \n   \n   \n   进入 .git目录后，打开 config 文件，手动添入信息：url、fetch\n   \n   \n\n提交项目的源码和项目的打包文件\n\n * 提交项目源码到仓库里\n   \n   git add -A  # 把项目的所有文件添加到本地仓库\n   git commit -m ""  # 双引号里是对于添加文件的描述\n   git push   # 将本地仓库提交到远程仓库，也就是你的 GitHub 仓库，地址默认上方 config 文件的 url，具体看上方图片\n   # 你也可以 git push URL     # URL就是你的仓库地址\n   \n   \n   1\n   2\n   3\n   4\n   \n\n * 进入项目的根目录，打包项目\n   \n   yarn run build  # build是package.json的规定，你的不一定是build\n   \n   \n   1\n   \n   \n   vuepress build docs\n   \n   \n   1\n   \n\n * 上传打包项目到 gh-pages 分支，我的是在 .vuepress 目录下的 dist\n   \n   git add -A  # 把项目的所有文件添加到本地仓库\n   git commit -m ""  # 双引号里是对于添加文件的描述\n   git push -f URL master:gh-pages # URL就是你的仓库地址,推送到github gh-pages分支 \n   \n   \n   1\n   2\n   3\n   \n   \n   -f 是必须的，意味着覆盖原来的内容\n\n自此，如果可以在仓库 master 下看到源码，gh-pages 下看到打包后的文件，代表成功了\n\n\n# 开启部署\n\n笔记\n\n这一内容为开启 Github Page 或者 Gitee Page，是为了连接手动部署成功后的操作，如果手动部署失败或者想直接使用脚本部署，则至少二选一成功了再来进行本内容的操作。\n\n自动化部署前需要先开启 Github Page 或者 Gitee Page。\n\n2021-11-01 @村长\n\n当部署成功时，没有看到想要的成果，我相信不会有人继续进行枯燥的操作。下面将开启 Github Page 或者 Gitee Page，见证自己的部署成功页面。\n\nGitHub Page\n\n\n\n防止图片失效，这里记录步骤\n 1. 进入仓库，点击 Settings\n 2. 找到 Pages 选项\n 3. 选择要部署的分支，一定是 gh-pages 分支\n 4. 绿色框的地址，就是所有人都能访问的地址，访问之后，就能看到你的博客\n\nGitee Page\n\n\n\n第一步，点击服务的时候，会有 6 个选项，选择第一个 Gitee Pages\n\n防止图片失效，这里记录步骤\n 1. 进入仓库，点击服务，弹出选择列表，选择 Gitee Pages\n 2. 选择要部署的分支，一定是 gh-pages 分支\n 3. 部署目录默认整个 gh-pages分支\n 4. HTTP5 可选可不选，我选了\n 5. 按下确定按钮，等待不久，显示地址，所有人访问这个地址就能进入你的博客\n\n注意\n\nGithub 一旦更新 gh-pages 分支内容，会自动重新部署，所以访问页面是最新的。\n\nGitee 一旦更新 gh-pages 分支内容，需要手动点击上图的更新按钮，访问的页面才是最新的。要想自动更新部署。要花钱。\n\n2021-11-02 @村长\n\n\n# 脚本部署\n\n注意\n\n脚本部署仅适用于把打包后的文件推送到 GitHub 仓库的 gh-pages 分支下，不适用把项目源码推送到 master 主支上。\n\n所以还得手动执行命令把源码推送到 GitHub 仓库。当然自动化部署，可以全部解决。\n\n2021-11-01 @村长\n\n每次写完文档，如果都需要像上面上传代码中手动打包，无疑是繁琐且耗费时间的，学会使用脚本解决频繁的问题，能更加专注于文章。\n\nshell 脚本，请自行学习，日后我更新了 shell 的学习文档，这里会提供跳转地址 「*记录」。\n\n该脚本是推送项目到 GitHub，如果推送到 Gitee，修改仓库地址即可，脚本名叫 deploy.sh，请放在项目的根目录下。\n\n#!/usr/bin/env sh\n\n# 确保脚本抛出遇到的错误\nset -e\n\n# 生成静态文件\nnpm run build\n\n# 进入生成的文件夹\ncd docs/.vuepress/dist\n\n# 如果手运行该脚本，则执行if里的，如果是GitHub自动执行该脚本，则是else里的\nif [ -z "$GITHUB_TOKEN" ]; then\n msg=\'deploy\'\n githubUrl=git@github.com:Kele-Bingtang/notes-blog.git  # 替换自己的 GitHub 仓库地址，SSH格式\nelse\n msg=\'来自github actions的自动部署\'\n # 替换自己的 GitHub 仓库地址，更改的是 @后面的地址 以及 把Kele-Bingtang 改为自己用户名\n githubUrl=https://Kele-Bingtang:${GITHUB_TOKEN}@github.com/Kele-Bingtang/notes-blog.git \n git config --global user.name "Kele_Bingtang"   # 修改为自己的 GitHub 用户名\n git config --global user.email "2456019588@qq.com"  # 修改为自己的 GitHub 邮箱，注册时绑定的邮箱\nfi\ngit init\ngit add -A\ngit commit -m "${msg}"\ngit push -f $githubUrl master:gh-pages # 推送到github gh-pages分支\n\ncd - # 退回开始所在目录\nrm -rf docs/.vuepress/dist\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n在项目根目录打开 bash 命令窗口或者 Git Bash Here 窗口，执行该脚本\n\nsh deploy.sh  # 假设你的脚本叫 deploy.sh\n\n\n1\n\n\n> 注意：Windows下的 cmd 无法执行 shell 脚本\n\n\n# 自动化部署\n\n注意\n\nGithub 一旦推送了新代码，则会自动化部署。\n\nGitee 一旦推送了新代码，不会自动化部署，需要手动点击更新按钮。如实现自动化，需要收费，99元/年。\n\n2021-11-01 @村长\n\n使用了脚本部署，相比较手动部署，少了打包的过程，节省了时间，但是还要手动执行两次过程：\n\n 1. 敲打命令推送项目源码到仓库的 master 上\n 2. 执行 shell 脚本，自动打包并推送打包内容到仓库的 gh-pages 上\n\n自动化部署利用了 GitHub Actions ，仅需实现过程1：推送项目源码到 master，即可自动实现过程 2\n\n过程 1 可以写一个脚本执行。这样执行一个脚本，即可实现自动化，下方有该脚本，名叫 push.sh\n\n\n# 介绍\n\nGitHub Actions 是 GitHub 的持续集成服务，于 2018 年 10 月推出。\n\nGitHub Actions 入门教程\n\nGitHub Actions 商城\n\n\n# 生成token\n\n首先，获取 token，这是 GitHub 的另一种授权方式，即不需要用户名和密码\n\n * 进入 GitHub，点击头像，找到 setting\n   \n   \n\n * 找到 Developer settings 并点击\n   \n   \n\n * 点击 Persional access tokens，然后点击 Generate new token 生成toke\n   \n   \n\n * 填写 Note，即 token 的描述，并选择 repo，其他不用选\n   \n   \n\n如果不想你的 token 过期，在 Expiration 选中 No expiration 即可\n\ntoken 生成后，记得保存下来，因为页面一旦关闭，token 不会在显示\n\n\n# 配置密钥\n\n拿到了 token，需要将该 token 进行配置，赋予某仓库权限\n\n内容分为三步，其中第三步看需求，第一、二步则是必须。\n\n第一步：配置 ACCESS_TOKEN；\n\n第二步：配置 SSH key\n\n第三步：配置 GITEE_RSA_PRIVATE_KEY和 GITEE_PASSWORD。\n\n配置 ACCESS_TOKEN\n\n配置密钥是因为自动化部署过程，需要 GitHub 权限，没有 token，就没有权限部署\n\nACCESS_TOKEN 是固定的，名字要和下方脚本使用的名对应上。如果需要改，双方都要改\n\n * 找到仓库的 Settings ，并点击 Secrets\n\n\n\n点击 New repository secret 并进行配置，其中 Name 是 ACCESS_TOKEN，Value 是之前生成的 token\n\n\n\n点击 Add secret 即可该密钥添加成功\n\n配置 SSH Key\n\n * 打开 Git Bash 查看电脑上是否已经存在 SSH 密钥。如果有，请直接看第三步\n   \n   cd ~/.ssh\n   \n   \n   1\n   \n   \n   或者前往C:\\Users\\你的用户名下找 .ssh 文件夹\n\n * 如果没有则需要创建新的 ssh key，打开 Git Bash Here，输入：\n   \n   ssh-keygen -t rsa -C "你的绑定GitHub邮箱"\n   \n   \n   1\n   \n   \n   1s 左右执行会停止，提示你选中文件保存路径，直接按 Enter 即可，即路径就在C:\\Users\\你的用户名下\n   \n   1s 左右执行又会停止，提示你输入密码，这里不用输入，直接按 Enter 即可\n\n * 在C:\\Users\\你的用户名目录下生成 .ssh 文件夹，去文件夹里找到两个文件：id_rsa 和 id_rsa.pub\n   \n   * id_rsa.pub 为公钥，可以多地方使用\n   * id_rsa 为私钥，提供私钥能找到所有的公钥\n\n * 复制 id_rsa.pub 的内容，进入 Github 的 Settings 设置里，找到 SSH and GPG keys，然后点击 New SSH Key 进行配置\n   \n   \n   \n   点击 New SSH Key 并进行配置：\n   \n   \n   \n   Title 就是 SSh Key 的标题；Key 填入 id_rsa.pub 的内容，如果 Key 不对，说明打开该文件的编码格式有问题\n\n * 测试 SSH 是否连接到 GitHub\n   \n   ssh -T git@github.com\n   \n   \n   1\n   \n   \n   成功连接标志：You\'ve sucessfully ...,but Github ... access\n\n可选步骤：配置 GITEE_RSA_PRIVATE_KEY 和 GITEE_PASSWORD\n\n提示\n\n如果需要 GitHub 的仓库同步到 Gitee 上，则执行这步骤。\n\n下方的自动化文件里，有 GitHub 仓库同步到 Gitee 的实现代码，如果不需要，请注释或者删除。\n\n2021-11-01 @村长\n\n * 在 Gitee 创建仓库，名字要和 Github 的项目仓库一致，包括新建 gh-master 分支\n   \n   \n\n * 新建 gh-pages 分支\n\n\n\n\n\n * 复制 id_rsa.pub 的内容，进入 Gitee 的设置里，找到 SSH 公钥，进行配置\n   \n   \n\n * 测试 SSH 是否连接到 Gitee\n   \n   ssh -T git@gitee.com\n   \n   \n   1\n   \n   \n   成功连接标志：You\'ve sucessfully ...,but Github ... access\n\n * 重新执行配置 ACCESS_TOKEN 步骤，即进入 GitHub 仓库，点击 Settings -> Secrets -> New repository secret\n   \n   * Name 为 GITEE_PASSWORD，Value 为你的 Gitee 密码\n   \n   * Name 为 GITEE_RSA_PRIVATE_KEY，Value为 id_rsa 文件的内容\n     \n     > 注意：是 id_rsa 私钥，而不是 id_rsa.pub 公钥\n\n自此，完成了密钥的配置。\n\n\n# 自动化文件\n\nGitHub Actions 的实现需要一个 yml 文件，在根目录下创建两个文件夹和一个文件：/.github/workflows/ci.yml\n\n\n\nmyNote 是我的博客根目录。ci.yml 的 ci 可自定义\n\nci.yml 文件内容以及过程：（我已经写好了注释）\n\nname: CI\n\n#on: [push]\n\n# 在 master 分支发生 push 事件时触发。\non: \n  push:\n    branches:\n      - master\n      \nenv: # 设置环境变量\n  TZ: Asia/Shanghai # 时区（设置时区可使页面中的 最近更新时间 使用时区时间）\n\njobs: # 工作流\n  build: # 自定义名称\n    runs-on: ubuntu-latest # 必填，运行在虚拟机环境 ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [14.x]\n\n    steps: # 步骤1\n      - name: Checkout # 步骤1，拉取代码\n      # 使用的动作。格式：userName/repoName。作用：检出仓库，获取源码。 官方actions库：https://github.com/actions\n        uses: actions/checkout@v1 \n      \n      - name: Use Node.js ${{ matrix.node-version }} # 步骤2\n        uses: actions/setup-node@v1 # 作用：安装nodejs\n        with:\n          node-version: ${{ matrix.node-version }} # 版本\n\n      - name: run deploy.sh # 步骤3：执行脚本 deploy.sh\n        env: # 设置环境变量，未设置则不运行\n          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }} # token \n          SSH_PRIVATE_KEY: ${{ secrets.GITEE_RSA_PRIVATE_KEY }} # 私钥\n        run: npm install && npm run deploy  # 执行 deploy.sh 脚本，位于项目根目录\n\n      - name: Push Matser To Gitee  # 步骤4：GitHub 内容同步到 Gitee，同步仓库是 master\n        uses: wearerequired/git-mirror-action@master\n        env:\n          SSH_PRIVATE_KEY: ${{ secrets.GITEE_RSA_PRIVATE_KEY }}\n        with:  # 从源到目的地\n          source-repo: \'git@github.com:Kele-Bingtang/notes-blog.git\'    #Github 仓库地址\n          destination-repo: \'git@gitee.com:kele-bingtang/notes-blog.git\'    #Gitee 仓库地址\n\n      - name: Build Gitee Pages # 步骤5：自动部署到 Gitee Pages\n        uses: yanglbme/gitee-pages-action@master\n        with:\n          # 注意替换为你的 Gitee 用户名\n          gitee-username: Kele-Bingtang\n          # 注意在 Settings -> Secrets 配置 GITEE_PASSWORD\n          gitee-password: ${{ secrets.GITEE_PASSWORD }}\n          # 注意替换为你的 Gitee 仓库，仓库名严格区分大小写，请准确填写，否则会出错\n          gitee-repo: Kele-Bingtang/notes-blog\n          # 要部署的分支，默认是 master，若是其他分支，则需要指定（指定的分支必须存在）\n          branch: gh-pages\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n\n点击打开，一些参数解释\n\n * name 是 workflow 的名称。如果省略该字段，默认为当前 workflow 的文件名，可自定义，查看步骤时显示的代号，叫 aa 都可以，描述步骤功能即可\n\n * on 指定触发 workflow 的条件，通常是某些事件，也可以是事件的数组。如上方就是 push 到 master 后触发\n\n * jobs 里面，需要写出每一项任务的 job_id，具体名称自定义。job_id里面的 name 字段是任务的说明\n\n * runs-on 指定运行所需要的虚拟机环境。它是必填字段\n\n * steps 指定每个 Job 的运行步骤，可以包含一个或多个步骤。每个步骤都可以指定三个字段：name、run、env\n\n * uses 用的就是别人写好的插件，持续集成由很多操作组成，GitHub 因此允许其他人把写好的插件共享到插件市场，以便他人使用。因此如果你需要某个 action，不必自己写复杂的脚本，直接引用他人写好的 action 即可。、。官网自带的格式：action/功能名@xx，别人写好的 users 格式为：作者名/功能名@xx。作者名别改成自己的名字，我犯过这个错误，无需纠结为什么叫这个，我之前纠结过，人家规定的不可变的名字。类似于一个写好的命令脚本\n   \n   要想找多个其他 users 脚本，前往GitHub Actions 商城\n\n * env 指环境变量，也就是运行时需要的一些参数，如密钥，仓库地址等\n\n * with 表示传给插件的参数\n\n内容的 steps 里的步骤详细如下：（一个 name 代表一步）\n\n 1. 拉取代码。不需要修改\n 2. 检查 Node.js 版本，安装指定的 Nodejs 版本，如果版本对了，则会跳过这一步。不需要修改\n 3. 执行脚本 deploy.sh。也就是脚本部署的脚本，这个脚本会打包项目到 gh-pages 目录下。需要配置密钥，env 读取的就是密钥。上方说过密钥为什么固定是ACCESS_TOKEN这些，因为这里读取的就是这些名字，如需修改，双方都要改\n 4. GitHub 仓库同步到 Gitee，同步仓库是 master，如果没有这个打算，则注释或者删除掉，包括第五步\n 5. Gitee 获得最新的代码后，不会重新部署新的代码。因为免费的 Gitee Page 需要手动点击更新，而 Github Page 自动😸。所以需要别人写好的 users: yanglbme/gitee-pages-action@master 帮助点击更新\n\n文件内容需要改的是仓库地址，以及 Gitee 用户名\n\n编写提交项目到 master 仓库的脚本，叫 push.sh\n\n#!/usr/bin/env sh\n\n# 本脚本为自动部署的入口脚本，只需执行该脚本，即可实现GitHub的自动部署，以及 push 到 GitHub 的所有文件同步到 Gitee 中\n\nGITHUB_REPO=git@github.com:Kele-Bingtang/notes-blog.git\n\ncomment=$1\n\nif [ ! $comment ]; then\ncomment="更新内容+action自动部署"\nfi\n\ngit add -A\n\ngit commit -m "${comment}"    # $1 是启动该脚本传来的参数，如 sh push.sh hello，其中 hello 就会插入到 $1 处，如果想两个参数，则加 $2\n\ngit push $GITHUB_REPO   \n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n在根目录下用 Git Bash Here 打开，并执行该脚本\n\nsh push.sh\n\n\n1\n\n\n一旦该脚本执行成功后，静待五六分钟，会发现 master 主支更新了项目源码，gh-pages 分支更新的项目打包后的代码。\n\nGitee 对应的仓库 master 主支也更新了项目源码，gh-pages 分支也更新的项目打包后的代码。\n\n\n# 自动化文件流程\n\nyml 被执行流程\n\n当第一次提交项目到仓库时，Github 会自动在项目根目录找到 /.github/workflows/ 下的 yml 文件，如 ci.yml，并且执行该 ci.yml 文件；\n\n当第二次乃至后面提交项目到仓库时，Github 判断 ci.yml 内容是否发送变化，没有则执行仓库的 ci.yml 文件，有则先更新文件再执行。\n\nyml 执行流程\n\n当把项目源码推送到仓库的 master 主支时，该 yml 文件开始执行。该文件执行的第三步，就会执行 deploy.sh 脚本部署文件，完成把打包文件提交到 gh-pages 分支下，该文件的第四步，则是把 Github 仓库的代码同步到 Gitee 仓库里，包括 gh-pages分支（双方仓库名字要一致），该文件第五步，则是手动点击了 Gitee 的更新部署按钮。（Gitee 自动更新部署需要 99元/年，没钱只能利用脚本手动点击按钮更新）\n\n\n# 问答\n\nQ1 - 能概括一下本内容吗？\n\n可以，概括的过程包括 GitHub 和 Gitee，如果只选择一方，选择性另一方忽略即可。\n\n 1. Github 和 Gitee 分别创建一个仓库，并且分别创建 gh-pages 分支，仓库名要一致\n 2. 将写好的项目源码提交到 master 主支，打包后的项目文件放到 gh-pages 分支，主支名即 default\n 3. 开启 Github Pages 和 Gitee Pages，两者都有自己的部署地址，前者网速慢，后者网速快\n 4. 实现脚本部署，节省步骤 2 的打包项目提交时间，但是无法节省项目源码提交时间\n 5. 首先生成 token，然后生成公钥私钥，公钥分别配置在 Github 和 Gitee 网站上，token、私钥、Gitee 密码都配置在项目仓库上\n 6. 配置 yml 文件，在 根目录/.github/workflows/ 下创建 ci.yml 文件，填写好内容\n 7. 编写 push.sh 脚本，填写好内容，每次写完文档后执行该脚本，即可实现完成自动化部署\n\n----------------------------------------\n\nQ2 - 实现自动化部署有多少个脚本？\n\n3个\n\npush.sh：提交源码到 master 主支；\n\ndeploy：提交打包文件到 gh-pages 分支；\n\nci.yml：同步 Github 仓库到 Gitee 仓库。\n\n----------------------------------------\n\nQ3 - 为什么配置密钥内容好乱？\n\n其实配置密钥总结就是：给 Github 项目仓库配置 token、Gitee 密码、私钥，给 Github、Gitee 配置公钥。\n\nQ4 - 为什么给仓库配置 token？\n\n因为项目仓库要实现自动化部署，需要权限，而权限来自于 token，可以理解为它是另一种用户名密码，所以别泄露 token。\n\n----------------------------------------\n\nQ5 - 为什么分别给 GitHub 网站和 Gitee 网站配置 id_rsa.pub 公钥，又给 Github 的项目仓库配置 id_rsa 私钥？\n\n因为配置好自动化文件后，Github 要想同步仓库代码到 Gitee，则必须需要搭建桥梁。这个桥梁就是公钥，所以双方都要配好公钥。而私钥则是打开、通往桥梁的钥匙。\n\n比如提交了代码到 GitHub 仓库，Github 要想同步到 Gitee，首先找到和自己相吻合的公钥，也就是 Gitee 的公钥，然后通过 GitHub Actions 入口前往 Gitee，前往的路上为什么能保证数据的不丢失，就是私钥在指引道路。\n\n多个仓库都可以配置一个公钥，而某一仓库前往这些多个仓库，则需要私钥当作通行证和方向盘。\n\n----------------------------------------\n\nQ6 - 如果项目不想放在 Github 仓库，想放在 Gitee 仓库怎么做？\n\n可以把 Gitee 理解为 Github 的中文版，知道了如何在 Github 自动化部署项目，并且同步到 Gitee。转换一下语言，我相信也是很容易的。\n\n比如双方都配好公钥、Gitee 拿着私钥去找 Github 同步仓库也是可以的。\n\n----------------------------------------\n\nQ7 - 如果只想把项目放在 Github 或者 Gitee 任一网站上，需要都 token、密钥都配置吗？\n\n不需要，只需要在项目部署的网站配置好 token 和 SSH Key 即可，然后去 ci.yml 里把步骤 4 和步骤 5 注释或者去掉。\n\n有些人只需要配置 token 即可，不需要配置 SSH Key，因为曾经配置过了，我建议都需要重新配置，防止意外。\n\n----------------------------------------\n\nQ8 - 为什么一定同步到 Gitee？\n\n刚开始我只部署到 GitHub Page，但是毕竟是国外，网速慢，所以就考虑部署到 Gitee，但是又不舍得 GitHub，于是重心依然放在 GitHub，只需要同步到 Gitee Pages 即可。其实我访问博客，一直访问的是 Gitee Pages 提供的地址。还是比较快。\n\n\n# 问题\n\n记录我在部署的过程中遇到的问题，这些问题卡了我挺长时间：\n\n 1. 生成 token 和 Secrets 设置\n 2. 配置 .git/conig 内容以及指令一样\n 3. .github/**.yml 设计\n 4. GitHub 自动部署，而 Gitee 需要手动\n 5. shell 脚本设计\n\n\n# 更新base\n\n因为一些原因，我把 base 由仓库名改为了 /，从而导致部署后访问的地址带有仓库名失效，正确做法：\n\n * GitHub 仓库修改仓库名为：<username>.github.io，这样直接访问 https://<username>.github.io 就会生效\n   \n   \n\n * Github 仓库修改路径，仓库名不重要，可改可不改，改为 <username>.gitee.io\n   \n   \n\nci.yml 文件把原来的仓库地址修改为更新后的地址：\n\nname: CI\n\n#on: [push]\n\n# 在 master 分支发生 push 事件时触发。\non: \n  push:\n    branches:\n      - master\n\njobs: # 工作流\n  build: # 自定义名称\n    runs-on: ubuntu-latest # 必填，运行在虚拟机环境 ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [14.x]\n\n    steps: \n      - name: Checkout # 步骤1，拉取代码\n      # 使用的动作。格式：userName/repoName。作用：检出仓库，获取源码。 官方actions库：https://github.com/actions\n        uses: actions/checkout@v1 \n      \n      - name: Use Node.js ${{ matrix.node-version }} # 步骤2\n        uses: actions/setup-node@v1 # 作用：安装nodejs\n        with:\n          node-version: ${{ matrix.node-version }} # 版本\n\n      - name: run deploy.sh # 步骤3：执行脚本 deploy.sh\n        env: # 设置环境变量，未设置则不运行\n          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }} # token \n          SSH_PRIVATE_KEY: ${{ secrets.GITEE_RSA_PRIVATE_KEY }} # 私钥\n        run: npm install && npm run deploy  # 执行 deploy.sh 脚本，位于项目根目录\n\n      - name: Push Matser To Gitee  # 步骤4：GitHub 内容同步到 Gitee，同步仓库是 master\n        uses: wearerequired/git-mirror-action@master\n        env:\n          SSH_PRIVATE_KEY: ${{ secrets.GITEE_RSA_PRIVATE_KEY }}\n        with:  # 从源到目的地\n          source-repo: \'git@github.com:Kele-Bingtang/Kele-Bingtang.github.io.git\'    #Github 仓库地址\n          destination-repo: \'git@gitee.com:kele-bingtang/Kele-Bingtang.gitee.io.git\'    #Gitee 仓库地址\n\n      - name: Build Gitee Pages # 步骤5：自动部署到 Gitee Pages\n        uses: yanglbme/gitee-pages-action@master\n        with:\n          # 注意替换为你的 Gitee 用户名\n          gitee-username: Kele-Bingtang\n          # 注意在 Settings -> Secrets 配置 GITEE_PASSWORD\n          gitee-password: ${{ secrets.GITEE_PASSWORD }}\n          # 注意替换为你的 Gitee 仓库地址，仓库名严格区分大小写，一般地址和仓库名一致，如果地址改了，仓库名不改，要以地址为准（地址仅需后缀，即 https://gitee.com/<username>/xxx 的 xxx 即可）\n          gitee-repo: Kele-Bingtang/Kele-Bingtang.gitee.io\n          # 要部署的分支，默认是 master，若是其他分支，则需要指定（指定的分支必须存在）\n          branch: gh-pages\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n\n\n值得注意的是 51 行的 gitee-repo 不是 Gitee 的仓库名字，而是修改的地址名：<username>.gitee.io。\n\n\n# 自定义域名\n\n这里以 GitHub 举例，Gitee 同理。\n\n前往你的域名解析处，进入如下配置：\n\n\n\n然后进入 GitHub 绑定自定义的域名\n\n\n\n注意\n\nGitee 的仓库不要改为 <username>.gitee.io，而是直接改为 <username> 即可。\n\n2021-01-04 @村长\n\n套用 Gitee 官方的一句话：\n\n如果你想你的 pages 首页访问地址不带二级目录，如ipvb.gitee.io，你需要建立一个与自己个性地址同名的仓库，如 https://gitee.com/ipvb 这个用户，想要创建一个自己的站点，但不想以子目录的方式访问，想以ipvb.gitee.io直接访问，那么他就可以创建一个名字为ipvb的仓库 https://gitee.com/ipvb/ipvb 部署完成后，就可以以 https://ipvb.gitee.io 进行访问了。',normalizedContent:'序言\n\n部署，打造自己的「身份证」。\n\n自动化，时间管理的福利。\n\n2021-11-01 @村长\n\n\n\n * 手动部署\n   * 介绍\n   * 优势\n   * 限制\n   * 开始使用\n   * 上传代码\n * 开启部署\n * 脚本部署\n * 自动化部署\n   * 介绍\n   * 生成token\n   * 配置密钥\n   * 自动化文件\n   * 自动化文件流程\n * 问答\n * 问题\n * 更新base\n * 自定义域名\n\n\n\n\n# 手动部署\n\n\n# 介绍\n\ngithub pages 是一个静态站点托管服务。\n\n如果你想记录生活、抒发情感、分享见解，这一切都离不开一个可以承载文字的平台，一个独立的、由自己掌控的平台，而 github pages 就是这么一个平台。\n\n在这个平台里你可以使用自己的个性域名；可以在海量的主题里挑选最适合你的那一款，如果你技术极客，也可以根据自己的喜好，设计属于自己的个性化页面；你既可以在线创建和发布网站，也可以在本地通过客户端工具或者命令行进行网站和内容的管理。\n\n你完全可以通过 github pages 展示和输出自身价值，甚至可以把它打造成属于自己的互联网「身份证」。\n\n如果你想仔细了解 github pages，点击这里\n\n\n# 优势\n\n * github pages 完全免费，不需要个人购买服务器、域名\n * 官方文档详细，不需要强大的编程能力，只需要一步一步按着操作来使用\n * 支持的功能多，你可以绑定你的域名、使用免费的 https、自己 diy 网站的主题、使用他人开发好的插件等等\n * 完成搭建后，只需要专注于文章即可，其他诸如环境搭建、系统维护、文件存储的事情一概不用操心，都由 github pages 处理\n\n......\n\n\n# 限制\n\n * github pages 源仓库建议限制为 1gb；\n * 发布的 github pages 网站可能不超过 1gb；\n * github pages 网站每月的带宽限制为 100gb；\n * github pages 网站每小时限制 10 个软件。\n\n\n# 开始使用\n\n * 首先，你必须拥有一个 github 账号，注册点击这里\n\n * 创建一个仓库用于存放自己的博客项目，如图：点击右上角的 + 号\n   \n   \n\n * 填写自己的仓库信息\n   \n   \n   \n   如我的博客仓库名就叫 notes-blog，因为我打算创建一个生活博客，类似于 live-blog，所以对博客名进行分类\n   \n   防止图片失效，这里记录步骤和gitignore文件内容\n    1. 填写仓库名\n    2. 填写仓库描述，可以不写\n    3. 选择公有 public\n    4. 建议选择 add a readme file，添加readme文档\n    5. add .gitignore 是添加 .gitignore 文件，如果不知道文件内容，可以不选。则需要手动在自己的博客目录下创建 .gitignore文档，填入如下内容：\n   \n   # npm\n   package-lock.json\n   node_modules\n   \n   # yarn\n   yarn.lock\n   \n   # vscode\n   .vscode\n   \n   # vuepress\n   docs/.vuepress/dist\n   \n   # 百度链接推送\n   urls.txt\n   \n   # mac\n   .ds_store\n   \n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   \n\n * 创建仓库后，进入仓库，然后创建一个分支，名字必须叫做gh-pages，可以理解为默认只识别这个名字\n   \n   * 创建好的仓库默认主支是 master 或者 main，现在 github 逐渐让 main 作为默认的主支名\n   * 主支用于仓库的文件汇总，分支则是每一个用户上传到仓库的通道，最终合并到主支\n   \n   \n   \n   防止图片失效，这里记录步骤\n    1. 点击 master，弹出拉下框\n    2. 搜索 gh-pages，必须是这个\n    3. 创建 gh-pages。搜索后，会显示 create branch：gh-pages from master，点击即可创建\n\n说明\n\n为什么创建 gh-pages 分支呢？因为 master 主支放的是博客源码，而 gh-pages 分支放的是主支打包后的博客代码。\n\n不理解打包，可以这么认为：写的 markdown 文档是源码，要想显示到网页上，需要变成 html 文件，打包就是变成 html 的过程。\n\n2021-11-01 @村长\n\n\n# 上传代码\n\n * 初始化项目根目录\n   \n   git init\n   \n   \n   1\n   \n   \n   如果早期你的项目体系是从其他人的仓库克隆的，说明你不需要初始化根目录，而是需要修改 github 的提交地址，因为提交地址目前是其他人的\n   \n   修改提交地址\n   \n   方法一：\n   \n   执行如下命令进行更改：\n   \n   git remote rm origin  # 删除远程地址\n   git remote add origin url  #  url 填写自己的仓库地址，如我的就是 https://github.com/huangguan2001/\n   \n   \n   1\n   2\n   \n   \n   方法二：（执行方法一，其实就会自动执行方法二）\n   \n   打开根目录下的 .git 文件夹，因为这个文件夹默认隐藏，所以需要设置显示隐藏文件\n   \n   \n   \n   进入 .git目录后，打开 config 文件，手动添入信息：url、fetch\n   \n   \n\n提交项目的源码和项目的打包文件\n\n * 提交项目源码到仓库里\n   \n   git add -a  # 把项目的所有文件添加到本地仓库\n   git commit -m ""  # 双引号里是对于添加文件的描述\n   git push   # 将本地仓库提交到远程仓库，也就是你的 github 仓库，地址默认上方 config 文件的 url，具体看上方图片\n   # 你也可以 git push url     # url就是你的仓库地址\n   \n   \n   1\n   2\n   3\n   4\n   \n\n * 进入项目的根目录，打包项目\n   \n   yarn run build  # build是package.json的规定，你的不一定是build\n   \n   \n   1\n   \n   \n   vuepress build docs\n   \n   \n   1\n   \n\n * 上传打包项目到 gh-pages 分支，我的是在 .vuepress 目录下的 dist\n   \n   git add -a  # 把项目的所有文件添加到本地仓库\n   git commit -m ""  # 双引号里是对于添加文件的描述\n   git push -f url master:gh-pages # url就是你的仓库地址,推送到github gh-pages分支 \n   \n   \n   1\n   2\n   3\n   \n   \n   -f 是必须的，意味着覆盖原来的内容\n\n自此，如果可以在仓库 master 下看到源码，gh-pages 下看到打包后的文件，代表成功了\n\n\n# 开启部署\n\n笔记\n\n这一内容为开启 github page 或者 gitee page，是为了连接手动部署成功后的操作，如果手动部署失败或者想直接使用脚本部署，则至少二选一成功了再来进行本内容的操作。\n\n自动化部署前需要先开启 github page 或者 gitee page。\n\n2021-11-01 @村长\n\n当部署成功时，没有看到想要的成果，我相信不会有人继续进行枯燥的操作。下面将开启 github page 或者 gitee page，见证自己的部署成功页面。\n\ngithub page\n\n\n\n防止图片失效，这里记录步骤\n 1. 进入仓库，点击 settings\n 2. 找到 pages 选项\n 3. 选择要部署的分支，一定是 gh-pages 分支\n 4. 绿色框的地址，就是所有人都能访问的地址，访问之后，就能看到你的博客\n\ngitee page\n\n\n\n第一步，点击服务的时候，会有 6 个选项，选择第一个 gitee pages\n\n防止图片失效，这里记录步骤\n 1. 进入仓库，点击服务，弹出选择列表，选择 gitee pages\n 2. 选择要部署的分支，一定是 gh-pages 分支\n 3. 部署目录默认整个 gh-pages分支\n 4. http5 可选可不选，我选了\n 5. 按下确定按钮，等待不久，显示地址，所有人访问这个地址就能进入你的博客\n\n注意\n\ngithub 一旦更新 gh-pages 分支内容，会自动重新部署，所以访问页面是最新的。\n\ngitee 一旦更新 gh-pages 分支内容，需要手动点击上图的更新按钮，访问的页面才是最新的。要想自动更新部署。要花钱。\n\n2021-11-02 @村长\n\n\n# 脚本部署\n\n注意\n\n脚本部署仅适用于把打包后的文件推送到 github 仓库的 gh-pages 分支下，不适用把项目源码推送到 master 主支上。\n\n所以还得手动执行命令把源码推送到 github 仓库。当然自动化部署，可以全部解决。\n\n2021-11-01 @村长\n\n每次写完文档，如果都需要像上面上传代码中手动打包，无疑是繁琐且耗费时间的，学会使用脚本解决频繁的问题，能更加专注于文章。\n\nshell 脚本，请自行学习，日后我更新了 shell 的学习文档，这里会提供跳转地址 「*记录」。\n\n该脚本是推送项目到 github，如果推送到 gitee，修改仓库地址即可，脚本名叫 deploy.sh，请放在项目的根目录下。\n\n#!/usr/bin/env sh\n\n# 确保脚本抛出遇到的错误\nset -e\n\n# 生成静态文件\nnpm run build\n\n# 进入生成的文件夹\ncd docs/.vuepress/dist\n\n# 如果手运行该脚本，则执行if里的，如果是github自动执行该脚本，则是else里的\nif [ -z "$github_token" ]; then\n msg=\'deploy\'\n githuburl=git@github.com:kele-bingtang/notes-blog.git  # 替换自己的 github 仓库地址，ssh格式\nelse\n msg=\'来自github actions的自动部署\'\n # 替换自己的 github 仓库地址，更改的是 @后面的地址 以及 把kele-bingtang 改为自己用户名\n githuburl=https://kele-bingtang:${github_token}@github.com/kele-bingtang/notes-blog.git \n git config --global user.name "kele_bingtang"   # 修改为自己的 github 用户名\n git config --global user.email "2456019588@qq.com"  # 修改为自己的 github 邮箱，注册时绑定的邮箱\nfi\ngit init\ngit add -a\ngit commit -m "${msg}"\ngit push -f $githuburl master:gh-pages # 推送到github gh-pages分支\n\ncd - # 退回开始所在目录\nrm -rf docs/.vuepress/dist\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n在项目根目录打开 bash 命令窗口或者 git bash here 窗口，执行该脚本\n\nsh deploy.sh  # 假设你的脚本叫 deploy.sh\n\n\n1\n\n\n> 注意：windows下的 cmd 无法执行 shell 脚本\n\n\n# 自动化部署\n\n注意\n\ngithub 一旦推送了新代码，则会自动化部署。\n\ngitee 一旦推送了新代码，不会自动化部署，需要手动点击更新按钮。如实现自动化，需要收费，99元/年。\n\n2021-11-01 @村长\n\n使用了脚本部署，相比较手动部署，少了打包的过程，节省了时间，但是还要手动执行两次过程：\n\n 1. 敲打命令推送项目源码到仓库的 master 上\n 2. 执行 shell 脚本，自动打包并推送打包内容到仓库的 gh-pages 上\n\n自动化部署利用了 github actions ，仅需实现过程1：推送项目源码到 master，即可自动实现过程 2\n\n过程 1 可以写一个脚本执行。这样执行一个脚本，即可实现自动化，下方有该脚本，名叫 push.sh\n\n\n# 介绍\n\ngithub actions 是 github 的持续集成服务，于 2018 年 10 月推出。\n\ngithub actions 入门教程\n\ngithub actions 商城\n\n\n# 生成token\n\n首先，获取 token，这是 github 的另一种授权方式，即不需要用户名和密码\n\n * 进入 github，点击头像，找到 setting\n   \n   \n\n * 找到 developer settings 并点击\n   \n   \n\n * 点击 persional access tokens，然后点击 generate new token 生成toke\n   \n   \n\n * 填写 note，即 token 的描述，并选择 repo，其他不用选\n   \n   \n\n如果不想你的 token 过期，在 expiration 选中 no expiration 即可\n\ntoken 生成后，记得保存下来，因为页面一旦关闭，token 不会在显示\n\n\n# 配置密钥\n\n拿到了 token，需要将该 token 进行配置，赋予某仓库权限\n\n内容分为三步，其中第三步看需求，第一、二步则是必须。\n\n第一步：配置 access_token；\n\n第二步：配置 ssh key\n\n第三步：配置 gitee_rsa_private_key和 gitee_password。\n\n配置 access_token\n\n配置密钥是因为自动化部署过程，需要 github 权限，没有 token，就没有权限部署\n\naccess_token 是固定的，名字要和下方脚本使用的名对应上。如果需要改，双方都要改\n\n * 找到仓库的 settings ，并点击 secrets\n\n\n\n点击 new repository secret 并进行配置，其中 name 是 access_token，value 是之前生成的 token\n\n\n\n点击 add secret 即可该密钥添加成功\n\n配置 ssh key\n\n * 打开 git bash 查看电脑上是否已经存在 ssh 密钥。如果有，请直接看第三步\n   \n   cd ~/.ssh\n   \n   \n   1\n   \n   \n   或者前往c:\\users\\你的用户名下找 .ssh 文件夹\n\n * 如果没有则需要创建新的 ssh key，打开 git bash here，输入：\n   \n   ssh-keygen -t rsa -c "你的绑定github邮箱"\n   \n   \n   1\n   \n   \n   1s 左右执行会停止，提示你选中文件保存路径，直接按 enter 即可，即路径就在c:\\users\\你的用户名下\n   \n   1s 左右执行又会停止，提示你输入密码，这里不用输入，直接按 enter 即可\n\n * 在c:\\users\\你的用户名目录下生成 .ssh 文件夹，去文件夹里找到两个文件：id_rsa 和 id_rsa.pub\n   \n   * id_rsa.pub 为公钥，可以多地方使用\n   * id_rsa 为私钥，提供私钥能找到所有的公钥\n\n * 复制 id_rsa.pub 的内容，进入 github 的 settings 设置里，找到 ssh and gpg keys，然后点击 new ssh key 进行配置\n   \n   \n   \n   点击 new ssh key 并进行配置：\n   \n   \n   \n   title 就是 ssh key 的标题；key 填入 id_rsa.pub 的内容，如果 key 不对，说明打开该文件的编码格式有问题\n\n * 测试 ssh 是否连接到 github\n   \n   ssh -t git@github.com\n   \n   \n   1\n   \n   \n   成功连接标志：you\'ve sucessfully ...,but github ... access\n\n可选步骤：配置 gitee_rsa_private_key 和 gitee_password\n\n提示\n\n如果需要 github 的仓库同步到 gitee 上，则执行这步骤。\n\n下方的自动化文件里，有 github 仓库同步到 gitee 的实现代码，如果不需要，请注释或者删除。\n\n2021-11-01 @村长\n\n * 在 gitee 创建仓库，名字要和 github 的项目仓库一致，包括新建 gh-master 分支\n   \n   \n\n * 新建 gh-pages 分支\n\n\n\n\n\n * 复制 id_rsa.pub 的内容，进入 gitee 的设置里，找到 ssh 公钥，进行配置\n   \n   \n\n * 测试 ssh 是否连接到 gitee\n   \n   ssh -t git@gitee.com\n   \n   \n   1\n   \n   \n   成功连接标志：you\'ve sucessfully ...,but github ... access\n\n * 重新执行配置 access_token 步骤，即进入 github 仓库，点击 settings -> secrets -> new repository secret\n   \n   * name 为 gitee_password，value 为你的 gitee 密码\n   \n   * name 为 gitee_rsa_private_key，value为 id_rsa 文件的内容\n     \n     > 注意：是 id_rsa 私钥，而不是 id_rsa.pub 公钥\n\n自此，完成了密钥的配置。\n\n\n# 自动化文件\n\ngithub actions 的实现需要一个 yml 文件，在根目录下创建两个文件夹和一个文件：/.github/workflows/ci.yml\n\n\n\nmynote 是我的博客根目录。ci.yml 的 ci 可自定义\n\nci.yml 文件内容以及过程：（我已经写好了注释）\n\nname: ci\n\n#on: [push]\n\n# 在 master 分支发生 push 事件时触发。\non: \n  push:\n    branches:\n      - master\n      \nenv: # 设置环境变量\n  tz: asia/shanghai # 时区（设置时区可使页面中的 最近更新时间 使用时区时间）\n\njobs: # 工作流\n  build: # 自定义名称\n    runs-on: ubuntu-latest # 必填，运行在虚拟机环境 ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [14.x]\n\n    steps: # 步骤1\n      - name: checkout # 步骤1，拉取代码\n      # 使用的动作。格式：username/reponame。作用：检出仓库，获取源码。 官方actions库：https://github.com/actions\n        uses: actions/checkout@v1 \n      \n      - name: use node.js ${{ matrix.node-version }} # 步骤2\n        uses: actions/setup-node@v1 # 作用：安装nodejs\n        with:\n          node-version: ${{ matrix.node-version }} # 版本\n\n      - name: run deploy.sh # 步骤3：执行脚本 deploy.sh\n        env: # 设置环境变量，未设置则不运行\n          github_token: ${{ secrets.access_token }} # token \n          ssh_private_key: ${{ secrets.gitee_rsa_private_key }} # 私钥\n        run: npm install && npm run deploy  # 执行 deploy.sh 脚本，位于项目根目录\n\n      - name: push matser to gitee  # 步骤4：github 内容同步到 gitee，同步仓库是 master\n        uses: wearerequired/git-mirror-action@master\n        env:\n          ssh_private_key: ${{ secrets.gitee_rsa_private_key }}\n        with:  # 从源到目的地\n          source-repo: \'git@github.com:kele-bingtang/notes-blog.git\'    #github 仓库地址\n          destination-repo: \'git@gitee.com:kele-bingtang/notes-blog.git\'    #gitee 仓库地址\n\n      - name: build gitee pages # 步骤5：自动部署到 gitee pages\n        uses: yanglbme/gitee-pages-action@master\n        with:\n          # 注意替换为你的 gitee 用户名\n          gitee-username: kele-bingtang\n          # 注意在 settings -> secrets 配置 gitee_password\n          gitee-password: ${{ secrets.gitee_password }}\n          # 注意替换为你的 gitee 仓库，仓库名严格区分大小写，请准确填写，否则会出错\n          gitee-repo: kele-bingtang/notes-blog\n          # 要部署的分支，默认是 master，若是其他分支，则需要指定（指定的分支必须存在）\n          branch: gh-pages\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n\n点击打开，一些参数解释\n\n * name 是 workflow 的名称。如果省略该字段，默认为当前 workflow 的文件名，可自定义，查看步骤时显示的代号，叫 aa 都可以，描述步骤功能即可\n\n * on 指定触发 workflow 的条件，通常是某些事件，也可以是事件的数组。如上方就是 push 到 master 后触发\n\n * jobs 里面，需要写出每一项任务的 job_id，具体名称自定义。job_id里面的 name 字段是任务的说明\n\n * runs-on 指定运行所需要的虚拟机环境。它是必填字段\n\n * steps 指定每个 job 的运行步骤，可以包含一个或多个步骤。每个步骤都可以指定三个字段：name、run、env\n\n * uses 用的就是别人写好的插件，持续集成由很多操作组成，github 因此允许其他人把写好的插件共享到插件市场，以便他人使用。因此如果你需要某个 action，不必自己写复杂的脚本，直接引用他人写好的 action 即可。、。官网自带的格式：action/功能名@xx，别人写好的 users 格式为：作者名/功能名@xx。作者名别改成自己的名字，我犯过这个错误，无需纠结为什么叫这个，我之前纠结过，人家规定的不可变的名字。类似于一个写好的命令脚本\n   \n   要想找多个其他 users 脚本，前往github actions 商城\n\n * env 指环境变量，也就是运行时需要的一些参数，如密钥，仓库地址等\n\n * with 表示传给插件的参数\n\n内容的 steps 里的步骤详细如下：（一个 name 代表一步）\n\n 1. 拉取代码。不需要修改\n 2. 检查 node.js 版本，安装指定的 nodejs 版本，如果版本对了，则会跳过这一步。不需要修改\n 3. 执行脚本 deploy.sh。也就是脚本部署的脚本，这个脚本会打包项目到 gh-pages 目录下。需要配置密钥，env 读取的就是密钥。上方说过密钥为什么固定是access_token这些，因为这里读取的就是这些名字，如需修改，双方都要改\n 4. github 仓库同步到 gitee，同步仓库是 master，如果没有这个打算，则注释或者删除掉，包括第五步\n 5. gitee 获得最新的代码后，不会重新部署新的代码。因为免费的 gitee page 需要手动点击更新，而 github page 自动😸。所以需要别人写好的 users: yanglbme/gitee-pages-action@master 帮助点击更新\n\n文件内容需要改的是仓库地址，以及 gitee 用户名\n\n编写提交项目到 master 仓库的脚本，叫 push.sh\n\n#!/usr/bin/env sh\n\n# 本脚本为自动部署的入口脚本，只需执行该脚本，即可实现github的自动部署，以及 push 到 github 的所有文件同步到 gitee 中\n\ngithub_repo=git@github.com:kele-bingtang/notes-blog.git\n\ncomment=$1\n\nif [ ! $comment ]; then\ncomment="更新内容+action自动部署"\nfi\n\ngit add -a\n\ngit commit -m "${comment}"    # $1 是启动该脚本传来的参数，如 sh push.sh hello，其中 hello 就会插入到 $1 处，如果想两个参数，则加 $2\n\ngit push $github_repo   \n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n在根目录下用 git bash here 打开，并执行该脚本\n\nsh push.sh\n\n\n1\n\n\n一旦该脚本执行成功后，静待五六分钟，会发现 master 主支更新了项目源码，gh-pages 分支更新的项目打包后的代码。\n\ngitee 对应的仓库 master 主支也更新了项目源码，gh-pages 分支也更新的项目打包后的代码。\n\n\n# 自动化文件流程\n\nyml 被执行流程\n\n当第一次提交项目到仓库时，github 会自动在项目根目录找到 /.github/workflows/ 下的 yml 文件，如 ci.yml，并且执行该 ci.yml 文件；\n\n当第二次乃至后面提交项目到仓库时，github 判断 ci.yml 内容是否发送变化，没有则执行仓库的 ci.yml 文件，有则先更新文件再执行。\n\nyml 执行流程\n\n当把项目源码推送到仓库的 master 主支时，该 yml 文件开始执行。该文件执行的第三步，就会执行 deploy.sh 脚本部署文件，完成把打包文件提交到 gh-pages 分支下，该文件的第四步，则是把 github 仓库的代码同步到 gitee 仓库里，包括 gh-pages分支（双方仓库名字要一致），该文件第五步，则是手动点击了 gitee 的更新部署按钮。（gitee 自动更新部署需要 99元/年，没钱只能利用脚本手动点击按钮更新）\n\n\n# 问答\n\nq1 - 能概括一下本内容吗？\n\n可以，概括的过程包括 github 和 gitee，如果只选择一方，选择性另一方忽略即可。\n\n 1. github 和 gitee 分别创建一个仓库，并且分别创建 gh-pages 分支，仓库名要一致\n 2. 将写好的项目源码提交到 master 主支，打包后的项目文件放到 gh-pages 分支，主支名即 default\n 3. 开启 github pages 和 gitee pages，两者都有自己的部署地址，前者网速慢，后者网速快\n 4. 实现脚本部署，节省步骤 2 的打包项目提交时间，但是无法节省项目源码提交时间\n 5. 首先生成 token，然后生成公钥私钥，公钥分别配置在 github 和 gitee 网站上，token、私钥、gitee 密码都配置在项目仓库上\n 6. 配置 yml 文件，在 根目录/.github/workflows/ 下创建 ci.yml 文件，填写好内容\n 7. 编写 push.sh 脚本，填写好内容，每次写完文档后执行该脚本，即可实现完成自动化部署\n\n----------------------------------------\n\nq2 - 实现自动化部署有多少个脚本？\n\n3个\n\npush.sh：提交源码到 master 主支；\n\ndeploy：提交打包文件到 gh-pages 分支；\n\nci.yml：同步 github 仓库到 gitee 仓库。\n\n----------------------------------------\n\nq3 - 为什么配置密钥内容好乱？\n\n其实配置密钥总结就是：给 github 项目仓库配置 token、gitee 密码、私钥，给 github、gitee 配置公钥。\n\nq4 - 为什么给仓库配置 token？\n\n因为项目仓库要实现自动化部署，需要权限，而权限来自于 token，可以理解为它是另一种用户名密码，所以别泄露 token。\n\n----------------------------------------\n\nq5 - 为什么分别给 github 网站和 gitee 网站配置 id_rsa.pub 公钥，又给 github 的项目仓库配置 id_rsa 私钥？\n\n因为配置好自动化文件后，github 要想同步仓库代码到 gitee，则必须需要搭建桥梁。这个桥梁就是公钥，所以双方都要配好公钥。而私钥则是打开、通往桥梁的钥匙。\n\n比如提交了代码到 github 仓库，github 要想同步到 gitee，首先找到和自己相吻合的公钥，也就是 gitee 的公钥，然后通过 github actions 入口前往 gitee，前往的路上为什么能保证数据的不丢失，就是私钥在指引道路。\n\n多个仓库都可以配置一个公钥，而某一仓库前往这些多个仓库，则需要私钥当作通行证和方向盘。\n\n----------------------------------------\n\nq6 - 如果项目不想放在 github 仓库，想放在 gitee 仓库怎么做？\n\n可以把 gitee 理解为 github 的中文版，知道了如何在 github 自动化部署项目，并且同步到 gitee。转换一下语言，我相信也是很容易的。\n\n比如双方都配好公钥、gitee 拿着私钥去找 github 同步仓库也是可以的。\n\n----------------------------------------\n\nq7 - 如果只想把项目放在 github 或者 gitee 任一网站上，需要都 token、密钥都配置吗？\n\n不需要，只需要在项目部署的网站配置好 token 和 ssh key 即可，然后去 ci.yml 里把步骤 4 和步骤 5 注释或者去掉。\n\n有些人只需要配置 token 即可，不需要配置 ssh key，因为曾经配置过了，我建议都需要重新配置，防止意外。\n\n----------------------------------------\n\nq8 - 为什么一定同步到 gitee？\n\n刚开始我只部署到 github page，但是毕竟是国外，网速慢，所以就考虑部署到 gitee，但是又不舍得 github，于是重心依然放在 github，只需要同步到 gitee pages 即可。其实我访问博客，一直访问的是 gitee pages 提供的地址。还是比较快。\n\n\n# 问题\n\n记录我在部署的过程中遇到的问题，这些问题卡了我挺长时间：\n\n 1. 生成 token 和 secrets 设置\n 2. 配置 .git/conig 内容以及指令一样\n 3. .github/**.yml 设计\n 4. github 自动部署，而 gitee 需要手动\n 5. shell 脚本设计\n\n\n# 更新base\n\n因为一些原因，我把 base 由仓库名改为了 /，从而导致部署后访问的地址带有仓库名失效，正确做法：\n\n * github 仓库修改仓库名为：<username>.github.io，这样直接访问 https://<username>.github.io 就会生效\n   \n   \n\n * github 仓库修改路径，仓库名不重要，可改可不改，改为 <username>.gitee.io\n   \n   \n\nci.yml 文件把原来的仓库地址修改为更新后的地址：\n\nname: ci\n\n#on: [push]\n\n# 在 master 分支发生 push 事件时触发。\non: \n  push:\n    branches:\n      - master\n\njobs: # 工作流\n  build: # 自定义名称\n    runs-on: ubuntu-latest # 必填，运行在虚拟机环境 ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [14.x]\n\n    steps: \n      - name: checkout # 步骤1，拉取代码\n      # 使用的动作。格式：username/reponame。作用：检出仓库，获取源码。 官方actions库：https://github.com/actions\n        uses: actions/checkout@v1 \n      \n      - name: use node.js ${{ matrix.node-version }} # 步骤2\n        uses: actions/setup-node@v1 # 作用：安装nodejs\n        with:\n          node-version: ${{ matrix.node-version }} # 版本\n\n      - name: run deploy.sh # 步骤3：执行脚本 deploy.sh\n        env: # 设置环境变量，未设置则不运行\n          github_token: ${{ secrets.access_token }} # token \n          ssh_private_key: ${{ secrets.gitee_rsa_private_key }} # 私钥\n        run: npm install && npm run deploy  # 执行 deploy.sh 脚本，位于项目根目录\n\n      - name: push matser to gitee  # 步骤4：github 内容同步到 gitee，同步仓库是 master\n        uses: wearerequired/git-mirror-action@master\n        env:\n          ssh_private_key: ${{ secrets.gitee_rsa_private_key }}\n        with:  # 从源到目的地\n          source-repo: \'git@github.com:kele-bingtang/kele-bingtang.github.io.git\'    #github 仓库地址\n          destination-repo: \'git@gitee.com:kele-bingtang/kele-bingtang.gitee.io.git\'    #gitee 仓库地址\n\n      - name: build gitee pages # 步骤5：自动部署到 gitee pages\n        uses: yanglbme/gitee-pages-action@master\n        with:\n          # 注意替换为你的 gitee 用户名\n          gitee-username: kele-bingtang\n          # 注意在 settings -> secrets 配置 gitee_password\n          gitee-password: ${{ secrets.gitee_password }}\n          # 注意替换为你的 gitee 仓库地址，仓库名严格区分大小写，一般地址和仓库名一致，如果地址改了，仓库名不改，要以地址为准（地址仅需后缀，即 https://gitee.com/<username>/xxx 的 xxx 即可）\n          gitee-repo: kele-bingtang/kele-bingtang.gitee.io\n          # 要部署的分支，默认是 master，若是其他分支，则需要指定（指定的分支必须存在）\n          branch: gh-pages\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n\n\n值得注意的是 51 行的 gitee-repo 不是 gitee 的仓库名字，而是修改的地址名：<username>.gitee.io。\n\n\n# 自定义域名\n\n这里以 github 举例，gitee 同理。\n\n前往你的域名解析处，进入如下配置：\n\n\n\n然后进入 github 绑定自定义的域名\n\n\n\n注意\n\ngitee 的仓库不要改为 <username>.gitee.io，而是直接改为 <username> 即可。\n\n2021-01-04 @村长\n\n套用 gitee 官方的一句话：\n\n如果你想你的 pages 首页访问地址不带二级目录，如ipvb.gitee.io，你需要建立一个与自己个性地址同名的仓库，如 https://gitee.com/ipvb 这个用户，想要创建一个自己的站点，但不想以子目录的方式访问，想以ipvb.gitee.io直接访问，那么他就可以创建一个名字为ipvb的仓库 https://gitee.com/ipvb/ipvb 部署完成后，就可以以 https://ipvb.gitee.io 进行访问了。',charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"本站 - 服务器部署",frontmatter:{title:"本站 - 服务器部署",date:"2021-12-03T12:23:14.000Z",permalink:"/about/website/server/",titleTag:"原创",categories:["关于 - 本站"],tags:["本站"],readingShow:"top"},regularPath:"/80.%E5%85%B3%E4%BA%8E/06.%E5%85%B3%E4%BA%8E%20-%20%E6%9C%AC%E7%AB%99/12.%E6%9C%AC%E7%AB%99%20-%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2.html",relativePath:"80.关于/06.关于 - 本站/12.本站 - 服务器部署.md",key:"v-9ebe1e58",path:"/about/website/server/",headers:[{level:2,title:"原理介绍",slug:"原理介绍",normalizedTitle:"原理介绍",charIndex:132},{level:2,title:"环境准备",slug:"环境准备",normalizedTitle:"环境准备",charIndex:140},{level:2,title:"环境安装",slug:"环境安装",normalizedTitle:"环境安装",charIndex:148},{level:2,title:"环境用户",slug:"环境用户",normalizedTitle:"环境用户",charIndex:156},{level:2,title:"环境启动",slug:"环境启动",normalizedTitle:"环境启动",charIndex:164},{level:3,title:"Nginx启动",slug:"nginx启动",normalizedTitle:"nginx启动",charIndex:174},{level:3,title:"PHP启动",slug:"php启动",normalizedTitle:"php启动",charIndex:187},{level:2,title:"环境配置",slug:"环境配置",normalizedTitle:"环境配置",charIndex:196},{level:3,title:"Nginx配置",slug:"nginx配置",normalizedTitle:"nginx配置",charIndex:206},{level:3,title:"PHP配置",slug:"php配置",normalizedTitle:"php配置",charIndex:219},{level:2,title:"环境重启",slug:"环境重启",normalizedTitle:"环境重启",charIndex:228},{level:2,title:"环境测试",slug:"环境测试",normalizedTitle:"环境测试",charIndex:236},{level:2,title:"Git环境",slug:"git环境",normalizedTitle:"git环境",charIndex:244},{level:3,title:"宿主机配置Git",slug:"宿主机配置git",normalizedTitle:"宿主机配置git",charIndex:255},{level:3,title:"PHP容器配置Git",slug:"php容器配置git",normalizedTitle:"php容器配置git",charIndex:269},{level:3,title:"项目访问",slug:"项目访问",normalizedTitle:"项目访问",charIndex:285},{level:2,title:"自动化部署",slug:"自动化部署",normalizedTitle:"自动化部署",charIndex:293},{level:3,title:"Gitee脚本",slug:"gitee脚本",normalizedTitle:"gitee脚本",charIndex:304},{level:3,title:"Github脚本",slug:"github脚本",normalizedTitle:"github脚本",charIndex:317},{level:3,title:"WebHook配置",slug:"webhook配置",normalizedTitle:"webhook配置",charIndex:331},{level:2,title:"问答",slug:"问答",normalizedTitle:"问答",charIndex:344}],headersStr:"原理介绍 环境准备 环境安装 环境用户 环境启动 Nginx启动 PHP启动 环境配置 Nginx配置 PHP配置 环境重启 环境测试 Git环境 宿主机配置Git PHP容器配置Git 项目访问 自动化部署 Gitee脚本 Github脚本 WebHook配置 问答",content:'笔记\n\n如果你不打算部署在 Github Pages 或者 Gitee Pages 上，而是部署在自己的服务器上，又或者三个都想自动同步部署，那么本内容就是带你如何在服务器部署项目，同时也有 Docker 的一次实战。\n\n2021-11-03 @村长\n\n\n\n * 原理介绍\n * 环境准备\n * 环境安装\n * 环境用户\n * 环境启动\n   * Nginx启动\n   * PHP启动\n * 环境配置\n   * Nginx配置\n   * PHP配置\n * 环境重启\n * 环境测试\n * Git环境\n   * 宿主机配置Git\n   * PHP容器配置Git\n   * 项目访问\n * 自动化部署\n   * Gitee脚本\n   * Github脚本\n   * WebHook配置\n * 问答\n\n\n\n\n# 原理介绍\n\n实现服务器自动化部署，我们使用的是 WebHook 技术，这个技术 Github 和 Gitee 都有，不难理解。\n\n首先要知道为什么使用 WebHook？如果我每次克隆项目，需要手动实现 git clone 命令，但是每次别人 push 新代码，我必须手动克隆或者拉取最新的代码，那么有没有一种技术，别人 push 新代码，我发个呆，然后 push 的新代码自动被我的服务器克隆下来呢。这个技术就是 WebHook。\n\nWebHook 可以理解为一个仓库的触发器。\n\n * 什么时候这个触发器被触发呢：由你决定，可以在 push 新代码之后，可以在分支合并之后\n\n * 触发的内容是什么：WebHook 会主动发送一个 POST 请求到你配置的地址，这个地址是我们服务器的脚本。一旦请求我们写的脚本，就会触发脚本，脚本里的内容就是执行 git clone 等命令拉取仓库代码\n\n所以总结就是：当我们 push 项目到仓库，仓库触发 WebHook，发送 POST 请求到我们的服务器，这个请求触发我们写的脚本，脚本执行 git clone 等命令拉取项目代码。\n\n\n\n所以确保提供给 GitHub 或 Gitee 的请求能访问并触发编写的脚本。而如何访问并触发脚本，就是本内容要介绍的。\n\n\n# 环境准备\n\n * CentOS 系统（其他系统也可以）\n\n * 一个普通用户（强烈建议）\n\n * Docker 容器（可选）\n\n * OpenResty，可以理解为 Nginx 和 Lua 的集成，使用 Nginx 也可以\n\n * PHP 环境（PHP 脚本必须）\n\n注意：这里是使用 Docker 容器进行管理，如果没用过或者不打算用 Docker，也可以参考：Docker 是一个容器，容器里的每一个环境可以理解为一个 CentOS 系统，比如 Docker 里的 Nginx 就是一个安装了 Nginx 的 CentOS 系统，Docker 里的 PHP 就是安装了 PHP 的 CentOS 系统。（实际上不完全是 CentOS 系统，取决于供应商的设计，这里为了解释说明）\n\n\n\n有人疑惑了，可不可以在 Docker 里的 Nginx 环境安装 PHP，毕竟 Nginx 所在的也是一个 CentOS 系统，额(⊙﹏⊙)，不建议，还是老老实实安装 PHP 吧。Docker 的出现就是为了隔离每一个环境，但是又不影响彼此的联系。\n\n如果你不使用 Docker，请下意识把 Docker 这一层因素去掉即可。关于 Nginx 和 PHP 的步骤是完全一样，不会因为 Docker 而被影响。\n\n我是先进入服务器，然后从服务器进入 Docker，接着从 Docker 进入 Nginx 和 PHP。而你不用 Docker，只需要进入服务器即可，因为不用 Dcoerk，Nginx 和 PHP 就处在服务器里。\n\n\n# 环境安装\n\n关于 Docker 的安装，我已经写在 Docker 的知识体系中，点击传送。\n\n关于 OpenResty（Nginx）在 Docker 安装，我已经写在 Nginx 的知识体系中，点击传送。\n\n如果你已经安装过 Docker，并且 Docker 里安装了 OpenResty 或者 Nginx，则不需要重新安装。\n\n笔记\n\n这里再次说明，没接触过 OpenResty 的也不慌，这里的它的作用就是 Nginx 的作用，所以本文提到的 OpenResty，请在脑海里替换为 Nginx 即可。\n\n2021-11-03 @村长\n\n安装完 Docker 和 OpenResty（Nginx）后，我们需要下载 PHP 镜像，服务器部署的脚本是使用 PHP 编写，所以需要 PHP 的运行环境。\n\n查看 PHP 版本 传送门\n\n建议下载带有 fpm 的版本，我下载的是 7.3-fpm 版本。\n\n\n\ndocker pull php:7.3.33-fpm\n\n\n1\n\n\n\n# 环境用户\n\n强烈建议 Nginx、PHP 或者其他的容器不要用 root 用户，这里创建一个普通用户来进行操作，这也是实际生产上需要做的。\n\n创建 kbt 普通用户（用户名自己决定）\n\nuseradd kbt\npasswd kbt\n# 然后这里填 kbt 用户的密码\n\n\n1\n2\n3\n\n\n将 kbt 用户放入 docker 组，这样 kbt 用户才能使用 docker 的相关命令（如果不用 docker，请忽略）\n\nusermod -a -G docker kbt  # 将 kbt 用户加入到 docker 用户组中\n\nsystemctl restart docker  # 重启 docker\n\n\n1\n2\n3\n\n\n-a 是追加，普通用户加入 docker 组后，不会退出原来所在的组。\n\n-G 是指定组名。\n\n\n# 环境启动\n\n安装完 Docker、OpenResty 或 Nginx、PHP 后，接下来就启动它们。\n\nDocker 的启动很简单，但是也很麻烦，简单在于命令是固定的，麻烦在于数据卷的考虑，到底放在宿主机的哪个路径下。\n\n如果不用 docker，请忽略。\n\n\n# Nginx启动\n\nOpenResty 或 Nginx 的启动时，需要将配置文件目录、静态文件目录、日志文件目录给挂载出来，方便备份和修改。\n\n这里只是说明我的路径，你的路径请根据你的需求修改，只需要修改路径即可。\n\n * Nginx 的配置文件挂载在 /docker/openresty/conf 目录下\n\n * Nginx 的静态文件目录挂载在 /docker/openresty/html 目录下\n\n * Nginx 的日志文件目录挂载在 /docker/openresty/logs 目录下\n\n因为我打算把所有的挂载目录都放在 /docker 目录下，如 node 镜像挂载目录是 /docker/node，tomcat 镜像挂载目录在 /docker/tomcat ...... 类推\n\n首先创建根路径：\n\nmkdir /docker/openresty\n\n\n1\n\n\n这里说明一下，我们需要把 Nginx 容器里的这些目录拷贝出来，为什么呢？因为一旦挂载成功，宿主机的目录会覆盖容器的目录，想想此时刚刚创建的宿主机的目录都为空，一旦挂载后，容器里的目录被覆盖，也为空。所以我们事先从容器拿出这些目录，放到根路径下，再挂载，这样覆盖的目录就是拷贝出来的目录。\n\n先简单启动一个 OpenResty 容器。容器名叫 nginx，启动的镜像名是 OpenResty，版本为 latest。\n\ndocker run -d --name nginx OpenResty:latest\n\n\n1\n\n\n将容器需要的挂载目录拷贝出来\n\ndocker cp nginx:/etc/nginx/conf.d /docker/openresty/conf\ndocker cp nginx:/usr/local/openresty/nginx/html /docker/openresty/html\ndocker cp nginx:/usr/local/openresty/nginx/logs /docker/openresty/logs\n\n\n1\n2\n3\n\n\n我拷贝的 conf.d 目录是 简易版 配置文件所在的目录，并将 conf.d 改为 conf，你可以不改，我只是不喜欢 .d。而静态文件目录和日志文件目录名不变。\n\n完整版 的配置文件在容器的 /usr/local/openresty/nginx/conf 路径下，文件名叫 nginx.conf。\n\n为什么不使用完整版？\n\n「简易版」只能写 server 块，「完整版」不仅可以写 server 块，还能写 http 块。因为「完整版」的 http 块利用 include 指令引入「简易版」配置文件所在的目录，所以我们只需要在「简易版」目录下添加任意 .conf 文件，则自动会被引入到「完整版」，避免直接修改「完整版」引起安全问题。\n\n\n\n拿出来三个目录后就可以删除这个容器，为完整版的容器做准备。\n\ndocker rm -f nginx\n\n\n1\n\n\n启动最终版的 OpenResty 容器前，我们需要创建一个网桥，避免过多的容器积压在默认网桥上，也为了 Nginx 能和 PHP 等容器进行通信。\n\n网桥就是网络，我喜欢称呼网桥\n\n默认网桥无法直接通信，必须使用 IP 或者 --link 进行通信，所以很麻烦，我们就创建一个网桥，解决所有问题。如果还不懂，请看原理：点击跳转\n\n2021-11-09 @村长\n\n创建一个叫做 web 的网桥\n\ndocker network create web\n\n\n1\n\n\n最后启动 OpenResty 容器，实现挂载\n\ndocker run -d --name nginx -p 80:80 --restart always \\\n-v /docker/openresty/conf:/etc/nginx/conf.d \\\n-v /docker/openresty/html:/usr/local/openresty/nginx/html \\\n-v /docker/openresty/logs:/usr/local/openresty/nginx/logs \\\n-v /home/kbt:/home/kbt \\\n--network web --network-alias nginx \\\nOpenResty:latest\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n/home/kbt 是后面 PHP 环境需要，因为 PHP 不允许 root 用户操作，所以我们使用前面创建的 kbt 用作为操作 PHP 的权限用户。\n\n--network-alias 是给所在的网桥起个别名，这个别名是自己所在网桥的一种标识，方便相同网桥的其他容器如 Nginx 通过别名找到你。尽量和容器名一致。\n\n\n# PHP启动\n\nPHP 容器启动很简单，我们需要注意的是 PHP 脚本的「住处」，我把脚本放在 /home/kbt 处，因为 PHP 环境使用 kbt 用户，所以脚本也要放在 kbt 用户的目录下，防止外界恶意访问执行脚本，引起严重后果。\n\n如果你是 xxx 用户，则请将脚本放在 /home/xxx 目录下。\n\ndocker run -d --name php -v /home/kbt:/home/kbt --network web --network-alias php php:7.3-fpm\n\n\n1\n\n\nNgxin 启动的时候也挂载了这个 /home/kbt 目录。\n\n此时 /home/kbt 目录相当于一个「中转站」，连接着 Nginx 和 PHP，这样 Nginx 就能通过这个「中转站」访问 PHP 的脚本了。当然这样直接访问还远远不够，我们还需要在 Nginx 的配置文件进行配置，指定 PHP 的脚本在 home/kbt 下。\n\n\n# 环境配置\n\n我们需要修改 Nginx 的用户权限为 kbt，以及 PHP 的用户权限也为 kbt，这样为了防止外界恶意访问 Nginx，植入恶意脚本，因为 root 的权限太大，拥有了 root 权限，容易被植入恶意脚本。所以不要一味的追求 root。\n\n不要忽略这一步，哪怕你不用 docker，你只需要把 docker 相关的命令无视掉。\n\n\n# Nginx配置\n\n我们需要配置 Nginx 的用户权限、PHP 脚本的访问路径、以及静态资源的缓存等。\n\n> 配置 PHP 脚本的访问路径\n\n首先打开 /docker/openresty/conf 的「简易版」配置文件，名字叫 default.conf\n\nvim /docker/openresty/conf/default.conf\n\n\n1\n\n\n添加如下内容：\n\n\n\n\n\n\n\n \n \n \n \n \n \n \n\n\n\n\nserver {\n    listen 80;\n    server_name 你的服务器域名;\n\n    # ...... 其他配置\n    location ~ \\.php$ {   # 访问 .php 后缀的请求\n        root           /home/kbt;\t# 脚本的根目录\n        fastcgi_pass   php:9000;\t# 通过 php 网桥别名的 9000 端口连接上 PHP容器\n        fastcgi_index  index.php;\t# 默认首页\n        fastcgi_param  SCRIPT_FILENAME  /home/kbt$fastcgi_script_name;  # 脚本的根目录\n        include        fastcgi_params;\n    }\n    # ...... 其他配置\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n第 7 行改为 /home/kbt 目录，这是我们放置脚本的根目录。\n\n第 8 行的 php 就是我们启动 PHP 容器指定的网桥别名，Nginx 和 PHP 都处于 web 网桥，那么可以通过网桥别名找到彼此。9000 是 PHP 容器的默认端口。\n\n第 9 行的 /home/kbt$fastcgi_script_name 指的是，启动 PHP 环境来运行 /home/kbt 目录下的脚本，否则脚本无法启动。如果你不是 /home/kbt，则自行修改。\n\n注意\n\n不能在 $fastcgi 前加 /。\n\n2021-11-09 @村长\n\n如果不使用 docker，则内容为\n\nserver {\n    listen 80;\n    server_name 你的服务器域名;\n    \n    # ...... 其他配置\n    location ~ \\.php$ {\n    \tproxy_pass   http://127.0.0.1;\n    }\n\n    location ~ \\.php$ {\n        root           /home/kbt;\n        fastcgi_pass   localhost:9000;\n        fastcgi_index  index.php;\n        fastcgi_param  SCRIPT_FILENAME  /home/kbt$fastcgi_script_name;  # 脚本的根目录\n        include        fastcgi_params;\n    }\n    # ...... 其他配置\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n先转发到本地（127.0.0.1），然后触发 12 行的 localhost，找到 9000 端口的 PHP 环境。\n\n> 安装 vim\n\n因为 Nginx 容器并不带 vim 和 vi 命令，所以我们需要安装 vim，安装前需要更新 apt-get（容器没有 yum）\n\n# 进入 Nginx 容器\ndocker exec -it nginx bash\n\n\n1\n2\n\n\n下载前需要修改下载源为国内源，默认的国外源太慢。\n\n# 进入 apt-get 配置目录\ncd /etc/apt\n\n# 执行备份命令，避免修改失败无法使用\ncp sources.list sources.list.bak\n\n# 同时执行 echo下的 4 行命令，修改成国内镜像源\necho "">sources.list \\\necho "deb http://ftp2.cn.debian.org/debian/ buster main">>sources.list \\\necho "deb http://ftp2.cn.debian.org/debian/debian-security buster/updates main">>sources.list \\\necho "deb http://ftp2.cn.debian.org/debian/debian buster-updates main">>sources.list\n\n# 执行更新命令 apt-get update\napt-get update\n# 下载 vim\napt-get install -y vim\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n你可以将安装完 vim 的新容器，变成新的镜像，不然每次启动初始的镜像，都要更新 apt-get 和安装 vim\n\ndocker commit nginx nginx:1.0\n\n\n1\n\n\n第一个 nginx 是打包的容器名，而 nginx:1.0 则是打包成新镜像的名字和版本。构建新镜像后，可以把初始的镜像删除掉，保留也可以。\n\n> 配置 Nginx 用户权限和缓存等。\n\n进入 Nginx 容器\n\ndocker exec -it nginx bash\n\n\n1\n\n\n创建 kbt 用户，设置密码，要和宿主机创建的用户保持一致\n\ngroupadd kbt;\nuseradd -g kbt kbt # 创建用户，并加入组，都是 kbt\npasswd kbt\n# 然后这里填 kbt 用户的密码\n\n\n1\n2\n3\n4\n\n\n创建完用户后，接着修改「完整版」配置文件\n\nvim /usr/local/openresty/nginx/conf/nginx.conf\n\n\n1\n\n\n将 user 改为 kbt，\n\nuser kbt;\n\n\n1\n\n\n如图：\n\n\n\n顺便配置一下优化代码，提高 Nginx 的访问效率。\n\n在 events 块添加：（已经存在的 events 块）\n\nevents{\n\tworker_connections 1024;\t \n    accept_mutex on;\t\t\t # 开启 Nginx 网络连接序列化\n    multi_accept on;\t\t\t # 开启同时接收多个网络连接\n    use epoll;\t\t\t\t\t # 使用 epoll 函数来优化 Nginx\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n\n在 http 块添加：（已经存在的 http 块）\n\nhttp {\n    # ...... 其他配置\n\tsendfile on;\t\t\t\t # 开启高效的文件传输模式\n    tcp_nopush on;\t\t\t\t # 提升网络包的传输「效率」\n    tcp_nodelay on;\t\t\t\t # 高网络包传输的「实时性」\n    \n    keepalive_timeout 65;\t\t # 连接超时时间\n    \n    gzip on;  \t\t\t   \t\t # 开启 Gzip 功能\n    gzip_types *;\t\t   \t \t # 压缩源文件类型,根据具体的访问资源类型设定\n    gzip_comp_level 6;\t   \t\t # Gzip 压缩级别\n    gzip_min_length 1k;          # 进行压缩响应页面的最小长度，content-length\n    gzip_buffers 4 16K;\t         # 缓存空间大小\n    gzip_http_version 1.1;       # 指定压缩响应所需要的最低 HTTP 请求版本\n    gzip_vary  on;\t\t         # 往头信息中添加压缩标识\n    gzip_disable "MSIE [1-6]\\."; # 对 IE6 以下的版本都不进行压缩\n    gzip_proxied  off;           # Nginx 作为反向代理压缩服务端返回数据的条件\n    # ...... 其他配置\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# PHP配置\n\n> 创建普通用户\n\n首先进入 PHP 容器\n\ndocker exec -it php bash\n\n\n1\n\n\n创建 kbt 用户，设置密码，要和宿主机创建的用户保持一致\n\ngroupadd kbt;\nuseradd -g kbt kbt # 创建用户，并加入组，都是 kbt\npasswd kbt\n# 然后这里填 kbt 用户的密码\n\n\n1\n2\n3\n4\n\n\n> 安装 vim\n\n我已经在 Ngixn 配置写了如何安装 vim，请按照 Nginx 配置的安装 vim，进行安装，就在上面不远处。\n\n> 配置 PHP 环境的用户权限\n\n修改配置文件的用户\n\nvim /usr/local/etc/php-fpm.d/www.conf\n\n\n1\n\n\n大概在 23 - 24 行，改为：\n\nuser = kbt\ngroup = kbt\n\n\n1\n2\n\n\n\n\n\n# 环境重启\n\n笔记\n\n重启按顺序：PHP、Nginx，因为 Nginx 配置文件依赖 PHP 脚本，所以先启动 PHP，再启动 Nginx。\n\n2021-11-09 @Younng Kbt\n\ndocker restart php\ndocker restart nginx\n\n\n1\n2\n\n\n\n# 环境测试\n\n测试 Nginx 是否能访问 PHP 脚本，我们在宿主机的 /home/kbt，创建 index.php 文件\n\nvim /home/kbt/index.php\n\n\n1\n\n\n添加内容：\n\n<?\n    echo phpinfo();\n?>\n\n\n1\n2\n3\n\n\n然后访问你的网站：ip:port/index.php，如图：\n\n\n\n此时 /home/kbt 就是你 PHP 脚本的根路径，如果你想对 PHP 脚本分类，可以在根路径下创建一个文件夹，如我创建 test 文件夹，将 index.php 放入该文件夹里，接着访问的时候，加上文件夹名即可。如下：\n\n\n\n\n# Git环境\n\n环境准备就绪，现在进入正题。我们需要安装 Git，来实现自动部署。\n\n分别在宿主机和 PHP 容器安装 Git\n\n * 宿主机安装 Git 是为了配置 SSH 公钥\n   \n   不理解公钥？我们克隆的项目地址有 HTTPS 方式，也有 SSH 方式。\n   \n   \n   \n   而 SSH 方式需要配置公钥，我们在自己的服务器生成 SSH 公钥，然后交给 Github 或者 Gitee，这样它们才能通过公钥「连接」我们的服务器。才能拉取项目。\n\n * PHP 容器安装 Git 是因为我们执行 PHP 脚本，然后 PHP 容器会根据脚本使用 Git 拉取仓库的项目。\n\n> 为什么不在 PHP 容器配置公钥？\n\n一个服务器可以生成一个公钥，尽量不要在容器内生成，因为服务器的公钥是公用的，任何容器都可以使用。但是只在一个容器内生产，其他容器可能出现无法使用的问题。\n\n\n# 宿主机配置Git\n\n宿主机安装 Git，可以直接使用 yum 来下载\n\nyun -y install git\n\n\n1\n\n\n查看 Git 版本\n\ngit --version\n\n\n1\n\n\n配置全局用户信息\n\ngit config --global user.name "你的用户名" \t\t# 定义全局的用户名\ngit config --global user.email "你的邮箱" \t\t # 定义全局的邮件地址\ngit config --list \t\t\t\t\t\t\t\t# 查看配置信息是否成功\n\n\n1\n2\n3\n\n\n切换 kbt 用户\n\nsu kbt\n\n\n1\n\n\n警告\n\n必须切换 kbt 用户，因为我们 PHP 环境使用的是 kbt 用户，拉取代码时，不仅验证 SSH 公钥，也会验证生成 SSH 公钥的用户名。\n\n如果是 root 用户配置公钥，则 PHP 容器没有权限拉取 Git 项目。\n\n2021-11-09 @村长\n\n生成公钥（确保已经切换了和 PHP 环境一致的用户）\n\nssh-keygen -t rsa -C "xxx@xx.com"  # 填写正确的你的邮箱\n\n\n1\n\n\n按三次回车即可生成 SSH 公钥。\n\n生成 SSH 公钥后，会告诉你生成的目录：Your public key has been saved in /home/lkbt/.ssh/id_rsa.pub.\n\ncat /home/kbt/.ssh/id_rsa.pub\n\n\n1\n\n\n查看文件后获取（复制）SSH 公钥，添加到 Github 或者 Gitee 中。如果不知道如何添加，请看 配置 SSH Key，该内容有三步，配置 SSH 公钥在第二步。\n\n验证是否配置生效\n\nssh -T git@github.com    # GitHub\nssh -T git@gitee.com\t# Gitee\n\n\n1\n2\n\n\n建议 Github 和 Gitee 都配置 SSH 公钥。\n\n\n# PHP容器配置Git\n\n首先进入 PHP 容器\n\ndocker exec -it php bash\n\n\n1\n\n\n确保你的 apt-get 已经是最新的，如果不是，请更新。因为 apt-get 初始版本库里的 Git 版本很低。\n\napt-get update\n\n\n1\n\n\n安装 Git\n\napt-get -y install git\n\n\n1\n\n\n查看 Git 版本\n\ngit --version\n\n\n1\n\n\n配置全局用户信息\n\ngit config --global user.name "你的用户名" \t\t# 定义全局的用户名\ngit config --global user.email "你的邮箱" \t\t # 定义全局的邮件地址\ngit config --list \t\t\t\t\t\t\t\t# 查看配置信息是否成功\n\n\n1\n2\n3\n\n\n初次使用，先克隆一次项目，放在 /home/kbt 目录下\n\ncd /home/kbt\ngit clone -b ga-pages <仓库 SSH 地址>\n\n\n1\n2\n\n\n-b 指定克隆的分支。不指定默认是默认分支 master。\n\n警告\n\n建议在 PHP 容器克隆项目，或者在宿主机切换到 kbt 用户再克隆项目，如果在宿主机以 root 用户克隆项目，那么 PHP 容器将没有权限操作这个项目。\n\n2021-11-11 @村长\n\n\n# 项目访问\n\n此时你访问你的服务器，会发现访问不了你克隆的项目，因为项目克隆在 /home/kbt 目录下，而这个目录目前仅仅是 PHP 脚本的根路径，不是非 PHP 脚本的路径，我们还需要修改 Nginx 的配置文件，让它跳转到这个目录。\n\nvim /docker/openresty/conf/default.conf\n\n\n1\n\n\n假设我的项目名是 notes，则配置一个 localtion。\n\nserver {\n    listen 80;\n    server_name 你的服务器域名;\n    \n    location /notes {\n    \troot /home/kbt;\t\t# /notes 会拼接到这后面\n        index index.html;\t# 默认访问 idnex.html 页面\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n此时访问你的服务器 ip:port/notes，Nginx 就会去 /home/kbt 下找到 notes 目录，然后在这个目录下获取 idnex.html 页面返回，你就会成功看到你的项目页面。\n\n\n# 自动化部署\n\n我们使用的是 webhook 技术。\n\n这里使用 PHP 脚本进行自动化部署，用到 PHP 的 shell_exec 函数，而开放 shell_exec 这个 PHP 函数是非常危险的，因此切记不要在生产环境开放这个函数，更加不能用 root 权限去执行 PHP。当然我们只是简单的个人博客，不是什么大公司，所以危害很低。\n\n我们首先在 /home/kbt 目录下创建一个文件夹，专门存储 webhook 的 PHP 脚本。比如叫 deploy。\n\n在 deploy 文件夹下创建 PHP 脚本\n\n\n# Gitee脚本\n\n<?php\n \n$git = "git"; // 默认是用 Git 全局变量，有的环境可能要指明具体安装路径\n$source = "Gitee";\t// 项目仓库源，如 GitHub 或 Gitee\n$branch = "gh-pages"; // 指定仓库分支，为空就是 master 分支\n$logName = "logs/deploy"; // 本地日志名称，与当前 php 文件在同一目录，不需要加 .log\n$savePath = "/home/kbt/deploy"; // 网站根目录，初次克隆确保目录为空\n$gitSSHPath  = "git@gitee.com:kele-bingtang/notes-blog.git";// 代码仓库 SSH 地址\n$password = "你在 WebHook 设置的密码"; // WebHook 设置的密码\n$name  = "你的用户名";// 仓库用户名\n$email = "你的邮箱";// 用户仓库邮箱\n$isCloned = true;// 设置是否已经 clone 到本地。true：已经 clone,直接 pull，false：先 clone\n$is_test = false;// 测试模式，无需密码。true 打开，平时 false 关闭\n\n// 如果已经 clone 过，则直接拉去代码\nif ($isCloned) {\n    $requestBody = file_get_contents("php://input"); // 获取请求体的数据\n    if (empty($requestBody) && empty($is_test)) {   // empty(var) 如果 var 为空或 false，则返回 true\n        die(\'发送到仓库的请求失败\');   // die 代表输出一条消息，并退出当前脚本\n    }\n \n    // 解析发过来的 JSON 信息\n    $content = json_decode($requestBody, true);\n    // 若是指定的分支且提交数大于 0，且密码正确\n    if($content[\'password\'] == $password || !empty($is_test)){\n        if($content[\'total_commits_count\'] > 0 || !empty($is_test)) {\n            if ($content[\'ref\'] == "refs/heads/$branch" || !$branch || !empty($is_test)) {\n                $res_log = "------------------------- [PULL START] -------------------------" . PHP_EOL;  // PHP_EOL 是换行符\n                $cmd = "rm -rf $savePath && $git clone -b $branch $gitSSHPath $savePath && echo \'拉取项目并部署成功\'";\n                $result = shell_exec($cmd); // shell_exec 关键命令，执行拉取代码\n                if(!empty($is_test)){\n                    $res_log .= date(\'Y-m-d H:i:s\') . \'执行测试！\'. PHP_EOL; // .= 代表追加到后面，不会覆盖前面\n                }else{\n                    $res_log .= "[" . date(\'Y-m-d H:i:s\', time() + 8 * 60 * 60) . \'] - 拉取 \' . $content[\'repository\'][\'name\'] . \' 仓库的 \' . $content[\'ref\'] . \' 分支代码进行部署\' . PHP_EOL;\n                }\n                if(!$result){\n                    $result = "拉取项目失败" . PHP_EOL;\n                }\n                $res_log .= "[项目源] - $source" . PHP_EOL;\n                $res_log .= "[执行命令] - " . $cmd . PHP_EOL;\n                $res_log .= "[结果] - " . $result;\n                $res_log .= "-------------------------- [PULL END] --------------------------" . PHP_EOL;\n                $res_log .= PHP_EOL . PHP_EOL;\n                file_put_contents($logName.".log", $res_log, FILE_APPEND); // 写入日志\n                echo $result;\n            }\n        }\n    } else {\n        file_put_contents($logName.".log", \'[Gitee] 密码错误!\' . PHP_EOL, FILE_APPEND);\n        echo \'密码错误！\';\n    }\n}else {\t\t// 如果没有 clone，则先克隆代码\n    $res = "[ CLONE START ----------------- ]".PHP_EOL;\n    // 如果配置全局信息过，则会覆盖\n    $res .= shell_exec("$git config --global user.email $email").PHP_EOL;\n    $res .= shell_exec("$git config --global user.name $name").PHP_EOL;\n    $res .= shell_exec("$git clone $gitSSHPath $savePath").PHP_EOL;\n    $res .= "[ CLONE END ----------------- ]".PHP_EOL;\n    file_put_contents($logName.".log", $res, FILE_APPEND); // 写入日志\n}\n?>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n\n\n具体的内容我已经都注释好了，同时也会生成日志文件，第 39 - 44 都是输入日志的数据，你可以适当根据喜好修改。\n\n相信我，你只需要修改第 3 - 11 行的数据为你的数据即可，我把需要的变量都拿出来了，其他不会出错。\n\n29 行代码是核心命令，该脚本执行这个命令，去克隆仓库代码。所以这也是为什么 PHP 环境要安装 Git，不然无法克隆。\n\n说明一下 29 行代码为什么要这样写，因为我们的博客是打包后生成的一大堆 html、css、js 文件，源码修改一点内容，打包后都会引起这些文件的位置、内容变化，所以我们需要把原来克隆的项目删除掉，再重新克隆。\n\n有人想，能不能执行 git pull 命令，只拉取最新的代码，这里告诉你，我测试过了，哪怕我提交到仓库的打包项目没有任何修改， pull 下来的代码全是和原来的代码冲突，需要手动处理合并。想想就麻烦，所以只能先删除再克隆新的。\n\n如果你 git pull 成功，请留言告诉我，可能我当初的方法不对。\n\n\n# Github脚本\n\n<?php\n \n$git = "git"; // 默认是用 Git 全局变量，有的环境可能要指明具体安装路径\n$source = "GitHub";\t// 项目仓库源，如 GitHub 或 Gitee\n$branch = "gh-pages"; // 指定仓库分支，为空就是 master 分支\n$logName = "logs/deploy"; // 本地日志名称，与当前 php 文件在同一目录，不需要加 .log\n$savePath = "/home/kbt/deploy"; // 网站根目录，初次克隆确保目录为空\n$gitSSHPath  = "git@github.com:Kele-Bingtang/notes-blog.git";// 代码仓库 SSH 地址\n$password = "你在 WebHook 设置的密码"; // WebHook 设置的密码\n$name  = "你的用户名";// 仓库用户名\n$email = "你的邮箱";// 用户仓库邮箱\n$isCloned = true;// 设置是否已经 clone 到本地。true：已经 clone,直接 pull，false：先 clone\n$is_test = false;// 测试模式，无需密码。true 打开，平时 false 关闭\n    \n// 如果已经 clone 过，则直接拉去代码\nif ($isCloned) {\n    $requestBody = file_get_contents("php://input"); // 获取请求体的数据\n    if (empty($requestBody) && empty($is_test)) {   // empty(var) 如果 var 为空或 false，则返回 true\n        die(\'发送到仓库的请求失败\');   // die 代表输出一条消息，并退出当前脚本\n    }\n    // 获取 GitHub 的加密令牌 Secret\n    $signature = $_SERVER[\'HTTP_X_HUB_SIGNATURE_256\'];\n    // GitHub 的令牌被 sha256 加密了，所以对 $secret 相同方式加密\n    $encyptSecret = "sha256=" . hash_hmac(\'sha256\', $requestBody, $secret);\n    \n    // 先对 URL 解码，再解析为 JSON 数组\n    $content = json_decode(strstr(urldecode($requestBody),"{"),true);\n    // 若是指定的分支且提交数大于 0，且密码正确\n    if(strcmp($signature, $encyptSecret) == 0 || !empty($is_test)){  // strcmp 函数比较两个字符串\n        if ($content[\'ref\'] == "refs/heads/$branch" || !$branch || !empty($is_test)) {\n            $res_log = "------------------------- [PULL START] -------------------------" . PHP_EOL;  // PHP_EOL 是换行符\n            $cmd = "rm -rf $savePath && $git clone -b $branch $gitSSHPath $savePath && echo \'拉取项目并部署成功\'";\n            $result = shell_exec($cmd); // shell_exec 关键命令，执行拉取代码\n            if(!empty($is_test)){\n                $res_log .= "[" . date(\'Y-m-d H:i:s\') . \'] 执行测试！\'. PHP_EOL; // .= 代表追加到后面，不会覆盖前面\n            }else{\n                $res_log .= "[" . date(\'Y-m-d H:i:s\', time() + 8 * 60 * 60) . \'] - 拉取 \' . $content[\'repository\'][\'name\'] . \' 仓库的 \' . $content[\'ref\'] . \' 分支代码进行部署\' . PHP_EOL;\n            }\n            if(!$result){\n                $result = "拉取项目失败" . PHP_EOL;\n            }\n            $res_log .= "[项目源] - $source" . PHP_EOL;\n            $res_log .= "[执行命令] - " . $cmd . PHP_EOL;\n            $res_log .= "[结果] - " . $result;\n            $res_log .= "-------------------------- [PULL END] --------------------------" . PHP_EOL;\n            $res_log .= PHP_EOL . PHP_EOL;\n            file_put_contents($logName.".log", $res_log, FILE_APPEND); // 写入日志\n            echo $result;\n        }\n    } else {\n        file_put_contents($logName.".log", \'[GitHub] 密码错误!\' . PHP_EOL, FILE_APPEND);\n        echo \'密码错误！\';\n    }\n}else {\t\t// 如果没有 clone，则先克隆代码\n    $res = "[ CLONE START ----------------- ]".PHP_EOL;\n    // 如果配置全局信息过，则会覆盖\n    $res .= shell_exec("$git config --global user.email $email").PHP_EOL;\n    $res .= shell_exec("$git config --global user.name $name").PHP_EOL;\n    $res .= shell_exec("$git clone $gitSSHPath $savePath").PHP_EOL;\n    $res .= "[ CLONE END ----------------- ]".PHP_EOL;\n    file_put_contents($logName.".log", $res, FILE_APPEND); // 写入日志\n}\n?>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n\n\nGitHub 的脚本和 Gitee 脚本的内容不是一样的，首先 Github 返回的令牌是 sha256 加密的，而 Gitee 返回的是不加密的，所以我们需要对本地的令牌进行 sha256 加密，然后再进行两者的判定，是否相等。\n\n其次 GitHub 返回的请求是经过编码过的，如这种 %7B%22ref%22%3A%22refs%2Fheads%2Fgh-pages%，所以我们获取后需要解码，请看 29 代码。\n\n日志文件如下：\n\n\n\n\n# WebHook配置\n\n讲了那么多，都不懂 WebHook 如何配置，现在开始配置。\n\n> Github配置\n\n进入仓库里，然后 Github 点击 setting，找到 Webhooks，然后点击 Add webhook 进行配置。\n\n\n\n然后填写 PHP 脚本地址以及令牌。\n\n\n\n令牌要对应上我提供脚本的 $secre 变量值。\n\n脚本访问地址：比如脚本放在 /home/kbt/ 下的 deploy 目录下，脚本名叫做 deploy.php，那么地址是 ip:port/deploy/deploy.php。\n\n为什么地址没有 /home/kbt，因为上面我已经配置过了，这个目录是脚本的根路径，所以 ip:port/xxx.php 就是访问根目录下的 xxx.php，有目录则加上目录即可。\n\n> Gitee\n\n其实就是中文版的 Github，所以位置完全一样\n\n\n\n\n\n密码要对应上脚本的密码。\n\n添加 WebHook 后，可以不断发送请求进行测试。\n\n笔记\n\n只需选择 push 事件触发即可，push 事件是指仓库的 任意分支 被 push 了都会触发，并非只有 master 分支触发。\n\n2021-11-09 @村长\n\n\n# 问答\n\nQ1 - 能否总结本内容步骤？\n\n 1.  安装 Docker，然后利用 Docker 安装 Nginx 和 PHP 镜像\n 2.  创建 kbt 普通用户，加入 docker 组\n 3.  启动 Nginx 容器，将配置文件目录、静态文件目录、日志文件目录拷贝出来，然后关闭 Nginx 容器\n 4.  Docker 创建网桥，给两个容器通信\n 5.  启动 Nginx 容器，将拷贝的出来的三个目录和容器的三个目录进行挂载，以及与 kbt 用户的目录挂载\n 6.  启动 PHP 容器，与 kbt 用户的目录挂载，PHP 容器的挂载目录和 kbt 用户的目录路径一致\n 7.  在 Nginx 容器创建 kbt 普通用户和组，然后修改 nginx.conf 配置文件的 user 为 kbt，即 Nginx 的访问权限仅限于 kbt 的权限\n 8.  修改挂载出来的配置文件目录里的 default.conf 文件，指定 PHP 脚本所在的根路径为 kbt 的用户目录\n 9.  在 PHP 容器创建 kbt 普通用户和组，然后修改 www.conf 配置文件的 user 和 group 为 kbt，即 PHP 脚本运行权限仅限于 kbt 的权限\n 10. 两个容器配置完后，按顺序重启 PHP、Nginx 容器\n 11. 宿主机安装 Git，并配置 SSH 公钥给 Github 或者 Gitee。PHP 安装 Git，在 kbt 用户目录克隆项目\n 12. 修改挂载出来的配置文件目录里的 default.conf 文件，添加 location，能访问克隆项目的目录\n 13. 编写 PHP 脚本，然后在 Github 或者 Gitee 上开启 WebHook，配置脚本的 URL 访问地址和令牌、密码\n\n----------------------------------------\n\nQ2 - 为什么 Nginx 的静态文件目录、日志文件目录没有用到？\n\n我要求启动 Nginx 容器的时候，将这些目录挂载出来，是因为这是实际生产开发需要的，不一定是本内容需要的，这里只是打好预防针，留个印象。\n\n我当初部署的时候确实是把 PHP 脚本和克隆的项目放在静态文件目录下，但是不安全，这些目录是 root 用户管理的，所以我就创建了普通用户 kbt，将 PHP 脚本和克隆的项目放到该普通用户的目录下，即 /home/kbt。而放到该目录后，就要在 Nginx 和 PHP 创建 kbt 用户，并且挂载到 kbt 用户目录下，实现三者的同一个目录互通。如下图：\n\n\n\nQ3 - 一定要在 Nginx 和 PHP 容器创建普通用户 kbt 吗？\n\n如果不创建普通用户 kbt，那么就需要一个目录实现上方图的三者互通，那么这个目录就属于 root 用户。\n\n----------------------------------------\n\nQ4 - 两个容器创建的 kbt 用户和宿主机的 kbt 用户一样吗？\n\n不一样，但是我现在部署的时候就是这样创建的，我只把我成功的案例说出来。你也可以试试只在宿主机创建 kbt 用户，两个容器使用默认的用户（不创建 kbt 用户），我认为这样也可以。\n\n是可以的，据我了解，在宿主机以普通用户 kbt 启动 Docker 容器，那么容器里虽然显示 root 用户，但是这个 root 用户的权限其实就是宿主机启动的用户权限，所以需要切换到普通用户，并给普通用户使用 Docker 的权限，然后启动。\n\n----------------------------------------\n\nQ5 - 不使用 Docker 如何操作？\n\n其实熟悉 Docker 了，发现本内容 Docker 操作两个容器，其实就相当于在两台电脑分别安装 Nginx 和 PHP，然后进行操作，Docker 只是实现了两者在同一台电脑的互通（配置同一个网桥）。\n\n不使用 Docker，会发现服务器部署非常方便，步骤大抵如下：\n\n 1. 在服务器安装 Nginx 和 PHP 的环境\n\n 2. 在服务器创建普通用户 kbt，生成 /home/kbt 路径\n\n 3. 修改 Nginx 的配置文件和 PHP 的配置文件，将用户权限改为 kbt\n\n 4. 修改 Nginx 的配置文件，实现于 PHP 的互通，以及设置 PHP 脚本的根路径\n\n 5. 安装 Git，配置信息，生成 SSH 公钥给 Github 或 Gitee\n\n 6. 编写 PHP 脚本，然后在 Github 或 Gitee 开启 WebHook，填写脚本的 URL 访问地址\n\n此时会发现少了 Docker 的网桥配置，因为处于同一个服务器，本身就能通信。少了 Docker，也不需要在两个容器创建普通用户 kbt，只需要在宿主机创建即可。\n\n----------------------------------------\n\nQ6 - PHP 容器不安装 Git 行吗，只在宿主机安装？\n\n不行的，因为 PHP 脚本执行后，使用的 git 命令是脚本所在的环境存在的，不安装即无法克隆项目代码，说其实的，如果曾经已经配置过宿主机的 SSH 公钥，则不需要在宿主机安装 Git。宿主机安装 Git 的目的仅仅是生成 SSH 公钥，而 PHP 容器才是使用 Git 相关的命令。\n\n----------------------------------------\n\nQ7 - PHP 容器不挂载出来可以吗？\n\n可以的，但是不建议。Docker 挂载的目的就是实现宿主机和容器的数据同步，也就是说两个挂载目录，只要有一方发生修改，则另一方同步修改。而实际上，我们应该禁止容器的挂载目录能被手动修改数据，这样，只修改宿主机的挂载目录数据，安全大大提高的同时，容器的数据也会同步改变。\n\n而如果不挂载出来，就必须进入到容器内部，创建脚本，修改脚本，违背了容器能修改数据的原则，再想想容器万一不小心删除了，则数据全没了。而服务器只有过期、被入侵。两者相比优势清晰明了。',normalizedContent:'笔记\n\n如果你不打算部署在 github pages 或者 gitee pages 上，而是部署在自己的服务器上，又或者三个都想自动同步部署，那么本内容就是带你如何在服务器部署项目，同时也有 docker 的一次实战。\n\n2021-11-03 @村长\n\n\n\n * 原理介绍\n * 环境准备\n * 环境安装\n * 环境用户\n * 环境启动\n   * nginx启动\n   * php启动\n * 环境配置\n   * nginx配置\n   * php配置\n * 环境重启\n * 环境测试\n * git环境\n   * 宿主机配置git\n   * php容器配置git\n   * 项目访问\n * 自动化部署\n   * gitee脚本\n   * github脚本\n   * webhook配置\n * 问答\n\n\n\n\n# 原理介绍\n\n实现服务器自动化部署，我们使用的是 webhook 技术，这个技术 github 和 gitee 都有，不难理解。\n\n首先要知道为什么使用 webhook？如果我每次克隆项目，需要手动实现 git clone 命令，但是每次别人 push 新代码，我必须手动克隆或者拉取最新的代码，那么有没有一种技术，别人 push 新代码，我发个呆，然后 push 的新代码自动被我的服务器克隆下来呢。这个技术就是 webhook。\n\nwebhook 可以理解为一个仓库的触发器。\n\n * 什么时候这个触发器被触发呢：由你决定，可以在 push 新代码之后，可以在分支合并之后\n\n * 触发的内容是什么：webhook 会主动发送一个 post 请求到你配置的地址，这个地址是我们服务器的脚本。一旦请求我们写的脚本，就会触发脚本，脚本里的内容就是执行 git clone 等命令拉取仓库代码\n\n所以总结就是：当我们 push 项目到仓库，仓库触发 webhook，发送 post 请求到我们的服务器，这个请求触发我们写的脚本，脚本执行 git clone 等命令拉取项目代码。\n\n\n\n所以确保提供给 github 或 gitee 的请求能访问并触发编写的脚本。而如何访问并触发脚本，就是本内容要介绍的。\n\n\n# 环境准备\n\n * centos 系统（其他系统也可以）\n\n * 一个普通用户（强烈建议）\n\n * docker 容器（可选）\n\n * openresty，可以理解为 nginx 和 lua 的集成，使用 nginx 也可以\n\n * php 环境（php 脚本必须）\n\n注意：这里是使用 docker 容器进行管理，如果没用过或者不打算用 docker，也可以参考：docker 是一个容器，容器里的每一个环境可以理解为一个 centos 系统，比如 docker 里的 nginx 就是一个安装了 nginx 的 centos 系统，docker 里的 php 就是安装了 php 的 centos 系统。（实际上不完全是 centos 系统，取决于供应商的设计，这里为了解释说明）\n\n\n\n有人疑惑了，可不可以在 docker 里的 nginx 环境安装 php，毕竟 nginx 所在的也是一个 centos 系统，额(⊙﹏⊙)，不建议，还是老老实实安装 php 吧。docker 的出现就是为了隔离每一个环境，但是又不影响彼此的联系。\n\n如果你不使用 docker，请下意识把 docker 这一层因素去掉即可。关于 nginx 和 php 的步骤是完全一样，不会因为 docker 而被影响。\n\n我是先进入服务器，然后从服务器进入 docker，接着从 docker 进入 nginx 和 php。而你不用 docker，只需要进入服务器即可，因为不用 dcoerk，nginx 和 php 就处在服务器里。\n\n\n# 环境安装\n\n关于 docker 的安装，我已经写在 docker 的知识体系中，点击传送。\n\n关于 openresty（nginx）在 docker 安装，我已经写在 nginx 的知识体系中，点击传送。\n\n如果你已经安装过 docker，并且 docker 里安装了 openresty 或者 nginx，则不需要重新安装。\n\n笔记\n\n这里再次说明，没接触过 openresty 的也不慌，这里的它的作用就是 nginx 的作用，所以本文提到的 openresty，请在脑海里替换为 nginx 即可。\n\n2021-11-03 @村长\n\n安装完 docker 和 openresty（nginx）后，我们需要下载 php 镜像，服务器部署的脚本是使用 php 编写，所以需要 php 的运行环境。\n\n查看 php 版本 传送门\n\n建议下载带有 fpm 的版本，我下载的是 7.3-fpm 版本。\n\n\n\ndocker pull php:7.3.33-fpm\n\n\n1\n\n\n\n# 环境用户\n\n强烈建议 nginx、php 或者其他的容器不要用 root 用户，这里创建一个普通用户来进行操作，这也是实际生产上需要做的。\n\n创建 kbt 普通用户（用户名自己决定）\n\nuseradd kbt\npasswd kbt\n# 然后这里填 kbt 用户的密码\n\n\n1\n2\n3\n\n\n将 kbt 用户放入 docker 组，这样 kbt 用户才能使用 docker 的相关命令（如果不用 docker，请忽略）\n\nusermod -a -g docker kbt  # 将 kbt 用户加入到 docker 用户组中\n\nsystemctl restart docker  # 重启 docker\n\n\n1\n2\n3\n\n\n-a 是追加，普通用户加入 docker 组后，不会退出原来所在的组。\n\n-g 是指定组名。\n\n\n# 环境启动\n\n安装完 docker、openresty 或 nginx、php 后，接下来就启动它们。\n\ndocker 的启动很简单，但是也很麻烦，简单在于命令是固定的，麻烦在于数据卷的考虑，到底放在宿主机的哪个路径下。\n\n如果不用 docker，请忽略。\n\n\n# nginx启动\n\nopenresty 或 nginx 的启动时，需要将配置文件目录、静态文件目录、日志文件目录给挂载出来，方便备份和修改。\n\n这里只是说明我的路径，你的路径请根据你的需求修改，只需要修改路径即可。\n\n * nginx 的配置文件挂载在 /docker/openresty/conf 目录下\n\n * nginx 的静态文件目录挂载在 /docker/openresty/html 目录下\n\n * nginx 的日志文件目录挂载在 /docker/openresty/logs 目录下\n\n因为我打算把所有的挂载目录都放在 /docker 目录下，如 node 镜像挂载目录是 /docker/node，tomcat 镜像挂载目录在 /docker/tomcat ...... 类推\n\n首先创建根路径：\n\nmkdir /docker/openresty\n\n\n1\n\n\n这里说明一下，我们需要把 nginx 容器里的这些目录拷贝出来，为什么呢？因为一旦挂载成功，宿主机的目录会覆盖容器的目录，想想此时刚刚创建的宿主机的目录都为空，一旦挂载后，容器里的目录被覆盖，也为空。所以我们事先从容器拿出这些目录，放到根路径下，再挂载，这样覆盖的目录就是拷贝出来的目录。\n\n先简单启动一个 openresty 容器。容器名叫 nginx，启动的镜像名是 openresty，版本为 latest。\n\ndocker run -d --name nginx openresty:latest\n\n\n1\n\n\n将容器需要的挂载目录拷贝出来\n\ndocker cp nginx:/etc/nginx/conf.d /docker/openresty/conf\ndocker cp nginx:/usr/local/openresty/nginx/html /docker/openresty/html\ndocker cp nginx:/usr/local/openresty/nginx/logs /docker/openresty/logs\n\n\n1\n2\n3\n\n\n我拷贝的 conf.d 目录是 简易版 配置文件所在的目录，并将 conf.d 改为 conf，你可以不改，我只是不喜欢 .d。而静态文件目录和日志文件目录名不变。\n\n完整版 的配置文件在容器的 /usr/local/openresty/nginx/conf 路径下，文件名叫 nginx.conf。\n\n为什么不使用完整版？\n\n「简易版」只能写 server 块，「完整版」不仅可以写 server 块，还能写 http 块。因为「完整版」的 http 块利用 include 指令引入「简易版」配置文件所在的目录，所以我们只需要在「简易版」目录下添加任意 .conf 文件，则自动会被引入到「完整版」，避免直接修改「完整版」引起安全问题。\n\n\n\n拿出来三个目录后就可以删除这个容器，为完整版的容器做准备。\n\ndocker rm -f nginx\n\n\n1\n\n\n启动最终版的 openresty 容器前，我们需要创建一个网桥，避免过多的容器积压在默认网桥上，也为了 nginx 能和 php 等容器进行通信。\n\n网桥就是网络，我喜欢称呼网桥\n\n默认网桥无法直接通信，必须使用 ip 或者 --link 进行通信，所以很麻烦，我们就创建一个网桥，解决所有问题。如果还不懂，请看原理：点击跳转\n\n2021-11-09 @村长\n\n创建一个叫做 web 的网桥\n\ndocker network create web\n\n\n1\n\n\n最后启动 openresty 容器，实现挂载\n\ndocker run -d --name nginx -p 80:80 --restart always \\\n-v /docker/openresty/conf:/etc/nginx/conf.d \\\n-v /docker/openresty/html:/usr/local/openresty/nginx/html \\\n-v /docker/openresty/logs:/usr/local/openresty/nginx/logs \\\n-v /home/kbt:/home/kbt \\\n--network web --network-alias nginx \\\nopenresty:latest\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n/home/kbt 是后面 php 环境需要，因为 php 不允许 root 用户操作，所以我们使用前面创建的 kbt 用作为操作 php 的权限用户。\n\n--network-alias 是给所在的网桥起个别名，这个别名是自己所在网桥的一种标识，方便相同网桥的其他容器如 nginx 通过别名找到你。尽量和容器名一致。\n\n\n# php启动\n\nphp 容器启动很简单，我们需要注意的是 php 脚本的「住处」，我把脚本放在 /home/kbt 处，因为 php 环境使用 kbt 用户，所以脚本也要放在 kbt 用户的目录下，防止外界恶意访问执行脚本，引起严重后果。\n\n如果你是 xxx 用户，则请将脚本放在 /home/xxx 目录下。\n\ndocker run -d --name php -v /home/kbt:/home/kbt --network web --network-alias php php:7.3-fpm\n\n\n1\n\n\nngxin 启动的时候也挂载了这个 /home/kbt 目录。\n\n此时 /home/kbt 目录相当于一个「中转站」，连接着 nginx 和 php，这样 nginx 就能通过这个「中转站」访问 php 的脚本了。当然这样直接访问还远远不够，我们还需要在 nginx 的配置文件进行配置，指定 php 的脚本在 home/kbt 下。\n\n\n# 环境配置\n\n我们需要修改 nginx 的用户权限为 kbt，以及 php 的用户权限也为 kbt，这样为了防止外界恶意访问 nginx，植入恶意脚本，因为 root 的权限太大，拥有了 root 权限，容易被植入恶意脚本。所以不要一味的追求 root。\n\n不要忽略这一步，哪怕你不用 docker，你只需要把 docker 相关的命令无视掉。\n\n\n# nginx配置\n\n我们需要配置 nginx 的用户权限、php 脚本的访问路径、以及静态资源的缓存等。\n\n> 配置 php 脚本的访问路径\n\n首先打开 /docker/openresty/conf 的「简易版」配置文件，名字叫 default.conf\n\nvim /docker/openresty/conf/default.conf\n\n\n1\n\n\n添加如下内容：\n\n\n\n\n\n\n\n \n \n \n \n \n \n \n\n\n\n\nserver {\n    listen 80;\n    server_name 你的服务器域名;\n\n    # ...... 其他配置\n    location ~ \\.php$ {   # 访问 .php 后缀的请求\n        root           /home/kbt;\t# 脚本的根目录\n        fastcgi_pass   php:9000;\t# 通过 php 网桥别名的 9000 端口连接上 php容器\n        fastcgi_index  index.php;\t# 默认首页\n        fastcgi_param  script_filename  /home/kbt$fastcgi_script_name;  # 脚本的根目录\n        include        fastcgi_params;\n    }\n    # ...... 其他配置\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n第 7 行改为 /home/kbt 目录，这是我们放置脚本的根目录。\n\n第 8 行的 php 就是我们启动 php 容器指定的网桥别名，nginx 和 php 都处于 web 网桥，那么可以通过网桥别名找到彼此。9000 是 php 容器的默认端口。\n\n第 9 行的 /home/kbt$fastcgi_script_name 指的是，启动 php 环境来运行 /home/kbt 目录下的脚本，否则脚本无法启动。如果你不是 /home/kbt，则自行修改。\n\n注意\n\n不能在 $fastcgi 前加 /。\n\n2021-11-09 @村长\n\n如果不使用 docker，则内容为\n\nserver {\n    listen 80;\n    server_name 你的服务器域名;\n    \n    # ...... 其他配置\n    location ~ \\.php$ {\n    \tproxy_pass   http://127.0.0.1;\n    }\n\n    location ~ \\.php$ {\n        root           /home/kbt;\n        fastcgi_pass   localhost:9000;\n        fastcgi_index  index.php;\n        fastcgi_param  script_filename  /home/kbt$fastcgi_script_name;  # 脚本的根目录\n        include        fastcgi_params;\n    }\n    # ...... 其他配置\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n先转发到本地（127.0.0.1），然后触发 12 行的 localhost，找到 9000 端口的 php 环境。\n\n> 安装 vim\n\n因为 nginx 容器并不带 vim 和 vi 命令，所以我们需要安装 vim，安装前需要更新 apt-get（容器没有 yum）\n\n# 进入 nginx 容器\ndocker exec -it nginx bash\n\n\n1\n2\n\n\n下载前需要修改下载源为国内源，默认的国外源太慢。\n\n# 进入 apt-get 配置目录\ncd /etc/apt\n\n# 执行备份命令，避免修改失败无法使用\ncp sources.list sources.list.bak\n\n# 同时执行 echo下的 4 行命令，修改成国内镜像源\necho "">sources.list \\\necho "deb http://ftp2.cn.debian.org/debian/ buster main">>sources.list \\\necho "deb http://ftp2.cn.debian.org/debian/debian-security buster/updates main">>sources.list \\\necho "deb http://ftp2.cn.debian.org/debian/debian buster-updates main">>sources.list\n\n# 执行更新命令 apt-get update\napt-get update\n# 下载 vim\napt-get install -y vim\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n你可以将安装完 vim 的新容器，变成新的镜像，不然每次启动初始的镜像，都要更新 apt-get 和安装 vim\n\ndocker commit nginx nginx:1.0\n\n\n1\n\n\n第一个 nginx 是打包的容器名，而 nginx:1.0 则是打包成新镜像的名字和版本。构建新镜像后，可以把初始的镜像删除掉，保留也可以。\n\n> 配置 nginx 用户权限和缓存等。\n\n进入 nginx 容器\n\ndocker exec -it nginx bash\n\n\n1\n\n\n创建 kbt 用户，设置密码，要和宿主机创建的用户保持一致\n\ngroupadd kbt;\nuseradd -g kbt kbt # 创建用户，并加入组，都是 kbt\npasswd kbt\n# 然后这里填 kbt 用户的密码\n\n\n1\n2\n3\n4\n\n\n创建完用户后，接着修改「完整版」配置文件\n\nvim /usr/local/openresty/nginx/conf/nginx.conf\n\n\n1\n\n\n将 user 改为 kbt，\n\nuser kbt;\n\n\n1\n\n\n如图：\n\n\n\n顺便配置一下优化代码，提高 nginx 的访问效率。\n\n在 events 块添加：（已经存在的 events 块）\n\nevents{\n\tworker_connections 1024;\t \n    accept_mutex on;\t\t\t # 开启 nginx 网络连接序列化\n    multi_accept on;\t\t\t # 开启同时接收多个网络连接\n    use epoll;\t\t\t\t\t # 使用 epoll 函数来优化 nginx\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n\n在 http 块添加：（已经存在的 http 块）\n\nhttp {\n    # ...... 其他配置\n\tsendfile on;\t\t\t\t # 开启高效的文件传输模式\n    tcp_nopush on;\t\t\t\t # 提升网络包的传输「效率」\n    tcp_nodelay on;\t\t\t\t # 高网络包传输的「实时性」\n    \n    keepalive_timeout 65;\t\t # 连接超时时间\n    \n    gzip on;  \t\t\t   \t\t # 开启 gzip 功能\n    gzip_types *;\t\t   \t \t # 压缩源文件类型,根据具体的访问资源类型设定\n    gzip_comp_level 6;\t   \t\t # gzip 压缩级别\n    gzip_min_length 1k;          # 进行压缩响应页面的最小长度，content-length\n    gzip_buffers 4 16k;\t         # 缓存空间大小\n    gzip_http_version 1.1;       # 指定压缩响应所需要的最低 http 请求版本\n    gzip_vary  on;\t\t         # 往头信息中添加压缩标识\n    gzip_disable "msie [1-6]\\."; # 对 ie6 以下的版本都不进行压缩\n    gzip_proxied  off;           # nginx 作为反向代理压缩服务端返回数据的条件\n    # ...... 其他配置\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# php配置\n\n> 创建普通用户\n\n首先进入 php 容器\n\ndocker exec -it php bash\n\n\n1\n\n\n创建 kbt 用户，设置密码，要和宿主机创建的用户保持一致\n\ngroupadd kbt;\nuseradd -g kbt kbt # 创建用户，并加入组，都是 kbt\npasswd kbt\n# 然后这里填 kbt 用户的密码\n\n\n1\n2\n3\n4\n\n\n> 安装 vim\n\n我已经在 ngixn 配置写了如何安装 vim，请按照 nginx 配置的安装 vim，进行安装，就在上面不远处。\n\n> 配置 php 环境的用户权限\n\n修改配置文件的用户\n\nvim /usr/local/etc/php-fpm.d/www.conf\n\n\n1\n\n\n大概在 23 - 24 行，改为：\n\nuser = kbt\ngroup = kbt\n\n\n1\n2\n\n\n\n\n\n# 环境重启\n\n笔记\n\n重启按顺序：php、nginx，因为 nginx 配置文件依赖 php 脚本，所以先启动 php，再启动 nginx。\n\n2021-11-09 @younng kbt\n\ndocker restart php\ndocker restart nginx\n\n\n1\n2\n\n\n\n# 环境测试\n\n测试 nginx 是否能访问 php 脚本，我们在宿主机的 /home/kbt，创建 index.php 文件\n\nvim /home/kbt/index.php\n\n\n1\n\n\n添加内容：\n\n<?\n    echo phpinfo();\n?>\n\n\n1\n2\n3\n\n\n然后访问你的网站：ip:port/index.php，如图：\n\n\n\n此时 /home/kbt 就是你 php 脚本的根路径，如果你想对 php 脚本分类，可以在根路径下创建一个文件夹，如我创建 test 文件夹，将 index.php 放入该文件夹里，接着访问的时候，加上文件夹名即可。如下：\n\n\n\n\n# git环境\n\n环境准备就绪，现在进入正题。我们需要安装 git，来实现自动部署。\n\n分别在宿主机和 php 容器安装 git\n\n * 宿主机安装 git 是为了配置 ssh 公钥\n   \n   不理解公钥？我们克隆的项目地址有 https 方式，也有 ssh 方式。\n   \n   \n   \n   而 ssh 方式需要配置公钥，我们在自己的服务器生成 ssh 公钥，然后交给 github 或者 gitee，这样它们才能通过公钥「连接」我们的服务器。才能拉取项目。\n\n * php 容器安装 git 是因为我们执行 php 脚本，然后 php 容器会根据脚本使用 git 拉取仓库的项目。\n\n> 为什么不在 php 容器配置公钥？\n\n一个服务器可以生成一个公钥，尽量不要在容器内生成，因为服务器的公钥是公用的，任何容器都可以使用。但是只在一个容器内生产，其他容器可能出现无法使用的问题。\n\n\n# 宿主机配置git\n\n宿主机安装 git，可以直接使用 yum 来下载\n\nyun -y install git\n\n\n1\n\n\n查看 git 版本\n\ngit --version\n\n\n1\n\n\n配置全局用户信息\n\ngit config --global user.name "你的用户名" \t\t# 定义全局的用户名\ngit config --global user.email "你的邮箱" \t\t # 定义全局的邮件地址\ngit config --list \t\t\t\t\t\t\t\t# 查看配置信息是否成功\n\n\n1\n2\n3\n\n\n切换 kbt 用户\n\nsu kbt\n\n\n1\n\n\n警告\n\n必须切换 kbt 用户，因为我们 php 环境使用的是 kbt 用户，拉取代码时，不仅验证 ssh 公钥，也会验证生成 ssh 公钥的用户名。\n\n如果是 root 用户配置公钥，则 php 容器没有权限拉取 git 项目。\n\n2021-11-09 @村长\n\n生成公钥（确保已经切换了和 php 环境一致的用户）\n\nssh-keygen -t rsa -c "xxx@xx.com"  # 填写正确的你的邮箱\n\n\n1\n\n\n按三次回车即可生成 ssh 公钥。\n\n生成 ssh 公钥后，会告诉你生成的目录：your public key has been saved in /home/lkbt/.ssh/id_rsa.pub.\n\ncat /home/kbt/.ssh/id_rsa.pub\n\n\n1\n\n\n查看文件后获取（复制）ssh 公钥，添加到 github 或者 gitee 中。如果不知道如何添加，请看 配置 ssh key，该内容有三步，配置 ssh 公钥在第二步。\n\n验证是否配置生效\n\nssh -t git@github.com    # github\nssh -t git@gitee.com\t# gitee\n\n\n1\n2\n\n\n建议 github 和 gitee 都配置 ssh 公钥。\n\n\n# php容器配置git\n\n首先进入 php 容器\n\ndocker exec -it php bash\n\n\n1\n\n\n确保你的 apt-get 已经是最新的，如果不是，请更新。因为 apt-get 初始版本库里的 git 版本很低。\n\napt-get update\n\n\n1\n\n\n安装 git\n\napt-get -y install git\n\n\n1\n\n\n查看 git 版本\n\ngit --version\n\n\n1\n\n\n配置全局用户信息\n\ngit config --global user.name "你的用户名" \t\t# 定义全局的用户名\ngit config --global user.email "你的邮箱" \t\t # 定义全局的邮件地址\ngit config --list \t\t\t\t\t\t\t\t# 查看配置信息是否成功\n\n\n1\n2\n3\n\n\n初次使用，先克隆一次项目，放在 /home/kbt 目录下\n\ncd /home/kbt\ngit clone -b ga-pages <仓库 ssh 地址>\n\n\n1\n2\n\n\n-b 指定克隆的分支。不指定默认是默认分支 master。\n\n警告\n\n建议在 php 容器克隆项目，或者在宿主机切换到 kbt 用户再克隆项目，如果在宿主机以 root 用户克隆项目，那么 php 容器将没有权限操作这个项目。\n\n2021-11-11 @村长\n\n\n# 项目访问\n\n此时你访问你的服务器，会发现访问不了你克隆的项目，因为项目克隆在 /home/kbt 目录下，而这个目录目前仅仅是 php 脚本的根路径，不是非 php 脚本的路径，我们还需要修改 nginx 的配置文件，让它跳转到这个目录。\n\nvim /docker/openresty/conf/default.conf\n\n\n1\n\n\n假设我的项目名是 notes，则配置一个 localtion。\n\nserver {\n    listen 80;\n    server_name 你的服务器域名;\n    \n    location /notes {\n    \troot /home/kbt;\t\t# /notes 会拼接到这后面\n        index index.html;\t# 默认访问 idnex.html 页面\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n此时访问你的服务器 ip:port/notes，nginx 就会去 /home/kbt 下找到 notes 目录，然后在这个目录下获取 idnex.html 页面返回，你就会成功看到你的项目页面。\n\n\n# 自动化部署\n\n我们使用的是 webhook 技术。\n\n这里使用 php 脚本进行自动化部署，用到 php 的 shell_exec 函数，而开放 shell_exec 这个 php 函数是非常危险的，因此切记不要在生产环境开放这个函数，更加不能用 root 权限去执行 php。当然我们只是简单的个人博客，不是什么大公司，所以危害很低。\n\n我们首先在 /home/kbt 目录下创建一个文件夹，专门存储 webhook 的 php 脚本。比如叫 deploy。\n\n在 deploy 文件夹下创建 php 脚本\n\n\n# gitee脚本\n\n<?php\n \n$git = "git"; // 默认是用 git 全局变量，有的环境可能要指明具体安装路径\n$source = "gitee";\t// 项目仓库源，如 github 或 gitee\n$branch = "gh-pages"; // 指定仓库分支，为空就是 master 分支\n$logname = "logs/deploy"; // 本地日志名称，与当前 php 文件在同一目录，不需要加 .log\n$savepath = "/home/kbt/deploy"; // 网站根目录，初次克隆确保目录为空\n$gitsshpath  = "git@gitee.com:kele-bingtang/notes-blog.git";// 代码仓库 ssh 地址\n$password = "你在 webhook 设置的密码"; // webhook 设置的密码\n$name  = "你的用户名";// 仓库用户名\n$email = "你的邮箱";// 用户仓库邮箱\n$iscloned = true;// 设置是否已经 clone 到本地。true：已经 clone,直接 pull，false：先 clone\n$is_test = false;// 测试模式，无需密码。true 打开，平时 false 关闭\n\n// 如果已经 clone 过，则直接拉去代码\nif ($iscloned) {\n    $requestbody = file_get_contents("php://input"); // 获取请求体的数据\n    if (empty($requestbody) && empty($is_test)) {   // empty(var) 如果 var 为空或 false，则返回 true\n        die(\'发送到仓库的请求失败\');   // die 代表输出一条消息，并退出当前脚本\n    }\n \n    // 解析发过来的 json 信息\n    $content = json_decode($requestbody, true);\n    // 若是指定的分支且提交数大于 0，且密码正确\n    if($content[\'password\'] == $password || !empty($is_test)){\n        if($content[\'total_commits_count\'] > 0 || !empty($is_test)) {\n            if ($content[\'ref\'] == "refs/heads/$branch" || !$branch || !empty($is_test)) {\n                $res_log = "------------------------- [pull start] -------------------------" . php_eol;  // php_eol 是换行符\n                $cmd = "rm -rf $savepath && $git clone -b $branch $gitsshpath $savepath && echo \'拉取项目并部署成功\'";\n                $result = shell_exec($cmd); // shell_exec 关键命令，执行拉取代码\n                if(!empty($is_test)){\n                    $res_log .= date(\'y-m-d h:i:s\') . \'执行测试！\'. php_eol; // .= 代表追加到后面，不会覆盖前面\n                }else{\n                    $res_log .= "[" . date(\'y-m-d h:i:s\', time() + 8 * 60 * 60) . \'] - 拉取 \' . $content[\'repository\'][\'name\'] . \' 仓库的 \' . $content[\'ref\'] . \' 分支代码进行部署\' . php_eol;\n                }\n                if(!$result){\n                    $result = "拉取项目失败" . php_eol;\n                }\n                $res_log .= "[项目源] - $source" . php_eol;\n                $res_log .= "[执行命令] - " . $cmd . php_eol;\n                $res_log .= "[结果] - " . $result;\n                $res_log .= "-------------------------- [pull end] --------------------------" . php_eol;\n                $res_log .= php_eol . php_eol;\n                file_put_contents($logname.".log", $res_log, file_append); // 写入日志\n                echo $result;\n            }\n        }\n    } else {\n        file_put_contents($logname.".log", \'[gitee] 密码错误!\' . php_eol, file_append);\n        echo \'密码错误！\';\n    }\n}else {\t\t// 如果没有 clone，则先克隆代码\n    $res = "[ clone start ----------------- ]".php_eol;\n    // 如果配置全局信息过，则会覆盖\n    $res .= shell_exec("$git config --global user.email $email").php_eol;\n    $res .= shell_exec("$git config --global user.name $name").php_eol;\n    $res .= shell_exec("$git clone $gitsshpath $savepath").php_eol;\n    $res .= "[ clone end ----------------- ]".php_eol;\n    file_put_contents($logname.".log", $res, file_append); // 写入日志\n}\n?>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n\n\n具体的内容我已经都注释好了，同时也会生成日志文件，第 39 - 44 都是输入日志的数据，你可以适当根据喜好修改。\n\n相信我，你只需要修改第 3 - 11 行的数据为你的数据即可，我把需要的变量都拿出来了，其他不会出错。\n\n29 行代码是核心命令，该脚本执行这个命令，去克隆仓库代码。所以这也是为什么 php 环境要安装 git，不然无法克隆。\n\n说明一下 29 行代码为什么要这样写，因为我们的博客是打包后生成的一大堆 html、css、js 文件，源码修改一点内容，打包后都会引起这些文件的位置、内容变化，所以我们需要把原来克隆的项目删除掉，再重新克隆。\n\n有人想，能不能执行 git pull 命令，只拉取最新的代码，这里告诉你，我测试过了，哪怕我提交到仓库的打包项目没有任何修改， pull 下来的代码全是和原来的代码冲突，需要手动处理合并。想想就麻烦，所以只能先删除再克隆新的。\n\n如果你 git pull 成功，请留言告诉我，可能我当初的方法不对。\n\n\n# github脚本\n\n<?php\n \n$git = "git"; // 默认是用 git 全局变量，有的环境可能要指明具体安装路径\n$source = "github";\t// 项目仓库源，如 github 或 gitee\n$branch = "gh-pages"; // 指定仓库分支，为空就是 master 分支\n$logname = "logs/deploy"; // 本地日志名称，与当前 php 文件在同一目录，不需要加 .log\n$savepath = "/home/kbt/deploy"; // 网站根目录，初次克隆确保目录为空\n$gitsshpath  = "git@github.com:kele-bingtang/notes-blog.git";// 代码仓库 ssh 地址\n$password = "你在 webhook 设置的密码"; // webhook 设置的密码\n$name  = "你的用户名";// 仓库用户名\n$email = "你的邮箱";// 用户仓库邮箱\n$iscloned = true;// 设置是否已经 clone 到本地。true：已经 clone,直接 pull，false：先 clone\n$is_test = false;// 测试模式，无需密码。true 打开，平时 false 关闭\n    \n// 如果已经 clone 过，则直接拉去代码\nif ($iscloned) {\n    $requestbody = file_get_contents("php://input"); // 获取请求体的数据\n    if (empty($requestbody) && empty($is_test)) {   // empty(var) 如果 var 为空或 false，则返回 true\n        die(\'发送到仓库的请求失败\');   // die 代表输出一条消息，并退出当前脚本\n    }\n    // 获取 github 的加密令牌 secret\n    $signature = $_server[\'http_x_hub_signature_256\'];\n    // github 的令牌被 sha256 加密了，所以对 $secret 相同方式加密\n    $encyptsecret = "sha256=" . hash_hmac(\'sha256\', $requestbody, $secret);\n    \n    // 先对 url 解码，再解析为 json 数组\n    $content = json_decode(strstr(urldecode($requestbody),"{"),true);\n    // 若是指定的分支且提交数大于 0，且密码正确\n    if(strcmp($signature, $encyptsecret) == 0 || !empty($is_test)){  // strcmp 函数比较两个字符串\n        if ($content[\'ref\'] == "refs/heads/$branch" || !$branch || !empty($is_test)) {\n            $res_log = "------------------------- [pull start] -------------------------" . php_eol;  // php_eol 是换行符\n            $cmd = "rm -rf $savepath && $git clone -b $branch $gitsshpath $savepath && echo \'拉取项目并部署成功\'";\n            $result = shell_exec($cmd); // shell_exec 关键命令，执行拉取代码\n            if(!empty($is_test)){\n                $res_log .= "[" . date(\'y-m-d h:i:s\') . \'] 执行测试！\'. php_eol; // .= 代表追加到后面，不会覆盖前面\n            }else{\n                $res_log .= "[" . date(\'y-m-d h:i:s\', time() + 8 * 60 * 60) . \'] - 拉取 \' . $content[\'repository\'][\'name\'] . \' 仓库的 \' . $content[\'ref\'] . \' 分支代码进行部署\' . php_eol;\n            }\n            if(!$result){\n                $result = "拉取项目失败" . php_eol;\n            }\n            $res_log .= "[项目源] - $source" . php_eol;\n            $res_log .= "[执行命令] - " . $cmd . php_eol;\n            $res_log .= "[结果] - " . $result;\n            $res_log .= "-------------------------- [pull end] --------------------------" . php_eol;\n            $res_log .= php_eol . php_eol;\n            file_put_contents($logname.".log", $res_log, file_append); // 写入日志\n            echo $result;\n        }\n    } else {\n        file_put_contents($logname.".log", \'[github] 密码错误!\' . php_eol, file_append);\n        echo \'密码错误！\';\n    }\n}else {\t\t// 如果没有 clone，则先克隆代码\n    $res = "[ clone start ----------------- ]".php_eol;\n    // 如果配置全局信息过，则会覆盖\n    $res .= shell_exec("$git config --global user.email $email").php_eol;\n    $res .= shell_exec("$git config --global user.name $name").php_eol;\n    $res .= shell_exec("$git clone $gitsshpath $savepath").php_eol;\n    $res .= "[ clone end ----------------- ]".php_eol;\n    file_put_contents($logname.".log", $res, file_append); // 写入日志\n}\n?>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n\n\ngithub 的脚本和 gitee 脚本的内容不是一样的，首先 github 返回的令牌是 sha256 加密的，而 gitee 返回的是不加密的，所以我们需要对本地的令牌进行 sha256 加密，然后再进行两者的判定，是否相等。\n\n其次 github 返回的请求是经过编码过的，如这种 %7b%22ref%22%3a%22refs%2fheads%2fgh-pages%，所以我们获取后需要解码，请看 29 代码。\n\n日志文件如下：\n\n\n\n\n# webhook配置\n\n讲了那么多，都不懂 webhook 如何配置，现在开始配置。\n\n> github配置\n\n进入仓库里，然后 github 点击 setting，找到 webhooks，然后点击 add webhook 进行配置。\n\n\n\n然后填写 php 脚本地址以及令牌。\n\n\n\n令牌要对应上我提供脚本的 $secre 变量值。\n\n脚本访问地址：比如脚本放在 /home/kbt/ 下的 deploy 目录下，脚本名叫做 deploy.php，那么地址是 ip:port/deploy/deploy.php。\n\n为什么地址没有 /home/kbt，因为上面我已经配置过了，这个目录是脚本的根路径，所以 ip:port/xxx.php 就是访问根目录下的 xxx.php，有目录则加上目录即可。\n\n> gitee\n\n其实就是中文版的 github，所以位置完全一样\n\n\n\n\n\n密码要对应上脚本的密码。\n\n添加 webhook 后，可以不断发送请求进行测试。\n\n笔记\n\n只需选择 push 事件触发即可，push 事件是指仓库的 任意分支 被 push 了都会触发，并非只有 master 分支触发。\n\n2021-11-09 @村长\n\n\n# 问答\n\nq1 - 能否总结本内容步骤？\n\n 1.  安装 docker，然后利用 docker 安装 nginx 和 php 镜像\n 2.  创建 kbt 普通用户，加入 docker 组\n 3.  启动 nginx 容器，将配置文件目录、静态文件目录、日志文件目录拷贝出来，然后关闭 nginx 容器\n 4.  docker 创建网桥，给两个容器通信\n 5.  启动 nginx 容器，将拷贝的出来的三个目录和容器的三个目录进行挂载，以及与 kbt 用户的目录挂载\n 6.  启动 php 容器，与 kbt 用户的目录挂载，php 容器的挂载目录和 kbt 用户的目录路径一致\n 7.  在 nginx 容器创建 kbt 普通用户和组，然后修改 nginx.conf 配置文件的 user 为 kbt，即 nginx 的访问权限仅限于 kbt 的权限\n 8.  修改挂载出来的配置文件目录里的 default.conf 文件，指定 php 脚本所在的根路径为 kbt 的用户目录\n 9.  在 php 容器创建 kbt 普通用户和组，然后修改 www.conf 配置文件的 user 和 group 为 kbt，即 php 脚本运行权限仅限于 kbt 的权限\n 10. 两个容器配置完后，按顺序重启 php、nginx 容器\n 11. 宿主机安装 git，并配置 ssh 公钥给 github 或者 gitee。php 安装 git，在 kbt 用户目录克隆项目\n 12. 修改挂载出来的配置文件目录里的 default.conf 文件，添加 location，能访问克隆项目的目录\n 13. 编写 php 脚本，然后在 github 或者 gitee 上开启 webhook，配置脚本的 url 访问地址和令牌、密码\n\n----------------------------------------\n\nq2 - 为什么 nginx 的静态文件目录、日志文件目录没有用到？\n\n我要求启动 nginx 容器的时候，将这些目录挂载出来，是因为这是实际生产开发需要的，不一定是本内容需要的，这里只是打好预防针，留个印象。\n\n我当初部署的时候确实是把 php 脚本和克隆的项目放在静态文件目录下，但是不安全，这些目录是 root 用户管理的，所以我就创建了普通用户 kbt，将 php 脚本和克隆的项目放到该普通用户的目录下，即 /home/kbt。而放到该目录后，就要在 nginx 和 php 创建 kbt 用户，并且挂载到 kbt 用户目录下，实现三者的同一个目录互通。如下图：\n\n\n\nq3 - 一定要在 nginx 和 php 容器创建普通用户 kbt 吗？\n\n如果不创建普通用户 kbt，那么就需要一个目录实现上方图的三者互通，那么这个目录就属于 root 用户。\n\n----------------------------------------\n\nq4 - 两个容器创建的 kbt 用户和宿主机的 kbt 用户一样吗？\n\n不一样，但是我现在部署的时候就是这样创建的，我只把我成功的案例说出来。你也可以试试只在宿主机创建 kbt 用户，两个容器使用默认的用户（不创建 kbt 用户），我认为这样也可以。\n\n是可以的，据我了解，在宿主机以普通用户 kbt 启动 docker 容器，那么容器里虽然显示 root 用户，但是这个 root 用户的权限其实就是宿主机启动的用户权限，所以需要切换到普通用户，并给普通用户使用 docker 的权限，然后启动。\n\n----------------------------------------\n\nq5 - 不使用 docker 如何操作？\n\n其实熟悉 docker 了，发现本内容 docker 操作两个容器，其实就相当于在两台电脑分别安装 nginx 和 php，然后进行操作，docker 只是实现了两者在同一台电脑的互通（配置同一个网桥）。\n\n不使用 docker，会发现服务器部署非常方便，步骤大抵如下：\n\n 1. 在服务器安装 nginx 和 php 的环境\n\n 2. 在服务器创建普通用户 kbt，生成 /home/kbt 路径\n\n 3. 修改 nginx 的配置文件和 php 的配置文件，将用户权限改为 kbt\n\n 4. 修改 nginx 的配置文件，实现于 php 的互通，以及设置 php 脚本的根路径\n\n 5. 安装 git，配置信息，生成 ssh 公钥给 github 或 gitee\n\n 6. 编写 php 脚本，然后在 github 或 gitee 开启 webhook，填写脚本的 url 访问地址\n\n此时会发现少了 docker 的网桥配置，因为处于同一个服务器，本身就能通信。少了 docker，也不需要在两个容器创建普通用户 kbt，只需要在宿主机创建即可。\n\n----------------------------------------\n\nq6 - php 容器不安装 git 行吗，只在宿主机安装？\n\n不行的，因为 php 脚本执行后，使用的 git 命令是脚本所在的环境存在的，不安装即无法克隆项目代码，说其实的，如果曾经已经配置过宿主机的 ssh 公钥，则不需要在宿主机安装 git。宿主机安装 git 的目的仅仅是生成 ssh 公钥，而 php 容器才是使用 git 相关的命令。\n\n----------------------------------------\n\nq7 - php 容器不挂载出来可以吗？\n\n可以的，但是不建议。docker 挂载的目的就是实现宿主机和容器的数据同步，也就是说两个挂载目录，只要有一方发生修改，则另一方同步修改。而实际上，我们应该禁止容器的挂载目录能被手动修改数据，这样，只修改宿主机的挂载目录数据，安全大大提高的同时，容器的数据也会同步改变。\n\n而如果不挂载出来，就必须进入到容器内部，创建脚本，修改脚本，违背了容器能修改数据的原则，再想想容器万一不小心删除了，则数据全没了。而服务器只有过期、被入侵。两者相比优势清晰明了。',charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"本站 - 评论模块",frontmatter:{title:"本站 - 评论模块",date:"2021-10-29T16:13:12.000Z",permalink:"/about/website/comment/",titleTag:"原创",categories:["关于 - 本站"],tags:["本站"],readingShow:"top"},regularPath:"/80.%E5%85%B3%E4%BA%8E/06.%E5%85%B3%E4%BA%8E%20-%20%E6%9C%AC%E7%AB%99/14.%E6%9C%AC%E7%AB%99%20-%20%E8%AF%84%E8%AE%BA%E6%A8%A1%E5%9D%97.html",relativePath:"80.关于/06.关于 - 本站/14.本站 - 评论模块.md",key:"v-179fa447",path:"/about/website/comment/",headers:[{level:2,title:"前言",slug:"前言",normalizedTitle:"前言",charIndex:79},{level:2,title:"Gitalk 搭建",slug:"gitalk-搭建",normalizedTitle:"gitalk 搭建",charIndex:85},{level:3,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:100},{level:3,title:"Gitalk 使用",slug:"gitalk-使用",normalizedTitle:"gitalk 使用",charIndex:108},{level:3,title:"问题",slug:"问题",normalizedTitle:"问题",charIndex:123},{level:2,title:"Valine 搭建",slug:"valine-搭建",normalizedTitle:"valine 搭建",charIndex:129},{level:2,title:"Twikoo 搭建",slug:"twikoo-搭建",normalizedTitle:"twikoo 搭建",charIndex:142},{level:3,title:"Vercel 部署",slug:"vercel-部署",normalizedTitle:"vercel 部署",charIndex:157},{level:3,title:"Vdoing 集成",slug:"vdoing-集成",normalizedTitle:"vdoing 集成",charIndex:172},{level:3,title:"管理面板",slug:"管理面板",normalizedTitle:"管理面板",charIndex:187},{level:3,title:"反垃圾配置",slug:"反垃圾配置",normalizedTitle:"反垃圾配置",charIndex:197},{level:3,title:"邮件配置",slug:"邮件配置",normalizedTitle:"邮件配置",charIndex:208},{level:3,title:"其他",slug:"其他",normalizedTitle:"其他",charIndex:218},{level:2,title:"结束语",slug:"结束语",normalizedTitle:"结束语",charIndex:224}],headersStr:"前言 Gitalk 搭建 安装 Gitalk 使用 问题 Valine 搭建 Twikoo 搭建 Vercel 部署 Vdoing 集成 管理面板 反垃圾配置 邮件配置 其他 结束语",content:"笔记\n\n本站使用过 Gitalk、Valine、Twikoo 三个评论系统，目前在使用 Twikoo 评论系统。\n\n2021-10-29 @村长\n\n\n\n * 前言\n * Gitalk 搭建\n   * 安装\n   * Gitalk 使用\n   * 问题\n * Valine 搭建\n * Twikoo 搭建\n   * Vercel 部署\n   * Vdoing 集成\n   * 管理面板\n   * 反垃圾配置\n   * 邮件配置\n   * 其他\n * 结束语\n\n\n\n\n# 前言\n\n本站使用过 Gitalk、Valine、Twikoo 三个评论系统，目前在使用 Twikoo 评论系统。\n\n * Gitalk 评论系统基于 GitHub 的 Issue\n * Valine 评论系统基于 LeanCloud\n * Twikoo 评论系统是我目前正在使用的评论系统，也是功能性非常强大的评论系统，我看重的第一点是读者评论后会通过邮箱发送给博主，博主回复后也会通过邮箱发送给读者；其次博主的评论是标识的\n\nGitalk、Valine 通过使用 vuepress-plugin-comment 进行搭建。它既支持 Gitalk 应用也支持 Valine。\n\nTwikoo 的搭建比较麻烦，根据官网介绍，如果想搭建免费的评论系统，则需要注册 MongoDB、Vercel、Akismet、国外邮箱四大账号（前提你都没有）。\n\n\n# Gitalk 搭建\n\nGitalk 是一个基于 Github Issue 和 Preact 开发的评论插件。所以你需要创建一个 GitHub 库，利用该库的 issues 存储评论信息。\n\n如果你已经有一个 GitHub 的仓库存储你的博客文件。那么可以直接使用该库的 issues 存储评论信息。毕竟分类就是把关联的东西放在一起，更好管理。\n\n建议先把自己的博客部署到 Github Actions 下，不然本地运行的话，评论区只能自己评论，自己看哦~~~ 😸部署传送门\n\n记得关闭其他评论系统的插件，下面让我们一起搭建评论区吧。\n\n\n# 安装\n\nyarn add vuepress-plugin-comment -D\n\n\n1\n\n\nnpm install vuepress-plugin-comment -D\n\n\n1\n\n\n\n# Gitalk 使用\n\n插件需要 GitHub Application，即权限。如果没有，点击这里申请\n\n如图：\n\n\n\n参数说明\n * Application name：你授权时对外的应用名字\n * Homepage URL：你应用的根url地址，类似于首页地址，不带任何参数\n * Application description：应用的描述\n * Authorization callback URL：对你的应用进行了操作后的回调地址，因为评论区绑定了博客，评论后的信息存储在博客的issues里\n\n申请完成就会得 Client ID 和 Client Secret\n\n\n\n前往配置文件，填入你的两个参数和其他信息，如下：\n\nmodule.exports = {\n  plugins: [\n    [\n      'vuepress-plugin-comment',\n      {\n        choosen: 'gitalk', \n        options: {\n          clientID: 'c042********01c7',  // 你的client ID\n          clientSecret: 'b77b38cf72**********45d0a0',  // 你的client secret\n           repo: 'notes-blog', // GitHub 仓库\n            owner: 'Kele-Bingtang', // GitHub仓库所有者\n            admin: ['Kele-Bingtang'], // 对仓库有写权限的人\n            // distractionFreeMode: true,\n            pagerDirection: 'last', // 'first'正序 | 'last'倒序\n            // 下面的不用修改，默认这些即可\n            id: '<%- (frontmatter.permalink || frontmatter.to.path).slice(-16) %>', //  页面的唯一标识,长度不能超过50\n            title: '「评论」<%- frontmatter.title %>', // GitHub issue 的标题\n            labels: ['Gitalk', 'Comment'], // GitHub issue 的标签\n            body:\n              '页面：<%- window.location.origin + (frontmatter.to.path || window.location.pathname) %>', // GitHub issue 的内容\n        }\n      }\n    ]\n  ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n配置好后，重启项目，然后打开某个文档，滑到最下方\n\n可以看到\n\n\n\n点击 使用 GitHub 登录，然后会要求授权，确定后评论功能实现啦\n\n\n# 问题\n\n 1. 评论区出现 Error: Validation Failed.\n\n分析：可能页面的链接过长，超过 50，请求 Issues 失败。所以手动设置 id 取值，限制长度不超过 50\n\n 2. 切换页面后评论区内容还是上一个页面的评论\n\n分析：frontmatter.to.path 没有即时获取 path\n\n两个问题的解决：\n\n{\n choosen: 'gitalk', \n options: {\n   ...\n   id: \"<%- (window.location.origin + (frontmatter.to.path || window.location.pathname)).slice(-50) %>\", //  页面的唯一标识,长度不能超过50\n   title: \"「评论」<%- document.title %>\", // GitHub issue 的标题\n   labels: [\"Gitalk\", \"Comment\"], // GitHub issue 的标签\n   body:\"<%- document.title %>：<%- window.location.origin + (frontmatter.to.path || window.location.pathname) %>\" // GitHub issue 的内容\n }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n笔记\n\n其实上方代码在前面的参数配置时，已经加上，这里只是演示问题\n\n 3. 点击使用 GitHub 登录，跳转别的页面\n    \n    \n\n分析：申请 GitHub Application 时候，填错了Authorization callback URL地址，点击使用 GitHub 登录其实就是跳转到Authorization callback URL的填写地址。\n\n解决:Authorization callback URL 地址填好自己的博客链接\n\n\n# Valine 搭建\n\nValine 诞生于 2017 年 8 月 7 日，是一款基于 LeanCloud 的快速、简洁且高效的无后端评论系统。官网：https://valine.js.org/。\n\nValine 相比较 Gitalk 的优势：\n\n * Valine 是基于 LeanCloud 构建，Gitalk 是基于 Github 的 Issue 构建\n * Valine 使用简单，可以自定义名字、头像后发表评论，无需登录任何账户，Gitalk 必须登录自己的 Github 账号才能发表评论\n * Valine 支持自定义 emoji，如 B 站，微博等的表情\n\n......\n\n我开始使用 Valine 的时间（2022-01-04），目前使用 Twikoo（2022-02-16）\n\n记得关闭其他评论系统的插件。\n\n> 注册或登录 LeanCloud\n\n请先注册一个 LeanCloud 的账号，然后创建应用，填写基本信息，然后进入应用，点击设置，点击应用凭证，如图：\n\n\n\n获取你的 AppID 和 AppKey，然后在使用 comment 评论插件：\n\nmodule.exports = {\n    plugins: [\n        [\n            'vuepress-plugin-comment',\n            {\n                // 具体参数请看官网：https://valine.js.org/\n                choosen: 'valine',\n                // options 选项中的所有参数，会传给 Valine 的配置\n                options: {\n                    el: '#valine-vuepress-comment',\n                    appId: '你的 AppID',\n                    appKey: '你的 AppKey',\n                    placeholder: '请留下你的足迹 ~~',\n                    // 有 URL、''、mp、identicon、monsterid、wavatar、retro、robohash、hide 头像选择，具体头像是什么样子，请访问 https://valine.js.org/avatar.html\n                    avatar: 'mp',\t// 默认头像\n                    pageSize: 10,   // 评论列表分页，每页条数\n                    visitor: true,    // 文章访问量统计\n                    recordIP: false,   // 是否记录评论者 IP\n                    enableQQ: true,   // 是否启用昵称框自动获取 QQ 昵称和 QQ 头像, 默认关闭\n                }\n            }\n        ]\n    ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n更多配置参数请访问 Valine 官网。\n\n\n# Twikoo 搭建\n\n官网地址：https://twikoo.js.org/。\n\n> 本搭建内容一部分来自官网。\n\n这里直接介绍使用 MongeDB、Vercel、Akismet 进行评论系统搭建（官方提供的免费版），如果想要付费的则是 MongeDB、腾讯云开发环境，付费搭建具体看官网。\n\n记得关闭其他评论系统的插件。\n\n\n# Vercel 部署\n\n注意\n\nVercel 部署的环境需配合 1.4.0 以上版本的 twikoo.js 使用\n\n视频教程（推荐），注意：因为 MongoDB 新版本原因，视频第三步的 Clusters 位置发生改变，记得回来配合文字教程进行操作。\n\n> 文字教程\n\n 1. 申请 MongoDB 账号，因为评论的数据都放在 MongoDB 数据库里\n\n 2. 创建免费 MongoDB 数据库和数据库用户，区域推荐选择 AWS / N. Virginia (us-east-1)\n\n 3. 点击左侧菜单的 Databases 列表，找到 Clusters 并点击右侧的 CONNECT，按步骤设置允许所有 IP 地址的连接（为什么？），然后点击第二个 Connect your application 并记录数据库连接字符串，请将连接字符串中的 <password> 修改为 数据库密码，其他不变（如 myFirstDatabase）\n\n 4. 申请 Vercel 账号\n\n 5. 点击以下按钮将 Twikoo 一键部署到 Vercel（确保登录了 Vercel，且网页未关闭）\n\n\n\n 6. 进入 Settings - Environment Variables，添加环境变量 MONGODB_URI，值为第 3 步的数据库连接字符串\n\n 7. 进入 Overview，点击 Domains 下方的链接，如果环境配置正确，可以看到「Twikoo 云函数运行正常」的提示\n\n 8. Vercel Domains（包含 https:// 前缀，例如 https://xxx.vercel.app）即为您的环境 id\n\n\n# Vdoing 集成\n\n打开 docs/.vuepress/config.js（新版是 config.ts），在 head 里添加如下内容（在 <head> 引入在线 script）：\n\n['script', { src: 'https://cdn.jsdelivr.net/npm/twikoo@1.4.18/dist/twikoo.all.min.js' }],\n\n\n1\n\n\n1.4.18 是版本号，当时我使用的最新版是 1.4.18。\n\n在 docs/.vuepress/components 目录下创建 Vue 组件：Twikoo.vue。如果不存在 components 目录，则请创建。\n\n添加如下内容：\n\n<template>\n  <div id=\"tcomment\"></div>\n</template>\n<script>\nlet waitTime = 700; // 页面加载后多少毫秒后加载评论区（如果是 0ms，可能会报错）\nlet archives = \"/archives/\"; // 归档页的 permalink\nexport default {\n  data() {\n    return {\n      twikoo: \"\",\n      firstLoad: true,\n    };\n  },\n  mounted() {\n    // 不初始化评论区的页面：frontmatter 的 comment: false 的文章页、首页、归档页、404 页面\n    if (\n      (this.$frontmatter.comment == undefined || this.$frontmatter.comment) &&\n      this.$route.path != \"/\" &&\n      this.$route.path != archives &&\n      !this.isFourZeroFour(this.$route)\n    ) {\n      setTimeout(() => {\n        this.twikooInit();\n      }, waitTime);\n    }\n  },\n  watch: {\n    $route(to, from) {\n      // 404 页面、不同的标题会触发路由，禁止掉\n      if (\n        this.$route.path == \"/\" ||\n        this.$route.hash != \"\" ||\n        this.isFourZeroFour(to)\n      ) {\n        return;\n      }\n      // 进入首页、进入 frontmatter 的 comment: false 页面，删除评论区\n      if (to.path == \"/\" || this.getCommentByFrontmatter(to) == false) {\n        this.deleteComment();\n        return;\n      }\n      // 初始化评论条件：来自首页，来自归档页、来自 frontmatter 的 comment: true 的文章页\n      if (\n        from.path == \"/\" ||\n        from.path == archives ||\n        !this.getCommentByFrontmatter(from)\n      ) {\n        this.firstLoad\n          ? setTimeout(() => {\n              this.twikooInit();\n              this.firstLoad = false;\n            }, waitTime)\n          : this.twikooInit(); // 如果加载过一次评论区，则直接获取\n      } else if (this.$route.path != \"/\" && this.$route.hash == \"\") {\n        // 文章页之间跳转，重新获取评论\n        setTimeout(() => {\n          this.updateComment();\n        }, waitTime);\n      }\n    },\n  },\n  methods: {\n    twikooInit() {\n      twikoo\n        .init({\n          envId: \"https://twikoo-snowy-rho.vercel.app/\",\n          el: \"#tcomment\",\n          // region: 'ap-guangzhou', // 环境地域，默认为 ap-shanghai，如果您的环境地域不是上海，需传此参数\n          // path: 'window.location.pathname', // 用于区分不同文章的自定义 js 路径，如果您的文章路径不是 location.pathname，需传此参数\n          // lang: 'zh-CN', // 用于手动设定评论区语言，支持的语言列表 https://github.com/imaegoo/twikoo/blob/dev/src/js/utils/i18n/index.js\n          // onCommentLoaded: function () {\n          // console.log(\"评论加载或评论成功\");\n          // },\n        })\n        .then(() => {\n          this.loadTwikoo();\n        });\n    },\n    // 初始化加载或者跳转新页面重新加载 Twikoo 评论区\n    loadTwikoo() {\n      let page = document.getElementsByClassName(\"page\")[0];\n      let comment = document.getElementById(\"twikoo\");\n      // comment 不存在代表曾初始化过，后面被删除\n      comment ? (this.twikoo = comment) : (comment = this.twikoo);\n      page\n        ? comment\n          ? page.appendChild(comment)\n          : page.appendChild(this.twikoo)\n        : \"\";\n      this.updateComment();\n    },\n    // 跳转新页面，重新获取当前页面的评论信息\n    updateComment() {\n      let tk_icon = document.getElementsByClassName(\"tk-icon\")[0];\n      tk_icon ? tk_icon.click() : undefined;\n    },\n    // 删除 frontmatter:comment: false 页面的数据\n    deleteComment() {\n      let comment = document.getElementById(\"twikoo\");\n      comment ? comment.parentNode.removeChild(comment) : \"\";\n    },\n    // 获取 frontmatter 的 comment\n    getCommentByFrontmatter(route) {\n      let comment = true;\n      this.$site.pages.forEach((item) => {\n        if (item.path == route.path) {\n          comment = item.frontmatter.comment;\n        }\n      });\n      return comment;\n    },\n    // 判定当前页面是不是 404\n    isFourZeroFour(route) {\n      let flag = true;\n      this.$site.pages.forEach((item) => {\n        if (item.path == route.path) {\n          flag = false;\n        }\n      });\n      return flag;\n    },\n  },\n};\n<\/script>\n\n<style>\n.twikoo .tk-comments {\n  margin-top: 20px;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n\n\n写完 Vue 组件，接下来注册使用，在 config.js（新版是 config.ts）的 plugins 模块下，添加如下内容：\n\nmodule.exports = {\n    plugins: [\n        {\n            name: 'custom-plugins',\n            globalUIComponents: [\"Twikoo\"] // 2.x 版本 globalUIComponents 改名为 clientAppRootComponentFiles\n        }\n    ],\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nimport { UserPlugins } from 'vuepress/config'\nplugins: <UserPlugins>[\n    [\n    \t{\n        \tname: 'custom-plugins',\n        \tglobalUIComponents: [\"Twikoo\"] // 2.x 版本 globalUIComponents 改名为 clientAppRootComponentFiles\n    \t}\n    ]\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 管理面板\n\n下面来认识 Twikoo 的管理面板，配置好上面的内容，就可以启动项目，然后看看效果。在评论区的右边发现有一个「蓝色小齿轮」，这就是管理面板，第一次 点击小齿轮后会让你注册 登录密码，请记住它，如果忘记了密码，请去直接的 MongoDB 数据库修改。\n\n管理面板的用处：\n\n * 可以查看、删除、隐藏、显示、置顶任意的评论\n * 配置你的个人信息，登录管理面板后评论系统能识别你的身份（博主）\n * 配置反垃圾模块，防止别人发送不雅的评论\n * 配置邮件通知，别人的评论会通过邮件发送给你\n\n......\n\n到了这一步，就能实现 Gitalk 和 Valine 的评论功能，也就是别人评论 + 你回复，但是这并不是我们选择 Twikoo 的原因。\n\nTwikoo 吸引人的地方在于 反垃圾评论 和 邮件功能提醒，往下看。\n\n\n# 反垃圾配置\n\n这里使用 Akismet 反垃圾服务（免费）。\n\nAkismet (Automattic Kismet) 是应用广泛的一个垃圾留言过滤系统，其作者是大名鼎鼎的 WordPress 创始人 Matt Mullenweg，Akismet 也是 WordPress 默认安装的插件，其使用非常广泛，设计目标便是帮助博客网站来过滤垃圾留言。\n\n 1. 注册 akismet.com\n 2. 选择 Akismet Personal 订阅，复制得到的 Akismet API Key，到 Twikoo 管理面板「反垃圾」模块中配置\n\n反垃圾测试\n\n请填写 viagra-test-123 作为昵称，或填写 akismet-guaranteed-spam@example.com 作为邮箱，发表评论，这条评论将一定会被视为垃圾评论。\n\n需要注意的是，由于 Akismet 服务响应速度较慢（大约 6 秒），影响用户体验，Twikoo 采取 “先放行，后检测” 的策略，垃圾评论会在发表后短暂可见。\n\n垃圾评论不会被删除，只是把评论状态变成 审核中。\n\n审核中 的评论，代表只有发言人和博主能看到，其他人无法看到，原因：\n\n * 被 Akismet 认为是垃圾评论\n * 博主隐藏了发言人的评论，所以只能发言人和博主看到\n\n解决：\n\n * 让博主在管理面板 显示 自己的评论\n\n如何在新的客户端（浏览器）进行登录\n\n * 博主：在管理面板进行登录\n * 读者：输入曾发表评论时用到的昵称和邮箱\n\n\n# 邮件配置\n\n如果是 Vercel 部署的 Twikoo，请配置国外邮件服务商，避免被邮件服务商判定为垃圾邮件行为，也就是别人的评论不会通过国内的邮箱发送给你，因为 Vercel 位于国外。\n\n> PS：邮箱记得开启 POP3、IMAP/SMTP 服务，否则无法通过第三方如 Twikoo 进行登录。\n\n\n# 其他\n\n更多的配置请自行查看管理面板的文字提示，如果想要支持公式、图片之类的（默认支持的空间大小有限制），请看官网的教程。\n\n如果你觉得配置免费版的 Twikoo 很麻烦，那么可以考虑腾讯云开发环境配置（6.9元/月），因为腾讯云自带反垃圾（代替 Akismet）、部署（代替 Vercel）、支持国内邮箱的功能，所以只需要 MongoDB + 腾讯云即可。\n\n目前我没有使用过腾讯云开发环境，所以大家看官网的教程，自行研究。\n\n\n# 结束语\n\n如果你还有疑惑，可以去我的 GitHub 仓库或者 Gitee 仓库查看源码。\n\nGitHub：https://github.com/haungguan2001/haungguan2001.github.io\n\nGitee：https://gitee.com/haungguan2001/\n\n如果你有更好的方式，评论区留言告诉我，或者加入 Vdoing 主题的 QQ 群：694387113。谢谢！",normalizedContent:"笔记\n\n本站使用过 gitalk、valine、twikoo 三个评论系统，目前在使用 twikoo 评论系统。\n\n2021-10-29 @村长\n\n\n\n * 前言\n * gitalk 搭建\n   * 安装\n   * gitalk 使用\n   * 问题\n * valine 搭建\n * twikoo 搭建\n   * vercel 部署\n   * vdoing 集成\n   * 管理面板\n   * 反垃圾配置\n   * 邮件配置\n   * 其他\n * 结束语\n\n\n\n\n# 前言\n\n本站使用过 gitalk、valine、twikoo 三个评论系统，目前在使用 twikoo 评论系统。\n\n * gitalk 评论系统基于 github 的 issue\n * valine 评论系统基于 leancloud\n * twikoo 评论系统是我目前正在使用的评论系统，也是功能性非常强大的评论系统，我看重的第一点是读者评论后会通过邮箱发送给博主，博主回复后也会通过邮箱发送给读者；其次博主的评论是标识的\n\ngitalk、valine 通过使用 vuepress-plugin-comment 进行搭建。它既支持 gitalk 应用也支持 valine。\n\ntwikoo 的搭建比较麻烦，根据官网介绍，如果想搭建免费的评论系统，则需要注册 mongodb、vercel、akismet、国外邮箱四大账号（前提你都没有）。\n\n\n# gitalk 搭建\n\ngitalk 是一个基于 github issue 和 preact 开发的评论插件。所以你需要创建一个 github 库，利用该库的 issues 存储评论信息。\n\n如果你已经有一个 github 的仓库存储你的博客文件。那么可以直接使用该库的 issues 存储评论信息。毕竟分类就是把关联的东西放在一起，更好管理。\n\n建议先把自己的博客部署到 github actions 下，不然本地运行的话，评论区只能自己评论，自己看哦~~~ 😸部署传送门\n\n记得关闭其他评论系统的插件，下面让我们一起搭建评论区吧。\n\n\n# 安装\n\nyarn add vuepress-plugin-comment -d\n\n\n1\n\n\nnpm install vuepress-plugin-comment -d\n\n\n1\n\n\n\n# gitalk 使用\n\n插件需要 github application，即权限。如果没有，点击这里申请\n\n如图：\n\n\n\n参数说明\n * application name：你授权时对外的应用名字\n * homepage url：你应用的根url地址，类似于首页地址，不带任何参数\n * application description：应用的描述\n * authorization callback url：对你的应用进行了操作后的回调地址，因为评论区绑定了博客，评论后的信息存储在博客的issues里\n\n申请完成就会得 client id 和 client secret\n\n\n\n前往配置文件，填入你的两个参数和其他信息，如下：\n\nmodule.exports = {\n  plugins: [\n    [\n      'vuepress-plugin-comment',\n      {\n        choosen: 'gitalk', \n        options: {\n          clientid: 'c042********01c7',  // 你的client id\n          clientsecret: 'b77b38cf72**********45d0a0',  // 你的client secret\n           repo: 'notes-blog', // github 仓库\n            owner: 'kele-bingtang', // github仓库所有者\n            admin: ['kele-bingtang'], // 对仓库有写权限的人\n            // distractionfreemode: true,\n            pagerdirection: 'last', // 'first'正序 | 'last'倒序\n            // 下面的不用修改，默认这些即可\n            id: '<%- (frontmatter.permalink || frontmatter.to.path).slice(-16) %>', //  页面的唯一标识,长度不能超过50\n            title: '「评论」<%- frontmatter.title %>', // github issue 的标题\n            labels: ['gitalk', 'comment'], // github issue 的标签\n            body:\n              '页面：<%- window.location.origin + (frontmatter.to.path || window.location.pathname) %>', // github issue 的内容\n        }\n      }\n    ]\n  ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n配置好后，重启项目，然后打开某个文档，滑到最下方\n\n可以看到\n\n\n\n点击 使用 github 登录，然后会要求授权，确定后评论功能实现啦\n\n\n# 问题\n\n 1. 评论区出现 error: validation failed.\n\n分析：可能页面的链接过长，超过 50，请求 issues 失败。所以手动设置 id 取值，限制长度不超过 50\n\n 2. 切换页面后评论区内容还是上一个页面的评论\n\n分析：frontmatter.to.path 没有即时获取 path\n\n两个问题的解决：\n\n{\n choosen: 'gitalk', \n options: {\n   ...\n   id: \"<%- (window.location.origin + (frontmatter.to.path || window.location.pathname)).slice(-50) %>\", //  页面的唯一标识,长度不能超过50\n   title: \"「评论」<%- document.title %>\", // github issue 的标题\n   labels: [\"gitalk\", \"comment\"], // github issue 的标签\n   body:\"<%- document.title %>：<%- window.location.origin + (frontmatter.to.path || window.location.pathname) %>\" // github issue 的内容\n }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n笔记\n\n其实上方代码在前面的参数配置时，已经加上，这里只是演示问题\n\n 3. 点击使用 github 登录，跳转别的页面\n    \n    \n\n分析：申请 github application 时候，填错了authorization callback url地址，点击使用 github 登录其实就是跳转到authorization callback url的填写地址。\n\n解决:authorization callback url 地址填好自己的博客链接\n\n\n# valine 搭建\n\nvaline 诞生于 2017 年 8 月 7 日，是一款基于 leancloud 的快速、简洁且高效的无后端评论系统。官网：https://valine.js.org/。\n\nvaline 相比较 gitalk 的优势：\n\n * valine 是基于 leancloud 构建，gitalk 是基于 github 的 issue 构建\n * valine 使用简单，可以自定义名字、头像后发表评论，无需登录任何账户，gitalk 必须登录自己的 github 账号才能发表评论\n * valine 支持自定义 emoji，如 b 站，微博等的表情\n\n......\n\n我开始使用 valine 的时间（2022-01-04），目前使用 twikoo（2022-02-16）\n\n记得关闭其他评论系统的插件。\n\n> 注册或登录 leancloud\n\n请先注册一个 leancloud 的账号，然后创建应用，填写基本信息，然后进入应用，点击设置，点击应用凭证，如图：\n\n\n\n获取你的 appid 和 appkey，然后在使用 comment 评论插件：\n\nmodule.exports = {\n    plugins: [\n        [\n            'vuepress-plugin-comment',\n            {\n                // 具体参数请看官网：https://valine.js.org/\n                choosen: 'valine',\n                // options 选项中的所有参数，会传给 valine 的配置\n                options: {\n                    el: '#valine-vuepress-comment',\n                    appid: '你的 appid',\n                    appkey: '你的 appkey',\n                    placeholder: '请留下你的足迹 ~~',\n                    // 有 url、''、mp、identicon、monsterid、wavatar、retro、robohash、hide 头像选择，具体头像是什么样子，请访问 https://valine.js.org/avatar.html\n                    avatar: 'mp',\t// 默认头像\n                    pagesize: 10,   // 评论列表分页，每页条数\n                    visitor: true,    // 文章访问量统计\n                    recordip: false,   // 是否记录评论者 ip\n                    enableqq: true,   // 是否启用昵称框自动获取 qq 昵称和 qq 头像, 默认关闭\n                }\n            }\n        ]\n    ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n更多配置参数请访问 valine 官网。\n\n\n# twikoo 搭建\n\n官网地址：https://twikoo.js.org/。\n\n> 本搭建内容一部分来自官网。\n\n这里直接介绍使用 mongedb、vercel、akismet 进行评论系统搭建（官方提供的免费版），如果想要付费的则是 mongedb、腾讯云开发环境，付费搭建具体看官网。\n\n记得关闭其他评论系统的插件。\n\n\n# vercel 部署\n\n注意\n\nvercel 部署的环境需配合 1.4.0 以上版本的 twikoo.js 使用\n\n视频教程（推荐），注意：因为 mongodb 新版本原因，视频第三步的 clusters 位置发生改变，记得回来配合文字教程进行操作。\n\n> 文字教程\n\n 1. 申请 mongodb 账号，因为评论的数据都放在 mongodb 数据库里\n\n 2. 创建免费 mongodb 数据库和数据库用户，区域推荐选择 aws / n. virginia (us-east-1)\n\n 3. 点击左侧菜单的 databases 列表，找到 clusters 并点击右侧的 connect，按步骤设置允许所有 ip 地址的连接（为什么？），然后点击第二个 connect your application 并记录数据库连接字符串，请将连接字符串中的 <password> 修改为 数据库密码，其他不变（如 myfirstdatabase）\n\n 4. 申请 vercel 账号\n\n 5. 点击以下按钮将 twikoo 一键部署到 vercel（确保登录了 vercel，且网页未关闭）\n\n\n\n 6. 进入 settings - environment variables，添加环境变量 mongodb_uri，值为第 3 步的数据库连接字符串\n\n 7. 进入 overview，点击 domains 下方的链接，如果环境配置正确，可以看到「twikoo 云函数运行正常」的提示\n\n 8. vercel domains（包含 https:// 前缀，例如 https://xxx.vercel.app）即为您的环境 id\n\n\n# vdoing 集成\n\n打开 docs/.vuepress/config.js（新版是 config.ts），在 head 里添加如下内容（在 <head> 引入在线 script）：\n\n['script', { src: 'https://cdn.jsdelivr.net/npm/twikoo@1.4.18/dist/twikoo.all.min.js' }],\n\n\n1\n\n\n1.4.18 是版本号，当时我使用的最新版是 1.4.18。\n\n在 docs/.vuepress/components 目录下创建 vue 组件：twikoo.vue。如果不存在 components 目录，则请创建。\n\n添加如下内容：\n\n<template>\n  <div id=\"tcomment\"></div>\n</template>\n<script>\nlet waittime = 700; // 页面加载后多少毫秒后加载评论区（如果是 0ms，可能会报错）\nlet archives = \"/archives/\"; // 归档页的 permalink\nexport default {\n  data() {\n    return {\n      twikoo: \"\",\n      firstload: true,\n    };\n  },\n  mounted() {\n    // 不初始化评论区的页面：frontmatter 的 comment: false 的文章页、首页、归档页、404 页面\n    if (\n      (this.$frontmatter.comment == undefined || this.$frontmatter.comment) &&\n      this.$route.path != \"/\" &&\n      this.$route.path != archives &&\n      !this.isfourzerofour(this.$route)\n    ) {\n      settimeout(() => {\n        this.twikooinit();\n      }, waittime);\n    }\n  },\n  watch: {\n    $route(to, from) {\n      // 404 页面、不同的标题会触发路由，禁止掉\n      if (\n        this.$route.path == \"/\" ||\n        this.$route.hash != \"\" ||\n        this.isfourzerofour(to)\n      ) {\n        return;\n      }\n      // 进入首页、进入 frontmatter 的 comment: false 页面，删除评论区\n      if (to.path == \"/\" || this.getcommentbyfrontmatter(to) == false) {\n        this.deletecomment();\n        return;\n      }\n      // 初始化评论条件：来自首页，来自归档页、来自 frontmatter 的 comment: true 的文章页\n      if (\n        from.path == \"/\" ||\n        from.path == archives ||\n        !this.getcommentbyfrontmatter(from)\n      ) {\n        this.firstload\n          ? settimeout(() => {\n              this.twikooinit();\n              this.firstload = false;\n            }, waittime)\n          : this.twikooinit(); // 如果加载过一次评论区，则直接获取\n      } else if (this.$route.path != \"/\" && this.$route.hash == \"\") {\n        // 文章页之间跳转，重新获取评论\n        settimeout(() => {\n          this.updatecomment();\n        }, waittime);\n      }\n    },\n  },\n  methods: {\n    twikooinit() {\n      twikoo\n        .init({\n          envid: \"https://twikoo-snowy-rho.vercel.app/\",\n          el: \"#tcomment\",\n          // region: 'ap-guangzhou', // 环境地域，默认为 ap-shanghai，如果您的环境地域不是上海，需传此参数\n          // path: 'window.location.pathname', // 用于区分不同文章的自定义 js 路径，如果您的文章路径不是 location.pathname，需传此参数\n          // lang: 'zh-cn', // 用于手动设定评论区语言，支持的语言列表 https://github.com/imaegoo/twikoo/blob/dev/src/js/utils/i18n/index.js\n          // oncommentloaded: function () {\n          // console.log(\"评论加载或评论成功\");\n          // },\n        })\n        .then(() => {\n          this.loadtwikoo();\n        });\n    },\n    // 初始化加载或者跳转新页面重新加载 twikoo 评论区\n    loadtwikoo() {\n      let page = document.getelementsbyclassname(\"page\")[0];\n      let comment = document.getelementbyid(\"twikoo\");\n      // comment 不存在代表曾初始化过，后面被删除\n      comment ? (this.twikoo = comment) : (comment = this.twikoo);\n      page\n        ? comment\n          ? page.appendchild(comment)\n          : page.appendchild(this.twikoo)\n        : \"\";\n      this.updatecomment();\n    },\n    // 跳转新页面，重新获取当前页面的评论信息\n    updatecomment() {\n      let tk_icon = document.getelementsbyclassname(\"tk-icon\")[0];\n      tk_icon ? tk_icon.click() : undefined;\n    },\n    // 删除 frontmatter:comment: false 页面的数据\n    deletecomment() {\n      let comment = document.getelementbyid(\"twikoo\");\n      comment ? comment.parentnode.removechild(comment) : \"\";\n    },\n    // 获取 frontmatter 的 comment\n    getcommentbyfrontmatter(route) {\n      let comment = true;\n      this.$site.pages.foreach((item) => {\n        if (item.path == route.path) {\n          comment = item.frontmatter.comment;\n        }\n      });\n      return comment;\n    },\n    // 判定当前页面是不是 404\n    isfourzerofour(route) {\n      let flag = true;\n      this.$site.pages.foreach((item) => {\n        if (item.path == route.path) {\n          flag = false;\n        }\n      });\n      return flag;\n    },\n  },\n};\n<\/script>\n\n<style>\n.twikoo .tk-comments {\n  margin-top: 20px;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n\n\n写完 vue 组件，接下来注册使用，在 config.js（新版是 config.ts）的 plugins 模块下，添加如下内容：\n\nmodule.exports = {\n    plugins: [\n        {\n            name: 'custom-plugins',\n            globaluicomponents: [\"twikoo\"] // 2.x 版本 globaluicomponents 改名为 clientapprootcomponentfiles\n        }\n    ],\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nimport { userplugins } from 'vuepress/config'\nplugins: <userplugins>[\n    [\n    \t{\n        \tname: 'custom-plugins',\n        \tglobaluicomponents: [\"twikoo\"] // 2.x 版本 globaluicomponents 改名为 clientapprootcomponentfiles\n    \t}\n    ]\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 管理面板\n\n下面来认识 twikoo 的管理面板，配置好上面的内容，就可以启动项目，然后看看效果。在评论区的右边发现有一个「蓝色小齿轮」，这就是管理面板，第一次 点击小齿轮后会让你注册 登录密码，请记住它，如果忘记了密码，请去直接的 mongodb 数据库修改。\n\n管理面板的用处：\n\n * 可以查看、删除、隐藏、显示、置顶任意的评论\n * 配置你的个人信息，登录管理面板后评论系统能识别你的身份（博主）\n * 配置反垃圾模块，防止别人发送不雅的评论\n * 配置邮件通知，别人的评论会通过邮件发送给你\n\n......\n\n到了这一步，就能实现 gitalk 和 valine 的评论功能，也就是别人评论 + 你回复，但是这并不是我们选择 twikoo 的原因。\n\ntwikoo 吸引人的地方在于 反垃圾评论 和 邮件功能提醒，往下看。\n\n\n# 反垃圾配置\n\n这里使用 akismet 反垃圾服务（免费）。\n\nakismet (automattic kismet) 是应用广泛的一个垃圾留言过滤系统，其作者是大名鼎鼎的 wordpress 创始人 matt mullenweg，akismet 也是 wordpress 默认安装的插件，其使用非常广泛，设计目标便是帮助博客网站来过滤垃圾留言。\n\n 1. 注册 akismet.com\n 2. 选择 akismet personal 订阅，复制得到的 akismet api key，到 twikoo 管理面板「反垃圾」模块中配置\n\n反垃圾测试\n\n请填写 viagra-test-123 作为昵称，或填写 akismet-guaranteed-spam@example.com 作为邮箱，发表评论，这条评论将一定会被视为垃圾评论。\n\n需要注意的是，由于 akismet 服务响应速度较慢（大约 6 秒），影响用户体验，twikoo 采取 “先放行，后检测” 的策略，垃圾评论会在发表后短暂可见。\n\n垃圾评论不会被删除，只是把评论状态变成 审核中。\n\n审核中 的评论，代表只有发言人和博主能看到，其他人无法看到，原因：\n\n * 被 akismet 认为是垃圾评论\n * 博主隐藏了发言人的评论，所以只能发言人和博主看到\n\n解决：\n\n * 让博主在管理面板 显示 自己的评论\n\n如何在新的客户端（浏览器）进行登录\n\n * 博主：在管理面板进行登录\n * 读者：输入曾发表评论时用到的昵称和邮箱\n\n\n# 邮件配置\n\n如果是 vercel 部署的 twikoo，请配置国外邮件服务商，避免被邮件服务商判定为垃圾邮件行为，也就是别人的评论不会通过国内的邮箱发送给你，因为 vercel 位于国外。\n\n> ps：邮箱记得开启 pop3、imap/smtp 服务，否则无法通过第三方如 twikoo 进行登录。\n\n\n# 其他\n\n更多的配置请自行查看管理面板的文字提示，如果想要支持公式、图片之类的（默认支持的空间大小有限制），请看官网的教程。\n\n如果你觉得配置免费版的 twikoo 很麻烦，那么可以考虑腾讯云开发环境配置（6.9元/月），因为腾讯云自带反垃圾（代替 akismet）、部署（代替 vercel）、支持国内邮箱的功能，所以只需要 mongodb + 腾讯云即可。\n\n目前我没有使用过腾讯云开发环境，所以大家看官网的教程，自行研究。\n\n\n# 结束语\n\n如果你还有疑惑，可以去我的 github 仓库或者 gitee 仓库查看源码。\n\ngithub：https://github.com/haungguan2001/haungguan2001.github.io\n\ngitee：https://gitee.com/haungguan2001/\n\n如果你有更好的方式，评论区留言告诉我，或者加入 vdoing 主题的 qq 群：694387113。谢谢！",charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"本站 - 自定义样式",frontmatter:{title:"本站 - 自定义样式",date:"2022-01-01T20:15:16.000Z",permalink:"/about/website/style/",titleTag:"原创",categories:["关于 - 本站"],tags:["本站"],readingShow:"top"},regularPath:"/80.%E5%85%B3%E4%BA%8E/06.%E5%85%B3%E4%BA%8E%20-%20%E6%9C%AC%E7%AB%99/18.%E6%9C%AC%E7%AB%99%20-%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%B7%E5%BC%8F.html",relativePath:"80.关于/06.关于 - 本站/18.本站 - 自定义样式.md",key:"v-6b5d097e",path:"/about/website/style/",headers:[{level:2,title:"前言",slug:"前言",normalizedTitle:"前言",charIndex:46},{level:2,title:"样式代码",slug:"样式代码",normalizedTitle:"样式代码",charIndex:12},{level:2,title:"插件样式",slug:"插件样式",normalizedTitle:"插件样式",charIndex:60}],headersStr:"前言 样式代码 插件样式",content:'笔记\n\n本内容记录本站的样式代码，不定期更新。\n\n2022-01-01 @村长\n\n\n\n * 前言\n * 样式代码\n * 插件样式\n\n\n\n\n# 前言\n\n如果你细心观察，你就会发现本站的一些样式和主题自带的样式有所区别。 如果你喜欢加粗的 绿色、`` 包裹的 英文高亮 abcd、<mark></mark> 包裹的 文字高亮、深色模式的各种颜色（点击右下角的衣服图标，切换深色模式）等等，那么可以参考下面的文章。\n\n\n\n在浅色主题，也就是默认主题下，我修改了一些内容：\n\n * 代码块背景色\n * 代码块行数颜色\n * 代码高亮背景色\n * 代码高亮颜色\n * 加粗颜色\n\n......\n\n在深色主题下，我修改了一些内容：\n\n * 代码块背景色\n * 代码块行数颜色\n * 代码高亮背景色\n * 代码高亮颜色\n * 加粗颜色\n * 页面背景色\n * 导航栏颜色\n * 侧边栏颜色\n * 表格背景色\n * 表格偶数行颜色\n\n......\n\n如果你喜欢我的一些样式，可以参考下面的代码。\n\n\n# 样式代码\n\n打开 docs 目录下的 .vuepress 目录下的 style 目录下的 palette.styl 文件，添加如下内容：\n\n//***vdoing主题-样式变量***//\n\n// 以下注释的变量仅供参考，主题使用的最新变量请查看：https://github.com/xugaoyi/vuepress-theme-vdoing/blob/master/theme-vdoing/styles/palette.styl\n// 你可以在这个文件内修改这些变量的值\n\n// 主题调色板\n\n// 原主题预设变量\n// 颜色\n// $accentColor = #3eaf7c\n// $textColor = #2c3e50\n// $borderColor = #eaecef\n// $codeBgColor = #282c34\n// $arrowBgColor = #ccc\n// $badgeTipColor = #42b983\n// $badgeWarningColor = darken(#ffe564, 35%)\n// $badgeErrorColor = #DA5961\n// 布局\n// $navbarHeight = 3.6rem\n// $sidebarWidth = 20rem\n// $contentWidth = 740px\n// $homePageWidth = 960px\n// 代码块\n// $lineNumbersWrapperWidth = 3.5rem\n\n\n//***vdoing主题-变量***//\n\n// 颜色\n\n$bannerTextColor = #fff // 首页 banner 区(博客标题)文本颜色\n$accentColor = #11A8CD\n$activeColor = #ff5722\n$arrowBgColor = #ccc\n$badgeTipColor = #42b983\n$badgeWarningColor = darken(#ffe564, 35%)\n$badgeErrorColor = #DA5961\n\n// 布局\n$navbarHeight = 3.6rem\n$sidebarWidth = 18rem\n$contentWidth = 860px\n$homePageWidth = 1100px\n$rightMenuWidth = 230px // 右侧菜单\n\n// 代码块\n$lineNumbersWrapperWidth = 2.5rem\n\n// 村长\n// 代码块的行数字颜色\ndiv[class*="language-"]\n  &.line-numbers-mode\n    .line-numbers-wrapper\n      color #9e9e9e\n\n// 加粗字体颜色\nstrong\n  // color \n  color #00A55A\n\n.suggestions\n  max-height 800 px\n  overflow-y scroll\n.suggestions .highlight\n  color #64acff\n  font-weight bold\n\n.footer {\n  color: #fff;\n}\n// 解决目录页和标题冲突问题，新版已经解决，这里是旧版的j（2022-4-16）\n// .theme-vdoing-content:not(.custom) > h1,\n// .theme-vdoing-content:not(.custom) > h2,\n// .theme-vdoing-content:not(.custom) > h3,\n// .theme-vdoing-content:not(.custom) > h4,\n// .theme-vdoing-content:not(.custom) > h5,\n// .theme-vdoing-content:not(.custom) > h6 {\n//  margin-top: -1.1rem;\n//  padding-top: 2.6rem;\n// }\n\n.theme-mode-light\n  --bodyBg: #f4f4f4\n  --mainBg: rgba(255,255,255,1)\n  --sidebarBg: rgba(255,255,255,.8)\n  --blurBg: rgba(255,255,255,.9)\n  --customBlockBg: #fff\n  --textColor: #00323c\n  --textLightenColor: #d63200     // `` 高亮，原来是 #0085AD\n  --borderColor: rgba(0,0,0,.15)\n  // 代码块浅色主题\n  //--codeBg: #f6f8fa\n  //--codeColor: #24292e\n  //codeThemeLight()\n  // 行高亮颜色，和代码块浅色主题一起使用，一起注释\n  //div[class*="language-"]\n  //  .highlight-lines\n  //    .highlighted\n  //      background-color rgba(200,200,200,.4)\n  //  &.line-numbers-mode\n  //    .highlight-lines .highlighted\n  //      &:before\n  //        background-color rgba(200,200,200,.4)\n  // 代码块深色主题\n  --codeBg: #282C34\n  --codeColor: #D4D4D4\n  codeThemeDark()\n  // 行高亮颜色，和代码块深色主题一起使用，一起注释\n  div[class*="language-"]\n    .highlight-lines\n      .highlighted\n        background-color rgba(0,0,0,.66)\n    &.line-numbers-mode\n      .highlight-lines .highlighted\n        &:before\n          background-color rgba(0,0,0,.66)\n  div[class*="language-"].line-numbers-mode::after  // 代码块的行数和内容分割线颜色\n    border-right 1px solid rgba(0, 0, 0, 0.66)\n   // 下面代码块深色和浅色通用\n   // `` 包裹的背景色\n  .theme-vdoing-content\n    code\n      background-color #fff5f5\n      //background-color transparent\n  // 引用的颜色\n  blockquote\n    background-color #fdefee\n    border-left .25rem solid #e95f59\n    padding 10px 16px\n    opacity .9\n  // 选中代码块的颜色\n  pre[class*="language-"]::selection, pre[class*="language-"] ::selection,\n  code[class*="language-"]::selection, code[class*="language-"] ::selection {\n    text-shadow none\n    background-color #0A62C9\n  }\n  // mark 标签配置\n  mark\n    color #d63200\n    border .1em solid #d63200\n    background-color transparent\n    padding .1rem .5rem\n    border-radius 2rem\n    margin 0 .2rem\n    font-size .95rem\n  // ::: details 的边框\n  .custom-block.details\n    border solid 1px #ddd\n\n// 深色模式\n.theme-mode-dark\n  --bodyBg: rgba(40,40,56,1)\n  --mainBg: rgba(40,40,56,1)\n  --sidebarBg: rgba(40,40,56,.8)\n  --blurBg: rgba(40,40,56,.9)\n  --customBlockBg: rgba(25,25,49,0.53)\n  --textColor: #acb7c4\n  --textLightenColor: #b160ea   // `` 包裹的文字颜色\n  --borderColor: #1d1d26\n  --codeBg: #1d1d26\n  --codeColor: #A9B7C6\n  codeThemeDark()\n  div[class*="language-"].line-numbers-mode::after  // 代码块的行数和内容分割线颜色\n    border-right 1px solid rgba(0, 0, 0, 0.66)\n  // `` 包裹的背景色\n  .theme-vdoing-content\n    code\n      background-color transparent\n  // 引用的颜色\n  blockquote\n    background-color rgba(25, 25, 49, 0.53)\n    border-left .25rem solid #904ac2\n    padding 10px 16px\n  // 首页每一个模块的边框\n  .card-box\n    border-radius: 5px;\n    background var(--mainBg);\n    box-shadow 0 2px 10px 0 rgba(0,0,0,.20);\n    transition box-shadow 0.5s;\n  .card-box:hover\n    box-shadow 2px 2px 15px 2px rgba(0,0,0,.40);\n  // mark 标签配置\n  mark\n    color #b160ea\n    border .1em solid #b160ea\n    background-color transparent\n    padding .1rem .5rem\n    border-radius 2rem\n    margin 0 .2rem\n    font-size .95rem\n  // 表格的样式\n  table\n    border-color #1d1d26\n    thead\n      background-color #2c2c47\n      font-size 1.02rem\n  tr:nth-child(2n)\n    background-color #2c2c47\n  // 信息框容器颜色\n  .custom-block.tip,\n  .custom-block.warning,\n  .custom-block.danger,\n  .custom-block.note\n    background-color rgba(25,25,49,0.53)\n  .custom-block.danger\n    color #ff4545\n    .custom-block-title\n      color #ff4545\n  .custom-block.note\n    color #28a1de\n  // 鼠标悬停、a 标签颜色，主题默认颜色 #11a8cd\n  .nav-item > a:not(.external):hover,\n  .nav-item > a:not(.external).router-link-active,\n  .nav-item .dropdown-title a:hover,    // 导航栏悬停\n  .nav-item .dropdown-title a.router-link-active,\n  .dropdown-wrapper .dropdown-title .title:hover    // 导航栏非 a 标签\n    border-bottom 2px solid #b160ea\n\n  a.sidebar-link.active     // 侧边栏当前标题\n    color #b160ea\n    border-left-color #b160ea\n\n  .post-list .post .title-wrapper a:hover,   // 首页文章列表悬停\n  .blogger-wrapper .icons a:hover,     // 首页头像下的图标悬停\n  .categories-wrapper .categories a:not(.active):hover,   // 文章分类悬停\n  .pagination span:hover,       // 首页的上一页和下一页悬停\n  a.sidebar-link:hover,   // 侧边栏悬停\n  .right-menu-wrapper .right-menu-content .right-menu-item.active a,  // 文章右侧当前标题\n  .right-menu-wrapper .right-menu-content .right-menu-item a:hover,   // 文章右侧标题悬停\n  .dropdown-wrapper .nav-dropdown .dropdown-item a:hover,   // 导航栏的二级导航悬停\n  .dropdown-wrapper .nav-dropdown .dropdown-item a.router-link-active,   // 导航栏的选中二级导航\n  .buttons .button .select-box li.active,    // 当前主题模式\n  .buttons .button .select-box li:hover,      // 三个主题模式悬停 \n  .archives-page .theme-vdoing-wrapper li a:hover,   // 归档列表悬停\n  .search-box .suggestions .focused a:hover,   // 搜索框内容鼠标悬停\n  .custom-block.details summary:hover     // ::: details 的标题悬停\n    color #b160ea\n\n  .categories-wrapper .categories a:not(.active):hover,   // 文章分类悬停\n  .right-menu-wrapper .right-menu-content .right-menu-item.active,\n  .search-box input:focus   // 搜索框获取焦点\n    border-color #b160ea\n\n  .buttons .button:hover      // 右下角三个图标\n    background #904ac2\n    box-shadow 0 0 15px #904ac2\n  .pagination .pagination-list span.active,     // 分页的当前页\n  .search-box .suggestions .parent-page-title   // 搜索框的标题\n    background #904ac2\n\n  // vuepress-plugin-tabs 插件的背景色\n  .tabs-component-tab,\n  .tabs-component-panels\n    background-color rgba(25,25,49,0.53)\n    border none\n  // vuepress-plugin-tabs 插件的标题选中颜色\n  .tabs-component-tab.is-active       \n    color #b160ea\n\n// 阅读模式\n.theme-mode-read\n  --bodyBg: rgb(236,236,204)\n  --mainBg: rgba(245,245,213,1)\n  --sidebarBg: rgba(245,245,213,.8)\n  --blurBg: rgba(245,245,213,.9)\n  --customBlockBg: rgb(236,236,204)\n  --textColor: #704214\n  --textLightenColor: #996633\n  --borderColor: rgba(0,0,0,.15)\n  --codeBg: #282c34\n  --codeColor: #fff\n  codeThemeDark()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n\n\n\n# 插件样式\n\n目前本站使用了 vuepress-plugin-reading-progress 插件，该插件能显示一个页面的进度条（位于顶部的紫色进度条），下面是我用的样式：\n\n// 顶部进度条插件\n $readingBgColor = transparent\n $readingZIndex = 1000\n $readingSize = 3px\n $readingProgressColor = #b160ea\n $readingProgressImage = none\n\n\n1\n2\n3\n4\n5\n6\n\n\n安装这个插件的命令：\n\nyarn add vuepress-plugin-reading-progress\n\n\n1\n\n\n然后在 config.js 的 plugins 中，添加如下内容：\n\nmodule.exports =[\n    [\n        \'reading-progress\'\n    ]\n],\n\n\n1\n2\n3\n4\n5\n\n\n启动后就会生效',normalizedContent:'笔记\n\n本内容记录本站的样式代码，不定期更新。\n\n2022-01-01 @村长\n\n\n\n * 前言\n * 样式代码\n * 插件样式\n\n\n\n\n# 前言\n\n如果你细心观察，你就会发现本站的一些样式和主题自带的样式有所区别。 如果你喜欢加粗的 绿色、`` 包裹的 英文高亮 abcd、<mark></mark> 包裹的 文字高亮、深色模式的各种颜色（点击右下角的衣服图标，切换深色模式）等等，那么可以参考下面的文章。\n\n\n\n在浅色主题，也就是默认主题下，我修改了一些内容：\n\n * 代码块背景色\n * 代码块行数颜色\n * 代码高亮背景色\n * 代码高亮颜色\n * 加粗颜色\n\n......\n\n在深色主题下，我修改了一些内容：\n\n * 代码块背景色\n * 代码块行数颜色\n * 代码高亮背景色\n * 代码高亮颜色\n * 加粗颜色\n * 页面背景色\n * 导航栏颜色\n * 侧边栏颜色\n * 表格背景色\n * 表格偶数行颜色\n\n......\n\n如果你喜欢我的一些样式，可以参考下面的代码。\n\n\n# 样式代码\n\n打开 docs 目录下的 .vuepress 目录下的 style 目录下的 palette.styl 文件，添加如下内容：\n\n//***vdoing主题-样式变量***//\n\n// 以下注释的变量仅供参考，主题使用的最新变量请查看：https://github.com/xugaoyi/vuepress-theme-vdoing/blob/master/theme-vdoing/styles/palette.styl\n// 你可以在这个文件内修改这些变量的值\n\n// 主题调色板\n\n// 原主题预设变量\n// 颜色\n// $accentcolor = #3eaf7c\n// $textcolor = #2c3e50\n// $bordercolor = #eaecef\n// $codebgcolor = #282c34\n// $arrowbgcolor = #ccc\n// $badgetipcolor = #42b983\n// $badgewarningcolor = darken(#ffe564, 35%)\n// $badgeerrorcolor = #da5961\n// 布局\n// $navbarheight = 3.6rem\n// $sidebarwidth = 20rem\n// $contentwidth = 740px\n// $homepagewidth = 960px\n// 代码块\n// $linenumberswrapperwidth = 3.5rem\n\n\n//***vdoing主题-变量***//\n\n// 颜色\n\n$bannertextcolor = #fff // 首页 banner 区(博客标题)文本颜色\n$accentcolor = #11a8cd\n$activecolor = #ff5722\n$arrowbgcolor = #ccc\n$badgetipcolor = #42b983\n$badgewarningcolor = darken(#ffe564, 35%)\n$badgeerrorcolor = #da5961\n\n// 布局\n$navbarheight = 3.6rem\n$sidebarwidth = 18rem\n$contentwidth = 860px\n$homepagewidth = 1100px\n$rightmenuwidth = 230px // 右侧菜单\n\n// 代码块\n$linenumberswrapperwidth = 2.5rem\n\n// 村长\n// 代码块的行数字颜色\ndiv[class*="language-"]\n  &.line-numbers-mode\n    .line-numbers-wrapper\n      color #9e9e9e\n\n// 加粗字体颜色\nstrong\n  // color \n  color #00a55a\n\n.suggestions\n  max-height 800 px\n  overflow-y scroll\n.suggestions .highlight\n  color #64acff\n  font-weight bold\n\n.footer {\n  color: #fff;\n}\n// 解决目录页和标题冲突问题，新版已经解决，这里是旧版的j（2022-4-16）\n// .theme-vdoing-content:not(.custom) > h1,\n// .theme-vdoing-content:not(.custom) > h2,\n// .theme-vdoing-content:not(.custom) > h3,\n// .theme-vdoing-content:not(.custom) > h4,\n// .theme-vdoing-content:not(.custom) > h5,\n// .theme-vdoing-content:not(.custom) > h6 {\n//  margin-top: -1.1rem;\n//  padding-top: 2.6rem;\n// }\n\n.theme-mode-light\n  --bodybg: #f4f4f4\n  --mainbg: rgba(255,255,255,1)\n  --sidebarbg: rgba(255,255,255,.8)\n  --blurbg: rgba(255,255,255,.9)\n  --customblockbg: #fff\n  --textcolor: #00323c\n  --textlightencolor: #d63200     // `` 高亮，原来是 #0085ad\n  --bordercolor: rgba(0,0,0,.15)\n  // 代码块浅色主题\n  //--codebg: #f6f8fa\n  //--codecolor: #24292e\n  //codethemelight()\n  // 行高亮颜色，和代码块浅色主题一起使用，一起注释\n  //div[class*="language-"]\n  //  .highlight-lines\n  //    .highlighted\n  //      background-color rgba(200,200,200,.4)\n  //  &.line-numbers-mode\n  //    .highlight-lines .highlighted\n  //      &:before\n  //        background-color rgba(200,200,200,.4)\n  // 代码块深色主题\n  --codebg: #282c34\n  --codecolor: #d4d4d4\n  codethemedark()\n  // 行高亮颜色，和代码块深色主题一起使用，一起注释\n  div[class*="language-"]\n    .highlight-lines\n      .highlighted\n        background-color rgba(0,0,0,.66)\n    &.line-numbers-mode\n      .highlight-lines .highlighted\n        &:before\n          background-color rgba(0,0,0,.66)\n  div[class*="language-"].line-numbers-mode::after  // 代码块的行数和内容分割线颜色\n    border-right 1px solid rgba(0, 0, 0, 0.66)\n   // 下面代码块深色和浅色通用\n   // `` 包裹的背景色\n  .theme-vdoing-content\n    code\n      background-color #fff5f5\n      //background-color transparent\n  // 引用的颜色\n  blockquote\n    background-color #fdefee\n    border-left .25rem solid #e95f59\n    padding 10px 16px\n    opacity .9\n  // 选中代码块的颜色\n  pre[class*="language-"]::selection, pre[class*="language-"] ::selection,\n  code[class*="language-"]::selection, code[class*="language-"] ::selection {\n    text-shadow none\n    background-color #0a62c9\n  }\n  // mark 标签配置\n  mark\n    color #d63200\n    border .1em solid #d63200\n    background-color transparent\n    padding .1rem .5rem\n    border-radius 2rem\n    margin 0 .2rem\n    font-size .95rem\n  // ::: details 的边框\n  .custom-block.details\n    border solid 1px #ddd\n\n// 深色模式\n.theme-mode-dark\n  --bodybg: rgba(40,40,56,1)\n  --mainbg: rgba(40,40,56,1)\n  --sidebarbg: rgba(40,40,56,.8)\n  --blurbg: rgba(40,40,56,.9)\n  --customblockbg: rgba(25,25,49,0.53)\n  --textcolor: #acb7c4\n  --textlightencolor: #b160ea   // `` 包裹的文字颜色\n  --bordercolor: #1d1d26\n  --codebg: #1d1d26\n  --codecolor: #a9b7c6\n  codethemedark()\n  div[class*="language-"].line-numbers-mode::after  // 代码块的行数和内容分割线颜色\n    border-right 1px solid rgba(0, 0, 0, 0.66)\n  // `` 包裹的背景色\n  .theme-vdoing-content\n    code\n      background-color transparent\n  // 引用的颜色\n  blockquote\n    background-color rgba(25, 25, 49, 0.53)\n    border-left .25rem solid #904ac2\n    padding 10px 16px\n  // 首页每一个模块的边框\n  .card-box\n    border-radius: 5px;\n    background var(--mainbg);\n    box-shadow 0 2px 10px 0 rgba(0,0,0,.20);\n    transition box-shadow 0.5s;\n  .card-box:hover\n    box-shadow 2px 2px 15px 2px rgba(0,0,0,.40);\n  // mark 标签配置\n  mark\n    color #b160ea\n    border .1em solid #b160ea\n    background-color transparent\n    padding .1rem .5rem\n    border-radius 2rem\n    margin 0 .2rem\n    font-size .95rem\n  // 表格的样式\n  table\n    border-color #1d1d26\n    thead\n      background-color #2c2c47\n      font-size 1.02rem\n  tr:nth-child(2n)\n    background-color #2c2c47\n  // 信息框容器颜色\n  .custom-block.tip,\n  .custom-block.warning,\n  .custom-block.danger,\n  .custom-block.note\n    background-color rgba(25,25,49,0.53)\n  .custom-block.danger\n    color #ff4545\n    .custom-block-title\n      color #ff4545\n  .custom-block.note\n    color #28a1de\n  // 鼠标悬停、a 标签颜色，主题默认颜色 #11a8cd\n  .nav-item > a:not(.external):hover,\n  .nav-item > a:not(.external).router-link-active,\n  .nav-item .dropdown-title a:hover,    // 导航栏悬停\n  .nav-item .dropdown-title a.router-link-active,\n  .dropdown-wrapper .dropdown-title .title:hover    // 导航栏非 a 标签\n    border-bottom 2px solid #b160ea\n\n  a.sidebar-link.active     // 侧边栏当前标题\n    color #b160ea\n    border-left-color #b160ea\n\n  .post-list .post .title-wrapper a:hover,   // 首页文章列表悬停\n  .blogger-wrapper .icons a:hover,     // 首页头像下的图标悬停\n  .categories-wrapper .categories a:not(.active):hover,   // 文章分类悬停\n  .pagination span:hover,       // 首页的上一页和下一页悬停\n  a.sidebar-link:hover,   // 侧边栏悬停\n  .right-menu-wrapper .right-menu-content .right-menu-item.active a,  // 文章右侧当前标题\n  .right-menu-wrapper .right-menu-content .right-menu-item a:hover,   // 文章右侧标题悬停\n  .dropdown-wrapper .nav-dropdown .dropdown-item a:hover,   // 导航栏的二级导航悬停\n  .dropdown-wrapper .nav-dropdown .dropdown-item a.router-link-active,   // 导航栏的选中二级导航\n  .buttons .button .select-box li.active,    // 当前主题模式\n  .buttons .button .select-box li:hover,      // 三个主题模式悬停 \n  .archives-page .theme-vdoing-wrapper li a:hover,   // 归档列表悬停\n  .search-box .suggestions .focused a:hover,   // 搜索框内容鼠标悬停\n  .custom-block.details summary:hover     // ::: details 的标题悬停\n    color #b160ea\n\n  .categories-wrapper .categories a:not(.active):hover,   // 文章分类悬停\n  .right-menu-wrapper .right-menu-content .right-menu-item.active,\n  .search-box input:focus   // 搜索框获取焦点\n    border-color #b160ea\n\n  .buttons .button:hover      // 右下角三个图标\n    background #904ac2\n    box-shadow 0 0 15px #904ac2\n  .pagination .pagination-list span.active,     // 分页的当前页\n  .search-box .suggestions .parent-page-title   // 搜索框的标题\n    background #904ac2\n\n  // vuepress-plugin-tabs 插件的背景色\n  .tabs-component-tab,\n  .tabs-component-panels\n    background-color rgba(25,25,49,0.53)\n    border none\n  // vuepress-plugin-tabs 插件的标题选中颜色\n  .tabs-component-tab.is-active       \n    color #b160ea\n\n// 阅读模式\n.theme-mode-read\n  --bodybg: rgb(236,236,204)\n  --mainbg: rgba(245,245,213,1)\n  --sidebarbg: rgba(245,245,213,.8)\n  --blurbg: rgba(245,245,213,.9)\n  --customblockbg: rgb(236,236,204)\n  --textcolor: #704214\n  --textlightencolor: #996633\n  --bordercolor: rgba(0,0,0,.15)\n  --codebg: #282c34\n  --codecolor: #fff\n  codethemedark()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n\n\n\n# 插件样式\n\n目前本站使用了 vuepress-plugin-reading-progress 插件，该插件能显示一个页面的进度条（位于顶部的紫色进度条），下面是我用的样式：\n\n// 顶部进度条插件\n $readingbgcolor = transparent\n $readingzindex = 1000\n $readingsize = 3px\n $readingprogresscolor = #b160ea\n $readingprogressimage = none\n\n\n1\n2\n3\n4\n5\n6\n\n\n安装这个插件的命令：\n\nyarn add vuepress-plugin-reading-progress\n\n\n1\n\n\n然后在 config.js 的 plugins 中，添加如下内容：\n\nmodule.exports =[\n    [\n        \'reading-progress\'\n    ]\n],\n\n\n1\n2\n3\n4\n5\n\n\n启动后就会生效',charsets:{cjk:!0},lastUpdated:"2022/04/18, 13:57:13"},{title:"本站 - 记录曾阅读位置模块",frontmatter:{title:"本站 - 记录曾阅读位置模块",date:"2022-01-04T15:44:12.000Z",permalink:"/about/website/lastReading/",titleTag:"原创",categories:["关于 - 本站"],tags:["本站"],readingShow:"top"},regularPath:"/80.%E5%85%B3%E4%BA%8E/06.%E5%85%B3%E4%BA%8E%20-%20%E6%9C%AC%E7%AB%99/20.%E6%9C%AC%E7%AB%99%20-%20%E8%AE%B0%E5%BD%95%E9%98%85%E8%AF%BB%E6%96%87%E7%AB%A0%E6%A8%A1%E5%9D%97.html",relativePath:"80.关于/06.关于 - 本站/20.本站 - 记录阅读文章模块.md",key:"v-ff6c101a",path:"/about/website/lastReading/",headers:[{level:2,title:"前言",slug:"前言",normalizedTitle:"前言",charIndex:69},{level:2,title:"组件添加",slug:"组件添加",normalizedTitle:"组件添加",charIndex:75},{level:2,title:"路由监听",slug:"路由监听",normalizedTitle:"路由监听",charIndex:83},{level:2,title:"本地插件配置",slug:"本地插件配置",normalizedTitle:"本地插件配置",charIndex:91},{level:2,title:"结束语",slug:"结束语",normalizedTitle:"结束语",charIndex:101}],headersStr:"前言 组件添加 路由监听 本地插件配置 结束语",content:'笔记\n\n本站实现了一个记住阅读文章的本地插件，方便下次访问本站时，可选择跳转曾经阅读的文章。\n\n2022-01-04 @村长\n\n\n\n * 前言\n * 组件添加\n * 路由监听\n * 本地插件配置\n * 结束语\n\n\n\n\n# 前言\n\n目前适用版本是 Vdoing v1.x。\n\n不需要安装任何插件，只需要在本地添加三段代码即可。\n\n\n# 组件添加\n\n在 docs/.vuepress/components 文件夹下创建 LastReadingPopup.vue 文件，如果没有 components 文件夹，请创建。\n\n添加如下内容：\n\n<template>\n  <transition name="sw-update-popup">\n    <div v-if="show" class="sw-update-popup">\n      {{ message }}\n\n      <br />\n\n      <button @click="goto">\n        {{ sureButtonText }}\n      </button>\n      <button @click="dontgoto">\n        {{ cancelButtonText }}\n      </button>\n    </div>\n  </transition>\n</template>\n\n<script>\nexport default {\n  name: "LastReadingPopup",\n\n  data() {\n    return {\n      lastReading: null,\n      show: false,\n    };\n  },\n\n  computed: {\n    popupConfig() {\n      const popupConfig = {\n        "/": {\n          // message: "Go back to the last reading.",\n          // buttonText: "Go to",\n          message: "检测到您上一次阅读的位置，是否移至该位置？",\n          sureButtonText: "确定",\n          cancelButtonText: "取消",\n        },\n        "/zh/": {\n          message: "检测到您上一次阅读的位置，是否移至该位置？",\n          sureButtonText: "前往",\n          cancelButtonText: "取消",\n        },\n      };\n      const lang = this.$lang.split("-")[0];\n      return (\n        popupConfig[`/${lang}/`] || popupConfig[this.$localePath] || popupConfig\n      );\n    },\n    // 提示消息\n    message() {\n      const c = this.popupConfig;\n      return (c && c.message) || c["/"].message;\n    },\n    // 确认按钮\n    sureButtonText() {\n      const c = this.popupConfig;\n      return (c && c.sureButtonText) || c["/"].sureButtonText;\n    },\n    // 取消按钮\n    cancelButtonText() {\n      const c = this.popupConfig;\n      return (c && c.cancelButtonText) || c["/"].cancelButtonText;\n    },\n  },\n\n  // 如果不想使用该文件的效果，注释掉即可 mouted 函数的所有内容即可\n  mounted() {\n    if (!!window.ActiveXObject || "ActiveXObject" in window) {\n      setTimeout(() => {\n        window.addEventListener("load", this.init()); // for IE\n      }, 1000);\n    } else {\n      setTimeout(() => {\n        window.addEventListener("load", this.init);\n      }, 1000);\n    }\n  },\n\n  methods: {\n    init() {\n      this.lastReading = JSON.parse(localStorage.getItem("lastReading"));\n\n      if (this.lastReading) {\n        if (this.$route.path === this.lastReading.path) {\n          this.goto();\n        } else {\n          this.show = true;\n          10000 && setTimeout(this.clean, 10000);\n        }\n      }\n    },\n\n    goto() {\n      if (this.$route.path !== this.lastReading.path) {\n        this.$router.replace(this.lastReading.path).then(() => {\n          document.documentElement.scrollTop = this.lastReading.scrollTop;\n          this.clean();\n        });\n      } else {\n        this.$nextTick(() => {\n          document.documentElement.scrollTop = this.lastReading.scrollTop;\n          // this.clean();\n        });\n      }\n    },\n\n    dontgoto() {\n      this.clean();\n    },\n\n    clean() {\n      this.show = false;\n      localStorage.removeItem("lastReading");\n    },\n  },\n};\n<\/script>\n\n<style scoped>\n.sw-update-popup {\n  position: fixed;\n  right: 1em;\n  bottom: 1em;\n  padding: 1em;\n  border: 1px solid #3eaf7c;\n  border-radius: 3px;\n  background: #fff;\n  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.5);\n  text-align: center;\n  z-index: 12;\n}\n\n.sw-update-popup > button {\n  margin-top: 0.5em;\n  padding: 0.25em 2em;\n}\n\n.sw-update-popup-enter-active,\n.sw-update-popup-leave-active {\n  transition: opacity 0.3s, transform 0.3s;\n}\n\n.sw-update-popup-enter,\n.sw-update-popup-leave-to {\n  opacity: 0;\n  transform: translate(0, 50%) scale(0.5);\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n\n\n单语言你可以修改 35 - 37 的代码，多语言则包括了 40 - 42 行代码。\n\n\n# 路由监听\n\n在 docs/.vuepress/enhanceApp.js 文件里添加如下内容：\n\nimport LastReadingPopup from \'./components/LastReadingPopup.vue\'\n\nexport default ({\n  Vue, // VuePress 正在使用的 Vue 构造函数\n  options, // 附加到根实例的一些选项\n  router, // 当前应用的路由实例\n  siteData, // 站点元数据\n  isServer // 当前应用配置是处于 服务端渲染 或 客户端\n}) => {\n  // 判断是否绑定时间是否绑定成功\n  let isMounted = false;\n  // 最后一次阅读位置跳转\n  Vue.component(LastReadingPopup.name, LastReadingPopup);\n  Vue.mixin({\n    // 有多少个 Vue 组件（md 文档），就执行多少次 mounted()，所以利用 if 判断只允许执行一次\n    mounted() {\n      if (!isMounted) {\n        window.addEventListener(\'unload\', this.saveLastReading);  // 卸载窗口前，将数据存储，方便下次可以直接跳转位置\n        isMounted = true;\n      }\n    },\n    methods: {\n      saveLastReading() {\n        localStorage.setItem(\'lastReading\', JSON.stringify({\n          path: this.$route.path,\n          scrollTop: document.documentElement.scrollTop,\n          timestamp: new Date().getTime(),\n        }))\n      }\n    }\n  });\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n\n# 本地插件配置\n\n添加插件配置，在 docs/.vuepress/config.js（新版是 config.ts）的 plugins 中添加如下内容：\n\nmodule.exports = {\n    plugins: [\n        {\n            name: \'custom-plugins\',\n            globalUIComponents: ["LastReadingPopup"] // 2.x 版本 globalUIComponents 改名为 clientAppRootComponentFiles\n        }\n    ],\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nimport { UserPlugins } from \'vuepress/config\'\nplugins: <UserPlugins>[\n    [\n    \t{\n        \tname: \'custom-plugins\',\n        \tglobalUIComponents: ["LastReadingPopup"] // 2.x 版本 globalUIComponents 改名为 clientAppRootComponentFiles\n    \t}\n    ]\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n2.x 版本 globalUIComponents 改名为 clientAppRootComponentFiles。\n\n\n# 结束语\n\n添加完三步的代码后，如何测试呢？\n\n首先随便进入一个文章页里，然后关闭浏览器，然后重新打开浏览器访问主页，就会看到右下角出现提示，是否跳转过去。如果重新访问的是原来的文章页，则会自动移到之前的阅读位置。\n\n参考：https://github.com/tolking/vuepress-plugin-last-reading\n\n如果你还有疑惑，可以去我的 GitHub 仓库或者 Gitee 仓库查看源码。\n\nGitHub：https://github.com/huangguan2001/Kele-Bingtang.github.io\n\nGitee：https://gitee.com/kele-bingtang/Kele-Bingtang\n\n如果你有更好的方式，评论区留言告诉我，或者加入 Vdoing 主题的 QQ 群：694387113。谢谢！',normalizedContent:'笔记\n\n本站实现了一个记住阅读文章的本地插件，方便下次访问本站时，可选择跳转曾经阅读的文章。\n\n2022-01-04 @村长\n\n\n\n * 前言\n * 组件添加\n * 路由监听\n * 本地插件配置\n * 结束语\n\n\n\n\n# 前言\n\n目前适用版本是 vdoing v1.x。\n\n不需要安装任何插件，只需要在本地添加三段代码即可。\n\n\n# 组件添加\n\n在 docs/.vuepress/components 文件夹下创建 lastreadingpopup.vue 文件，如果没有 components 文件夹，请创建。\n\n添加如下内容：\n\n<template>\n  <transition name="sw-update-popup">\n    <div v-if="show" class="sw-update-popup">\n      {{ message }}\n\n      <br />\n\n      <button @click="goto">\n        {{ surebuttontext }}\n      </button>\n      <button @click="dontgoto">\n        {{ cancelbuttontext }}\n      </button>\n    </div>\n  </transition>\n</template>\n\n<script>\nexport default {\n  name: "lastreadingpopup",\n\n  data() {\n    return {\n      lastreading: null,\n      show: false,\n    };\n  },\n\n  computed: {\n    popupconfig() {\n      const popupconfig = {\n        "/": {\n          // message: "go back to the last reading.",\n          // buttontext: "go to",\n          message: "检测到您上一次阅读的位置，是否移至该位置？",\n          surebuttontext: "确定",\n          cancelbuttontext: "取消",\n        },\n        "/zh/": {\n          message: "检测到您上一次阅读的位置，是否移至该位置？",\n          surebuttontext: "前往",\n          cancelbuttontext: "取消",\n        },\n      };\n      const lang = this.$lang.split("-")[0];\n      return (\n        popupconfig[`/${lang}/`] || popupconfig[this.$localepath] || popupconfig\n      );\n    },\n    // 提示消息\n    message() {\n      const c = this.popupconfig;\n      return (c && c.message) || c["/"].message;\n    },\n    // 确认按钮\n    surebuttontext() {\n      const c = this.popupconfig;\n      return (c && c.surebuttontext) || c["/"].surebuttontext;\n    },\n    // 取消按钮\n    cancelbuttontext() {\n      const c = this.popupconfig;\n      return (c && c.cancelbuttontext) || c["/"].cancelbuttontext;\n    },\n  },\n\n  // 如果不想使用该文件的效果，注释掉即可 mouted 函数的所有内容即可\n  mounted() {\n    if (!!window.activexobject || "activexobject" in window) {\n      settimeout(() => {\n        window.addeventlistener("load", this.init()); // for ie\n      }, 1000);\n    } else {\n      settimeout(() => {\n        window.addeventlistener("load", this.init);\n      }, 1000);\n    }\n  },\n\n  methods: {\n    init() {\n      this.lastreading = json.parse(localstorage.getitem("lastreading"));\n\n      if (this.lastreading) {\n        if (this.$route.path === this.lastreading.path) {\n          this.goto();\n        } else {\n          this.show = true;\n          10000 && settimeout(this.clean, 10000);\n        }\n      }\n    },\n\n    goto() {\n      if (this.$route.path !== this.lastreading.path) {\n        this.$router.replace(this.lastreading.path).then(() => {\n          document.documentelement.scrolltop = this.lastreading.scrolltop;\n          this.clean();\n        });\n      } else {\n        this.$nexttick(() => {\n          document.documentelement.scrolltop = this.lastreading.scrolltop;\n          // this.clean();\n        });\n      }\n    },\n\n    dontgoto() {\n      this.clean();\n    },\n\n    clean() {\n      this.show = false;\n      localstorage.removeitem("lastreading");\n    },\n  },\n};\n<\/script>\n\n<style scoped>\n.sw-update-popup {\n  position: fixed;\n  right: 1em;\n  bottom: 1em;\n  padding: 1em;\n  border: 1px solid #3eaf7c;\n  border-radius: 3px;\n  background: #fff;\n  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.5);\n  text-align: center;\n  z-index: 12;\n}\n\n.sw-update-popup > button {\n  margin-top: 0.5em;\n  padding: 0.25em 2em;\n}\n\n.sw-update-popup-enter-active,\n.sw-update-popup-leave-active {\n  transition: opacity 0.3s, transform 0.3s;\n}\n\n.sw-update-popup-enter,\n.sw-update-popup-leave-to {\n  opacity: 0;\n  transform: translate(0, 50%) scale(0.5);\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n\n\n单语言你可以修改 35 - 37 的代码，多语言则包括了 40 - 42 行代码。\n\n\n# 路由监听\n\n在 docs/.vuepress/enhanceapp.js 文件里添加如下内容：\n\nimport lastreadingpopup from \'./components/lastreadingpopup.vue\'\n\nexport default ({\n  vue, // vuepress 正在使用的 vue 构造函数\n  options, // 附加到根实例的一些选项\n  router, // 当前应用的路由实例\n  sitedata, // 站点元数据\n  isserver // 当前应用配置是处于 服务端渲染 或 客户端\n}) => {\n  // 判断是否绑定时间是否绑定成功\n  let ismounted = false;\n  // 最后一次阅读位置跳转\n  vue.component(lastreadingpopup.name, lastreadingpopup);\n  vue.mixin({\n    // 有多少个 vue 组件（md 文档），就执行多少次 mounted()，所以利用 if 判断只允许执行一次\n    mounted() {\n      if (!ismounted) {\n        window.addeventlistener(\'unload\', this.savelastreading);  // 卸载窗口前，将数据存储，方便下次可以直接跳转位置\n        ismounted = true;\n      }\n    },\n    methods: {\n      savelastreading() {\n        localstorage.setitem(\'lastreading\', json.stringify({\n          path: this.$route.path,\n          scrolltop: document.documentelement.scrolltop,\n          timestamp: new date().gettime(),\n        }))\n      }\n    }\n  });\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n\n# 本地插件配置\n\n添加插件配置，在 docs/.vuepress/config.js（新版是 config.ts）的 plugins 中添加如下内容：\n\nmodule.exports = {\n    plugins: [\n        {\n            name: \'custom-plugins\',\n            globaluicomponents: ["lastreadingpopup"] // 2.x 版本 globaluicomponents 改名为 clientapprootcomponentfiles\n        }\n    ],\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nimport { userplugins } from \'vuepress/config\'\nplugins: <userplugins>[\n    [\n    \t{\n        \tname: \'custom-plugins\',\n        \tglobaluicomponents: ["lastreadingpopup"] // 2.x 版本 globaluicomponents 改名为 clientapprootcomponentfiles\n    \t}\n    ]\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n2.x 版本 globaluicomponents 改名为 clientapprootcomponentfiles。\n\n\n# 结束语\n\n添加完三步的代码后，如何测试呢？\n\n首先随便进入一个文章页里，然后关闭浏览器，然后重新打开浏览器访问主页，就会看到右下角出现提示，是否跳转过去。如果重新访问的是原来的文章页，则会自动移到之前的阅读位置。\n\n参考：https://github.com/tolking/vuepress-plugin-last-reading\n\n如果你还有疑惑，可以去我的 github 仓库或者 gitee 仓库查看源码。\n\ngithub：https://github.com/huangguan2001/kele-bingtang.github.io\n\ngitee：https://gitee.com/kele-bingtang/kele-bingtang\n\n如果你有更好的方式，评论区留言告诉我，或者加入 vdoing 主题的 qq 群：694387113。谢谢！',charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"本站 - 私密文章模块",frontmatter:{title:"本站 - 私密文章模块",date:"2022-01-07T17:05:56.000Z",permalink:"/about/website/private/",titleTag:"原创",categories:["关于 - 本站"],tags:["本站"],readingShow:"top"},regularPath:"/80.%E5%85%B3%E4%BA%8E/06.%E5%85%B3%E4%BA%8E%20-%20%E6%9C%AC%E7%AB%99/22.%E6%9C%AC%E7%AB%99%20-%20%E7%A7%81%E5%AF%86%E6%96%87%E7%AB%A0%E6%A8%A1%E5%9D%97.html",relativePath:"80.关于/06.关于 - 本站/22.本站 - 私密文章模块.md",key:"v-14248852",path:"/about/website/private/",headers:[{level:2,title:"前言",slug:"前言",normalizedTitle:"前言",charIndex:72},{level:2,title:"组件添加",slug:"组件添加",normalizedTitle:"组件添加",charIndex:78},{level:2,title:"组件引用",slug:"组件引用",normalizedTitle:"组件引用",charIndex:86},{level:2,title:"路由监听",slug:"路由监听",normalizedTitle:"路由监听",charIndex:94},{level:2,title:"安全检测代码",slug:"安全检测代码",normalizedTitle:"安全检测代码",charIndex:102},{level:2,title:"配置添加",slug:"配置添加",normalizedTitle:"配置添加",charIndex:112},{level:2,title:"全局私密文章",slug:"全局私密文章",normalizedTitle:"全局私密文章",charIndex:120},{level:2,title:"单个私密文章",slug:"单个私密文章",normalizedTitle:"单个私密文章",charIndex:130},{level:2,title:"结束语",slug:"结束语",normalizedTitle:"结束语",charIndex:140}],headersStr:"前言 组件添加 组件引用 路由监听 安全检测代码 配置添加 全局私密文章 单个私密文章 结束语",content:'笔记\n\n本站实现了私密文章功能，当大家想要「云端备份」到博客时，又不希望别人看到，该功能能满足你。\n\n2022-01-07 @村长\n\n\n\n * 前言\n * 组件添加\n * 组件引用\n * 路由监听\n * 安全检测代码\n * 配置添加\n * 全局私密文章\n * 单个私密文章\n * 结束语\n\n\n\n\n# 前言\n\n目前适用版本是 Vdoing v1.x。\n\n本功能不是插件，好处在于你可以自定义喜欢的页面。\n\n如果你想先体验私密文章的效果，请访问：\n\n * 全局私密文章测试\n\n * 单个私密文章测试\n\n本内容分为四步：\n\n * 创建 Login.vue 组件\n * 创建一个 md 文档，引用 Login.vue 组件\n * 监听路由，跳转前判断是否为私有文章，是否登录过，或是否登录状态过期\n * 在 themeConfig 里添加一些配置信息\n\n\n# 组件添加\n\n首先在 .vuepress/config.js 的 head 模块添加在线图标。图标库来自阿里云：https://www.iconfont.cn/。\n\n如果你没有账号，或者觉得添加比较麻烦，就使用我的图标库地址，当你发现图标失效了，就请来这里获取新的地址，如果还没有更新，请在评论区留言。\n\n[\'link\', { rel: \'stylesheet\', href: \'https://at.alicdn.com/t/font_3129839_xft6cqs5gc.css\' }], // 阿里在线图标\n\n\n1\n\n\n\n\n在 doc/.vuepress 目录下，创建 components 文件夹，如果有，则不需要创建。\n\n接着在 components 文件夹下创建 Login.vue 组件，该组件是登录的表单，可以根据需求自行修改。\n\n一定是 components 文件夹且路径要对，因为 Vuepress 会自动全局注册该文件夹下的所有 .vue 组件。\n\n在 Login.vue 添加如下内容：\n\n<template>\n  <div class="login-form">\n    <div class="form-header">用户名</div>\n    <div>\n      <input\n        type="text"\n        class="form-control"\n        placeholder="请输入用户名 ..."\n        v-model="username"\n      />\n    </div>\n    <div class="form-header">密码</div>\n    <div>\n      <input\n        type="password"\n        class="form-control"\n        placeholder="请输入密码 ..."\n        v-model="password"\n      />\n    </div>\n\n    <div class="btn-row">\n      <button class="btn" @click="login">登录</button>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      username: "",\n      password: "",\n    };\n  },\n  created() {\n    document.onkeyup = (e) => {\n      let key = window.event.keyCode;\n      if (key == 13) {\n        this.login();\n      }\n    };\n  },\n  methods: {\n    login() {\n      let { username, password, expire, loginKey } =\n        this.$themeConfig.privatePage;\n      if (this.username && this.password) {\n        // 某个文章有用户信息，则覆盖全局的信息\n        if (this.$route.query.singlePage) {\n          this.$filterPosts.forEach((item) => {\n            if (item.path == this.$route.query.toPath) {\n              username = item.frontmatter.username;\n              password = item.frontmatter.password;\n              loginKey = item.frontmatter.title;\n              expire = item.frontmatter.expire || expire;\n              return;\n            }\n          });\n        }\n        if (this.username == username && this.password == password) {\n          const data = JSON.stringify({\n            username: this.username,\n            password: this.password,\n            time: new Date().getTime(),\n            expire: expire,\n          });\n          window.localStorage.setItem(loginKey, data);\n          addTip("登录成功，正在跳转 ...", "success");\n          if (this.$route.query.toPath) {\n            this.$router.push({\n              path: this.$route.query.toPath,\n            });\n          } else {\n            this.$router.push({\n              path: "/",\n            });\n          }\n        } else {\n          this.password = ""; // 清空密码\n          addTip("用户名或者密码错误！请联系博主获取用户名和密码！", "danger");\n        }\n      } else if (this.username == "" && this.password != "") {\n        addTip("用户名不能为空！", "warning");\n      } else if (this.username != "" && this.password == "") {\n        addTip("密码不能为空！", "warning");\n      } else {\n        addTip("您访问的文章是私密文章，请先输入用户名和密码！", "info");\n      }\n    },\n  },\n};\n/**\n * 添加消息提示\n * content：内容\n * type：弹窗类型（tip、success、warning、danger）\n * startHeight：第一个弹窗的高度，默认 50\n * dieTime：弹窗消失时间（毫秒），默认 3000 毫秒\n */\nfunction addTip(content, type, startHeight = 50, dieTime = 3000) {\n  var tip = document.querySelectorAll(".private-tip");\n  var time = new Date().getTime();\n  // 获取最后消息提示元素的高度\n  var top = tip.length == 0 ? 0 : tip[tip.length - 1].getAttribute("data-top");\n  // 如果产生两个以上的消息提示，则出现在上一个提示的下面，即高度添加，否则默认 50\n  var lastTop =\n    parseInt(top) +\n    (tip.length != 0 ? tip[tip.length - 1].offsetHeight + 17 : startHeight);\n\n  let div = document.createElement("div");\n  div.className = `private-tip tip-${type} ${time}`;\n  div.style.top = parseInt(top) + "px";\n  div.setAttribute("data-top", lastTop);\n  if (type == "info" || type == 1) {\n    div.innerHTML = `<i class="iconfont icon-info icon"></i><p class="tip-info-content">${content}</p>`;\n  } else if (type == "success" || type == 2) {\n    div.innerHTML = `<i class="iconfont icon-dagouyouquan icon"></i><p class="tip-success-content">${content}</p>`;\n  } else if (type == "danger" || type == 3) {\n    div.innerHTML = `<i class="iconfont icon-cuowu icon"></i><p class="tip-danger-content">${content}</p>`;\n  } else if (type == "warning" || type == 4) {\n    div.innerHTML = `<i class="iconfont icon-gantanhao icon"></i><p class="tip-warning-content">${content}</p>`;\n  }\n  document.body.appendChild(div);\n\n  let timeTip = document.getElementsByClassName(time)[0];\n  setTimeout(() => {\n    timeTip.style.top = parseInt(lastTop) + "px";\n    timeTip.style.opacity = "1";\n  }, 10);\n\n  // 消息提示 dieTime 秒后隐藏并被删除\n  setTimeout(() => {\n    timeTip.style.top = "0px";\n    timeTip.style.opacity = "0";\n\n    // 下面的所有元素回到各自曾经的出发点\n    var allTipElement = nextAllTipElement(timeTip);\n    for (let i = 0; i < allTipElement.length; i++) {\n      var next = allTipElement[i];\n      var top =\n        parseInt(next.getAttribute("data-top")) - next.offsetHeight - 17;\n      next.setAttribute("data-top", top);\n      next.style.top = top + "px";\n    }\n    setTimeout(() => {\n      timeTip.remove();\n    }, 500);\n  }, dieTime);\n}\n/**\n * 获取后面的兄弟元素\n */\nfunction nextAllTipElement(elem) {\n  var r = [];\n  var n = elem;\n  for (; n; n = n.nextSibling) {\n    if (n.nodeType === 1 && n !== elem) {\n      r.push(n);\n    }\n  }\n  return r;\n}\n<\/script>\n\n<style lang="stylus">\n.login-form {\n  padding: 1rem;\n  box-sizing: border-box;\n\n  .btn-row {\n    margin-top: 1rem;\n    text-align: center;\n  }\n\n  .btn {\n    padding: 0.6rem 2rem;\n    outline: none;\n    background-color: #60C084;\n    color: white;\n    border: 0;\n    cursor: pointer;\n  }\n\n  .form-header {\n    color: #13b9e2;\n    margin-bottom: 0.5rem;\n  }\n\n  .form-control {\n    padding: 0.6rem;\n    border: 2px solid #ddd;\n    width: 100%;\n    margin-bottom: 0.5rem;\n    box-sizing: border-box;\n    outline: none;\n    transition: border 0.2s ease;\n\n    &:focus {\n      border: 2px solid #aaa;\n    }\n  }\n}\n\ndiv.v-dialog-overlay {\n  opacity: 1 !important;\n}\n\n.private-tip {\n  position: fixed;\n  display: flex;\n  top: -10px;\n  left: 50%;\n  opacity: 0;\n  min-width: 320px;\n  transform: translateX(-50%);\n  transition: opacity 0.3s linear, top 0.4s, transform 0.4s;\n  z-index: 99999;\n  padding: 15px 15px 15px 20px;\n  border: 1px solid #ebeef5;\n  border-radius: 4px;\n  grid-row: 1;\n  line-height: 17px;\n}\n\n.private-tip p {\n  line-height: 17px;\n  margin: 0;\n  font-size: 14px;\n}\n\n.icon {\n  margin-right: 10px;\n  line-height: 17px;\n}\n\n.tip-success {\n  color: #67c23a;\n  background-color: #f0f9eb;\n  border-color: #e1f3d8;\n}\n\n.tip-success .tip-success-content {\n  color: #67c23a;\n}\n\n.tip-danger {\n  color: #f56c6c;\n  background-color: #fef0f0;\n  border-color: #fde2e2;\n}\n\n.tip-danger .tip-danger-content {\n  color: #f56c6c;\n}\n\n.tip-info {\n  background-color: #edf2fc;\n  border-color: #ebeef5;\n}\n\n.tip-info .tip-info-content {\n  color: #909399;\n}\n\n.tip-warning {\n  color: #e6a23c;\n  background-color: #fdf6ec;\n  border-color: #faecd8;\n}\n\n.tip-warning .tip-warning-content {\n  margin: 0;\n  color: #e6a23c;\n  line-height: 21px;\n  font-size: 14px;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n\n\n\n# 组件引用\n\n在任意位置创建一个 md 文档，确保在 docs 目录下，如我就在 docs 的根目录下创建 99.Vdoing私密文章登录.md 文件。\n\n添加如下内容：(需要修改 frontmatter 为自己的内容)\n\n---\ntitle: Vdoing私密文章登录   # 可修改\ndate: 2022-01-07 14:26:04 # 你的创建时间，可修改\npermalink: /vdoing/login/  # 可修改\nsidebar: false\narticle: false\ncomment: false\neditLink: false\n---\n\n您当前访问的是博主的私密文章，请输入有效的用户名和密码。如果没有，请向博主获取。\n\n<ClientOnly>\n  <Login/>\n</ClientOnly>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n记住你的 permalink，后面的 配置添加 需要用到。\n\n<ClientOnly> 大部分情况下可加可不加，少部分情况的官方介绍：https://v2.vuepress.vuejs.org/zh/reference/components.html#clientonly。\n\n\n# 路由监听\n\n打开 docs/enhanceApp.js 文件，添加如下内容：\n\nimport Login from \'./components/Login.vue\'\n\nexport default ({\n  Vue, // VuePress 正在使用的 Vue 构造函数\n  options, // 附加到根实例的一些选项\n  router, // 当前应用的路由实例\n  siteData, // 站点元数据\n  isServer // 当前应用配置是处于 服务端渲染 或 客户端\n}) => {\n /**\n   * 私密文章模块\n   */\n   if (!isServer) {\n    router.beforeEach((to, from, next) => {\n      siteData.pages.forEach((item) => {\n        if (item.path == to.path) {\n          if (item.frontmatter.private && item.frontmatter.private == true && siteData.themeConfig.privatePage) {\n            let { username, password, loginPath, loginKey, expire, loginSession } = siteData.themeConfig.privatePage;\n            if (!expire) {\n              expire = 86400000;  // 一天\n            }\n            if (!loginKey) {\n              loginKey = \'vdoing_login\';\n            }\n            // 网站关闭或者刷新后，清除登录状态（不针对单个私密文章）\n            if (loginSession) {\n              window.addEventListener(\'unload\', function () {\n                localStorage.removeItem(loginKey);\n              });\n            }\n            // 单个文章私密验证\n            if (item.frontmatter.username && item.frontmatter.password) {\n              let loginInfo = JSON.parse(localStorage.getItem(item.frontmatter.title));\n              if (!loginInfo || (loginInfo.username !== item.frontmatter.username && loginInfo.password !== item.frontmatter.password)) {\n                router.push({\n                  path: loginPath,\n                  query: {\n                    toPath: to.path,\n                    singlePage: true,  // 代表单个文章\n                  }\n                });\n              }\n            }\n            // 全局私密验证\n            else {\n              let loginInfo = JSON.parse(localStorage.getItem(loginKey));\n              // 没有登录过\n              if (!loginInfo || (loginInfo.username !== username && loginInfo.password !== password)) {\n                router.push({\n                  path: loginPath,\n                  query: {\n                    toPath: to.path\n                  }\n                });\n              }\n              // 登录状态过期\n              else if (new Date() - loginInfo.time > loginInfo.expire) {\n                localStorage.removeItem(loginKey);\n                router.push({\n                  path: loginPath,\n                  query: {\n                    toPath: to.path\n                  }\n                });\n              }\n            }\n          }\n        }\n      });\n      next();\n    })\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n\n\n\n# 安全检测代码\n\n因为 Vuepress 是静态页面，所以我们无法往后端获取登录信息，那么也就有一个问题，如果用户禁用 JavaScript，那么私有文章将不会进行验证，也就是禁用了 JavaScript，可以毫无阻塞的浏览私有文章内容，那么如何处理这个问题呢？\n\n打开 .vuepress/config.js（新版是 config.ts）文件，给 head 模块添加如下信息：\n\n[\'noscript\', {}, \'<meta http-equiv="refresh" content="0; url=https://www.youngkbt.cn/noscript/"><style>.theme-vdoing-content { display:none }\']\n\n\n1\n\n\n值得注意的是，url 不要填写自己博客的任意地址，因为它在进入到新的页面后，又触发这段代码，导致反复跳转该页面。\n\n如果你不介意的话，可以用我提供的 url，使用前你可以访问看看，只是一个简单的 html。\n\nhttps://www.youngkbt.cn/noscript/\n\n\n# 配置添加\n\n打开 .vuepress/config.js（新版为 config.ts） 文件，在 themeConfig 模块里添加如下内容：\n\n// 私密文章配置\nprivatePage: {\n  username: \'vdoing\',    // 用户名\n  password: \'123456\',    // 密码\n  expire: 1000 * 60 * 60 * 24,   // 有效时间：毫秒(ms)。过期后访问私密文章重新输入用户名和密码。默认一天\n  loginPath: "/vdoing/login/",    // 引用登录组件的 md 文章中 frontmatter 的 permalink。（必须），建议支持 /vdoing/login/，无默认值\n  loginKey: \'vdoing_login\',    // 存储用户名信息的 key，默认是 vdoing_login。系统通过该 key 验证是否登录、是否过期。（请不要与任意文章中 frontmatter 的 title 冲突）\n  loginSession: false,     // 是否开启在文章页面关闭或刷新后，清除登录状态。这样再次访问任何私密文章，都需要重新验证登录，默认为 false（不开启）\n},\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nusername\n\n * 类型：string\n * 默认值：undefined\n\n用户名。\n\npassword\n\n * 类型：string\n * 默认值：undefined\n\n密码。\n\nexpire\n\n * 类型：number\n * 默认值：86400000（一天）\n\n登录状态过期时间。\n\nloginPath\n\n * 类型：string\n * 默认值：undefined\n\n引用登录组件的 md 文章中 frontmatter 的 permalink。\n\nloginKey\n\n * 类型：string\n * 默认值：vdoing_login\n\n存储用户名信息的 key。\n\n请不要与任意文章中 frontmatter 的 title 冲突。\n\nloginSession\n\n * 类型：boolean\n * 默认值：false\n\n是否开启在文章页面关闭或刷新后，清除登录状态。这样再次访问任何私密文章，都需要重新验证登录，默认为 false（不开启）。\n\n\n# 全局私密文章\n\n如果你想开启私密文章，请在 frontmatter 中 额外 添加如下内容：\n\n---\nprivate: true     # 开启文章私密，必须\n---\n\n\n1\n2\n3\n\n\n\n# 单个私密文章\n\n全局的私密文章配置会导致所有的私密文章共用一个登录信息，如果你想给某个文章设置单独的用户名和密码等配置，请在 frontmatter 中 额外 添加如下内容：\n\n---\nprivate: true     # 开启文章私密，必须\nusername: vdoing  # 用户名，必须\npassword: 123456  # 密码，必须\nexpire: 86400000  # 登录超时时间（毫秒），可选（不填则以全局超时时间为准，如果全局也没有设置，则默认是一天）\n-\n\n\n1\n2\n3\n4\n5\n6\n\n\n此时无法通过全局的用户名和密码进行登录，只能通过该文章的配置信息进行登录。\n\n\n# 结束语\n\n如果你还有疑惑，可以去我的 GitHub 仓库或者 Gitee 仓库查看源码。\n\nGitHub：https://github.com/huangguan2001/Kele-Bingtang.github.io\n\nGitee：https://gitee.com/kele-bingtang/Kele-Bingtang\n\n如果你有更好的方式，评论区留言告诉我，或者加入 Vdoing 主题的 QQ 群：694387113。谢谢！',normalizedContent:'笔记\n\n本站实现了私密文章功能，当大家想要「云端备份」到博客时，又不希望别人看到，该功能能满足你。\n\n2022-01-07 @村长\n\n\n\n * 前言\n * 组件添加\n * 组件引用\n * 路由监听\n * 安全检测代码\n * 配置添加\n * 全局私密文章\n * 单个私密文章\n * 结束语\n\n\n\n\n# 前言\n\n目前适用版本是 vdoing v1.x。\n\n本功能不是插件，好处在于你可以自定义喜欢的页面。\n\n如果你想先体验私密文章的效果，请访问：\n\n * 全局私密文章测试\n\n * 单个私密文章测试\n\n本内容分为四步：\n\n * 创建 login.vue 组件\n * 创建一个 md 文档，引用 login.vue 组件\n * 监听路由，跳转前判断是否为私有文章，是否登录过，或是否登录状态过期\n * 在 themeconfig 里添加一些配置信息\n\n\n# 组件添加\n\n首先在 .vuepress/config.js 的 head 模块添加在线图标。图标库来自阿里云：https://www.iconfont.cn/。\n\n如果你没有账号，或者觉得添加比较麻烦，就使用我的图标库地址，当你发现图标失效了，就请来这里获取新的地址，如果还没有更新，请在评论区留言。\n\n[\'link\', { rel: \'stylesheet\', href: \'https://at.alicdn.com/t/font_3129839_xft6cqs5gc.css\' }], // 阿里在线图标\n\n\n1\n\n\n\n\n在 doc/.vuepress 目录下，创建 components 文件夹，如果有，则不需要创建。\n\n接着在 components 文件夹下创建 login.vue 组件，该组件是登录的表单，可以根据需求自行修改。\n\n一定是 components 文件夹且路径要对，因为 vuepress 会自动全局注册该文件夹下的所有 .vue 组件。\n\n在 login.vue 添加如下内容：\n\n<template>\n  <div class="login-form">\n    <div class="form-header">用户名</div>\n    <div>\n      <input\n        type="text"\n        class="form-control"\n        placeholder="请输入用户名 ..."\n        v-model="username"\n      />\n    </div>\n    <div class="form-header">密码</div>\n    <div>\n      <input\n        type="password"\n        class="form-control"\n        placeholder="请输入密码 ..."\n        v-model="password"\n      />\n    </div>\n\n    <div class="btn-row">\n      <button class="btn" @click="login">登录</button>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      username: "",\n      password: "",\n    };\n  },\n  created() {\n    document.onkeyup = (e) => {\n      let key = window.event.keycode;\n      if (key == 13) {\n        this.login();\n      }\n    };\n  },\n  methods: {\n    login() {\n      let { username, password, expire, loginkey } =\n        this.$themeconfig.privatepage;\n      if (this.username && this.password) {\n        // 某个文章有用户信息，则覆盖全局的信息\n        if (this.$route.query.singlepage) {\n          this.$filterposts.foreach((item) => {\n            if (item.path == this.$route.query.topath) {\n              username = item.frontmatter.username;\n              password = item.frontmatter.password;\n              loginkey = item.frontmatter.title;\n              expire = item.frontmatter.expire || expire;\n              return;\n            }\n          });\n        }\n        if (this.username == username && this.password == password) {\n          const data = json.stringify({\n            username: this.username,\n            password: this.password,\n            time: new date().gettime(),\n            expire: expire,\n          });\n          window.localstorage.setitem(loginkey, data);\n          addtip("登录成功，正在跳转 ...", "success");\n          if (this.$route.query.topath) {\n            this.$router.push({\n              path: this.$route.query.topath,\n            });\n          } else {\n            this.$router.push({\n              path: "/",\n            });\n          }\n        } else {\n          this.password = ""; // 清空密码\n          addtip("用户名或者密码错误！请联系博主获取用户名和密码！", "danger");\n        }\n      } else if (this.username == "" && this.password != "") {\n        addtip("用户名不能为空！", "warning");\n      } else if (this.username != "" && this.password == "") {\n        addtip("密码不能为空！", "warning");\n      } else {\n        addtip("您访问的文章是私密文章，请先输入用户名和密码！", "info");\n      }\n    },\n  },\n};\n/**\n * 添加消息提示\n * content：内容\n * type：弹窗类型（tip、success、warning、danger）\n * startheight：第一个弹窗的高度，默认 50\n * dietime：弹窗消失时间（毫秒），默认 3000 毫秒\n */\nfunction addtip(content, type, startheight = 50, dietime = 3000) {\n  var tip = document.queryselectorall(".private-tip");\n  var time = new date().gettime();\n  // 获取最后消息提示元素的高度\n  var top = tip.length == 0 ? 0 : tip[tip.length - 1].getattribute("data-top");\n  // 如果产生两个以上的消息提示，则出现在上一个提示的下面，即高度添加，否则默认 50\n  var lasttop =\n    parseint(top) +\n    (tip.length != 0 ? tip[tip.length - 1].offsetheight + 17 : startheight);\n\n  let div = document.createelement("div");\n  div.classname = `private-tip tip-${type} ${time}`;\n  div.style.top = parseint(top) + "px";\n  div.setattribute("data-top", lasttop);\n  if (type == "info" || type == 1) {\n    div.innerhtml = `<i class="iconfont icon-info icon"></i><p class="tip-info-content">${content}</p>`;\n  } else if (type == "success" || type == 2) {\n    div.innerhtml = `<i class="iconfont icon-dagouyouquan icon"></i><p class="tip-success-content">${content}</p>`;\n  } else if (type == "danger" || type == 3) {\n    div.innerhtml = `<i class="iconfont icon-cuowu icon"></i><p class="tip-danger-content">${content}</p>`;\n  } else if (type == "warning" || type == 4) {\n    div.innerhtml = `<i class="iconfont icon-gantanhao icon"></i><p class="tip-warning-content">${content}</p>`;\n  }\n  document.body.appendchild(div);\n\n  let timetip = document.getelementsbyclassname(time)[0];\n  settimeout(() => {\n    timetip.style.top = parseint(lasttop) + "px";\n    timetip.style.opacity = "1";\n  }, 10);\n\n  // 消息提示 dietime 秒后隐藏并被删除\n  settimeout(() => {\n    timetip.style.top = "0px";\n    timetip.style.opacity = "0";\n\n    // 下面的所有元素回到各自曾经的出发点\n    var alltipelement = nextalltipelement(timetip);\n    for (let i = 0; i < alltipelement.length; i++) {\n      var next = alltipelement[i];\n      var top =\n        parseint(next.getattribute("data-top")) - next.offsetheight - 17;\n      next.setattribute("data-top", top);\n      next.style.top = top + "px";\n    }\n    settimeout(() => {\n      timetip.remove();\n    }, 500);\n  }, dietime);\n}\n/**\n * 获取后面的兄弟元素\n */\nfunction nextalltipelement(elem) {\n  var r = [];\n  var n = elem;\n  for (; n; n = n.nextsibling) {\n    if (n.nodetype === 1 && n !== elem) {\n      r.push(n);\n    }\n  }\n  return r;\n}\n<\/script>\n\n<style lang="stylus">\n.login-form {\n  padding: 1rem;\n  box-sizing: border-box;\n\n  .btn-row {\n    margin-top: 1rem;\n    text-align: center;\n  }\n\n  .btn {\n    padding: 0.6rem 2rem;\n    outline: none;\n    background-color: #60c084;\n    color: white;\n    border: 0;\n    cursor: pointer;\n  }\n\n  .form-header {\n    color: #13b9e2;\n    margin-bottom: 0.5rem;\n  }\n\n  .form-control {\n    padding: 0.6rem;\n    border: 2px solid #ddd;\n    width: 100%;\n    margin-bottom: 0.5rem;\n    box-sizing: border-box;\n    outline: none;\n    transition: border 0.2s ease;\n\n    &:focus {\n      border: 2px solid #aaa;\n    }\n  }\n}\n\ndiv.v-dialog-overlay {\n  opacity: 1 !important;\n}\n\n.private-tip {\n  position: fixed;\n  display: flex;\n  top: -10px;\n  left: 50%;\n  opacity: 0;\n  min-width: 320px;\n  transform: translatex(-50%);\n  transition: opacity 0.3s linear, top 0.4s, transform 0.4s;\n  z-index: 99999;\n  padding: 15px 15px 15px 20px;\n  border: 1px solid #ebeef5;\n  border-radius: 4px;\n  grid-row: 1;\n  line-height: 17px;\n}\n\n.private-tip p {\n  line-height: 17px;\n  margin: 0;\n  font-size: 14px;\n}\n\n.icon {\n  margin-right: 10px;\n  line-height: 17px;\n}\n\n.tip-success {\n  color: #67c23a;\n  background-color: #f0f9eb;\n  border-color: #e1f3d8;\n}\n\n.tip-success .tip-success-content {\n  color: #67c23a;\n}\n\n.tip-danger {\n  color: #f56c6c;\n  background-color: #fef0f0;\n  border-color: #fde2e2;\n}\n\n.tip-danger .tip-danger-content {\n  color: #f56c6c;\n}\n\n.tip-info {\n  background-color: #edf2fc;\n  border-color: #ebeef5;\n}\n\n.tip-info .tip-info-content {\n  color: #909399;\n}\n\n.tip-warning {\n  color: #e6a23c;\n  background-color: #fdf6ec;\n  border-color: #faecd8;\n}\n\n.tip-warning .tip-warning-content {\n  margin: 0;\n  color: #e6a23c;\n  line-height: 21px;\n  font-size: 14px;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n\n\n\n# 组件引用\n\n在任意位置创建一个 md 文档，确保在 docs 目录下，如我就在 docs 的根目录下创建 99.vdoing私密文章登录.md 文件。\n\n添加如下内容：(需要修改 frontmatter 为自己的内容)\n\n---\ntitle: vdoing私密文章登录   # 可修改\ndate: 2022-01-07 14:26:04 # 你的创建时间，可修改\npermalink: /vdoing/login/  # 可修改\nsidebar: false\narticle: false\ncomment: false\neditlink: false\n---\n\n您当前访问的是博主的私密文章，请输入有效的用户名和密码。如果没有，请向博主获取。\n\n<clientonly>\n  <login/>\n</clientonly>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n记住你的 permalink，后面的 配置添加 需要用到。\n\n<clientonly> 大部分情况下可加可不加，少部分情况的官方介绍：https://v2.vuepress.vuejs.org/zh/reference/components.html#clientonly。\n\n\n# 路由监听\n\n打开 docs/enhanceapp.js 文件，添加如下内容：\n\nimport login from \'./components/login.vue\'\n\nexport default ({\n  vue, // vuepress 正在使用的 vue 构造函数\n  options, // 附加到根实例的一些选项\n  router, // 当前应用的路由实例\n  sitedata, // 站点元数据\n  isserver // 当前应用配置是处于 服务端渲染 或 客户端\n}) => {\n /**\n   * 私密文章模块\n   */\n   if (!isserver) {\n    router.beforeeach((to, from, next) => {\n      sitedata.pages.foreach((item) => {\n        if (item.path == to.path) {\n          if (item.frontmatter.private && item.frontmatter.private == true && sitedata.themeconfig.privatepage) {\n            let { username, password, loginpath, loginkey, expire, loginsession } = sitedata.themeconfig.privatepage;\n            if (!expire) {\n              expire = 86400000;  // 一天\n            }\n            if (!loginkey) {\n              loginkey = \'vdoing_login\';\n            }\n            // 网站关闭或者刷新后，清除登录状态（不针对单个私密文章）\n            if (loginsession) {\n              window.addeventlistener(\'unload\', function () {\n                localstorage.removeitem(loginkey);\n              });\n            }\n            // 单个文章私密验证\n            if (item.frontmatter.username && item.frontmatter.password) {\n              let logininfo = json.parse(localstorage.getitem(item.frontmatter.title));\n              if (!logininfo || (logininfo.username !== item.frontmatter.username && logininfo.password !== item.frontmatter.password)) {\n                router.push({\n                  path: loginpath,\n                  query: {\n                    topath: to.path,\n                    singlepage: true,  // 代表单个文章\n                  }\n                });\n              }\n            }\n            // 全局私密验证\n            else {\n              let logininfo = json.parse(localstorage.getitem(loginkey));\n              // 没有登录过\n              if (!logininfo || (logininfo.username !== username && logininfo.password !== password)) {\n                router.push({\n                  path: loginpath,\n                  query: {\n                    topath: to.path\n                  }\n                });\n              }\n              // 登录状态过期\n              else if (new date() - logininfo.time > logininfo.expire) {\n                localstorage.removeitem(loginkey);\n                router.push({\n                  path: loginpath,\n                  query: {\n                    topath: to.path\n                  }\n                });\n              }\n            }\n          }\n        }\n      });\n      next();\n    })\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n\n\n\n# 安全检测代码\n\n因为 vuepress 是静态页面，所以我们无法往后端获取登录信息，那么也就有一个问题，如果用户禁用 javascript，那么私有文章将不会进行验证，也就是禁用了 javascript，可以毫无阻塞的浏览私有文章内容，那么如何处理这个问题呢？\n\n打开 .vuepress/config.js（新版是 config.ts）文件，给 head 模块添加如下信息：\n\n[\'noscript\', {}, \'<meta http-equiv="refresh" content="0; url=https://www.youngkbt.cn/noscript/"><style>.theme-vdoing-content { display:none }\']\n\n\n1\n\n\n值得注意的是，url 不要填写自己博客的任意地址，因为它在进入到新的页面后，又触发这段代码，导致反复跳转该页面。\n\n如果你不介意的话，可以用我提供的 url，使用前你可以访问看看，只是一个简单的 html。\n\nhttps://www.youngkbt.cn/noscript/\n\n\n# 配置添加\n\n打开 .vuepress/config.js（新版为 config.ts） 文件，在 themeconfig 模块里添加如下内容：\n\n// 私密文章配置\nprivatepage: {\n  username: \'vdoing\',    // 用户名\n  password: \'123456\',    // 密码\n  expire: 1000 * 60 * 60 * 24,   // 有效时间：毫秒(ms)。过期后访问私密文章重新输入用户名和密码。默认一天\n  loginpath: "/vdoing/login/",    // 引用登录组件的 md 文章中 frontmatter 的 permalink。（必须），建议支持 /vdoing/login/，无默认值\n  loginkey: \'vdoing_login\',    // 存储用户名信息的 key，默认是 vdoing_login。系统通过该 key 验证是否登录、是否过期。（请不要与任意文章中 frontmatter 的 title 冲突）\n  loginsession: false,     // 是否开启在文章页面关闭或刷新后，清除登录状态。这样再次访问任何私密文章，都需要重新验证登录，默认为 false（不开启）\n},\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nusername\n\n * 类型：string\n * 默认值：undefined\n\n用户名。\n\npassword\n\n * 类型：string\n * 默认值：undefined\n\n密码。\n\nexpire\n\n * 类型：number\n * 默认值：86400000（一天）\n\n登录状态过期时间。\n\nloginpath\n\n * 类型：string\n * 默认值：undefined\n\n引用登录组件的 md 文章中 frontmatter 的 permalink。\n\nloginkey\n\n * 类型：string\n * 默认值：vdoing_login\n\n存储用户名信息的 key。\n\n请不要与任意文章中 frontmatter 的 title 冲突。\n\nloginsession\n\n * 类型：boolean\n * 默认值：false\n\n是否开启在文章页面关闭或刷新后，清除登录状态。这样再次访问任何私密文章，都需要重新验证登录，默认为 false（不开启）。\n\n\n# 全局私密文章\n\n如果你想开启私密文章，请在 frontmatter 中 额外 添加如下内容：\n\n---\nprivate: true     # 开启文章私密，必须\n---\n\n\n1\n2\n3\n\n\n\n# 单个私密文章\n\n全局的私密文章配置会导致所有的私密文章共用一个登录信息，如果你想给某个文章设置单独的用户名和密码等配置，请在 frontmatter 中 额外 添加如下内容：\n\n---\nprivate: true     # 开启文章私密，必须\nusername: vdoing  # 用户名，必须\npassword: 123456  # 密码，必须\nexpire: 86400000  # 登录超时时间（毫秒），可选（不填则以全局超时时间为准，如果全局也没有设置，则默认是一天）\n-\n\n\n1\n2\n3\n4\n5\n6\n\n\n此时无法通过全局的用户名和密码进行登录，只能通过该文章的配置信息进行登录。\n\n\n# 结束语\n\n如果你还有疑惑，可以去我的 github 仓库或者 gitee 仓库查看源码。\n\ngithub：https://github.com/huangguan2001/kele-bingtang.github.io\n\ngitee：https://gitee.com/kele-bingtang/kele-bingtang\n\n如果你有更好的方式，评论区留言告诉我，或者加入 vdoing 主题的 qq 群：694387113。谢谢！',charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"本站 - 站点信息模块",frontmatter:{title:"本站 - 站点信息模块",date:"2021-12-30T21:44:18.000Z",permalink:"/about/website/info/",titleTag:"原创",categories:["关于 - 本站"],tags:["本站"],readingShow:"top"},regularPath:"/80.%E5%85%B3%E4%BA%8E/06.%E5%85%B3%E4%BA%8E%20-%20%E6%9C%AC%E7%AB%99/16.%E6%9C%AC%E7%AB%99%20-%20%E7%AB%99%E7%82%B9%E4%BF%A1%E6%81%AF%E6%A8%A1%E5%9D%97.html",relativePath:"80.关于/06.关于 - 本站/16.本站 - 站点信息模块.md",key:"v-0973ffba",path:"/about/website/info/",headers:[{level:2,title:"前言",slug:"前言",normalizedTitle:"前言",charIndex:59},{level:2,title:"安装依赖",slug:"安装依赖",normalizedTitle:"安装依赖",charIndex:65},{level:2,title:"添加meta",slug:"添加meta",normalizedTitle:"添加meta",charIndex:73},{level:2,title:"添加在线图标",slug:"添加在线图标",normalizedTitle:"添加在线图标",charIndex:83},{level:2,title:"Vue模板",slug:"vue模板",normalizedTitle:"vue模板",charIndex:93},{level:2,title:"主题选择",slug:"主题选择",normalizedTitle:"主题选择",charIndex:102},{level:2,title:"在线主题",slug:"在线主题",normalizedTitle:"在线主题",charIndex:110},{level:3,title:"网站信息工具代码",slug:"网站信息工具代码",normalizedTitle:"网站信息工具代码",charIndex:120},{level:3,title:"站点信息代码",slug:"站点信息代码",normalizedTitle:"站点信息代码",charIndex:134},{level:3,title:"文章浏览量和字数代码",slug:"文章浏览量和字数代码",normalizedTitle:"文章浏览量和字数代码",charIndex:146},{level:3,title:"站点信息配置",slug:"站点信息配置",normalizedTitle:"站点信息配置",charIndex:162},{level:2,title:"本地主题",slug:"本地主题",normalizedTitle:"本地主题",charIndex:172},{level:3,title:"工具类",slug:"工具类",normalizedTitle:"工具类",charIndex:182},{level:3,title:"Vue组件创建",slug:"vue组件创建",normalizedTitle:"vue组件创建",charIndex:191},{level:3,title:"Vue组件引用",slug:"vue组件引用",normalizedTitle:"vue组件引用",charIndex:204},{level:3,title:"核心配置文件",slug:"核心配置文件",normalizedTitle:"核心配置文件",charIndex:217},{level:3,title:"配置站点信息",slug:"配置站点信息",normalizedTitle:"配置站点信息",charIndex:229},{level:2,title:"属性配置",slug:"属性配置",normalizedTitle:"属性配置",charIndex:239},{level:2,title:"结束语",slug:"结束语",normalizedTitle:"结束语",charIndex:247}],headersStr:"前言 安装依赖 添加meta 添加在线图标 Vue模板 主题选择 在线主题 网站信息工具代码 站点信息代码 文章浏览量和字数代码 站点信息配置 本地主题 工具类 Vue组件创建 Vue组件引用 核心配置文件 配置站点信息 属性配置 结束语",content:"笔记\n\n本内容介绍如何搭建本站首页的站点信息，以及每篇文章的浏览量统计。\n\n2021-12-30 @村长\n\n\n\n * 前言\n * 安装依赖\n * 添加meta\n * 添加在线图标\n * Vue模板\n * 主题选择\n * 在线主题\n   * 网站信息工具代码\n   * 站点信息代码\n   * 文章浏览量和字数代码\n   * 站点信息配置\n * 本地主题\n   * 工具类\n   * Vue组件创建\n   * Vue组件引用\n   * 核心配置文件\n   * 配置站点信息\n * 属性配置\n * 结束语\n\n\n\n\n# 前言\n\n本内容将在首页和每篇的文章页加入了一些元素，目前适用版本是 Vdoing v1.x。\n\n效果如下：\n\n\n\n\n\n本站的访问量和文章的浏览量使用了 不蒜子插件，因为不蒜子利用域名来统计访问量，所以本地 localhost 肯定有很多人访问过，即本地编译后的首页访问量会很多，所以无需担心实际部署后的访问量。\n\n不蒜子官网地址：http://busuanzi.ibruce.info/\n\n不蒜子文档地址：http://ibruce.info/2015/04/04/busuanzi/\n\n注意\n\n问题：本模块目前有一个功能依赖于 git 的 lastUpdated 功能，该功能已经内置 Vuepress，所以无需担心，唯一值得注意的是：在本地添加了新的文件，最后活动时间的数据可能为 NaN（无法获取的意思）。\n\n解决：只需要在博客项目部署的过程中执行 git commit 命令，因为该命令将会获取一个准确的时间代替 NaN，给本模块使用。\n\n2022-01-17 @村长\n\n\n# 安装依赖\n\n官网推荐引入在线脚本，但是在 Vue 里，单页面跳转不会重新触发在线脚本，也就不会获取访问量。在线脚本仅在第一次加载页面时被触发，或者刷新网页被触发。所以会发现从一个文章跳转到另一个文章，另一个文章的浏览量是不会变化的，除非刷新页面。\n\n因此这里安装不蒜子依赖，利用 Vue 的 Router 监听路由的变化，一旦改变则重新触发不蒜子依赖，从而重新拉取访问量，解决上述的问题。\n\n直接在自己的项目安装依赖即可。\n\n * yarn 安装\n\nyarn add busuanzi.pure.js -D\n\n\n1\n\n * npm 安装\n\nnpm install busuanzi.pure.js --save\n\n\n1\n\n\n\n# 添加meta\n\n为什么添加 meta 头信息呢，因为在 Chrome 85 版本中，为了保护用户的隐私，默认的 Referrer Policy 则变成了 strict-origin-when-cross-origin。\n\n所以必须添加 meta，否则文章统计访问量的数据则不正确。\n\n在 docs/.vuepress/config.js 下的 head 中添加如下内容：\n\n['meta', { name: 'referrer', content: 'no-referrer-when-downgrade' }],\n\n\n1\n\n\n如图：\n\n\n\n\n# 添加在线图标\n\n这里使用的是阿里矢量库。\n\n地址：https://www.iconfont.cn/\n\n添加了五个图标\n\n\n\n如果你不想使用自己的矢量库项目（不害怕我删图标跑路🤣），那么可以使用我的图标项目网址，当你发现图标失效了，就请来这里获取新的地址，如果还没有更新，请在评论区留言。\n\n在 config.js 下的 head 中文件添加如下内容：\n\n['link', { rel: 'stylesheet', href: 'https://at.alicdn.com/t/font_3077305_pt8umhrn4k9.css' }]\n\n\n1\n\n\n如图：（图片的内容不一定是最新的，以上方代码块为准）\n\n\n\n\n# Vue模板\n\n这里先提供一个在 Vue 里常用的模板代码，即通用代码（了解即可）：\n\n<template>\n  <div class=\"busuanzi\">\n    <span id=\"busuanzi_container_site_pv\" style=\"display:none\">\n      本站总访问量\n      <span id=\"busuanzi_value_site_pv\"></span>次\n      <span class=\"post-meta-divider\">|</span>\n    </span>\n    <span id=\"busuanzi_container_site_uv\" style=\"display:none\">\n      本站访客数\n      <span id=\"busuanzi_value_site_uv\"></span>人\n    </span>\n  </div>\n</template>\n \n<script>\nlet script;\nexport default {\n  mounted() {\n    script = require(\"busuanzi.pure.js\");\n  },\n  // 监听，当路由发生变化的时候执行\n  watch: {\n    $route(to, from) {\n      if (to.path != from.path) {\n        script.fetch();\n      }\n    }\n  }\n};\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# 主题选择\n\n下面有两种配置方式可以选，分别为：\n\n * 在线主题：NPM 主题，采用监听路由、插入式的代码，所以视觉上会发现 500ms - 1000ms 左右出现渲染到页面上，目前我正在使用\n * 本地主题：站点信息模块没有延迟，与页面一起渲染出来\n\n本地主题不好的一点就是升级版本后曾修改的内容被重置，所以需要记好修改位置、备份，比较麻烦。好处是根据自己的需求在基础上拓展。\n\n\n# 在线主题\n\n如果你正在使用在线的主题，即不使用本地主题，那么在本内容开始我们的站点信息配置吧。\n\n\n# 网站信息工具代码\n\n添加网站信息需要的计算代码、获取字数代码等工具类。\n\n首先进入 docs/.vuepress 目录，创建 webSiteInfo 文件夹\n\n\n\n然后在 webSiteInfo 目录下创建 readFile.js 文件，这个文件用于 统计文章数目 和 网站总字数 等。\n\n添加如下内容：\n\nconst fs = require('fs'); // 文件模块\nconst path = require('path'); // 路径模块\nconst matter = require('gray-matter'); // FrontMatter解析器 https://github.com/jonschlinkert/gray-matter\nconst chalk = require('chalk') // 命令行打印美化\nconst log = console.log\nconst docsRoot = path.join(__dirname, '..', '..', '..', 'docs'); // docs文件路径\n\n/**\n * 获取本站的文章数据\n * 获取所有的 md 文档，可以排除指定目录下的文档\n */\nfunction readFileList(excludeFiles = [''], dir = docsRoot, filesList = []) {\n  const files = fs.readdirSync(dir);\n  files.forEach((item, index) => {\n    let filePath = path.join(dir, item);\n    const stat = fs.statSync(filePath);\n    if (!(excludeFiles instanceof Array)) {\n      log(chalk.yellow(`error: 传入的参数不是一个数组。`))\n    }\n    excludeFiles.forEach((excludeFile) => {\n      if (stat.isDirectory() && item !== '.vuepress' && item !== '@pages' && item !== excludeFile) {\n        readFileList(excludeFiles, path.join(dir, item), filesList);  //递归读取文件\n      } else {\n        if (path.basename(dir) !== 'docs') { // 过滤 docs目录级下的文件\n\n          const fileNameArr = path.basename(filePath).split('.')\n          let name = null, type = null;\n          if (fileNameArr.length === 2) { // 没有序号的文件\n            name = fileNameArr[0]\n            type = fileNameArr[1]\n          } else if (fileNameArr.length === 3) { // 有序号的文件\n            name = fileNameArr[1]\n            type = fileNameArr[2]\n          } else { // 超过两个‘.’的\n            log(chalk.yellow(`warning: 该文件 \"${filePath}\" 没有按照约定命名，将忽略生成相应数据。`))\n            return\n          }\n          if (type === 'md') { // 过滤非 md 文件\n            filesList.push({\n              name,\n              filePath\n            });\n          }\n        }\n      }\n    });\n  });\n  return filesList;\n}\n/**\n * 获取本站的文章总字数\n * 可以排除某个目录下的 md 文档字数\n */\nfunction readTotalFileWords(excludeFiles = ['']) {\n  const filesList = readFileList(excludeFiles);\n  var wordCount = 0;\n  filesList.forEach((item) => {\n    const content = getContent(item.filePath);\n    var len = counter(content);\n    wordCount += len[0] + len[1];\n  });\n  if (wordCount < 1000) {\n    return wordCount;\n  }\n  return Math.round(wordCount / 100) / 10 + 'k';\n}\n/**\n * 获取每一个文章的字数\n * 可以排除某个目录下的 md 文档字数\n */\nfunction readEachFileWords(excludeFiles = [''], cn, en) {\n  const filesListWords = [];\n  const filesList = readFileList(excludeFiles);\n  filesList.forEach((item) => {\n    const content = getContent(item.filePath);\n    var len = counter(content);\n    // 计算预计的阅读时间\n    var readingTime = readTime(len, cn, en);\n    var wordsCount = 0;\n    wordsCount = len[0] + len[1];\n    if (wordsCount >= 1000) {\n      wordsCount = Math.round(wordsCount / 100) / 10 + 'k';\n    }\n    // fileMatterObj => {content:'剔除frontmatter后的文件内容字符串', data:{<frontmatter对象>}, ...}\n    const fileMatterObj = matter(content, {});\n    const matterData = fileMatterObj.data;\n    filesListWords.push({ ...item, wordsCount, readingTime, ...matterData });\n  });\n  return filesListWords;\n}\n\n/**\n * 计算预计的阅读时间\n */\nfunction readTime(len, cn = 300, en = 160) {\n  var readingTime = len[0] / cn + len[1] / en;\n  if (readingTime > 60 && readingTime < 60 * 24) {   // 大于一个小时，小于一天\n    let hour = parseInt(readingTime / 60);\n    let minute = parseInt((readingTime - hour * 60));\n    if (minute === 0) {\n      return hour + 'h';\n    }\n    return hour + 'h' + minute + 'm';\n  } else if (readingTime > 60 * 24) {      // 大于一天\n    let day = parseInt(readingTime / (60 * 24));\n    let hour = parseInt((readingTime - day * 24 * 60) / 60);\n    if (hour === 0) {\n      return day + 'd';\n    }\n    return day + 'd' + hour + 'h';\n  }\n  return readingTime < 1 ? '1' : parseInt((readingTime * 10)) / 10 + 'm';   // 取一位小数\n}\n\n/**\n * 读取文件内容\n */\nfunction getContent(filePath) {\n  return fs.readFileSync(filePath, 'utf8');\n}\n/**\n * 获取文件内容的字数\n * cn：中文\n * en：一整句英文（没有空格隔开的英文为 1 个）\n */\nfunction counter(content) {\n  const cn = (content.match(/[\\u4E00-\\u9FA5]/g) || []).length;\n  const en = (content.replace(/[\\u4E00-\\u9FA5]/g, '').match(/[a-zA-Z0-9_\\u0392-\\u03c9\\u0400-\\u04FF]+|[\\u4E00-\\u9FFF\\u3400-\\u4dbf\\uf900-\\ufaff\\u3040-\\u309f\\uac00-\\ud7af\\u0400-\\u04FF]+|[\\u00E4\\u00C4\\u00E5\\u00C5\\u00F6\\u00D6]+|\\w+/g) || []).length;\n  return [cn, en];\n}\n\nmodule.exports = {\n  readFileList,\n  readTotalFileWords,\n  readEachFileWords,\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n\n\nimport fs from 'fs'; // 文件模块\nimport path from 'path'; // 路径模块\nimport matter from 'gray-matter'; // FrontMatter解析器 https://github.com/jonschlinkert/gray-matter\nimport chalk from 'chalk' // 命令行打印美化\nconst log = console.log\nconst docsRoot = path.join(__dirname, '..', '..', '..', 'docs'); // docs文件路径\n\n/**\n * 获取本站的文章数据\n * 获取所有的 md 文档，可以排除指定目录下的文档\n */\nfunction readFileList(excludeFiles = [''], dir = docsRoot, filesList = []) {\n  const files = fs.readdirSync(dir);\n  files.forEach((item, index) => {\n    let filePath = path.join(dir, item);\n    const stat = fs.statSync(filePath);\n    if (!(excludeFiles instanceof Array)) {\n      log(chalk.yellow(`error: 传入的参数不是一个数组。`))\n    }\n    excludeFiles.forEach((excludeFile) => {\n      if (stat.isDirectory() && item !== '.vuepress' && item !== '@pages' && item !== excludeFile) {\n        readFileList(excludeFiles, path.join(dir, item), filesList);  //递归读取文件\n      } else {\n        if (path.basename(dir) !== 'docs') { // 过滤 docs目录级下的文件\n\n          const fileNameArr = path.basename(filePath).split('.')\n          let name = null, type = null;\n          if (fileNameArr.length === 2) { // 没有序号的文件\n            name = fileNameArr[0]\n            type = fileNameArr[1]\n          } else if (fileNameArr.length === 3) { // 有序号的文件\n            name = fileNameArr[1]\n            type = fileNameArr[2]\n          } else { // 超过两个‘.’的\n            log(chalk.yellow(`warning: 该文件 \"${filePath}\" 没有按照约定命名，将忽略生成相应数据。`))\n            return\n          }\n          if (type === 'md') { // 过滤非 md 文件\n            filesList.push({\n              name,\n              filePath\n            });\n          }\n        }\n      }\n    });\n  });\n  return filesList;\n}\n/**\n * 获取本站的文章总字数\n * 可以排除某个目录下的 md 文档字数\n */\nfunction readTotalFileWords(excludeFiles = ['']) {\n  const filesList = readFileList(excludeFiles);\n  var wordCount = 0;\n  filesList.forEach((item) => {\n    const content = getContent(item.filePath);\n    var len = counter(content);\n    wordCount += len[0] + len[1];\n  });\n  if (wordCount < 1000) {\n    return wordCount;\n  }\n  return Math.round(wordCount / 100) / 10 + 'k';\n}\n/**\n * 获取每一个文章的字数\n * 可以排除某个目录下的 md 文档字数\n */\nfunction readEachFileWords(excludeFiles = [''], cn, en) {\n  const filesListWords = [];\n  const filesList = readFileList(excludeFiles);\n  filesList.forEach((item) => {\n    const content = getContent(item.filePath);\n    var len = counter(content);\n    // 计算预计的阅读时间\n    var readingTime = readTime(len, cn, en);\n    var wordsCount = 0;\n    wordsCount = len[0] + len[1];\n    if (wordsCount >= 1000) {\n      wordsCount = Math.round(wordsCount / 100) / 10 + 'k';\n    }\n    // fileMatterObj => {content:'剔除frontmatter后的文件内容字符串', data:{<frontmatter对象>}, ...}\n    const fileMatterObj = matter(content, {});\n    const matterData = fileMatterObj.data;\n    filesListWords.push({ ...item, wordsCount, readingTime, ...matterData });\n  });\n  return filesListWords;\n}\n\n/**\n * 计算预计的阅读时间\n */\nfunction readTime(len, cn = 300, en = 160) {\n  var readingTime = len[0] / cn + len[1] / en;\n  if (readingTime > 60 && readingTime < 60 * 24) {   // 大于一个小时，小于一天\n    let hour = parseInt(readingTime / 60);\n    let minute = parseInt((readingTime - hour * 60));\n    if (minute === 0) {\n      return hour + 'h';\n    }\n    return hour + 'h' + minute + 'm';\n  } else if (readingTime > 60 * 24) {      // 大于一天\n    let day = parseInt(readingTime / (60 * 24));\n    let hour = parseInt((readingTime - day * 24 * 60) / 60);\n    if (hour === 0) {\n      return day + 'd';\n    }\n    return day + 'd' + hour + 'h';\n  }\n  return readingTime < 1 ? '1' : parseInt((readingTime * 10)) / 10 + 'm';   // 取一位小数\n}\n\n/**\n * 读取文件内容\n */\nfunction getContent(filePath) {\n  return fs.readFileSync(filePath, 'utf8');\n}\n/**\n * 获取文件内容的字数\n * cn：中文\n * en：一整句英文（没有空格隔开的英文为 1 个）\n */\nfunction counter(content) {\n  const cn = (content.match(/[\\u4E00-\\u9FA5]/g) || []).length;\n  const en = (content.replace(/[\\u4E00-\\u9FA5]/g, '').match(/[a-zA-Z0-9_\\u0392-\\u03c9\\u0400-\\u04FF]+|[\\u4E00-\\u9FFF\\u3400-\\u4dbf\\uf900-\\ufaff\\u3040-\\u309f\\uac00-\\ud7af\\u0400-\\u04FF]+|[\\u00E4\\u00C4\\u00E5\\u00C5\\u00F6\\u00D6]+|\\w+/g) || []).length;\n  return [cn, en];\n}\n\nexport {\n  readFileList,\n  readTotalFileWords,\n  readEachFileWords,\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n\n\n接着继续在该目录下创建第二个文件 utils.js，该文件用于计算 已运行时间 和 最后活动时间。\n\n添加如下内容：\n\n// 日期格式化(只获取年月日)\nexport function dateFormat(date) {\n  if (!(date instanceof Date)) {\n    date = new Date(date);\n  }\n  return `${date.getUTCFullYear()}-${zero(date.getUTCMonth() + 1)}-${zero(date.getUTCDate())}`;\n}\n\n// 小于10补0\nexport function zero(d) {\n  return d.toString().padStart(2, '0');\n}\n\n/**\n * 计算最后活动时间\n */\nexport function lastUpdatePosts(posts) {\n  posts.sort((prev, next) => {\n    return compareDate(prev, next);\n  });\n  return posts;\n}\n\n// 获取时间的时间戳\nexport function getTimeNum(post) {\n  let dateStr = post.lastUpdated || post.frontmatter.date;\n  let date = new Date(dateStr);\n  if (date == \"Invalid Date\" && dateStr) { // 修复new Date()在Safari下出现Invalid Date的问题\n    date = new Date(dateStr.replace(/-/g, '/'));\n  }\n  return date.getTime();\n}\n\n// 比对时间\nexport function compareDate(a, b) {\n  return getTimeNum(b) - getTimeNum(a);\n}\n\n/**\n * 获取两个日期相差多少天\n */\nexport function dayDiff(startDate, endDate) {\n  if (!endDate) {\n    endDate = startDate;\n    startDate = new Date();\n  }\n  startDate = dateFormat(startDate);\n  endDate = dateFormat(endDate);\n  let day = parseInt(Math.abs(new Date(startDate) - new Date(endDate)) / (1000 * 60 * 60 * 24));\n  return day;\n}\n\n/**\n * 计算相差多少年/月/日/时/分/秒\n */\nexport function timeDiff(startDate, endDate) {\n  if (!endDate) {\n    endDate = startDate;\n    startDate = new Date();\n  }\n  if (!(startDate instanceof Date)) {\n    startDate = new Date(startDate);\n  }\n  if (!(endDate instanceof Date)) {\n    endDate = new Date(endDate);\n  }\n  // 计算时间戳的差\n  const diffValue = parseInt((Math.abs(endDate - startDate) / 1000));\n  if (diffValue == 0) {\n    return '刚刚';\n  } else if (diffValue < 60) {\n    return diffValue + ' 秒';\n  } else if (parseInt(diffValue / 60) < 60) {\n    return parseInt(diffValue / 60) + ' 分';\n  } else if (parseInt(diffValue / (60 * 60)) < 24) {\n    return parseInt(diffValue / (60 * 60)) + ' 时';\n  } else if (parseInt(diffValue / (60 * 60 * 24)) < getDays(startDate.getMonth, startDate.getFullYear)) {\n    return parseInt(diffValue / (60 * 60 * 24)) + ' 天';\n  } else if (parseInt(diffValue / (60 * 60 * 24 * getDays(startDate.getMonth, startDate.getFullYear))) < 12) {\n    return parseInt(diffValue / (60 * 60 * 24 * getDays(startDate.getMonth, startDate.getFullYear))) + ' 月';\n  } else {\n    return parseInt(diffValue / (60 * 60 * 24 * getDays(startDate.getMonth, startDate.getFullYear) * 12)) + ' 年';\n  }\n}\n\n/**\n * 判断当前月的天数（28、29、30、31）\n */\nexport function getDays(mouth, year) {\n  let days = 30;\n  if (mouth === 2) {\n    days = year % 4 === 0 ? 29 : 28;\n  } else if (mouth === 1 || mouth === 3 || mouth === 5 || mouth === 7 || mouth === 8 || mouth === 10 || mouth === 12) {\n    // 月份为：1,3,5,7,8,10,12 时，为大月.则天数为 31；\n    days = 31;\n  }\n  return days;\n}\n\n/**\n * 已运行时间低于一天显示时分秒\n * 目前该函数没有使用，低于一天直接显示不到一天\n */\nexport function getTime(startDate, endDate) {\n  if (day < 0) {\n    let hour = parseInt(Math.abs(new Date(startDate) - new Date(endDate)) / (1000 * 60 * 60));\n    if (hour > 0) {\n      let minute = parseInt(Math.abs(new Date(startDate) - new Date(endDate) - hour * 60 * 60 * 1000) / (1000 * 60));\n      if (minute > 0) {\n        let second = parseInt(Math.abs(new Date(startDate) - new Date(endDate) - hour * 60 * 60 * 1000 - minute * 60 * 1000) / (1000));\n        if (second != 0) {\n          return hour + ' 小时 ' + minute + ' 分钟 ' + second + ' 秒';\n        } else {\n          return hour + ' 小时 ' + minute + ' 分钟 ';\n        }\n      } else {\n        return hour + ' 小时 ';\n      }\n    } else {\n      let minute = parseInt(Math.abs(new Date(startDate) - new Date(endDate) - hour * 60 * 60 * 1000) / (1000 * 60));\n      if (minute > 0) {\n        let second = parseInt(Math.abs(new Date(startDate) - new Date(endDate) - hour * 60 * 60 * 1000 - minute * 60 * 1000) / (1000));\n        if (second != 0) {\n          return + minute + ' 分钟 ' + second + ' 秒';\n        } else {\n          return minute + ' 分钟 ';\n        }\n      } else {\n        return parseInt(Math.abs(new Date(startDate) - new Date(endDate) - hour * 60 * 60 * 1000 - minute * 60 * 1000) / (1000)) + ' 秒 ';\n      }\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n\n\n目前就两个文件，最终效果如图：\n\n\n\n\n# 站点信息代码\n\n这一步的文件目录不能随便移动，因为该目录是 Vuepress 规定的。\n\n首先进入 docs/.vuepress 目录，创建 components 文件夹\n\n\n\n创建一个 vue 文件：WebInfo.vue，这就是首页的站点信息模块。\n\n并添加如下内容：\n\n<template>\n  \x3c!-- 村长 --\x3e\n  <div class=\"web-info card-box\">\n    <div class=\"webinfo-title\">\n      <i\n        class=\"iconfont icon-award\"\n        style=\"font-size: 0.875rem; font-weight: 900; width: 1.25em\"\n      ></i>\n      <span>站点信息</span>\n    </div>\n    <div class=\"webinfo-item\">\n      <div class=\"webinfo-item-title\">文章数目：</div>\n      <div class=\"webinfo-content\">{{ mdFileCount }} 篇</div>\n    </div>\n\n    <div class=\"webinfo-item\">\n      <div class=\"webinfo-item-title\">已运行时间：</div>\n      <div class=\"webinfo-content\">\n        {{ createToNowDay != 0 ? createToNowDay + \" 天\" : \"不到一天\" }}\n      </div>\n    </div>\n\n    <div class=\"webinfo-item\">\n      <div class=\"webinfo-item-title\">本站总字数：</div>\n      <div class=\"webinfo-content\">{{ totalWords }} 字</div>\n    </div>\n\n    <div class=\"webinfo-item\">\n      <div class=\"webinfo-item-title\">最后活动时间：</div>\n      <div class=\"webinfo-content\">\n        {{ lastActiveDate == \"刚刚\" ? \"刚刚\" : lastActiveDate + \"前\" }}\n      </div>\n    </div>\n\n    <div v-if=\"indexView\" class=\"webinfo-item\">\n      <div class=\"webinfo-item-title\">本站被访问了：</div>\n      <div class=\"webinfo-content\">\n        <span id=\"busuanzi_value_site_pv\" class=\"web-site-pv\"\n          ><i title=\"正在获取...\" class=\"loading iconfont icon-loading\"></i>\n        </span>\n        次\n      </div>\n    </div>\n\n    <div v-if=\"indexView\" class=\"webinfo-item\">\n      <div class=\"webinfo-item-title\">您的访问排名：</div>\n      <div class=\"webinfo-content busuanzi\">\n        <span id=\"busuanzi_value_site_uv\" class=\"web-site-uv\"\n          ><i title=\"正在获取...\" class=\"loading iconfont icon-loading\"></i>\n        </span>\n        名\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { dayDiff, timeDiff, lastUpdatePosts } from \"../webSiteInfo/utils\";\nlet busuanzi; // 统计量\nexport default {\n  data() {\n    return {\n      // 村长\n      mdFileCount: 0, // markdown 文档总数\n      createToNowDay: 0, // 博客创建时间距今多少天\n      lastActiveDate: \"\", // 最后活动时间\n      totalWords: 0, // 本站总字数\n      indexView: true, // 开启访问量和排名统计\n    };\n  },\n  computed: {\n    $lastUpdatePosts() {\n      return lastUpdatePosts(this.$filterPosts);\n    },\n  },\n  mounted() {\n    // 村长\n    if (Object.keys(this.$themeConfig.blogInfo).length > 0) {\n      const {\n        blogCreate,\n        mdFileCountType,\n        totalWords,\n        moutedEvent,\n        eachFileWords,\n        indexIteration,\n        indexView,\n      } = this.$themeConfig.blogInfo;\n      this.createToNowDay = dayDiff(blogCreate);\n      if (mdFileCountType != \"archives\") {\n        this.mdFileCount = mdFileCountType.length;\n      } else {\n        this.mdFileCount = this.$filterPosts.length;\n      }\n      if (totalWords == \"archives\" && eachFileWords) {\n        let archivesWords = 0;\n        eachFileWords.forEach((itemFile) => {\n          if (itemFile.wordsCount < 1000) {\n            archivesWords += itemFile.wordsCount;\n          } else {\n            let wordsCount = itemFile.wordsCount.slice(\n              0,\n              itemFile.wordsCount.length - 1\n            );\n            archivesWords += wordsCount * 1000;\n          }\n        });\n        this.totalWords = Math.round(archivesWords / 100) / 10 + \"k\";\n      } else if (totalWords == \"archives\") {\n        this.totalWords = 0;\n        console.log(\n          \"如果 totalWords 使用 archives，必须传入 eachFileWords，显然您并没有传入！\"\n        );\n      } else {\n        this.totalWords = totalWords;\n      }\n      // 最后一次活动时间\n      this.lastActiveDate = timeDiff(this.$lastUpdatePosts[0].lastUpdated);\n      this.mountedWebInfo(moutedEvent);\n      // 获取访问量和排名\n      this.indexView = indexView == undefined ? true : indexView;\n      if (this.indexView) {\n        this.getIndexViewCouter(indexIteration);\n      }\n    }\n  },\n  methods: {\n    /**\n     * 挂载站点信息模块\n     */\n    mountedWebInfo(moutedEvent = \".tags-wrapper\") {\n      let interval = setInterval(() => {\n        const tagsWrapper = document.querySelector(moutedEvent);\n        const webInfo = document.querySelector(\".web-info\");\n        if (tagsWrapper && webInfo) {\n          if (!this.isSiblilngNode(tagsWrapper, webInfo)) {\n            tagsWrapper.parentNode.insertBefore(\n              webInfo,\n              tagsWrapper.nextSibling\n            );\n            clearInterval(interval);\n          }\n        }\n      }, 200);\n    },\n    /**\n     * 挂载在兄弟元素后面，说明当前组件是 siblingNode 变量\n     */\n    isSiblilngNode(element, siblingNode) {\n      if (element.siblingNode == siblingNode) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    /**\n     * 首页的统计量\n     */\n    getIndexViewCouter(iterationTime = 3000) {\n      if (busuanzi) {\n        busuanzi.fetch();\n      } else {\n        busuanzi = require(\"busuanzi.pure.js\");\n      }\n      var i = 0;\n      var defaultCouter = \"9999\";\n      // 如果 require 没有获取成功，则手动获取\n      // 但是容易产生访问量叠加，如果只需要第一次获取数据（可能获取失败），可注释掉，此内容是第一次获取失败后，重新获取访问量，可能导致访问量再次 + 1\n      // 取决于访问人的网络，以及 setTimeout 的时间（需求调节）\n      setTimeout(() => {\n        let interval = setInterval(() => {\n          const indexUv = document.querySelector(\".web-site-pv\");\n          const indexPv = document.querySelector(\".web-site-uv\");\n          if (indexPv || indexUv) {\n            i += iterationTime;\n            if (i > iterationTime * 10) {\n              indexPv.innerText = defaultCouter;\n              indexUv.innerText = defaultCouter;\n              clearInterval(interval); // 10 秒后无法获取，则取消获取\n            }\n            if (indexPv.innerText == \"\" && indexUv.innerText == \"\") {\n              // 手动获取访问量\n              busuanzi.fetch();\n            } else {\n              clearInterval(interval);\n            }\n          } else {\n            clearInterval(interval);\n          }\n        }, iterationTime);\n      }, iterationTime);\n    },\n  },\n};\n<\/script>\n\n<style scoped>\n.web-info {\n  font-size: 0.875rem;\n  padding: 0.95rem;\n}\n.webinfo-title {\n  text-align: center;\n  color: #888;\n  font-weight: bold;\n  padding: 0 0 10px 0;\n}\n.webinfo-item {\n  padding: 8px 0 0;\n  margin: 0;\n}\n.webinfo-item-title {\n  display: inline-block;\n}\n.webinfo-content {\n  display: inline-block;\n  float: right;\n}\n@keyframes turn {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n.loading {\n  display: inline-block;\n  animation: turn 1s linear infinite;\n  -webkit-animation: turn 1s linear infinite;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n\n\n最终效果如图：\n\n\n\n创建好了该 vue 组件，我们需要使用它，打开 docs/index.md\n\n\n\n移到最下方，添加如下内容：\n\n<ClientOnly>\n  <WebInfo/>\n</ClientOnly>\n\n\n1\n2\n3\n\n\n熟悉 vue 脚手架的人应该都有疑惑，那就是使用 vue 组件前，不需要引入吗？就像 import xxx from 'xx/xx.vue' 一样。\n\n其实 Vuepress 会自动扫描 .vuepress 是否有 components 目录，如果有并且里面有 .vue 组件，则自动将它们全局注册，所以直接在任何 md 文档按照组件名引入即可。\n\n这也告诉我们，可以直接在 components 目录写 vue 组件，然后按照组件名在任意 md 文档引入，即可看到效果。\n\n\n# 文章浏览量和字数代码\n\n首先进入 docs/.vuepress 目录，打开 enhanceApp.js 文件。该文件可以监听路由，然后 触发文章浏览量和字数的代码\n\nlet busuanzi;\n\nexport default ({\n  Vue, // VuePress 正在使用的 Vue 构造函数\n  options, // 附加到根实例的一些选项\n  router, // 当前应用的路由实例\n  siteData, // 站点元数据\n  isServer // 当前应用配置是处于 服务端渲染 或 客户端\n}) => {\n  /**\n   * 站点和文章页信息模块\n   */\n  if (!isServer) {\n    router.beforeEach((to, from, next) => {\n      next();\n      if (to.path !== '/' && to.path !== from.path && siteData.themeConfig.blogInfo) {  // 如果页面是非首页，# 号也会触发路由变化，这里已经排除掉\n        // 刷新页面或进入新的页面后，如果原来位置的内容还存在，则删除掉，最后重新插入渲染\n        removeElement('.page-view-js');\n        removeElement('.page-view');\n        removeElement('.book-words');\n        removeElement('.reading-time');\n        siteData.pages.forEach((itemPage) => {\n          if (itemPage.path == to.path) {\n            if (itemPage.frontmatter.article == undefined || itemPage.frontmatter.article) {  // 排除掉 article 为 false 的文章\n              const { eachFileWords, pageView, pageIteration, readingTime } = siteData.themeConfig.blogInfo;\n              // 下面两个 if 可以调换位置，从而让文章的浏览量和字数内容交换\n              if (eachFileWords) {\n                eachFileWords.forEach((itemFile) => {\n                  if (itemFile.permalink == itemPage.frontmatter.permalink) {\n                    addPageWordsCount(itemFile.wordsCount);\n                    if (readingTime || readingTime == undefined) {\n                      addReadTimeCount(itemFile.readingTime);\n                    }\n                  }\n                });\n              }\n              if (pageView || pageView == undefined) {\n                addPageView();\n                // 挂载成功需要一点时间\n                setTimeout(() => {\n                  getPageViewCouter(pageIteration);\n                }, 1500);\n              }\n\n              return;\n            }\n          }\n        })\n      }\n    })\n  }\n}\n/**\n * 如果元素存在，则删除\n */\nfunction removeElement(selector) {\n  var element = document.querySelector(selector);\n  if (element) {\n    element.parentNode.removeChild(element);\n  }\n}\n\n/**\n * 文章页的访问量\n */\nfunction getPageViewCouter(iterationTime = 3000) {\n  if (busuanzi) {\n    busuanzi.fetch();\n  } else {\n    busuanzi = require(\"busuanzi.pure.js\");\n  }\n  var i = 0;\n  var defaultCouter = '9999';\n  // 如果 require 没有获取成功，则手动获取\n  // 但是容易产生访问量叠加，如果只需要第一次获取数据（可能获取失败），可注释掉，此内容是第一次获取失败后，重新获取访问量，可能导致访问量再次 + 1\n  // 取决于访问人的网络，以及 setTimeout 的时间（需求调节）\n  setTimeout(() => {\n    let interval = setInterval(() => {\n      const pageView = document.querySelector('.view-data');\n      if (pageView) {\n        i += iterationTime;\n        if (i > iterationTime * 10) {\n          pageView.innerText = defaultCouter;\n          clearInterval(interval);  // 10 秒后无法获取，则取消获取\n        }\n        if (pageView.innerText == \"\") {\n          // 手动获取访问量\n          busuanzi.fetch();\n        } else {\n          clearInterval(interval);\n        }\n      } else {\n        clearInterval(interval);\n      }\n    }, iterationTime);\n  }, iterationTime);\n}\n/**\n * 添加浏览量元素\n */\nfunction addPageView() {\n  // 创建访问量的元素\n  let template = document.createElement('div');\n  template.title = '浏览量';\n  template.className = 'page-view iconfont icon-view';\n  template.style.float = 'left';\n  template.style.marginLeft = '20px';\n  template.style.fontSize = '0.8rem';\n  // template.innerHTML = '<span id=\"busuanzi_container_page_pv\" style=\"display: none; margin-left: 3px\"><a style=\"color: #888\" href=\"javascript:;\" id=\"busuanzi_value_page_pv\" class=\"view-data\"></a></span>';\n  template.innerHTML = '<a style=\"color: #888; margin-left: 3px\" href=\"javascript:;\" id=\"busuanzi_value_page_pv\" class=\"view-data\"><i title=\"正在获取...\" class=\"loading iconfont icon-loading\"></i></a>';\n  mountedView(template);\n  // 添加 loading 效果\n  let style = document.createElement(\"style\");\n  style.innerHTML = `@keyframes turn {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n  .loading {\n    display: inline-block;\n    animation: turn 1s linear infinite;\n    -webkit-animation: turn 1s linear infinite;\n  }`;\n  document.head.appendChild(style);\n}\n/**\n * 添加当前文章页的字数元素\n */\nfunction addPageWordsCount(wordsCount) {\n  if (wordsCount) {\n    let template = document.createElement('div');\n    template.title = '文章字数';\n    template.className = 'book-words iconfont icon-book';\n    template.style.float = 'left';\n    template.style.marginLeft = '20px';\n    template.style.fontSize = '0.8rem';\n\n    template.innerHTML = `<a href=\"javascript:;\" style=\"margin-left: 3px; color: #888\">${wordsCount}</a>`;\n    mountedView(template);\n  }\n}\n\n/**\n * 添加预计的阅读时间\n */\nfunction addReadTimeCount(readTimeCount) {\n  let template = document.createElement('div');\n  template.title = '预阅读时长';\n  template.className = 'reading-time iconfont icon-shijian';\n  template.style.float = 'left';\n  template.style.marginLeft = '20px';\n  template.style.fontSize = '0.8rem';\n  template.innerHTML = `<a href=\"javascript:;\" style=\"margin-left: 3px; color: #888\">${readTimeCount}</a>`;\n  mountedView(template);\n}\n\n/**\n * 挂载目标到页面上\n */\nfunction mountedView(template, moutedParentEvent = '.articleInfo-wrap > .articleInfo > .info') {\n  var i = 0;\n  let interval = setInterval(() => {\n    i++;\n    const parentElement = document.querySelector(moutedParentEvent);\n    if (parentElement) {\n      if (!isMountedView(template, parentElement)) {\n        parentElement.appendChild(template);\n        clearInterval(interval);\n      }\n    } else if (i > 1 * 10) {  // 10 秒后清除\n      clearInterval(interval);\n    }\n  }, 1000);\n}\n/**\n * 目标是否已经挂载在页面上\n */\nfunction isMountedView(element, parentElement) {\n  if (element.parentNode == parentElement) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n\n\n\n# 站点信息配置\n\n上面都按照步骤写好代码、使用组件了，那么就可以走最后一步配置我们的站点信息。\n\n进入到 docs/.vuepress/config.js（新版为 config.ts）文件。\n\n引入之前写好的工具代码文件：（路径要准确，这里仅仅是模板）\n\nconst { readFileList, readTotalFileWords, readEachFileWords } = require('./webSiteInfo/readFile');\n\n\n1\n\n\nimport { readFileList, readTotalFileWords, readEachFileWords } from './webSiteInfo/readFile';\n\n\n1\n\n\n如图（演示 JS 代码块）：\n\n\n\n在 themeConfig 中添加如下内容：\n\n// 站点配置（首页 & 文章页）\nblogInfo: {\n  blogCreate: '2021-10-19', // 博客创建时间\n  indexView: true,  // 开启首页的访问量和排名统计，默认 true（开启）\n  pageView: true,  // 开启文章页的浏览量统计，默认 true（开启）\n  readingTime: true,  // 开启文章页的预计阅读时间，条件：开启 eachFileWords，默认 true（开启）。可在 eachFileWords 的 readEachFileWords 的第二个和第三个参数自定义，默认 1 分钟 300 中文、160 英文\n  eachFileWords: readEachFileWords([''], 300, 160),  // 开启每个文章页的字数。readEachFileWords(['xx']) 关闭 xx 目录（可多个，可不传参数）下的文章页字数和阅读时长，后面两个参数分别是 1 分钟里能阅读的中文字数和英文字数。无默认值。readEachFileWords() 方法默认排除了 article 为 false 的文章\n  mdFileCountType: 'archives',  // 开启文档数。1. archives 获取归档的文档数（默认）。2. 数组 readFileList(['xx']) 排除 xx 目录（可多个，可不传参数），获取其他目录的文档数。提示：readFileList() 获取 docs 下所有的 md 文档（除了 `.vuepress` 和 `@pages` 目录下的文档）\n  totalWords: 'archives',  // 开启本站文档总字数。1. archives 获取归档的文档数（使用 archives 条件：传入 eachFileWords，否则报错）。2. readTotalFileWords(['xx']) 排除 xx 目录（可多个，可不传参数），获取其他目录的文章字数。无默认值\n  moutedEvent: '.tags-wrapper',   // 首页的站点模块挂载在某个元素后面（支持多种选择器），指的是挂载在哪个兄弟元素的后面，默认是热门标签 '.tags-wrapper' 下面，提示：'.categories-wrapper' 会挂载在文章分类下面。'.blogger-wrapper' 会挂载在博客头像模块下面\n  // 下面两个选项：第一次获取访问量失败后的迭代时间\n  indexIteration: 2500,   // 如果首页获取访问量失败，则每隔多少时间后获取一次访问量，直到获取成功或获取 10 次后。默认 3 秒。注意：设置时间太低，可能导致访问量 + 2、+ 3 ......\n  pageIteration: 2500,    // 如果文章页获取访问量失败，则每隔多少时间后获取一次访问量，直到获取成功或获取 10 次后。默认 3 秒。注意：设置时间太低，可能导致访问量 + 2、+ 3 ......\n  // 说明：成功获取一次访问量，访问量 + 1，所以第一次获取失败后，设置的每个隔段重新获取时间，将会影响访问量的次数。如 100 可能每次获取访问量 + 3\n},\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n如图（图片内容不一定是最新，最新的是代码块内容）：\n\n\n\n属性配置的具体介绍请看 属性配置。\n\n\n# 本地主题\n\n如果已经看完了在线主题的内容，其实本内容的大小不变，只是位置变换、一些代码重组。\n\n配置了在线主题，就不需要配置本地主题，反之亦然。\n\n\n# 工具类\n\n在 vdoing/util 目录下创建 webSiteInfo.js，添加如下内容：\n\n// 日期格式化(只获取年月日)\nexport function dateFormat(date) {\n  if (!(date instanceof Date)) {\n    date = new Date(date);\n  }\n  return `${date.getUTCFullYear()}-${zero(date.getUTCMonth() + 1)}-${zero(date.getUTCDate())}`;\n}\n\n// 小于10补0\nexport function zero(d) {\n  return d.toString().padStart(2, '0');\n}\n\n/**\n * 计算最后活动时间\n */\nexport function lastUpdatePosts(posts) {\n  posts.sort((prev, next) => {\n    return compareDate(prev, next);\n  });\n  return posts;\n}\n\n// 获取时间的时间戳\nexport function getTimeNum(post) {\n  let dateStr = post.lastUpdated || post.frontmatter.date;\n  let date = new Date(dateStr);\n  if (date == \"Invalid Date\" && dateStr) { // 修复new Date()在Safari下出现Invalid Date的问题\n    date = new Date(dateStr.replace(/-/g, '/'));\n  }\n  return date.getTime();\n}\n\n// 比对时间\nexport function compareDate(a, b) {\n  return getTimeNum(b) - getTimeNum(a);\n}\n\n/**\n * 获取两个日期相差多少天\n */\nexport function dayDiff(startDate, endDate) {\n  if (!endDate) {\n    endDate = startDate;\n    startDate = new Date();\n  }\n  startDate = dateFormat(startDate);\n  endDate = dateFormat(endDate);\n  let day = parseInt(Math.abs(new Date(startDate) - new Date(endDate)) / (1000 * 60 * 60 * 24));\n  return day;\n}\n\n/**\n * 计算相差多少年/月/日/时/分/秒\n */\nexport function timeDiff(startDate, endDate) {\n  if (!endDate) {\n    endDate = startDate;\n    startDate = new Date();\n  }\n  if (!(startDate instanceof Date)) {\n    startDate = new Date(startDate);\n  }\n  if (!(endDate instanceof Date)) {\n    endDate = new Date(endDate);\n  }\n  // 计算时间戳的差\n  const diffValue = parseInt((Math.abs(endDate - startDate) / 1000));\n  if (diffValue == 0) {\n    return '刚刚';\n  } else if (diffValue < 60) {\n    return diffValue + ' 秒';\n  } else if (parseInt(diffValue / 60) < 60) {\n    return parseInt(diffValue / 60) + ' 分';\n  } else if (parseInt(diffValue / (60 * 60)) < 24) {\n    return parseInt(diffValue / (60 * 60)) + ' 时';\n  } else if (parseInt(diffValue / (60 * 60 * 24)) < getDays(startDate.getMonth, startDate.getFullYear)) {\n    return parseInt(diffValue / (60 * 60 * 24)) + ' 天';\n  } else if (parseInt(diffValue / (60 * 60 * 24 * getDays(startDate.getMonth, startDate.getFullYear))) < 12) {\n    return parseInt(diffValue / (60 * 60 * 24 * getDays(startDate.getMonth, startDate.getFullYear))) + ' 月';\n  } else {\n    return parseInt(diffValue / (60 * 60 * 24 * getDays(startDate.getMonth, startDate.getFullYear) * 12)) + ' 年';\n  }\n}\n\n/**\n * 判断当前月的天数（28、29、30、31）\n */\nexport function getDays(mouth, year) {\n  let days = 30;\n  if (mouth === 2) {\n    days = year % 4 === 0 ? 29 : 28;\n  } else if (mouth === 1 || mouth === 3 || mouth === 5 || mouth === 7 || mouth === 8 || mouth === 10 || mouth === 12) {\n    // 月份为：1,3,5,7,8,10,12 时，为大月.则天数为 31；\n    days = 31;\n  }\n  return days;\n}\n\n/**\n * 已运行时间低于一天显示时分秒\n * 目前该函数没有使用，低于一天直接显示不到一天\n */\nexport function getTime(startDate, endDate) {\n  if (day < 0) {\n    let hour = parseInt(Math.abs(new Date(startDate) - new Date(endDate)) / (1000 * 60 * 60));\n    if (hour > 0) {\n      let minute = parseInt(Math.abs(new Date(startDate) - new Date(endDate) - hour * 60 * 60 * 1000) / (1000 * 60));\n      if (minute > 0) {\n        let second = parseInt(Math.abs(new Date(startDate) - new Date(endDate) - hour * 60 * 60 * 1000 - minute * 60 * 1000) / (1000));\n        if (second != 0) {\n          return hour + ' 小时 ' + minute + ' 分钟 ' + second + ' 秒';\n        } else {\n          return hour + ' 小时 ' + minute + ' 分钟 ';\n        }\n      } else {\n        return hour + ' 小时 ';\n      }\n    } else {\n      let minute = parseInt(Math.abs(new Date(startDate) - new Date(endDate) - hour * 60 * 60 * 1000) / (1000 * 60));\n      if (minute > 0) {\n        let second = parseInt(Math.abs(new Date(startDate) - new Date(endDate) - hour * 60 * 60 * 1000 - minute * 60 * 1000) / (1000));\n        if (second != 0) {\n          return + minute + ' 分钟 ' + second + ' 秒';\n        } else {\n          return minute + ' 分钟 ';\n        }\n      } else {\n        return parseInt(Math.abs(new Date(startDate) - new Date(endDate) - hour * 60 * 60 * 1000 - minute * 60 * 1000) / (1000)) + ' 秒 ';\n      }\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n\n\n\n# Vue组件创建\n\n需要两个 Vue 组件，分别是首页的站点信息模块和文章页信息模块。\n\n在 vdoing/components 目录下创建 WebInfo.vue 文件，添加如下内容：\n\n<template>\n  \x3c!-- 村长 --\x3e\n  <div class=\"web-info card-box\">\n    <div class=\"webinfo-title\">\n      <i\n        class=\"iconfont icon-award\"\n        style=\"font-size: 0.875rem; font-weight: 900; width: 1.25em\"\n      ></i>\n      <span>站点信息</span>\n    </div>\n    <div class=\"webinfo-item\">\n      <div class=\"webinfo-item-title\">文章数目：</div>\n      <div class=\"webinfo-content\">{{ mdFileCount }} 篇</div>\n    </div>\n\n    <div class=\"webinfo-item\">\n      <div class=\"webinfo-item-title\">已运行时间：</div>\n      <div class=\"webinfo-content\">\n        {{ createToNowDay != 0 ? createToNowDay + \" 天\" : \"不到一天\" }}\n      </div>\n    </div>\n\n    <div class=\"webinfo-item\">\n      <div class=\"webinfo-item-title\">本站总字数：</div>\n      <div class=\"webinfo-content\">{{ totalWords }} 字</div>\n    </div>\n\n    <div class=\"webinfo-item\">\n      <div class=\"webinfo-item-title\">最后活动时间：</div>\n      <div class=\"webinfo-content\">\n        {{ lastActiveDate == \"刚刚\" ? \"刚刚\" : lastActiveDate + \"前\" }}\n      </div>\n    </div>\n\n    <div v-if=\"indexView\" class=\"webinfo-item\">\n      <div class=\"webinfo-item-title\">本站被访问了：</div>\n      <div class=\"webinfo-content\">\n        <span id=\"busuanzi_value_site_pv\" class=\"web-site-pv\"\n          ><i title=\"正在获取...\" class=\"loading iconfont icon-loading\"></i>\n        </span>\n        次\n      </div>\n    </div>\n\n    <div v-if=\"indexView\" class=\"webinfo-item\">\n      <div class=\"webinfo-item-title\">您的访问排名：</div>\n      <div class=\"webinfo-content busuanzi\">\n        <span id=\"busuanzi_value_site_uv\" class=\"web-site-uv\"\n          ><i title=\"正在获取...\" class=\"loading iconfont icon-loading\"></i>\n        </span>\n        名\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { dayDiff, timeDiff, lastUpdatePosts } from \"../webSiteInfo/utils\";\nlet busuanzi; // 统计量\nexport default {\n  data() {\n    return {\n      // 村长\n      mdFileCount: 0, // markdown 文档总数\n      createToNowDay: 0, // 博客创建时间距今多少天\n      lastActiveDate: \"\", // 最后活动时间\n      totalWords: 0, // 本站总字数\n      indexView: true, // 开启访问量和排名统计\n    };\n  },\n  computed: {\n    $lastUpdatePosts() {\n      return lastUpdatePosts(this.$filterPosts);\n    },\n  },\n  mounted() {\n    // 村长\n    if (Object.keys(this.$themeConfig.blogInfo).length > 0) {\n      const {\n        blogCreate,\n        mdFileCountType,\n        totalWords,\n        moutedEvent,\n        eachFileWords,\n        indexIteration,\n        indexView,\n      } = this.$themeConfig.blogInfo;\n      this.createToNowDay = dayDiff(blogCreate);\n      if (mdFileCountType != \"archives\") {\n        this.mdFileCount = mdFileCountType.length;\n      } else {\n        this.mdFileCount = this.$filterPosts.length;\n      }\n      if (totalWords == \"archives\" && eachFileWords) {\n        let archivesWords = 0;\n        eachFileWords.forEach((itemFile) => {\n          if (itemFile.wordsCount < 1000) {\n            archivesWords += itemFile.wordsCount;\n          } else {\n            let wordsCount = itemFile.wordsCount.slice(\n              0,\n              itemFile.wordsCount.length - 1\n            );\n            archivesWords += wordsCount * 1000;\n          }\n        });\n        this.totalWords = Math.round(archivesWords / 100) / 10 + \"k\";\n      } else if (totalWords == \"archives\") {\n        this.totalWords = 0;\n        console.log(\n          \"如果 totalWords 使用 archives，必须传入 eachFileWords，显然您并没有传入！\"\n        );\n      } else {\n        this.totalWords = totalWords;\n      }\n      // 最后一次活动时间\n      this.lastActiveDate = timeDiff(this.$lastUpdatePosts[0].lastUpdated);\n      this.mountedWebInfo(moutedEvent);\n      // 获取访问量和排名\n      this.indexView = indexView == undefined ? true : indexView;\n      if (this.indexView) {\n        this.getIndexViewCouter(indexIteration);\n      }\n    }\n  },\n  methods: {\n    /**\n     * 挂载站点信息模块\n     */\n    mountedWebInfo(moutedEvent = \".tags-wrapper\") {\n      let interval = setInterval(() => {\n        const tagsWrapper = document.querySelector(moutedEvent);\n        const webInfo = document.querySelector(\".web-info\");\n        if (tagsWrapper && webInfo) {\n          if (!this.isSiblilngNode(tagsWrapper, webInfo)) {\n            tagsWrapper.parentNode.insertBefore(\n              webInfo,\n              tagsWrapper.nextSibling\n            );\n            clearInterval(interval);\n          }\n        }\n      }, 200);\n    },\n    /**\n     * 挂载在兄弟元素后面，说明当前组件是 siblingNode 变量\n     */\n    isSiblilngNode(element, siblingNode) {\n      if (element.siblingNode == siblingNode) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    /**\n     * 首页的统计量\n     */\n    getIndexViewCouter(iterationTime = 3000) {\n      if (busuanzi) {\n        busuanzi.fetch();\n      } else {\n        busuanzi = require(\"busuanzi.pure.js\");\n      }\n      var i = 0;\n      var defaultCouter = \"9999\";\n      // 如果 require 没有获取成功，则手动获取\n      // 但是容易产生访问量叠加，如果只需要第一次获取数据（可能获取失败），可注释掉，此内容是第一次获取失败后，重新获取访问量，可能导致访问量再次 + 1\n      // 取决于访问人的网络，以及 setTimeout 的时间（需求调节）\n      setTimeout(() => {\n        let interval = setInterval(() => {\n          const indexUv = document.querySelector(\".web-site-pv\");\n          const indexPv = document.querySelector(\".web-site-uv\");\n          if (indexPv || indexUv) {\n            i += iterationTime;\n            if (i > iterationTime * 10) {\n              indexPv.innerText = defaultCouter;\n              indexUv.innerText = defaultCouter;\n              clearInterval(interval); // 10 秒后无法获取，则取消获取\n            }\n            if (indexPv.innerText == \"\" && indexUv.innerText == \"\") {\n              // 手动获取访问量\n              busuanzi.fetch();\n            } else {\n              clearInterval(interval);\n            }\n          } else {\n            clearInterval(interval);\n          }\n        }, iterationTime);\n      }, iterationTime);\n    },\n  },\n};\n<\/script>\n\n<style scoped>\n.web-info {\n  font-size: 0.875rem;\n  padding: 0.95rem;\n}\n.webinfo-title {\n  text-align: center;\n  color: #888;\n  font-weight: bold;\n  padding: 0 0 10px 0;\n}\n.webinfo-item {\n  padding: 8px 0 0;\n  margin: 0;\n}\n.webinfo-item-title {\n  display: inline-block;\n}\n.webinfo-content {\n  display: inline-block;\n  float: right;\n}\n@keyframes turn {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n.loading {\n  display: inline-block;\n  animation: turn 1s linear infinite;\n  -webkit-animation: turn 1s linear infinite;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n\n\n继续在 vdoing/components 目录下创建 PagesView.vue 文件，添加如下内容：\n\n<template>\n  <div class=\"page-view\">\n    \x3c!-- 文章字数 --\x3e\n    <div title=\"文章字数\" class=\"book-words iconfont icon-book\">\n      <a href=\"javascript:;\" style=\"margin-left: 3px; color: #888\">{{\n        wordsCount\n      }}</a>\n    </div>\n\n    \x3c!-- 预阅读时长 --\x3e\n    <div v-if=\"readingTime\" title=\"预阅读时长\" class=\"reading-time iconfont icon-shijian\">\n      <a href=\"javascript:;\" style=\"margin-left: 3px; color: #888\">{{\n        readingTime\n      }}</a>\n    </div>\n    \x3c!-- 浏览量 --\x3e\n    <div v-if=\"pageView\" title=\"浏览量\" class=\"page-view iconfont icon-view\">\n      <a\n        style=\"color: #888; margin-left: 3px\"\n        href=\"javascript:;\"\n        id=\"busuanzi_value_page_pv\"\n        class=\"view-data\"\n        ><i title=\"正在获取...\" class=\"loading iconfont icon-loading\"></i\n      ></a>\n    </div>\n  </div>\n</template>\n\n<script>\nlet busuanzi;\nexport default {\n  data() {\n    return {\n      // 村长\n      wordsCount: 0,\n      readingTime: 0,\n      pageView: true,\n      pageIteration: 3000,\n    };\n  },\n  mounted() {\n    this.$filterPosts.forEach((itemPage) => {\n      if (itemPage.path == this.$route.path) {\n        const { eachFileWords, pageView, pageIteration, readingTime } =\n          this.$themeConfig.blogInfo;\n        this.pageIteration = pageIteration;\n        if (eachFileWords) {\n          eachFileWords.forEach((itemFile) => {\n            if (itemFile.permalink == itemPage.frontmatter.permalink) {\n              this.wordsCount = itemFile.wordsCount;\n              if (readingTime || readingTime == undefined) {\n                this.readingTime = itemFile.readingTime;\n              }else {\n                this.readingTime = false;\n              }\n            }\n          });\n        }\n        this.pageView = pageView == undefined ? true : pageView;\n        if(this.pageView){\n          this.getPageViewCouter(this.pageIteration);\n        }\n        return;\n      }\n    });\n  },\n  watch: {\n    $route(to, from) {\n      if (from.path === '/' && from.matched && from.matched.length === 0) {    // 如果页面是刷新或者第一次进入\n        // 刷新或者第一次进入不需要在这里重新获取\n      }else if (to.path !== '/' && to.path != from.path) {\n        if(this.pageView){\n          this.getPageViewCouter(this.pageIteration);\n        }\n      }\n    }\n  },\n  methods: {\n    /**\n     * 文章页的访问量\n     */\n    getPageViewCouter(iterationTime = 3000) {\n      if (busuanzi) {\n        busuanzi.fetch();\n      } else {\n        busuanzi = require(\"busuanzi.pure.js\");\n      }\n      var i = 0;\n      var defaultCouter = \"9999\";\n      // 如果 require 没有获取成功，则手动获取\n      // 但是容易产生访问量叠加，如果只需要第一次获取数据（可能获取失败），可注释掉，此内容是第一次获取失败后，重新获取访问量，可能导致访问量再次 + 1\n      // 取决于访问人的网络，以及 setTimeout 的时间（需求调节）\n      setTimeout(() => {\n        let interval = setInterval(() => {\n          const pageView = document.querySelector(\".view-data\");\n          if (pageView) {\n            i += iterationTime;\n            if (i > iterationTime * 10) {\n              pageView.innerText = defaultCouter;\n              clearInterval(interval); // 10 秒后无法获取，则取消获取\n            }\n            if (pageView.innerText == \"\") {\n              // 手动获取访问量\n              busuanzi.fetch();\n            } else {\n              clearInterval(interval);\n            }\n          } else {\n            clearInterval(interval);\n          }\n        }, iterationTime);\n      }, iterationTime);\n    },\n  },\n};\n<\/script>\n\n<style scoped>\n.page-view > div {\n  float: left;\n  margin-left: 20px;\n  font-size: 0.8rem;\n}\n\n@keyframes turn {\n  0% {\n    transform: rotate(0deg);\n  }\n\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n.loading {\n  display: inline-block;\n  animation: turn 1s linear infinite;\n  -webkit-animation: turn 1s linear infinite;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n\n\n\n# Vue组件引用\n\n写好两个组件，那么我们需要使用它们。\n\n首先引入 WebInfo.vue 组件，打开 vdoing/components/Home.vue 文件。\n\n大概在 174 行处引入 WebInfo.vue 组件：\n\nimport WebInfo from './WebInfo.vue';\n\n\n1\n\n\n大概在 242 行处找到 components 注册该组件：\n\ncomponents: { ......, WebInfo },\n\n\n1\n\n\n大概在 153 行处（div 的 class 为 custom-html-box 的上方），添加如下内容：\n\n<webInfo />\n\n\n1\n\n\n三个效果图：\n\n\n\n\n\n\n\n接着引入 PagesView.vue 组件，打开 vdoing/components/ArticleInfo.vue 文件。\n\n大概在 67 行处引入 PagesView.vue 组件：\n\nimport PagesView from './PagesView.vue';\n\n\n1\n\n\n大概在 69 行处添加 components 注册该组件：\n\ncomponents: { PagesView },\n\n\n1\n\n\n大概在 61 行处，添加如下内容：\n\n<PagesView style=\"margin-left: 0\" />\n\n\n1\n\n\n效果图：\n\n\n\n\n# 核心配置文件\n\n在 docs/.vuepress 目录下创建 webSiteInfo 文件夹，并在文件夹里创建 readFile.js 文件。\n\n添加如下内容：\n\nconst fs = require('fs'); // 文件模块\nconst path = require('path'); // 路径模块\nconst matter = require('gray-matter'); // FrontMatter解析器 https://github.com/jonschlinkert/gray-matter\nconst chalk = require('chalk') // 命令行打印美化\nconst log = console.log\nconst docsRoot = path.join(__dirname, '..', '..', '..', 'docs'); // docs文件路径\n\n/**\n * 获取本站的文章数据\n * 获取所有的 md 文档，可以排除指定目录下的文档\n */\nfunction readFileList(excludeFiles = [''], dir = docsRoot, filesList = []) {\n  const files = fs.readdirSync(dir);\n  files.forEach((item, index) => {\n    let filePath = path.join(dir, item);\n    const stat = fs.statSync(filePath);\n    if (!(excludeFiles instanceof Array)) {\n      log(chalk.yellow(`error: 传入的参数不是一个数组。`))\n    }\n    excludeFiles.forEach((excludeFile) => {\n      if (stat.isDirectory() && item !== '.vuepress' && item !== '@pages' && item !== excludeFile) {\n        readFileList(excludeFiles, path.join(dir, item), filesList);  //递归读取文件\n      } else {\n        if (path.basename(dir) !== 'docs') { // 过滤 docs目录级下的文件\n\n          const fileNameArr = path.basename(filePath).split('.')\n          let name = null, type = null;\n          if (fileNameArr.length === 2) { // 没有序号的文件\n            name = fileNameArr[0]\n            type = fileNameArr[1]\n          } else if (fileNameArr.length === 3) { // 有序号的文件\n            name = fileNameArr[1]\n            type = fileNameArr[2]\n          } else { // 超过两个‘.’的\n            log(chalk.yellow(`warning: 该文件 \"${filePath}\" 没有按照约定命名，将忽略生成相应数据。`))\n            return\n          }\n          if (type === 'md') { // 过滤非 md 文件\n            filesList.push({\n              name,\n              filePath\n            });\n          }\n        }\n      }\n    });\n  });\n  return filesList;\n}\n/**\n * 获取本站的文章总字数\n * 可以排除某个目录下的 md 文档字数\n */\nfunction readTotalFileWords(excludeFiles = ['']) {\n  const filesList = readFileList(excludeFiles);\n  var wordCount = 0;\n  filesList.forEach((item) => {\n    const content = getContent(item.filePath);\n    var len = counter(content);\n    wordCount += len[0] + len[1];\n  });\n  if (wordCount < 1000) {\n    return wordCount;\n  }\n  return Math.round(wordCount / 100) / 10 + 'k';\n}\n/**\n * 获取每一个文章的字数\n * 可以排除某个目录下的 md 文档字数\n */\nfunction readEachFileWords(excludeFiles = [''], cn, en) {\n  const filesListWords = [];\n  const filesList = readFileList(excludeFiles);\n  filesList.forEach((item) => {\n    const content = getContent(item.filePath);\n    var len = counter(content);\n    // 计算预计的阅读时间\n    var readingTime = readTime(len, cn, en);\n    var wordsCount = 0;\n    wordsCount = len[0] + len[1];\n    if (wordsCount >= 1000) {\n      wordsCount = Math.round(wordsCount / 100) / 10 + 'k';\n    }\n    // fileMatterObj => {content:'剔除frontmatter后的文件内容字符串', data:{<frontmatter对象>}, ...}\n    const fileMatterObj = matter(content, {});\n    const matterData = fileMatterObj.data;\n    filesListWords.push({ ...item, wordsCount, readingTime, ...matterData });\n  });\n  return filesListWords;\n}\n\n/**\n * 计算预计的阅读时间\n */\nfunction readTime(len, cn = 300, en = 160) {\n  var readingTime = len[0] / cn + len[1] / en;\n  if (readingTime > 60 && readingTime < 60 * 24) {   // 大于一个小时，小于一天\n    let hour = parseInt(readingTime / 60);\n    let minute = parseInt((readingTime - hour * 60));\n    if (minute === 0) {\n      return hour + 'h';\n    }\n    return hour + 'h' + minute + 'm';\n  } else if (readingTime > 60 * 24) {      // 大于一天\n    let day = parseInt(readingTime / (60 * 24));\n    let hour = parseInt((readingTime - day * 24 * 60) / 60);\n    if (hour === 0) {\n      return day + 'd';\n    }\n    return day + 'd' + hour + 'h';\n  }\n  return readingTime < 1 ? '1' : parseInt((readingTime * 10)) / 10 + 'm';   // 取一位小数\n}\n\n/**\n * 读取文件内容\n */\nfunction getContent(filePath) {\n  return fs.readFileSync(filePath, 'utf8');\n}\n/**\n * 获取文件内容的字数\n * cn：中文\n * en：一整句英文（没有空格隔开的英文为 1 个）\n */\nfunction counter(content) {\n  const cn = (content.match(/[\\u4E00-\\u9FA5]/g) || []).length;\n  const en = (content.replace(/[\\u4E00-\\u9FA5]/g, '').match(/[a-zA-Z0-9_\\u0392-\\u03c9\\u0400-\\u04FF]+|[\\u4E00-\\u9FFF\\u3400-\\u4dbf\\uf900-\\ufaff\\u3040-\\u309f\\uac00-\\ud7af\\u0400-\\u04FF]+|[\\u00E4\\u00C4\\u00E5\\u00C5\\u00F6\\u00D6]+|\\w+/g) || []).length;\n  return [cn, en];\n}\n\nmodule.exports = {\n  readFileList,\n  readTotalFileWords,\n  readEachFileWords,\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n\n\nimport fs from 'fs'; // 文件模块\nimport path from 'path'; // 路径模块\nimport matter from 'gray-matter'; // FrontMatter解析器 https://github.com/jonschlinkert/gray-matter\nimport chalk from 'chalk' // 命令行打印美化\nconst log = console.log\nconst docsRoot = path.join(__dirname, '..', '..', '..', 'docs'); // docs文件路径\n\n/**\n * 获取本站的文章数据\n * 获取所有的 md 文档，可以排除指定目录下的文档\n */\nfunction readFileList(excludeFiles = [''], dir = docsRoot, filesList = []) {\n  const files = fs.readdirSync(dir);\n  files.forEach((item, index) => {\n    let filePath = path.join(dir, item);\n    const stat = fs.statSync(filePath);\n    if (!(excludeFiles instanceof Array)) {\n      log(chalk.yellow(`error: 传入的参数不是一个数组。`))\n    }\n    excludeFiles.forEach((excludeFile) => {\n      if (stat.isDirectory() && item !== '.vuepress' && item !== '@pages' && item !== excludeFile) {\n        readFileList(excludeFiles, path.join(dir, item), filesList);  //递归读取文件\n      } else {\n        if (path.basename(dir) !== 'docs') { // 过滤 docs目录级下的文件\n\n          const fileNameArr = path.basename(filePath).split('.')\n          let name = null, type = null;\n          if (fileNameArr.length === 2) { // 没有序号的文件\n            name = fileNameArr[0]\n            type = fileNameArr[1]\n          } else if (fileNameArr.length === 3) { // 有序号的文件\n            name = fileNameArr[1]\n            type = fileNameArr[2]\n          } else { // 超过两个‘.’的\n            log(chalk.yellow(`warning: 该文件 \"${filePath}\" 没有按照约定命名，将忽略生成相应数据。`))\n            return\n          }\n          if (type === 'md') { // 过滤非 md 文件\n            filesList.push({\n              name,\n              filePath\n            });\n          }\n        }\n      }\n    });\n  });\n  return filesList;\n}\n/**\n * 获取本站的文章总字数\n * 可以排除某个目录下的 md 文档字数\n */\nfunction readTotalFileWords(excludeFiles = ['']) {\n  const filesList = readFileList(excludeFiles);\n  var wordCount = 0;\n  filesList.forEach((item) => {\n    const content = getContent(item.filePath);\n    var len = counter(content);\n    wordCount += len[0] + len[1];\n  });\n  if (wordCount < 1000) {\n    return wordCount;\n  }\n  return Math.round(wordCount / 100) / 10 + 'k';\n}\n/**\n * 获取每一个文章的字数\n * 可以排除某个目录下的 md 文档字数\n */\nfunction readEachFileWords(excludeFiles = [''], cn, en) {\n  const filesListWords = [];\n  const filesList = readFileList(excludeFiles);\n  filesList.forEach((item) => {\n    const content = getContent(item.filePath);\n    var len = counter(content);\n    // 计算预计的阅读时间\n    var readingTime = readTime(len, cn, en);\n    var wordsCount = 0;\n    wordsCount = len[0] + len[1];\n    if (wordsCount >= 1000) {\n      wordsCount = Math.round(wordsCount / 100) / 10 + 'k';\n    }\n    // fileMatterObj => {content:'剔除frontmatter后的文件内容字符串', data:{<frontmatter对象>}, ...}\n    const fileMatterObj = matter(content, {});\n    const matterData = fileMatterObj.data;\n    filesListWords.push({ ...item, wordsCount, readingTime, ...matterData });\n  });\n  return filesListWords;\n}\n\n/**\n * 计算预计的阅读时间\n */\nfunction readTime(len, cn = 300, en = 160) {\n  var readingTime = len[0] / cn + len[1] / en;\n  if (readingTime > 60 && readingTime < 60 * 24) {   // 大于一个小时，小于一天\n    let hour = parseInt(readingTime / 60);\n    let minute = parseInt((readingTime - hour * 60));\n    if (minute === 0) {\n      return hour + 'h';\n    }\n    return hour + 'h' + minute + 'm';\n  } else if (readingTime > 60 * 24) {      // 大于一天\n    let day = parseInt(readingTime / (60 * 24));\n    let hour = parseInt((readingTime - day * 24 * 60) / 60);\n    if (hour === 0) {\n      return day + 'd';\n    }\n    return day + 'd' + hour + 'h';\n  }\n  return readingTime < 1 ? '1' : parseInt((readingTime * 10)) / 10 + 'm';   // 取一位小数\n}\n\n/**\n * 读取文件内容\n */\nfunction getContent(filePath) {\n  return fs.readFileSync(filePath, 'utf8');\n}\n/**\n * 获取文件内容的字数\n * cn：中文\n * en：一整句英文（没有空格隔开的英文为 1 个）\n */\nfunction counter(content) {\n  const cn = (content.match(/[\\u4E00-\\u9FA5]/g) || []).length;\n  const en = (content.replace(/[\\u4E00-\\u9FA5]/g, '').match(/[a-zA-Z0-9_\\u0392-\\u03c9\\u0400-\\u04FF]+|[\\u4E00-\\u9FFF\\u3400-\\u4dbf\\uf900-\\ufaff\\u3040-\\u309f\\uac00-\\ud7af\\u0400-\\u04FF]+|[\\u00E4\\u00C4\\u00E5\\u00C5\\u00F6\\u00D6]+|\\w+/g) || []).length;\n  return [cn, en];\n}\n\nexport {\n  readFileList,\n  readTotalFileWords,\n  readEachFileWords,\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n\n\n\n# 配置站点信息\n\n最后一步，在 docs/.vuepress/config.js（新版为 config.ts）文件，引入写好的 readFile.js 文件（路径要准确，这里仅仅是模板）\n\nconst { readFileList, readTotalFileWords, readEachFileWords } = require('./webSiteInfo/readFile');\n\n\n1\n\n\nimport { readFileList, readTotalFileWords, readEachFileWords } from './webSiteInfo/readFile';\n\n\n1\n\n\n如图（演示 JS 代码块）：\n\n\n\n在 themeConfig 中添加如下内容：\n\n// 站点配置（首页 & 文章页）\nblogInfo: {\n  blogCreate: '2021-10-19', // 博客创建时间\n  indexView: true,  // 开启首页的访问量和排名统计，默认 true（开启）\n  pageView: true,  // 开启文章页的浏览量统计，默认 true（开启）\n  readingTime: true,  // 开启文章页的预计阅读时间，条件：开启 eachFileWords，默认 true（开启）。可在 eachFileWords 的 readEachFileWords 的第二个和第三个参数自定义，默认 1 分钟 300 中文、160 英文\n  eachFileWords: readEachFileWords([''], 300, 160),  // 开启每个文章页的字数。readEachFileWords(['xx']) 关闭 xx 目录（可多个，可不传参数）下的文章页字数和阅读时长，后面两个参数分别是 1 分钟里能阅读的中文字数和英文字数。无默认值。readEachFileWords() 方法默认排除了 article 为 false 的文章\n  mdFileCountType: 'archives',  // 开启文档数。1. archives 获取归档的文档数（默认）。2. 数组 readFileList(['xx']) 排除 xx 目录（可多个，可不传参数），获取其他目录的文档数。提示：readFileList() 获取 docs 下所有的 md 文档（除了 `.vuepress` 和 `@pages` 目录下的文档）\n  totalWords: 'archives',  // 开启本站文档总字数。1. archives 获取归档的文档数（使用 archives 条件：传入 eachFileWords，否则报错）。2. readTotalFileWords(['xx']) 排除 xx 目录（可多个，可不传参数），获取其他目录的文章字数。无默认值\n  moutedEvent: '.tags-wrapper',   // 首页的站点模块挂载在某个元素后面（支持多种选择器），指的是挂载在哪个兄弟元素的后面，默认是热门标签 '.tags-wrapper' 下面，提示：'.categories-wrapper' 会挂载在文章分类下面。'.blogger-wrapper' 会挂载在博客头像模块下面\n  // 下面两个选项：第一次获取访问量失败后的迭代时间\n  indexIteration: 2500,   // 如果首页获取访问量失败，则每隔多少时间后获取一次访问量，直到获取成功或获取 10 次后。默认 3 秒。注意：设置时间太低，可能导致访问量 + 2、+ 3 ......\n  pageIteration: 2500,    // 如果文章页获取访问量失败，则每隔多少时间后获取一次访问量，直到获取成功或获取 10 次后。默认 3 秒。注意：设置时间太低，可能导致访问量 + 2、+ 3 ......\n  // 说明：成功获取一次访问量，访问量 + 1，所以第一次获取失败后，设置的每个隔段重新获取时间，将会影响访问量的次数。如 100 可能每次获取访问量 + 3\n},\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n如图（图片内容不一定是最新）：\n\n\n\n属性配置的具体介绍请看 属性配置。\n\n\n# 属性配置\n\nblogCreate\n\n * 类型：string\n * 默认值：当前时间（new Date()）\n * 格式：yyyy-mm-dd\n\n博客创建时间。如果不添加时间，页面上显示 0 天。\n\nmdFileCountType\n\n * 类型：string | readFileList()\n * 参数：数组\n * 默认值：archives\n\n文章数目。如果不添加内容，页面上显示归档的文章数目。\n\nreadFileList 是一个 js 文件，需要引入，参数是 目录的全名，最终效果会 排除该目录里的文章数，可多选，逗号隔开。也可不传参数。\n\n温馨提示：readFileList() 不传参数会获取 docs 下所有的 md 文档（除了 .vuepress 和 @pages 目录下的文档）。\n\ntotalWords\n\n * 类型：string | readFileWords()\n * 参数：数组\n * 默认值：null\n\n本站文档总字数。如果不添加内容，页面上显示 0 字。\n\nstring 仅支持 archives，并且使用该类型有条件：必须使用 eachFileWords，否则报错。\n\nreadFileWords 是一个 js 文件，需要引入，参数是目录的全名，最终效果会 排除该目录里的文章字数，可多选，逗号隔开。也可不传参数。\n\nmoutedEvent\n\n * 类型：string\n * 默认值：.tags-wrapper\n\n选择挂载的元素属性，支持多种选择器（id、class ......），该模块会挂载到该元素后面，形成兄弟元素。（仅支持首页的元素）。\n\n温馨提示：.categories-wrapper 会挂载在文章分类下面；.blogger-wrapper 会挂载在头像模块下面；.icons 会挂载在头像下方、图标上方。\n\n默认是热门标签 .tags-wrapper 下面。\n\nindexView\n\n * 类型：boolean\n * 默认值：true\n\n开启首页的访问量和排名统计，默认 true(开启)。\n\npageView\n\n * 类型 boolean\n * 默认值：true\n\n开启文章页的浏览量统计，默认 true（开启）。\n\neachFileWords\n\n * 类型：readEachFileWords()\n * 参数：数组\n * 默认值：null\n\n开启每个文章页的字数。如果不添加内容，则不开启。\n\nreadEachFileWords(['xx']) 关闭 xx 目录（可多个，可不传参数）下的文章页字数和阅读时长。\n\nreadEachFileWords() 第一个参数是数组，后面两个参数分别是 1 分钟里能阅读的中文字数和英文字数，配合 readingTime 使用。\n\nreadEachFileWords() 方法默认排除了 article 为 false 的文章。\n\nreadingTime\n\n * 类型：boolean\n\n * 默认值：true\n\n * 条件：使用 eachFileWords\n\n开启文章页的预计阅读时间。默认阅读中文 1 分钟 300 个字，英文 1 分钟 160 个字。如果想自定义阅读文字时长，请在 eachFileWords 的 readEachFileWords() 传入后面两个参数。分别为 1 分钟阅读的中文和英文个数。\n\nindexIteration\n\n * 类型：number\n * 默认值：3000\n\n如果首页获取访问量失败，则每隔多少时间后获取一次访问量，直到获取成功或获取 10 次后。默认 3 秒。\n\n注意：设置时间太低，可能导致访问量 + 2、+ 3 ......\n\npageIteration\n\n * 类型：number\n * 默认值：3000\n\n如果文章页获取访问量失败，则每隔多少时间后获取一次访问量，直到获取成功或获取 10 次后。默认 3 秒。\n\n注意：设置时间太低，可能导致访问量 + 2、+ 3 ......\n\n说明：成功获取一次访问量，访问量 + 1，所以第一次获取失败后，设置的每个隔段重新获取时间，将会影响访问量的次数。如 100 可能每次获取访问量 + 3。\n\n\n# 结束语\n\n如果你还有疑惑，可以去我的 GitHub 仓库或者 Gitee 仓库查看源码。\n\nGitHub：https://github.com/huangguan2001/Kele-Bingtang.github.io\n\nGitee：https://gitee.com/kele-bingtang/Kele-Bingtang\n\n如果你有更好的方式，评论区留言告诉我，或者加入 Vdoing 主题的 QQ 群：694387113。谢谢！",normalizedContent:"笔记\n\n本内容介绍如何搭建本站首页的站点信息，以及每篇文章的浏览量统计。\n\n2021-12-30 @村长\n\n\n\n * 前言\n * 安装依赖\n * 添加meta\n * 添加在线图标\n * vue模板\n * 主题选择\n * 在线主题\n   * 网站信息工具代码\n   * 站点信息代码\n   * 文章浏览量和字数代码\n   * 站点信息配置\n * 本地主题\n   * 工具类\n   * vue组件创建\n   * vue组件引用\n   * 核心配置文件\n   * 配置站点信息\n * 属性配置\n * 结束语\n\n\n\n\n# 前言\n\n本内容将在首页和每篇的文章页加入了一些元素，目前适用版本是 vdoing v1.x。\n\n效果如下：\n\n\n\n\n\n本站的访问量和文章的浏览量使用了 不蒜子插件，因为不蒜子利用域名来统计访问量，所以本地 localhost 肯定有很多人访问过，即本地编译后的首页访问量会很多，所以无需担心实际部署后的访问量。\n\n不蒜子官网地址：http://busuanzi.ibruce.info/\n\n不蒜子文档地址：http://ibruce.info/2015/04/04/busuanzi/\n\n注意\n\n问题：本模块目前有一个功能依赖于 git 的 lastupdated 功能，该功能已经内置 vuepress，所以无需担心，唯一值得注意的是：在本地添加了新的文件，最后活动时间的数据可能为 nan（无法获取的意思）。\n\n解决：只需要在博客项目部署的过程中执行 git commit 命令，因为该命令将会获取一个准确的时间代替 nan，给本模块使用。\n\n2022-01-17 @村长\n\n\n# 安装依赖\n\n官网推荐引入在线脚本，但是在 vue 里，单页面跳转不会重新触发在线脚本，也就不会获取访问量。在线脚本仅在第一次加载页面时被触发，或者刷新网页被触发。所以会发现从一个文章跳转到另一个文章，另一个文章的浏览量是不会变化的，除非刷新页面。\n\n因此这里安装不蒜子依赖，利用 vue 的 router 监听路由的变化，一旦改变则重新触发不蒜子依赖，从而重新拉取访问量，解决上述的问题。\n\n直接在自己的项目安装依赖即可。\n\n * yarn 安装\n\nyarn add busuanzi.pure.js -d\n\n\n1\n\n * npm 安装\n\nnpm install busuanzi.pure.js --save\n\n\n1\n\n\n\n# 添加meta\n\n为什么添加 meta 头信息呢，因为在 chrome 85 版本中，为了保护用户的隐私，默认的 referrer policy 则变成了 strict-origin-when-cross-origin。\n\n所以必须添加 meta，否则文章统计访问量的数据则不正确。\n\n在 docs/.vuepress/config.js 下的 head 中添加如下内容：\n\n['meta', { name: 'referrer', content: 'no-referrer-when-downgrade' }],\n\n\n1\n\n\n如图：\n\n\n\n\n# 添加在线图标\n\n这里使用的是阿里矢量库。\n\n地址：https://www.iconfont.cn/\n\n添加了五个图标\n\n\n\n如果你不想使用自己的矢量库项目（不害怕我删图标跑路🤣），那么可以使用我的图标项目网址，当你发现图标失效了，就请来这里获取新的地址，如果还没有更新，请在评论区留言。\n\n在 config.js 下的 head 中文件添加如下内容：\n\n['link', { rel: 'stylesheet', href: 'https://at.alicdn.com/t/font_3077305_pt8umhrn4k9.css' }]\n\n\n1\n\n\n如图：（图片的内容不一定是最新的，以上方代码块为准）\n\n\n\n\n# vue模板\n\n这里先提供一个在 vue 里常用的模板代码，即通用代码（了解即可）：\n\n<template>\n  <div class=\"busuanzi\">\n    <span id=\"busuanzi_container_site_pv\" style=\"display:none\">\n      本站总访问量\n      <span id=\"busuanzi_value_site_pv\"></span>次\n      <span class=\"post-meta-divider\">|</span>\n    </span>\n    <span id=\"busuanzi_container_site_uv\" style=\"display:none\">\n      本站访客数\n      <span id=\"busuanzi_value_site_uv\"></span>人\n    </span>\n  </div>\n</template>\n \n<script>\nlet script;\nexport default {\n  mounted() {\n    script = require(\"busuanzi.pure.js\");\n  },\n  // 监听，当路由发生变化的时候执行\n  watch: {\n    $route(to, from) {\n      if (to.path != from.path) {\n        script.fetch();\n      }\n    }\n  }\n};\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# 主题选择\n\n下面有两种配置方式可以选，分别为：\n\n * 在线主题：npm 主题，采用监听路由、插入式的代码，所以视觉上会发现 500ms - 1000ms 左右出现渲染到页面上，目前我正在使用\n * 本地主题：站点信息模块没有延迟，与页面一起渲染出来\n\n本地主题不好的一点就是升级版本后曾修改的内容被重置，所以需要记好修改位置、备份，比较麻烦。好处是根据自己的需求在基础上拓展。\n\n\n# 在线主题\n\n如果你正在使用在线的主题，即不使用本地主题，那么在本内容开始我们的站点信息配置吧。\n\n\n# 网站信息工具代码\n\n添加网站信息需要的计算代码、获取字数代码等工具类。\n\n首先进入 docs/.vuepress 目录，创建 websiteinfo 文件夹\n\n\n\n然后在 websiteinfo 目录下创建 readfile.js 文件，这个文件用于 统计文章数目 和 网站总字数 等。\n\n添加如下内容：\n\nconst fs = require('fs'); // 文件模块\nconst path = require('path'); // 路径模块\nconst matter = require('gray-matter'); // frontmatter解析器 https://github.com/jonschlinkert/gray-matter\nconst chalk = require('chalk') // 命令行打印美化\nconst log = console.log\nconst docsroot = path.join(__dirname, '..', '..', '..', 'docs'); // docs文件路径\n\n/**\n * 获取本站的文章数据\n * 获取所有的 md 文档，可以排除指定目录下的文档\n */\nfunction readfilelist(excludefiles = [''], dir = docsroot, fileslist = []) {\n  const files = fs.readdirsync(dir);\n  files.foreach((item, index) => {\n    let filepath = path.join(dir, item);\n    const stat = fs.statsync(filepath);\n    if (!(excludefiles instanceof array)) {\n      log(chalk.yellow(`error: 传入的参数不是一个数组。`))\n    }\n    excludefiles.foreach((excludefile) => {\n      if (stat.isdirectory() && item !== '.vuepress' && item !== '@pages' && item !== excludefile) {\n        readfilelist(excludefiles, path.join(dir, item), fileslist);  //递归读取文件\n      } else {\n        if (path.basename(dir) !== 'docs') { // 过滤 docs目录级下的文件\n\n          const filenamearr = path.basename(filepath).split('.')\n          let name = null, type = null;\n          if (filenamearr.length === 2) { // 没有序号的文件\n            name = filenamearr[0]\n            type = filenamearr[1]\n          } else if (filenamearr.length === 3) { // 有序号的文件\n            name = filenamearr[1]\n            type = filenamearr[2]\n          } else { // 超过两个‘.’的\n            log(chalk.yellow(`warning: 该文件 \"${filepath}\" 没有按照约定命名，将忽略生成相应数据。`))\n            return\n          }\n          if (type === 'md') { // 过滤非 md 文件\n            fileslist.push({\n              name,\n              filepath\n            });\n          }\n        }\n      }\n    });\n  });\n  return fileslist;\n}\n/**\n * 获取本站的文章总字数\n * 可以排除某个目录下的 md 文档字数\n */\nfunction readtotalfilewords(excludefiles = ['']) {\n  const fileslist = readfilelist(excludefiles);\n  var wordcount = 0;\n  fileslist.foreach((item) => {\n    const content = getcontent(item.filepath);\n    var len = counter(content);\n    wordcount += len[0] + len[1];\n  });\n  if (wordcount < 1000) {\n    return wordcount;\n  }\n  return math.round(wordcount / 100) / 10 + 'k';\n}\n/**\n * 获取每一个文章的字数\n * 可以排除某个目录下的 md 文档字数\n */\nfunction readeachfilewords(excludefiles = [''], cn, en) {\n  const fileslistwords = [];\n  const fileslist = readfilelist(excludefiles);\n  fileslist.foreach((item) => {\n    const content = getcontent(item.filepath);\n    var len = counter(content);\n    // 计算预计的阅读时间\n    var readingtime = readtime(len, cn, en);\n    var wordscount = 0;\n    wordscount = len[0] + len[1];\n    if (wordscount >= 1000) {\n      wordscount = math.round(wordscount / 100) / 10 + 'k';\n    }\n    // filematterobj => {content:'剔除frontmatter后的文件内容字符串', data:{<frontmatter对象>}, ...}\n    const filematterobj = matter(content, {});\n    const matterdata = filematterobj.data;\n    fileslistwords.push({ ...item, wordscount, readingtime, ...matterdata });\n  });\n  return fileslistwords;\n}\n\n/**\n * 计算预计的阅读时间\n */\nfunction readtime(len, cn = 300, en = 160) {\n  var readingtime = len[0] / cn + len[1] / en;\n  if (readingtime > 60 && readingtime < 60 * 24) {   // 大于一个小时，小于一天\n    let hour = parseint(readingtime / 60);\n    let minute = parseint((readingtime - hour * 60));\n    if (minute === 0) {\n      return hour + 'h';\n    }\n    return hour + 'h' + minute + 'm';\n  } else if (readingtime > 60 * 24) {      // 大于一天\n    let day = parseint(readingtime / (60 * 24));\n    let hour = parseint((readingtime - day * 24 * 60) / 60);\n    if (hour === 0) {\n      return day + 'd';\n    }\n    return day + 'd' + hour + 'h';\n  }\n  return readingtime < 1 ? '1' : parseint((readingtime * 10)) / 10 + 'm';   // 取一位小数\n}\n\n/**\n * 读取文件内容\n */\nfunction getcontent(filepath) {\n  return fs.readfilesync(filepath, 'utf8');\n}\n/**\n * 获取文件内容的字数\n * cn：中文\n * en：一整句英文（没有空格隔开的英文为 1 个）\n */\nfunction counter(content) {\n  const cn = (content.match(/[\\u4e00-\\u9fa5]/g) || []).length;\n  const en = (content.replace(/[\\u4e00-\\u9fa5]/g, '').match(/[a-za-z0-9_\\u0392-\\u03c9\\u0400-\\u04ff]+|[\\u4e00-\\u9fff\\u3400-\\u4dbf\\uf900-\\ufaff\\u3040-\\u309f\\uac00-\\ud7af\\u0400-\\u04ff]+|[\\u00e4\\u00c4\\u00e5\\u00c5\\u00f6\\u00d6]+|\\w+/g) || []).length;\n  return [cn, en];\n}\n\nmodule.exports = {\n  readfilelist,\n  readtotalfilewords,\n  readeachfilewords,\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n\n\nimport fs from 'fs'; // 文件模块\nimport path from 'path'; // 路径模块\nimport matter from 'gray-matter'; // frontmatter解析器 https://github.com/jonschlinkert/gray-matter\nimport chalk from 'chalk' // 命令行打印美化\nconst log = console.log\nconst docsroot = path.join(__dirname, '..', '..', '..', 'docs'); // docs文件路径\n\n/**\n * 获取本站的文章数据\n * 获取所有的 md 文档，可以排除指定目录下的文档\n */\nfunction readfilelist(excludefiles = [''], dir = docsroot, fileslist = []) {\n  const files = fs.readdirsync(dir);\n  files.foreach((item, index) => {\n    let filepath = path.join(dir, item);\n    const stat = fs.statsync(filepath);\n    if (!(excludefiles instanceof array)) {\n      log(chalk.yellow(`error: 传入的参数不是一个数组。`))\n    }\n    excludefiles.foreach((excludefile) => {\n      if (stat.isdirectory() && item !== '.vuepress' && item !== '@pages' && item !== excludefile) {\n        readfilelist(excludefiles, path.join(dir, item), fileslist);  //递归读取文件\n      } else {\n        if (path.basename(dir) !== 'docs') { // 过滤 docs目录级下的文件\n\n          const filenamearr = path.basename(filepath).split('.')\n          let name = null, type = null;\n          if (filenamearr.length === 2) { // 没有序号的文件\n            name = filenamearr[0]\n            type = filenamearr[1]\n          } else if (filenamearr.length === 3) { // 有序号的文件\n            name = filenamearr[1]\n            type = filenamearr[2]\n          } else { // 超过两个‘.’的\n            log(chalk.yellow(`warning: 该文件 \"${filepath}\" 没有按照约定命名，将忽略生成相应数据。`))\n            return\n          }\n          if (type === 'md') { // 过滤非 md 文件\n            fileslist.push({\n              name,\n              filepath\n            });\n          }\n        }\n      }\n    });\n  });\n  return fileslist;\n}\n/**\n * 获取本站的文章总字数\n * 可以排除某个目录下的 md 文档字数\n */\nfunction readtotalfilewords(excludefiles = ['']) {\n  const fileslist = readfilelist(excludefiles);\n  var wordcount = 0;\n  fileslist.foreach((item) => {\n    const content = getcontent(item.filepath);\n    var len = counter(content);\n    wordcount += len[0] + len[1];\n  });\n  if (wordcount < 1000) {\n    return wordcount;\n  }\n  return math.round(wordcount / 100) / 10 + 'k';\n}\n/**\n * 获取每一个文章的字数\n * 可以排除某个目录下的 md 文档字数\n */\nfunction readeachfilewords(excludefiles = [''], cn, en) {\n  const fileslistwords = [];\n  const fileslist = readfilelist(excludefiles);\n  fileslist.foreach((item) => {\n    const content = getcontent(item.filepath);\n    var len = counter(content);\n    // 计算预计的阅读时间\n    var readingtime = readtime(len, cn, en);\n    var wordscount = 0;\n    wordscount = len[0] + len[1];\n    if (wordscount >= 1000) {\n      wordscount = math.round(wordscount / 100) / 10 + 'k';\n    }\n    // filematterobj => {content:'剔除frontmatter后的文件内容字符串', data:{<frontmatter对象>}, ...}\n    const filematterobj = matter(content, {});\n    const matterdata = filematterobj.data;\n    fileslistwords.push({ ...item, wordscount, readingtime, ...matterdata });\n  });\n  return fileslistwords;\n}\n\n/**\n * 计算预计的阅读时间\n */\nfunction readtime(len, cn = 300, en = 160) {\n  var readingtime = len[0] / cn + len[1] / en;\n  if (readingtime > 60 && readingtime < 60 * 24) {   // 大于一个小时，小于一天\n    let hour = parseint(readingtime / 60);\n    let minute = parseint((readingtime - hour * 60));\n    if (minute === 0) {\n      return hour + 'h';\n    }\n    return hour + 'h' + minute + 'm';\n  } else if (readingtime > 60 * 24) {      // 大于一天\n    let day = parseint(readingtime / (60 * 24));\n    let hour = parseint((readingtime - day * 24 * 60) / 60);\n    if (hour === 0) {\n      return day + 'd';\n    }\n    return day + 'd' + hour + 'h';\n  }\n  return readingtime < 1 ? '1' : parseint((readingtime * 10)) / 10 + 'm';   // 取一位小数\n}\n\n/**\n * 读取文件内容\n */\nfunction getcontent(filepath) {\n  return fs.readfilesync(filepath, 'utf8');\n}\n/**\n * 获取文件内容的字数\n * cn：中文\n * en：一整句英文（没有空格隔开的英文为 1 个）\n */\nfunction counter(content) {\n  const cn = (content.match(/[\\u4e00-\\u9fa5]/g) || []).length;\n  const en = (content.replace(/[\\u4e00-\\u9fa5]/g, '').match(/[a-za-z0-9_\\u0392-\\u03c9\\u0400-\\u04ff]+|[\\u4e00-\\u9fff\\u3400-\\u4dbf\\uf900-\\ufaff\\u3040-\\u309f\\uac00-\\ud7af\\u0400-\\u04ff]+|[\\u00e4\\u00c4\\u00e5\\u00c5\\u00f6\\u00d6]+|\\w+/g) || []).length;\n  return [cn, en];\n}\n\nexport {\n  readfilelist,\n  readtotalfilewords,\n  readeachfilewords,\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n\n\n接着继续在该目录下创建第二个文件 utils.js，该文件用于计算 已运行时间 和 最后活动时间。\n\n添加如下内容：\n\n// 日期格式化(只获取年月日)\nexport function dateformat(date) {\n  if (!(date instanceof date)) {\n    date = new date(date);\n  }\n  return `${date.getutcfullyear()}-${zero(date.getutcmonth() + 1)}-${zero(date.getutcdate())}`;\n}\n\n// 小于10补0\nexport function zero(d) {\n  return d.tostring().padstart(2, '0');\n}\n\n/**\n * 计算最后活动时间\n */\nexport function lastupdateposts(posts) {\n  posts.sort((prev, next) => {\n    return comparedate(prev, next);\n  });\n  return posts;\n}\n\n// 获取时间的时间戳\nexport function gettimenum(post) {\n  let datestr = post.lastupdated || post.frontmatter.date;\n  let date = new date(datestr);\n  if (date == \"invalid date\" && datestr) { // 修复new date()在safari下出现invalid date的问题\n    date = new date(datestr.replace(/-/g, '/'));\n  }\n  return date.gettime();\n}\n\n// 比对时间\nexport function comparedate(a, b) {\n  return gettimenum(b) - gettimenum(a);\n}\n\n/**\n * 获取两个日期相差多少天\n */\nexport function daydiff(startdate, enddate) {\n  if (!enddate) {\n    enddate = startdate;\n    startdate = new date();\n  }\n  startdate = dateformat(startdate);\n  enddate = dateformat(enddate);\n  let day = parseint(math.abs(new date(startdate) - new date(enddate)) / (1000 * 60 * 60 * 24));\n  return day;\n}\n\n/**\n * 计算相差多少年/月/日/时/分/秒\n */\nexport function timediff(startdate, enddate) {\n  if (!enddate) {\n    enddate = startdate;\n    startdate = new date();\n  }\n  if (!(startdate instanceof date)) {\n    startdate = new date(startdate);\n  }\n  if (!(enddate instanceof date)) {\n    enddate = new date(enddate);\n  }\n  // 计算时间戳的差\n  const diffvalue = parseint((math.abs(enddate - startdate) / 1000));\n  if (diffvalue == 0) {\n    return '刚刚';\n  } else if (diffvalue < 60) {\n    return diffvalue + ' 秒';\n  } else if (parseint(diffvalue / 60) < 60) {\n    return parseint(diffvalue / 60) + ' 分';\n  } else if (parseint(diffvalue / (60 * 60)) < 24) {\n    return parseint(diffvalue / (60 * 60)) + ' 时';\n  } else if (parseint(diffvalue / (60 * 60 * 24)) < getdays(startdate.getmonth, startdate.getfullyear)) {\n    return parseint(diffvalue / (60 * 60 * 24)) + ' 天';\n  } else if (parseint(diffvalue / (60 * 60 * 24 * getdays(startdate.getmonth, startdate.getfullyear))) < 12) {\n    return parseint(diffvalue / (60 * 60 * 24 * getdays(startdate.getmonth, startdate.getfullyear))) + ' 月';\n  } else {\n    return parseint(diffvalue / (60 * 60 * 24 * getdays(startdate.getmonth, startdate.getfullyear) * 12)) + ' 年';\n  }\n}\n\n/**\n * 判断当前月的天数（28、29、30、31）\n */\nexport function getdays(mouth, year) {\n  let days = 30;\n  if (mouth === 2) {\n    days = year % 4 === 0 ? 29 : 28;\n  } else if (mouth === 1 || mouth === 3 || mouth === 5 || mouth === 7 || mouth === 8 || mouth === 10 || mouth === 12) {\n    // 月份为：1,3,5,7,8,10,12 时，为大月.则天数为 31；\n    days = 31;\n  }\n  return days;\n}\n\n/**\n * 已运行时间低于一天显示时分秒\n * 目前该函数没有使用，低于一天直接显示不到一天\n */\nexport function gettime(startdate, enddate) {\n  if (day < 0) {\n    let hour = parseint(math.abs(new date(startdate) - new date(enddate)) / (1000 * 60 * 60));\n    if (hour > 0) {\n      let minute = parseint(math.abs(new date(startdate) - new date(enddate) - hour * 60 * 60 * 1000) / (1000 * 60));\n      if (minute > 0) {\n        let second = parseint(math.abs(new date(startdate) - new date(enddate) - hour * 60 * 60 * 1000 - minute * 60 * 1000) / (1000));\n        if (second != 0) {\n          return hour + ' 小时 ' + minute + ' 分钟 ' + second + ' 秒';\n        } else {\n          return hour + ' 小时 ' + minute + ' 分钟 ';\n        }\n      } else {\n        return hour + ' 小时 ';\n      }\n    } else {\n      let minute = parseint(math.abs(new date(startdate) - new date(enddate) - hour * 60 * 60 * 1000) / (1000 * 60));\n      if (minute > 0) {\n        let second = parseint(math.abs(new date(startdate) - new date(enddate) - hour * 60 * 60 * 1000 - minute * 60 * 1000) / (1000));\n        if (second != 0) {\n          return + minute + ' 分钟 ' + second + ' 秒';\n        } else {\n          return minute + ' 分钟 ';\n        }\n      } else {\n        return parseint(math.abs(new date(startdate) - new date(enddate) - hour * 60 * 60 * 1000 - minute * 60 * 1000) / (1000)) + ' 秒 ';\n      }\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n\n\n目前就两个文件，最终效果如图：\n\n\n\n\n# 站点信息代码\n\n这一步的文件目录不能随便移动，因为该目录是 vuepress 规定的。\n\n首先进入 docs/.vuepress 目录，创建 components 文件夹\n\n\n\n创建一个 vue 文件：webinfo.vue，这就是首页的站点信息模块。\n\n并添加如下内容：\n\n<template>\n  \x3c!-- 村长 --\x3e\n  <div class=\"web-info card-box\">\n    <div class=\"webinfo-title\">\n      <i\n        class=\"iconfont icon-award\"\n        style=\"font-size: 0.875rem; font-weight: 900; width: 1.25em\"\n      ></i>\n      <span>站点信息</span>\n    </div>\n    <div class=\"webinfo-item\">\n      <div class=\"webinfo-item-title\">文章数目：</div>\n      <div class=\"webinfo-content\">{{ mdfilecount }} 篇</div>\n    </div>\n\n    <div class=\"webinfo-item\">\n      <div class=\"webinfo-item-title\">已运行时间：</div>\n      <div class=\"webinfo-content\">\n        {{ createtonowday != 0 ? createtonowday + \" 天\" : \"不到一天\" }}\n      </div>\n    </div>\n\n    <div class=\"webinfo-item\">\n      <div class=\"webinfo-item-title\">本站总字数：</div>\n      <div class=\"webinfo-content\">{{ totalwords }} 字</div>\n    </div>\n\n    <div class=\"webinfo-item\">\n      <div class=\"webinfo-item-title\">最后活动时间：</div>\n      <div class=\"webinfo-content\">\n        {{ lastactivedate == \"刚刚\" ? \"刚刚\" : lastactivedate + \"前\" }}\n      </div>\n    </div>\n\n    <div v-if=\"indexview\" class=\"webinfo-item\">\n      <div class=\"webinfo-item-title\">本站被访问了：</div>\n      <div class=\"webinfo-content\">\n        <span id=\"busuanzi_value_site_pv\" class=\"web-site-pv\"\n          ><i title=\"正在获取...\" class=\"loading iconfont icon-loading\"></i>\n        </span>\n        次\n      </div>\n    </div>\n\n    <div v-if=\"indexview\" class=\"webinfo-item\">\n      <div class=\"webinfo-item-title\">您的访问排名：</div>\n      <div class=\"webinfo-content busuanzi\">\n        <span id=\"busuanzi_value_site_uv\" class=\"web-site-uv\"\n          ><i title=\"正在获取...\" class=\"loading iconfont icon-loading\"></i>\n        </span>\n        名\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { daydiff, timediff, lastupdateposts } from \"../websiteinfo/utils\";\nlet busuanzi; // 统计量\nexport default {\n  data() {\n    return {\n      // 村长\n      mdfilecount: 0, // markdown 文档总数\n      createtonowday: 0, // 博客创建时间距今多少天\n      lastactivedate: \"\", // 最后活动时间\n      totalwords: 0, // 本站总字数\n      indexview: true, // 开启访问量和排名统计\n    };\n  },\n  computed: {\n    $lastupdateposts() {\n      return lastupdateposts(this.$filterposts);\n    },\n  },\n  mounted() {\n    // 村长\n    if (object.keys(this.$themeconfig.bloginfo).length > 0) {\n      const {\n        blogcreate,\n        mdfilecounttype,\n        totalwords,\n        moutedevent,\n        eachfilewords,\n        indexiteration,\n        indexview,\n      } = this.$themeconfig.bloginfo;\n      this.createtonowday = daydiff(blogcreate);\n      if (mdfilecounttype != \"archives\") {\n        this.mdfilecount = mdfilecounttype.length;\n      } else {\n        this.mdfilecount = this.$filterposts.length;\n      }\n      if (totalwords == \"archives\" && eachfilewords) {\n        let archiveswords = 0;\n        eachfilewords.foreach((itemfile) => {\n          if (itemfile.wordscount < 1000) {\n            archiveswords += itemfile.wordscount;\n          } else {\n            let wordscount = itemfile.wordscount.slice(\n              0,\n              itemfile.wordscount.length - 1\n            );\n            archiveswords += wordscount * 1000;\n          }\n        });\n        this.totalwords = math.round(archiveswords / 100) / 10 + \"k\";\n      } else if (totalwords == \"archives\") {\n        this.totalwords = 0;\n        console.log(\n          \"如果 totalwords 使用 archives，必须传入 eachfilewords，显然您并没有传入！\"\n        );\n      } else {\n        this.totalwords = totalwords;\n      }\n      // 最后一次活动时间\n      this.lastactivedate = timediff(this.$lastupdateposts[0].lastupdated);\n      this.mountedwebinfo(moutedevent);\n      // 获取访问量和排名\n      this.indexview = indexview == undefined ? true : indexview;\n      if (this.indexview) {\n        this.getindexviewcouter(indexiteration);\n      }\n    }\n  },\n  methods: {\n    /**\n     * 挂载站点信息模块\n     */\n    mountedwebinfo(moutedevent = \".tags-wrapper\") {\n      let interval = setinterval(() => {\n        const tagswrapper = document.queryselector(moutedevent);\n        const webinfo = document.queryselector(\".web-info\");\n        if (tagswrapper && webinfo) {\n          if (!this.issiblilngnode(tagswrapper, webinfo)) {\n            tagswrapper.parentnode.insertbefore(\n              webinfo,\n              tagswrapper.nextsibling\n            );\n            clearinterval(interval);\n          }\n        }\n      }, 200);\n    },\n    /**\n     * 挂载在兄弟元素后面，说明当前组件是 siblingnode 变量\n     */\n    issiblilngnode(element, siblingnode) {\n      if (element.siblingnode == siblingnode) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    /**\n     * 首页的统计量\n     */\n    getindexviewcouter(iterationtime = 3000) {\n      if (busuanzi) {\n        busuanzi.fetch();\n      } else {\n        busuanzi = require(\"busuanzi.pure.js\");\n      }\n      var i = 0;\n      var defaultcouter = \"9999\";\n      // 如果 require 没有获取成功，则手动获取\n      // 但是容易产生访问量叠加，如果只需要第一次获取数据（可能获取失败），可注释掉，此内容是第一次获取失败后，重新获取访问量，可能导致访问量再次 + 1\n      // 取决于访问人的网络，以及 settimeout 的时间（需求调节）\n      settimeout(() => {\n        let interval = setinterval(() => {\n          const indexuv = document.queryselector(\".web-site-pv\");\n          const indexpv = document.queryselector(\".web-site-uv\");\n          if (indexpv || indexuv) {\n            i += iterationtime;\n            if (i > iterationtime * 10) {\n              indexpv.innertext = defaultcouter;\n              indexuv.innertext = defaultcouter;\n              clearinterval(interval); // 10 秒后无法获取，则取消获取\n            }\n            if (indexpv.innertext == \"\" && indexuv.innertext == \"\") {\n              // 手动获取访问量\n              busuanzi.fetch();\n            } else {\n              clearinterval(interval);\n            }\n          } else {\n            clearinterval(interval);\n          }\n        }, iterationtime);\n      }, iterationtime);\n    },\n  },\n};\n<\/script>\n\n<style scoped>\n.web-info {\n  font-size: 0.875rem;\n  padding: 0.95rem;\n}\n.webinfo-title {\n  text-align: center;\n  color: #888;\n  font-weight: bold;\n  padding: 0 0 10px 0;\n}\n.webinfo-item {\n  padding: 8px 0 0;\n  margin: 0;\n}\n.webinfo-item-title {\n  display: inline-block;\n}\n.webinfo-content {\n  display: inline-block;\n  float: right;\n}\n@keyframes turn {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n.loading {\n  display: inline-block;\n  animation: turn 1s linear infinite;\n  -webkit-animation: turn 1s linear infinite;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n\n\n最终效果如图：\n\n\n\n创建好了该 vue 组件，我们需要使用它，打开 docs/index.md\n\n\n\n移到最下方，添加如下内容：\n\n<clientonly>\n  <webinfo/>\n</clientonly>\n\n\n1\n2\n3\n\n\n熟悉 vue 脚手架的人应该都有疑惑，那就是使用 vue 组件前，不需要引入吗？就像 import xxx from 'xx/xx.vue' 一样。\n\n其实 vuepress 会自动扫描 .vuepress 是否有 components 目录，如果有并且里面有 .vue 组件，则自动将它们全局注册，所以直接在任何 md 文档按照组件名引入即可。\n\n这也告诉我们，可以直接在 components 目录写 vue 组件，然后按照组件名在任意 md 文档引入，即可看到效果。\n\n\n# 文章浏览量和字数代码\n\n首先进入 docs/.vuepress 目录，打开 enhanceapp.js 文件。该文件可以监听路由，然后 触发文章浏览量和字数的代码\n\nlet busuanzi;\n\nexport default ({\n  vue, // vuepress 正在使用的 vue 构造函数\n  options, // 附加到根实例的一些选项\n  router, // 当前应用的路由实例\n  sitedata, // 站点元数据\n  isserver // 当前应用配置是处于 服务端渲染 或 客户端\n}) => {\n  /**\n   * 站点和文章页信息模块\n   */\n  if (!isserver) {\n    router.beforeeach((to, from, next) => {\n      next();\n      if (to.path !== '/' && to.path !== from.path && sitedata.themeconfig.bloginfo) {  // 如果页面是非首页，# 号也会触发路由变化，这里已经排除掉\n        // 刷新页面或进入新的页面后，如果原来位置的内容还存在，则删除掉，最后重新插入渲染\n        removeelement('.page-view-js');\n        removeelement('.page-view');\n        removeelement('.book-words');\n        removeelement('.reading-time');\n        sitedata.pages.foreach((itempage) => {\n          if (itempage.path == to.path) {\n            if (itempage.frontmatter.article == undefined || itempage.frontmatter.article) {  // 排除掉 article 为 false 的文章\n              const { eachfilewords, pageview, pageiteration, readingtime } = sitedata.themeconfig.bloginfo;\n              // 下面两个 if 可以调换位置，从而让文章的浏览量和字数内容交换\n              if (eachfilewords) {\n                eachfilewords.foreach((itemfile) => {\n                  if (itemfile.permalink == itempage.frontmatter.permalink) {\n                    addpagewordscount(itemfile.wordscount);\n                    if (readingtime || readingtime == undefined) {\n                      addreadtimecount(itemfile.readingtime);\n                    }\n                  }\n                });\n              }\n              if (pageview || pageview == undefined) {\n                addpageview();\n                // 挂载成功需要一点时间\n                settimeout(() => {\n                  getpageviewcouter(pageiteration);\n                }, 1500);\n              }\n\n              return;\n            }\n          }\n        })\n      }\n    })\n  }\n}\n/**\n * 如果元素存在，则删除\n */\nfunction removeelement(selector) {\n  var element = document.queryselector(selector);\n  if (element) {\n    element.parentnode.removechild(element);\n  }\n}\n\n/**\n * 文章页的访问量\n */\nfunction getpageviewcouter(iterationtime = 3000) {\n  if (busuanzi) {\n    busuanzi.fetch();\n  } else {\n    busuanzi = require(\"busuanzi.pure.js\");\n  }\n  var i = 0;\n  var defaultcouter = '9999';\n  // 如果 require 没有获取成功，则手动获取\n  // 但是容易产生访问量叠加，如果只需要第一次获取数据（可能获取失败），可注释掉，此内容是第一次获取失败后，重新获取访问量，可能导致访问量再次 + 1\n  // 取决于访问人的网络，以及 settimeout 的时间（需求调节）\n  settimeout(() => {\n    let interval = setinterval(() => {\n      const pageview = document.queryselector('.view-data');\n      if (pageview) {\n        i += iterationtime;\n        if (i > iterationtime * 10) {\n          pageview.innertext = defaultcouter;\n          clearinterval(interval);  // 10 秒后无法获取，则取消获取\n        }\n        if (pageview.innertext == \"\") {\n          // 手动获取访问量\n          busuanzi.fetch();\n        } else {\n          clearinterval(interval);\n        }\n      } else {\n        clearinterval(interval);\n      }\n    }, iterationtime);\n  }, iterationtime);\n}\n/**\n * 添加浏览量元素\n */\nfunction addpageview() {\n  // 创建访问量的元素\n  let template = document.createelement('div');\n  template.title = '浏览量';\n  template.classname = 'page-view iconfont icon-view';\n  template.style.float = 'left';\n  template.style.marginleft = '20px';\n  template.style.fontsize = '0.8rem';\n  // template.innerhtml = '<span id=\"busuanzi_container_page_pv\" style=\"display: none; margin-left: 3px\"><a style=\"color: #888\" href=\"javascript:;\" id=\"busuanzi_value_page_pv\" class=\"view-data\"></a></span>';\n  template.innerhtml = '<a style=\"color: #888; margin-left: 3px\" href=\"javascript:;\" id=\"busuanzi_value_page_pv\" class=\"view-data\"><i title=\"正在获取...\" class=\"loading iconfont icon-loading\"></i></a>';\n  mountedview(template);\n  // 添加 loading 效果\n  let style = document.createelement(\"style\");\n  style.innerhtml = `@keyframes turn {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n  .loading {\n    display: inline-block;\n    animation: turn 1s linear infinite;\n    -webkit-animation: turn 1s linear infinite;\n  }`;\n  document.head.appendchild(style);\n}\n/**\n * 添加当前文章页的字数元素\n */\nfunction addpagewordscount(wordscount) {\n  if (wordscount) {\n    let template = document.createelement('div');\n    template.title = '文章字数';\n    template.classname = 'book-words iconfont icon-book';\n    template.style.float = 'left';\n    template.style.marginleft = '20px';\n    template.style.fontsize = '0.8rem';\n\n    template.innerhtml = `<a href=\"javascript:;\" style=\"margin-left: 3px; color: #888\">${wordscount}</a>`;\n    mountedview(template);\n  }\n}\n\n/**\n * 添加预计的阅读时间\n */\nfunction addreadtimecount(readtimecount) {\n  let template = document.createelement('div');\n  template.title = '预阅读时长';\n  template.classname = 'reading-time iconfont icon-shijian';\n  template.style.float = 'left';\n  template.style.marginleft = '20px';\n  template.style.fontsize = '0.8rem';\n  template.innerhtml = `<a href=\"javascript:;\" style=\"margin-left: 3px; color: #888\">${readtimecount}</a>`;\n  mountedview(template);\n}\n\n/**\n * 挂载目标到页面上\n */\nfunction mountedview(template, moutedparentevent = '.articleinfo-wrap > .articleinfo > .info') {\n  var i = 0;\n  let interval = setinterval(() => {\n    i++;\n    const parentelement = document.queryselector(moutedparentevent);\n    if (parentelement) {\n      if (!ismountedview(template, parentelement)) {\n        parentelement.appendchild(template);\n        clearinterval(interval);\n      }\n    } else if (i > 1 * 10) {  // 10 秒后清除\n      clearinterval(interval);\n    }\n  }, 1000);\n}\n/**\n * 目标是否已经挂载在页面上\n */\nfunction ismountedview(element, parentelement) {\n  if (element.parentnode == parentelement) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n\n\n\n# 站点信息配置\n\n上面都按照步骤写好代码、使用组件了，那么就可以走最后一步配置我们的站点信息。\n\n进入到 docs/.vuepress/config.js（新版为 config.ts）文件。\n\n引入之前写好的工具代码文件：（路径要准确，这里仅仅是模板）\n\nconst { readfilelist, readtotalfilewords, readeachfilewords } = require('./websiteinfo/readfile');\n\n\n1\n\n\nimport { readfilelist, readtotalfilewords, readeachfilewords } from './websiteinfo/readfile';\n\n\n1\n\n\n如图（演示 js 代码块）：\n\n\n\n在 themeconfig 中添加如下内容：\n\n// 站点配置（首页 & 文章页）\nbloginfo: {\n  blogcreate: '2021-10-19', // 博客创建时间\n  indexview: true,  // 开启首页的访问量和排名统计，默认 true（开启）\n  pageview: true,  // 开启文章页的浏览量统计，默认 true（开启）\n  readingtime: true,  // 开启文章页的预计阅读时间，条件：开启 eachfilewords，默认 true（开启）。可在 eachfilewords 的 readeachfilewords 的第二个和第三个参数自定义，默认 1 分钟 300 中文、160 英文\n  eachfilewords: readeachfilewords([''], 300, 160),  // 开启每个文章页的字数。readeachfilewords(['xx']) 关闭 xx 目录（可多个，可不传参数）下的文章页字数和阅读时长，后面两个参数分别是 1 分钟里能阅读的中文字数和英文字数。无默认值。readeachfilewords() 方法默认排除了 article 为 false 的文章\n  mdfilecounttype: 'archives',  // 开启文档数。1. archives 获取归档的文档数（默认）。2. 数组 readfilelist(['xx']) 排除 xx 目录（可多个，可不传参数），获取其他目录的文档数。提示：readfilelist() 获取 docs 下所有的 md 文档（除了 `.vuepress` 和 `@pages` 目录下的文档）\n  totalwords: 'archives',  // 开启本站文档总字数。1. archives 获取归档的文档数（使用 archives 条件：传入 eachfilewords，否则报错）。2. readtotalfilewords(['xx']) 排除 xx 目录（可多个，可不传参数），获取其他目录的文章字数。无默认值\n  moutedevent: '.tags-wrapper',   // 首页的站点模块挂载在某个元素后面（支持多种选择器），指的是挂载在哪个兄弟元素的后面，默认是热门标签 '.tags-wrapper' 下面，提示：'.categories-wrapper' 会挂载在文章分类下面。'.blogger-wrapper' 会挂载在博客头像模块下面\n  // 下面两个选项：第一次获取访问量失败后的迭代时间\n  indexiteration: 2500,   // 如果首页获取访问量失败，则每隔多少时间后获取一次访问量，直到获取成功或获取 10 次后。默认 3 秒。注意：设置时间太低，可能导致访问量 + 2、+ 3 ......\n  pageiteration: 2500,    // 如果文章页获取访问量失败，则每隔多少时间后获取一次访问量，直到获取成功或获取 10 次后。默认 3 秒。注意：设置时间太低，可能导致访问量 + 2、+ 3 ......\n  // 说明：成功获取一次访问量，访问量 + 1，所以第一次获取失败后，设置的每个隔段重新获取时间，将会影响访问量的次数。如 100 可能每次获取访问量 + 3\n},\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n如图（图片内容不一定是最新，最新的是代码块内容）：\n\n\n\n属性配置的具体介绍请看 属性配置。\n\n\n# 本地主题\n\n如果已经看完了在线主题的内容，其实本内容的大小不变，只是位置变换、一些代码重组。\n\n配置了在线主题，就不需要配置本地主题，反之亦然。\n\n\n# 工具类\n\n在 vdoing/util 目录下创建 websiteinfo.js，添加如下内容：\n\n// 日期格式化(只获取年月日)\nexport function dateformat(date) {\n  if (!(date instanceof date)) {\n    date = new date(date);\n  }\n  return `${date.getutcfullyear()}-${zero(date.getutcmonth() + 1)}-${zero(date.getutcdate())}`;\n}\n\n// 小于10补0\nexport function zero(d) {\n  return d.tostring().padstart(2, '0');\n}\n\n/**\n * 计算最后活动时间\n */\nexport function lastupdateposts(posts) {\n  posts.sort((prev, next) => {\n    return comparedate(prev, next);\n  });\n  return posts;\n}\n\n// 获取时间的时间戳\nexport function gettimenum(post) {\n  let datestr = post.lastupdated || post.frontmatter.date;\n  let date = new date(datestr);\n  if (date == \"invalid date\" && datestr) { // 修复new date()在safari下出现invalid date的问题\n    date = new date(datestr.replace(/-/g, '/'));\n  }\n  return date.gettime();\n}\n\n// 比对时间\nexport function comparedate(a, b) {\n  return gettimenum(b) - gettimenum(a);\n}\n\n/**\n * 获取两个日期相差多少天\n */\nexport function daydiff(startdate, enddate) {\n  if (!enddate) {\n    enddate = startdate;\n    startdate = new date();\n  }\n  startdate = dateformat(startdate);\n  enddate = dateformat(enddate);\n  let day = parseint(math.abs(new date(startdate) - new date(enddate)) / (1000 * 60 * 60 * 24));\n  return day;\n}\n\n/**\n * 计算相差多少年/月/日/时/分/秒\n */\nexport function timediff(startdate, enddate) {\n  if (!enddate) {\n    enddate = startdate;\n    startdate = new date();\n  }\n  if (!(startdate instanceof date)) {\n    startdate = new date(startdate);\n  }\n  if (!(enddate instanceof date)) {\n    enddate = new date(enddate);\n  }\n  // 计算时间戳的差\n  const diffvalue = parseint((math.abs(enddate - startdate) / 1000));\n  if (diffvalue == 0) {\n    return '刚刚';\n  } else if (diffvalue < 60) {\n    return diffvalue + ' 秒';\n  } else if (parseint(diffvalue / 60) < 60) {\n    return parseint(diffvalue / 60) + ' 分';\n  } else if (parseint(diffvalue / (60 * 60)) < 24) {\n    return parseint(diffvalue / (60 * 60)) + ' 时';\n  } else if (parseint(diffvalue / (60 * 60 * 24)) < getdays(startdate.getmonth, startdate.getfullyear)) {\n    return parseint(diffvalue / (60 * 60 * 24)) + ' 天';\n  } else if (parseint(diffvalue / (60 * 60 * 24 * getdays(startdate.getmonth, startdate.getfullyear))) < 12) {\n    return parseint(diffvalue / (60 * 60 * 24 * getdays(startdate.getmonth, startdate.getfullyear))) + ' 月';\n  } else {\n    return parseint(diffvalue / (60 * 60 * 24 * getdays(startdate.getmonth, startdate.getfullyear) * 12)) + ' 年';\n  }\n}\n\n/**\n * 判断当前月的天数（28、29、30、31）\n */\nexport function getdays(mouth, year) {\n  let days = 30;\n  if (mouth === 2) {\n    days = year % 4 === 0 ? 29 : 28;\n  } else if (mouth === 1 || mouth === 3 || mouth === 5 || mouth === 7 || mouth === 8 || mouth === 10 || mouth === 12) {\n    // 月份为：1,3,5,7,8,10,12 时，为大月.则天数为 31；\n    days = 31;\n  }\n  return days;\n}\n\n/**\n * 已运行时间低于一天显示时分秒\n * 目前该函数没有使用，低于一天直接显示不到一天\n */\nexport function gettime(startdate, enddate) {\n  if (day < 0) {\n    let hour = parseint(math.abs(new date(startdate) - new date(enddate)) / (1000 * 60 * 60));\n    if (hour > 0) {\n      let minute = parseint(math.abs(new date(startdate) - new date(enddate) - hour * 60 * 60 * 1000) / (1000 * 60));\n      if (minute > 0) {\n        let second = parseint(math.abs(new date(startdate) - new date(enddate) - hour * 60 * 60 * 1000 - minute * 60 * 1000) / (1000));\n        if (second != 0) {\n          return hour + ' 小时 ' + minute + ' 分钟 ' + second + ' 秒';\n        } else {\n          return hour + ' 小时 ' + minute + ' 分钟 ';\n        }\n      } else {\n        return hour + ' 小时 ';\n      }\n    } else {\n      let minute = parseint(math.abs(new date(startdate) - new date(enddate) - hour * 60 * 60 * 1000) / (1000 * 60));\n      if (minute > 0) {\n        let second = parseint(math.abs(new date(startdate) - new date(enddate) - hour * 60 * 60 * 1000 - minute * 60 * 1000) / (1000));\n        if (second != 0) {\n          return + minute + ' 分钟 ' + second + ' 秒';\n        } else {\n          return minute + ' 分钟 ';\n        }\n      } else {\n        return parseint(math.abs(new date(startdate) - new date(enddate) - hour * 60 * 60 * 1000 - minute * 60 * 1000) / (1000)) + ' 秒 ';\n      }\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n\n\n\n# vue组件创建\n\n需要两个 vue 组件，分别是首页的站点信息模块和文章页信息模块。\n\n在 vdoing/components 目录下创建 webinfo.vue 文件，添加如下内容：\n\n<template>\n  \x3c!-- 村长 --\x3e\n  <div class=\"web-info card-box\">\n    <div class=\"webinfo-title\">\n      <i\n        class=\"iconfont icon-award\"\n        style=\"font-size: 0.875rem; font-weight: 900; width: 1.25em\"\n      ></i>\n      <span>站点信息</span>\n    </div>\n    <div class=\"webinfo-item\">\n      <div class=\"webinfo-item-title\">文章数目：</div>\n      <div class=\"webinfo-content\">{{ mdfilecount }} 篇</div>\n    </div>\n\n    <div class=\"webinfo-item\">\n      <div class=\"webinfo-item-title\">已运行时间：</div>\n      <div class=\"webinfo-content\">\n        {{ createtonowday != 0 ? createtonowday + \" 天\" : \"不到一天\" }}\n      </div>\n    </div>\n\n    <div class=\"webinfo-item\">\n      <div class=\"webinfo-item-title\">本站总字数：</div>\n      <div class=\"webinfo-content\">{{ totalwords }} 字</div>\n    </div>\n\n    <div class=\"webinfo-item\">\n      <div class=\"webinfo-item-title\">最后活动时间：</div>\n      <div class=\"webinfo-content\">\n        {{ lastactivedate == \"刚刚\" ? \"刚刚\" : lastactivedate + \"前\" }}\n      </div>\n    </div>\n\n    <div v-if=\"indexview\" class=\"webinfo-item\">\n      <div class=\"webinfo-item-title\">本站被访问了：</div>\n      <div class=\"webinfo-content\">\n        <span id=\"busuanzi_value_site_pv\" class=\"web-site-pv\"\n          ><i title=\"正在获取...\" class=\"loading iconfont icon-loading\"></i>\n        </span>\n        次\n      </div>\n    </div>\n\n    <div v-if=\"indexview\" class=\"webinfo-item\">\n      <div class=\"webinfo-item-title\">您的访问排名：</div>\n      <div class=\"webinfo-content busuanzi\">\n        <span id=\"busuanzi_value_site_uv\" class=\"web-site-uv\"\n          ><i title=\"正在获取...\" class=\"loading iconfont icon-loading\"></i>\n        </span>\n        名\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { daydiff, timediff, lastupdateposts } from \"../websiteinfo/utils\";\nlet busuanzi; // 统计量\nexport default {\n  data() {\n    return {\n      // 村长\n      mdfilecount: 0, // markdown 文档总数\n      createtonowday: 0, // 博客创建时间距今多少天\n      lastactivedate: \"\", // 最后活动时间\n      totalwords: 0, // 本站总字数\n      indexview: true, // 开启访问量和排名统计\n    };\n  },\n  computed: {\n    $lastupdateposts() {\n      return lastupdateposts(this.$filterposts);\n    },\n  },\n  mounted() {\n    // 村长\n    if (object.keys(this.$themeconfig.bloginfo).length > 0) {\n      const {\n        blogcreate,\n        mdfilecounttype,\n        totalwords,\n        moutedevent,\n        eachfilewords,\n        indexiteration,\n        indexview,\n      } = this.$themeconfig.bloginfo;\n      this.createtonowday = daydiff(blogcreate);\n      if (mdfilecounttype != \"archives\") {\n        this.mdfilecount = mdfilecounttype.length;\n      } else {\n        this.mdfilecount = this.$filterposts.length;\n      }\n      if (totalwords == \"archives\" && eachfilewords) {\n        let archiveswords = 0;\n        eachfilewords.foreach((itemfile) => {\n          if (itemfile.wordscount < 1000) {\n            archiveswords += itemfile.wordscount;\n          } else {\n            let wordscount = itemfile.wordscount.slice(\n              0,\n              itemfile.wordscount.length - 1\n            );\n            archiveswords += wordscount * 1000;\n          }\n        });\n        this.totalwords = math.round(archiveswords / 100) / 10 + \"k\";\n      } else if (totalwords == \"archives\") {\n        this.totalwords = 0;\n        console.log(\n          \"如果 totalwords 使用 archives，必须传入 eachfilewords，显然您并没有传入！\"\n        );\n      } else {\n        this.totalwords = totalwords;\n      }\n      // 最后一次活动时间\n      this.lastactivedate = timediff(this.$lastupdateposts[0].lastupdated);\n      this.mountedwebinfo(moutedevent);\n      // 获取访问量和排名\n      this.indexview = indexview == undefined ? true : indexview;\n      if (this.indexview) {\n        this.getindexviewcouter(indexiteration);\n      }\n    }\n  },\n  methods: {\n    /**\n     * 挂载站点信息模块\n     */\n    mountedwebinfo(moutedevent = \".tags-wrapper\") {\n      let interval = setinterval(() => {\n        const tagswrapper = document.queryselector(moutedevent);\n        const webinfo = document.queryselector(\".web-info\");\n        if (tagswrapper && webinfo) {\n          if (!this.issiblilngnode(tagswrapper, webinfo)) {\n            tagswrapper.parentnode.insertbefore(\n              webinfo,\n              tagswrapper.nextsibling\n            );\n            clearinterval(interval);\n          }\n        }\n      }, 200);\n    },\n    /**\n     * 挂载在兄弟元素后面，说明当前组件是 siblingnode 变量\n     */\n    issiblilngnode(element, siblingnode) {\n      if (element.siblingnode == siblingnode) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    /**\n     * 首页的统计量\n     */\n    getindexviewcouter(iterationtime = 3000) {\n      if (busuanzi) {\n        busuanzi.fetch();\n      } else {\n        busuanzi = require(\"busuanzi.pure.js\");\n      }\n      var i = 0;\n      var defaultcouter = \"9999\";\n      // 如果 require 没有获取成功，则手动获取\n      // 但是容易产生访问量叠加，如果只需要第一次获取数据（可能获取失败），可注释掉，此内容是第一次获取失败后，重新获取访问量，可能导致访问量再次 + 1\n      // 取决于访问人的网络，以及 settimeout 的时间（需求调节）\n      settimeout(() => {\n        let interval = setinterval(() => {\n          const indexuv = document.queryselector(\".web-site-pv\");\n          const indexpv = document.queryselector(\".web-site-uv\");\n          if (indexpv || indexuv) {\n            i += iterationtime;\n            if (i > iterationtime * 10) {\n              indexpv.innertext = defaultcouter;\n              indexuv.innertext = defaultcouter;\n              clearinterval(interval); // 10 秒后无法获取，则取消获取\n            }\n            if (indexpv.innertext == \"\" && indexuv.innertext == \"\") {\n              // 手动获取访问量\n              busuanzi.fetch();\n            } else {\n              clearinterval(interval);\n            }\n          } else {\n            clearinterval(interval);\n          }\n        }, iterationtime);\n      }, iterationtime);\n    },\n  },\n};\n<\/script>\n\n<style scoped>\n.web-info {\n  font-size: 0.875rem;\n  padding: 0.95rem;\n}\n.webinfo-title {\n  text-align: center;\n  color: #888;\n  font-weight: bold;\n  padding: 0 0 10px 0;\n}\n.webinfo-item {\n  padding: 8px 0 0;\n  margin: 0;\n}\n.webinfo-item-title {\n  display: inline-block;\n}\n.webinfo-content {\n  display: inline-block;\n  float: right;\n}\n@keyframes turn {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n.loading {\n  display: inline-block;\n  animation: turn 1s linear infinite;\n  -webkit-animation: turn 1s linear infinite;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n\n\n继续在 vdoing/components 目录下创建 pagesview.vue 文件，添加如下内容：\n\n<template>\n  <div class=\"page-view\">\n    \x3c!-- 文章字数 --\x3e\n    <div title=\"文章字数\" class=\"book-words iconfont icon-book\">\n      <a href=\"javascript:;\" style=\"margin-left: 3px; color: #888\">{{\n        wordscount\n      }}</a>\n    </div>\n\n    \x3c!-- 预阅读时长 --\x3e\n    <div v-if=\"readingtime\" title=\"预阅读时长\" class=\"reading-time iconfont icon-shijian\">\n      <a href=\"javascript:;\" style=\"margin-left: 3px; color: #888\">{{\n        readingtime\n      }}</a>\n    </div>\n    \x3c!-- 浏览量 --\x3e\n    <div v-if=\"pageview\" title=\"浏览量\" class=\"page-view iconfont icon-view\">\n      <a\n        style=\"color: #888; margin-left: 3px\"\n        href=\"javascript:;\"\n        id=\"busuanzi_value_page_pv\"\n        class=\"view-data\"\n        ><i title=\"正在获取...\" class=\"loading iconfont icon-loading\"></i\n      ></a>\n    </div>\n  </div>\n</template>\n\n<script>\nlet busuanzi;\nexport default {\n  data() {\n    return {\n      // 村长\n      wordscount: 0,\n      readingtime: 0,\n      pageview: true,\n      pageiteration: 3000,\n    };\n  },\n  mounted() {\n    this.$filterposts.foreach((itempage) => {\n      if (itempage.path == this.$route.path) {\n        const { eachfilewords, pageview, pageiteration, readingtime } =\n          this.$themeconfig.bloginfo;\n        this.pageiteration = pageiteration;\n        if (eachfilewords) {\n          eachfilewords.foreach((itemfile) => {\n            if (itemfile.permalink == itempage.frontmatter.permalink) {\n              this.wordscount = itemfile.wordscount;\n              if (readingtime || readingtime == undefined) {\n                this.readingtime = itemfile.readingtime;\n              }else {\n                this.readingtime = false;\n              }\n            }\n          });\n        }\n        this.pageview = pageview == undefined ? true : pageview;\n        if(this.pageview){\n          this.getpageviewcouter(this.pageiteration);\n        }\n        return;\n      }\n    });\n  },\n  watch: {\n    $route(to, from) {\n      if (from.path === '/' && from.matched && from.matched.length === 0) {    // 如果页面是刷新或者第一次进入\n        // 刷新或者第一次进入不需要在这里重新获取\n      }else if (to.path !== '/' && to.path != from.path) {\n        if(this.pageview){\n          this.getpageviewcouter(this.pageiteration);\n        }\n      }\n    }\n  },\n  methods: {\n    /**\n     * 文章页的访问量\n     */\n    getpageviewcouter(iterationtime = 3000) {\n      if (busuanzi) {\n        busuanzi.fetch();\n      } else {\n        busuanzi = require(\"busuanzi.pure.js\");\n      }\n      var i = 0;\n      var defaultcouter = \"9999\";\n      // 如果 require 没有获取成功，则手动获取\n      // 但是容易产生访问量叠加，如果只需要第一次获取数据（可能获取失败），可注释掉，此内容是第一次获取失败后，重新获取访问量，可能导致访问量再次 + 1\n      // 取决于访问人的网络，以及 settimeout 的时间（需求调节）\n      settimeout(() => {\n        let interval = setinterval(() => {\n          const pageview = document.queryselector(\".view-data\");\n          if (pageview) {\n            i += iterationtime;\n            if (i > iterationtime * 10) {\n              pageview.innertext = defaultcouter;\n              clearinterval(interval); // 10 秒后无法获取，则取消获取\n            }\n            if (pageview.innertext == \"\") {\n              // 手动获取访问量\n              busuanzi.fetch();\n            } else {\n              clearinterval(interval);\n            }\n          } else {\n            clearinterval(interval);\n          }\n        }, iterationtime);\n      }, iterationtime);\n    },\n  },\n};\n<\/script>\n\n<style scoped>\n.page-view > div {\n  float: left;\n  margin-left: 20px;\n  font-size: 0.8rem;\n}\n\n@keyframes turn {\n  0% {\n    transform: rotate(0deg);\n  }\n\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n.loading {\n  display: inline-block;\n  animation: turn 1s linear infinite;\n  -webkit-animation: turn 1s linear infinite;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n\n\n\n# vue组件引用\n\n写好两个组件，那么我们需要使用它们。\n\n首先引入 webinfo.vue 组件，打开 vdoing/components/home.vue 文件。\n\n大概在 174 行处引入 webinfo.vue 组件：\n\nimport webinfo from './webinfo.vue';\n\n\n1\n\n\n大概在 242 行处找到 components 注册该组件：\n\ncomponents: { ......, webinfo },\n\n\n1\n\n\n大概在 153 行处（div 的 class 为 custom-html-box 的上方），添加如下内容：\n\n<webinfo />\n\n\n1\n\n\n三个效果图：\n\n\n\n\n\n\n\n接着引入 pagesview.vue 组件，打开 vdoing/components/articleinfo.vue 文件。\n\n大概在 67 行处引入 pagesview.vue 组件：\n\nimport pagesview from './pagesview.vue';\n\n\n1\n\n\n大概在 69 行处添加 components 注册该组件：\n\ncomponents: { pagesview },\n\n\n1\n\n\n大概在 61 行处，添加如下内容：\n\n<pagesview style=\"margin-left: 0\" />\n\n\n1\n\n\n效果图：\n\n\n\n\n# 核心配置文件\n\n在 docs/.vuepress 目录下创建 websiteinfo 文件夹，并在文件夹里创建 readfile.js 文件。\n\n添加如下内容：\n\nconst fs = require('fs'); // 文件模块\nconst path = require('path'); // 路径模块\nconst matter = require('gray-matter'); // frontmatter解析器 https://github.com/jonschlinkert/gray-matter\nconst chalk = require('chalk') // 命令行打印美化\nconst log = console.log\nconst docsroot = path.join(__dirname, '..', '..', '..', 'docs'); // docs文件路径\n\n/**\n * 获取本站的文章数据\n * 获取所有的 md 文档，可以排除指定目录下的文档\n */\nfunction readfilelist(excludefiles = [''], dir = docsroot, fileslist = []) {\n  const files = fs.readdirsync(dir);\n  files.foreach((item, index) => {\n    let filepath = path.join(dir, item);\n    const stat = fs.statsync(filepath);\n    if (!(excludefiles instanceof array)) {\n      log(chalk.yellow(`error: 传入的参数不是一个数组。`))\n    }\n    excludefiles.foreach((excludefile) => {\n      if (stat.isdirectory() && item !== '.vuepress' && item !== '@pages' && item !== excludefile) {\n        readfilelist(excludefiles, path.join(dir, item), fileslist);  //递归读取文件\n      } else {\n        if (path.basename(dir) !== 'docs') { // 过滤 docs目录级下的文件\n\n          const filenamearr = path.basename(filepath).split('.')\n          let name = null, type = null;\n          if (filenamearr.length === 2) { // 没有序号的文件\n            name = filenamearr[0]\n            type = filenamearr[1]\n          } else if (filenamearr.length === 3) { // 有序号的文件\n            name = filenamearr[1]\n            type = filenamearr[2]\n          } else { // 超过两个‘.’的\n            log(chalk.yellow(`warning: 该文件 \"${filepath}\" 没有按照约定命名，将忽略生成相应数据。`))\n            return\n          }\n          if (type === 'md') { // 过滤非 md 文件\n            fileslist.push({\n              name,\n              filepath\n            });\n          }\n        }\n      }\n    });\n  });\n  return fileslist;\n}\n/**\n * 获取本站的文章总字数\n * 可以排除某个目录下的 md 文档字数\n */\nfunction readtotalfilewords(excludefiles = ['']) {\n  const fileslist = readfilelist(excludefiles);\n  var wordcount = 0;\n  fileslist.foreach((item) => {\n    const content = getcontent(item.filepath);\n    var len = counter(content);\n    wordcount += len[0] + len[1];\n  });\n  if (wordcount < 1000) {\n    return wordcount;\n  }\n  return math.round(wordcount / 100) / 10 + 'k';\n}\n/**\n * 获取每一个文章的字数\n * 可以排除某个目录下的 md 文档字数\n */\nfunction readeachfilewords(excludefiles = [''], cn, en) {\n  const fileslistwords = [];\n  const fileslist = readfilelist(excludefiles);\n  fileslist.foreach((item) => {\n    const content = getcontent(item.filepath);\n    var len = counter(content);\n    // 计算预计的阅读时间\n    var readingtime = readtime(len, cn, en);\n    var wordscount = 0;\n    wordscount = len[0] + len[1];\n    if (wordscount >= 1000) {\n      wordscount = math.round(wordscount / 100) / 10 + 'k';\n    }\n    // filematterobj => {content:'剔除frontmatter后的文件内容字符串', data:{<frontmatter对象>}, ...}\n    const filematterobj = matter(content, {});\n    const matterdata = filematterobj.data;\n    fileslistwords.push({ ...item, wordscount, readingtime, ...matterdata });\n  });\n  return fileslistwords;\n}\n\n/**\n * 计算预计的阅读时间\n */\nfunction readtime(len, cn = 300, en = 160) {\n  var readingtime = len[0] / cn + len[1] / en;\n  if (readingtime > 60 && readingtime < 60 * 24) {   // 大于一个小时，小于一天\n    let hour = parseint(readingtime / 60);\n    let minute = parseint((readingtime - hour * 60));\n    if (minute === 0) {\n      return hour + 'h';\n    }\n    return hour + 'h' + minute + 'm';\n  } else if (readingtime > 60 * 24) {      // 大于一天\n    let day = parseint(readingtime / (60 * 24));\n    let hour = parseint((readingtime - day * 24 * 60) / 60);\n    if (hour === 0) {\n      return day + 'd';\n    }\n    return day + 'd' + hour + 'h';\n  }\n  return readingtime < 1 ? '1' : parseint((readingtime * 10)) / 10 + 'm';   // 取一位小数\n}\n\n/**\n * 读取文件内容\n */\nfunction getcontent(filepath) {\n  return fs.readfilesync(filepath, 'utf8');\n}\n/**\n * 获取文件内容的字数\n * cn：中文\n * en：一整句英文（没有空格隔开的英文为 1 个）\n */\nfunction counter(content) {\n  const cn = (content.match(/[\\u4e00-\\u9fa5]/g) || []).length;\n  const en = (content.replace(/[\\u4e00-\\u9fa5]/g, '').match(/[a-za-z0-9_\\u0392-\\u03c9\\u0400-\\u04ff]+|[\\u4e00-\\u9fff\\u3400-\\u4dbf\\uf900-\\ufaff\\u3040-\\u309f\\uac00-\\ud7af\\u0400-\\u04ff]+|[\\u00e4\\u00c4\\u00e5\\u00c5\\u00f6\\u00d6]+|\\w+/g) || []).length;\n  return [cn, en];\n}\n\nmodule.exports = {\n  readfilelist,\n  readtotalfilewords,\n  readeachfilewords,\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n\n\nimport fs from 'fs'; // 文件模块\nimport path from 'path'; // 路径模块\nimport matter from 'gray-matter'; // frontmatter解析器 https://github.com/jonschlinkert/gray-matter\nimport chalk from 'chalk' // 命令行打印美化\nconst log = console.log\nconst docsroot = path.join(__dirname, '..', '..', '..', 'docs'); // docs文件路径\n\n/**\n * 获取本站的文章数据\n * 获取所有的 md 文档，可以排除指定目录下的文档\n */\nfunction readfilelist(excludefiles = [''], dir = docsroot, fileslist = []) {\n  const files = fs.readdirsync(dir);\n  files.foreach((item, index) => {\n    let filepath = path.join(dir, item);\n    const stat = fs.statsync(filepath);\n    if (!(excludefiles instanceof array)) {\n      log(chalk.yellow(`error: 传入的参数不是一个数组。`))\n    }\n    excludefiles.foreach((excludefile) => {\n      if (stat.isdirectory() && item !== '.vuepress' && item !== '@pages' && item !== excludefile) {\n        readfilelist(excludefiles, path.join(dir, item), fileslist);  //递归读取文件\n      } else {\n        if (path.basename(dir) !== 'docs') { // 过滤 docs目录级下的文件\n\n          const filenamearr = path.basename(filepath).split('.')\n          let name = null, type = null;\n          if (filenamearr.length === 2) { // 没有序号的文件\n            name = filenamearr[0]\n            type = filenamearr[1]\n          } else if (filenamearr.length === 3) { // 有序号的文件\n            name = filenamearr[1]\n            type = filenamearr[2]\n          } else { // 超过两个‘.’的\n            log(chalk.yellow(`warning: 该文件 \"${filepath}\" 没有按照约定命名，将忽略生成相应数据。`))\n            return\n          }\n          if (type === 'md') { // 过滤非 md 文件\n            fileslist.push({\n              name,\n              filepath\n            });\n          }\n        }\n      }\n    });\n  });\n  return fileslist;\n}\n/**\n * 获取本站的文章总字数\n * 可以排除某个目录下的 md 文档字数\n */\nfunction readtotalfilewords(excludefiles = ['']) {\n  const fileslist = readfilelist(excludefiles);\n  var wordcount = 0;\n  fileslist.foreach((item) => {\n    const content = getcontent(item.filepath);\n    var len = counter(content);\n    wordcount += len[0] + len[1];\n  });\n  if (wordcount < 1000) {\n    return wordcount;\n  }\n  return math.round(wordcount / 100) / 10 + 'k';\n}\n/**\n * 获取每一个文章的字数\n * 可以排除某个目录下的 md 文档字数\n */\nfunction readeachfilewords(excludefiles = [''], cn, en) {\n  const fileslistwords = [];\n  const fileslist = readfilelist(excludefiles);\n  fileslist.foreach((item) => {\n    const content = getcontent(item.filepath);\n    var len = counter(content);\n    // 计算预计的阅读时间\n    var readingtime = readtime(len, cn, en);\n    var wordscount = 0;\n    wordscount = len[0] + len[1];\n    if (wordscount >= 1000) {\n      wordscount = math.round(wordscount / 100) / 10 + 'k';\n    }\n    // filematterobj => {content:'剔除frontmatter后的文件内容字符串', data:{<frontmatter对象>}, ...}\n    const filematterobj = matter(content, {});\n    const matterdata = filematterobj.data;\n    fileslistwords.push({ ...item, wordscount, readingtime, ...matterdata });\n  });\n  return fileslistwords;\n}\n\n/**\n * 计算预计的阅读时间\n */\nfunction readtime(len, cn = 300, en = 160) {\n  var readingtime = len[0] / cn + len[1] / en;\n  if (readingtime > 60 && readingtime < 60 * 24) {   // 大于一个小时，小于一天\n    let hour = parseint(readingtime / 60);\n    let minute = parseint((readingtime - hour * 60));\n    if (minute === 0) {\n      return hour + 'h';\n    }\n    return hour + 'h' + minute + 'm';\n  } else if (readingtime > 60 * 24) {      // 大于一天\n    let day = parseint(readingtime / (60 * 24));\n    let hour = parseint((readingtime - day * 24 * 60) / 60);\n    if (hour === 0) {\n      return day + 'd';\n    }\n    return day + 'd' + hour + 'h';\n  }\n  return readingtime < 1 ? '1' : parseint((readingtime * 10)) / 10 + 'm';   // 取一位小数\n}\n\n/**\n * 读取文件内容\n */\nfunction getcontent(filepath) {\n  return fs.readfilesync(filepath, 'utf8');\n}\n/**\n * 获取文件内容的字数\n * cn：中文\n * en：一整句英文（没有空格隔开的英文为 1 个）\n */\nfunction counter(content) {\n  const cn = (content.match(/[\\u4e00-\\u9fa5]/g) || []).length;\n  const en = (content.replace(/[\\u4e00-\\u9fa5]/g, '').match(/[a-za-z0-9_\\u0392-\\u03c9\\u0400-\\u04ff]+|[\\u4e00-\\u9fff\\u3400-\\u4dbf\\uf900-\\ufaff\\u3040-\\u309f\\uac00-\\ud7af\\u0400-\\u04ff]+|[\\u00e4\\u00c4\\u00e5\\u00c5\\u00f6\\u00d6]+|\\w+/g) || []).length;\n  return [cn, en];\n}\n\nexport {\n  readfilelist,\n  readtotalfilewords,\n  readeachfilewords,\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n\n\n\n# 配置站点信息\n\n最后一步，在 docs/.vuepress/config.js（新版为 config.ts）文件，引入写好的 readfile.js 文件（路径要准确，这里仅仅是模板）\n\nconst { readfilelist, readtotalfilewords, readeachfilewords } = require('./websiteinfo/readfile');\n\n\n1\n\n\nimport { readfilelist, readtotalfilewords, readeachfilewords } from './websiteinfo/readfile';\n\n\n1\n\n\n如图（演示 js 代码块）：\n\n\n\n在 themeconfig 中添加如下内容：\n\n// 站点配置（首页 & 文章页）\nbloginfo: {\n  blogcreate: '2021-10-19', // 博客创建时间\n  indexview: true,  // 开启首页的访问量和排名统计，默认 true（开启）\n  pageview: true,  // 开启文章页的浏览量统计，默认 true（开启）\n  readingtime: true,  // 开启文章页的预计阅读时间，条件：开启 eachfilewords，默认 true（开启）。可在 eachfilewords 的 readeachfilewords 的第二个和第三个参数自定义，默认 1 分钟 300 中文、160 英文\n  eachfilewords: readeachfilewords([''], 300, 160),  // 开启每个文章页的字数。readeachfilewords(['xx']) 关闭 xx 目录（可多个，可不传参数）下的文章页字数和阅读时长，后面两个参数分别是 1 分钟里能阅读的中文字数和英文字数。无默认值。readeachfilewords() 方法默认排除了 article 为 false 的文章\n  mdfilecounttype: 'archives',  // 开启文档数。1. archives 获取归档的文档数（默认）。2. 数组 readfilelist(['xx']) 排除 xx 目录（可多个，可不传参数），获取其他目录的文档数。提示：readfilelist() 获取 docs 下所有的 md 文档（除了 `.vuepress` 和 `@pages` 目录下的文档）\n  totalwords: 'archives',  // 开启本站文档总字数。1. archives 获取归档的文档数（使用 archives 条件：传入 eachfilewords，否则报错）。2. readtotalfilewords(['xx']) 排除 xx 目录（可多个，可不传参数），获取其他目录的文章字数。无默认值\n  moutedevent: '.tags-wrapper',   // 首页的站点模块挂载在某个元素后面（支持多种选择器），指的是挂载在哪个兄弟元素的后面，默认是热门标签 '.tags-wrapper' 下面，提示：'.categories-wrapper' 会挂载在文章分类下面。'.blogger-wrapper' 会挂载在博客头像模块下面\n  // 下面两个选项：第一次获取访问量失败后的迭代时间\n  indexiteration: 2500,   // 如果首页获取访问量失败，则每隔多少时间后获取一次访问量，直到获取成功或获取 10 次后。默认 3 秒。注意：设置时间太低，可能导致访问量 + 2、+ 3 ......\n  pageiteration: 2500,    // 如果文章页获取访问量失败，则每隔多少时间后获取一次访问量，直到获取成功或获取 10 次后。默认 3 秒。注意：设置时间太低，可能导致访问量 + 2、+ 3 ......\n  // 说明：成功获取一次访问量，访问量 + 1，所以第一次获取失败后，设置的每个隔段重新获取时间，将会影响访问量的次数。如 100 可能每次获取访问量 + 3\n},\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n如图（图片内容不一定是最新）：\n\n\n\n属性配置的具体介绍请看 属性配置。\n\n\n# 属性配置\n\nblogcreate\n\n * 类型：string\n * 默认值：当前时间（new date()）\n * 格式：yyyy-mm-dd\n\n博客创建时间。如果不添加时间，页面上显示 0 天。\n\nmdfilecounttype\n\n * 类型：string | readfilelist()\n * 参数：数组\n * 默认值：archives\n\n文章数目。如果不添加内容，页面上显示归档的文章数目。\n\nreadfilelist 是一个 js 文件，需要引入，参数是 目录的全名，最终效果会 排除该目录里的文章数，可多选，逗号隔开。也可不传参数。\n\n温馨提示：readfilelist() 不传参数会获取 docs 下所有的 md 文档（除了 .vuepress 和 @pages 目录下的文档）。\n\ntotalwords\n\n * 类型：string | readfilewords()\n * 参数：数组\n * 默认值：null\n\n本站文档总字数。如果不添加内容，页面上显示 0 字。\n\nstring 仅支持 archives，并且使用该类型有条件：必须使用 eachfilewords，否则报错。\n\nreadfilewords 是一个 js 文件，需要引入，参数是目录的全名，最终效果会 排除该目录里的文章字数，可多选，逗号隔开。也可不传参数。\n\nmoutedevent\n\n * 类型：string\n * 默认值：.tags-wrapper\n\n选择挂载的元素属性，支持多种选择器（id、class ......），该模块会挂载到该元素后面，形成兄弟元素。（仅支持首页的元素）。\n\n温馨提示：.categories-wrapper 会挂载在文章分类下面；.blogger-wrapper 会挂载在头像模块下面；.icons 会挂载在头像下方、图标上方。\n\n默认是热门标签 .tags-wrapper 下面。\n\nindexview\n\n * 类型：boolean\n * 默认值：true\n\n开启首页的访问量和排名统计，默认 true(开启)。\n\npageview\n\n * 类型 boolean\n * 默认值：true\n\n开启文章页的浏览量统计，默认 true（开启）。\n\neachfilewords\n\n * 类型：readeachfilewords()\n * 参数：数组\n * 默认值：null\n\n开启每个文章页的字数。如果不添加内容，则不开启。\n\nreadeachfilewords(['xx']) 关闭 xx 目录（可多个，可不传参数）下的文章页字数和阅读时长。\n\nreadeachfilewords() 第一个参数是数组，后面两个参数分别是 1 分钟里能阅读的中文字数和英文字数，配合 readingtime 使用。\n\nreadeachfilewords() 方法默认排除了 article 为 false 的文章。\n\nreadingtime\n\n * 类型：boolean\n\n * 默认值：true\n\n * 条件：使用 eachfilewords\n\n开启文章页的预计阅读时间。默认阅读中文 1 分钟 300 个字，英文 1 分钟 160 个字。如果想自定义阅读文字时长，请在 eachfilewords 的 readeachfilewords() 传入后面两个参数。分别为 1 分钟阅读的中文和英文个数。\n\nindexiteration\n\n * 类型：number\n * 默认值：3000\n\n如果首页获取访问量失败，则每隔多少时间后获取一次访问量，直到获取成功或获取 10 次后。默认 3 秒。\n\n注意：设置时间太低，可能导致访问量 + 2、+ 3 ......\n\npageiteration\n\n * 类型：number\n * 默认值：3000\n\n如果文章页获取访问量失败，则每隔多少时间后获取一次访问量，直到获取成功或获取 10 次后。默认 3 秒。\n\n注意：设置时间太低，可能导致访问量 + 2、+ 3 ......\n\n说明：成功获取一次访问量，访问量 + 1，所以第一次获取失败后，设置的每个隔段重新获取时间，将会影响访问量的次数。如 100 可能每次获取访问量 + 3。\n\n\n# 结束语\n\n如果你还有疑惑，可以去我的 github 仓库或者 gitee 仓库查看源码。\n\ngithub：https://github.com/huangguan2001/kele-bingtang.github.io\n\ngitee：https://gitee.com/kele-bingtang/kele-bingtang\n\n如果你有更好的方式，评论区留言告诉我，或者加入 vdoing 主题的 qq 群：694387113。谢谢！",charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"本站 - 导航站模块",frontmatter:{title:"本站 - 导航站模块",date:"2022-01-11T14:03:46.000Z",permalink:"/about/website/tools/",titleTag:"原创",categories:["关于 - 本站"],tags:["本站"],readingShow:"top"},regularPath:"/80.%E5%85%B3%E4%BA%8E/06.%E5%85%B3%E4%BA%8E%20-%20%E6%9C%AC%E7%AB%99/24.%E6%9C%AC%E7%AB%99%20-%20%E5%AF%BC%E8%88%AA%E7%AB%99%E6%A8%A1%E5%9D%97.html",relativePath:"80.关于/06.关于 - 本站/24.本站 - 导航站模块.md",key:"v-adeda9ba",path:"/about/website/tools/",headers:[{level:2,title:"前言",slug:"前言",normalizedTitle:"前言",charIndex:58},{level:2,title:"Vue组件",slug:"vue组件",normalizedTitle:"vue组件",charIndex:64},{level:2,title:"组件使用",slug:"组件使用",normalizedTitle:"组件使用",charIndex:73},{level:2,title:"属性",slug:"属性",normalizedTitle:"属性",charIndex:81},{level:2,title:"结束语",slug:"结束语",normalizedTitle:"结束语",charIndex:87}],headersStr:"前言 Vue组件 组件使用 属性 结束语",content:'笔记\n\n主题自带的卡片列表不适合制作导航卡片，于是我稍微自己实现了它。\n\n2021-01-11 @村长\n\n\n\n * 前言\n * Vue组件\n * 组件使用\n * 属性\n * 结束语\n\n\n\n\n# 前言\n\n目前适用版本是 Vdoing v1.x。\n\n导航卡片是什么，请先看我的导航站：https://notes.youngkbt.cn/navigation/\n\n因为个人不使用本地主题，所以无法直接获取一个文章的内容来解析，只能一切都在本地代码制作。\n\n\n# Vue组件\n\n导航卡片需要一个 Vue 组件，在 docs/.vuepress/components 下创建 Card.vue 组件，如果没有 components 文件夹，请创建。\n\n组件添加如下内容：\n\n<template>\n  <div>\n    <template v-if="cardData[0].title != undefined">\n        <div style="text-align: center; font-weight: 900">{{ cardData[0].title }}</div>\n    </template>\n    <div class="kbt-row">\n    <div\n      class="card-nav-box"\n      :style="\n        cardListSize == 4\n          ? \'width: 25%;\'\n          : cardListSize == 2\n          ? \'width: 50%;\'\n          : \'width: 33.333%;\'\n      "\n      v-for="(item,index) in cardData"\n      :key="index"\n    >\n      <a :href="item.cardSrc" target="_blank">\n        <div class="card-nav-item">\n          <div class="card-nav-title">\n            <img\n              v-if="item.cardImgSrc && item.cardImgSrc != \'\'"\n              :src="item.cardImgSrc"\n              alt="正在加载 ..."\n              class="card-nav-img"\n            />\n            <p class="card-nav-name" :style="\'color:\' + carTitleColor">\n              {{ item.cardName }}\n            </p>\n          </div>\n          <div :title="item.cardContent" class="card-nav-content">\n            {{ item.cardContent }}\n          </div>\n        </div>\n      </a>\n    </div>\n  </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    cardData: {\n      type: Array,\n      default: [],\n    },\n    cardListSize: {\n      type: Number,\n      default: 3,\n    },\n    carTitleColor: {\n      type: String,\n      default: "#000",\n    },\n    carHoverColor: {\n      type: String,\n      default: "#000",\n    },\n  },\n  mounted() {\n    this.cardHoverColor();\n  },\n  methods: {\n    cardHoverColor() {\n      if(!document.querySelector(".card")){\n        const carHoverColor = this.carHoverColor;\n        let style = document.createElement("style");\n        style.className = \'card\';\n        style.innerHTML = `.card-nav-content:hover{color: ${carHoverColor}}`;\n        document.head.appendChild(style);\n      }\n    },\n  },\n};\n<\/script>\n\n<style scoped>\n.kbt-row {\n  margin: 0.7rem 0;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n}\n.card-nav-box {\n  padding: 0 10px 0 10px;\n  box-sizing: border-box;\n}\n.card-nav-box a:hover {\n  text-decoration: none !important;\n}\n.card-nav-item {\n  min-height: 76px;\n  margin-top: 10px;\n  margin-bottom: 10px;\n  padding: 10px;\n  background-color: #fff;\n  border-radius: 4px;\n  box-shadow: 0 2px 10px 0 rgb(0 0 0 / 10%);\n  transition: all 0.4s;\n}\n.card-nav-item:hover {\n  box-shadow: 0 10px 20px -10px rgba(0, 0, 0, 0.7);\n  transform: translateY(-3px) scale(1.01, 1.01);\n}\n.card-nav-title {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-size: 15px;\n  margin: 5px 0;\n  height: 40px;\n  line-height: 40px;\n  white-space: nowrap;\n}\n.card-nav-img {\n  height: 38px;\n}\n.card-nav-name {\n  height: 40px;\n  float: right;\n  font-size: 15px;\n  margin: 0 0;\n  line-height: 40px;\n  white-space: nowrap;\n}\n.card-nav-content {\n  margin-top: 10px;\n  font-size: 13px;\n  color: #999;\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  height: 37px;\n  margin-bottom: 5px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n\n\n\n# 组件使用\n\ndocs 下的任意目录建立一个 md 文档，我在 docs 根目录下建立了 01.导航站.md 文档。\n\n然后在文档里添加一些内容（开头的 frontmatter 需要配置你自己的）：\n\n---\ntitle: 本站 - 导航站模块     # 你自己的标题\ndate: 2022-01-11 14:03:46   # 你自己的时间\npermalink: /about/website/tools/  # 你自己的链接\ncategories:\n  - \ntags: \n  - \n---\n\n## 搜索引擎\n\n<ClientOnly>\n  <Card :cardData="cardData0" :cardListSize=3 carTitlColor="#000" carHoverColor="#000" />\n</ClientOnly>\n\n## 前端开发\n\n<ClientOnly>\n  <Card :cardData="cardData1" :cardListSize=3 carTitlColor="#000" carHoverColor="#000" />\n</ClientOnly>\n\n<script>\nexport default {\n  data() {\n    return {\n      cardData0: [\n        {\n          id: "0",\n          cardSrc: "http://www.baidu.com/",\n          cardImgSrc:\n            "https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/tools/20220104224044.png",\n          cardName: "百度",\n          cardContent:\n            "百度——全球最大的中文搜索引擎及最大的中文网站，全球领先的人工智能公司",\n        },\n        {\n          cardSrc: "http://www.google.com/",\n          cardImgSrc:\n            "https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/tools/20220104225539.png",\n          cardName: "Google",\n          cardContent: "全球最大的搜索引擎公司",\n        },\n        {\n          cardSrc: "https://www.bing.com/",\n          cardImgSrc:\n            "https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/tools/20220104224430.png",\n          cardName: "Bing",\n          cardContent: "微软公司推出的用以取代Live Search的搜索引擎",\n        },\n      ],\n      cardData1: [\n        {\n          id: "1",\n          title: "Vue & UI",\n          cardSrc: "https://cn.vuejs.org/",\n          cardImgSrc:\n            "https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/tools/20220105001047.png",\n          cardName: "Vue",\n          cardContent: "渐进式 JavaScript 框架",\n        },\n        {\n          cardSrc: "https://element.eleme.cn/#/zh-CN/",\n          cardImgSrc:\n            "https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/tools/20220105001602.png",\n          cardName: "Element-UI",\n          cardContent:\n            "Element，一套为开发者、设计师和产品经理准备的基于 Vue 的桌面端组件库",\n        },\n        {\n          cardSrc: "https://next.antdv.com/docs/vue/introduce-cn/",\n          cardImgSrc:\n            "https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/tools/20220105223748.svg",\n          cardName: "Ant Design Vue",\n          cardContent: "Vue UI 之 Ant Design Vue，蚂蚁金服的 Vue 框架",\n        },\n        {\n          cardSrc: "https://www.iviewui.com/",\n          cardImgSrc:\n            "https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/tools/20220105001656.png",\n          cardName: "View UI",\n          cardContent: "View UI 是一套基于 Vue.js 的高质量UI 组件库",\n        },\n        {\n          cardSrc: "https://youzan.github.io/vant/#/zh-CN/",\n          cardImgSrc: "https://img01.yzcdn.cn/vant/logo.png",\n          cardName: "Vant",\n          cardContent: "轻量、可靠的移动端 Vue 组件库",\n        },\n      ],\n    };\n  },\n};\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n\n\n如果有多个内容，依次类推。\n\n<ClientOnly> 大部分情况下可加可不加，少部分情况的官方介绍：https://v2.vuepress.vuejs.org/zh/reference/components.html#clientonly。\n\n\n# 属性\n\nVue 组件可以传 4 个属性：\n\ncardData\n\n * 类型：Array\n * 属性：\n   * id：代表当前 cardData 的 id（仅限第一个对象填写）（必填）\n   * title：该 cardData 的标题（仅限第一个对象填写）（可选）\n   * cardSrc：点击卡片跳转的地址\n   * cardImgSrc：卡片的图片\n   * cardName：卡片的名字\n   * cardContent：卡片的内容\n\n卡片的具体数据。\n\ncardListSize\n\n * 类型：number\n * 范围：1 - 4\n * 默认值：3\n\n页面的一行显示多少个卡片。\n\ncarTitlColor\n\n * 类型：string\n * 默认值：#000\n\n卡片的名字颜色。\n\ncarHoverColor\n\n * 类型：string\n * 默认值：#000\n\n卡片的内容鼠标悬停的颜色。\n\n\n# 结束语\n\n如果你还有疑惑，可以去我的 GitHub 仓库或者 Gitee 仓库查看源码。\n\nGitHub：https://github.com/huangguan2001/Kele-Bingtang.github.io\n\nGitee：https://gitee.com/kele-bingtang/Kele-Bingtang\n\n如果你有更好的方式，评论区留言告诉我，或者加入 Vdoing 主题的 QQ 群：694387113。谢谢！',normalizedContent:'笔记\n\n主题自带的卡片列表不适合制作导航卡片，于是我稍微自己实现了它。\n\n2021-01-11 @村长\n\n\n\n * 前言\n * vue组件\n * 组件使用\n * 属性\n * 结束语\n\n\n\n\n# 前言\n\n目前适用版本是 vdoing v1.x。\n\n导航卡片是什么，请先看我的导航站：https://notes.youngkbt.cn/navigation/\n\n因为个人不使用本地主题，所以无法直接获取一个文章的内容来解析，只能一切都在本地代码制作。\n\n\n# vue组件\n\n导航卡片需要一个 vue 组件，在 docs/.vuepress/components 下创建 card.vue 组件，如果没有 components 文件夹，请创建。\n\n组件添加如下内容：\n\n<template>\n  <div>\n    <template v-if="carddata[0].title != undefined">\n        <div style="text-align: center; font-weight: 900">{{ carddata[0].title }}</div>\n    </template>\n    <div class="kbt-row">\n    <div\n      class="card-nav-box"\n      :style="\n        cardlistsize == 4\n          ? \'width: 25%;\'\n          : cardlistsize == 2\n          ? \'width: 50%;\'\n          : \'width: 33.333%;\'\n      "\n      v-for="(item,index) in carddata"\n      :key="index"\n    >\n      <a :href="item.cardsrc" target="_blank">\n        <div class="card-nav-item">\n          <div class="card-nav-title">\n            <img\n              v-if="item.cardimgsrc && item.cardimgsrc != \'\'"\n              :src="item.cardimgsrc"\n              alt="正在加载 ..."\n              class="card-nav-img"\n            />\n            <p class="card-nav-name" :style="\'color:\' + cartitlecolor">\n              {{ item.cardname }}\n            </p>\n          </div>\n          <div :title="item.cardcontent" class="card-nav-content">\n            {{ item.cardcontent }}\n          </div>\n        </div>\n      </a>\n    </div>\n  </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    carddata: {\n      type: array,\n      default: [],\n    },\n    cardlistsize: {\n      type: number,\n      default: 3,\n    },\n    cartitlecolor: {\n      type: string,\n      default: "#000",\n    },\n    carhovercolor: {\n      type: string,\n      default: "#000",\n    },\n  },\n  mounted() {\n    this.cardhovercolor();\n  },\n  methods: {\n    cardhovercolor() {\n      if(!document.queryselector(".card")){\n        const carhovercolor = this.carhovercolor;\n        let style = document.createelement("style");\n        style.classname = \'card\';\n        style.innerhtml = `.card-nav-content:hover{color: ${carhovercolor}}`;\n        document.head.appendchild(style);\n      }\n    },\n  },\n};\n<\/script>\n\n<style scoped>\n.kbt-row {\n  margin: 0.7rem 0;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n}\n.card-nav-box {\n  padding: 0 10px 0 10px;\n  box-sizing: border-box;\n}\n.card-nav-box a:hover {\n  text-decoration: none !important;\n}\n.card-nav-item {\n  min-height: 76px;\n  margin-top: 10px;\n  margin-bottom: 10px;\n  padding: 10px;\n  background-color: #fff;\n  border-radius: 4px;\n  box-shadow: 0 2px 10px 0 rgb(0 0 0 / 10%);\n  transition: all 0.4s;\n}\n.card-nav-item:hover {\n  box-shadow: 0 10px 20px -10px rgba(0, 0, 0, 0.7);\n  transform: translatey(-3px) scale(1.01, 1.01);\n}\n.card-nav-title {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-size: 15px;\n  margin: 5px 0;\n  height: 40px;\n  line-height: 40px;\n  white-space: nowrap;\n}\n.card-nav-img {\n  height: 38px;\n}\n.card-nav-name {\n  height: 40px;\n  float: right;\n  font-size: 15px;\n  margin: 0 0;\n  line-height: 40px;\n  white-space: nowrap;\n}\n.card-nav-content {\n  margin-top: 10px;\n  font-size: 13px;\n  color: #999;\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  height: 37px;\n  margin-bottom: 5px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n\n\n\n# 组件使用\n\ndocs 下的任意目录建立一个 md 文档，我在 docs 根目录下建立了 01.导航站.md 文档。\n\n然后在文档里添加一些内容（开头的 frontmatter 需要配置你自己的）：\n\n---\ntitle: 本站 - 导航站模块     # 你自己的标题\ndate: 2022-01-11 14:03:46   # 你自己的时间\npermalink: /about/website/tools/  # 你自己的链接\ncategories:\n  - \ntags: \n  - \n---\n\n## 搜索引擎\n\n<clientonly>\n  <card :carddata="carddata0" :cardlistsize=3 cartitlcolor="#000" carhovercolor="#000" />\n</clientonly>\n\n## 前端开发\n\n<clientonly>\n  <card :carddata="carddata1" :cardlistsize=3 cartitlcolor="#000" carhovercolor="#000" />\n</clientonly>\n\n<script>\nexport default {\n  data() {\n    return {\n      carddata0: [\n        {\n          id: "0",\n          cardsrc: "http://www.baidu.com/",\n          cardimgsrc:\n            "https://cdn.jsdelivr.net/gh/kele-bingtang/static/img/tools/20220104224044.png",\n          cardname: "百度",\n          cardcontent:\n            "百度——全球最大的中文搜索引擎及最大的中文网站，全球领先的人工智能公司",\n        },\n        {\n          cardsrc: "http://www.google.com/",\n          cardimgsrc:\n            "https://cdn.jsdelivr.net/gh/kele-bingtang/static/img/tools/20220104225539.png",\n          cardname: "google",\n          cardcontent: "全球最大的搜索引擎公司",\n        },\n        {\n          cardsrc: "https://www.bing.com/",\n          cardimgsrc:\n            "https://cdn.jsdelivr.net/gh/kele-bingtang/static/img/tools/20220104224430.png",\n          cardname: "bing",\n          cardcontent: "微软公司推出的用以取代live search的搜索引擎",\n        },\n      ],\n      carddata1: [\n        {\n          id: "1",\n          title: "vue & ui",\n          cardsrc: "https://cn.vuejs.org/",\n          cardimgsrc:\n            "https://cdn.jsdelivr.net/gh/kele-bingtang/static/img/tools/20220105001047.png",\n          cardname: "vue",\n          cardcontent: "渐进式 javascript 框架",\n        },\n        {\n          cardsrc: "https://element.eleme.cn/#/zh-cn/",\n          cardimgsrc:\n            "https://cdn.jsdelivr.net/gh/kele-bingtang/static/img/tools/20220105001602.png",\n          cardname: "element-ui",\n          cardcontent:\n            "element，一套为开发者、设计师和产品经理准备的基于 vue 的桌面端组件库",\n        },\n        {\n          cardsrc: "https://next.antdv.com/docs/vue/introduce-cn/",\n          cardimgsrc:\n            "https://cdn.jsdelivr.net/gh/kele-bingtang/static/img/tools/20220105223748.svg",\n          cardname: "ant design vue",\n          cardcontent: "vue ui 之 ant design vue，蚂蚁金服的 vue 框架",\n        },\n        {\n          cardsrc: "https://www.iviewui.com/",\n          cardimgsrc:\n            "https://cdn.jsdelivr.net/gh/kele-bingtang/static/img/tools/20220105001656.png",\n          cardname: "view ui",\n          cardcontent: "view ui 是一套基于 vue.js 的高质量ui 组件库",\n        },\n        {\n          cardsrc: "https://youzan.github.io/vant/#/zh-cn/",\n          cardimgsrc: "https://img01.yzcdn.cn/vant/logo.png",\n          cardname: "vant",\n          cardcontent: "轻量、可靠的移动端 vue 组件库",\n        },\n      ],\n    };\n  },\n};\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n\n\n如果有多个内容，依次类推。\n\n<clientonly> 大部分情况下可加可不加，少部分情况的官方介绍：https://v2.vuepress.vuejs.org/zh/reference/components.html#clientonly。\n\n\n# 属性\n\nvue 组件可以传 4 个属性：\n\ncarddata\n\n * 类型：array\n * 属性：\n   * id：代表当前 carddata 的 id（仅限第一个对象填写）（必填）\n   * title：该 carddata 的标题（仅限第一个对象填写）（可选）\n   * cardsrc：点击卡片跳转的地址\n   * cardimgsrc：卡片的图片\n   * cardname：卡片的名字\n   * cardcontent：卡片的内容\n\n卡片的具体数据。\n\ncardlistsize\n\n * 类型：number\n * 范围：1 - 4\n * 默认值：3\n\n页面的一行显示多少个卡片。\n\ncartitlcolor\n\n * 类型：string\n * 默认值：#000\n\n卡片的名字颜色。\n\ncarhovercolor\n\n * 类型：string\n * 默认值：#000\n\n卡片的内容鼠标悬停的颜色。\n\n\n# 结束语\n\n如果你还有疑惑，可以去我的 github 仓库或者 gitee 仓库查看源码。\n\ngithub：https://github.com/huangguan2001/kele-bingtang.github.io\n\ngitee：https://gitee.com/kele-bingtang/kele-bingtang\n\n如果你有更好的方式，评论区留言告诉我，或者加入 vdoing 主题的 qq 群：694387113。谢谢！',charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"本站 - 首页大图模块",frontmatter:{title:"本站 - 首页大图模块",date:"2022-01-12T23:35:41.000Z",permalink:"/about/website/index-big-img/",titleTag:"原创",categories:["关于 - 本站"],tags:["本站"],readingShow:"top"},regularPath:"/80.%E5%85%B3%E4%BA%8E/06.%E5%85%B3%E4%BA%8E%20-%20%E6%9C%AC%E7%AB%99/26.%E6%9C%AC%E7%AB%99%20-%20%E9%A6%96%E9%A1%B5%E5%A4%A7%E5%9B%BE%E6%A8%A1%E5%9D%97.html",relativePath:"80.关于/06.关于 - 本站/26.本站 - 首页大图模块.md",key:"v-4e3afc59",path:"/about/website/index-big-img/",headers:[{level:2,title:"前言",slug:"前言",normalizedTitle:"前言",charIndex:77},{level:2,title:"组件添加",slug:"组件添加",normalizedTitle:"组件添加",charIndex:83},{level:2,title:"组件注册",slug:"组件注册",normalizedTitle:"组件注册",charIndex:91},{level:3,title:"图片添加",slug:"图片添加",normalizedTitle:"图片添加",charIndex:101},{level:3,title:"组件添加",slug:"组件添加-2",normalizedTitle:"组件添加",charIndex:83},{level:2,title:"属性说明",slug:"属性说明",normalizedTitle:"属性说明",charIndex:119},{level:3,title:"导航栏配置",slug:"导航栏配置",normalizedTitle:"导航栏配置",charIndex:129},{level:3,title:"背景图配置",slug:"背景图配置",normalizedTitle:"背景图配置",charIndex:140},{level:3,title:"desc淡入淡出配置",slug:"desc淡入淡出配置",normalizedTitle:"desc淡入淡出配置",charIndex:151},{level:3,title:"气泡配置",slug:"气泡配置",normalizedTitle:"气泡配置",charIndex:167},{level:2,title:"首页额外动态图",slug:"首页额外动态图",normalizedTitle:"首页额外动态图",charIndex:175},{level:3,title:"静态资源获取",slug:"静态资源获取",normalizedTitle:"静态资源获取",charIndex:188},{level:3,title:"组件配置",slug:"组件配置",normalizedTitle:"组件配置",charIndex:200},{level:3,title:"引入配置",slug:"引入配置",normalizedTitle:"引入配置",charIndex:210},{level:2,title:"结束语",slug:"结束语",normalizedTitle:"结束语",charIndex:218}],headersStr:"前言 组件添加 组件注册 图片添加 组件添加 属性说明 导航栏配置 背景图配置 desc淡入淡出配置 气泡配置 首页额外动态图 静态资源获取 组件配置 引入配置 结束语",content:'笔记\n\n你是否曾进入他人的博客后，占据浏览器大屏的图片映入眼帘，如果你也喜欢这种样式，本内容将介绍如何实现。\n\n2021-01-11 @村长\n\n\n\n * 前言\n * 组件添加\n * 组件注册\n   * 图片添加\n   * 组件添加\n * 属性说明\n   * 导航栏配置\n   * 背景图配置\n   * desc淡入淡出配置\n   * 气泡配置\n * 首页额外动态图\n   * 静态资源获取\n   * 组件配置\n   * 引入配置\n * 结束语\n\n\n\n\n# 前言\n\n目前适用版本是 Vdoing v1.x。\n\n如果你没有了解什么是首页大图模块，可以浏览一番本内容介绍的大图模块，点击跳转 我的首页。(PS：如果不想跳转，也可以参考下方的图片)\n\n\n\n本内容实现了如下功能:\n\n * 客户端的大图片效果\n * 导航栏的颜色效果（可配置选择）\n * 滑出大图片的位置后，切换导航栏颜色效果（可配置选择）\n * 大图片的背景色随一天的不同时间而变化（可配置选择）\n * 首页时间提示效果（可配置选择）\n * 个人描述淡入淡出（打印机）效果（可配置选择）\n * 大图片的气泡效果（可配置选择）\n * 大图片气泡效果的位置选择（可配置选择）\n\n......\n\n本内容分为三步，无脑 Copy 即可：\n\n * 在 docs/.vuepress/components 目录中创建 IndexBigImg.vue 组件\n * 在 docs/index.md 添加 IndexBigImg.vue 组件\n * 在 docs/.vuepress/config.js（新版 config.ts）的 themeConfig 中配置\n\n\n# 组件添加\n\n在 docs/.vuepress/components 目录中创建 IndexBigImg.vue 组件，如果没有 components 文件夹，则请创建。\n\n在组件添加如下内容：\n\n<template>\n  <div class="index-bigimg" style="display: none"></div>\n</template>\n<script>\n// 两个变量分别是背景元素的 class、生成的箭头 class\nconst banner = "banner";\nconst banner_arrow = "banner-arrow";\nexport default {\n  mounted() {\n    const arrow = document.getElementById(banner_arrow);\n    arrow && arrow.parentNode.removeChild(arrow);\n    let a = document.createElement("a");\n    a.id = banner_arrow;\n    a.className = banner_arrow;\n    document.getElementsByClassName(banner)[0].append(a);\n    let targetA = document.getElementById(banner_arrow);\n    targetA.addEventListener("click", (e) => {\n      // 添加点击事件\n      this.scrollFn();\n    });\n    // 这里是这几个属性的默认值，建议在 themeConfig 进行配置，它们将覆盖这几个属性值\n    let navColor = 1;\n    let switchNavColor = false;\n    let bgTimeColor = false;\n    let bgTimeColorArray = [\n      "transparent",\n      "rgba(255, 148, 48, .2",\n      "rgba(0, 0, 0, .3)",\n      "rgba(0, 0, 0, .5)",\n    ];\n    let descFade = false;\n    let desc = [];\n    let descFadeInTime = 200;\n    let descFadeOutTime = 100;\n    let descNextTime = 800;\n    let descFontSize = "1.4rem";\n    let bubble = false;\n    let bubblePosition = 0;\n    let bubbleNum = 200;\n    if (\n      this.$themeConfig.indexImg &&\n      Object.keys(this.$themeConfig.indexImg).length > 0\n    ) {\n      navColor =\n        this.$themeConfig.indexImg.navColor == undefined\n          ? navColor\n          : this.$themeConfig.indexImg.navColor;\n      switchNavColor =\n        this.$themeConfig.indexImg.switchNavColor == undefined\n          ? switchNavColor\n          : this.$themeConfig.indexImg.switchNavColor;\n      bgTimeColor =\n        this.$themeConfig.indexImg.bgTimeColor == undefined\n          ? bgTimeColor\n          : this.$themeConfig.indexImg.bgTimeColor;\n      bgTimeColorArray =\n        this.$themeConfig.indexImg.bgTimeColorArray == undefined\n          ? bgTimeColorArray\n          : this.$themeConfig.indexImg.bgTimeColorArray;\n          descFade =\n        this.$themeConfig.indexImg.descFade == undefined\n          ? descFade\n          : this.$themeConfig.indexImg.descFade;\n      desc =\n        this.$themeConfig.indexImg.desc == undefined\n          ? desc\n          : this.$themeConfig.indexImg.desc;\n      descFontSize =\n        this.$themeConfig.indexImg.descFontSize == undefined\n          ? descFontSize\n          : this.$themeConfig.indexImg.descFontSize;\n      descFadeInTime =\n        this.$themeConfig.indexImg.descFadeInTime == undefined\n          ? descFadeInTime\n          : this.$themeConfig.indexImg.descFadeInTime;\n      descNextTime =\n        this.$themeConfig.indexImg.descNextTime == undefined\n          ? descNextTime\n          : this.$themeConfig.indexImg.descNextTime;\n      bubble =\n        this.$themeConfig.indexImg.bubble == undefined\n          ? bubble\n          : this.$themeConfig.indexImg.bubble;\n      bubblePosition =\n        this.$themeConfig.indexImg.bubblePosition == undefined\n          ? bubblePosition\n          : this.$themeConfig.indexImg.bubblePosition;\n      bubbleNum =\n        this.$themeConfig.indexImg.bubbleNum == undefined\n          ? bubbleNum\n          : this.$themeConfig.indexImg.bubbleNum;\n    }\n    // 初始化\n    if (bgTimeColor) {\n      this.bgTimeColor(bgTimeColorArray);\n    }\n    setTimeout(() => {\n      this.noBgBlur();\n    }, 100);\n    this.blurText(navColor);\n    this.watchScroll(navColor, switchNavColor);\n\n    if (descFade) {\n      this.textFadeInAndOut(\n        desc,\n        descFontSize,\n        descFadeInTime,\n        descFadeOutTime,\n        descNextTime\n      );\n    }\n    if (bubble) {\n      let canvas = document.createElement("canvas");\n      canvas.id = "canvas";\n      canvas.style.top = bubblePosition + "%";\n      document.getElementsByClassName(banner)[0].append(canvas);\n      this.canvasBubble(bubbleNum);\n    }\n  },\n  watch: {\n    $route(to, from) {\n      if (to.path == "/" && Object.keys(this.$route.query).length > 0) {\n        setTimeout(() => {\n          this.clickArrow();\n        }, 200);\n      }\n    },\n  },\n  methods: {\n    scrollFn() {\n      const windowH = document.getElementsByClassName(banner)[0].clientHeight; // 获取窗口高度\n      window.scrollTo({\n        top: windowH,\n        behavior: "smooth", // 平滑滚动\n      });\n    },\n    // 触发下拉按钮\n    clickArrow() {\n      const arrow = document.getElementById("banner-arrow");\n      arrow.click();\n    },\n    // 监听页面滚动的回调\n    watchScroll(navColor, switchNavColor) {\n      const windowH = document.getElementsByClassName(banner)[0].clientHeight; // 获取窗口高度\n      window.onscroll = () => {\n        if (document.documentElement.scrollTop < windowH) {\n          this.blurText(navColor);\n          this.noBgBlur();\n        } else {\n          if (switchNavColor && navColor == 1) {\n            this.blurText(2);\n          } else if (switchNavColor && navColor == 2) {\n            this.blurText(1);\n          }\n          this.bgBlur();\n        }\n      };\n    },\n    // 导航栏恢复原主题样式\n    bgBlur() {\n      let navbar = document.getElementsByClassName("navbar")[0];\n      navbar.className = "navbar blur";\n    },\n    // 导航栏透明\n    noBgBlur() {\n      let navbar = document.getElementsByClassName("navbar")[0];\n      navbar.className = "navbar navbar1 blur";\n    },\n    // 导航栏的字体颜色\n    blurText(navColor) {\n      let title = document.getElementsByClassName("site-name")[0];\n      let search = document.getElementsByClassName("search-box")[0];\n      let nav = document.getElementsByClassName("nav-links")[0];\n      if (navColor == 1) {\n        title.className = "site-name can-hide";\n        nav.className = "nav-links can-hide";\n        search.className = "search-box";\n      } else if (navColor == 2) {\n        title.className = "site-name site-name1 can-hide";\n        nav.className = "nav-links nav-links1 can-hide";\n        search.className = "search-box search-box1";\n      }\n    },\n    // 背景色随时间变化\n    bgTimeColor(bgTimeColorArray) {\n      var hours = new Date().getHours();\n      var minutes = new Date().getMinutes();\n      var seconds = new Date().getSeconds();\n      hours = hours < 10 ? "0" + hours : hours;\n      minutes = minutes < 10 ? "0" + minutes : minutes;\n      seconds = seconds < 10 ? "0" + seconds : seconds;\n      let div = document.createElement("div");\n      div.className = "banner-color";\n      if (hours >= 6 && hours < 11) {\n        div.style.backgroundColor = bgTimeColorArray[0];\n        addTip(\n          `早上好呀~~，现在是 ${hours}:${minutes}:${seconds}，吃早餐了吗？😊🤭`,\n          "info",\n          50,\n          4000\n        );\n      } else if (hours >= 12 && hours <= 16) {\n        div.style.backgroundColor = bgTimeColorArray[0];\n        addTip(\n          `下午好呀~~，现在是 ${hours}:${minutes}:${seconds}，繁忙的下午也要适当休息哦🥤🏀~~`,\n          "info",\n          50,\n          4000\n        );\n      } else if (hours >= 16 && hours <= 19) {\n        div.style.backgroundColor = bgTimeColorArray[1];\n        addTip(\n          `到黄昏了~~，现在是 ${hours}:${minutes}:${seconds}，该准备吃饭啦🥗🍖~~`,\n          "info",\n          50,\n          4000\n        );\n      } else if (hours >= 19 && hours < 24) {\n        div.style.backgroundColor = bgTimeColorArray[2];\n        addTip(\n          `晚上好呀~~，现在是 ${hours}:${minutes}:${seconds}，该准备洗漱睡觉啦🥱😪~~`,\n          "info",\n          50,\n          4000\n        );\n      } else if (hours >= 0 && hours < 6) {\n        div.style.backgroundColor = bgTimeColorArray[3];\n        addTip(\n          `别再熬夜了~~，现在是 ${hours}:${minutes}:${seconds}，早点睡吧，让我们一起欣赏早上的太阳~~😇🛏`,\n          "info",\n          50,\n          4000\n        );\n      }\n      document.getElementsByClassName(banner)[0].parentNode.append(div);\n    },\n    // 字体淡入淡出\n    textFadeInAndOut(\n      desc,\n      descFontSize,\n      descFadeInTime,\n      descFadeOutTime,\n      descNextTime\n    ) {\n      let descElement = document.getElementsByClassName("description")[0];\n      descElement.style.fontSize = descFontSize;\n      if (descElement) {\n        // 非首页不触发\n        var span = document.createElement("span"); // 创建 | 的元素\n        span.className = "typed";\n        span.innerHTML = "|";\n        var index = 0; // 为 desc 的长度服务\n        var length = 0; // 为数组服务\n        var description = descElement.innerText; // 先取默认值\n        descElement.innerText = ""; // 清空 desc\n        descElement.appendChild(document.createElement("span")); // 创建 desc 所在的新元素\n        descElement.appendChild(span); // 添加 | 的元素\n        // 初始化迭代\n        var interval1 = setInterval(fadeIn, descFadeInTime);\n        var interval2;\n      }\n      // 淡入回调\n      function fadeIn() {\n        if (descElement) {\n          span.style.animation = "none"; // 淡入时，| 光标不允许闪烁\n          if (desc instanceof Array && desc.length > 0) {\n            // 如果是 themeConfig 传来的数组\n            description = desc[length];\n          }\n          descElement.firstChild.innerText = description.substring(0, index++);\n          if (index > description.length) {\n            clearInterval(interval1);\n            span.style.animation = "typedBlink 1s infinite"; // 淡入结束，| 光标允许闪烁\n            setTimeout(() => {\n              interval2 = setInterval(fadeOut, descFadeOutTime);\n            }, descNextTime);\n          }\n        }\n      }\n      // 淡出回调\n      function fadeOut() {\n        if (index >= 0) {\n          span.style.animation = "none"; // 淡出时，| 光标不允许闪烁\n          descElement.firstChild.innerText = description.substring(0, index--);\n        } else {\n          clearInterval(interval2);\n          span.style.animation = "typedBlink 1s infinite"; // 淡出结束，| 光标允许闪烁\n          setTimeout(() => {\n            length++;\n            if (length >= desc.length) {\n              length = 0; // desc 展示完，重新开始计数\n            }\n            interval1 = setInterval(fadeIn, descFadeInTime);\n          }, descNextTime);\n        }\n      }\n    },\n    // 气泡效果\n    canvasBubble(bubbleNum) {\n      var canvas = document.getElementById("canvas");\n      var cxt = canvas.getContext("2d");\n      function Dot() {\n        this.alive = true;\n        this.x = Math.round(Math.random() * canvas.width);\n        this.y = Math.round(Math.random() * canvas.height);\n        this.diameter = Math.random() * 10.8;\n        this.ColorData = {\n          Red: Math.round(Math.random() * 255),\n          Green: Math.round(Math.random() * 255),\n          Blue: Math.round(Math.random() * 255),\n        };\n        this.alpha = 0.5;\n        this.color =\n          "rgba(" +\n          this.ColorData.Red +\n          ", " +\n          this.ColorData.Green +\n          "," +\n          this.ColorData.Blue +\n          "," +\n          this.alpha +\n          ")";\n        this.velocity = {\n          x: Math.round(Math.random() < 0.5 ? -1 : 1) * Math.random() * 0.7,\n          y: Math.round(Math.random() < 0.5 ? -1 : 1) * Math.random() * 0.7,\n        };\n      }\n      Dot.prototype = {\n        Draw: function () {\n          cxt.fillStyle = this.color;\n          cxt.beginPath();\n          cxt.arc(this.x, this.y, this.diameter, 0, Math.PI * 2, false);\n          cxt.fill();\n        },\n        Update: function () {\n          if (this.alpha < 0.8) {\n            this.alpha += 0.01;\n            this.color =\n              "rgba(" +\n              this.ColorData.Red +\n              ", " +\n              this.ColorData.Green +\n              "," +\n              this.ColorData.Blue +\n              "," +\n              this.alpha +\n              ")";\n          }\n          this.x += this.velocity.x;\n          this.y += this.velocity.y;\n          if (\n            this.x > canvas.width + 5 ||\n            this.x < 0 - 5 ||\n            this.y > canvas.height + 5 ||\n            this.y < 0 - 5\n          ) {\n            this.alive = false;\n          }\n        },\n      };\n      var Event = {\n        rArray: [],\n        Init: function () {\n          canvas.width = window.innerWidth;\n          canvas.height = window.innerHeight;\n          for (var x = 0; x < bubbleNum; x++) {\n            this.rArray.push(new Dot());\n          }\n          this.Update();\n        },\n        Draw: function () {\n          cxt.clearRect(0, 0, canvas.width, canvas.height);\n          this.rArray.forEach(function (dot) {\n            dot.Draw();\n          });\n        },\n        Update: function () {\n          if (Event.rArray.length < bubbleNum) {\n            for (var x = Event.rArray.length; x < bubbleNum; x++) {\n              Event.rArray.push(new Dot());\n            }\n          }\n          Event.rArray.forEach(function (dot) {\n            dot.Update();\n          });\n          Event.rArray = Event.rArray.filter(function (dot) {\n            return dot.alive;\n          });\n          Event.Draw();\n          requestAnimationFrame(Event.Update);\n        },\n      };\n      window.onresize = function () {\n        Event.rArray = [];\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n      };\n      Event.Init();\n    },\n  },\n};\n/**\n * 添加消息提示\n * content：内容\n * type：弹窗类型（tip、success、warning、danger）\n * startHeight：第一个弹窗的高度，默认 50\n * dieTime：弹窗消失时间（毫秒），默认 3000 毫秒\n */\nfunction addTip(content, type, startHeight = 50, dieTime = 3000) {\n  var tip = document.querySelectorAll(".index-tip");\n  var time = new Date().getTime();\n  // 获取最后消息提示元素的高度\n  var top = tip.length == 0 ? 0 : tip[tip.length - 1].getAttribute("data-top");\n  // 如果产生两个以上的消息提示，则出现在上一个提示的下面，即高度添加，否则默认 50\n  var lastTop =\n    parseInt(top) +\n    (tip.length != 0 ? tip[tip.length - 1].offsetHeight + 17 : startHeight);\n\n  let div = document.createElement("div");\n  div.className = `index-tip tip-${type} ${time}`;\n  div.style.top = parseInt(top) + "px";\n  div.setAttribute("data-top", lastTop);\n  if (type == "info" || type == 1) {\n    div.innerHTML = `<i class="iconfont icon-info icon"></i><p class="tip-info-content">${content}</p>`;\n  } else if (type == "success" || type == 2) {\n    div.innerHTML = `<i class="iconfont icon-dagouyouquan icon"></i><p class="tip-success-content">${content}</p>`;\n  } else if (type == "danger" || type == 3) {\n    div.innerHTML = `<i class="iconfont icon-cuowu icon"></i><p class="tip-danger-content">${content}</p>`;\n  } else if (type == "warning" || type == 4) {\n    div.innerHTML = `<i class="iconfont icon-gantanhao icon"></i><p class="tip-warning-content">${content}</p>`;\n  }\n  document.body.appendChild(div);\n\n  let timeTip = document.getElementsByClassName(time)[0];\n  setTimeout(() => {\n    timeTip.style.top = parseInt(lastTop) + "px";\n    timeTip.style.opacity = "1";\n  }, 10);\n\n  // 消息提示 dieTime 秒后隐藏并被删除\n  setTimeout(() => {\n    timeTip.style.top = "0px";\n    timeTip.style.opacity = "0";\n\n    // 下面的所有元素回到各自曾经的出发点\n    var allTipElement = nextAllTipElement(timeTip);\n    for (let i = 0; i < allTipElement.length; i++) {\n      var next = allTipElement[i];\n      var top =\n        parseInt(next.getAttribute("data-top")) - next.offsetHeight - 17;\n      next.setAttribute("data-top", top);\n      next.style.top = top + "px";\n    }\n    setTimeout(() => {\n      timeTip.remove();\n    }, 500);\n  }, dieTime);\n}\n/**\n * 获取后面的兄弟元素\n */\nfunction nextAllTipElement(elem) {\n  var r = [];\n  var n = elem;\n  for (; n; n = n.nextSibling) {\n    if (n.nodeType === 1 && n !== elem) {\n      r.push(n);\n    }\n  }\n  return r;\n}\n<\/script>\n\n<style>\n/* 图片大小 */\n.vdoing-index-class .home-wrapper .banner {\n  margin-top: 0 !important;\n  height: 100vh;\n  background-attachment: fixed !important;\n}\n/* 图片中间的签名和标题位置 */\n.banner-conent {\n  margin-top: 23vh !important;\n}\n/* 下面是配合 js 用的 class 样式 */\n.vdoing-index-class .navbar1 {\n  background-color: transparent;\n  box-shadow: none;\n  backdrop-filter: none;\n}\n.vdoing-index-class .nav-links1 > .nav-item > a,  /* 没有二级导航的一级导航 */\n  .vdoing-index-class .nav-links1 > a,   /* GitHub */\n  .vdoing-index-class .nav-links1 .dropdown-title a:hover,   /* 鼠标悬停 */\n  .vdoing-index-class .nav-links1 .title,     /* 不能跳转的一级导航 */\n  .vdoing-index-class .nav-links1 .dropdown-title > .link-title,  /* 能跳转的一级导航 */\n  .vdoing-index-class .site-name1  /* 左侧的名字 */ {\n  color: #fff !important;\n}\n/* 页脚的颜色 */\n.vdoing-index-class .footer {\n  color: #fff;\n}\n.vdoing-index-class .search-box1 input {\n  border-color: #fff;\n  color: #fff;\n}\n/* 下面是箭头相关的样式 */\n.banner-arrow {\n  display: block;\n  margin: 12rem auto 0;\n  bottom: 45px;\n  width: 20px;\n  height: 20px;\n  font-size: 34px;\n  text-align: center;\n  animation: bounce-in 5s 3s infinite;\n  position: absolute;\n  left: 50%;\n  bottom: 15%;\n  margin-left: -10px;\n  cursor: pointer;\n  z-index: 999;\n}\n@-webkit-keyframes bounce-in {\n  0% {\n    transform: translateY(0);\n  }\n  20% {\n    transform: translateY(0);\n  }\n  50% {\n    transform: translateY(-20px);\n  }\n  80% {\n    transform: translateY(0);\n  }\n  to {\n    transform: translateY(0);\n  }\n}\n.banner-arrow::before {\n  content: "";\n  width: 20px;\n  height: 20px;\n  display: block;\n  border-right: 3px solid #fff;\n  border-top: 3px solid #fff;\n  transform: rotate(135deg);\n  position: absolute;\n  bottom: 10px;\n}\n.banner-arrow::after {\n  content: "";\n  width: 20px;\n  height: 20px;\n  display: block;\n  border-right: 3px solid #fff;\n  border-top: 3px solid #fff;\n  transform: rotate(135deg);\n}\n/* 描述淡入淡出元素 */\n.description {\n  display: inline-block;\n}\n.typed {\n  opacity: 1;\n}\n/* 随时间变化的背景色元素 */\n.vdoing-index-class .banner-color {\n  width: 100%;\n  min-height: 450px;\n  overflow: hidden;\n  margin-top: 0;\n  height: 100vh;\n  position: absolute;\n  top: 0;\n}\n/* 气泡效果的画布元素 */\n#canvas {\n  position: absolute;\n  top: 0;\n}\n/* 切换第二页，继续打开 banner */\n.hide-banner {\n  display: block !important;\n}\n/* 提示框元素 */\n.index-tip {\n  position: fixed;\n  display: flex;\n  top: -10px;\n  left: 50%;\n  opacity: 0;\n  min-width: 320px;\n  transform: translateX(-50%);\n  transition: opacity 0.3s linear, top 0.4s, transform 0.4s;\n  z-index: 99999;\n  padding: 15px 15px 15px 20px;\n  border: 1px solid #ebeef5;\n  border-radius: 4px;\n  grid-row: 1;\n  line-height: 17px;\n}\n\n.index-tip p {\n  line-height: 17px;\n  margin: 0;\n  font-size: 14px;\n}\n\n.icon {\n  margin-right: 10px;\n  line-height: 17px;\n}\n\n.tip-success {\n  color: #67c23a;\n  background-color: #f0f9eb;\n  border-color: #e1f3d8;\n}\n\n.tip-success .tip-success-content {\n  color: #67c23a;\n}\n\n.tip-danger {\n  color: #f56c6c;\n  background-color: #fef0f0;\n  border-color: #fde2e2;\n}\n\n.tip-danger .tip-danger-content {\n  color: #f56c6c;\n}\n\n.tip-info {\n  background-color: #edf2fc;\n  border-color: #ebeef5;\n}\n\n.tip-info .tip-info-content {\n  color: #909399;\n}\n\n.tip-warning {\n  color: #e6a23c;\n  background-color: #fdf6ec;\n  border-color: #faecd8;\n}\n\n.tip-warning .tip-warning-content {\n  margin: 0;\n  color: #e6a23c;\n  line-height: 21px;\n  font-size: 14px;\n}\n@keyframes typedBlink {\n  0% {\n    opacity: 1;\n  }\n  100% {\n    opacity: 0;\n  }\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n\n\n注释已经有说明，但是有几个配置建议在 themeConfig 中配置（往下看），其他随意。\n\n\n# 组件注册\n\n\n# 图片添加\n\n图片的添加有两种（可二选一，可都选：效果叠加）：\n\n * banner 图片，即仅仅开启首页的大图效果，离开大图后的背景是其他颜色（主题默认灰白色）\n   \n   打开 docs/index.md 文档，首先在 frontmatter 添加一个自定义类和自己的图片路径：\n   \n   ---\n   pageClass: vdoing-index-class\n   bannerBg: /img/index/bg.jpg  # 你的图片路径(必须位于 public 下)，可以是 URL\n   ---\n   \n   \n   1\n   2\n   3\n   4\n   \n\n * 全背景图，即 首页大图 + 全背景图（我的博客使用这种方式）\n   \n   首先在 docs/index.md 中注释掉上方的 bannerBg，但是 pageClass 要保留（这是识别首页的 class），打开 docs/.vuepress/config.js（新版是 config.ts）文件，在 themeConfig 中添加如下代码：\n   \n   bodyBgImg: /img/index/bg.jpg,  // 你的图片路径(必须位于 public 下)，可以是 URL\n   bodyBgImgOpacity: 1, // body 背景图透明度，选值 0 ~ 1.0, 默认0.5\n   \n   \n   1\n   2\n   \n   \n   如果 bodyBgImg 是数组，则每隔 15 秒切换一次图片，具体介绍请看官网，点击直达。\n\n\n# 组件添加\n\n回到 docs/index.md 文档，滑到文档的最下方，添加组件：\n\n<ClientOnly>\n  <IndexBigImg />\n</ClientOnly>\n\n\n1\n2\n3\n\n\n<ClientOnly> 大部分情况下可加可不加，少部分情况的官方介绍：https://v2.vuepress.vuejs.org/zh/reference/components.html#clientonly。\n\n> 确保 pageClass: vdoing-index-class 被添加到 docs/index.md 的 frontmatter 中。\n\n打开 docs/.vuepress/config.js（新版 config.ts）文件，在 themeConfig 模块里添加如下代码（这是我的配置）：\n\nindexImg: {\n  navColor: 2,    // 导航栏左侧名字、中间搜索框、右侧字体的颜色，1 是黑色，2 是白色。默认是 1\n  switchNavColor: true,    // 页面移出大图片的位置后，navColor 是否变换，如由白色变黑色，黑色变白色。默认是 false\n  // 因为本主题的默认背景色偏向白色，如果 navColor 是 2，建议需要开启(true)，否则白背景 + 白字体 = 看不见\n  bgTimeColor: true,     // 是否开启图片的背景色随一天的不同时间而变化，并且开启时间窗口提示，默认是 false。时间分为四种：白天（原图）、黄昏（偏黄）、晚上（偏黑）、深夜（偏深黑）\n  bgTimeColorArray: [\'transparent\', \'rgba(255, 148, 48, .2)\', \'rgba(0, 0, 0, .3)\', \'rgba(0, 0, 0, .5)\'],   // 第一个是白天的颜色（默认原图），第二个是黄昏的颜色，第三个是晚上的颜色，第四个是深夜的颜色。bgTimeColor 为 true 生效。提示：如果不想要这个效果，但是又想要时间窗口提示效果，则改为 [\'transparent\', \'transparent\', \'transparent\', \'transparent\']\n  descFade: true,   // 是否开启图片中间描述的淡入效果，默认为 false\n  desc: [ "你所有的悲伤都是源于技术的不足 —— 来自 村长"],  // 多个描述，如果填写则覆盖 config.js 的 description，不填写默认读取 config.js 的 description，descFadeIn 为 true 生效\n  descFontSize: \'1.4rem\',   // desc 的字体大小，默认 1.4rem。提示：原主题是 1.1rem\n  descFadeInTime: 200,  // 描述的淡入效果持续时间，descFade 为 true 生效，默认 200 毫秒\n  descFadeOutTime: 100,  // 描述的淡出效果持续时间，descFade 为 true 生效，默认 100 毫秒\n  descNextTime: 800,  // 当存在多个 desc 时，一个 desc 展示完后或准备开始时，多少秒后出现下一个 desc，默认 800 毫秒\n  bubble: true,    // 是否开启图片的气泡效果，默认为 false\n  bubblePosition: 0,  // 气泡效果的位置，范围：0-100，不同数值代表不同的起始位置，0是整个图片，50是半张图（一半的下方）。bubble 为 true 生效。默认是 0\n  bubbleNum: 200,   // 气泡的个数，bubble 为 true 生效，默认 200 个\n},\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 属性说明\n\n\n# 导航栏配置\n\nnavColor\n\n * 类型：number\n * 默认值：1\n\n导航栏左侧名字、中间搜索框、右侧字体颜色，1 是黑色，2 是白色，默认是 1。\n\nswitchNavColor\n\n * 类型：boolean\n * 默认值：false\n\n页面移出大图片的位置后，navColor 是否变换，如由白色变黑色，黑色变白色，默认是 false。\n\n提示：因为本主题的默认背景色偏向白色，如果 navColor 是 2，建议需要开启(true)，否则白背景 + 白字体 = 看不见。\n\n\n# 背景图配置\n\nbgTimeColor\n\n * 类型：boolean\n * 默认值：false\n\n是否开启图片的背景色随一天的时间而变化，是否开启图片的背景色随一天的不同时间而变化，并且开启时间窗口提示，默认是 false。时间分为四种：白天（原图）、黄昏（偏黄）、晚上（偏黑）、深夜（偏深黑）。\n\n并且开启首次进入首页后的时间提示。\n\nbgTimeColorArray\n\n * 类型：Array\n * 默认值：[\'transparent\', \'rgba(255, 148, 48, .2)\', \'rgba(0, 0, 0, .3)\', \'rgba(0, 0, 0, .5)\']\n\n数组的第一个是白天的颜色（默认原图），第二个是黄昏的颜色，第三个是晚上的颜色，第四个是深夜的颜色。bgTimeColor 为 true 生效。\n\n提示：如果不想要图片的背景色随一天的时间而变化效果，但是又想要时间窗口提示效果，则改为 [\'transparent\', \'transparent\', \'transparent\', \'transparent\']\n\n\n# desc淡入淡出配置\n\ndescFade\n\n * 类型：boolean\n * 默认值：false\n\n是否开启图片中间描述的淡入效果，默认为 false。\n\ndesc\n\n * 类型：Array\n * 默认值：[]\n\n多条描述，如果填写则覆盖 index.md 的 tagline，不填写则默认读取 index.md 的 tagline，descFadeIn 为 true 生效。\n\ndescFontSize\n\n * 类型：string\n * 默认值：1.4rem\n\ndesc 的字体大小，默认 1.4rem。提示：原主题是 1.1rem。\n\ndescFadeInTime\n\n * 类型：number\n * 默认值：200(ms)\n\n图片中间描述的淡入效果持续时间，descFade 为 true 生效，默认 200 毫秒。\n\ndescFadeOutTime\n\n * 类型：number\n * 默认值：100(ms)\n\n描述的淡出效果持续时间，descFade 为 true 生效，默认 100 毫秒。\n\ndescNextTime\n\n * 类型：number\n * 默认值：800(ms)\n\n当存在多个 desc 时，一个 desc 展示完后或准备开始时，多少时间后出现下一个 desc，默认 800 毫秒。\n\n\n# 气泡配置\n\nbubble\n\n * 类型：boolean\n * 默认值：false\n\n是否开启图片的气泡效果，默认为 false。\n\nbubblePosition\n\n * 类型：number\n\n * 默认值：0\n\n * 范围：0 - 100\n\n气泡效果的位置，范围：0 - 100，不同数值代表不同的起始位置，0 是整个图片，50 是半张图（一半的下方）。bubble 为 true 生效，默认是 0。\n\nbubbleNum\n\n * 类型：number\n * 默认值：200\n\n气泡的个数，默认 200 个。\n\n\n# 首页额外动态图\n\n上面的所有配置是属于 静态大图效果，如果你喜欢我的 动态 首页背景图：全背景、颜色随时间变化、日历显示当天、时间同步当前、播放音乐有音谱 ...（可能时间久远，我也许换背景图了🤣）\n\n目前我仅使用在首页，如果进入文章页，则恢复原来的背景图。为什么不全局使用呢？\n\n我用过，下面也有注释说明如何全局配置，但是夜晚时候的右侧标题字体会被背景色同化（看不见），所以就当首页的背景图使用。文章页背景图利用官方给的属性来配置。\n\n\n# 静态资源获取\n\n首先需要下载一些需要用到的图片，总共 1.47MB。点击前往下载地址，找到 fantasy.war 压缩包并下载。\n\n下载后将其解压到 public 目录下，解压后的文件夹叫 fantasy，不是请改名。如图：\n\n\n\n\n# 组件配置\n\n在 docs/.vuepress/components 目录中创建 Fantasy.vue 组件，如果没有 components 文件夹，则请创建。\n\n> 提示：代码块里的图片路径我已经配置好，获取的是 public 根目录下的 fantasy 文件夹下的图片，如果你更改了路径，则下方代码块也要改路径。\n\n添加如下内容：\n\n<template>\n  <div class="fantasy">\n    <canvas id="cvs" class="hidden" width="1980" height="1080"></canvas>\n    <canvas id="screenImage" class="hidden" width="234" height="357"></canvas>\n    <canvas id="rili" class="hidden" width="600" height="600"></canvas>\n    <canvas id="display"></canvas>\n  </div>\n</template>\n\n<script>\nexport default {\n  mounted() {\n    // 如果使用 IndexBigImg.vue，则去掉该组件提供的时间罩\n    this.clearBannerColor();\n    this.mountedElement();\n    this.init();\n  },\n  methods: {\n    init() {\n      var cvs = document.getElementById("cvs");\n      if (!cvs) {\n        return;\n      }\n      var ctx = cvs.getContext("2d");\n\n      var display = document.getElementById("display");\n      var displayCtx = display.getContext("2d");\n\n      var screenImage = document.getElementById("screenImage");\n      var screenImageCtx = screenImage.getContext("2d");\n\n      var rili = document.getElementById("rili");\n      var riliCtx = rili.getContext("2d");\n\n      var songInfo = {};\n      var AllTimeBak = 0;\n      var NowBak = 0;\n      var DrawWarning = false;\n      var EnMonth = false;\n\n      // 出处：https://blog.csdn.net/u012601195/article/details/47860617\n      function drawRili() {\n        riliCtx.clearRect(0, 0, 600, 600);\n        var date = new Date();\n        var year = date.getYear();\n        var mouth = date.getMonth();\n        var today = date.getDate();\n        var week = date.getDay();\n\n        var cardSize = 40;\n\n        var array_three = [4, 6, 9, 11];\n        var array_threeone = [1, 3, 5, 7, 8, 10, 12];\n        var array_week = ["SUN", "MON", "TUES", "WED", "THUR", "FRI", "SAT"];\n\n        var firstDraw; //1号绘制位置\n        var wIdx = (today - 1) % 7;\n\n        if (week >= wIdx) {\n          firstDraw = week - wIdx;\n        } else {\n          firstDraw = week - wIdx + 7;\n        }\n\n        var dayIndex = 1;\n        var countDay = 30;\n\n        if (array_three.indexOf(mouth + 1) > -1) {\n          countDay = 30;\n        } else if (array_threeone.indexOf(mouth + 1) > -1) {\n          countDay = 31;\n        } else {\n          if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0)\n            countDay = 29;\n          else countDay = 28;\n        }\n\n        var row = 6;\n        // if (7 - firstDraw + 7 * 4 < countDay) { //确定表格行数，防止日期绘制不全\n        //     row = 7;\n        //}\n\n        function drawTodaybg(i, j) {\n          riliCtx.save();\n\n          riliCtx.beginPath();\n          riliCtx.strokeStyle = "#900";\n          riliCtx.arc(\n            45 + i * cardSize * 1.7 + cardSize / 1.18,\n            50 + j * cardSize + cardSize / 2,\n            cardSize / 2 - 10,\n            -Math.PI,\n            Math.PI * 1\n          );\n          riliCtx.stroke();\n          riliCtx.closePath();\n\n          riliCtx.beginPath();\n          riliCtx.arc(\n            45 + i * cardSize * 1.7 + cardSize / 1.18,\n            50 + j * cardSize + cardSize / 2,\n            cardSize / 2 - 9,\n            -Math.PI,\n            Math.PI * 0.9\n          );\n          riliCtx.stroke();\n          riliCtx.closePath();\n\n          riliCtx.beginPath();\n          riliCtx.arc(\n            45 + i * cardSize * 1.7 + cardSize / 1.18,\n            50 + j * cardSize + cardSize / 2,\n            cardSize / 2 - 8,\n            -Math.PI,\n            Math.PI * 0.8\n          );\n          riliCtx.stroke();\n          riliCtx.closePath();\n\n          riliCtx.beginPath();\n          riliCtx.arc(\n            45 + i * cardSize * 1.7 + cardSize / 1.18,\n            50 + j * cardSize + cardSize / 2,\n            cardSize / 2 - 7,\n            -Math.PI,\n            Math.PI * 0.7\n          );\n          riliCtx.stroke();\n          riliCtx.closePath();\n\n          riliCtx.beginPath();\n          riliCtx.arc(\n            45 + i * cardSize * 1.7 + cardSize / 1.18,\n            50 + j * cardSize + cardSize / 2,\n            cardSize / 2 - 6,\n            -Math.PI,\n            Math.PI * 0.6\n          );\n          riliCtx.stroke();\n          riliCtx.closePath();\n\n          riliCtx.restore();\n        }\n\n        var isNum = /^\\d+(\\d+)?$/;\n\n        function drawDate(txt, i, j) {\n          riliCtx.textAlign = "center";\n          riliCtx.fillStyle = "rgb(69,68,84)";\n          riliCtx.font = cardSize / 1.5 + "px Impact";\n          var yOffest = 3;\n\n          if ((j == 0 || j == 6) && isNum.test(txt)) {\n            riliCtx.fillStyle = "#900";\n          }\n\n          riliCtx.fillText(\n            txt.toString(),\n            45 + j * cardSize * 1.7 + cardSize / 1.18,\n            50 + i * cardSize + (cardSize / 3) * 2 + yOffest\n          );\n\n          if (txt == today) {\n            drawTodaybg(j, i);\n          }\n        }\n\n        riliCtx.fillStyle = "rgb(69,68,84)";\n        riliCtx.font = "900 26pt SimHei";\n        riliCtx.textAlign = "center";\n        var monthCN = [\n          "一",\n          "二",\n          "三",\n          "四",\n          "五",\n          "六",\n          "七",\n          "八",\n          "九",\n          "十",\n          "十一",\n          "十二",\n        ];\n        var monthEN = [\n          " January",\n          "February",\n          "  March",\n          "  April",\n          "   May",\n          "  June",\n          "  July",\n          " August",\n          "September",\n          " October",\n          "November",\n          " December",\n        ];\n\n        if (EnMonth) {\n          riliCtx.scale(1.1, 1);\n          riliCtx.fillText(monthEN[mouth], 245, 32);\n          riliCtx.resetTransform();\n        } else {\n          riliCtx.scale(1.1, 1);\n          riliCtx.fillText(monthCN[mouth] + "月", 260, 32);\n          riliCtx.resetTransform();\n\n          riliCtx.font = "20pt SimHei";\n          riliCtx.textAlign = "end";\n          riliCtx.fillText(today + "日", 520, 38);\n        }\n\n        for (var i = 0; i < row; i++) {\n          for (var j = 0; j < 7; j++) {\n            riliCtx.strokeRect(\n              45 + j * cardSize * 1.7,\n              50 + i * cardSize,\n              cardSize * 1.7,\n              cardSize\n            );\n          }\n        }\n\n        dayIndex = 1;\n\n        for (var i = 0; i < row; i++) {\n          //开始绘制日期数\n          for (var j = 0; j < 7; j++) {\n            if (i == 0) {\n              //表格第一行绘制星期\n              drawDate(array_week[j], i, j);\n              continue;\n            }\n\n            if (i == 1 && j < firstDraw) {\n              //确定1号绘制位置\n              continue;\n            }\n\n            if (dayIndex > countDay) {\n              //只绘制月份的天数\n              break;\n            }\n\n            drawDate(dayIndex++, i, j);\n          }\n        }\n      }\n\n      var riliInterval = setInterval(drawRili, 3600000);\n      drawRili();\n\n      // Canvas奇妙的剪切蒙版实现\n      var screenMask = new Image();\n      screenMask.src = "/fantasy/Screenmask.png";\n\n      var screen = new Image();\n      screen.src = "/fantasy/screen.png";\n\n      var iv = setInterval(() => {\n        if (screen.complete && screenMask.complete) {\n          screenImageCtx.drawImage(screen, -300, -50, 1280, 720);\n          screenImageCtx.globalCompositeOperation = "destination-atop";\n          screenImageCtx.drawImage(screenMask, 0, 0);\n          screenImageCtx.globalCompositeOperation = "source-over";\n          clearInterval(iv);\n        }\n      }, 14);\n\n      // 奇妙的屏幕大小自适应\n      window.onresize = function () {\n        display.width = window.innerWidth;\n        if (window.innerWidth / window.innerHeight > 1.8333333333333) {\n          display.height = (window.innerWidth / 1980) * 1080;\n          // window.scrollTo(0, (window.innerHeight - 123) / 16);\n        } else {\n          display.height = window.innerHeight;\n        }\n      };\n\n      window.onresize();\n\n      // 加载图片\n      var bg = new Image();\n      bg.src = "/fantasy/bg.png";\n\n      var mask = new Image();\n      mask.src = "/fantasy/mask.png";\n\n      var light = new Image();\n      light.src = "/fantasy/light.png";\n\n      var caidai = new Image();\n      caidai.src = "/fantasy/caidai.png";\n\n      var two = new Image();\n      two.src = "/fantasy/22.png";\n\n      var screenLight = new Image();\n      screenLight.src = "/fantasy/screenLight.png";\n\n      var phoneLight = new Image();\n      phoneLight.src = "/fantasy/phoneLight.png";\n\n      var phoneText = JSON.parse(\n        \'[{"time":0,"text":"凌晨啦!"},{"time":6,"text":"早上好!"},{"time":8,"text":"上午好!"},{"time":11,"text":"你吃了吗"},{"time":13,"text":"下午好鸭!"},{"time":16,"text":"傍晚咯!"},{"time":19,"text":"晚安!"}]\'\n      );\n\n      var noRili = false;\n      var updateSongInfoHandler = -1;\n\n      var data = new Array(128);\n      var animData = new Array(128);\n      var SoundPlaying = false;\n\n      // 奇妙的初始化\n      for (var i = 0; i < 128; i++) {\n        data[i] = animData[i] = 0;\n      }\n\n      // 奇妙的Normalize\n      var peakValue = 1;\n      if (window.wallpaperRegisterAudioListener) {\n        window.wallpaperRegisterAudioListener(function (audioData) {\n          var max = 0;\n\n          for (var i = 0; i < 128; i++) {\n            if (audioData[i] > max) max = audioData[i];\n          }\n\n          peakValue = peakValue * 0.99 + max * 0.01;\n\n          for (i = 0; i < 64; i++) {\n            data[63 - i] = audioData[i] / peakValue;\n          }\n\n          for (i = 0; i < 64; i++) {\n            data[127 - i] = audioData[127 - i];\n          }\n        });\n      } else {\n        var iva;\n        let audio = document.getElementsByClassName("aplayer-button")[0];\n        if (audio) {\n          audio.onclick = () => {\n            let play = document.getElementsByClassName("aplayer-play")[0];\n            if (play) {\n              iva = setInterval(() => {\n                for (i = 0; i < 64; i++) {\n                  peakValue = peakValue * 0.99 + 1 * 0.01;\n                  data[63 - i] =\n                    ((Math.random() * 0.4) / peakValue) * Math.random();\n                }\n                for (i = 0; i < 64; i++) {\n                  data[127 - i] = Math.random() * 0.2 * Math.random();\n                }\n                // for (var i = 0; i < 128; i++) {\n                //     data[i] = Math.random();\n                // }\n              }, 130);\n            } else {\n              clearInterval(iva);\n              for (var i = 0; i < 128; i++) {\n                data[i] = animData[i] = 0;\n              }\n            }\n          };\n        }\n      }\n\n      // ....\n      function min(a, b) {\n        return a > b ? b : a;\n      }\n\n      function max(a, b) {\n        return a > b ? a : b;\n      }\n\n      // 奇妙的颜色变化\n      var targetColor = { r: 80, g: 120, b: 169 };\n      var currentColor = { r: 80, g: 120, b: 169 };\n      var lightColor = { r: 0, g: 34, b: 77, a: 0 };\n\n      function colorToRgb(color) {\n        return (\n          "rgb(" +\n          color.r.toString() +\n          "," +\n          color.g.toString() +\n          "," +\n          color.b.toString() +\n          ")"\n        );\n      }\n\n      function colorToRgba(colorWithA) {\n        return (\n          "rgba(" +\n          colorWithA.r.toString() +\n          "," +\n          colorWithA.g.toString() +\n          "," +\n          colorWithA.b.toString() +\n          "," +\n          colorWithA.a.toString() +\n          ")"\n        );\n      }\n\n      var night = false;\n      var debug = false;\n\n      // Canvas的奇妙冒险!\n      function render() {\n        for (var i = 0; i < 128; i++) {\n          animData[i] += (data[i] - animData[i]) * 0.3;\n          animData[i] = min(animData[i], 1);\n        }\n\n        currentColor.r += (targetColor.r - currentColor.r) * 0.01;\n        currentColor.r = min(currentColor.r, 255);\n        currentColor.r = max(currentColor.r, 0);\n\n        currentColor.g += (targetColor.g - currentColor.g) * 0.01;\n        currentColor.g = min(currentColor.g, 255);\n        currentColor.g = max(currentColor.g, 0);\n\n        currentColor.b += (targetColor.b - currentColor.b) * 0.01;\n        currentColor.b = min(currentColor.b, 255);\n        currentColor.b = max(currentColor.b, 0);\n\n        ctx.clearRect(0, 0, 1980, 1080);\n        ctx.drawImage(bg, 0, 0);\n        ctx.drawImage(mask, 954, 99);\n\n        ctx.fillStyle = "#97adbb"; // 时间的颜色\n        ctx.font = "32pt Impact";\n\n        ctx.transform(1, 2.05 * (Math.PI / 180), 0, 1, 0, 0);\n\n        var time = new Date();\n        ctx.fillText(\n          (time.getHours() < 10 ? "0" : "") +\n            time.getHours().toString() +\n            ":" +\n            (time.getMinutes() < 10 ? "0" : "") +\n            time.getMinutes() +\n            ":" +\n            (time.getSeconds() < 10 ? "0" : "") +\n            time.getSeconds().toString(),\n          725,\n          318\n        );\n        ctx.resetTransform();\n\n        // 日历本\n        ctx.transform(0.9645, 0, 0 * (Math.PI / 180), 0.96, 967, 100);\n        ctx.rotate(6 * (Math.PI / 180));\n\n        if (!noRili) {\n          ctx.drawImage(rili, 0, 0);\n\n          ctx.resetTransform();\n\n          ctx.transform(0.9645, 0, 9 * (Math.PI / 180), 1, 825, 160);\n          ctx.rotate(7 * (Math.PI / 180));\n        }\n\n        targetColor = { r: 80, g: 120, b: 169 };\n\n        if (night) {\n          targetColor = { r: 255, g: 75, b: 80 };\n        }\n\n        if (!noRili) {\n          ctx.fillStyle = "rgba(0,0,0,0.5)";\n          ctx.fillRect(-10, 320, 650, 2);\n        }\n\n        ctx.fillStyle = colorToRgb(currentColor);\n\n        if (!noRili) {\n          for (var i = 32; i < 95; i++)\n            ctx.fillRect(\n              10 * (i - 32),\n              20 + (300 - 300 * animData[i]),\n              4,\n              300 * animData[i]\n            );\n        } else\n          for (var i = 32; i < 95; i++)\n            ctx.fillRect(\n              40 + 7.5 * (i - 32),\n              30 + (300 - 300 * animData[i]),\n              4,\n              300 * animData[i]\n            );\n\n        ctx.resetTransform();\n\n        ctx.globalCompositeOperation = "overlay";\n        ctx.drawImage(light, 971, 197);\n        ctx.globalCompositeOperation = "source-over";\n\n        ctx.drawImage(caidai, 949, 25);\n        ctx.drawImage(two, 1319, 345);\n\n        // 夜间光照\n        if (night && lightColor.a < 0.7) {\n          lightColor.a += 0.005;\n          lightColor.a = min(lightColor.a, 0.7);\n        } else if (!night) {\n          lightColor.a -= 0.005;\n          lightColor.a = max(lightColor.a, 0.0);\n        }\n\n        if (lightColor.a > 0) {\n          ctx.globalCompositeOperation = "hard-light";\n          ctx.fillStyle = colorToRgba(lightColor);\n          ctx.fillRect(0, 0, 1980, 1080);\n          ctx.globalCompositeOperation = "source-over";\n\n          ctx.globalAlpha = lightColor.a / 0.7;\n          ctx.drawImage(phoneLight, 860, 437);\n          ctx.globalAlpha = 1;\n        }\n\n        // 屏幕\n        ctx.drawImage(screenImage, 0, 0);\n        if (lightColor.a > 0) {\n          ctx.globalAlpha = lightColor.a / 0.7;\n          ctx.drawImage(screenLight, 0, 0);\n          ctx.globalAlpha = 1;\n        }\n\n        night = true;\n        var greeting = "凌晨啦!";\n\n        phoneText.forEach((v) => {\n          if (time.getHours() >= v.time) {\n            greeting = v.text;\n          }\n        });\n\n        if (time.getHours() >= 6 && time.getHours() <= 18) {\n          night = false;\n        }\n\n        night = debug ? !night : night;\n\n        // 手机\n        ctx.fillStyle = "#000";\n        ctx.font = "31.02pt SimHei";\n\n        ctx.transform(\n          1.0911,\n          -35 * (Math.PI / 180),\n          0,\n          0.5868,\n          1132.94,\n          564.07\n        );\n        ctx.rotate(56.5 * (Math.PI / 180));\n        ctx.textAlign = "center";\n        ctx.fillStyle = "#fff";\n        ctx.fillText(greeting, 135, 100);\n        ctx.textAlign = "start";\n        ctx.resetTransform();\n\n        displayCtx.drawImage(cvs, 0, 0, display.width, display.height);\n        window.requestAnimationFrame(render);\n      }\n\n      window.requestAnimationFrame(render);\n    },\n    mountedElement() {\n      var fantasy = document.getElementsByClassName("fantasy")[0];\n      document.getElementsByClassName("banner")[0].appendChild(fantasy);\n      // 下面是全局背景图，如果使用，则取 plugins 里以组件名来注册插件\n      // let interval = setInterval(() => {\n      //   let theme = document.getElementsByClassName("theme-container")[0];\n      //   if (theme) {\n      //     theme.appendChild(fantasy);\n      //   } \n      // }, 100);\n    },\n    clearBannerColor() {\n      let bannerColor = document.getElementsByClassName("banner-color")[0];\n      if (bannerColor) {\n        bannerColor.parentNode.removeChild(bannerColor);\n      }\n    },\n  },\n};\n<\/script>\n\n<style>\n.fantasy {\n  position: fixed;\n  top: 0;\n  height: 100vh;\n  width: 100%;\n  z-index: -9;\n}\n.hidden {\n  display: none;\n}\n#display {\n  margin: auto;\n}\n/* 图片大小 */\n.vdoing-index-class .home-wrapper .banner {\n  margin-top: 0 !important;\n  height: 100vh;\n  background-attachment: fixed !important;\n}\n/* 图片中间的签名和标题位置 */\n.banner-conent {\n  margin-top: 23vh !important;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n\n\n\n# 引入配置\n\n打开 docs/index.md 文档，添加如下内容：\n\n<ClientOnly>\n  <Fantasy />\n</ClientOnly>\n\n\n1\n2\n3\n\n\n此时你是没有导航栏的透明效果、标题下 desc 的淡入淡出（打印机）效果，这些效果我都放在了大图配置模块里，如果你没有配好大图模块，则从头阅读步骤开始，如果已经配好大图模块，则\n\n<ClientOnly>\n  <IndexBigImg />\n  <Fantasy />\n</ClientOnly>\n\n\n1\n2\n3\n4\n\n\nFantasy 组件的图片会覆盖 IndexBigImg 组件的图片，而其他的样式和功能都会保留。\n\n> 我的建议\n\n如果使用我的额外动态图，则把 bgTimeColorArray 数组的内容都改为 transparent，如下：\n\nindexImg: {\n  // ......\n  bgTimeColorArray: [\'transparent\', \'transparent\', \'transparent\', \'transparent\'],   // 第一个是白天的颜色（默认原图），第二个是黄昏的颜色，第三个是晚上的颜色，第四个是深夜的颜色。bgTimeColor 为 true 生效\n  // ......\n}\n\n\n1\n2\n3\n4\n5\n\n\n因为额外动态图自带时间的颜色，不需要额外添加。\n\n\n# 结束语\n\n如果你还有疑惑，可以去我的 GitHub 仓库或者 Gitee 仓库查看源码。\n\nGitHub：https://github.com/huangguan2001/Kele-Bingtang.github.io\n\nGitee：https://gitee.com/kele-bingtang/Kele-Bingtang\n\n如果你有更好的方式，评论区留言告诉我，或者加入 Vdoing 主题的 QQ 群：694387113。谢谢！',normalizedContent:'笔记\n\n你是否曾进入他人的博客后，占据浏览器大屏的图片映入眼帘，如果你也喜欢这种样式，本内容将介绍如何实现。\n\n2021-01-11 @村长\n\n\n\n * 前言\n * 组件添加\n * 组件注册\n   * 图片添加\n   * 组件添加\n * 属性说明\n   * 导航栏配置\n   * 背景图配置\n   * desc淡入淡出配置\n   * 气泡配置\n * 首页额外动态图\n   * 静态资源获取\n   * 组件配置\n   * 引入配置\n * 结束语\n\n\n\n\n# 前言\n\n目前适用版本是 vdoing v1.x。\n\n如果你没有了解什么是首页大图模块，可以浏览一番本内容介绍的大图模块，点击跳转 我的首页。(ps：如果不想跳转，也可以参考下方的图片)\n\n\n\n本内容实现了如下功能:\n\n * 客户端的大图片效果\n * 导航栏的颜色效果（可配置选择）\n * 滑出大图片的位置后，切换导航栏颜色效果（可配置选择）\n * 大图片的背景色随一天的不同时间而变化（可配置选择）\n * 首页时间提示效果（可配置选择）\n * 个人描述淡入淡出（打印机）效果（可配置选择）\n * 大图片的气泡效果（可配置选择）\n * 大图片气泡效果的位置选择（可配置选择）\n\n......\n\n本内容分为三步，无脑 copy 即可：\n\n * 在 docs/.vuepress/components 目录中创建 indexbigimg.vue 组件\n * 在 docs/index.md 添加 indexbigimg.vue 组件\n * 在 docs/.vuepress/config.js（新版 config.ts）的 themeconfig 中配置\n\n\n# 组件添加\n\n在 docs/.vuepress/components 目录中创建 indexbigimg.vue 组件，如果没有 components 文件夹，则请创建。\n\n在组件添加如下内容：\n\n<template>\n  <div class="index-bigimg" style="display: none"></div>\n</template>\n<script>\n// 两个变量分别是背景元素的 class、生成的箭头 class\nconst banner = "banner";\nconst banner_arrow = "banner-arrow";\nexport default {\n  mounted() {\n    const arrow = document.getelementbyid(banner_arrow);\n    arrow && arrow.parentnode.removechild(arrow);\n    let a = document.createelement("a");\n    a.id = banner_arrow;\n    a.classname = banner_arrow;\n    document.getelementsbyclassname(banner)[0].append(a);\n    let targeta = document.getelementbyid(banner_arrow);\n    targeta.addeventlistener("click", (e) => {\n      // 添加点击事件\n      this.scrollfn();\n    });\n    // 这里是这几个属性的默认值，建议在 themeconfig 进行配置，它们将覆盖这几个属性值\n    let navcolor = 1;\n    let switchnavcolor = false;\n    let bgtimecolor = false;\n    let bgtimecolorarray = [\n      "transparent",\n      "rgba(255, 148, 48, .2",\n      "rgba(0, 0, 0, .3)",\n      "rgba(0, 0, 0, .5)",\n    ];\n    let descfade = false;\n    let desc = [];\n    let descfadeintime = 200;\n    let descfadeouttime = 100;\n    let descnexttime = 800;\n    let descfontsize = "1.4rem";\n    let bubble = false;\n    let bubbleposition = 0;\n    let bubblenum = 200;\n    if (\n      this.$themeconfig.indeximg &&\n      object.keys(this.$themeconfig.indeximg).length > 0\n    ) {\n      navcolor =\n        this.$themeconfig.indeximg.navcolor == undefined\n          ? navcolor\n          : this.$themeconfig.indeximg.navcolor;\n      switchnavcolor =\n        this.$themeconfig.indeximg.switchnavcolor == undefined\n          ? switchnavcolor\n          : this.$themeconfig.indeximg.switchnavcolor;\n      bgtimecolor =\n        this.$themeconfig.indeximg.bgtimecolor == undefined\n          ? bgtimecolor\n          : this.$themeconfig.indeximg.bgtimecolor;\n      bgtimecolorarray =\n        this.$themeconfig.indeximg.bgtimecolorarray == undefined\n          ? bgtimecolorarray\n          : this.$themeconfig.indeximg.bgtimecolorarray;\n          descfade =\n        this.$themeconfig.indeximg.descfade == undefined\n          ? descfade\n          : this.$themeconfig.indeximg.descfade;\n      desc =\n        this.$themeconfig.indeximg.desc == undefined\n          ? desc\n          : this.$themeconfig.indeximg.desc;\n      descfontsize =\n        this.$themeconfig.indeximg.descfontsize == undefined\n          ? descfontsize\n          : this.$themeconfig.indeximg.descfontsize;\n      descfadeintime =\n        this.$themeconfig.indeximg.descfadeintime == undefined\n          ? descfadeintime\n          : this.$themeconfig.indeximg.descfadeintime;\n      descnexttime =\n        this.$themeconfig.indeximg.descnexttime == undefined\n          ? descnexttime\n          : this.$themeconfig.indeximg.descnexttime;\n      bubble =\n        this.$themeconfig.indeximg.bubble == undefined\n          ? bubble\n          : this.$themeconfig.indeximg.bubble;\n      bubbleposition =\n        this.$themeconfig.indeximg.bubbleposition == undefined\n          ? bubbleposition\n          : this.$themeconfig.indeximg.bubbleposition;\n      bubblenum =\n        this.$themeconfig.indeximg.bubblenum == undefined\n          ? bubblenum\n          : this.$themeconfig.indeximg.bubblenum;\n    }\n    // 初始化\n    if (bgtimecolor) {\n      this.bgtimecolor(bgtimecolorarray);\n    }\n    settimeout(() => {\n      this.nobgblur();\n    }, 100);\n    this.blurtext(navcolor);\n    this.watchscroll(navcolor, switchnavcolor);\n\n    if (descfade) {\n      this.textfadeinandout(\n        desc,\n        descfontsize,\n        descfadeintime,\n        descfadeouttime,\n        descnexttime\n      );\n    }\n    if (bubble) {\n      let canvas = document.createelement("canvas");\n      canvas.id = "canvas";\n      canvas.style.top = bubbleposition + "%";\n      document.getelementsbyclassname(banner)[0].append(canvas);\n      this.canvasbubble(bubblenum);\n    }\n  },\n  watch: {\n    $route(to, from) {\n      if (to.path == "/" && object.keys(this.$route.query).length > 0) {\n        settimeout(() => {\n          this.clickarrow();\n        }, 200);\n      }\n    },\n  },\n  methods: {\n    scrollfn() {\n      const windowh = document.getelementsbyclassname(banner)[0].clientheight; // 获取窗口高度\n      window.scrollto({\n        top: windowh,\n        behavior: "smooth", // 平滑滚动\n      });\n    },\n    // 触发下拉按钮\n    clickarrow() {\n      const arrow = document.getelementbyid("banner-arrow");\n      arrow.click();\n    },\n    // 监听页面滚动的回调\n    watchscroll(navcolor, switchnavcolor) {\n      const windowh = document.getelementsbyclassname(banner)[0].clientheight; // 获取窗口高度\n      window.onscroll = () => {\n        if (document.documentelement.scrolltop < windowh) {\n          this.blurtext(navcolor);\n          this.nobgblur();\n        } else {\n          if (switchnavcolor && navcolor == 1) {\n            this.blurtext(2);\n          } else if (switchnavcolor && navcolor == 2) {\n            this.blurtext(1);\n          }\n          this.bgblur();\n        }\n      };\n    },\n    // 导航栏恢复原主题样式\n    bgblur() {\n      let navbar = document.getelementsbyclassname("navbar")[0];\n      navbar.classname = "navbar blur";\n    },\n    // 导航栏透明\n    nobgblur() {\n      let navbar = document.getelementsbyclassname("navbar")[0];\n      navbar.classname = "navbar navbar1 blur";\n    },\n    // 导航栏的字体颜色\n    blurtext(navcolor) {\n      let title = document.getelementsbyclassname("site-name")[0];\n      let search = document.getelementsbyclassname("search-box")[0];\n      let nav = document.getelementsbyclassname("nav-links")[0];\n      if (navcolor == 1) {\n        title.classname = "site-name can-hide";\n        nav.classname = "nav-links can-hide";\n        search.classname = "search-box";\n      } else if (navcolor == 2) {\n        title.classname = "site-name site-name1 can-hide";\n        nav.classname = "nav-links nav-links1 can-hide";\n        search.classname = "search-box search-box1";\n      }\n    },\n    // 背景色随时间变化\n    bgtimecolor(bgtimecolorarray) {\n      var hours = new date().gethours();\n      var minutes = new date().getminutes();\n      var seconds = new date().getseconds();\n      hours = hours < 10 ? "0" + hours : hours;\n      minutes = minutes < 10 ? "0" + minutes : minutes;\n      seconds = seconds < 10 ? "0" + seconds : seconds;\n      let div = document.createelement("div");\n      div.classname = "banner-color";\n      if (hours >= 6 && hours < 11) {\n        div.style.backgroundcolor = bgtimecolorarray[0];\n        addtip(\n          `早上好呀~~，现在是 ${hours}:${minutes}:${seconds}，吃早餐了吗？😊🤭`,\n          "info",\n          50,\n          4000\n        );\n      } else if (hours >= 12 && hours <= 16) {\n        div.style.backgroundcolor = bgtimecolorarray[0];\n        addtip(\n          `下午好呀~~，现在是 ${hours}:${minutes}:${seconds}，繁忙的下午也要适当休息哦🥤🏀~~`,\n          "info",\n          50,\n          4000\n        );\n      } else if (hours >= 16 && hours <= 19) {\n        div.style.backgroundcolor = bgtimecolorarray[1];\n        addtip(\n          `到黄昏了~~，现在是 ${hours}:${minutes}:${seconds}，该准备吃饭啦🥗🍖~~`,\n          "info",\n          50,\n          4000\n        );\n      } else if (hours >= 19 && hours < 24) {\n        div.style.backgroundcolor = bgtimecolorarray[2];\n        addtip(\n          `晚上好呀~~，现在是 ${hours}:${minutes}:${seconds}，该准备洗漱睡觉啦🥱😪~~`,\n          "info",\n          50,\n          4000\n        );\n      } else if (hours >= 0 && hours < 6) {\n        div.style.backgroundcolor = bgtimecolorarray[3];\n        addtip(\n          `别再熬夜了~~，现在是 ${hours}:${minutes}:${seconds}，早点睡吧，让我们一起欣赏早上的太阳~~😇🛏`,\n          "info",\n          50,\n          4000\n        );\n      }\n      document.getelementsbyclassname(banner)[0].parentnode.append(div);\n    },\n    // 字体淡入淡出\n    textfadeinandout(\n      desc,\n      descfontsize,\n      descfadeintime,\n      descfadeouttime,\n      descnexttime\n    ) {\n      let descelement = document.getelementsbyclassname("description")[0];\n      descelement.style.fontsize = descfontsize;\n      if (descelement) {\n        // 非首页不触发\n        var span = document.createelement("span"); // 创建 | 的元素\n        span.classname = "typed";\n        span.innerhtml = "|";\n        var index = 0; // 为 desc 的长度服务\n        var length = 0; // 为数组服务\n        var description = descelement.innertext; // 先取默认值\n        descelement.innertext = ""; // 清空 desc\n        descelement.appendchild(document.createelement("span")); // 创建 desc 所在的新元素\n        descelement.appendchild(span); // 添加 | 的元素\n        // 初始化迭代\n        var interval1 = setinterval(fadein, descfadeintime);\n        var interval2;\n      }\n      // 淡入回调\n      function fadein() {\n        if (descelement) {\n          span.style.animation = "none"; // 淡入时，| 光标不允许闪烁\n          if (desc instanceof array && desc.length > 0) {\n            // 如果是 themeconfig 传来的数组\n            description = desc[length];\n          }\n          descelement.firstchild.innertext = description.substring(0, index++);\n          if (index > description.length) {\n            clearinterval(interval1);\n            span.style.animation = "typedblink 1s infinite"; // 淡入结束，| 光标允许闪烁\n            settimeout(() => {\n              interval2 = setinterval(fadeout, descfadeouttime);\n            }, descnexttime);\n          }\n        }\n      }\n      // 淡出回调\n      function fadeout() {\n        if (index >= 0) {\n          span.style.animation = "none"; // 淡出时，| 光标不允许闪烁\n          descelement.firstchild.innertext = description.substring(0, index--);\n        } else {\n          clearinterval(interval2);\n          span.style.animation = "typedblink 1s infinite"; // 淡出结束，| 光标允许闪烁\n          settimeout(() => {\n            length++;\n            if (length >= desc.length) {\n              length = 0; // desc 展示完，重新开始计数\n            }\n            interval1 = setinterval(fadein, descfadeintime);\n          }, descnexttime);\n        }\n      }\n    },\n    // 气泡效果\n    canvasbubble(bubblenum) {\n      var canvas = document.getelementbyid("canvas");\n      var cxt = canvas.getcontext("2d");\n      function dot() {\n        this.alive = true;\n        this.x = math.round(math.random() * canvas.width);\n        this.y = math.round(math.random() * canvas.height);\n        this.diameter = math.random() * 10.8;\n        this.colordata = {\n          red: math.round(math.random() * 255),\n          green: math.round(math.random() * 255),\n          blue: math.round(math.random() * 255),\n        };\n        this.alpha = 0.5;\n        this.color =\n          "rgba(" +\n          this.colordata.red +\n          ", " +\n          this.colordata.green +\n          "," +\n          this.colordata.blue +\n          "," +\n          this.alpha +\n          ")";\n        this.velocity = {\n          x: math.round(math.random() < 0.5 ? -1 : 1) * math.random() * 0.7,\n          y: math.round(math.random() < 0.5 ? -1 : 1) * math.random() * 0.7,\n        };\n      }\n      dot.prototype = {\n        draw: function () {\n          cxt.fillstyle = this.color;\n          cxt.beginpath();\n          cxt.arc(this.x, this.y, this.diameter, 0, math.pi * 2, false);\n          cxt.fill();\n        },\n        update: function () {\n          if (this.alpha < 0.8) {\n            this.alpha += 0.01;\n            this.color =\n              "rgba(" +\n              this.colordata.red +\n              ", " +\n              this.colordata.green +\n              "," +\n              this.colordata.blue +\n              "," +\n              this.alpha +\n              ")";\n          }\n          this.x += this.velocity.x;\n          this.y += this.velocity.y;\n          if (\n            this.x > canvas.width + 5 ||\n            this.x < 0 - 5 ||\n            this.y > canvas.height + 5 ||\n            this.y < 0 - 5\n          ) {\n            this.alive = false;\n          }\n        },\n      };\n      var event = {\n        rarray: [],\n        init: function () {\n          canvas.width = window.innerwidth;\n          canvas.height = window.innerheight;\n          for (var x = 0; x < bubblenum; x++) {\n            this.rarray.push(new dot());\n          }\n          this.update();\n        },\n        draw: function () {\n          cxt.clearrect(0, 0, canvas.width, canvas.height);\n          this.rarray.foreach(function (dot) {\n            dot.draw();\n          });\n        },\n        update: function () {\n          if (event.rarray.length < bubblenum) {\n            for (var x = event.rarray.length; x < bubblenum; x++) {\n              event.rarray.push(new dot());\n            }\n          }\n          event.rarray.foreach(function (dot) {\n            dot.update();\n          });\n          event.rarray = event.rarray.filter(function (dot) {\n            return dot.alive;\n          });\n          event.draw();\n          requestanimationframe(event.update);\n        },\n      };\n      window.onresize = function () {\n        event.rarray = [];\n        canvas.width = window.innerwidth;\n        canvas.height = window.innerheight;\n      };\n      event.init();\n    },\n  },\n};\n/**\n * 添加消息提示\n * content：内容\n * type：弹窗类型（tip、success、warning、danger）\n * startheight：第一个弹窗的高度，默认 50\n * dietime：弹窗消失时间（毫秒），默认 3000 毫秒\n */\nfunction addtip(content, type, startheight = 50, dietime = 3000) {\n  var tip = document.queryselectorall(".index-tip");\n  var time = new date().gettime();\n  // 获取最后消息提示元素的高度\n  var top = tip.length == 0 ? 0 : tip[tip.length - 1].getattribute("data-top");\n  // 如果产生两个以上的消息提示，则出现在上一个提示的下面，即高度添加，否则默认 50\n  var lasttop =\n    parseint(top) +\n    (tip.length != 0 ? tip[tip.length - 1].offsetheight + 17 : startheight);\n\n  let div = document.createelement("div");\n  div.classname = `index-tip tip-${type} ${time}`;\n  div.style.top = parseint(top) + "px";\n  div.setattribute("data-top", lasttop);\n  if (type == "info" || type == 1) {\n    div.innerhtml = `<i class="iconfont icon-info icon"></i><p class="tip-info-content">${content}</p>`;\n  } else if (type == "success" || type == 2) {\n    div.innerhtml = `<i class="iconfont icon-dagouyouquan icon"></i><p class="tip-success-content">${content}</p>`;\n  } else if (type == "danger" || type == 3) {\n    div.innerhtml = `<i class="iconfont icon-cuowu icon"></i><p class="tip-danger-content">${content}</p>`;\n  } else if (type == "warning" || type == 4) {\n    div.innerhtml = `<i class="iconfont icon-gantanhao icon"></i><p class="tip-warning-content">${content}</p>`;\n  }\n  document.body.appendchild(div);\n\n  let timetip = document.getelementsbyclassname(time)[0];\n  settimeout(() => {\n    timetip.style.top = parseint(lasttop) + "px";\n    timetip.style.opacity = "1";\n  }, 10);\n\n  // 消息提示 dietime 秒后隐藏并被删除\n  settimeout(() => {\n    timetip.style.top = "0px";\n    timetip.style.opacity = "0";\n\n    // 下面的所有元素回到各自曾经的出发点\n    var alltipelement = nextalltipelement(timetip);\n    for (let i = 0; i < alltipelement.length; i++) {\n      var next = alltipelement[i];\n      var top =\n        parseint(next.getattribute("data-top")) - next.offsetheight - 17;\n      next.setattribute("data-top", top);\n      next.style.top = top + "px";\n    }\n    settimeout(() => {\n      timetip.remove();\n    }, 500);\n  }, dietime);\n}\n/**\n * 获取后面的兄弟元素\n */\nfunction nextalltipelement(elem) {\n  var r = [];\n  var n = elem;\n  for (; n; n = n.nextsibling) {\n    if (n.nodetype === 1 && n !== elem) {\n      r.push(n);\n    }\n  }\n  return r;\n}\n<\/script>\n\n<style>\n/* 图片大小 */\n.vdoing-index-class .home-wrapper .banner {\n  margin-top: 0 !important;\n  height: 100vh;\n  background-attachment: fixed !important;\n}\n/* 图片中间的签名和标题位置 */\n.banner-conent {\n  margin-top: 23vh !important;\n}\n/* 下面是配合 js 用的 class 样式 */\n.vdoing-index-class .navbar1 {\n  background-color: transparent;\n  box-shadow: none;\n  backdrop-filter: none;\n}\n.vdoing-index-class .nav-links1 > .nav-item > a,  /* 没有二级导航的一级导航 */\n  .vdoing-index-class .nav-links1 > a,   /* github */\n  .vdoing-index-class .nav-links1 .dropdown-title a:hover,   /* 鼠标悬停 */\n  .vdoing-index-class .nav-links1 .title,     /* 不能跳转的一级导航 */\n  .vdoing-index-class .nav-links1 .dropdown-title > .link-title,  /* 能跳转的一级导航 */\n  .vdoing-index-class .site-name1  /* 左侧的名字 */ {\n  color: #fff !important;\n}\n/* 页脚的颜色 */\n.vdoing-index-class .footer {\n  color: #fff;\n}\n.vdoing-index-class .search-box1 input {\n  border-color: #fff;\n  color: #fff;\n}\n/* 下面是箭头相关的样式 */\n.banner-arrow {\n  display: block;\n  margin: 12rem auto 0;\n  bottom: 45px;\n  width: 20px;\n  height: 20px;\n  font-size: 34px;\n  text-align: center;\n  animation: bounce-in 5s 3s infinite;\n  position: absolute;\n  left: 50%;\n  bottom: 15%;\n  margin-left: -10px;\n  cursor: pointer;\n  z-index: 999;\n}\n@-webkit-keyframes bounce-in {\n  0% {\n    transform: translatey(0);\n  }\n  20% {\n    transform: translatey(0);\n  }\n  50% {\n    transform: translatey(-20px);\n  }\n  80% {\n    transform: translatey(0);\n  }\n  to {\n    transform: translatey(0);\n  }\n}\n.banner-arrow::before {\n  content: "";\n  width: 20px;\n  height: 20px;\n  display: block;\n  border-right: 3px solid #fff;\n  border-top: 3px solid #fff;\n  transform: rotate(135deg);\n  position: absolute;\n  bottom: 10px;\n}\n.banner-arrow::after {\n  content: "";\n  width: 20px;\n  height: 20px;\n  display: block;\n  border-right: 3px solid #fff;\n  border-top: 3px solid #fff;\n  transform: rotate(135deg);\n}\n/* 描述淡入淡出元素 */\n.description {\n  display: inline-block;\n}\n.typed {\n  opacity: 1;\n}\n/* 随时间变化的背景色元素 */\n.vdoing-index-class .banner-color {\n  width: 100%;\n  min-height: 450px;\n  overflow: hidden;\n  margin-top: 0;\n  height: 100vh;\n  position: absolute;\n  top: 0;\n}\n/* 气泡效果的画布元素 */\n#canvas {\n  position: absolute;\n  top: 0;\n}\n/* 切换第二页，继续打开 banner */\n.hide-banner {\n  display: block !important;\n}\n/* 提示框元素 */\n.index-tip {\n  position: fixed;\n  display: flex;\n  top: -10px;\n  left: 50%;\n  opacity: 0;\n  min-width: 320px;\n  transform: translatex(-50%);\n  transition: opacity 0.3s linear, top 0.4s, transform 0.4s;\n  z-index: 99999;\n  padding: 15px 15px 15px 20px;\n  border: 1px solid #ebeef5;\n  border-radius: 4px;\n  grid-row: 1;\n  line-height: 17px;\n}\n\n.index-tip p {\n  line-height: 17px;\n  margin: 0;\n  font-size: 14px;\n}\n\n.icon {\n  margin-right: 10px;\n  line-height: 17px;\n}\n\n.tip-success {\n  color: #67c23a;\n  background-color: #f0f9eb;\n  border-color: #e1f3d8;\n}\n\n.tip-success .tip-success-content {\n  color: #67c23a;\n}\n\n.tip-danger {\n  color: #f56c6c;\n  background-color: #fef0f0;\n  border-color: #fde2e2;\n}\n\n.tip-danger .tip-danger-content {\n  color: #f56c6c;\n}\n\n.tip-info {\n  background-color: #edf2fc;\n  border-color: #ebeef5;\n}\n\n.tip-info .tip-info-content {\n  color: #909399;\n}\n\n.tip-warning {\n  color: #e6a23c;\n  background-color: #fdf6ec;\n  border-color: #faecd8;\n}\n\n.tip-warning .tip-warning-content {\n  margin: 0;\n  color: #e6a23c;\n  line-height: 21px;\n  font-size: 14px;\n}\n@keyframes typedblink {\n  0% {\n    opacity: 1;\n  }\n  100% {\n    opacity: 0;\n  }\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n\n\n注释已经有说明，但是有几个配置建议在 themeconfig 中配置（往下看），其他随意。\n\n\n# 组件注册\n\n\n# 图片添加\n\n图片的添加有两种（可二选一，可都选：效果叠加）：\n\n * banner 图片，即仅仅开启首页的大图效果，离开大图后的背景是其他颜色（主题默认灰白色）\n   \n   打开 docs/index.md 文档，首先在 frontmatter 添加一个自定义类和自己的图片路径：\n   \n   ---\n   pageclass: vdoing-index-class\n   bannerbg: /img/index/bg.jpg  # 你的图片路径(必须位于 public 下)，可以是 url\n   ---\n   \n   \n   1\n   2\n   3\n   4\n   \n\n * 全背景图，即 首页大图 + 全背景图（我的博客使用这种方式）\n   \n   首先在 docs/index.md 中注释掉上方的 bannerbg，但是 pageclass 要保留（这是识别首页的 class），打开 docs/.vuepress/config.js（新版是 config.ts）文件，在 themeconfig 中添加如下代码：\n   \n   bodybgimg: /img/index/bg.jpg,  // 你的图片路径(必须位于 public 下)，可以是 url\n   bodybgimgopacity: 1, // body 背景图透明度，选值 0 ~ 1.0, 默认0.5\n   \n   \n   1\n   2\n   \n   \n   如果 bodybgimg 是数组，则每隔 15 秒切换一次图片，具体介绍请看官网，点击直达。\n\n\n# 组件添加\n\n回到 docs/index.md 文档，滑到文档的最下方，添加组件：\n\n<clientonly>\n  <indexbigimg />\n</clientonly>\n\n\n1\n2\n3\n\n\n<clientonly> 大部分情况下可加可不加，少部分情况的官方介绍：https://v2.vuepress.vuejs.org/zh/reference/components.html#clientonly。\n\n> 确保 pageclass: vdoing-index-class 被添加到 docs/index.md 的 frontmatter 中。\n\n打开 docs/.vuepress/config.js（新版 config.ts）文件，在 themeconfig 模块里添加如下代码（这是我的配置）：\n\nindeximg: {\n  navcolor: 2,    // 导航栏左侧名字、中间搜索框、右侧字体的颜色，1 是黑色，2 是白色。默认是 1\n  switchnavcolor: true,    // 页面移出大图片的位置后，navcolor 是否变换，如由白色变黑色，黑色变白色。默认是 false\n  // 因为本主题的默认背景色偏向白色，如果 navcolor 是 2，建议需要开启(true)，否则白背景 + 白字体 = 看不见\n  bgtimecolor: true,     // 是否开启图片的背景色随一天的不同时间而变化，并且开启时间窗口提示，默认是 false。时间分为四种：白天（原图）、黄昏（偏黄）、晚上（偏黑）、深夜（偏深黑）\n  bgtimecolorarray: [\'transparent\', \'rgba(255, 148, 48, .2)\', \'rgba(0, 0, 0, .3)\', \'rgba(0, 0, 0, .5)\'],   // 第一个是白天的颜色（默认原图），第二个是黄昏的颜色，第三个是晚上的颜色，第四个是深夜的颜色。bgtimecolor 为 true 生效。提示：如果不想要这个效果，但是又想要时间窗口提示效果，则改为 [\'transparent\', \'transparent\', \'transparent\', \'transparent\']\n  descfade: true,   // 是否开启图片中间描述的淡入效果，默认为 false\n  desc: [ "你所有的悲伤都是源于技术的不足 —— 来自 村长"],  // 多个描述，如果填写则覆盖 config.js 的 description，不填写默认读取 config.js 的 description，descfadein 为 true 生效\n  descfontsize: \'1.4rem\',   // desc 的字体大小，默认 1.4rem。提示：原主题是 1.1rem\n  descfadeintime: 200,  // 描述的淡入效果持续时间，descfade 为 true 生效，默认 200 毫秒\n  descfadeouttime: 100,  // 描述的淡出效果持续时间，descfade 为 true 生效，默认 100 毫秒\n  descnexttime: 800,  // 当存在多个 desc 时，一个 desc 展示完后或准备开始时，多少秒后出现下一个 desc，默认 800 毫秒\n  bubble: true,    // 是否开启图片的气泡效果，默认为 false\n  bubbleposition: 0,  // 气泡效果的位置，范围：0-100，不同数值代表不同的起始位置，0是整个图片，50是半张图（一半的下方）。bubble 为 true 生效。默认是 0\n  bubblenum: 200,   // 气泡的个数，bubble 为 true 生效，默认 200 个\n},\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 属性说明\n\n\n# 导航栏配置\n\nnavcolor\n\n * 类型：number\n * 默认值：1\n\n导航栏左侧名字、中间搜索框、右侧字体颜色，1 是黑色，2 是白色，默认是 1。\n\nswitchnavcolor\n\n * 类型：boolean\n * 默认值：false\n\n页面移出大图片的位置后，navcolor 是否变换，如由白色变黑色，黑色变白色，默认是 false。\n\n提示：因为本主题的默认背景色偏向白色，如果 navcolor 是 2，建议需要开启(true)，否则白背景 + 白字体 = 看不见。\n\n\n# 背景图配置\n\nbgtimecolor\n\n * 类型：boolean\n * 默认值：false\n\n是否开启图片的背景色随一天的时间而变化，是否开启图片的背景色随一天的不同时间而变化，并且开启时间窗口提示，默认是 false。时间分为四种：白天（原图）、黄昏（偏黄）、晚上（偏黑）、深夜（偏深黑）。\n\n并且开启首次进入首页后的时间提示。\n\nbgtimecolorarray\n\n * 类型：array\n * 默认值：[\'transparent\', \'rgba(255, 148, 48, .2)\', \'rgba(0, 0, 0, .3)\', \'rgba(0, 0, 0, .5)\']\n\n数组的第一个是白天的颜色（默认原图），第二个是黄昏的颜色，第三个是晚上的颜色，第四个是深夜的颜色。bgtimecolor 为 true 生效。\n\n提示：如果不想要图片的背景色随一天的时间而变化效果，但是又想要时间窗口提示效果，则改为 [\'transparent\', \'transparent\', \'transparent\', \'transparent\']\n\n\n# desc淡入淡出配置\n\ndescfade\n\n * 类型：boolean\n * 默认值：false\n\n是否开启图片中间描述的淡入效果，默认为 false。\n\ndesc\n\n * 类型：array\n * 默认值：[]\n\n多条描述，如果填写则覆盖 index.md 的 tagline，不填写则默认读取 index.md 的 tagline，descfadein 为 true 生效。\n\ndescfontsize\n\n * 类型：string\n * 默认值：1.4rem\n\ndesc 的字体大小，默认 1.4rem。提示：原主题是 1.1rem。\n\ndescfadeintime\n\n * 类型：number\n * 默认值：200(ms)\n\n图片中间描述的淡入效果持续时间，descfade 为 true 生效，默认 200 毫秒。\n\ndescfadeouttime\n\n * 类型：number\n * 默认值：100(ms)\n\n描述的淡出效果持续时间，descfade 为 true 生效，默认 100 毫秒。\n\ndescnexttime\n\n * 类型：number\n * 默认值：800(ms)\n\n当存在多个 desc 时，一个 desc 展示完后或准备开始时，多少时间后出现下一个 desc，默认 800 毫秒。\n\n\n# 气泡配置\n\nbubble\n\n * 类型：boolean\n * 默认值：false\n\n是否开启图片的气泡效果，默认为 false。\n\nbubbleposition\n\n * 类型：number\n\n * 默认值：0\n\n * 范围：0 - 100\n\n气泡效果的位置，范围：0 - 100，不同数值代表不同的起始位置，0 是整个图片，50 是半张图（一半的下方）。bubble 为 true 生效，默认是 0。\n\nbubblenum\n\n * 类型：number\n * 默认值：200\n\n气泡的个数，默认 200 个。\n\n\n# 首页额外动态图\n\n上面的所有配置是属于 静态大图效果，如果你喜欢我的 动态 首页背景图：全背景、颜色随时间变化、日历显示当天、时间同步当前、播放音乐有音谱 ...（可能时间久远，我也许换背景图了🤣）\n\n目前我仅使用在首页，如果进入文章页，则恢复原来的背景图。为什么不全局使用呢？\n\n我用过，下面也有注释说明如何全局配置，但是夜晚时候的右侧标题字体会被背景色同化（看不见），所以就当首页的背景图使用。文章页背景图利用官方给的属性来配置。\n\n\n# 静态资源获取\n\n首先需要下载一些需要用到的图片，总共 1.47mb。点击前往下载地址，找到 fantasy.war 压缩包并下载。\n\n下载后将其解压到 public 目录下，解压后的文件夹叫 fantasy，不是请改名。如图：\n\n\n\n\n# 组件配置\n\n在 docs/.vuepress/components 目录中创建 fantasy.vue 组件，如果没有 components 文件夹，则请创建。\n\n> 提示：代码块里的图片路径我已经配置好，获取的是 public 根目录下的 fantasy 文件夹下的图片，如果你更改了路径，则下方代码块也要改路径。\n\n添加如下内容：\n\n<template>\n  <div class="fantasy">\n    <canvas id="cvs" class="hidden" width="1980" height="1080"></canvas>\n    <canvas id="screenimage" class="hidden" width="234" height="357"></canvas>\n    <canvas id="rili" class="hidden" width="600" height="600"></canvas>\n    <canvas id="display"></canvas>\n  </div>\n</template>\n\n<script>\nexport default {\n  mounted() {\n    // 如果使用 indexbigimg.vue，则去掉该组件提供的时间罩\n    this.clearbannercolor();\n    this.mountedelement();\n    this.init();\n  },\n  methods: {\n    init() {\n      var cvs = document.getelementbyid("cvs");\n      if (!cvs) {\n        return;\n      }\n      var ctx = cvs.getcontext("2d");\n\n      var display = document.getelementbyid("display");\n      var displayctx = display.getcontext("2d");\n\n      var screenimage = document.getelementbyid("screenimage");\n      var screenimagectx = screenimage.getcontext("2d");\n\n      var rili = document.getelementbyid("rili");\n      var rilictx = rili.getcontext("2d");\n\n      var songinfo = {};\n      var alltimebak = 0;\n      var nowbak = 0;\n      var drawwarning = false;\n      var enmonth = false;\n\n      // 出处：https://blog.csdn.net/u012601195/article/details/47860617\n      function drawrili() {\n        rilictx.clearrect(0, 0, 600, 600);\n        var date = new date();\n        var year = date.getyear();\n        var mouth = date.getmonth();\n        var today = date.getdate();\n        var week = date.getday();\n\n        var cardsize = 40;\n\n        var array_three = [4, 6, 9, 11];\n        var array_threeone = [1, 3, 5, 7, 8, 10, 12];\n        var array_week = ["sun", "mon", "tues", "wed", "thur", "fri", "sat"];\n\n        var firstdraw; //1号绘制位置\n        var widx = (today - 1) % 7;\n\n        if (week >= widx) {\n          firstdraw = week - widx;\n        } else {\n          firstdraw = week - widx + 7;\n        }\n\n        var dayindex = 1;\n        var countday = 30;\n\n        if (array_three.indexof(mouth + 1) > -1) {\n          countday = 30;\n        } else if (array_threeone.indexof(mouth + 1) > -1) {\n          countday = 31;\n        } else {\n          if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0)\n            countday = 29;\n          else countday = 28;\n        }\n\n        var row = 6;\n        // if (7 - firstdraw + 7 * 4 < countday) { //确定表格行数，防止日期绘制不全\n        //     row = 7;\n        //}\n\n        function drawtodaybg(i, j) {\n          rilictx.save();\n\n          rilictx.beginpath();\n          rilictx.strokestyle = "#900";\n          rilictx.arc(\n            45 + i * cardsize * 1.7 + cardsize / 1.18,\n            50 + j * cardsize + cardsize / 2,\n            cardsize / 2 - 10,\n            -math.pi,\n            math.pi * 1\n          );\n          rilictx.stroke();\n          rilictx.closepath();\n\n          rilictx.beginpath();\n          rilictx.arc(\n            45 + i * cardsize * 1.7 + cardsize / 1.18,\n            50 + j * cardsize + cardsize / 2,\n            cardsize / 2 - 9,\n            -math.pi,\n            math.pi * 0.9\n          );\n          rilictx.stroke();\n          rilictx.closepath();\n\n          rilictx.beginpath();\n          rilictx.arc(\n            45 + i * cardsize * 1.7 + cardsize / 1.18,\n            50 + j * cardsize + cardsize / 2,\n            cardsize / 2 - 8,\n            -math.pi,\n            math.pi * 0.8\n          );\n          rilictx.stroke();\n          rilictx.closepath();\n\n          rilictx.beginpath();\n          rilictx.arc(\n            45 + i * cardsize * 1.7 + cardsize / 1.18,\n            50 + j * cardsize + cardsize / 2,\n            cardsize / 2 - 7,\n            -math.pi,\n            math.pi * 0.7\n          );\n          rilictx.stroke();\n          rilictx.closepath();\n\n          rilictx.beginpath();\n          rilictx.arc(\n            45 + i * cardsize * 1.7 + cardsize / 1.18,\n            50 + j * cardsize + cardsize / 2,\n            cardsize / 2 - 6,\n            -math.pi,\n            math.pi * 0.6\n          );\n          rilictx.stroke();\n          rilictx.closepath();\n\n          rilictx.restore();\n        }\n\n        var isnum = /^\\d+(\\d+)?$/;\n\n        function drawdate(txt, i, j) {\n          rilictx.textalign = "center";\n          rilictx.fillstyle = "rgb(69,68,84)";\n          rilictx.font = cardsize / 1.5 + "px impact";\n          var yoffest = 3;\n\n          if ((j == 0 || j == 6) && isnum.test(txt)) {\n            rilictx.fillstyle = "#900";\n          }\n\n          rilictx.filltext(\n            txt.tostring(),\n            45 + j * cardsize * 1.7 + cardsize / 1.18,\n            50 + i * cardsize + (cardsize / 3) * 2 + yoffest\n          );\n\n          if (txt == today) {\n            drawtodaybg(j, i);\n          }\n        }\n\n        rilictx.fillstyle = "rgb(69,68,84)";\n        rilictx.font = "900 26pt simhei";\n        rilictx.textalign = "center";\n        var monthcn = [\n          "一",\n          "二",\n          "三",\n          "四",\n          "五",\n          "六",\n          "七",\n          "八",\n          "九",\n          "十",\n          "十一",\n          "十二",\n        ];\n        var monthen = [\n          " january",\n          "february",\n          "  march",\n          "  april",\n          "   may",\n          "  june",\n          "  july",\n          " august",\n          "september",\n          " october",\n          "november",\n          " december",\n        ];\n\n        if (enmonth) {\n          rilictx.scale(1.1, 1);\n          rilictx.filltext(monthen[mouth], 245, 32);\n          rilictx.resettransform();\n        } else {\n          rilictx.scale(1.1, 1);\n          rilictx.filltext(monthcn[mouth] + "月", 260, 32);\n          rilictx.resettransform();\n\n          rilictx.font = "20pt simhei";\n          rilictx.textalign = "end";\n          rilictx.filltext(today + "日", 520, 38);\n        }\n\n        for (var i = 0; i < row; i++) {\n          for (var j = 0; j < 7; j++) {\n            rilictx.strokerect(\n              45 + j * cardsize * 1.7,\n              50 + i * cardsize,\n              cardsize * 1.7,\n              cardsize\n            );\n          }\n        }\n\n        dayindex = 1;\n\n        for (var i = 0; i < row; i++) {\n          //开始绘制日期数\n          for (var j = 0; j < 7; j++) {\n            if (i == 0) {\n              //表格第一行绘制星期\n              drawdate(array_week[j], i, j);\n              continue;\n            }\n\n            if (i == 1 && j < firstdraw) {\n              //确定1号绘制位置\n              continue;\n            }\n\n            if (dayindex > countday) {\n              //只绘制月份的天数\n              break;\n            }\n\n            drawdate(dayindex++, i, j);\n          }\n        }\n      }\n\n      var riliinterval = setinterval(drawrili, 3600000);\n      drawrili();\n\n      // canvas奇妙的剪切蒙版实现\n      var screenmask = new image();\n      screenmask.src = "/fantasy/screenmask.png";\n\n      var screen = new image();\n      screen.src = "/fantasy/screen.png";\n\n      var iv = setinterval(() => {\n        if (screen.complete && screenmask.complete) {\n          screenimagectx.drawimage(screen, -300, -50, 1280, 720);\n          screenimagectx.globalcompositeoperation = "destination-atop";\n          screenimagectx.drawimage(screenmask, 0, 0);\n          screenimagectx.globalcompositeoperation = "source-over";\n          clearinterval(iv);\n        }\n      }, 14);\n\n      // 奇妙的屏幕大小自适应\n      window.onresize = function () {\n        display.width = window.innerwidth;\n        if (window.innerwidth / window.innerheight > 1.8333333333333) {\n          display.height = (window.innerwidth / 1980) * 1080;\n          // window.scrollto(0, (window.innerheight - 123) / 16);\n        } else {\n          display.height = window.innerheight;\n        }\n      };\n\n      window.onresize();\n\n      // 加载图片\n      var bg = new image();\n      bg.src = "/fantasy/bg.png";\n\n      var mask = new image();\n      mask.src = "/fantasy/mask.png";\n\n      var light = new image();\n      light.src = "/fantasy/light.png";\n\n      var caidai = new image();\n      caidai.src = "/fantasy/caidai.png";\n\n      var two = new image();\n      two.src = "/fantasy/22.png";\n\n      var screenlight = new image();\n      screenlight.src = "/fantasy/screenlight.png";\n\n      var phonelight = new image();\n      phonelight.src = "/fantasy/phonelight.png";\n\n      var phonetext = json.parse(\n        \'[{"time":0,"text":"凌晨啦!"},{"time":6,"text":"早上好!"},{"time":8,"text":"上午好!"},{"time":11,"text":"你吃了吗"},{"time":13,"text":"下午好鸭!"},{"time":16,"text":"傍晚咯!"},{"time":19,"text":"晚安!"}]\'\n      );\n\n      var norili = false;\n      var updatesonginfohandler = -1;\n\n      var data = new array(128);\n      var animdata = new array(128);\n      var soundplaying = false;\n\n      // 奇妙的初始化\n      for (var i = 0; i < 128; i++) {\n        data[i] = animdata[i] = 0;\n      }\n\n      // 奇妙的normalize\n      var peakvalue = 1;\n      if (window.wallpaperregisteraudiolistener) {\n        window.wallpaperregisteraudiolistener(function (audiodata) {\n          var max = 0;\n\n          for (var i = 0; i < 128; i++) {\n            if (audiodata[i] > max) max = audiodata[i];\n          }\n\n          peakvalue = peakvalue * 0.99 + max * 0.01;\n\n          for (i = 0; i < 64; i++) {\n            data[63 - i] = audiodata[i] / peakvalue;\n          }\n\n          for (i = 0; i < 64; i++) {\n            data[127 - i] = audiodata[127 - i];\n          }\n        });\n      } else {\n        var iva;\n        let audio = document.getelementsbyclassname("aplayer-button")[0];\n        if (audio) {\n          audio.onclick = () => {\n            let play = document.getelementsbyclassname("aplayer-play")[0];\n            if (play) {\n              iva = setinterval(() => {\n                for (i = 0; i < 64; i++) {\n                  peakvalue = peakvalue * 0.99 + 1 * 0.01;\n                  data[63 - i] =\n                    ((math.random() * 0.4) / peakvalue) * math.random();\n                }\n                for (i = 0; i < 64; i++) {\n                  data[127 - i] = math.random() * 0.2 * math.random();\n                }\n                // for (var i = 0; i < 128; i++) {\n                //     data[i] = math.random();\n                // }\n              }, 130);\n            } else {\n              clearinterval(iva);\n              for (var i = 0; i < 128; i++) {\n                data[i] = animdata[i] = 0;\n              }\n            }\n          };\n        }\n      }\n\n      // ....\n      function min(a, b) {\n        return a > b ? b : a;\n      }\n\n      function max(a, b) {\n        return a > b ? a : b;\n      }\n\n      // 奇妙的颜色变化\n      var targetcolor = { r: 80, g: 120, b: 169 };\n      var currentcolor = { r: 80, g: 120, b: 169 };\n      var lightcolor = { r: 0, g: 34, b: 77, a: 0 };\n\n      function colortorgb(color) {\n        return (\n          "rgb(" +\n          color.r.tostring() +\n          "," +\n          color.g.tostring() +\n          "," +\n          color.b.tostring() +\n          ")"\n        );\n      }\n\n      function colortorgba(colorwitha) {\n        return (\n          "rgba(" +\n          colorwitha.r.tostring() +\n          "," +\n          colorwitha.g.tostring() +\n          "," +\n          colorwitha.b.tostring() +\n          "," +\n          colorwitha.a.tostring() +\n          ")"\n        );\n      }\n\n      var night = false;\n      var debug = false;\n\n      // canvas的奇妙冒险!\n      function render() {\n        for (var i = 0; i < 128; i++) {\n          animdata[i] += (data[i] - animdata[i]) * 0.3;\n          animdata[i] = min(animdata[i], 1);\n        }\n\n        currentcolor.r += (targetcolor.r - currentcolor.r) * 0.01;\n        currentcolor.r = min(currentcolor.r, 255);\n        currentcolor.r = max(currentcolor.r, 0);\n\n        currentcolor.g += (targetcolor.g - currentcolor.g) * 0.01;\n        currentcolor.g = min(currentcolor.g, 255);\n        currentcolor.g = max(currentcolor.g, 0);\n\n        currentcolor.b += (targetcolor.b - currentcolor.b) * 0.01;\n        currentcolor.b = min(currentcolor.b, 255);\n        currentcolor.b = max(currentcolor.b, 0);\n\n        ctx.clearrect(0, 0, 1980, 1080);\n        ctx.drawimage(bg, 0, 0);\n        ctx.drawimage(mask, 954, 99);\n\n        ctx.fillstyle = "#97adbb"; // 时间的颜色\n        ctx.font = "32pt impact";\n\n        ctx.transform(1, 2.05 * (math.pi / 180), 0, 1, 0, 0);\n\n        var time = new date();\n        ctx.filltext(\n          (time.gethours() < 10 ? "0" : "") +\n            time.gethours().tostring() +\n            ":" +\n            (time.getminutes() < 10 ? "0" : "") +\n            time.getminutes() +\n            ":" +\n            (time.getseconds() < 10 ? "0" : "") +\n            time.getseconds().tostring(),\n          725,\n          318\n        );\n        ctx.resettransform();\n\n        // 日历本\n        ctx.transform(0.9645, 0, 0 * (math.pi / 180), 0.96, 967, 100);\n        ctx.rotate(6 * (math.pi / 180));\n\n        if (!norili) {\n          ctx.drawimage(rili, 0, 0);\n\n          ctx.resettransform();\n\n          ctx.transform(0.9645, 0, 9 * (math.pi / 180), 1, 825, 160);\n          ctx.rotate(7 * (math.pi / 180));\n        }\n\n        targetcolor = { r: 80, g: 120, b: 169 };\n\n        if (night) {\n          targetcolor = { r: 255, g: 75, b: 80 };\n        }\n\n        if (!norili) {\n          ctx.fillstyle = "rgba(0,0,0,0.5)";\n          ctx.fillrect(-10, 320, 650, 2);\n        }\n\n        ctx.fillstyle = colortorgb(currentcolor);\n\n        if (!norili) {\n          for (var i = 32; i < 95; i++)\n            ctx.fillrect(\n              10 * (i - 32),\n              20 + (300 - 300 * animdata[i]),\n              4,\n              300 * animdata[i]\n            );\n        } else\n          for (var i = 32; i < 95; i++)\n            ctx.fillrect(\n              40 + 7.5 * (i - 32),\n              30 + (300 - 300 * animdata[i]),\n              4,\n              300 * animdata[i]\n            );\n\n        ctx.resettransform();\n\n        ctx.globalcompositeoperation = "overlay";\n        ctx.drawimage(light, 971, 197);\n        ctx.globalcompositeoperation = "source-over";\n\n        ctx.drawimage(caidai, 949, 25);\n        ctx.drawimage(two, 1319, 345);\n\n        // 夜间光照\n        if (night && lightcolor.a < 0.7) {\n          lightcolor.a += 0.005;\n          lightcolor.a = min(lightcolor.a, 0.7);\n        } else if (!night) {\n          lightcolor.a -= 0.005;\n          lightcolor.a = max(lightcolor.a, 0.0);\n        }\n\n        if (lightcolor.a > 0) {\n          ctx.globalcompositeoperation = "hard-light";\n          ctx.fillstyle = colortorgba(lightcolor);\n          ctx.fillrect(0, 0, 1980, 1080);\n          ctx.globalcompositeoperation = "source-over";\n\n          ctx.globalalpha = lightcolor.a / 0.7;\n          ctx.drawimage(phonelight, 860, 437);\n          ctx.globalalpha = 1;\n        }\n\n        // 屏幕\n        ctx.drawimage(screenimage, 0, 0);\n        if (lightcolor.a > 0) {\n          ctx.globalalpha = lightcolor.a / 0.7;\n          ctx.drawimage(screenlight, 0, 0);\n          ctx.globalalpha = 1;\n        }\n\n        night = true;\n        var greeting = "凌晨啦!";\n\n        phonetext.foreach((v) => {\n          if (time.gethours() >= v.time) {\n            greeting = v.text;\n          }\n        });\n\n        if (time.gethours() >= 6 && time.gethours() <= 18) {\n          night = false;\n        }\n\n        night = debug ? !night : night;\n\n        // 手机\n        ctx.fillstyle = "#000";\n        ctx.font = "31.02pt simhei";\n\n        ctx.transform(\n          1.0911,\n          -35 * (math.pi / 180),\n          0,\n          0.5868,\n          1132.94,\n          564.07\n        );\n        ctx.rotate(56.5 * (math.pi / 180));\n        ctx.textalign = "center";\n        ctx.fillstyle = "#fff";\n        ctx.filltext(greeting, 135, 100);\n        ctx.textalign = "start";\n        ctx.resettransform();\n\n        displayctx.drawimage(cvs, 0, 0, display.width, display.height);\n        window.requestanimationframe(render);\n      }\n\n      window.requestanimationframe(render);\n    },\n    mountedelement() {\n      var fantasy = document.getelementsbyclassname("fantasy")[0];\n      document.getelementsbyclassname("banner")[0].appendchild(fantasy);\n      // 下面是全局背景图，如果使用，则取 plugins 里以组件名来注册插件\n      // let interval = setinterval(() => {\n      //   let theme = document.getelementsbyclassname("theme-container")[0];\n      //   if (theme) {\n      //     theme.appendchild(fantasy);\n      //   } \n      // }, 100);\n    },\n    clearbannercolor() {\n      let bannercolor = document.getelementsbyclassname("banner-color")[0];\n      if (bannercolor) {\n        bannercolor.parentnode.removechild(bannercolor);\n      }\n    },\n  },\n};\n<\/script>\n\n<style>\n.fantasy {\n  position: fixed;\n  top: 0;\n  height: 100vh;\n  width: 100%;\n  z-index: -9;\n}\n.hidden {\n  display: none;\n}\n#display {\n  margin: auto;\n}\n/* 图片大小 */\n.vdoing-index-class .home-wrapper .banner {\n  margin-top: 0 !important;\n  height: 100vh;\n  background-attachment: fixed !important;\n}\n/* 图片中间的签名和标题位置 */\n.banner-conent {\n  margin-top: 23vh !important;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n\n\n\n# 引入配置\n\n打开 docs/index.md 文档，添加如下内容：\n\n<clientonly>\n  <fantasy />\n</clientonly>\n\n\n1\n2\n3\n\n\n此时你是没有导航栏的透明效果、标题下 desc 的淡入淡出（打印机）效果，这些效果我都放在了大图配置模块里，如果你没有配好大图模块，则从头阅读步骤开始，如果已经配好大图模块，则\n\n<clientonly>\n  <indexbigimg />\n  <fantasy />\n</clientonly>\n\n\n1\n2\n3\n4\n\n\nfantasy 组件的图片会覆盖 indexbigimg 组件的图片，而其他的样式和功能都会保留。\n\n> 我的建议\n\n如果使用我的额外动态图，则把 bgtimecolorarray 数组的内容都改为 transparent，如下：\n\nindeximg: {\n  // ......\n  bgtimecolorarray: [\'transparent\', \'transparent\', \'transparent\', \'transparent\'],   // 第一个是白天的颜色（默认原图），第二个是黄昏的颜色，第三个是晚上的颜色，第四个是深夜的颜色。bgtimecolor 为 true 生效\n  // ......\n}\n\n\n1\n2\n3\n4\n5\n\n\n因为额外动态图自带时间的颜色，不需要额外添加。\n\n\n# 结束语\n\n如果你还有疑惑，可以去我的 github 仓库或者 gitee 仓库查看源码。\n\ngithub：https://github.com/huangguan2001/kele-bingtang.github.io\n\ngitee：https://gitee.com/kele-bingtang/kele-bingtang\n\n如果你有更好的方式，评论区留言告诉我，或者加入 vdoing 主题的 qq 群：694387113。谢谢！',charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"本站 - 代码块隐藏模块",frontmatter:{title:"本站 - 代码块隐藏模块",date:"2022-02-13T19:18:07.000Z",permalink:"/about/website/code-block-hidden/",titleTag:"原创",categories:["关于 - 本站"],tags:["本站"],readingShow:"top"},regularPath:"/80.%E5%85%B3%E4%BA%8E/06.%E5%85%B3%E4%BA%8E%20-%20%E6%9C%AC%E7%AB%99/28.%E6%9C%AC%E7%AB%99%20-%20%E4%BB%A3%E7%A0%81%E5%9D%97%E9%9A%90%E8%97%8F%E6%A8%A1%E5%9D%97.html",relativePath:"80.关于/06.关于 - 本站/28.本站 - 代码块隐藏模块.md",key:"v-76763ca0",path:"/about/website/code-block-hidden/",headers:[{level:2,title:"前言",slug:"前言",normalizedTitle:"前言",charIndex:65},{level:2,title:"前提",slug:"前提",normalizedTitle:"前提",charIndex:71},{level:2,title:"添加箭头图标",slug:"添加箭头图标",normalizedTitle:"添加箭头图标",charIndex:77},{level:2,title:"添加Vue组件",slug:"添加vue组件",normalizedTitle:"添加vue组件",charIndex:87},{level:2,title:"注意",slug:"注意",normalizedTitle:"注意",charIndex:98},{level:2,title:"注册Vue组件",slug:"注册vue组件",normalizedTitle:"注册vue组件",charIndex:104},{level:2,title:"结束语",slug:"结束语",normalizedTitle:"结束语",charIndex:115}],headersStr:"前言 前提 添加箭头图标 添加Vue组件 注意 注册Vue组件 结束语",content:'笔记\n\n一个代码块的代码太多，会占据大量的篇幅，如果能选择性隐藏，页面也许更加好看。\n\n2021-01-11 @村长\n\n\n\n * 前言\n * 前提\n * 添加箭头图标\n * 添加Vue组件\n * 注意\n * 注册Vue组件\n * 结束语\n\n\n\n\n# 前言\n\n目前适用版本是 Vdoing v1.x。\n\n代码块可以隐藏，也可以展开，这和 ::: details 类似，下面是简单的代码块 Demo：\n\npublic class Hello {\n    public static void main(String[] args) {\n        System.out.println("Hello，World");\n    }\n}\n\n\n1\n2\n3\n4\n5\n\n\n看到代码块右边的箭头了吗，点击即可隐藏代码块，再次点击则会展开代码块。\n\n本内容实现并不难，只需三步：\n\n * 添加箭头图标\n * 编写代码块模块的 Vue 组件\n * 全局注册 Vue 组件\n\n实现内容：\n\n * 代码块的隐藏和显示\n\n * 美化代码块的 UI，趋向于 Mac\n\n * 优化代码块语言的显示，因为默认主题的一些语言如 stylus 是不会显示出来。本内容的优化无论代码块语言是什么（如 abc），都会显示出来，如图\n   \n   我的语言不是 Java、PHP、JS、SH，而是 abdedfg\n   \n   \n   1\n   \n\n\n# 前提\n\n本内容重新实现的一键复制功能是基于 vuepress-plugin-one-click-copy 插件（箭头左边），该插件已经内置 vuepress-theme-vdoing 主题，所以无需担心，如果你曾经卸载了该插件，则需要安装回来；如果已经安装，则无需看这一步：\n\nyarn add vuepress-plugin-one-click-copy -D\n\n\n1\n\n\n当然，如果你懂得看下面的源码，则将适配 vuepress-plugin-one-click-copy 插件的代码进行修改，只需要提供其他插件的 class 名进行判断（Vue 组件的 108 - 119 行代码），并自行在 F12 调试，移动到满意的位置。\n\n如果不知道自己是否曾卸载或存在该插件，则前往根目录下的 package.json 文件查看 devDependencies 是否有 vuepress-plugin-one-click-copy 插件。\n\n\n# 添加箭头图标\n\n图标库来自阿里云：https://www.iconfont.cn/。\n\n如果你没有账号，或者觉得添加比较麻烦，就使用我的图标库地址，当你发现图标失效了，就请来这里获取新的地址，如果还没有更新，请在评论区留言。\n\n当然，建议你使用自己的图标库，比较稳定。就像注册一个购物账户，然后添加到购物车即可。\n\n在 docs/.vuepress/config.js（新版是 config.ts）的 head 模块里添加如下内容：\n\n[\'link\', { rel: \'stylesheet\', href: \'//at.alicdn.com/t/font_3114978_qe0b39no76.css\' }],[\'link\', { rel: \'stylesheet\', href: \'//at.alicdn.com/t/font_3114978_qe0b39no76.css\' }],\n\n\n1\n\n\n\n# 添加Vue组件\n\n在 docs/.vuepress/components 目录下创建 Vue 组件：BlockToggle.vue。如果不存在 components 目录，则请创建。\n\n添加如下内容：\n\n<template></template>\n\n<script>\nexport default {\n  mounted() {\n    setTimeout(() => {\n      this.addExpand(40);\n    }, 1000);\n  },\n  watch: {\n    $route(to, from) {\n      if (this.$route.hash == "") {\n        setTimeout(() => {\n          this.addExpand(40);\n        }, 1000);\n      }\n    },\n  },\n  methods: {\n    // 隐藏代码块后，保留 40 的代码块高度\n    addExpand(hiddenHeight = 40) {\n      let modes = document.getElementsByClassName("line-numbers-mode");\n      // 遍历出每一个代码块\n      Array.from(modes).forEach((item) => {\n        // 首先获取 expand 元素\n        let expand = item.getElementsByClassName("expand")[0];\n        // expand 元素不存在，则进入 if 创建\n        if (!expand) {\n          // 获取代码块原来的高度，进行备份\n          let modeHeight = item.offsetHeight;\n          // display:none 的代码块需要额外处理\n          if (\n            modeHeight == 0 && \n            item.parentNode.className != "cardImgListContainer"\n            ) {\n            modeHeight = this.getHiddenElementHight(item);\n          }\n          // modeHeight 比主题多 12，所以减掉，并显示赋值，触发动画过渡效果\n          modeHeight -= 12;\n          item.style.height = modeHeight + "px";\n          // 获取代码块的各个元素\n          let pre = item.getElementsByTagName("pre")[0];\n          let wrapper = item.getElementsByClassName("line-numbers-wrapper")[0];\n          // 创建箭头元素\n          const div = document.createElement("div");\n          div.className = "expand icon-xiangxiajiantou iconfont";\n          // 箭头点击事件\n          div.onclick = () => {\n            // 代码块已经被隐藏，则进入 if 循环，如果没有被隐藏，则进入 else 循环\n            if (parseInt(item.style.height) == hiddenHeight) {\n              div.className = "expand icon-xiangxiajiantou iconfont";\n              item.style.height = modeHeight + "px";\n              setTimeout(() => {\n                pre.style.display = "block";\n                wrapper.style.display = "block";\n              }, 80);\n            } else {\n              div.className = "expand icon-xiangxiajiantou iconfont closed";\n              item.style.height = hiddenHeight + "px";\n              setTimeout(() => {\n                pre.style.display = "none";\n                wrapper.style.display = "none";\n              }, 300);\n            }\n          };\n          item.append(div);\n          item.append(this.addCircle());\n        }\n        // 解决某些代码块的语言不显示在页面上\n        this.getLanguage(item);\n        // 移动一键复制图标到正确的位置\n        let flag = false;\n        let interval = setInterval(() => {\n          flag = this.moveCopyBlock(item);\n          if (flag) {\n            clearInterval(interval);\n          }\n        }, 1000);\n      });\n    },\n    getHiddenElementHight(hiddenElement) {\n      let modeHeight;\n      if (\n        hiddenElement.parentNode.style.display == "none" ||\n        hiddenElement.parentNode.className !=\n          "theme-code-block theme-code-block__active"\n      ) {\n        hiddenElement.parentNode.style.display = "block";\n        modeHeight = hiddenElement.offsetHeight;\n        hiddenElement.parentNode.style.display = "none";\n        // 清除 vuepress 自带的 deetails 多选代码块\n        if (\n          hiddenElement.parentNode.className == "theme-code-block" ||\n          hiddenElement.parentNode.className == "cardListContainer"\n        ) {\n          hiddenElement.parentNode.style.display = "";\n        }\n      }\n      return modeHeight;\n    },\n    // 添加三个圆圈\n    addCircle() {\n      let div = document.createElement("div");\n      div.className = "circle";\n      return div;\n    },\n    // 移动一键复制图标\n    moveCopyBlock(element) {\n      let copyElement = element.getElementsByClassName("code-copy")[0];\n      if (copyElement && copyElement.parentNode != element) {\n        copyElement.parentNode.parentNode.insertBefore(\n          copyElement,\n          copyElement.parentNode\n        );\n        return true;\n      } else {\n        return false;\n      }\n    },\n    // 解决某些代码块的语言不显示在页面上\n    getLanguage(element) {\n      // 动态获取 before 的 content 属性\n      let content = getComputedStyle(element, ":before").getPropertyValue(\n        "content"\n      );\n      // "" 的长度是 2，不是 0，"x" 的长度是 3\n      if (content.length == 2 || content == "" || content == "none") {\n        let language = element.className.substring(\n          "language".length + 1,\n          element.className.indexOf(" ")\n        );\n        element.setAttribute("data-language", language);\n      }\n    },\n  },\n};\n<\/script>\n\n<style>\n/* 代码块元素 */\n.line-numbers-mode {\n  overflow: hidden;\n  transition: height 0.3s;\n  margin-top: 0.85rem;\n}\n.line-numbers-mode::before {\n  content: attr(data-language);\n}\n/* 箭头元素 */\n.expand {\n  width: 16px;\n  height: 16px;\n  cursor: pointer;\n  position: absolute;\n  z-index: 3;\n  top: 0.8em;\n  right: 0.5em;\n  color: rgba(238, 255, 255, 0.8);\n  font-weight: 900;\n  transition: transform 0.3s;\n}\n\n/* 代码块内容 */\ndiv[class*="language-"].line-numbers-mode pre {\n  margin: 30px 0 0.85rem 0;\n}\n/* 代码块的行数 */\ndiv[class*="language-"].line-numbers-mode .line-numbers-wrapper, .highlight-lines {\n  margin-top: 30px;\n}\n/* 箭头关闭后旋转 -90 度 */\n.closed {\n  transform: rotate(90deg) translateY(-3px);\n  transition: all 0.3s;\n}\nli .closed {\n  transform: rotate(90deg) translate(5px, -8px);\n}\n/* 代码块的语言 */\ndiv[class*="language-"]::before {\n  position: absolute;\n  z-index: 3;\n  top: 0.3em;\n  left: 4.7rem;\n  font-size: 1.15em;\n  color: rgba(238, 255, 255, 0.8);\n  text-transform: uppercase;\n  font-weight: bold;\n  width: fit-content;\n}\n/* li 下的代码块的语言和 li 下的箭头 */\nli div[class*="language-"]::before,\nli .expand {\n  margin-top: -4px;\n}\n/* 代码块行数的线条 */\ndiv[class*="language-"].line-numbers-mode::after {\n  margin-top: 35px;\n}\n/* 代码块的三个圆圈颜色 */\n.circle {\n  position: absolute;\n  top: 0.8em;\n  left: 0.9rem;\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  background: #fc625d;\n  -webkit-box-shadow: 20px 0 #fdbc40, 40px 0 #35cd4b;\n  box-shadow: 20px 0 #fdbc40, 40px 0 #35cd4b;\n}\n/* 代码块一键复制图标 */\n.code-copy {\n  position: absolute;\n  top: 0.8rem;\n  right: 2rem;\n  fill: rgba(238, 255, 255, 0.8);\n  opacity: 1;\n}\n.code-copy svg {\n  margin: 0;\n}\n\n/* 如果你浅色模式的代码块背景色是浅灰色，则取消下面的注释使代码生效，如果是黑色，则注释下面的三段代码（我注释了，因为是黑色背景） */\n/* .theme-mode-light .expand {\n  color: #666;\n}\n.theme-mode-light div[class*="language-"]::before {\n  color: #666;\n}\n.theme-mode-light .code-copy {\n  fill: #666;\n} */\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n\n\n第 7 行和第 14 行的参数 40 是隐藏代码块后，保留的代码块高度，40 是默认值。\n\n注意\n\n * 如果浅色模式的代码块背景色是浅灰色，则取消 226 - 234 的注释使代码生效（模板已经取消注释）\n * 如果是黑色，则注释 226 - 234 的代码（我自己的注释了，因为我的代码块是黑色背景）\n * 如果不喜欢代码块的语言变成大写，则注释 188 行的 text-transform: uppercase;\n\n如果你想要你的代码块和我一样是 黑色，则打开 docs/.vuepress/styles/palette.styl 文件，替换掉原来的浅色模式：\n\n.theme-mode-light\n  --bodyBg: #f4f4f4\n  --mainBg: rgba(255,255,255,1)\n  --sidebarBg: rgba(255,255,255,.8)\n  --blurBg: rgba(255,255,255,.9)\n  --customBlockBg: rgba(255,255,255,.9)\n  --textColor: #00323c\n  --textLightenColor: #0085AD\n  --borderColor: rgba(0,0,0,.15)\n  // 代码块浅色主题\n  //--codeBg: #f6f8fa\n  //--codeColor: #24292e\n  //codeThemeLight()\n  // 行高亮颜色，和代码块浅色主题一起使用，一起注释\n  //div[class*="language-"]\n  //  .highlight-lines\n  //    .highlighted\n  //      background-color rgba(200,200,200,.4)\n  //  &.line-numbers-mode\n  //    .highlight-lines .highlighted\n  //      &:before\n  //        background-color rgba(200,200,200,.4)\n  // 代码块深色主题\n  --codeBg: #282C34\n  --codeColor: #D4D4D4\n  codeThemeDark()\n  // 行高亮颜色，和代码块深色主题一起使用，一起注释\n  div[class*="language-"]\n    .highlight-lines\n      .highlighted\n        background-color rgba(0,0,0,.66)\n    &.line-numbers-mode\n      .highlight-lines .highlighted\n        &:before\n          background-color rgba(0,0,0,.66)\n  div[class*="language-"].line-numbers-mode::after  // 代码块的行数和内容分割线颜色\n    border-right 1px solid rgba(0, 0, 0, 0.66)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n\n\n如果你喜欢加粗的 绿色、`` 包裹的英文高亮 abcd、<mark></mark> 包括的 文字高亮、深色模式的颜色（点击右下角的衣服图标，切换深色模式）等等，那么可以参考我的自定义样式模块，左侧的关于本站目录下就能找到。\n\n\n# 注意\n\nvuepress-plugin-one-click-copy 插件在移动端（手机端）失效，因为其自带的隐藏效果原因，这并不是本模块引起，而是本身插件的设计问题。\n\n所以如果觉得移动端也想要支持一键复制，请更换其他插件，并自行修改源码进行适配。\n\n * 低分辨率的电脑，会导致代码的行数与代码不对应（代码行数溢出），这并非本模块原因，还是 VuePress 代码块本身的原因，可能新版本会修复\n\n\n# 注册Vue组件\n\n在 docs/.vuepress/config.js（新版是 config.ts）的 plugins 中添加插件配置。\n\n添加如下内容：\n\nmodule.exports = {\n    plugins: [\n        {\n            name: \'custom-plugins\',\n            globalUIComponents: ["BlockToggle"] // 2.x 版本 globalUIComponents 改名为 clientAppRootComponentFiles\n        }\n    ],\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nimport { UserPlugins } from \'vuepress/config\'\nplugins: <UserPlugins>[\n    [\n    \t{\n        \tname: \'custom-plugins\',\n        \tglobalUIComponents: ["BlockToggle"] // 2.x 版本 globalUIComponents 改名为 clientAppRootComponentFiles\n    \t}\n    ]\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 结束语\n\n如果你还有疑惑，可以去我的 GitHub 仓库或者 Gitee 仓库查看源码。\n\nGitHub：https://github.com/huangguan2001/Kele-Bingtang.github.io\n\nGitee：https://gitee.com/kele-bingtang/Kele-Bingtang\n\n如果你有更好的方式，评论区留言告诉我，或者加入 Vdoing 主题的 QQ 群：694387113。谢谢！',normalizedContent:'笔记\n\n一个代码块的代码太多，会占据大量的篇幅，如果能选择性隐藏，页面也许更加好看。\n\n2021-01-11 @村长\n\n\n\n * 前言\n * 前提\n * 添加箭头图标\n * 添加vue组件\n * 注意\n * 注册vue组件\n * 结束语\n\n\n\n\n# 前言\n\n目前适用版本是 vdoing v1.x。\n\n代码块可以隐藏，也可以展开，这和 ::: details 类似，下面是简单的代码块 demo：\n\npublic class hello {\n    public static void main(string[] args) {\n        system.out.println("hello，world");\n    }\n}\n\n\n1\n2\n3\n4\n5\n\n\n看到代码块右边的箭头了吗，点击即可隐藏代码块，再次点击则会展开代码块。\n\n本内容实现并不难，只需三步：\n\n * 添加箭头图标\n * 编写代码块模块的 vue 组件\n * 全局注册 vue 组件\n\n实现内容：\n\n * 代码块的隐藏和显示\n\n * 美化代码块的 ui，趋向于 mac\n\n * 优化代码块语言的显示，因为默认主题的一些语言如 stylus 是不会显示出来。本内容的优化无论代码块语言是什么（如 abc），都会显示出来，如图\n   \n   我的语言不是 java、php、js、sh，而是 abdedfg\n   \n   \n   1\n   \n\n\n# 前提\n\n本内容重新实现的一键复制功能是基于 vuepress-plugin-one-click-copy 插件（箭头左边），该插件已经内置 vuepress-theme-vdoing 主题，所以无需担心，如果你曾经卸载了该插件，则需要安装回来；如果已经安装，则无需看这一步：\n\nyarn add vuepress-plugin-one-click-copy -d\n\n\n1\n\n\n当然，如果你懂得看下面的源码，则将适配 vuepress-plugin-one-click-copy 插件的代码进行修改，只需要提供其他插件的 class 名进行判断（vue 组件的 108 - 119 行代码），并自行在 f12 调试，移动到满意的位置。\n\n如果不知道自己是否曾卸载或存在该插件，则前往根目录下的 package.json 文件查看 devdependencies 是否有 vuepress-plugin-one-click-copy 插件。\n\n\n# 添加箭头图标\n\n图标库来自阿里云：https://www.iconfont.cn/。\n\n如果你没有账号，或者觉得添加比较麻烦，就使用我的图标库地址，当你发现图标失效了，就请来这里获取新的地址，如果还没有更新，请在评论区留言。\n\n当然，建议你使用自己的图标库，比较稳定。就像注册一个购物账户，然后添加到购物车即可。\n\n在 docs/.vuepress/config.js（新版是 config.ts）的 head 模块里添加如下内容：\n\n[\'link\', { rel: \'stylesheet\', href: \'//at.alicdn.com/t/font_3114978_qe0b39no76.css\' }],[\'link\', { rel: \'stylesheet\', href: \'//at.alicdn.com/t/font_3114978_qe0b39no76.css\' }],\n\n\n1\n\n\n\n# 添加vue组件\n\n在 docs/.vuepress/components 目录下创建 vue 组件：blocktoggle.vue。如果不存在 components 目录，则请创建。\n\n添加如下内容：\n\n<template></template>\n\n<script>\nexport default {\n  mounted() {\n    settimeout(() => {\n      this.addexpand(40);\n    }, 1000);\n  },\n  watch: {\n    $route(to, from) {\n      if (this.$route.hash == "") {\n        settimeout(() => {\n          this.addexpand(40);\n        }, 1000);\n      }\n    },\n  },\n  methods: {\n    // 隐藏代码块后，保留 40 的代码块高度\n    addexpand(hiddenheight = 40) {\n      let modes = document.getelementsbyclassname("line-numbers-mode");\n      // 遍历出每一个代码块\n      array.from(modes).foreach((item) => {\n        // 首先获取 expand 元素\n        let expand = item.getelementsbyclassname("expand")[0];\n        // expand 元素不存在，则进入 if 创建\n        if (!expand) {\n          // 获取代码块原来的高度，进行备份\n          let modeheight = item.offsetheight;\n          // display:none 的代码块需要额外处理\n          if (\n            modeheight == 0 && \n            item.parentnode.classname != "cardimglistcontainer"\n            ) {\n            modeheight = this.gethiddenelementhight(item);\n          }\n          // modeheight 比主题多 12，所以减掉，并显示赋值，触发动画过渡效果\n          modeheight -= 12;\n          item.style.height = modeheight + "px";\n          // 获取代码块的各个元素\n          let pre = item.getelementsbytagname("pre")[0];\n          let wrapper = item.getelementsbyclassname("line-numbers-wrapper")[0];\n          // 创建箭头元素\n          const div = document.createelement("div");\n          div.classname = "expand icon-xiangxiajiantou iconfont";\n          // 箭头点击事件\n          div.onclick = () => {\n            // 代码块已经被隐藏，则进入 if 循环，如果没有被隐藏，则进入 else 循环\n            if (parseint(item.style.height) == hiddenheight) {\n              div.classname = "expand icon-xiangxiajiantou iconfont";\n              item.style.height = modeheight + "px";\n              settimeout(() => {\n                pre.style.display = "block";\n                wrapper.style.display = "block";\n              }, 80);\n            } else {\n              div.classname = "expand icon-xiangxiajiantou iconfont closed";\n              item.style.height = hiddenheight + "px";\n              settimeout(() => {\n                pre.style.display = "none";\n                wrapper.style.display = "none";\n              }, 300);\n            }\n          };\n          item.append(div);\n          item.append(this.addcircle());\n        }\n        // 解决某些代码块的语言不显示在页面上\n        this.getlanguage(item);\n        // 移动一键复制图标到正确的位置\n        let flag = false;\n        let interval = setinterval(() => {\n          flag = this.movecopyblock(item);\n          if (flag) {\n            clearinterval(interval);\n          }\n        }, 1000);\n      });\n    },\n    gethiddenelementhight(hiddenelement) {\n      let modeheight;\n      if (\n        hiddenelement.parentnode.style.display == "none" ||\n        hiddenelement.parentnode.classname !=\n          "theme-code-block theme-code-block__active"\n      ) {\n        hiddenelement.parentnode.style.display = "block";\n        modeheight = hiddenelement.offsetheight;\n        hiddenelement.parentnode.style.display = "none";\n        // 清除 vuepress 自带的 deetails 多选代码块\n        if (\n          hiddenelement.parentnode.classname == "theme-code-block" ||\n          hiddenelement.parentnode.classname == "cardlistcontainer"\n        ) {\n          hiddenelement.parentnode.style.display = "";\n        }\n      }\n      return modeheight;\n    },\n    // 添加三个圆圈\n    addcircle() {\n      let div = document.createelement("div");\n      div.classname = "circle";\n      return div;\n    },\n    // 移动一键复制图标\n    movecopyblock(element) {\n      let copyelement = element.getelementsbyclassname("code-copy")[0];\n      if (copyelement && copyelement.parentnode != element) {\n        copyelement.parentnode.parentnode.insertbefore(\n          copyelement,\n          copyelement.parentnode\n        );\n        return true;\n      } else {\n        return false;\n      }\n    },\n    // 解决某些代码块的语言不显示在页面上\n    getlanguage(element) {\n      // 动态获取 before 的 content 属性\n      let content = getcomputedstyle(element, ":before").getpropertyvalue(\n        "content"\n      );\n      // "" 的长度是 2，不是 0，"x" 的长度是 3\n      if (content.length == 2 || content == "" || content == "none") {\n        let language = element.classname.substring(\n          "language".length + 1,\n          element.classname.indexof(" ")\n        );\n        element.setattribute("data-language", language);\n      }\n    },\n  },\n};\n<\/script>\n\n<style>\n/* 代码块元素 */\n.line-numbers-mode {\n  overflow: hidden;\n  transition: height 0.3s;\n  margin-top: 0.85rem;\n}\n.line-numbers-mode::before {\n  content: attr(data-language);\n}\n/* 箭头元素 */\n.expand {\n  width: 16px;\n  height: 16px;\n  cursor: pointer;\n  position: absolute;\n  z-index: 3;\n  top: 0.8em;\n  right: 0.5em;\n  color: rgba(238, 255, 255, 0.8);\n  font-weight: 900;\n  transition: transform 0.3s;\n}\n\n/* 代码块内容 */\ndiv[class*="language-"].line-numbers-mode pre {\n  margin: 30px 0 0.85rem 0;\n}\n/* 代码块的行数 */\ndiv[class*="language-"].line-numbers-mode .line-numbers-wrapper, .highlight-lines {\n  margin-top: 30px;\n}\n/* 箭头关闭后旋转 -90 度 */\n.closed {\n  transform: rotate(90deg) translatey(-3px);\n  transition: all 0.3s;\n}\nli .closed {\n  transform: rotate(90deg) translate(5px, -8px);\n}\n/* 代码块的语言 */\ndiv[class*="language-"]::before {\n  position: absolute;\n  z-index: 3;\n  top: 0.3em;\n  left: 4.7rem;\n  font-size: 1.15em;\n  color: rgba(238, 255, 255, 0.8);\n  text-transform: uppercase;\n  font-weight: bold;\n  width: fit-content;\n}\n/* li 下的代码块的语言和 li 下的箭头 */\nli div[class*="language-"]::before,\nli .expand {\n  margin-top: -4px;\n}\n/* 代码块行数的线条 */\ndiv[class*="language-"].line-numbers-mode::after {\n  margin-top: 35px;\n}\n/* 代码块的三个圆圈颜色 */\n.circle {\n  position: absolute;\n  top: 0.8em;\n  left: 0.9rem;\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  background: #fc625d;\n  -webkit-box-shadow: 20px 0 #fdbc40, 40px 0 #35cd4b;\n  box-shadow: 20px 0 #fdbc40, 40px 0 #35cd4b;\n}\n/* 代码块一键复制图标 */\n.code-copy {\n  position: absolute;\n  top: 0.8rem;\n  right: 2rem;\n  fill: rgba(238, 255, 255, 0.8);\n  opacity: 1;\n}\n.code-copy svg {\n  margin: 0;\n}\n\n/* 如果你浅色模式的代码块背景色是浅灰色，则取消下面的注释使代码生效，如果是黑色，则注释下面的三段代码（我注释了，因为是黑色背景） */\n/* .theme-mode-light .expand {\n  color: #666;\n}\n.theme-mode-light div[class*="language-"]::before {\n  color: #666;\n}\n.theme-mode-light .code-copy {\n  fill: #666;\n} */\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n\n\n第 7 行和第 14 行的参数 40 是隐藏代码块后，保留的代码块高度，40 是默认值。\n\n注意\n\n * 如果浅色模式的代码块背景色是浅灰色，则取消 226 - 234 的注释使代码生效（模板已经取消注释）\n * 如果是黑色，则注释 226 - 234 的代码（我自己的注释了，因为我的代码块是黑色背景）\n * 如果不喜欢代码块的语言变成大写，则注释 188 行的 text-transform: uppercase;\n\n如果你想要你的代码块和我一样是 黑色，则打开 docs/.vuepress/styles/palette.styl 文件，替换掉原来的浅色模式：\n\n.theme-mode-light\n  --bodybg: #f4f4f4\n  --mainbg: rgba(255,255,255,1)\n  --sidebarbg: rgba(255,255,255,.8)\n  --blurbg: rgba(255,255,255,.9)\n  --customblockbg: rgba(255,255,255,.9)\n  --textcolor: #00323c\n  --textlightencolor: #0085ad\n  --bordercolor: rgba(0,0,0,.15)\n  // 代码块浅色主题\n  //--codebg: #f6f8fa\n  //--codecolor: #24292e\n  //codethemelight()\n  // 行高亮颜色，和代码块浅色主题一起使用，一起注释\n  //div[class*="language-"]\n  //  .highlight-lines\n  //    .highlighted\n  //      background-color rgba(200,200,200,.4)\n  //  &.line-numbers-mode\n  //    .highlight-lines .highlighted\n  //      &:before\n  //        background-color rgba(200,200,200,.4)\n  // 代码块深色主题\n  --codebg: #282c34\n  --codecolor: #d4d4d4\n  codethemedark()\n  // 行高亮颜色，和代码块深色主题一起使用，一起注释\n  div[class*="language-"]\n    .highlight-lines\n      .highlighted\n        background-color rgba(0,0,0,.66)\n    &.line-numbers-mode\n      .highlight-lines .highlighted\n        &:before\n          background-color rgba(0,0,0,.66)\n  div[class*="language-"].line-numbers-mode::after  // 代码块的行数和内容分割线颜色\n    border-right 1px solid rgba(0, 0, 0, 0.66)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n\n\n如果你喜欢加粗的 绿色、`` 包裹的英文高亮 abcd、<mark></mark> 包括的 文字高亮、深色模式的颜色（点击右下角的衣服图标，切换深色模式）等等，那么可以参考我的自定义样式模块，左侧的关于本站目录下就能找到。\n\n\n# 注意\n\nvuepress-plugin-one-click-copy 插件在移动端（手机端）失效，因为其自带的隐藏效果原因，这并不是本模块引起，而是本身插件的设计问题。\n\n所以如果觉得移动端也想要支持一键复制，请更换其他插件，并自行修改源码进行适配。\n\n * 低分辨率的电脑，会导致代码的行数与代码不对应（代码行数溢出），这并非本模块原因，还是 vuepress 代码块本身的原因，可能新版本会修复\n\n\n# 注册vue组件\n\n在 docs/.vuepress/config.js（新版是 config.ts）的 plugins 中添加插件配置。\n\n添加如下内容：\n\nmodule.exports = {\n    plugins: [\n        {\n            name: \'custom-plugins\',\n            globaluicomponents: ["blocktoggle"] // 2.x 版本 globaluicomponents 改名为 clientapprootcomponentfiles\n        }\n    ],\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nimport { userplugins } from \'vuepress/config\'\nplugins: <userplugins>[\n    [\n    \t{\n        \tname: \'custom-plugins\',\n        \tglobaluicomponents: ["blocktoggle"] // 2.x 版本 globaluicomponents 改名为 clientapprootcomponentfiles\n    \t}\n    ]\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 结束语\n\n如果你还有疑惑，可以去我的 github 仓库或者 gitee 仓库查看源码。\n\ngithub：https://github.com/huangguan2001/kele-bingtang.github.io\n\ngitee：https://gitee.com/kele-bingtang/kele-bingtang\n\n如果你有更好的方式，评论区留言告诉我，或者加入 vdoing 主题的 qq 群：694387113。谢谢！',charsets:{cjk:!0},lastUpdated:"2022/04/18, 13:57:13"},{title:"本站 - 全局时间提示模块",frontmatter:{title:"本站 - 全局时间提示模块",date:"2022-02-13T21:26:37.000Z",permalink:"/about/website/global-tip/",titleTag:"原创",categories:["关于 - 本站"],tags:["本站"],readingShow:"top"},regularPath:"/80.%E5%85%B3%E4%BA%8E/06.%E5%85%B3%E4%BA%8E%20-%20%E6%9C%AC%E7%AB%99/30.%E6%9C%AC%E7%AB%99%20-%20%E5%85%A8%E5%B1%80%E6%97%B6%E9%97%B4%E6%8F%90%E7%A4%BA%E6%A8%A1%E5%9D%97.html",relativePath:"80.关于/06.关于 - 本站/30.本站 - 全局时间提示模块.md",key:"v-546f6261",path:"/about/website/global-tip/",headers:[{level:2,title:"前言",slug:"前言",normalizedTitle:"前言",charIndex:59},{level:2,title:"添加消息图标",slug:"添加消息图标",normalizedTitle:"添加消息图标",charIndex:65},{level:2,title:"添加Vue组件",slug:"添加vue组件",normalizedTitle:"添加vue组件",charIndex:75},{level:2,title:"注册Vue组件",slug:"注册vue组件",normalizedTitle:"注册vue组件",charIndex:86},{level:2,title:"结束语",slug:"结束语",normalizedTitle:"结束语",charIndex:97}],headersStr:"前言 添加消息图标 添加Vue组件 注册Vue组件 结束语",content:'笔记\n\n这只是一个小功能，无论进入本站的任意网页，都会有温馨的时间提示。\n\n2021-01-11 @村长\n\n\n\n * 前言\n * 添加消息图标\n * 添加Vue组件\n * 注册Vue组件\n * 结束语\n\n\n\n\n# 前言\n\n目前适用版本是 Vdoing v1.x。\n\n当你进入本站任意网页时，都会有不同的时间提示，时间提示分为五种：早上、下午、黄昏、晚上、深夜。\n\n本内容步骤分为三步：\n\n * 添加时间消息提示的图标\n * 编写全局时间提示的 Vue 组件\n * 全局注册 Vue 组件\n\n\n# 添加消息图标\n\n图标库来自阿里云：https://www.iconfont.cn/。\n\n如果你没有账号，或者觉得添加比较麻烦，就使用我的图标库地址，当你发现图标失效了，就请来这里获取新的地址，如果还没有更新，请在评论区留言。\n\n当然，建议你使用自己的图标库，比较稳定。\n\n在 docs/.vuepress/config.js（新版是 config.ts）的 head 模块里添加如下内容：\n\n[\'link\', { rel: \'stylesheet\', href: \'//at.alicdn.com/t/font_3114978_qe0b39no76.css\' }],\n\n\n1\n\n\n\n# 添加Vue组件\n\n在 docs/.vuepress/components 目录下创建 Vue 组件：GlobalTip.vue。如果不存在 components 目录，则请创建。\n\n添加如下内容：\n\n<template></template>\n\n<script>\nconst indexTip = false;  // 首页是否开启时间消息提示，默认 false。因为首页大图模块已经内置时间消息提示，所以我不需要开启。\nexport default {\n  mounted() {\n    // 首页不弹出消息提示，因为首页大图模块已经内置首页的消息提示\n    if (indexTip || this.$route.path != "/") {\n      this.bgTimeColor();\n    }\n  },\n  watch: {\n    $route(to, from) {\n      let gloablTip = document.getElementsByClassName("gloablTip");\n      // 如果已经存在一个消息提示，则不会重新弹出，除非消息提示已经消失\n      if(gloablTip.length <= 0){\n        if (indexTip || (this.$route.path != "/" && this.$route.hash == "")) {\n          this.bgTimeColor();\n        }\n      }\n    },\n  },\n  methods: {\n    bgTimeColor() {\n      var hours = new Date().getHours();\n      var minutes = new Date().getMinutes();\n      var seconds = new Date().getSeconds();\n      hours = hours < 10 ? "0" + hours : hours;\n      minutes = minutes < 10 ? "0" + minutes : minutes;\n      seconds = seconds < 10 ? "0" + seconds : seconds;\n      let div = document.createElement("div");\n      div.className = "banner-color";\n      if (hours >= 6 && hours < 11) {\n        addTip(\n          `早上好呀~~，现在是 ${hours}:${minutes}:${seconds}，吃早餐了吗？😊🤭`,\n          "info",\n          50,\n          4000\n        );\n      } else if (hours >= 12 && hours <= 16) {\n        addTip(\n          `下午好呀~~，现在是 ${hours}:${minutes}:${seconds}，繁忙的下午也要适当休息哦🥤🏀~~`,\n          "info",\n          50,\n          4000\n        );\n      } else if (hours >= 16 && hours <= 19) {\n        addTip(\n          `到黄昏了~~，现在是 ${hours}:${minutes}:${seconds}，该准备吃饭啦🥗🍖~~`,\n          "info",\n          50,\n          4000\n        );\n      } else if (hours >= 19 && hours < 24) {\n        addTip(\n          `晚上好呀~~，现在是 ${hours}:${minutes}:${seconds}，该准备洗漱睡觉啦🥱😪~~`,\n          "info",\n          50,\n          4000\n        );\n      } else if (hours >= 0 && hours < 6) {\n        addTip(\n          `别再熬夜了~~，现在是 ${hours}:${minutes}:${seconds}，早点睡吧，让我们一起欣赏早上的太阳~~😇🛏`,\n          "info",\n          50,\n          4000\n        );\n      }\n      document.body.append(div);\n    },\n  },\n};\n\n/**\n * 添加消息提示\n * content：内容\n * type：弹窗类型（tip、success、warning、danger）\n * startHeight：第一个弹窗的高度，默认 50\n * dieTime：弹窗消失时间（毫秒），默认 3000 毫秒\n */\nfunction addTip(content, type, startHeight = 50, dieTime = 3000) {\n  var tip = document.querySelectorAll(".global-tip");\n  var time = new Date().getTime();\n  // 获取最后消息提示元素的高度\n  var top = tip.length == 0 ? 0 : tip[tip.length - 1].getAttribute("data-top");\n  // 如果产生两个以上的消息提示，则出现在上一个提示的下面，即高度添加，否则默认 50\n  var lastTop =\n    parseInt(top) +\n    (tip.length != 0 ? tip[tip.length - 1].offsetHeight + 17 : startHeight);\n\n  let div = document.createElement("div");\n  div.className = `global-tip tip-${type} ${time} gloablTip`;\n  div.style.top = parseInt(top) + "px";\n  div.setAttribute("data-top", lastTop);\n  if (type == "info" || type == 1) {\n    div.innerHTML = `<i class="iconfont icon-info icon"></i><p class="tip-info-content">${content}</p>`;\n  } else if (type == "success" || type == 2) {\n    div.innerHTML = `<i class="iconfont icon-dagouyouquan icon"></i><p class="tip-success-content">${content}</p>`;\n  } else if (type == "danger" || type == 3) {\n    div.innerHTML = `<i class="iconfont icon-cuowu icon"></i><p class="tip-danger-content">${content}</p>`;\n  } else if (type == "warning" || type == 4) {\n    div.innerHTML = `<i class="iconfont icon-gantanhao icon"></i><p class="tip-warning-content">${content}</p>`;\n  }\n  document.body.appendChild(div);\n\n  let timeTip = document.getElementsByClassName(time)[0];\n  setTimeout(() => {\n    timeTip.style.top = parseInt(lastTop) + "px";\n    timeTip.style.opacity = "1";\n  }, 10);\n\n  // 消息提示 dieTime 秒后隐藏并被删除\n  setTimeout(() => {\n    timeTip.style.top = "0px";\n    timeTip.style.opacity = "0";\n\n    // 下面的所有元素回到各自曾经的出发点\n    var allTipElement = nextAllTipElement(timeTip);\n    for (let i = 0; i < allTipElement.length; i++) {\n      var next = allTipElement[i];\n      var top =\n        parseInt(next.getAttribute("data-top")) - next.offsetHeight - 17;\n      next.setAttribute("data-top", top);\n      next.style.top = top + "px";\n    }\n    setTimeout(() => {\n      timeTip.remove();\n    }, 500);\n  }, dieTime);\n}\n/**\n * 获取后面的兄弟元素\n */\nfunction nextAllTipElement(elem) {\n  var r = [];\n  var n = elem;\n  for (; n; n = n.nextSibling) {\n    if (n.nodeType === 1 && n !== elem) {\n      r.push(n);\n    }\n  }\n  return r;\n}\n<\/script>\n\n<style>\n/* 提示框元素 */\n.global-tip {\n  position: fixed;\n  display: flex;\n  top: -10px;\n  left: 50%;\n  opacity: 0;\n  min-width: 320px;\n  transform: translateX(-50%);\n  transition: opacity 0.3s linear, top 0.4s, transform 0.4s;\n  z-index: 99999;\n  padding: 15px 15px 15px 20px;\n  border: 1px solid #ebeef5;\n  border-radius: 4px;\n  grid-row: 1;\n  line-height: 17px;\n}\n\n.global-tip p {\n  line-height: 17px;\n  margin: 0;\n  font-size: 14px;\n}\n\n.icon {\n  margin-right: 10px;\n  line-height: 17px;\n}\n\n.tip-success {\n  color: #67c23a;\n  background-color: #f0f9eb;\n  border-color: #e1f3d8;\n}\n\n.tip-success .tip-success-content {\n  color: #67c23a;\n}\n\n.tip-danger {\n  color: #f56c6c;\n  background-color: #fef0f0;\n  border-color: #fde2e2;\n}\n\n.tip-danger .tip-danger-content {\n  color: #f56c6c;\n}\n\n.tip-info {\n  background-color: #edf2fc;\n  border-color: #ebeef5;\n}\n\n.tip-info .tip-info-content {\n  color: #909399;\n}\n\n.tip-warning {\n  color: #e6a23c;\n  background-color: #fdf6ec;\n  border-color: #faecd8;\n}\n\n.tip-warning .tip-warning-content {\n  margin: 0;\n  color: #e6a23c;\n  line-height: 21px;\n  font-size: 14px;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n\n\n代码默认不开启首页的时间提示，也就是除了首页，其他网页都会提示。因为我配置了首页大图模块，该模块已经内置时间提示，所以如果你没有配置首页大图模块，则在第 4 行改为 true。\n\n35、42、49、56、63 行是不同时间的时间提示，更加自己的喜好进行修改。\n\n36、43、50、57、64 行默认时间提示的背景色是 info（灰色），还有其他的三种：success（绿色）、warning（黄色）、danger（红色）。\n\n\n# 注册Vue组件\n\n在 docs/.vuepress/config.js（新版是 config.ts）的 plugins 中添加插件配置。\n\nmodule.exports = {\n    plugins: [\n        {\n            name: \'custom-plugins\',\n            globalUIComponents: ["GlobalTip"] // 2.x 版本 globalUIComponents 改名为 clientAppRootComponentFiles\n        }\n    ],\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nimport { UserPlugins } from \'vuepress/config\'\nplugins: <UserPlugins>[\n    [\n    \t{\n        \tname: \'custom-plugins\',\n        \tglobalUIComponents: ["GlobalTip"] // 2.x 版本 globalUIComponents 改名为 clientAppRootComponentFiles\n    \t}\n    ]\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 结束语\n\n如果你还有疑惑，可以去我的 GitHub 仓库或者 Gitee 仓库查看源码。\n\nGitHub：https://github.com/huangguan2001/Kele-Bingtang.github.io\n\nGitee：https://gitee.com/kele-bingtang/Kele-Bingtang\n\n如果你有更好的方式，评论区留言告诉我，或者加入 Vdoing 主题的 QQ 群：694387113。谢谢！',normalizedContent:'笔记\n\n这只是一个小功能，无论进入本站的任意网页，都会有温馨的时间提示。\n\n2021-01-11 @村长\n\n\n\n * 前言\n * 添加消息图标\n * 添加vue组件\n * 注册vue组件\n * 结束语\n\n\n\n\n# 前言\n\n目前适用版本是 vdoing v1.x。\n\n当你进入本站任意网页时，都会有不同的时间提示，时间提示分为五种：早上、下午、黄昏、晚上、深夜。\n\n本内容步骤分为三步：\n\n * 添加时间消息提示的图标\n * 编写全局时间提示的 vue 组件\n * 全局注册 vue 组件\n\n\n# 添加消息图标\n\n图标库来自阿里云：https://www.iconfont.cn/。\n\n如果你没有账号，或者觉得添加比较麻烦，就使用我的图标库地址，当你发现图标失效了，就请来这里获取新的地址，如果还没有更新，请在评论区留言。\n\n当然，建议你使用自己的图标库，比较稳定。\n\n在 docs/.vuepress/config.js（新版是 config.ts）的 head 模块里添加如下内容：\n\n[\'link\', { rel: \'stylesheet\', href: \'//at.alicdn.com/t/font_3114978_qe0b39no76.css\' }],\n\n\n1\n\n\n\n# 添加vue组件\n\n在 docs/.vuepress/components 目录下创建 vue 组件：globaltip.vue。如果不存在 components 目录，则请创建。\n\n添加如下内容：\n\n<template></template>\n\n<script>\nconst indextip = false;  // 首页是否开启时间消息提示，默认 false。因为首页大图模块已经内置时间消息提示，所以我不需要开启。\nexport default {\n  mounted() {\n    // 首页不弹出消息提示，因为首页大图模块已经内置首页的消息提示\n    if (indextip || this.$route.path != "/") {\n      this.bgtimecolor();\n    }\n  },\n  watch: {\n    $route(to, from) {\n      let gloabltip = document.getelementsbyclassname("gloabltip");\n      // 如果已经存在一个消息提示，则不会重新弹出，除非消息提示已经消失\n      if(gloabltip.length <= 0){\n        if (indextip || (this.$route.path != "/" && this.$route.hash == "")) {\n          this.bgtimecolor();\n        }\n      }\n    },\n  },\n  methods: {\n    bgtimecolor() {\n      var hours = new date().gethours();\n      var minutes = new date().getminutes();\n      var seconds = new date().getseconds();\n      hours = hours < 10 ? "0" + hours : hours;\n      minutes = minutes < 10 ? "0" + minutes : minutes;\n      seconds = seconds < 10 ? "0" + seconds : seconds;\n      let div = document.createelement("div");\n      div.classname = "banner-color";\n      if (hours >= 6 && hours < 11) {\n        addtip(\n          `早上好呀~~，现在是 ${hours}:${minutes}:${seconds}，吃早餐了吗？😊🤭`,\n          "info",\n          50,\n          4000\n        );\n      } else if (hours >= 12 && hours <= 16) {\n        addtip(\n          `下午好呀~~，现在是 ${hours}:${minutes}:${seconds}，繁忙的下午也要适当休息哦🥤🏀~~`,\n          "info",\n          50,\n          4000\n        );\n      } else if (hours >= 16 && hours <= 19) {\n        addtip(\n          `到黄昏了~~，现在是 ${hours}:${minutes}:${seconds}，该准备吃饭啦🥗🍖~~`,\n          "info",\n          50,\n          4000\n        );\n      } else if (hours >= 19 && hours < 24) {\n        addtip(\n          `晚上好呀~~，现在是 ${hours}:${minutes}:${seconds}，该准备洗漱睡觉啦🥱😪~~`,\n          "info",\n          50,\n          4000\n        );\n      } else if (hours >= 0 && hours < 6) {\n        addtip(\n          `别再熬夜了~~，现在是 ${hours}:${minutes}:${seconds}，早点睡吧，让我们一起欣赏早上的太阳~~😇🛏`,\n          "info",\n          50,\n          4000\n        );\n      }\n      document.body.append(div);\n    },\n  },\n};\n\n/**\n * 添加消息提示\n * content：内容\n * type：弹窗类型（tip、success、warning、danger）\n * startheight：第一个弹窗的高度，默认 50\n * dietime：弹窗消失时间（毫秒），默认 3000 毫秒\n */\nfunction addtip(content, type, startheight = 50, dietime = 3000) {\n  var tip = document.queryselectorall(".global-tip");\n  var time = new date().gettime();\n  // 获取最后消息提示元素的高度\n  var top = tip.length == 0 ? 0 : tip[tip.length - 1].getattribute("data-top");\n  // 如果产生两个以上的消息提示，则出现在上一个提示的下面，即高度添加，否则默认 50\n  var lasttop =\n    parseint(top) +\n    (tip.length != 0 ? tip[tip.length - 1].offsetheight + 17 : startheight);\n\n  let div = document.createelement("div");\n  div.classname = `global-tip tip-${type} ${time} gloabltip`;\n  div.style.top = parseint(top) + "px";\n  div.setattribute("data-top", lasttop);\n  if (type == "info" || type == 1) {\n    div.innerhtml = `<i class="iconfont icon-info icon"></i><p class="tip-info-content">${content}</p>`;\n  } else if (type == "success" || type == 2) {\n    div.innerhtml = `<i class="iconfont icon-dagouyouquan icon"></i><p class="tip-success-content">${content}</p>`;\n  } else if (type == "danger" || type == 3) {\n    div.innerhtml = `<i class="iconfont icon-cuowu icon"></i><p class="tip-danger-content">${content}</p>`;\n  } else if (type == "warning" || type == 4) {\n    div.innerhtml = `<i class="iconfont icon-gantanhao icon"></i><p class="tip-warning-content">${content}</p>`;\n  }\n  document.body.appendchild(div);\n\n  let timetip = document.getelementsbyclassname(time)[0];\n  settimeout(() => {\n    timetip.style.top = parseint(lasttop) + "px";\n    timetip.style.opacity = "1";\n  }, 10);\n\n  // 消息提示 dietime 秒后隐藏并被删除\n  settimeout(() => {\n    timetip.style.top = "0px";\n    timetip.style.opacity = "0";\n\n    // 下面的所有元素回到各自曾经的出发点\n    var alltipelement = nextalltipelement(timetip);\n    for (let i = 0; i < alltipelement.length; i++) {\n      var next = alltipelement[i];\n      var top =\n        parseint(next.getattribute("data-top")) - next.offsetheight - 17;\n      next.setattribute("data-top", top);\n      next.style.top = top + "px";\n    }\n    settimeout(() => {\n      timetip.remove();\n    }, 500);\n  }, dietime);\n}\n/**\n * 获取后面的兄弟元素\n */\nfunction nextalltipelement(elem) {\n  var r = [];\n  var n = elem;\n  for (; n; n = n.nextsibling) {\n    if (n.nodetype === 1 && n !== elem) {\n      r.push(n);\n    }\n  }\n  return r;\n}\n<\/script>\n\n<style>\n/* 提示框元素 */\n.global-tip {\n  position: fixed;\n  display: flex;\n  top: -10px;\n  left: 50%;\n  opacity: 0;\n  min-width: 320px;\n  transform: translatex(-50%);\n  transition: opacity 0.3s linear, top 0.4s, transform 0.4s;\n  z-index: 99999;\n  padding: 15px 15px 15px 20px;\n  border: 1px solid #ebeef5;\n  border-radius: 4px;\n  grid-row: 1;\n  line-height: 17px;\n}\n\n.global-tip p {\n  line-height: 17px;\n  margin: 0;\n  font-size: 14px;\n}\n\n.icon {\n  margin-right: 10px;\n  line-height: 17px;\n}\n\n.tip-success {\n  color: #67c23a;\n  background-color: #f0f9eb;\n  border-color: #e1f3d8;\n}\n\n.tip-success .tip-success-content {\n  color: #67c23a;\n}\n\n.tip-danger {\n  color: #f56c6c;\n  background-color: #fef0f0;\n  border-color: #fde2e2;\n}\n\n.tip-danger .tip-danger-content {\n  color: #f56c6c;\n}\n\n.tip-info {\n  background-color: #edf2fc;\n  border-color: #ebeef5;\n}\n\n.tip-info .tip-info-content {\n  color: #909399;\n}\n\n.tip-warning {\n  color: #e6a23c;\n  background-color: #fdf6ec;\n  border-color: #faecd8;\n}\n\n.tip-warning .tip-warning-content {\n  margin: 0;\n  color: #e6a23c;\n  line-height: 21px;\n  font-size: 14px;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n\n\n代码默认不开启首页的时间提示，也就是除了首页，其他网页都会提示。因为我配置了首页大图模块，该模块已经内置时间提示，所以如果你没有配置首页大图模块，则在第 4 行改为 true。\n\n35、42、49、56、63 行是不同时间的时间提示，更加自己的喜好进行修改。\n\n36、43、50、57、64 行默认时间提示的背景色是 info（灰色），还有其他的三种：success（绿色）、warning（黄色）、danger（红色）。\n\n\n# 注册vue组件\n\n在 docs/.vuepress/config.js（新版是 config.ts）的 plugins 中添加插件配置。\n\nmodule.exports = {\n    plugins: [\n        {\n            name: \'custom-plugins\',\n            globaluicomponents: ["globaltip"] // 2.x 版本 globaluicomponents 改名为 clientapprootcomponentfiles\n        }\n    ],\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nimport { userplugins } from \'vuepress/config\'\nplugins: <userplugins>[\n    [\n    \t{\n        \tname: \'custom-plugins\',\n        \tglobaluicomponents: ["globaltip"] // 2.x 版本 globaluicomponents 改名为 clientapprootcomponentfiles\n    \t}\n    ]\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 结束语\n\n如果你还有疑惑，可以去我的 github 仓库或者 gitee 仓库查看源码。\n\ngithub：https://github.com/huangguan2001/kele-bingtang.github.io\n\ngitee：https://gitee.com/kele-bingtang/kele-bingtang\n\n如果你有更好的方式，评论区留言告诉我，或者加入 vdoing 主题的 qq 群：694387113。谢谢！',charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"首页 - 下载站点",frontmatter:{title:"首页 - 下载站点",date:"2021-12-14T21:43:11.000Z",permalink:"/about/index/download/",titleTag:"原创",categories:["关于 - 首页"],tags:["首页"],readingShow:"top"},regularPath:"/80.%E5%85%B3%E4%BA%8E/08.%E5%85%B3%E4%BA%8E%20-%20%E9%A6%96%E9%A1%B5/04.%E9%A6%96%E9%A1%B5%20-%20%E4%B8%8B%E8%BD%BD%E7%AB%99%E7%82%B9.html",relativePath:"80.关于/08.关于 - 首页/04.首页 - 下载站点.md",key:"v-1afd471e",path:"/about/index/download/",headers:[{level:2,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:60},{level:2,title:"第三方模块",slug:"第三方模块",normalizedTitle:"第三方模块",charIndex:102}],headersStr:"介绍 第三方模块",content:"笔记\n\n首页的下载站点是基于 Nginx 提供的，但是 Nginx 自带的下载站点不是特别好看，比较「拥挤」，所以本内容介绍我的下载站点如何优化。\n\n2021-12-14 @村长\n\n\n\n * 介绍\n * 第三方模块\n\n\n\n\n# 介绍\n\n如果还不懂什么是下载站点，请看我的下载站点：https://www.youngkbt.cn/download/。\n\n看了我的下载站点，你会发现和 Nginx 自带的样式有些不一样，嗯？Nginx 自带的下载站点长啥样？请看 Nginx - 站点与认证。\n\n下载站点，就是能够下载东西的网页。其实设计并没有多难，利用第三方模块，就可以实现上方效果。\n\n本下载站点基于 Nginx 搭建的，没有 Nginx 的支持，本下载站点将会无效。\n\n\n# 第三方模块\n\n首先需要实现 Nginx 自带的下载站点，了解这个后方能利用第三方模块进行美化，如果你不了解什么是模块，就认为这叫做插件。\n\n我使用的是 ngx-fancyindex 模块，这里提供下载地址：\n\n * GitHub 地址：https://github.com/aperezdc/ngx-fancyindex\n\n * 版本选择地址：https://github.com/aperezdc/ngx-fancyindex/releases\n\n * 完整版下载地址：https://github.com/aperezdc/ngx-fancyindex/archive/master.zip\n\n * 我的下载站点下载地址：https://www.youngkbt.cn/download/dark/网站源码/，找到 ngx-fancyindex-0.5.2.tar.xz 进行下载\n\n下载后，放到服务器的某个路径下，然后需要重新编译安装 Nginx，也就是说，你要备份好你之前的配置文件、静态页面目录、日志文件目录。\n\n如果你试过 Nginx 的源码安装，那么一定不陌生 ./configure 来编译，如果不知道如何安装，请看 Nginx - 环境准备。\n\n进入 Nginx 的源码目录，然后执行下方命令：\n\n./configure ...... --add-module=../ngx-fancyindex/\n\nmake && make install\n\n\n1\n2\n3\n\n\n其中 ...... 是其他的模块（插件），../ 代表上一级目录，如果你放的路径没有与 Nginx 的源码处于一个目录，则根据你的路径进行修改。\n\n进入 Nginx 配置文件配置如下内容：\n\nlocation /download{\n    root /usr/local/openresty/nginx/html; # 指定目录所在路径\n    fancyindex on; # 使用fancyindex\n    fancyindex_exact_size off; # 不显示精确大小\n}\n\n\n1\n2\n3\n4\n5\n\n\nroot 指定存放软件的目录，我的是在 /usr/local/openresty/nginx/html 目录里，该目录就是访问我的下载站点看到的根目录\n\n\n\n此时访问 /download，就看看到如下效果\n\n\n\n此时已经实现了这个第三方模块带来的效果。\n\n当然，你会发现这个页面仅仅是我下载站点的红系主题，因为我使用了主题 Nginx-Fancyindex-Theme，这个主题有两种模式，分别为亮系主题和暗系主题，加上红系主题就是三个主题。\n\n下载地址：https://github.com/lanffy/Nginx-Fancyindex-Theme/\n\n不知道如何下载？使用 git clone 指令：\n\ngit clone https://github.com/lanffy/Nginx-Fancyindex-Theme/\n\n\n1\n\n\n下载后，放在 Nginx 的静态页面 html 目录里\n\nmv /opt/Nginx-Fancyindex-Theme /usr/local/nginx/html/\n\n\n1\n\n\n然后在原来的配置文件修改内容：\n\nlocation /download{\n    root /usr/local/openresty/nginx/html; # 指定目录所在路径\n    include /usr/local/nginx/html//Nginx-Fancyindex-Theme/fancyindex.conf; # 主题的配置文件\n}\n\n\n1\n2\n3\n4\n\n\n引用 Nginx-Fancyindex-Theme 里的 fancyindex.conf 配置文件即可实现亮系主题，如果你不喜欢放在 Nginx 的静态页面 html 目录里，那么上方内容也要修改成主题配置文件的路径。\n\n如果想要暗系主题，则修改 fancyindex.conf 的内容，注释掉亮系主题的引入（fancyindex_header 和 fancyindex_footer），加入暗系主题的引用（fancyindex_header 和 fancyindex_footer）。\n\n此时主题已经完全实现，但是你会发现我的下载站点有些不一样，因为我稍微修改了一些内容：\n\n * 三个主题的可切换\n\n * 修改 File Name、File Size、Date\n\n * 修改 Date 的月份英文为中文\n\n * 颜色突出，字体修改\n\n如果你喜欢我的下载站点，这里提供我的源码地址：https://www.youngkbt.cn/download/dark/网站源码/，找到 myNginx-Theme.tar.gz 进行下载。\n\n下载后，解压到静态文件 html 目录下，然后在配置文件填入内容：\n\nlocation /download/light {\n        alias  /usr/local/openresty/nginx/html/download;\n        # 以这些后缀的文件点击后为下载，注释掉则 txt 等文件是在网页打开并查看内容\n        # if ($request_filename ~* ^.*?\\.(txt|doc|pdf|rar|gz|zip|docx|exe|xlsx|ppt|pptx|conf)$){\n        #   add_header Content-Disposition 'attachment;';\n        # }\n        include /usr/local/openresty/nginx/html/Nginx-Fancyindex-Theme/light.conf;\n    }\n    \n    location /download/dark {\n        alias  /usr/local/openresty/nginx/html/download;\n        # 以这些后缀的文件点击后为下载，注释掉则 txt 等文件是在网页打开并查看内容\n        # if ($request_filename ~* ^.*?\\.(txt|doc|pdf|rar|gz|zip|docx|exe|xlsx|ppt|pptx|conf)$){\n        #   add_header Content-Disposition 'attachment;';\n        # }\n        include /usr/local/openresty/nginx/html/Nginx-Fancyindex-Theme/dark.conf;\n    }\n    \n    location /download/red {\n        alias  /usr/local/openresty/nginx/html/download;\n        # 以这些后缀的文件点击后为下载，注释掉则 txt 等文件是在网页打开并查看内容\n        # if ($request_filename ~* ^.*?\\.(txt|doc|pdf|rar|gz|zip|docx|exe|xlsx|ppt|pptx|conf)$){\n        #   add_header Content-Disposition 'attachment;';\n        # }\n        include /usr/local/openresty/nginx/html/Nginx-Fancyindex-Theme/red.conf;\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n如果你不喜欢放在 html 目录下，那么上方代码的 include 也要改变成所在路径的配置文件。",normalizedContent:"笔记\n\n首页的下载站点是基于 nginx 提供的，但是 nginx 自带的下载站点不是特别好看，比较「拥挤」，所以本内容介绍我的下载站点如何优化。\n\n2021-12-14 @村长\n\n\n\n * 介绍\n * 第三方模块\n\n\n\n\n# 介绍\n\n如果还不懂什么是下载站点，请看我的下载站点：https://www.youngkbt.cn/download/。\n\n看了我的下载站点，你会发现和 nginx 自带的样式有些不一样，嗯？nginx 自带的下载站点长啥样？请看 nginx - 站点与认证。\n\n下载站点，就是能够下载东西的网页。其实设计并没有多难，利用第三方模块，就可以实现上方效果。\n\n本下载站点基于 nginx 搭建的，没有 nginx 的支持，本下载站点将会无效。\n\n\n# 第三方模块\n\n首先需要实现 nginx 自带的下载站点，了解这个后方能利用第三方模块进行美化，如果你不了解什么是模块，就认为这叫做插件。\n\n我使用的是 ngx-fancyindex 模块，这里提供下载地址：\n\n * github 地址：https://github.com/aperezdc/ngx-fancyindex\n\n * 版本选择地址：https://github.com/aperezdc/ngx-fancyindex/releases\n\n * 完整版下载地址：https://github.com/aperezdc/ngx-fancyindex/archive/master.zip\n\n * 我的下载站点下载地址：https://www.youngkbt.cn/download/dark/网站源码/，找到 ngx-fancyindex-0.5.2.tar.xz 进行下载\n\n下载后，放到服务器的某个路径下，然后需要重新编译安装 nginx，也就是说，你要备份好你之前的配置文件、静态页面目录、日志文件目录。\n\n如果你试过 nginx 的源码安装，那么一定不陌生 ./configure 来编译，如果不知道如何安装，请看 nginx - 环境准备。\n\n进入 nginx 的源码目录，然后执行下方命令：\n\n./configure ...... --add-module=../ngx-fancyindex/\n\nmake && make install\n\n\n1\n2\n3\n\n\n其中 ...... 是其他的模块（插件），../ 代表上一级目录，如果你放的路径没有与 nginx 的源码处于一个目录，则根据你的路径进行修改。\n\n进入 nginx 配置文件配置如下内容：\n\nlocation /download{\n    root /usr/local/openresty/nginx/html; # 指定目录所在路径\n    fancyindex on; # 使用fancyindex\n    fancyindex_exact_size off; # 不显示精确大小\n}\n\n\n1\n2\n3\n4\n5\n\n\nroot 指定存放软件的目录，我的是在 /usr/local/openresty/nginx/html 目录里，该目录就是访问我的下载站点看到的根目录\n\n\n\n此时访问 /download，就看看到如下效果\n\n\n\n此时已经实现了这个第三方模块带来的效果。\n\n当然，你会发现这个页面仅仅是我下载站点的红系主题，因为我使用了主题 nginx-fancyindex-theme，这个主题有两种模式，分别为亮系主题和暗系主题，加上红系主题就是三个主题。\n\n下载地址：https://github.com/lanffy/nginx-fancyindex-theme/\n\n不知道如何下载？使用 git clone 指令：\n\ngit clone https://github.com/lanffy/nginx-fancyindex-theme/\n\n\n1\n\n\n下载后，放在 nginx 的静态页面 html 目录里\n\nmv /opt/nginx-fancyindex-theme /usr/local/nginx/html/\n\n\n1\n\n\n然后在原来的配置文件修改内容：\n\nlocation /download{\n    root /usr/local/openresty/nginx/html; # 指定目录所在路径\n    include /usr/local/nginx/html//nginx-fancyindex-theme/fancyindex.conf; # 主题的配置文件\n}\n\n\n1\n2\n3\n4\n\n\n引用 nginx-fancyindex-theme 里的 fancyindex.conf 配置文件即可实现亮系主题，如果你不喜欢放在 nginx 的静态页面 html 目录里，那么上方内容也要修改成主题配置文件的路径。\n\n如果想要暗系主题，则修改 fancyindex.conf 的内容，注释掉亮系主题的引入（fancyindex_header 和 fancyindex_footer），加入暗系主题的引用（fancyindex_header 和 fancyindex_footer）。\n\n此时主题已经完全实现，但是你会发现我的下载站点有些不一样，因为我稍微修改了一些内容：\n\n * 三个主题的可切换\n\n * 修改 file name、file size、date\n\n * 修改 date 的月份英文为中文\n\n * 颜色突出，字体修改\n\n如果你喜欢我的下载站点，这里提供我的源码地址：https://www.youngkbt.cn/download/dark/网站源码/，找到 mynginx-theme.tar.gz 进行下载。\n\n下载后，解压到静态文件 html 目录下，然后在配置文件填入内容：\n\nlocation /download/light {\n        alias  /usr/local/openresty/nginx/html/download;\n        # 以这些后缀的文件点击后为下载，注释掉则 txt 等文件是在网页打开并查看内容\n        # if ($request_filename ~* ^.*?\\.(txt|doc|pdf|rar|gz|zip|docx|exe|xlsx|ppt|pptx|conf)$){\n        #   add_header content-disposition 'attachment;';\n        # }\n        include /usr/local/openresty/nginx/html/nginx-fancyindex-theme/light.conf;\n    }\n    \n    location /download/dark {\n        alias  /usr/local/openresty/nginx/html/download;\n        # 以这些后缀的文件点击后为下载，注释掉则 txt 等文件是在网页打开并查看内容\n        # if ($request_filename ~* ^.*?\\.(txt|doc|pdf|rar|gz|zip|docx|exe|xlsx|ppt|pptx|conf)$){\n        #   add_header content-disposition 'attachment;';\n        # }\n        include /usr/local/openresty/nginx/html/nginx-fancyindex-theme/dark.conf;\n    }\n    \n    location /download/red {\n        alias  /usr/local/openresty/nginx/html/download;\n        # 以这些后缀的文件点击后为下载，注释掉则 txt 等文件是在网页打开并查看内容\n        # if ($request_filename ~* ^.*?\\.(txt|doc|pdf|rar|gz|zip|docx|exe|xlsx|ppt|pptx|conf)$){\n        #   add_header content-disposition 'attachment;';\n        # }\n        include /usr/local/openresty/nginx/html/nginx-fancyindex-theme/red.conf;\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n如果你不喜欢放在 html 目录下，那么上方代码的 include 也要改变成所在路径的配置文件。",charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"首页 - 部署",frontmatter:{title:"首页 - 部署",date:"2021-12-09T21:57:35.000Z",permalink:"/about/index/younngkbt/",titleTag:"原创",categories:["关于 - 首页"],tags:["首页"],readingShow:"top"},regularPath:"/80.%E5%85%B3%E4%BA%8E/08.%E5%85%B3%E4%BA%8E%20-%20%E9%A6%96%E9%A1%B5/02.%E9%A6%96%E9%A1%B5%20-%20%E9%83%A8%E7%BD%B2.html",relativePath:"80.关于/08.关于 - 首页/02.首页 - 部署.md",key:"v-35bc4ad4",path:"/about/index/younngkbt/",headers:[{level:2,title:"序言",slug:"序言",normalizedTitle:"序言",charIndex:54},{level:2,title:"首页部署",slug:"首页部署",normalizedTitle:"首页部署",charIndex:60},{level:2,title:"404部署",slug:"_404部署",normalizedTitle:"404部署",charIndex:68},{level:2,title:"博客部署",slug:"博客部署",normalizedTitle:"博客部署",charIndex:77},{level:2,title:"邮箱部署",slug:"邮箱部署",normalizedTitle:"邮箱部署",charIndex:85},{level:3,title:"邮箱源码",slug:"邮箱源码",normalizedTitle:"邮箱源码",charIndex:95},{level:3,title:"官方镜像部署",slug:"官方镜像部署",normalizedTitle:"官方镜像部署",charIndex:105},{level:3,title:"自定义镜像部署",slug:"自定义镜像部署",normalizedTitle:"自定义镜像部署",charIndex:117},{level:2,title:"消息提示效果代码",slug:"消息提示效果代码",normalizedTitle:"消息提示效果代码",charIndex:128}],headersStr:"序言 首页部署 404部署 博客部署 邮箱部署 邮箱源码 官方镜像部署 自定义镜像部署 消息提示效果代码",content:'笔记\n\n这里简单介绍我的首页创建过程，以及邮件功能的设计过程。\n\n2021-12-09 @村长\n\n\n\n * 序言\n * 首页部署\n * 404部署\n * 博客部署\n * 邮箱部署\n   * 邮箱源码\n   * 官方镜像部署\n   * 自定义镜像部署\n * 消息提示效果代码\n\n\n\n\n# 序言\n\n在学习完 Nginx 的知识后，我看着 Nginx 的欢迎页面细想了很久，眼中的世界太过单调，总觉得不够好看，而且无法给我的服务器提供任何信息介绍，而周围的朋友直接是将其代理到其他页面。\n\n当时我就有了一些想法，替换 Nginx 的欢迎页面，将新的页面作为入口页面，介绍网站功能的同时，提供博客、项目导航入口。比如我部署的一个项目，那么在首页就会有提示，如点击跳转，这样就不必记住项目的 URL 地址，只需要记住服务器地址，那么服务器其他的内容，都汇聚于首页。\n\n如果你是从 Github 或者 Gitee 进入到我的博客，那么可以去看看我的服务器首页，希望不会让你失望，点击跳转。\n\n如果你看完了下面的内容，需要我的服务器首页、404页面、邮箱功能、下载站点功能的源码，那么 点击跳转。\n\n\n# 首页部署\n\n首先准备好一个首页，不需要打包之类的，Nginx 的首页只是一个 index.html 加点 CSS 和 JS 文件即可，不需要像一个项目那样完整。\n\n利用工具连接服务器，我是用的是 Xftp，将其上传到 Nginx 的默认路径下。\n\nNginx 的默认路径下如果你不知道，打开 Nginx 的配置文件，看 80 或者 431端口的 location / { ... } 里的 root 指定的路径，那就是 Nginx 的默认路径。\n\n\n\n这就是我的默认路径，所以将首页以及静态文件上传到 Nginx 默认路径下。\n\n在本地，我的首页结构如下：\n\n.\n├── index.html\n│   ├── assets (静态文件目录)\n│   │   ├── css（样式目录）\n│   │   ├── fonts（字体目录）\n│   │   ├── images（图片目录）\n│   │   ├── js（JavaScript 目录）\n│   ├── vendor（JavaScript 库）\n│   │   ├── bootstrap\n|\t│\t├── jquery\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上传到服务器后，因为默认路径下可能有太多文件，所以我对其分类，创建一个 static 文件夹。\n\n根目录\n├── index.html\n|—— static（静态文件目录）\n│   ├── assets\n│   │   ├── css（样式目录）\n│   │   ├── fonts（字体目录）\n│   │   ├── images（图片目录）\n│   │   ├── js（JavaScript 目录）\n│   ├── vendor（JavaScript 库）\n│   │   ├── bootstrap\n|\t│\t├── jquery\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n根目录，就是 /usr/local/openresty/nginx/html 目录。\n\n上传首页后，记得修改 index.html 有关 css 和 js 的引入路径，因为 Nginx 的获取资源规则和本地的不一样。\n\n在本地，我们在 index.html 可以这样写：（部分）\n\n<link href="vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet" />\n<link href="assets/fonts/iconfont.css" rel="stylesheet" />\n<script src="vendor/jquery/jquery.min.js"><\/script>\n\n\n1\n2\n3\n\n\n但是上传到 Nginx 后，我们必须在开头加上 /，代表 Nginx 的根目录，所以我们需要这样写：（部分）\n\n<link href="/static/vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet" />\n<link href="/static/assets/fonts/iconfont.css"  rel="stylesheet"  />\n<script src="/static/vendor/jquery/jquery.min.js"><\/script>\n\n\n1\n2\n3\n\n\n然后，访问服务器的域名，即可访问这个首页。当然，如果希望访问域名的后面再加个 /home，如访问 https://www.youngkbt.cn/home ，也能访问首页的话，需要在配置文件进行配置。\n\n\n\n\n\n\n\n \n \n \n \n\n\n\n\n\nserver {\n    listen 80;\t\t# 431 是 https 的默认端口，80 是 http 的默认端口\n    server_name www.youngkbt.cn;\n    # ...... 其他 location\n    \n    location /home {\n        alias  /usr/local/openresty/nginx/html;\n        index  index.html;\n    }\n    \n    # ...... 其他 location\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n这里使用的是 alias 指令，因为 root 指令会把 location 后面匹配的请求拼接到目录后，而 alias 指令则会忽略 location 后匹配的请求。\n\nalias 指令不会忽略匹配后面的请求，如访问 /home/aa，则忽略 /home，但是把 /aa 拼接到目录后，但是这不影响我们访问 /home 就能访问到首页，这里只是介绍使用 alias 指令的特点。\n\nJS 文件\n\n在首页，我简单实现了 Element UI 的消息提示效果，也实现了邮箱发送功能，这里提供源码：\n\n$(function () {\n  var storageName = "isSend";\n  \n  // 防止重复发送\n  var isSend = false;\n  $(".button").on("click", function () {\n    if ($("#name").val() == \'\') {\n      addTip("姓名不能为空，请填写", "danger");\n      return;\n    } else if ($("#email").val() == \'\') {\n      addTip("邮箱不能为空，请填写", "danger");\n      return;\n    } else if ($("#subject").val() == \'\') {\n      addTip("标题不能为空，请填写", "danger");\n      return;\n    } else if ($("#message").val() == \'\') {\n      addTip("消息不能为空，请填写", "danger");\n      return;\n    } else {\n      var email = $("#email").val();\n      var reg = /^([a-zA-Z]|[0-9])(\\w|\\-)+@[a-zA-Z0-9]+\\.([a-zA-Z]{2,4})$/;\n      if (reg.test(email) && (sessionStorage.getItem(storageName) != "true" || isSend == false)) {\n        if (confirm("确认要发送吗？")) {\n          sendEmail();\n          sessionStorage.setItem(storageName,true);\n          isSend = true;\n        }\n      } else if (sessionStorage.getItem(storageName) == "true" || isSend == true) {\n        addTip("请不要重复发送消息", "warning");\n      } else {\n        addTip("邮箱格式不正确，请填写", "danger");\n      }\n    }\n\n    // 获取表单信息\n    // console.log($("#contact").serialize());  \n  })\n  function sendEmail() {\n    $.post("/sendEmail", $("#contact").serialize(), function (res, error) {\n      if (res == \'OK\') {  \n        addTip("发送消息成功", "success");\n        setTimeout(() => {\n          window.location.reload();\n          sessionStorage.removeItem(storageName);\n          isSend == false;\n        }, 1500);\n      } else {\n        console.log("失败的原因：", error);\n        addTip("发送失败，可能发送超时或消息被拦截，请稍后再重试", "tip");\n      }\n    });\n  }\n\n  // 添加消息提示\n  function addTip(content, type) {\n\n    var time = new Date().getTime();\n    // 获取最后消息提示元素的高度\n    var top = $(".tip:last").attr("data-top") == undefined ? 0 : $(".tip:last").attr("data-top");\n    // 如果产生两个以上的消息提示，则出现在上一个提示的下面，即高度添加，否则默认 20\n    var lastTop = parseInt(top) + ($(".tip").length > 0 ? $(".tip:last").outerHeight() + 17 : 20);\n\n    if (type == "success" || type == 1) {\n      $("#page-wraper").append(`<div class="tip tip-success ${time}" style="top: ${parseInt(top)}px" data-top="${lastTop}"><i class="iconfont icon-dagouyouquan icon"></i><p class="tip-success-content">${content}</p></div>`);\n    } else if (type == "danger" || type == 2) {\n      $("#page-wraper").append(`<div class="tip tip-danger ${time}" style="top: ${parseInt(top)}px" data-top="${lastTop}><i class="iconfont icon-cuowu icon"></i><p class="tip-danger-content">${content}</p></div>`);\n    } else if (type == "info" || type == 3) {\n      $("#page-wraper").append(`<div class="tip tip-info ${time}" style="top: ${parseInt(top)}px" data-top="${lastTop}><i class="iconfont icon-info icon"></i><p class="tip-info-content">${content}</p></div>`);\n    } else if (type == "warning" || type == 4) {\n      $("#page-wraper").append(`<div class="tip tip-warning ${time}" style="top: ${parseInt(top)}px" data-top="${lastTop}><i class="iconfont icon-gantanhao icon"></i><p class="tip-warning-content">${content}</p></div>`);\n    }\n\n    // 动画往下滑动\n    $("." + time).animate({\n      top: parseInt(lastTop) + "px",\n      opacity: "1",\n    })\n\n    // 消息提示 3 秒后隐藏并被删除\n    setTimeout(() => {\n      $("." + time).animate({\n        top: "0px",\n        opacity: "0",\n      });\n\n      setTimeout(() => {\n        $("." + time).remove();\n      }, 500);\n    }, 3000);\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n\n\n消息提示效果的 CSS 文件内容：\n\n/* 消息提示样式 */\n.tip{\n  position: fixed;\n  display: flex;\n  height: 48px;\n  top: -10px;\n  left: 50%;\n  opacity: 0;\n  min-width: 320px;\n  transform: translateX(-50%);\n  transition: opacity .3s linear,top .4s,transform .4s;\n  z-index: 99999;\n  padding: 15px 15px 15px 20px;\n  border: 1px solid #ebeef5;\n  border-radius: 4px;\n  grid-row: 1;\n  line-height: 17px;\n}\n.tip p{\n  line-height: 17px;\n  margin: 0;\n  font-size: 14px;\n}\n.icon{\n  margin-right: 10px;\n  line-height: 17px;\n}\n.tip-success  {\n  color: #67c23a;\n  background-color: #f0f9eb;\n  border-color: #e1f3d8;\n}\n.tip-success .tip-success-content{\n  color: #67c23a;\n}\n.tip-danger {\n  color: #f56c6c;\n  background-color: #fef0f0;\n  border-color: #fde2e2;\n}\n.tip-danger .tip-danger-content{\n  color: #f56c6c;\n}\n.tip-info {\n  background-color: #edf2fc;\n  border-color: #ebeef5;\n}\n.tip-info .tip-info-content{\n  color: #909399;\n}\n\n.tip-warning {\n  color: #e6a23c;\n  background-color: #fdf6ec;\n  border-color: #faecd8;\n}\n.tip-warning .tip-warning-content{\n  margin: 0;\n  color: #e6a23c;\n  line-height: 21px;\n  font-size: 14px;\n}\n/* 下面是二维码样式 */\n.social-tip{\n  margin-bottom: 170px;\n  display: none;\n} \n.square{\n    width: 0;\n    height: 0;\n    border-bottom: 7px solid rgba(118, 25, 172, 0.3);\n    border-right: 7px solid transparent;\n    border-left: 7px solid transparent;\n    position: relative;\n    left: 36%;\n}\n.social-info{\n  width: 200px;\n  position: absolute;\n  line-height: 48px;\n  left: -95%;\n  margin-left: -40px;\n  background-color: rgba(118, 25, 172, 0.3);\n  color: #fff;\n  padding: 0 15px 15px;\n}\n.social-info img{\n  width: 160px;\n  height: 160px;\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n\n\n如下效果：\n\n\n\n我设计了四个提示，分别是成功绿色，提示灰色，警告黄色，错误红色。而提示语前面的图标，需要自己去阿里云的矢量库进行获取，并在首页引用，矢量库跳转。\n\n\n# 404部署\n\n你喜欢 Nginx 自带的 404 页面吗？我可能不是特别喜欢，所以我们可以自定义好看的 404 页面，又或者去网上下载别人做好的 404 页面模板。如我的 404 页面如图：\n\n\n\n点击头像还能播放音乐。\n\n利用 xftp 将 404 页面上传到服务器上，我在 Nginx 根目录下创建了一个 404 文件夹，将 404 页面和其 CSS 和 JS 文件放到这个 404 文件夹里。\n\n目录结构：\n\n根目录\n|—— 404（这是个目录）\n│   ├── 404.html（ 404 页面）\n│   ├── css（样式目录）\n│   ├── img（图片目录）\n│   ├── js（JavaScript 目录）\n|\t├── music（音乐目录）\n|\n├── index.html（其他页面）\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上传后到 Nginx 后，养成好习惯，打开 404.html，修改 CSS、JS 文件的引入路径，因为 Nginx 的获取资源规则和本地的不一样。\n\n记得开头加 /，改为：（部分）\n\n<link rel="stylesheet" href="/404/css/ghost.css">\n<script type="text/javascript" src="/404/js/jquery.min.js"><\/script>\n\n\n1\n2\n\n\n然后在配置文件修改 404 页面的访问路径\n\n\n\n\n\n\n\n \n \n \n \n \n\n\n\n\n\nserver {\n    listen 431;\t\t# 431 是 https 的默认端口，80 是 http 的默认端口\n    server_name youngkbt.cn;\n    # ...... 其他 location\n    \n    error_page   404 500 502 503 504 /404.html;\n    location = /404.html {\n        root    /usr/local/openresty/nginx/html/404;\n        index 404.html;\n    }\n    \n    # ...... 其他 location\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n此时你随便访问我的服务器地址，如 https://www.youngkbt.cn/aaa 那么就会显示我的 404 页面。在该页面中，点击我的头像后，音乐会伴随头像的旋转而缓缓响起，静静享受 404 带有的静谧时刻。\n\n\n# 博客部署\n\n我的博客已经部署在 Github 和 Gitee 中，如果你看了上一个文章，部署自己的博客到了服务器，那么就请在 Nginx 设置一个 location 模块，进行跳转吧。\n\n我设置了两个 location 模块，当输入 /notes 或者 /note-blog 的时候，都会跳转到我的博客首页\n\nlocation /notes {\n    rewrite ^/notes/(\\w*)$ /notes-blog/$1;\n}\nlocation /notes-blog {\n    root /home/kbt;\n    index index.html;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n实际上，最终都会跳到 /note-blog 的 location 模块里。\n\n我们不仅可以设置博客的 location，也可以设置浏览器的缓存静态文件时间，因为博客的静态文件太多，当用户每次访问都从 Nginx 服务器获取静态文件，那显然不理智，我们可以让用户访问过的静态文件，缓存到用户的浏览器中，这样，用户再次访问博客的时候，直接从浏览器本地获取，打开的速度非常快。\n\n我设置了静态文件缓存 7 天，html 文件缓存 1 天\n\nlocation ~ /note-blog/.*\\.(js|css|png|jpg|jpeg|gif)$ {\n    root /home/kbt;\n    expires 7d;  # 缓存七天\n}\n\nlocation ~ /note-blog/.*\\.(html)$ {\n    root /home/kbt;\n    expires 1d;  # 缓存一天\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n看到 root 了吗，我的博客并没有放在 Nginx 的默认路径下，而是由普通用户 kbt 管理。防止滥用 root 权限，避免被别人恶意访问。\n\n\n# 邮箱部署\n\n建议你看到这里马上停住，然后点击 测试发送邮箱，输入你的邮箱，进行发送，体验之后再来学习，会有更大的收获和兴趣。\n\n邮箱项目我使用了 node 和 express 来搭建简单的服务器，然后利用 nodemailer 进行邮件发送，log4j.js 进行日志信息存储。\n\n这是一个 node 简单项目，安装的依赖只有三个，express、nodemailer、log4js。\n\n\n# 邮箱源码\n\n我的 package.json 文件内容如下：\n\n{\n    "name": "email",\n    "version": "1.0",\n    "private": true,\n    "scripts": {\n        "dev": "node app.js"\n    },\n    "dependencies": {\n        "express": "^4.17.1",\n        "log4js": "^6.3.0",\n        "nodemailer": "^6.7.2"\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n依赖只有三个，如何安装呢，我使用 yarn 进行安装。\n\nyarn add express --save\nyarn add log4js --save\nyarn add nodemailer --save\n\n\n1\n2\n3\n\n\n安装完，我们先编写 log.js 文件，实现日志功能\n\n// 引入插件 log4js  \nvar log4js = require(\'log4js\')\nlog4js.configure({\n    appenders: {\t// 配置日志文件\n        access: {    // 访问日志的 name\n            type: \'file\',     \n            filename: "logs/access.log",\n            layout: {\n                type: \'pattern\',\n                pattern: \'[%d{yyyy-MM-dd hh:mm:ss SSS}] [%p] %c - %m\'\n            },\n        },\n        error: {    // 错误日志的 name\n            type: \'file\',\n            filename: "logs/error.log",\n            layout: {   // 定义日志输出的样式\n                type: \'pattern\',\n                pattern: \'[%d{yyyy MM dd hh:mm:ss SSS}] [%p] %c - %m%n\' // 日志输出时间格式\n            },\n        },\n    },\n\n    categories: {\t// 配置日志级别，以及引用 appenders 配置的日志文件\n        default: { appenders: [\'access\'], level: \'info\' },  // 上方 appenders 的 name\n        error: { appenders: [\'error\'], level: \'error\' }\n    },\n})\n\nexports.logger = function (name) {  // name 取 categories 的 name\n    return log4js.getLogger(name || \'default\')\n};\nexports.use = function (app, logger) {\n    app.use(log4js.connectLogger(logger || log4js.getLogger(\'default\'), { level: \'info\', format: \'请求类型/URI：「 :method:url 」\' })) // 请求类型/URI 格式设置\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n文件内容不难理解，我们首先配置要输出的日志文件路径以及名字，然后配置日志输出的信息时间格式，然后配置日志的格式，如 info 或者 error，接着配置请求类型/URI 格式，最后暴露出去。\n\n日志的输出内容如图所示：\n\n\n\n编写 route.js 文件，相信学过 express 的伙伴已经非常熟悉了\n\nconst express = require("express");\nconst router = express.Router();\n// 引入日志\nconst logger = require("./log").logger();\nconst errLogger = require("./log").logger("error");\n// 引入邮件发送功能\nvar nodemailer = require(\'nodemailer\');\n\nrouter.post("/email", (req, res) => {\n    var data = req.body;\n    // 获取发送的模板\n    const myHtml = require("./email/emailHtml").myHtml(data);\n    const otherHtml = require("./email/emailHtml").otherHtml(data);\n    // 创建连接\n    var transporter = nodemailer.createTransport({\n        host: "smtp.163.com",\n        port: 465, // SMTP 端口\n        secureConnection: true, // 使用 SSL 方式（安全方式，防止被窃取信息）\n        auth: {\n            user: \'kele_bingtang@163.com\',\n            // 这里密码不是 qq 密码，是你设置的 smtp 密码\n            pass: \'GJQDWNWVGYEVTSMB\'\n        }\n    });\n\n    // 邮件参数（我的）\n    var myOptions = {\n        from: \'kele_bingtang@163.com\', // 发件地址\n        to: \'kele_bingtang@163.com,2456019588@qq.com\', // 收件列表\n        subject: data.subject, // 标题\n        // text 和 html 同时发送只支持一种\n        html: myHtml,\n\n        //  text: "测试",\n        /*  attachments:[{  // 附件\n       filename: \'\',   // 附件名\n       path: \'\'    // 附件路径\n     }] */\n    };\n\n    // 邮件参数（发件人）\n    var otherOptions = {\n        from: \'kele_bingtang@163.com\', // 发件地址\n        to: `kele_bingtang@163.com,${data.email}`, // 收件列表\n        subject: "村长 的致谢", // 标题\n        // text 和 html 同时发送只支持一种\n        html: otherHtml,\n    };\n\n    // 发送邮件（给发件人）\n    transporter.sendMail(otherOptions, function (error, info) {\n        if (error) {\n            errLogger.error("发送给「 " + data.name + " 」失败，原因：「 " + error + " 」");\n            res.status(200).send("error：" + error);\n        }else{\n            logger.info("发送给「 " + data.name + " 」成功");\n        }\n        console.log("发送给发件人的响应信息：");\n        console.log(info);\n    });\n\n\n    // 发送邮件（给我）\n    transporter.sendMail(myOptions, function (error, info) {\n        console.log("错误信息：" + error);\n        if (error) {\n            errLogger.error("发送给「 村长 」失败，原因：「 " + error + " 」");\n            res.status(200).send("error：" + error);\n        }else{\n            res.status(200).send("OK");\n            logger.info("发件邮箱：「 " + info.envelope.from + " 」，收件邮箱：「 " + info.envelope.to + " 」");\n            logger.info("响应结果：「 " + info.response + " 」");\n            console.log("发送给我的响应信息：");\n            console.log(info);\n        }\n    });\n\n    logger.info("发件人：「 " + data.name + " 」，发件人的邮箱：「 " + data.email + " 」，发件主题：「 " + data.subject + " 」，发件消息：「 " + data.message + " 」");\n\n    setTimeout(() => {\n        logger.info("发送一次邮件的日志分割线 ------------------------\\n");\n    }, 4000);\n\n    setTimeout(() => {\n        transporter.close();\n    }, 10000);\n\n})\n\nmodule.exports = router;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n\n\n第 12 和 13 行引用自定义的邮件页面模板，模板大家根据自己的需求设计邮件页面。\n\n我的邮件页面代码位于根目录下的 email 目录，名字叫 emailHtml，源码为：\n\n// 发送给我\nexports.myHtml = function(data){\n    return `<div style="width: 600px;margin: 0 auto;">\n            <includetail>\n              <table style="text-align: center; font-size: 16px; color: #333333; border-spacing: 0px; border-collapse: collapse; width: 580px; direction: ltr">\n                  <tbody>\n                  <tr>\n                      <td style="font-size: 14px; padding: 0px 0px 7px 0px; text-align: center;color: #0044CC">\n                          ${data.name} 在 村长 首页发送给您\n                      </td>\n                  </tr>\n                  <tr style="background-color: #2279BD">\n                      <td style="padding: 0px">\n                          <table style="border-spacing: 0px; border-collapse: collapse; width: 100%">\n                              <tbody>\n                              <tr>\n                                  <td style="padding: 0px; text-align: center;">\n                                      <img src="https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/user/20211205131212.jpg" alt="请在上方选择信任，以此显示头像">\n                                  </td>\n                              </tr>\n                              <tr>\n                                  <td style="font-size: 38px; color: #FFFFFF; padding: 12px 22px 4px 22px; text-align: center;" colspan="3">\n                                      村长\n                                  </td>\n                              </tr>\n                              <tr>\n                                  <td style="font-size: 20px; color: #FFFFFF; padding: 0px 22px 18px 22px; text-align: center;" colspan="3">\n                                    人闲车马慢，路遥星亦辞\n                                  </td>\n                              </tr>\n                              </tbody>\n                          </table>\n                      </td>\n                  </tr>\n                  <tr>\n                      <td style="background-color: #5BA9DF; border-bottom-style: solid; border-bottom-color: #2279BD; border-bottom-width: 4px;">\n                          <table style="color: #333333; border-spacing: 0px; border-collapse: collapse; width: 100%; color: #fff">\n                              <tbody>\n                                <tr>\n                                  <td style="font-size: 18px; padding: 0px 0px 5px 0px;">\n                                    <p style="text-align: center">\n                                      <span style="font-weight:bold;">${data.name} </span>\n                                      <span>发送的主题：</span></p>\n                                      <p style="font-size: 16px; letter-spacing: 0.5px; text-indent: 16px; padding:0 20px; line-height: 30px; text-align: left;">\n                                      ${data.subject}\n                                    </p>\n                                  </td>\n                                </tr>\n                                <tr>\n                                  <td style="font-size: 18px; padding: 0px 0px 5px 0px;">\n                                    <p style="text-align: center; margin-top: 0;">\n                                      <span style="font-weight:bold;">${data.name} </span>\n                                      <span>发送的内容：</span>\n                                    </p>\n                                      <p style="font-size: 16px;letter-spacing: 0.5px; text-indent: 16px; padding:0 20px; line-height: 30px; text-align: left;">\n                                      ${data.message}\n                                    </p>\n                                  </td>\n                                </tr>\t\n                                <tr>\n                                    <td style="font-size: 16px; padding: 30px 20px; text-align: center">\n                                      如果您希望回复他/她，请发送到他/她的邮箱：\n                                      <p style="color: #0044CC; font-weight: bold">${data.email}</p>\n                                    </td>\n                                </tr>\n                              </tbody>\n                          </table>\n                      </td>\n                  </tr>\n                  <tr>\n                      <td style="padding: 35px 0px; color: #B2B2B2; font-size: 12px">\n                          From 村长\n                          <br>\n                          This is a WebSite\n                          <br>\n                          ${new Date().getFullYear()}-${new Date().getMonth() + 1 == 13 ? 12 : new Date().getMonth() + 1}-${new Date().getDate() > 10 ? new Date().getDate() : \'0\' + new Date().getDate()}\n                            ${new Date().getHours() > 10 ? new Date().getHours() : \'0\' + new Date().getHours()}:${new Date().getMinutes() > 10 ? new Date().getMinutes() : \'0\' + new Date().getMinutes()}:${new Date().getSeconds() > 10 ? new Date().getSeconds() : \'0\' + new Date().getSeconds()}\n                      </td>\n                  </tr>\n                  <tr>\n                      <td style="padding: 0px 0px 10px 0px; color: #B2B2B2; font-size: 12px">\n                          Copyright 村长 WebSite             \n                      </td>\n                  </tr>\n                  </tbody>\n              </table>\n            </includetail>\n          </div`;\n}\n\n// 发送给发件人\nexports.otherHtml = function(data){\n    return `<div style="width: 600px;margin: 0 auto;">\n            <includetail>\n              <table\n                style="text-align: center; font-size: 16px; color: #333333; border-spacing: 0px; border-collapse: collapse; width: 580px; direction: ltr">\n                <tbody>\n                  <tr>\n                    <td style="font-size: 14px; padding: 0px 0px 7px 0px; text-align: center;color: #0044CC">\n                      尊敬的 <span style="font-weight: bold;">${data.name}</span>，村长 感谢您的邮件\n                    </td>\n                  </tr>\n                  <tr style="background-color: #2279BD">\n                    <td style="padding: 0px">\n                      <table style="border-spacing: 0px; border-collapse: collapse; width: 100%">\n                        <tbody>\n                          <tr>\n                            <td style="padding: 0px; text-align: center;">\n                              <img src="https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/user/20211205131212.jpg" alt="请在上方选择信任，以此显示头像">\n                            </td>\n                          </tr>\n                          <tr>\n                            <td style="font-size: 38px; color: #FFFFFF; padding: 12px 22px 4px 22px; text-align: center;"\n                              colspan="3">\n                              村长\n                            </td>\n                          </tr>\n                          <tr>\n                            <td style="font-size: 20px; color: #FFFFFF; padding: 0px 22px 18px 22px; text-align: center;"\n                              colspan="3">\n                              人闲车马慢，路遥星亦辞\n                            </td>\n                          </tr>\n                        </tbody>\n                      </table>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td\n                      style="background-color: #5BA9DF; border-bottom-style: solid; border-bottom-color: #2279BD; border-bottom-width: 4px;">\n                      <table style="color: #333333; border-spacing: 0px; border-collapse: collapse; width: 100%; color: #fff">\n                        <tbody>\n                          <tr>\n                            <td style="font-size: 18px; padding: 0px 0px 5px 0px;">\n                              <p style="text-align: center">\n                                <span style="font-weight:bold">村长</span>\n                                <span>提示您：</span>\n                              </p>\n                              <p\n                                style="font-size: 16px; letter-spacing: 0.5px; text-indent: 32px; padding:0 20px; line-height: 30px; text-align: left;">\n                                本邮件由 村长\'s index 网站发送给您，\n                                <span style="color: #1546a8; font-weight: bold;">如果非本人操作，请忽略即可。</span>\n                              </p>\n                            </td>\n                          </tr>\n                          <tr>\n                            <td style="font-size: 18px; padding: 0px 0px 5px 0px;">\n                              <p style="text-align: center; margin-top: 0;">\n                                <span style="font-weight:bold">村长</span>\n                                <span>回复您：</span>\n                              </p>\n                              <p\n                                style="font-size: 16px;letter-spacing: 0.5px; text-indent: 32px; padding:0 20px; line-height: 30px; text-align: left;">\n                                感谢您提供的宝贵消息，我会根据您的内容尽快回复您，如果时间较延迟，请您见谅。\n                              </p>\n                            </td>\n                          </tr>\n                          <tr>\n                            <td style="font-size: 16px; padding: 30px 20px; text-align: center">\n                              如果您对我的网站感兴趣，请访问：\n                              <p style="color: #0044CC; font-weight: bold">\n                               <a href="youngkbt.cn" style="color: #0044CC; text-decoration: none">youngkbt.cn</a>\n                              </p>\n                              <p style="color: #0c3388;font-size: 14px; margin: 15px 0 0 0;">本网站仅是个人使用，并不带有商业用途</p>\n                            </td>\n                          </tr>\n                        </tbody>\n                      </table>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td style="padding: 35px 0px; color: #B2B2B2; font-size: 12px">\n                      From 村长\n                      <br>\n                      This is a WebSite\n                      <br>\n                      ${new Date().getFullYear()}-${new Date().getMonth() + 1 == 13 ? 12 : new Date().getMonth() + 1}-${new\n    Date().getDate() > 10 ? new Date().getDate() : \'0\' + new Date().getDate()}\n                      ${new Date().getHours() > 10 ? new Date().getHours() : \'0\' + new Date().getHours()}:${new\n    Date().getMinutes() > 10 ? new Date().getMinutes() : \'0\' + new Date().getMinutes()}:${new\n    Date().getSeconds() > 10 ? new Date().getSeconds() : \'0\' + new Date().getSeconds()}\n                    </td>\n                  </tr>\n                  <tr>\n                    <td style="padding: 0px 0px 10px 0px; color: #B2B2B2; font-size: 12px">\n                      Copyright 村长 WebSite\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </includetail>\n          </div>`\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n\n\n编写 express 的入口文件 app.js，监听 5678 端口\n\nconst express = require("express");\nconst router = require("./router");\nconst log = require("./log");\nconst app = express();\n\nlog.use(app);\napp.use(express.urlencoded({ extended: false }));\napp.use(express.json());\n\napp.use( ( request , response , next ) => {\n    response.header( \'Access-Control-Allow-Origin\' , \'*\') // 跨域最重要的一步 设置响应头\n    next(); // 执行 next 函数执行后续代码\n})\n\napp.use(\'/\',router);\n\napp.listen(\'5678\',() => {\n    console.log("5678 端口的服务器启动成功");\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n写完邮箱的功能，我们可以进行测试，进入邮箱项目的根目录，使用 node app.js 启动 node 项目。\n\nnode app.js\n\n\n1\n\n\n因为是 POST 请求，所以使用 Postman 等工具进行测试，访问 localhost:5678/email，填写 JSON 格式，包含 name、email、subject、message 四个参数的数据即可。\n\n\n\n\n# 官方镜像部署\n\n在本地编写测试完邮箱的功能后，我们将其上传到服务器，我上传的目录是 docker/node/email 下，然后需要服务器安装 node 环境，我使用的是 docker，所以直接拉取 node。\n\ndocker pull node\n\n\n1\n\n\n下载完 node 镜像后，不要马上启动它，因为 node 项目需要执行打包命令，生成 node_modules 目录，所以使用 Dockerfile 文件来执行打包命令。\n\n在 docker/node/email 目录下，创建并编写 Dockerfile 文件\n\ncd docker/node/email\nvim Dockerfile\n\n\n1\n2\n\n\n添加如下内容：\n\nFROM node\t\t\t\t\t# 基于 node 镜像创建新的镜像\nWORKDIR /home/email\t\t\t# 创建默认工作目录\nCOPY . /home/email\t\t\t# 将当前目录的所有内容拷贝到容器中\nRUN npm i\t\t\t\t\t# 执行打包命令\nEXPOSE 5678\t\t\t\t\t# 暴露 5678 端口\nENTRYPOINT node ./app.js \t# 启动容器时，启动 app.js 文件\n\n\n1\n2\n3\n4\n5\n6\n\n\n不难看出，在生成 docker 镜像的同时，它会将当前目录下的所有内容拷贝到容器中，这些内容就是我们写的邮箱项目。接着它会执行打包命令 npm i，i 代表 install。然后暴露 5678 端口，最后在启动的时候，启动 app.js 文件，也就是执行项目。\n\n写好 Dockerfile 文件，我们执行这个文件，构建基于 node 环境而搭建的「邮箱发送」镜像\n\ndocker build -t email:1.0 .\n\n\n1\n\n\n启动这个名叫 email、版本为 1.0 的容器，当启动这个容器的时候，内部就会执行 node ./app.js 命令，也就是 Dockerfile 文件的 ENTRYPOINT 指令，部署项目。\n\ndocker run -d --name email \\\n-v /docker/node/email/router.js:/home/email/router.js \\\n-v /docker/node/email/app.js:/home/email/app.js \\\n-v /docker/node/email/log.js:/home/email/log.js \\\n-v /docker/node/email/logs:/home/email/logs \\\n-v /docker/node/email/email:/home/email/email \\\n--network web --network-alias email \\\nemail:1.0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n不要惊讶会有那么多启动命令，这里主要实现挂载功能，只要宿主机的文件发生改变，则容器内的文件也会同步改变，毕竟谁也无法确定自己写的文件以后都不会修改，对吧。\n\n至于第 7 行的 network 网络，因为 Nginx 所处的网络是 web 网络，而想让 Nginx 访问 node 项目，则需要让两者处于同一个网络上。 network-alias 是网络别名，Nginx 会根据这个网络别名找到处于相同网络下的 node 项目，尽量与容器名保持一致。\n\n此时邮箱项目已经部署成功了，但是 Nginx 还无法访问这个邮箱项目，因为我们没有配置 location 模块来访问邮箱项目。\n\nserver {\n    listen       5678;\n    server_name  localhost;\n\n    location /email {\n\t    proxy_pass http://email:5678;    # email 就是网桥别名，Nginx 通过它找到 email 容器\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n实际上我并没有直接将上面的 server 模块放在配置文件里，而是将上面的内容放在新创建的 email_5678.conf 文件里，然后在配置文件进行转发。\n\n\n\n因为核心配置文件使用了 include 指令将 conf 目录下的所有 .conf 文件引入，所以我们只需要创建新的配置文件 email_5678.conf 即可。\n\n然后新的配置文件添加如下内容：\n\nserver {\n    listen 431;\t\t# 431 是 https 的默认端口，80 是 http 的默认端口\n    server_name www.youngkbt.cn;\n    # ...... 其他 location\n\n    # 转发给其他的 conf 文件\n    location /email {\n        proxy_pass http://localhost:5678;\n    }\n\n    # ...... 其他 location\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n当访问 /email 的时候，触发 431 端口的的 /email，然后内部就会执行 proxy_pass 指令，将请求转发给本地的 5678 端口，此时 email_5678.conf 文件正好监听这个 5678 端口，所以就会将 /email 请求发给自己的 location ，执行新的 proxy_pass 指令，而这个指令才是将请求发给 node 邮箱项目，触发邮箱的发送。\n\n记得重启 Ngixn，使得配置文件生效。\n\n什么时候外界会访问 /email？\n\n自己写一个 <a> 标签，填写你的服务器的地址加上 /email 即可。\n\n我自己写的不是 <a> 标签，而是一个 js 文件，点击按钮触发 ajax 请求，具体源码请看 首页部署 的 JS 文件。\n\n\n# 自定义镜像部署\n\n我在使用了基于官方镜像的部署几天后，发现这个镜像太大了，有 999MB，如图：\n\n\n\n于是我打算基于 Centos7.9 构建一个 node 环境的镜像，这里提供 Dockerfile 文件内容：\n\n# 这是早期的版本，直接引入 node 镜像，但是该镜像太大了，构建后 999MB，所以我就自己创建一个 nodejs 镜像\n# FROM node  \nFROM centos:7.9\n\n# nodejs 版本\nARG NODE_VERSION="v16.13.1"\n\nWORKDIR /opt/sendEmail\n# 将当前目录的所有文件放入容器的 /opt/sendEmail\nCOPY . /opt/sendEmail\n\n# 因为 COPY 也会将当前的 nodejs 压缩包添加进入，所以可以删除掉\nRUN rm -f /opt/sendEmail/node-${NODE_VERSION}-linux-x64.tar.xz\n\n# ------ 二选一，可注释 ------\n# 如果事先下载的 node 压缩包，则放入 Dockerfile 所在的目录下，利用 ADD 传入并自动解压\nADD node-${NODE_VERSION}-linux-x64.tar.xz /usr/local/\n# ADD 指令自动解压，所以可以删除传入的压缩包\nRUN rm -f /usr/local/node-${NODE_VERSION}-linux-x64.tar.xz\n# ------ ------ ------ ------ ------ ------ ------ ------ ------ ------\n\n# ------ 二选一，可注释 ------\n# 如果想要远程下载 node 压缩包，则取消下面的 RUN 指令注释\n#RUN yum install -y wget tar \\\n#     && cd /usr/local/ \\\n#     && wget https://nodejs.org/dist/${NODE_VERSION}/node-${NODE_VERSION}-linux-x64.tar.xz \\\n#     && tar xvf node-${NODE_VERSION}-linux-x64.tar.xz \\\n#     && rm -f node-${NODE_VERSION}-linux-x64.tar.xz\n# ------ ------ ------ ------ ------ ------ ------ ------ ------ ------\n\n# 将解压的 node 目录重命名\nRUN cd /usr/local/ \\\n     && mv node-${NODE_VERSION}-linux-x64 node\n\n# 将 node 命令添加至全局变量，包括了 node 和 npm\nENV PATH=$PATH:/usr/local/node/bin\n\n# 安装依赖包\nRUN cd /opt/sendEmail \\\n     && npm install\n\n# 暴露 7272 端口\nEXPOSE 7272\n# 启动容器后，自动执行下面的命令来启动项目\nENTRYPOINT node ./app.js\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n\n\n我都有注释说明，这里大概总结下：\n\n基于 Centos7.9 系统搭建 node 镜像，首先下载 nodejs，传到与 Dockerfile 同目录下，然后执行 Dockerfile 的时候，将 nodejs 传入镜像里，自动解压，并将 node 和 npm 命令添加至全局变量，然后把邮箱项目的代码传入镜像，接着利用全局变量 npm 进行安装 nodes_modules，最后写 ENTRYPOINT 指令，该指令会在启动容器的时候自动启动项目，这样就不需要我们亲自进入容器里启动项目。\n\n如果不喜欢先下载 nodejs，传入服务器里，那么就在构建容器时使用 wget 下载即可，上面内容的注释就是 wget 相关操作，二选一。\n\n执行如下命令执行 Dockerfile，构建镜像：\n\ndocker build -t email:2.0 .\n\n\n1\n\n\n可以看到构建的新镜像大小已经缩小一半左右，并且功能没有任何缺失，如图：\n\n\n\n2.0 版本的邮箱镜像构建源码我已经放到下载站点里了，如果需要，我在上方提供了下载地址，点击 序言 直达。\n\n\n# 消息提示效果代码\n\n在发送邮箱的过程，如果没有填写一些必要的信息，则会被提示，首页的提示是仿照 Element UI，只有两个函数，使用起来非常简单：\n\n/**\n * 添加消息提示\n * content：内容\n * type：弹窗类型（tip、success、warning、danger）\n * startHeight：第一个弹窗的高度，默认 50\n * dieTime：弹窗消失时间（毫秒），默认 3000 毫秒\n */\nfunction addTip(content, type, startHeight = 50, dieTime = 3000) {\n  var tip = document.querySelectorAll(".tip");\n  var time = new Date().getTime();\n  // 获取最后消息提示元素的高度\n  var top = tip.length == 0 ? 0 : tip[tip.length - 1].getAttribute("data-top");\n  // 如果产生两个以上的消息提示，则出现在上一个提示的下面，即高度添加，否则默认 50\n  var lastTop =\n    parseInt(top) +\n    (tip.length != 0 ? tip[tip.length - 1].offsetHeight + 17 : startHeight);\n  let div = document.createElement("div");\n  div.className = `tip tip-${type} ${time}`;\n  div.style.top = parseInt(top) + "px";\n  div.setAttribute("data-top", lastTop);\n  if (type == "info" || type == 1) {\n    div.innerHTML = `<i class="iconfont icon-info icon"></i><p class="tip-info-content">${content}</p>`;\n  } else if (type == "success" || type == 2) {\n    div.innerHTML = `<i class="iconfont icon-dagouyouquan icon"></i><p class="tip-success-content">${content}</p>`;\n  } else if (type == "danger" || type == 3) {\n    div.innerHTML = `<i class="iconfont icon-cuowu icon"></i><p class="tip-danger-content">${content}</p>`;\n  } else if (type == "warning" || type == 4) {\n    div.innerHTML = `<i class="iconfont icon-gantanhao icon"></i><p class="tip-warning-content">${content}</p>`;\n  }\n  document.body.appendChild(div);\n  let timeTip = document.getElementsByClassName(time)[0];\n  setTimeout(() => {\n    timeTip.style.top = parseInt(lastTop) + "px";\n    timeTip.style.opacity = "1";\n  }, 10);\n  // 消息提示 dieTime 秒后隐藏并被删除\n  setTimeout(() => {\n    timeTip.style.top = "0px";\n    timeTip.style.opacity = "0";\n    // 下面的所有元素回到各自曾经的出发点\n    var allTipElement = nextAllTipElement(timeTip);\n    for (let i = 0; i < allTipElement.length; i++) {\n      var next = allTipElement[i];\n      var top =\n        parseInt(next.getAttribute("data-top")) - next.offsetHeight - 17;\n      next.setAttribute("data-top", top);\n      next.style.top = top + "px";\n    }\n    setTimeout(() => {\n      timeTip.remove();\n    }, 500);\n  }, dieTime);\n}\n/**\n * 获取后面的兄弟元素\n */\nfunction nextAllTipElement(elem) {\n  var r = [];\n  var n = elem;\n  for (; n; n = n.nextSibling) {\n    if (n.nodeType === 1 && n !== elem) {\n      r.push(n);\n    }\n  }\n  return r;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n\n\nCSS 样式：\n\n/* 提示框元素 */\n.tip {\n  position: fixed;\n  display: flex;\n  top: -10px;\n  left: 50%;\n  opacity: 0;\n  min-width: 320px;\n  transform: translateX(-50%);\n  transition: opacity 0.3s linear, top 0.4s, transform 0.4s;\n  z-index: 99999;\n  padding: 15px 15px 15px 20px;\n  border: 1px solid #ebeef5;\n  border-radius: 4px;\n  grid-row: 1;\n  line-height: 17px;\n}\n.tip p {\n  line-height: 17px;\n  margin: 0;\n  font-size: 14px;\n}\n.icon {\n  margin-right: 10px;\n  line-height: 17px;\n}\n.tip-success {\n  color: #67c23a;\n  background-color: #f0f9eb;\n  border-color: #e1f3d8;\n}\n.tip-success .tip-success-content {\n  color: #67c23a;\n}\n.tip-danger {\n  color: #f56c6c;\n  background-color: #fef0f0;\n  border-color: #fde2e2;\n}\n.tip-danger .tip-danger-content {\n  color: #f56c6c;\n}\n.tip-info {\n  background-color: #edf2fc;\n  border-color: #ebeef5;\n}\n.tip-info .tip-info-content {\n  color: #909399;\n}\n.tip-warning {\n  color: #e6a23c;\n  background-color: #fdf6ec;\n  border-color: #faecd8;\n}\n.tip-warning .tip-warning-content {\n  margin: 0;\n  color: #e6a23c;\n  line-height: 21px;\n  font-size: 14px;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n\n\n图片是阿里云的图标库，在线地址：\n\n<link rel="stylesheet" href="//at.alicdn.com/t/font_3114978_qe0b39no76.css">\n\n\n1\n\n\n使用只需要调用 addTip 即可：\n\nfunction test() {\n    var hours = new Date().getHours();\n    var minutes = new Date().getMinutes();\n    var seconds = new Date().getSeconds();\n    hours = hours < 10 ? "0" + hours : hours;\n    minutes = minutes < 10 ? "0" + minutes : minutes;\n    seconds = seconds < 10 ? "0" + seconds : seconds;\n    if (hours >= 6 && hours < 11) {\n        addTip(\n            `早上好呀~~，现在是 ${hours}:${minutes}:${seconds}，吃早餐了吗？😊🤭`,\n            "info",\n            50,\n            4000\n        );\n    } else if (hours >= 12 && hours <= 16) {\n        addTip(\n            `下午好呀~~，现在是 ${hours}:${minutes}:${seconds}，繁忙的下午也要适当休息哦🥤🏀~~`,\n            "info",\n            50,\n            4000\n        );\n    } else if (hours >= 16 && hours <= 19) {\n        addTip(\n            `到黄昏了~~，现在是 ${hours}:${minutes}:${seconds}，该准备吃饭啦🥗🍖~~`,\n            "info",\n            50,\n            4000\n        );\n    } else if (hours >= 19 && hours < 24) {\n        addTip(\n            `晚上好呀~~，现在是 ${hours}:${minutes}:${seconds}，该准备洗漱睡觉啦🥱😪~~`,\n            "info",\n            50,\n            4000\n        );\n    } else if (hours >= 0 && hours < 6) {\n        addTip(\n            `别再熬夜了~~，现在是 ${hours}:${minutes}:${seconds}，早点睡吧，让我们一起欣赏早上的太阳~~😇🛏`,\n            "info",\n            50,\n            4000\n        );\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n',normalizedContent:'笔记\n\n这里简单介绍我的首页创建过程，以及邮件功能的设计过程。\n\n2021-12-09 @村长\n\n\n\n * 序言\n * 首页部署\n * 404部署\n * 博客部署\n * 邮箱部署\n   * 邮箱源码\n   * 官方镜像部署\n   * 自定义镜像部署\n * 消息提示效果代码\n\n\n\n\n# 序言\n\n在学习完 nginx 的知识后，我看着 nginx 的欢迎页面细想了很久，眼中的世界太过单调，总觉得不够好看，而且无法给我的服务器提供任何信息介绍，而周围的朋友直接是将其代理到其他页面。\n\n当时我就有了一些想法，替换 nginx 的欢迎页面，将新的页面作为入口页面，介绍网站功能的同时，提供博客、项目导航入口。比如我部署的一个项目，那么在首页就会有提示，如点击跳转，这样就不必记住项目的 url 地址，只需要记住服务器地址，那么服务器其他的内容，都汇聚于首页。\n\n如果你是从 github 或者 gitee 进入到我的博客，那么可以去看看我的服务器首页，希望不会让你失望，点击跳转。\n\n如果你看完了下面的内容，需要我的服务器首页、404页面、邮箱功能、下载站点功能的源码，那么 点击跳转。\n\n\n# 首页部署\n\n首先准备好一个首页，不需要打包之类的，nginx 的首页只是一个 index.html 加点 css 和 js 文件即可，不需要像一个项目那样完整。\n\n利用工具连接服务器，我是用的是 xftp，将其上传到 nginx 的默认路径下。\n\nnginx 的默认路径下如果你不知道，打开 nginx 的配置文件，看 80 或者 431端口的 location / { ... } 里的 root 指定的路径，那就是 nginx 的默认路径。\n\n\n\n这就是我的默认路径，所以将首页以及静态文件上传到 nginx 默认路径下。\n\n在本地，我的首页结构如下：\n\n.\n├── index.html\n│   ├── assets (静态文件目录)\n│   │   ├── css（样式目录）\n│   │   ├── fonts（字体目录）\n│   │   ├── images（图片目录）\n│   │   ├── js（javascript 目录）\n│   ├── vendor（javascript 库）\n│   │   ├── bootstrap\n|\t│\t├── jquery\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上传到服务器后，因为默认路径下可能有太多文件，所以我对其分类，创建一个 static 文件夹。\n\n根目录\n├── index.html\n|—— static（静态文件目录）\n│   ├── assets\n│   │   ├── css（样式目录）\n│   │   ├── fonts（字体目录）\n│   │   ├── images（图片目录）\n│   │   ├── js（javascript 目录）\n│   ├── vendor（javascript 库）\n│   │   ├── bootstrap\n|\t│\t├── jquery\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n根目录，就是 /usr/local/openresty/nginx/html 目录。\n\n上传首页后，记得修改 index.html 有关 css 和 js 的引入路径，因为 nginx 的获取资源规则和本地的不一样。\n\n在本地，我们在 index.html 可以这样写：（部分）\n\n<link href="vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet" />\n<link href="assets/fonts/iconfont.css" rel="stylesheet" />\n<script src="vendor/jquery/jquery.min.js"><\/script>\n\n\n1\n2\n3\n\n\n但是上传到 nginx 后，我们必须在开头加上 /，代表 nginx 的根目录，所以我们需要这样写：（部分）\n\n<link href="/static/vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet" />\n<link href="/static/assets/fonts/iconfont.css"  rel="stylesheet"  />\n<script src="/static/vendor/jquery/jquery.min.js"><\/script>\n\n\n1\n2\n3\n\n\n然后，访问服务器的域名，即可访问这个首页。当然，如果希望访问域名的后面再加个 /home，如访问 https://www.youngkbt.cn/home ，也能访问首页的话，需要在配置文件进行配置。\n\n\n\n\n\n\n\n \n \n \n \n\n\n\n\n\nserver {\n    listen 80;\t\t# 431 是 https 的默认端口，80 是 http 的默认端口\n    server_name www.youngkbt.cn;\n    # ...... 其他 location\n    \n    location /home {\n        alias  /usr/local/openresty/nginx/html;\n        index  index.html;\n    }\n    \n    # ...... 其他 location\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n这里使用的是 alias 指令，因为 root 指令会把 location 后面匹配的请求拼接到目录后，而 alias 指令则会忽略 location 后匹配的请求。\n\nalias 指令不会忽略匹配后面的请求，如访问 /home/aa，则忽略 /home，但是把 /aa 拼接到目录后，但是这不影响我们访问 /home 就能访问到首页，这里只是介绍使用 alias 指令的特点。\n\njs 文件\n\n在首页，我简单实现了 element ui 的消息提示效果，也实现了邮箱发送功能，这里提供源码：\n\n$(function () {\n  var storagename = "issend";\n  \n  // 防止重复发送\n  var issend = false;\n  $(".button").on("click", function () {\n    if ($("#name").val() == \'\') {\n      addtip("姓名不能为空，请填写", "danger");\n      return;\n    } else if ($("#email").val() == \'\') {\n      addtip("邮箱不能为空，请填写", "danger");\n      return;\n    } else if ($("#subject").val() == \'\') {\n      addtip("标题不能为空，请填写", "danger");\n      return;\n    } else if ($("#message").val() == \'\') {\n      addtip("消息不能为空，请填写", "danger");\n      return;\n    } else {\n      var email = $("#email").val();\n      var reg = /^([a-za-z]|[0-9])(\\w|\\-)+@[a-za-z0-9]+\\.([a-za-z]{2,4})$/;\n      if (reg.test(email) && (sessionstorage.getitem(storagename) != "true" || issend == false)) {\n        if (confirm("确认要发送吗？")) {\n          sendemail();\n          sessionstorage.setitem(storagename,true);\n          issend = true;\n        }\n      } else if (sessionstorage.getitem(storagename) == "true" || issend == true) {\n        addtip("请不要重复发送消息", "warning");\n      } else {\n        addtip("邮箱格式不正确，请填写", "danger");\n      }\n    }\n\n    // 获取表单信息\n    // console.log($("#contact").serialize());  \n  })\n  function sendemail() {\n    $.post("/sendemail", $("#contact").serialize(), function (res, error) {\n      if (res == \'ok\') {  \n        addtip("发送消息成功", "success");\n        settimeout(() => {\n          window.location.reload();\n          sessionstorage.removeitem(storagename);\n          issend == false;\n        }, 1500);\n      } else {\n        console.log("失败的原因：", error);\n        addtip("发送失败，可能发送超时或消息被拦截，请稍后再重试", "tip");\n      }\n    });\n  }\n\n  // 添加消息提示\n  function addtip(content, type) {\n\n    var time = new date().gettime();\n    // 获取最后消息提示元素的高度\n    var top = $(".tip:last").attr("data-top") == undefined ? 0 : $(".tip:last").attr("data-top");\n    // 如果产生两个以上的消息提示，则出现在上一个提示的下面，即高度添加，否则默认 20\n    var lasttop = parseint(top) + ($(".tip").length > 0 ? $(".tip:last").outerheight() + 17 : 20);\n\n    if (type == "success" || type == 1) {\n      $("#page-wraper").append(`<div class="tip tip-success ${time}" style="top: ${parseint(top)}px" data-top="${lasttop}"><i class="iconfont icon-dagouyouquan icon"></i><p class="tip-success-content">${content}</p></div>`);\n    } else if (type == "danger" || type == 2) {\n      $("#page-wraper").append(`<div class="tip tip-danger ${time}" style="top: ${parseint(top)}px" data-top="${lasttop}><i class="iconfont icon-cuowu icon"></i><p class="tip-danger-content">${content}</p></div>`);\n    } else if (type == "info" || type == 3) {\n      $("#page-wraper").append(`<div class="tip tip-info ${time}" style="top: ${parseint(top)}px" data-top="${lasttop}><i class="iconfont icon-info icon"></i><p class="tip-info-content">${content}</p></div>`);\n    } else if (type == "warning" || type == 4) {\n      $("#page-wraper").append(`<div class="tip tip-warning ${time}" style="top: ${parseint(top)}px" data-top="${lasttop}><i class="iconfont icon-gantanhao icon"></i><p class="tip-warning-content">${content}</p></div>`);\n    }\n\n    // 动画往下滑动\n    $("." + time).animate({\n      top: parseint(lasttop) + "px",\n      opacity: "1",\n    })\n\n    // 消息提示 3 秒后隐藏并被删除\n    settimeout(() => {\n      $("." + time).animate({\n        top: "0px",\n        opacity: "0",\n      });\n\n      settimeout(() => {\n        $("." + time).remove();\n      }, 500);\n    }, 3000);\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n\n\n消息提示效果的 css 文件内容：\n\n/* 消息提示样式 */\n.tip{\n  position: fixed;\n  display: flex;\n  height: 48px;\n  top: -10px;\n  left: 50%;\n  opacity: 0;\n  min-width: 320px;\n  transform: translatex(-50%);\n  transition: opacity .3s linear,top .4s,transform .4s;\n  z-index: 99999;\n  padding: 15px 15px 15px 20px;\n  border: 1px solid #ebeef5;\n  border-radius: 4px;\n  grid-row: 1;\n  line-height: 17px;\n}\n.tip p{\n  line-height: 17px;\n  margin: 0;\n  font-size: 14px;\n}\n.icon{\n  margin-right: 10px;\n  line-height: 17px;\n}\n.tip-success  {\n  color: #67c23a;\n  background-color: #f0f9eb;\n  border-color: #e1f3d8;\n}\n.tip-success .tip-success-content{\n  color: #67c23a;\n}\n.tip-danger {\n  color: #f56c6c;\n  background-color: #fef0f0;\n  border-color: #fde2e2;\n}\n.tip-danger .tip-danger-content{\n  color: #f56c6c;\n}\n.tip-info {\n  background-color: #edf2fc;\n  border-color: #ebeef5;\n}\n.tip-info .tip-info-content{\n  color: #909399;\n}\n\n.tip-warning {\n  color: #e6a23c;\n  background-color: #fdf6ec;\n  border-color: #faecd8;\n}\n.tip-warning .tip-warning-content{\n  margin: 0;\n  color: #e6a23c;\n  line-height: 21px;\n  font-size: 14px;\n}\n/* 下面是二维码样式 */\n.social-tip{\n  margin-bottom: 170px;\n  display: none;\n} \n.square{\n    width: 0;\n    height: 0;\n    border-bottom: 7px solid rgba(118, 25, 172, 0.3);\n    border-right: 7px solid transparent;\n    border-left: 7px solid transparent;\n    position: relative;\n    left: 36%;\n}\n.social-info{\n  width: 200px;\n  position: absolute;\n  line-height: 48px;\n  left: -95%;\n  margin-left: -40px;\n  background-color: rgba(118, 25, 172, 0.3);\n  color: #fff;\n  padding: 0 15px 15px;\n}\n.social-info img{\n  width: 160px;\n  height: 160px;\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n\n\n如下效果：\n\n\n\n我设计了四个提示，分别是成功绿色，提示灰色，警告黄色，错误红色。而提示语前面的图标，需要自己去阿里云的矢量库进行获取，并在首页引用，矢量库跳转。\n\n\n# 404部署\n\n你喜欢 nginx 自带的 404 页面吗？我可能不是特别喜欢，所以我们可以自定义好看的 404 页面，又或者去网上下载别人做好的 404 页面模板。如我的 404 页面如图：\n\n\n\n点击头像还能播放音乐。\n\n利用 xftp 将 404 页面上传到服务器上，我在 nginx 根目录下创建了一个 404 文件夹，将 404 页面和其 css 和 js 文件放到这个 404 文件夹里。\n\n目录结构：\n\n根目录\n|—— 404（这是个目录）\n│   ├── 404.html（ 404 页面）\n│   ├── css（样式目录）\n│   ├── img（图片目录）\n│   ├── js（javascript 目录）\n|\t├── music（音乐目录）\n|\n├── index.html（其他页面）\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上传后到 nginx 后，养成好习惯，打开 404.html，修改 css、js 文件的引入路径，因为 nginx 的获取资源规则和本地的不一样。\n\n记得开头加 /，改为：（部分）\n\n<link rel="stylesheet" href="/404/css/ghost.css">\n<script type="text/javascript" src="/404/js/jquery.min.js"><\/script>\n\n\n1\n2\n\n\n然后在配置文件修改 404 页面的访问路径\n\n\n\n\n\n\n\n \n \n \n \n \n\n\n\n\n\nserver {\n    listen 431;\t\t# 431 是 https 的默认端口，80 是 http 的默认端口\n    server_name youngkbt.cn;\n    # ...... 其他 location\n    \n    error_page   404 500 502 503 504 /404.html;\n    location = /404.html {\n        root    /usr/local/openresty/nginx/html/404;\n        index 404.html;\n    }\n    \n    # ...... 其他 location\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n此时你随便访问我的服务器地址，如 https://www.youngkbt.cn/aaa 那么就会显示我的 404 页面。在该页面中，点击我的头像后，音乐会伴随头像的旋转而缓缓响起，静静享受 404 带有的静谧时刻。\n\n\n# 博客部署\n\n我的博客已经部署在 github 和 gitee 中，如果你看了上一个文章，部署自己的博客到了服务器，那么就请在 nginx 设置一个 location 模块，进行跳转吧。\n\n我设置了两个 location 模块，当输入 /notes 或者 /note-blog 的时候，都会跳转到我的博客首页\n\nlocation /notes {\n    rewrite ^/notes/(\\w*)$ /notes-blog/$1;\n}\nlocation /notes-blog {\n    root /home/kbt;\n    index index.html;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n实际上，最终都会跳到 /note-blog 的 location 模块里。\n\n我们不仅可以设置博客的 location，也可以设置浏览器的缓存静态文件时间，因为博客的静态文件太多，当用户每次访问都从 nginx 服务器获取静态文件，那显然不理智，我们可以让用户访问过的静态文件，缓存到用户的浏览器中，这样，用户再次访问博客的时候，直接从浏览器本地获取，打开的速度非常快。\n\n我设置了静态文件缓存 7 天，html 文件缓存 1 天\n\nlocation ~ /note-blog/.*\\.(js|css|png|jpg|jpeg|gif)$ {\n    root /home/kbt;\n    expires 7d;  # 缓存七天\n}\n\nlocation ~ /note-blog/.*\\.(html)$ {\n    root /home/kbt;\n    expires 1d;  # 缓存一天\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n看到 root 了吗，我的博客并没有放在 nginx 的默认路径下，而是由普通用户 kbt 管理。防止滥用 root 权限，避免被别人恶意访问。\n\n\n# 邮箱部署\n\n建议你看到这里马上停住，然后点击 测试发送邮箱，输入你的邮箱，进行发送，体验之后再来学习，会有更大的收获和兴趣。\n\n邮箱项目我使用了 node 和 express 来搭建简单的服务器，然后利用 nodemailer 进行邮件发送，log4j.js 进行日志信息存储。\n\n这是一个 node 简单项目，安装的依赖只有三个，express、nodemailer、log4js。\n\n\n# 邮箱源码\n\n我的 package.json 文件内容如下：\n\n{\n    "name": "email",\n    "version": "1.0",\n    "private": true,\n    "scripts": {\n        "dev": "node app.js"\n    },\n    "dependencies": {\n        "express": "^4.17.1",\n        "log4js": "^6.3.0",\n        "nodemailer": "^6.7.2"\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n依赖只有三个，如何安装呢，我使用 yarn 进行安装。\n\nyarn add express --save\nyarn add log4js --save\nyarn add nodemailer --save\n\n\n1\n2\n3\n\n\n安装完，我们先编写 log.js 文件，实现日志功能\n\n// 引入插件 log4js  \nvar log4js = require(\'log4js\')\nlog4js.configure({\n    appenders: {\t// 配置日志文件\n        access: {    // 访问日志的 name\n            type: \'file\',     \n            filename: "logs/access.log",\n            layout: {\n                type: \'pattern\',\n                pattern: \'[%d{yyyy-mm-dd hh:mm:ss sss}] [%p] %c - %m\'\n            },\n        },\n        error: {    // 错误日志的 name\n            type: \'file\',\n            filename: "logs/error.log",\n            layout: {   // 定义日志输出的样式\n                type: \'pattern\',\n                pattern: \'[%d{yyyy mm dd hh:mm:ss sss}] [%p] %c - %m%n\' // 日志输出时间格式\n            },\n        },\n    },\n\n    categories: {\t// 配置日志级别，以及引用 appenders 配置的日志文件\n        default: { appenders: [\'access\'], level: \'info\' },  // 上方 appenders 的 name\n        error: { appenders: [\'error\'], level: \'error\' }\n    },\n})\n\nexports.logger = function (name) {  // name 取 categories 的 name\n    return log4js.getlogger(name || \'default\')\n};\nexports.use = function (app, logger) {\n    app.use(log4js.connectlogger(logger || log4js.getlogger(\'default\'), { level: \'info\', format: \'请求类型/uri：「 :method:url 」\' })) // 请求类型/uri 格式设置\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n文件内容不难理解，我们首先配置要输出的日志文件路径以及名字，然后配置日志输出的信息时间格式，然后配置日志的格式，如 info 或者 error，接着配置请求类型/uri 格式，最后暴露出去。\n\n日志的输出内容如图所示：\n\n\n\n编写 route.js 文件，相信学过 express 的伙伴已经非常熟悉了\n\nconst express = require("express");\nconst router = express.router();\n// 引入日志\nconst logger = require("./log").logger();\nconst errlogger = require("./log").logger("error");\n// 引入邮件发送功能\nvar nodemailer = require(\'nodemailer\');\n\nrouter.post("/email", (req, res) => {\n    var data = req.body;\n    // 获取发送的模板\n    const myhtml = require("./email/emailhtml").myhtml(data);\n    const otherhtml = require("./email/emailhtml").otherhtml(data);\n    // 创建连接\n    var transporter = nodemailer.createtransport({\n        host: "smtp.163.com",\n        port: 465, // smtp 端口\n        secureconnection: true, // 使用 ssl 方式（安全方式，防止被窃取信息）\n        auth: {\n            user: \'kele_bingtang@163.com\',\n            // 这里密码不是 qq 密码，是你设置的 smtp 密码\n            pass: \'gjqdwnwvgyevtsmb\'\n        }\n    });\n\n    // 邮件参数（我的）\n    var myoptions = {\n        from: \'kele_bingtang@163.com\', // 发件地址\n        to: \'kele_bingtang@163.com,2456019588@qq.com\', // 收件列表\n        subject: data.subject, // 标题\n        // text 和 html 同时发送只支持一种\n        html: myhtml,\n\n        //  text: "测试",\n        /*  attachments:[{  // 附件\n       filename: \'\',   // 附件名\n       path: \'\'    // 附件路径\n     }] */\n    };\n\n    // 邮件参数（发件人）\n    var otheroptions = {\n        from: \'kele_bingtang@163.com\', // 发件地址\n        to: `kele_bingtang@163.com,${data.email}`, // 收件列表\n        subject: "村长 的致谢", // 标题\n        // text 和 html 同时发送只支持一种\n        html: otherhtml,\n    };\n\n    // 发送邮件（给发件人）\n    transporter.sendmail(otheroptions, function (error, info) {\n        if (error) {\n            errlogger.error("发送给「 " + data.name + " 」失败，原因：「 " + error + " 」");\n            res.status(200).send("error：" + error);\n        }else{\n            logger.info("发送给「 " + data.name + " 」成功");\n        }\n        console.log("发送给发件人的响应信息：");\n        console.log(info);\n    });\n\n\n    // 发送邮件（给我）\n    transporter.sendmail(myoptions, function (error, info) {\n        console.log("错误信息：" + error);\n        if (error) {\n            errlogger.error("发送给「 村长 」失败，原因：「 " + error + " 」");\n            res.status(200).send("error：" + error);\n        }else{\n            res.status(200).send("ok");\n            logger.info("发件邮箱：「 " + info.envelope.from + " 」，收件邮箱：「 " + info.envelope.to + " 」");\n            logger.info("响应结果：「 " + info.response + " 」");\n            console.log("发送给我的响应信息：");\n            console.log(info);\n        }\n    });\n\n    logger.info("发件人：「 " + data.name + " 」，发件人的邮箱：「 " + data.email + " 」，发件主题：「 " + data.subject + " 」，发件消息：「 " + data.message + " 」");\n\n    settimeout(() => {\n        logger.info("发送一次邮件的日志分割线 ------------------------\\n");\n    }, 4000);\n\n    settimeout(() => {\n        transporter.close();\n    }, 10000);\n\n})\n\nmodule.exports = router;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n\n\n第 12 和 13 行引用自定义的邮件页面模板，模板大家根据自己的需求设计邮件页面。\n\n我的邮件页面代码位于根目录下的 email 目录，名字叫 emailhtml，源码为：\n\n// 发送给我\nexports.myhtml = function(data){\n    return `<div style="width: 600px;margin: 0 auto;">\n            <includetail>\n              <table style="text-align: center; font-size: 16px; color: #333333; border-spacing: 0px; border-collapse: collapse; width: 580px; direction: ltr">\n                  <tbody>\n                  <tr>\n                      <td style="font-size: 14px; padding: 0px 0px 7px 0px; text-align: center;color: #0044cc">\n                          ${data.name} 在 村长 首页发送给您\n                      </td>\n                  </tr>\n                  <tr style="background-color: #2279bd">\n                      <td style="padding: 0px">\n                          <table style="border-spacing: 0px; border-collapse: collapse; width: 100%">\n                              <tbody>\n                              <tr>\n                                  <td style="padding: 0px; text-align: center;">\n                                      <img src="https://cdn.jsdelivr.net/gh/kele-bingtang/static/user/20211205131212.jpg" alt="请在上方选择信任，以此显示头像">\n                                  </td>\n                              </tr>\n                              <tr>\n                                  <td style="font-size: 38px; color: #ffffff; padding: 12px 22px 4px 22px; text-align: center;" colspan="3">\n                                      村长\n                                  </td>\n                              </tr>\n                              <tr>\n                                  <td style="font-size: 20px; color: #ffffff; padding: 0px 22px 18px 22px; text-align: center;" colspan="3">\n                                    人闲车马慢，路遥星亦辞\n                                  </td>\n                              </tr>\n                              </tbody>\n                          </table>\n                      </td>\n                  </tr>\n                  <tr>\n                      <td style="background-color: #5ba9df; border-bottom-style: solid; border-bottom-color: #2279bd; border-bottom-width: 4px;">\n                          <table style="color: #333333; border-spacing: 0px; border-collapse: collapse; width: 100%; color: #fff">\n                              <tbody>\n                                <tr>\n                                  <td style="font-size: 18px; padding: 0px 0px 5px 0px;">\n                                    <p style="text-align: center">\n                                      <span style="font-weight:bold;">${data.name} </span>\n                                      <span>发送的主题：</span></p>\n                                      <p style="font-size: 16px; letter-spacing: 0.5px; text-indent: 16px; padding:0 20px; line-height: 30px; text-align: left;">\n                                      ${data.subject}\n                                    </p>\n                                  </td>\n                                </tr>\n                                <tr>\n                                  <td style="font-size: 18px; padding: 0px 0px 5px 0px;">\n                                    <p style="text-align: center; margin-top: 0;">\n                                      <span style="font-weight:bold;">${data.name} </span>\n                                      <span>发送的内容：</span>\n                                    </p>\n                                      <p style="font-size: 16px;letter-spacing: 0.5px; text-indent: 16px; padding:0 20px; line-height: 30px; text-align: left;">\n                                      ${data.message}\n                                    </p>\n                                  </td>\n                                </tr>\t\n                                <tr>\n                                    <td style="font-size: 16px; padding: 30px 20px; text-align: center">\n                                      如果您希望回复他/她，请发送到他/她的邮箱：\n                                      <p style="color: #0044cc; font-weight: bold">${data.email}</p>\n                                    </td>\n                                </tr>\n                              </tbody>\n                          </table>\n                      </td>\n                  </tr>\n                  <tr>\n                      <td style="padding: 35px 0px; color: #b2b2b2; font-size: 12px">\n                          from 村长\n                          <br>\n                          this is a website\n                          <br>\n                          ${new date().getfullyear()}-${new date().getmonth() + 1 == 13 ? 12 : new date().getmonth() + 1}-${new date().getdate() > 10 ? new date().getdate() : \'0\' + new date().getdate()}\n                            ${new date().gethours() > 10 ? new date().gethours() : \'0\' + new date().gethours()}:${new date().getminutes() > 10 ? new date().getminutes() : \'0\' + new date().getminutes()}:${new date().getseconds() > 10 ? new date().getseconds() : \'0\' + new date().getseconds()}\n                      </td>\n                  </tr>\n                  <tr>\n                      <td style="padding: 0px 0px 10px 0px; color: #b2b2b2; font-size: 12px">\n                          copyright 村长 website             \n                      </td>\n                  </tr>\n                  </tbody>\n              </table>\n            </includetail>\n          </div`;\n}\n\n// 发送给发件人\nexports.otherhtml = function(data){\n    return `<div style="width: 600px;margin: 0 auto;">\n            <includetail>\n              <table\n                style="text-align: center; font-size: 16px; color: #333333; border-spacing: 0px; border-collapse: collapse; width: 580px; direction: ltr">\n                <tbody>\n                  <tr>\n                    <td style="font-size: 14px; padding: 0px 0px 7px 0px; text-align: center;color: #0044cc">\n                      尊敬的 <span style="font-weight: bold;">${data.name}</span>，村长 感谢您的邮件\n                    </td>\n                  </tr>\n                  <tr style="background-color: #2279bd">\n                    <td style="padding: 0px">\n                      <table style="border-spacing: 0px; border-collapse: collapse; width: 100%">\n                        <tbody>\n                          <tr>\n                            <td style="padding: 0px; text-align: center;">\n                              <img src="https://cdn.jsdelivr.net/gh/kele-bingtang/static/user/20211205131212.jpg" alt="请在上方选择信任，以此显示头像">\n                            </td>\n                          </tr>\n                          <tr>\n                            <td style="font-size: 38px; color: #ffffff; padding: 12px 22px 4px 22px; text-align: center;"\n                              colspan="3">\n                              村长\n                            </td>\n                          </tr>\n                          <tr>\n                            <td style="font-size: 20px; color: #ffffff; padding: 0px 22px 18px 22px; text-align: center;"\n                              colspan="3">\n                              人闲车马慢，路遥星亦辞\n                            </td>\n                          </tr>\n                        </tbody>\n                      </table>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td\n                      style="background-color: #5ba9df; border-bottom-style: solid; border-bottom-color: #2279bd; border-bottom-width: 4px;">\n                      <table style="color: #333333; border-spacing: 0px; border-collapse: collapse; width: 100%; color: #fff">\n                        <tbody>\n                          <tr>\n                            <td style="font-size: 18px; padding: 0px 0px 5px 0px;">\n                              <p style="text-align: center">\n                                <span style="font-weight:bold">村长</span>\n                                <span>提示您：</span>\n                              </p>\n                              <p\n                                style="font-size: 16px; letter-spacing: 0.5px; text-indent: 32px; padding:0 20px; line-height: 30px; text-align: left;">\n                                本邮件由 村长\'s index 网站发送给您，\n                                <span style="color: #1546a8; font-weight: bold;">如果非本人操作，请忽略即可。</span>\n                              </p>\n                            </td>\n                          </tr>\n                          <tr>\n                            <td style="font-size: 18px; padding: 0px 0px 5px 0px;">\n                              <p style="text-align: center; margin-top: 0;">\n                                <span style="font-weight:bold">村长</span>\n                                <span>回复您：</span>\n                              </p>\n                              <p\n                                style="font-size: 16px;letter-spacing: 0.5px; text-indent: 32px; padding:0 20px; line-height: 30px; text-align: left;">\n                                感谢您提供的宝贵消息，我会根据您的内容尽快回复您，如果时间较延迟，请您见谅。\n                              </p>\n                            </td>\n                          </tr>\n                          <tr>\n                            <td style="font-size: 16px; padding: 30px 20px; text-align: center">\n                              如果您对我的网站感兴趣，请访问：\n                              <p style="color: #0044cc; font-weight: bold">\n                               <a href="youngkbt.cn" style="color: #0044cc; text-decoration: none">youngkbt.cn</a>\n                              </p>\n                              <p style="color: #0c3388;font-size: 14px; margin: 15px 0 0 0;">本网站仅是个人使用，并不带有商业用途</p>\n                            </td>\n                          </tr>\n                        </tbody>\n                      </table>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td style="padding: 35px 0px; color: #b2b2b2; font-size: 12px">\n                      from 村长\n                      <br>\n                      this is a website\n                      <br>\n                      ${new date().getfullyear()}-${new date().getmonth() + 1 == 13 ? 12 : new date().getmonth() + 1}-${new\n    date().getdate() > 10 ? new date().getdate() : \'0\' + new date().getdate()}\n                      ${new date().gethours() > 10 ? new date().gethours() : \'0\' + new date().gethours()}:${new\n    date().getminutes() > 10 ? new date().getminutes() : \'0\' + new date().getminutes()}:${new\n    date().getseconds() > 10 ? new date().getseconds() : \'0\' + new date().getseconds()}\n                    </td>\n                  </tr>\n                  <tr>\n                    <td style="padding: 0px 0px 10px 0px; color: #b2b2b2; font-size: 12px">\n                      copyright 村长 website\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </includetail>\n          </div>`\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n\n\n编写 express 的入口文件 app.js，监听 5678 端口\n\nconst express = require("express");\nconst router = require("./router");\nconst log = require("./log");\nconst app = express();\n\nlog.use(app);\napp.use(express.urlencoded({ extended: false }));\napp.use(express.json());\n\napp.use( ( request , response , next ) => {\n    response.header( \'access-control-allow-origin\' , \'*\') // 跨域最重要的一步 设置响应头\n    next(); // 执行 next 函数执行后续代码\n})\n\napp.use(\'/\',router);\n\napp.listen(\'5678\',() => {\n    console.log("5678 端口的服务器启动成功");\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n写完邮箱的功能，我们可以进行测试，进入邮箱项目的根目录，使用 node app.js 启动 node 项目。\n\nnode app.js\n\n\n1\n\n\n因为是 post 请求，所以使用 postman 等工具进行测试，访问 localhost:5678/email，填写 json 格式，包含 name、email、subject、message 四个参数的数据即可。\n\n\n\n\n# 官方镜像部署\n\n在本地编写测试完邮箱的功能后，我们将其上传到服务器，我上传的目录是 docker/node/email 下，然后需要服务器安装 node 环境，我使用的是 docker，所以直接拉取 node。\n\ndocker pull node\n\n\n1\n\n\n下载完 node 镜像后，不要马上启动它，因为 node 项目需要执行打包命令，生成 node_modules 目录，所以使用 dockerfile 文件来执行打包命令。\n\n在 docker/node/email 目录下，创建并编写 dockerfile 文件\n\ncd docker/node/email\nvim dockerfile\n\n\n1\n2\n\n\n添加如下内容：\n\nfrom node\t\t\t\t\t# 基于 node 镜像创建新的镜像\nworkdir /home/email\t\t\t# 创建默认工作目录\ncopy . /home/email\t\t\t# 将当前目录的所有内容拷贝到容器中\nrun npm i\t\t\t\t\t# 执行打包命令\nexpose 5678\t\t\t\t\t# 暴露 5678 端口\nentrypoint node ./app.js \t# 启动容器时，启动 app.js 文件\n\n\n1\n2\n3\n4\n5\n6\n\n\n不难看出，在生成 docker 镜像的同时，它会将当前目录下的所有内容拷贝到容器中，这些内容就是我们写的邮箱项目。接着它会执行打包命令 npm i，i 代表 install。然后暴露 5678 端口，最后在启动的时候，启动 app.js 文件，也就是执行项目。\n\n写好 dockerfile 文件，我们执行这个文件，构建基于 node 环境而搭建的「邮箱发送」镜像\n\ndocker build -t email:1.0 .\n\n\n1\n\n\n启动这个名叫 email、版本为 1.0 的容器，当启动这个容器的时候，内部就会执行 node ./app.js 命令，也就是 dockerfile 文件的 entrypoint 指令，部署项目。\n\ndocker run -d --name email \\\n-v /docker/node/email/router.js:/home/email/router.js \\\n-v /docker/node/email/app.js:/home/email/app.js \\\n-v /docker/node/email/log.js:/home/email/log.js \\\n-v /docker/node/email/logs:/home/email/logs \\\n-v /docker/node/email/email:/home/email/email \\\n--network web --network-alias email \\\nemail:1.0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n不要惊讶会有那么多启动命令，这里主要实现挂载功能，只要宿主机的文件发生改变，则容器内的文件也会同步改变，毕竟谁也无法确定自己写的文件以后都不会修改，对吧。\n\n至于第 7 行的 network 网络，因为 nginx 所处的网络是 web 网络，而想让 nginx 访问 node 项目，则需要让两者处于同一个网络上。 network-alias 是网络别名，nginx 会根据这个网络别名找到处于相同网络下的 node 项目，尽量与容器名保持一致。\n\n此时邮箱项目已经部署成功了，但是 nginx 还无法访问这个邮箱项目，因为我们没有配置 location 模块来访问邮箱项目。\n\nserver {\n    listen       5678;\n    server_name  localhost;\n\n    location /email {\n\t    proxy_pass http://email:5678;    # email 就是网桥别名，nginx 通过它找到 email 容器\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n实际上我并没有直接将上面的 server 模块放在配置文件里，而是将上面的内容放在新创建的 email_5678.conf 文件里，然后在配置文件进行转发。\n\n\n\n因为核心配置文件使用了 include 指令将 conf 目录下的所有 .conf 文件引入，所以我们只需要创建新的配置文件 email_5678.conf 即可。\n\n然后新的配置文件添加如下内容：\n\nserver {\n    listen 431;\t\t# 431 是 https 的默认端口，80 是 http 的默认端口\n    server_name www.youngkbt.cn;\n    # ...... 其他 location\n\n    # 转发给其他的 conf 文件\n    location /email {\n        proxy_pass http://localhost:5678;\n    }\n\n    # ...... 其他 location\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n当访问 /email 的时候，触发 431 端口的的 /email，然后内部就会执行 proxy_pass 指令，将请求转发给本地的 5678 端口，此时 email_5678.conf 文件正好监听这个 5678 端口，所以就会将 /email 请求发给自己的 location ，执行新的 proxy_pass 指令，而这个指令才是将请求发给 node 邮箱项目，触发邮箱的发送。\n\n记得重启 ngixn，使得配置文件生效。\n\n什么时候外界会访问 /email？\n\n自己写一个 <a> 标签，填写你的服务器的地址加上 /email 即可。\n\n我自己写的不是 <a> 标签，而是一个 js 文件，点击按钮触发 ajax 请求，具体源码请看 首页部署 的 js 文件。\n\n\n# 自定义镜像部署\n\n我在使用了基于官方镜像的部署几天后，发现这个镜像太大了，有 999mb，如图：\n\n\n\n于是我打算基于 centos7.9 构建一个 node 环境的镜像，这里提供 dockerfile 文件内容：\n\n# 这是早期的版本，直接引入 node 镜像，但是该镜像太大了，构建后 999mb，所以我就自己创建一个 nodejs 镜像\n# from node  \nfrom centos:7.9\n\n# nodejs 版本\narg node_version="v16.13.1"\n\nworkdir /opt/sendemail\n# 将当前目录的所有文件放入容器的 /opt/sendemail\ncopy . /opt/sendemail\n\n# 因为 copy 也会将当前的 nodejs 压缩包添加进入，所以可以删除掉\nrun rm -f /opt/sendemail/node-${node_version}-linux-x64.tar.xz\n\n# ------ 二选一，可注释 ------\n# 如果事先下载的 node 压缩包，则放入 dockerfile 所在的目录下，利用 add 传入并自动解压\nadd node-${node_version}-linux-x64.tar.xz /usr/local/\n# add 指令自动解压，所以可以删除传入的压缩包\nrun rm -f /usr/local/node-${node_version}-linux-x64.tar.xz\n# ------ ------ ------ ------ ------ ------ ------ ------ ------ ------\n\n# ------ 二选一，可注释 ------\n# 如果想要远程下载 node 压缩包，则取消下面的 run 指令注释\n#run yum install -y wget tar \\\n#     && cd /usr/local/ \\\n#     && wget https://nodejs.org/dist/${node_version}/node-${node_version}-linux-x64.tar.xz \\\n#     && tar xvf node-${node_version}-linux-x64.tar.xz \\\n#     && rm -f node-${node_version}-linux-x64.tar.xz\n# ------ ------ ------ ------ ------ ------ ------ ------ ------ ------\n\n# 将解压的 node 目录重命名\nrun cd /usr/local/ \\\n     && mv node-${node_version}-linux-x64 node\n\n# 将 node 命令添加至全局变量，包括了 node 和 npm\nenv path=$path:/usr/local/node/bin\n\n# 安装依赖包\nrun cd /opt/sendemail \\\n     && npm install\n\n# 暴露 7272 端口\nexpose 7272\n# 启动容器后，自动执行下面的命令来启动项目\nentrypoint node ./app.js\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n\n\n我都有注释说明，这里大概总结下：\n\n基于 centos7.9 系统搭建 node 镜像，首先下载 nodejs，传到与 dockerfile 同目录下，然后执行 dockerfile 的时候，将 nodejs 传入镜像里，自动解压，并将 node 和 npm 命令添加至全局变量，然后把邮箱项目的代码传入镜像，接着利用全局变量 npm 进行安装 nodes_modules，最后写 entrypoint 指令，该指令会在启动容器的时候自动启动项目，这样就不需要我们亲自进入容器里启动项目。\n\n如果不喜欢先下载 nodejs，传入服务器里，那么就在构建容器时使用 wget 下载即可，上面内容的注释就是 wget 相关操作，二选一。\n\n执行如下命令执行 dockerfile，构建镜像：\n\ndocker build -t email:2.0 .\n\n\n1\n\n\n可以看到构建的新镜像大小已经缩小一半左右，并且功能没有任何缺失，如图：\n\n\n\n2.0 版本的邮箱镜像构建源码我已经放到下载站点里了，如果需要，我在上方提供了下载地址，点击 序言 直达。\n\n\n# 消息提示效果代码\n\n在发送邮箱的过程，如果没有填写一些必要的信息，则会被提示，首页的提示是仿照 element ui，只有两个函数，使用起来非常简单：\n\n/**\n * 添加消息提示\n * content：内容\n * type：弹窗类型（tip、success、warning、danger）\n * startheight：第一个弹窗的高度，默认 50\n * dietime：弹窗消失时间（毫秒），默认 3000 毫秒\n */\nfunction addtip(content, type, startheight = 50, dietime = 3000) {\n  var tip = document.queryselectorall(".tip");\n  var time = new date().gettime();\n  // 获取最后消息提示元素的高度\n  var top = tip.length == 0 ? 0 : tip[tip.length - 1].getattribute("data-top");\n  // 如果产生两个以上的消息提示，则出现在上一个提示的下面，即高度添加，否则默认 50\n  var lasttop =\n    parseint(top) +\n    (tip.length != 0 ? tip[tip.length - 1].offsetheight + 17 : startheight);\n  let div = document.createelement("div");\n  div.classname = `tip tip-${type} ${time}`;\n  div.style.top = parseint(top) + "px";\n  div.setattribute("data-top", lasttop);\n  if (type == "info" || type == 1) {\n    div.innerhtml = `<i class="iconfont icon-info icon"></i><p class="tip-info-content">${content}</p>`;\n  } else if (type == "success" || type == 2) {\n    div.innerhtml = `<i class="iconfont icon-dagouyouquan icon"></i><p class="tip-success-content">${content}</p>`;\n  } else if (type == "danger" || type == 3) {\n    div.innerhtml = `<i class="iconfont icon-cuowu icon"></i><p class="tip-danger-content">${content}</p>`;\n  } else if (type == "warning" || type == 4) {\n    div.innerhtml = `<i class="iconfont icon-gantanhao icon"></i><p class="tip-warning-content">${content}</p>`;\n  }\n  document.body.appendchild(div);\n  let timetip = document.getelementsbyclassname(time)[0];\n  settimeout(() => {\n    timetip.style.top = parseint(lasttop) + "px";\n    timetip.style.opacity = "1";\n  }, 10);\n  // 消息提示 dietime 秒后隐藏并被删除\n  settimeout(() => {\n    timetip.style.top = "0px";\n    timetip.style.opacity = "0";\n    // 下面的所有元素回到各自曾经的出发点\n    var alltipelement = nextalltipelement(timetip);\n    for (let i = 0; i < alltipelement.length; i++) {\n      var next = alltipelement[i];\n      var top =\n        parseint(next.getattribute("data-top")) - next.offsetheight - 17;\n      next.setattribute("data-top", top);\n      next.style.top = top + "px";\n    }\n    settimeout(() => {\n      timetip.remove();\n    }, 500);\n  }, dietime);\n}\n/**\n * 获取后面的兄弟元素\n */\nfunction nextalltipelement(elem) {\n  var r = [];\n  var n = elem;\n  for (; n; n = n.nextsibling) {\n    if (n.nodetype === 1 && n !== elem) {\n      r.push(n);\n    }\n  }\n  return r;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n\n\ncss 样式：\n\n/* 提示框元素 */\n.tip {\n  position: fixed;\n  display: flex;\n  top: -10px;\n  left: 50%;\n  opacity: 0;\n  min-width: 320px;\n  transform: translatex(-50%);\n  transition: opacity 0.3s linear, top 0.4s, transform 0.4s;\n  z-index: 99999;\n  padding: 15px 15px 15px 20px;\n  border: 1px solid #ebeef5;\n  border-radius: 4px;\n  grid-row: 1;\n  line-height: 17px;\n}\n.tip p {\n  line-height: 17px;\n  margin: 0;\n  font-size: 14px;\n}\n.icon {\n  margin-right: 10px;\n  line-height: 17px;\n}\n.tip-success {\n  color: #67c23a;\n  background-color: #f0f9eb;\n  border-color: #e1f3d8;\n}\n.tip-success .tip-success-content {\n  color: #67c23a;\n}\n.tip-danger {\n  color: #f56c6c;\n  background-color: #fef0f0;\n  border-color: #fde2e2;\n}\n.tip-danger .tip-danger-content {\n  color: #f56c6c;\n}\n.tip-info {\n  background-color: #edf2fc;\n  border-color: #ebeef5;\n}\n.tip-info .tip-info-content {\n  color: #909399;\n}\n.tip-warning {\n  color: #e6a23c;\n  background-color: #fdf6ec;\n  border-color: #faecd8;\n}\n.tip-warning .tip-warning-content {\n  margin: 0;\n  color: #e6a23c;\n  line-height: 21px;\n  font-size: 14px;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n\n\n图片是阿里云的图标库，在线地址：\n\n<link rel="stylesheet" href="//at.alicdn.com/t/font_3114978_qe0b39no76.css">\n\n\n1\n\n\n使用只需要调用 addtip 即可：\n\nfunction test() {\n    var hours = new date().gethours();\n    var minutes = new date().getminutes();\n    var seconds = new date().getseconds();\n    hours = hours < 10 ? "0" + hours : hours;\n    minutes = minutes < 10 ? "0" + minutes : minutes;\n    seconds = seconds < 10 ? "0" + seconds : seconds;\n    if (hours >= 6 && hours < 11) {\n        addtip(\n            `早上好呀~~，现在是 ${hours}:${minutes}:${seconds}，吃早餐了吗？😊🤭`,\n            "info",\n            50,\n            4000\n        );\n    } else if (hours >= 12 && hours <= 16) {\n        addtip(\n            `下午好呀~~，现在是 ${hours}:${minutes}:${seconds}，繁忙的下午也要适当休息哦🥤🏀~~`,\n            "info",\n            50,\n            4000\n        );\n    } else if (hours >= 16 && hours <= 19) {\n        addtip(\n            `到黄昏了~~，现在是 ${hours}:${minutes}:${seconds}，该准备吃饭啦🥗🍖~~`,\n            "info",\n            50,\n            4000\n        );\n    } else if (hours >= 19 && hours < 24) {\n        addtip(\n            `晚上好呀~~，现在是 ${hours}:${minutes}:${seconds}，该准备洗漱睡觉啦🥱😪~~`,\n            "info",\n            50,\n            4000\n        );\n    } else if (hours >= 0 && hours < 6) {\n        addtip(\n            `别再熬夜了~~，现在是 ${hours}:${minutes}:${seconds}，早点睡吧，让我们一起欣赏早上的太阳~~😇🛏`,\n            "info",\n            50,\n            4000\n        );\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n',charsets:{cjk:!0},lastUpdated:"2022/04/18, 13:57:13"},{title:"技巧 - 笔记",frontmatter:{title:"技巧 - 笔记",date:"2021-10-28T18:21:33.000Z",permalink:"/about/mdskill/",titleTag:"优质",categories:["关于 - 技巧"],tags:["技巧"],readingShow:"top"},regularPath:"/80.%E5%85%B3%E4%BA%8E/09.%E5%85%B3%E4%BA%8E%20-%20%E6%8A%80%E5%B7%A7/02.%E6%8A%80%E5%B7%A7%20-%20%E7%AC%94%E8%AE%B0.html",relativePath:"80.关于/09.关于 - 技巧/02.技巧 - 笔记.md",key:"v-223225e0",path:"/about/mdskill/",headers:[{level:2,title:"使用 emoji 表情",slug:"使用-emoji-表情",normalizedTitle:"使用 emoji 表情",charIndex:82},{level:2,title:"外部链接",slug:"外部链接",normalizedTitle:"外部链接",charIndex:97},{level:2,title:"文本高亮",slug:"文本高亮",normalizedTitle:"文本高亮",charIndex:105},{level:2,title:"代码高亮",slug:"代码高亮",normalizedTitle:"代码高亮",charIndex:113},{level:2,title:"徽章",slug:"徽章",normalizedTitle:"徽章",charIndex:121},{level:3,title:"内置",slug:"内置",normalizedTitle:"内置",charIndex:129},{level:3,title:"外置",slug:"外置",normalizedTitle:"外置",charIndex:137},{level:2,title:"信息框容器",slug:"信息框容器",normalizedTitle:"信息框容器",charIndex:143},{level:2,title:"布局容器",slug:"布局容器",normalizedTitle:"布局容器",charIndex:152},{level:3,title:"我是居中的内容",slug:"我是居中的内容",normalizedTitle:"我是居中的内容",charIndex:162},{level:2,title:"代码块选项卡",slug:"代码块选项卡",normalizedTitle:"代码块选项卡",charIndex:173},{level:2,title:"普通卡片列表",slug:"普通卡片列表",normalizedTitle:"普通卡片列表",charIndex:183},{level:3,title:"语法",slug:"语法",normalizedTitle:"语法",charIndex:195},{level:2,title:"图文卡片列表",slug:"图文卡片列表",normalizedTitle:"图文卡片列表",charIndex:201},{level:3,title:"语法",slug:"语法-2",normalizedTitle:"语法",charIndex:195},{level:2,title:"Tabs插件",slug:"tabs插件",normalizedTitle:"tabs插件",charIndex:219},{level:2,title:"Demo插件（因为兼容问题，目前已经不使用）",slug:"demo插件-因为兼容问题-目前已经不使用",normalizedTitle:"demo插件（因为兼容问题，目前已经不使用）",charIndex:229}],excerpt:'<div class="custom-block note"><p class="custom-block-title">笔记</p>\n<p>如果想拥有更多丰富的笔记表现力，让自己阅读时，不处于大片黑白的世界里，本内容会让你的笔记句句深入记忆的深处😸</p>\n<div class="custom-block right">\n<p>2021-10-28 @村长</p>\n</div>\n</div>\n',headersStr:"使用 emoji 表情 外部链接 文本高亮 代码高亮 徽章 内置 外置 信息框容器 布局容器 我是居中的内容 代码块选项卡 普通卡片列表 语法 图文卡片列表 语法 Tabs插件 Demo插件（因为兼容问题，目前已经不使用）",content:"笔记\n\n如果想拥有更多丰富的笔记表现力，让自己阅读时，不处于大片黑白的世界里，本内容会让你的笔记句句深入记忆的深处😸\n\n2021-10-28 @村长\n\n\n\n * 使用 emoji 表情\n * 外部链接\n * 文本高亮\n * 代码高亮\n * 徽章\n   * 内置\n   * 外置\n * 信息框容器\n * 布局容器\n   * 我是居中的内容\n * 代码块选项卡\n * 普通卡片列表\n   * 语法\n * 图文卡片列表\n   * 语法\n * Tabs插件\n * Demo插件（因为兼容问题，目前已经不使用）\n\n\n\n笔记\n\n本内容来自 VuePress官网 和 vdoing主题官网，有部分是自己总结的。\n\n信息框容器后的内容，基本都是 vdoing主题 带有的。\n\n2021-10-28 @村长\n\n\n# 使用 emoji 表情\n\n阅读大片大片的文字难免产生视觉疲劳，而使用 emoji 表情，不仅缓解精神的渐眠，也会胜过千言。\n\n在 markdown 里，使用 :表情: 输入表情，如\n\n你好:smile:，我喜欢:dog:，我小时候经常拿:100:分哦~~~，欢迎来到我的博客:heart:，一起学习吧:muscle:\n\n\n1\n\n\n效果如下：\n\n> 你好😄，我喜欢🐶，我小时候经常拿💯分哦~~~，欢迎来到我的博客❤️，一起学习吧💪\n\n很多指令肯定是记不了的，我们可以也可以去特定的网站获取表情的格式。也可以 copy 一个表情过来，markdown 自动解析表情。\n\n分享一些 emoji 网站：\n\n * emoji 表情备忘录：有很多表情的格式(:表情:)\n * emoji 表情：有很多表情可以copy\n * gitmoji 通过 emoji 表达 git 的操作内容\n\n> windows 系统下按 Win + . 快速打开表情选择框（不是右侧小键盘的 .）\n\n\n# 外部链接\n\n使用外部链接，文字会变色，并且可以点击跳转，格式如下：\n\n[VuePress官网](https://vuepress.vuejs.org/zh/)\n\n\n1\n\n\n效果：\n\nVuePress官网\n\n\n# 文本高亮\n\n使用 <mark> 标签或者 `` 让文本高亮。\n\n<mark> 标签我经常用于文字的突出，如果是一段字符串，我是用的是 `` 包裹起来。\n\n`Vdoing` 是一款简洁高效的 <mark>知识管理&博客</mark> 主题\n\n\n1\n\n\nVdoing 是一款简洁高效的 知识管理&博客 主题\n\n\n# 代码高亮\n\n突出代码块的某些行，使用 {行数-行数}、{行数,行数} 格式，如\n\n输入：\n\n``` js {2,5-7,13}\nreturn {\n      // 数据\n      options,\n      activeKey,\n      sourceLabels,\n      sourceForm,\n      addForm,\n      addRules,\n      sourceRules,\n      // 函数\n      displayRender,\n      submitProdoce,\n      onAddClose,\n    };\n```\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n输出：\n\n\n\n \n\n\n \n \n \n\n\n\n\n\n \n\n\n\nreturn {\n      // 数据\n      options,\n      activeKey,\n      sourceLabels,\n      sourceForm,\n      addForm,\n      addRules,\n      sourceRules,\n      // 函数\n      displayRender,\n      submitProdoce,\n      onAddClose,\n    };\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n * 行数区间: 例如 {5-8}, {3-10}, {10-17}\n * 多个单行: 例如 {4,7,9}\n * 行数区间与多个单行: 例如 {4,7-13,16,23-27,40}\n\n\n# 徽章\n\n\n# 内置\n\n官方自带。详细使用可前往官网 Badge。\n\n#### 《沁园春·雪》 <Badge text=\"摘\"/>\n北国风光<Badge text=\"注释\" type=\"warning\"/>，千里冰封，万里雪飘。\n\n> <Badge text=\"译文\" type=\"error\" vertical=\"middle\"/>: 北方的风光。\n\n\n1\n2\n3\n4\n\n\n * type 有三个参数：tip、warning、error。默认是 tip\n\n * vertical 有两个参数：top、middle。默认是 top\n\n直接在 markdown 文件使用，效果如下：\n\n# 《沁园春·雪》\n\n北国风光，千里冰封，万里雪飘。\n\n> : 北方的风光。\n\n\n# 外置\n\n如果想用更多的自定义徽章，可使用 Shields来生成\n\n![stars](https://img.shields.io/github/stars/Kele-Bingtang/notes-blog)\n![stars](https://img.shields.io/github/stars/Kele-Bingtang/notes-blog?style=social)\n![kbt](https://img.shields.io/badge/kbt-冰糖-green)\n\n\n1\n2\n3\n\n\n\n\n如果没接触过 Shields，Shields 教程传送门\n\n\n# 信息框容器\n\n以下一些内容是 Vdoing 主题提供，并非官方提供。\n\n输入：\n\n::: tip\n这是一条提示\n:::\n\n::: warning\n这是一条注意\n:::\n\n::: danger\n这是一条警告\n:::\n\n::: note\n这是笔记容器，主题自带，官方没有\n:::\n\n::: tip 我的自定义标题\n自定义标题的提示框\n:::\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n输出：\n\n提示\n\n这是一条提示\n\n注意\n\n这是一条注意\n\n警告\n\n这是一条警告\n\n笔记\n\n这是笔记容器，主题自带，官方没有\n\n我的自定义标题\n\n自定义标题的提示框\n\n如果想要折叠的容器，如下：也可以自定义标题\n\n::: details\n这是一个详情块，在 IE / Edge 中不生效\n```js\nconsole.log('这是一个详情块')\n```\n:::\n\n\n1\n2\n3\n4\n5\n6\n\n点击查看\n\n这是一个详情块，在 IE / Edge 中不生效\n\nconsole.log('这是一个详情块')\n\n\n1\n\n\n\n# 布局容器\n\n::: center\n  ### 我是居中的内容\n  （可用于标题、图片等的居中）\n:::\n\n::: right\n  [我是右浮动的内容](https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/user/avatar2.png)\n:::\n\n::: theorem VuePress\nVue 驱动的静态网站生成器\n::: right\n来自 [官网](https://vuepress.vuejs.org/zh/)\n:::\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 我是居中的内容\n\n（可用于标题、图片等的居中）\n\n我是右浮动的内容\n\nVuePress\n\nVue 驱动的静态网站生成器\n\n来自 VuePress官网\n\n提示\n\n没有 left 和 top、bottom\n\n\n# 代码块选项卡\n\n在 <code-group> 中嵌套 <code-block> 来配合使用。在 <code-block> 标签添加 title 来指定tab标题，active 指定当前 tab：\n\n<code-group>\n  <code-block title=\"YARN\" active>\n  ```bash\n  yarn add vuepress-theme-vdoing -D\n  ```\n  </code-block>\n\n  <code-block title=\"NPM\">\n  ```bash\n  npm install vuepress-theme-vdoing -D\n  ```\n  </code-block>\n</code-group>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n效果：\n\nyarn add vuepress-theme-vdoing -D\n\n\n1\n\n\nnpm install vuepress-theme-vdoing -D\n\n\n1\n\n\n注意\n\n请在 <code-group> 标签与 markdown 内容之间使用空行隔开，否则可能会解析不出来。\n\n提示\n\nVdoing 解释该组件仅适用于放置代码块，放其他内容在体验上并不友好。经过测试，我放入文字也是可以的。\n\n而且 <code-block> 放在 <code-group> 里时，首行缩进两个空格，经过测试，四个空格 出问题。\n\n如果你喜欢 ::: tabs 代替 <code-group>，那么我们可以下载 vuepress-plugin-tabs 插件。点击跳到 Tabs 插件安装。\n\n\n# 普通卡片列表\n\n如果想使用 友链 功能，但是 vdoing 主题并没有直接在首页实现该功能，要么使用 卡片列表，要么自己手动实现html。而 卡片列表 目前只能使用在 markdown 文档里，下方介绍。\n\n普通卡片列表容器，可用于 友情链接、项目推荐、诗词展示 等。\n\n输入：\n\n::: cardList\n```yaml\n- name: butcher2000\n  desc: 即使再小的帆，也能远航\n  avatar: https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/user/20211029181901.png\n  link: https://blog.csdn.net/weixin_46827107\n  bgColor: '#CBEAFA' # 可选，默认var(--bodyBg)。颜色值有#号时请添加单引号\n  textColor: '#6854A1' # 可选，默认var(--textColor)\n\n- name: George Chan\n  desc: 让我给你讲讲他的传奇故事吧\n  avatar: https://z3.ax1x.com/2021/09/30/4oKMVI.jpg\n  link: https://cyc0819.top/\n  bgColor: '#FFB6C1'\n  textColor: '#621529'  \n  \n- name: Evan's blog\n  desc: 前端的小学生\n  avatar: https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200103123203.jpg\n  link: https://xugaoyi.com/\n  bgColor: '#B9D59C'\n  textColor: '#3B551F'\n```\n:::\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n输出：\n\nbutcher2000\n\n即使再小的帆，也能远航\n\nGeorge Chan\n\n让我给你讲讲他的传奇故事吧\n\nEvan's blog\n\n前端的小学生\n\n- name: butcher2000\n  desc: 即使再小的帆，也能远航\n  avatar: https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/user/20211029181901.png\n  link: https://blog.csdn.net/weixin_46827107\n  bgColor: '#CBEAFA' # 可选，默认var(--bodyBg)。颜色值有#号时请添加单引号\n  textColor: '#6854A1' # 可选，默认var(--textColor)\n\n- name: George Chan\n  desc: 让我给你讲讲他的传奇故事吧\n  avatar: https://z3.ax1x.com/2021/09/30/4oKMVI.jpg\n  link: https://cyc0819.top/\n  bgColor: '#FFB6C1'\n  textColor: '#621529'  \n  \n- name: Evan's blog\n  desc: 前端的小学生\n  avatar: https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200103123203.jpg\n  link: https://xugaoyi.com/\n  bgColor: '#B9D59C'\n  textColor: '#3B551F'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 语法\n\n::: cardList <每行显示数量>\n``` yaml\n- name: 名称\n  desc: 描述\n  avatar: https://xxx.jpg # 头像，可选\n  link: https://xxx/ # 链接，可选\n  bgColor: '#CBEAFA' # 背景色，可选，默认var(--bodyBg)。颜色值有#号时请添加引号\n  textColor: '#6854A1' # 文本色，可选，默认var(--textColor)\n```\n:::\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n * <每行显示数量>：一行内显示多少个卡片，值范围 1~4，默认是 3 个，上方的卡片正好是三个，如果再多一个卡片，就会被换到下一行\n\n * 代码块需指定语言为 yaml\n\n * 代码块内是一个 yaml 格式的数组列表\n\n * 数组成员的属性有：\n   \n   * name：名称\n   * desc：描述\n   * avatar：头像，可选\n   * link：链接，可选\n   * bgColor：背景色，可选，默认 var(--bodyBg)。颜色值有 # 号时请添加引号\n   * textColor：文本色，可选，默认 var(--textColor)\n\n不指定颜色，默认为白色，如下演示：\n\n::: cardList 2\n```yaml\n- name: 《静夜思》\n  desc: 床前明月光，疑是地上霜。举头望明月，低头思故乡。\n  bgColor: '#F0DFB1'\n  textColor: '#242A38'\n  \n- name: Vdoing\n  desc: 🚀一款简洁高效的VuePress 知识管理&博客(blog) 主题\n  link: https://github.com/xugaoyi/vuepress-theme-vdoing\n  bgColor: '#DFEEE7'\n  textColor: '#2A3344'\n```\n:::\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n《静夜思》\n\n床前明月光，疑是地上霜。举头望明月，低头思故乡。\n\nVdoing\n\n🚀一款简洁高效的VuePress 知识管理&博客(blog) 主题\n\n- name: 《静夜思》\n  desc: 床前明月光，疑是地上霜。举头望明月，低头思故乡。\n  \n- name: Vdoing\n  desc: 🚀一款简洁高效的VuePress 知识管理&博客(blog) 主题\n  link: https://github.com/xugaoyi/vuepress-theme-vdoing\n  bgColor: '#DFEEE7'\n  textColor: '#2A3344'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 图文卡片列表\n\n图文卡片列表容器，可用于 项目展示、产品展示 等。\n\n先看效果：\n\n标题\n\n描述内容描述内容描述内容描述内容描述内容描述内容描述内容描述内容\n\n村长\n\n标题\n\n描述内容描述内容描述内容描述内容描述内容描述内容描述内容描述内容\n\n村长\n\n标题\n\n描述内容描述内容描述内容描述内容描述内容描述内容描述内容描述内容\n\n村长\n\n- img: https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200529162253.jpg\n  link: https://xugaoyi.com/\n  name: 标题\n  desc: 描述内容描述内容描述内容描述内容描述内容描述内容描述内容描述内容 # 描述，可选\n  author: 村长 # 作者，可选\n  avatar: https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/user/avatar2.png # 头像，可选\n  \n- img: https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200530100256.jpg\n  link: https://xugaoyi.com/\n  name: 标题\n  desc: 描述内容描述内容描述内容描述内容描述内容描述内容描述内容描述内容\n  author: 村长\n  avatar: https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/user/avatar2.png\n  \n- img: https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200530100257.jpg\n  link: https://xugaoyi.com/\n  name: 标题\n  desc: 描述内容描述内容描述内容描述内容描述内容描述内容描述内容描述内容\n  author: 村长\n  avatar: https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/user/avatar2.png\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n::: cardImgList\n```yaml\n- img: https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200529162253.jpg\n  link: https://xugaoyi.com/\n  name: 标题\n  desc: 描述内容描述内容描述内容描述内容描述内容描述内容描述内容描述内容 # 描述，可选\n  author: 村长 # 作者，可选\n  avatar: https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/user/avatar2.png # 头像，可选\n  \n- img: https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200530100256.jpg\n  link: https://xugaoyi.com/\n  name: 标题\n  desc: 描述内容描述内容描述内容描述内容描述内容描述内容描述内容描述内容\n  author: 村长\n  avatar: https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/user/avatar2.png\n  \n- img: https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200530100257.jpg\n  link: https://xugaoyi.com/\n  name: 标题\n  desc: 描述内容描述内容描述内容描述内容描述内容描述内容描述内容描述内容\n  author: 村长\n  avatar: https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/user/avatar2.png\n```\n:::\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n# 语法\n\n::: cardImgList <每行显示数量>\n``` yaml\n- img: https://xxx.jpg # 图片地址\n  link: https://xxx.com # 链接地址\n  name: 标题\n  desc: 描述 # 可选\n  author: 作者名称 # 可选\n  avatar: https://xxx.jpg # 作者头像，可选\n```\n:::\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n * <每行显示数量> 数字，表示每行最多显示多少个，选值范围 1~4，默认 3。在小屏时会根据屏幕宽度减少每行显示数量。\n * 代码块需指定语言为 yaml\n * 代码块内是一个 yaml 格式的数组列表\n * 数组成员的属性有：\n   * img：图片地址\n   * link：链接地址\n   * name：标题\n   * desc：描述，可选\n   * author：作者名称，可选\n   * avatar：作者头像，可选\n\n\n# Tabs插件\n\n官网：https://github.com/pskordilakis/vuepress-plugin-tabs\n\n安装插件：\n\nyarn add vuepress-plugin-tabs vue-tabs-component\n\n\n1\n\n\nnpm install vuepress-plugin-tabs vue-tabs-component\n\n\n1\n\n\n在 .vuepress/styles/index.styl 添加如下内容：\n\n@require '~vuepress-plugin-tabs/dist/themes/default.styl'\n\n\n1\n\n\n在 .vuepress/config.js 中添加如下内容：\n\nmodule.exports = {\n  plugins: [ 'tabs' ]\n}\n\n\n1\n2\n3\n\n\n启动项目，下面是使用的 demo。\n\n:::: tabs cache-lifetime=\"5\" :options=\"{ useUrlFragment: false }\"\n::: tab title \n**markdown content**\n:::\n::: tab javascript \n``` javascript\n() => {\n  console.log('Javascript code example')\n}\n```\n:::\n::::\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\ncache-lifetime 是存活时间，默认 5 分钟，即关闭网页五分钟内回来，当时选中的哪个 tabs，就会显示该内容，5 分钟后默认回到到第一个 tabs。\n\n:options=\"{ useUrlFragment: false }\" 建议写上，不然每次点击任意 tabs，都会刷新一次当前页面，没有必要。\n\n效果：\n\nmarkdown content\n\n() => {\n  console.log('Javascript code example')\n}\n\n\n1\n2\n3\n\n\n\n# Demo插件（因为兼容问题，目前已经不使用）\n\n为了更直观的展示一些代码的效果，博客添加了 demo 模块插件，可查看 demo、源码，以及跳转到 codepen 在线编辑。目前支持 vue、react 或 native js 示例。 demo 目前支持 [vanilla] 、[React]、[Vue]，如果不填写 []，默认是 [vue]。\n\n插件官网：https://github.com/xiguaxigua/vuepress-plugin-demo-block/\n\n演示代码：\n\n\x3c!-- Vue 的 demo --\x3e\n::: demo\n```html\n<template>\n  <div class=\"box-vue\">Vue {{ message }}</div>\n</template>\n<script>\nexport default {\n  data: () => ({ message: 'Hello World' })\n}\n<\/script>\n<style>\n.box-vue { color: red; }\n</style>\n```\n:::\n\n\x3c!-- React 的 demo --\x3e\n::: demo [react]\n```js\nexport default class App extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = { message: 'Hello World' }\n  }\n  render () {\n    return (\n      <div className=\"box-react\">\n        React {this.state.message}\n      </div>\n    )\n  }\n}\nApp.__style__ = `\n  .box-react { color: red; }   \n`\n```\n:::\n\n\x3c!-- vanilla 的 demo --\x3e\n::: demo [vanilla]\n```html\n<html>\n  <div id=\"vanilla-box\"></div>\n</html>\n<script>\n  var box = document.getElementById('vanilla-box')\n  box.innerHTML = 'Hello World! Welcome to EB'\n<\/script>\n<style>\n#vanilla-box {\n  color: #11a8cd;   /* 标题颜色 */\n}\n</style>\n\n```\n:::\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n\n\n输出结果：\n\n::: demo\n\n<template>\n  <div class=\"box-vue\">Vue {{ message }}</div>\n</template>\n<script>\nexport default {\n  data: () => ({ message: 'Hello World' })\n}\n<\/script>\n<style>\n.box-vue { color: red; }\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n:::\n\n::: demo [react]\n\nexport default class App extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = { message: 'Hello World' }\n  }\n  render () {\n    return (\n      <div className=\"box-react\">\n        React {this.state.message}\n      </div>\n    )\n  }\n}\nApp.__style__ = `\n  .box-react { color: #621529; }\n`\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n:::\n\n::: demo [vanilla]\n\n<html>\n  <div id=\"vanilla-box\"></div>\n</html>\n<script>\n  var box = document.getElementById('vanilla-box')\n  box.innerHTML = 'Hello World! Welcome to EB'\n<\/script>\n<style>\n#vanilla-box {\n  color: #11a8cd;   /* 标题颜色 */\n}\n</style>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n:::",normalizedContent:"笔记\n\n如果想拥有更多丰富的笔记表现力，让自己阅读时，不处于大片黑白的世界里，本内容会让你的笔记句句深入记忆的深处😸\n\n2021-10-28 @村长\n\n\n\n * 使用 emoji 表情\n * 外部链接\n * 文本高亮\n * 代码高亮\n * 徽章\n   * 内置\n   * 外置\n * 信息框容器\n * 布局容器\n   * 我是居中的内容\n * 代码块选项卡\n * 普通卡片列表\n   * 语法\n * 图文卡片列表\n   * 语法\n * tabs插件\n * demo插件（因为兼容问题，目前已经不使用）\n\n\n\n笔记\n\n本内容来自 vuepress官网 和 vdoing主题官网，有部分是自己总结的。\n\n信息框容器后的内容，基本都是 vdoing主题 带有的。\n\n2021-10-28 @村长\n\n\n# 使用 emoji 表情\n\n阅读大片大片的文字难免产生视觉疲劳，而使用 emoji 表情，不仅缓解精神的渐眠，也会胜过千言。\n\n在 markdown 里，使用 :表情: 输入表情，如\n\n你好:smile:，我喜欢:dog:，我小时候经常拿:100:分哦~~~，欢迎来到我的博客:heart:，一起学习吧:muscle:\n\n\n1\n\n\n效果如下：\n\n> 你好😄，我喜欢🐶，我小时候经常拿💯分哦~~~，欢迎来到我的博客❤️，一起学习吧💪\n\n很多指令肯定是记不了的，我们可以也可以去特定的网站获取表情的格式。也可以 copy 一个表情过来，markdown 自动解析表情。\n\n分享一些 emoji 网站：\n\n * emoji 表情备忘录：有很多表情的格式(:表情:)\n * emoji 表情：有很多表情可以copy\n * gitmoji 通过 emoji 表达 git 的操作内容\n\n> windows 系统下按 win + . 快速打开表情选择框（不是右侧小键盘的 .）\n\n\n# 外部链接\n\n使用外部链接，文字会变色，并且可以点击跳转，格式如下：\n\n[vuepress官网](https://vuepress.vuejs.org/zh/)\n\n\n1\n\n\n效果：\n\nvuepress官网\n\n\n# 文本高亮\n\n使用 <mark> 标签或者 `` 让文本高亮。\n\n<mark> 标签我经常用于文字的突出，如果是一段字符串，我是用的是 `` 包裹起来。\n\n`vdoing` 是一款简洁高效的 <mark>知识管理&博客</mark> 主题\n\n\n1\n\n\nvdoing 是一款简洁高效的 知识管理&博客 主题\n\n\n# 代码高亮\n\n突出代码块的某些行，使用 {行数-行数}、{行数,行数} 格式，如\n\n输入：\n\n``` js {2,5-7,13}\nreturn {\n      // 数据\n      options,\n      activekey,\n      sourcelabels,\n      sourceform,\n      addform,\n      addrules,\n      sourcerules,\n      // 函数\n      displayrender,\n      submitprodoce,\n      onaddclose,\n    };\n```\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n输出：\n\n\n\n \n\n\n \n \n \n\n\n\n\n\n \n\n\n\nreturn {\n      // 数据\n      options,\n      activekey,\n      sourcelabels,\n      sourceform,\n      addform,\n      addrules,\n      sourcerules,\n      // 函数\n      displayrender,\n      submitprodoce,\n      onaddclose,\n    };\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n * 行数区间: 例如 {5-8}, {3-10}, {10-17}\n * 多个单行: 例如 {4,7,9}\n * 行数区间与多个单行: 例如 {4,7-13,16,23-27,40}\n\n\n# 徽章\n\n\n# 内置\n\n官方自带。详细使用可前往官网 badge。\n\n#### 《沁园春·雪》 <badge text=\"摘\"/>\n北国风光<badge text=\"注释\" type=\"warning\"/>，千里冰封，万里雪飘。\n\n> <badge text=\"译文\" type=\"error\" vertical=\"middle\"/>: 北方的风光。\n\n\n1\n2\n3\n4\n\n\n * type 有三个参数：tip、warning、error。默认是 tip\n\n * vertical 有两个参数：top、middle。默认是 top\n\n直接在 markdown 文件使用，效果如下：\n\n# 《沁园春·雪》\n\n北国风光，千里冰封，万里雪飘。\n\n> : 北方的风光。\n\n\n# 外置\n\n如果想用更多的自定义徽章，可使用 shields来生成\n\n![stars](https://img.shields.io/github/stars/kele-bingtang/notes-blog)\n![stars](https://img.shields.io/github/stars/kele-bingtang/notes-blog?style=social)\n![kbt](https://img.shields.io/badge/kbt-冰糖-green)\n\n\n1\n2\n3\n\n\n\n\n如果没接触过 shields，shields 教程传送门\n\n\n# 信息框容器\n\n以下一些内容是 vdoing 主题提供，并非官方提供。\n\n输入：\n\n::: tip\n这是一条提示\n:::\n\n::: warning\n这是一条注意\n:::\n\n::: danger\n这是一条警告\n:::\n\n::: note\n这是笔记容器，主题自带，官方没有\n:::\n\n::: tip 我的自定义标题\n自定义标题的提示框\n:::\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n输出：\n\n提示\n\n这是一条提示\n\n注意\n\n这是一条注意\n\n警告\n\n这是一条警告\n\n笔记\n\n这是笔记容器，主题自带，官方没有\n\n我的自定义标题\n\n自定义标题的提示框\n\n如果想要折叠的容器，如下：也可以自定义标题\n\n::: details\n这是一个详情块，在 ie / edge 中不生效\n```js\nconsole.log('这是一个详情块')\n```\n:::\n\n\n1\n2\n3\n4\n5\n6\n\n点击查看\n\n这是一个详情块，在 ie / edge 中不生效\n\nconsole.log('这是一个详情块')\n\n\n1\n\n\n\n# 布局容器\n\n::: center\n  ### 我是居中的内容\n  （可用于标题、图片等的居中）\n:::\n\n::: right\n  [我是右浮动的内容](https://cdn.jsdelivr.net/gh/kele-bingtang/static/user/avatar2.png)\n:::\n\n::: theorem vuepress\nvue 驱动的静态网站生成器\n::: right\n来自 [官网](https://vuepress.vuejs.org/zh/)\n:::\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 我是居中的内容\n\n（可用于标题、图片等的居中）\n\n我是右浮动的内容\n\nvuepress\n\nvue 驱动的静态网站生成器\n\n来自 vuepress官网\n\n提示\n\n没有 left 和 top、bottom\n\n\n# 代码块选项卡\n\n在 <code-group> 中嵌套 <code-block> 来配合使用。在 <code-block> 标签添加 title 来指定tab标题，active 指定当前 tab：\n\n<code-group>\n  <code-block title=\"yarn\" active>\n  ```bash\n  yarn add vuepress-theme-vdoing -d\n  ```\n  </code-block>\n\n  <code-block title=\"npm\">\n  ```bash\n  npm install vuepress-theme-vdoing -d\n  ```\n  </code-block>\n</code-group>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n效果：\n\nyarn add vuepress-theme-vdoing -d\n\n\n1\n\n\nnpm install vuepress-theme-vdoing -d\n\n\n1\n\n\n注意\n\n请在 <code-group> 标签与 markdown 内容之间使用空行隔开，否则可能会解析不出来。\n\n提示\n\nvdoing 解释该组件仅适用于放置代码块，放其他内容在体验上并不友好。经过测试，我放入文字也是可以的。\n\n而且 <code-block> 放在 <code-group> 里时，首行缩进两个空格，经过测试，四个空格 出问题。\n\n如果你喜欢 ::: tabs 代替 <code-group>，那么我们可以下载 vuepress-plugin-tabs 插件。点击跳到 tabs 插件安装。\n\n\n# 普通卡片列表\n\n如果想使用 友链 功能，但是 vdoing 主题并没有直接在首页实现该功能，要么使用 卡片列表，要么自己手动实现html。而 卡片列表 目前只能使用在 markdown 文档里，下方介绍。\n\n普通卡片列表容器，可用于 友情链接、项目推荐、诗词展示 等。\n\n输入：\n\n::: cardlist\n```yaml\n- name: butcher2000\n  desc: 即使再小的帆，也能远航\n  avatar: https://cdn.jsdelivr.net/gh/kele-bingtang/static/user/20211029181901.png\n  link: https://blog.csdn.net/weixin_46827107\n  bgcolor: '#cbeafa' # 可选，默认var(--bodybg)。颜色值有#号时请添加单引号\n  textcolor: '#6854a1' # 可选，默认var(--textcolor)\n\n- name: george chan\n  desc: 让我给你讲讲他的传奇故事吧\n  avatar: https://z3.ax1x.com/2021/09/30/4okmvi.jpg\n  link: https://cyc0819.top/\n  bgcolor: '#ffb6c1'\n  textcolor: '#621529'  \n  \n- name: evan's blog\n  desc: 前端的小学生\n  avatar: https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200103123203.jpg\n  link: https://xugaoyi.com/\n  bgcolor: '#b9d59c'\n  textcolor: '#3b551f'\n```\n:::\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n输出：\n\nbutcher2000\n\n即使再小的帆，也能远航\n\ngeorge chan\n\n让我给你讲讲他的传奇故事吧\n\nevan's blog\n\n前端的小学生\n\n- name: butcher2000\n  desc: 即使再小的帆，也能远航\n  avatar: https://cdn.jsdelivr.net/gh/kele-bingtang/static/user/20211029181901.png\n  link: https://blog.csdn.net/weixin_46827107\n  bgcolor: '#cbeafa' # 可选，默认var(--bodybg)。颜色值有#号时请添加单引号\n  textcolor: '#6854a1' # 可选，默认var(--textcolor)\n\n- name: george chan\n  desc: 让我给你讲讲他的传奇故事吧\n  avatar: https://z3.ax1x.com/2021/09/30/4okmvi.jpg\n  link: https://cyc0819.top/\n  bgcolor: '#ffb6c1'\n  textcolor: '#621529'  \n  \n- name: evan's blog\n  desc: 前端的小学生\n  avatar: https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200103123203.jpg\n  link: https://xugaoyi.com/\n  bgcolor: '#b9d59c'\n  textcolor: '#3b551f'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 语法\n\n::: cardlist <每行显示数量>\n``` yaml\n- name: 名称\n  desc: 描述\n  avatar: https://xxx.jpg # 头像，可选\n  link: https://xxx/ # 链接，可选\n  bgcolor: '#cbeafa' # 背景色，可选，默认var(--bodybg)。颜色值有#号时请添加引号\n  textcolor: '#6854a1' # 文本色，可选，默认var(--textcolor)\n```\n:::\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n * <每行显示数量>：一行内显示多少个卡片，值范围 1~4，默认是 3 个，上方的卡片正好是三个，如果再多一个卡片，就会被换到下一行\n\n * 代码块需指定语言为 yaml\n\n * 代码块内是一个 yaml 格式的数组列表\n\n * 数组成员的属性有：\n   \n   * name：名称\n   * desc：描述\n   * avatar：头像，可选\n   * link：链接，可选\n   * bgcolor：背景色，可选，默认 var(--bodybg)。颜色值有 # 号时请添加引号\n   * textcolor：文本色，可选，默认 var(--textcolor)\n\n不指定颜色，默认为白色，如下演示：\n\n::: cardlist 2\n```yaml\n- name: 《静夜思》\n  desc: 床前明月光，疑是地上霜。举头望明月，低头思故乡。\n  bgcolor: '#f0dfb1'\n  textcolor: '#242a38'\n  \n- name: vdoing\n  desc: 🚀一款简洁高效的vuepress 知识管理&博客(blog) 主题\n  link: https://github.com/xugaoyi/vuepress-theme-vdoing\n  bgcolor: '#dfeee7'\n  textcolor: '#2a3344'\n```\n:::\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n《静夜思》\n\n床前明月光，疑是地上霜。举头望明月，低头思故乡。\n\nvdoing\n\n🚀一款简洁高效的vuepress 知识管理&博客(blog) 主题\n\n- name: 《静夜思》\n  desc: 床前明月光，疑是地上霜。举头望明月，低头思故乡。\n  \n- name: vdoing\n  desc: 🚀一款简洁高效的vuepress 知识管理&博客(blog) 主题\n  link: https://github.com/xugaoyi/vuepress-theme-vdoing\n  bgcolor: '#dfeee7'\n  textcolor: '#2a3344'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 图文卡片列表\n\n图文卡片列表容器，可用于 项目展示、产品展示 等。\n\n先看效果：\n\n标题\n\n描述内容描述内容描述内容描述内容描述内容描述内容描述内容描述内容\n\n村长\n\n标题\n\n描述内容描述内容描述内容描述内容描述内容描述内容描述内容描述内容\n\n村长\n\n标题\n\n描述内容描述内容描述内容描述内容描述内容描述内容描述内容描述内容\n\n村长\n\n- img: https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200529162253.jpg\n  link: https://xugaoyi.com/\n  name: 标题\n  desc: 描述内容描述内容描述内容描述内容描述内容描述内容描述内容描述内容 # 描述，可选\n  author: 村长 # 作者，可选\n  avatar: https://cdn.jsdelivr.net/gh/kele-bingtang/static/user/avatar2.png # 头像，可选\n  \n- img: https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200530100256.jpg\n  link: https://xugaoyi.com/\n  name: 标题\n  desc: 描述内容描述内容描述内容描述内容描述内容描述内容描述内容描述内容\n  author: 村长\n  avatar: https://cdn.jsdelivr.net/gh/kele-bingtang/static/user/avatar2.png\n  \n- img: https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200530100257.jpg\n  link: https://xugaoyi.com/\n  name: 标题\n  desc: 描述内容描述内容描述内容描述内容描述内容描述内容描述内容描述内容\n  author: 村长\n  avatar: https://cdn.jsdelivr.net/gh/kele-bingtang/static/user/avatar2.png\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n::: cardimglist\n```yaml\n- img: https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200529162253.jpg\n  link: https://xugaoyi.com/\n  name: 标题\n  desc: 描述内容描述内容描述内容描述内容描述内容描述内容描述内容描述内容 # 描述，可选\n  author: 村长 # 作者，可选\n  avatar: https://cdn.jsdelivr.net/gh/kele-bingtang/static/user/avatar2.png # 头像，可选\n  \n- img: https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200530100256.jpg\n  link: https://xugaoyi.com/\n  name: 标题\n  desc: 描述内容描述内容描述内容描述内容描述内容描述内容描述内容描述内容\n  author: 村长\n  avatar: https://cdn.jsdelivr.net/gh/kele-bingtang/static/user/avatar2.png\n  \n- img: https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200530100257.jpg\n  link: https://xugaoyi.com/\n  name: 标题\n  desc: 描述内容描述内容描述内容描述内容描述内容描述内容描述内容描述内容\n  author: 村长\n  avatar: https://cdn.jsdelivr.net/gh/kele-bingtang/static/user/avatar2.png\n```\n:::\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n# 语法\n\n::: cardimglist <每行显示数量>\n``` yaml\n- img: https://xxx.jpg # 图片地址\n  link: https://xxx.com # 链接地址\n  name: 标题\n  desc: 描述 # 可选\n  author: 作者名称 # 可选\n  avatar: https://xxx.jpg # 作者头像，可选\n```\n:::\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n * <每行显示数量> 数字，表示每行最多显示多少个，选值范围 1~4，默认 3。在小屏时会根据屏幕宽度减少每行显示数量。\n * 代码块需指定语言为 yaml\n * 代码块内是一个 yaml 格式的数组列表\n * 数组成员的属性有：\n   * img：图片地址\n   * link：链接地址\n   * name：标题\n   * desc：描述，可选\n   * author：作者名称，可选\n   * avatar：作者头像，可选\n\n\n# tabs插件\n\n官网：https://github.com/pskordilakis/vuepress-plugin-tabs\n\n安装插件：\n\nyarn add vuepress-plugin-tabs vue-tabs-component\n\n\n1\n\n\nnpm install vuepress-plugin-tabs vue-tabs-component\n\n\n1\n\n\n在 .vuepress/styles/index.styl 添加如下内容：\n\n@require '~vuepress-plugin-tabs/dist/themes/default.styl'\n\n\n1\n\n\n在 .vuepress/config.js 中添加如下内容：\n\nmodule.exports = {\n  plugins: [ 'tabs' ]\n}\n\n\n1\n2\n3\n\n\n启动项目，下面是使用的 demo。\n\n:::: tabs cache-lifetime=\"5\" :options=\"{ useurlfragment: false }\"\n::: tab title \n**markdown content**\n:::\n::: tab javascript \n``` javascript\n() => {\n  console.log('javascript code example')\n}\n```\n:::\n::::\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\ncache-lifetime 是存活时间，默认 5 分钟，即关闭网页五分钟内回来，当时选中的哪个 tabs，就会显示该内容，5 分钟后默认回到到第一个 tabs。\n\n:options=\"{ useurlfragment: false }\" 建议写上，不然每次点击任意 tabs，都会刷新一次当前页面，没有必要。\n\n效果：\n\nmarkdown content\n\n() => {\n  console.log('javascript code example')\n}\n\n\n1\n2\n3\n\n\n\n# demo插件（因为兼容问题，目前已经不使用）\n\n为了更直观的展示一些代码的效果，博客添加了 demo 模块插件，可查看 demo、源码，以及跳转到 codepen 在线编辑。目前支持 vue、react 或 native js 示例。 demo 目前支持 [vanilla] 、[react]、[vue]，如果不填写 []，默认是 [vue]。\n\n插件官网：https://github.com/xiguaxigua/vuepress-plugin-demo-block/\n\n演示代码：\n\n\x3c!-- vue 的 demo --\x3e\n::: demo\n```html\n<template>\n  <div class=\"box-vue\">vue {{ message }}</div>\n</template>\n<script>\nexport default {\n  data: () => ({ message: 'hello world' })\n}\n<\/script>\n<style>\n.box-vue { color: red; }\n</style>\n```\n:::\n\n\x3c!-- react 的 demo --\x3e\n::: demo [react]\n```js\nexport default class app extends react.component {\n  constructor (props) {\n    super(props)\n    this.state = { message: 'hello world' }\n  }\n  render () {\n    return (\n      <div classname=\"box-react\">\n        react {this.state.message}\n      </div>\n    )\n  }\n}\napp.__style__ = `\n  .box-react { color: red; }   \n`\n```\n:::\n\n\x3c!-- vanilla 的 demo --\x3e\n::: demo [vanilla]\n```html\n<html>\n  <div id=\"vanilla-box\"></div>\n</html>\n<script>\n  var box = document.getelementbyid('vanilla-box')\n  box.innerhtml = 'hello world! welcome to eb'\n<\/script>\n<style>\n#vanilla-box {\n  color: #11a8cd;   /* 标题颜色 */\n}\n</style>\n\n```\n:::\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n\n\n输出结果：\n\n::: demo\n\n<template>\n  <div class=\"box-vue\">vue {{ message }}</div>\n</template>\n<script>\nexport default {\n  data: () => ({ message: 'hello world' })\n}\n<\/script>\n<style>\n.box-vue { color: red; }\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n:::\n\n::: demo [react]\n\nexport default class app extends react.component {\n  constructor (props) {\n    super(props)\n    this.state = { message: 'hello world' }\n  }\n  render () {\n    return (\n      <div classname=\"box-react\">\n        react {this.state.message}\n      </div>\n    )\n  }\n}\napp.__style__ = `\n  .box-react { color: #621529; }\n`\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n:::\n\n::: demo [vanilla]\n\n<html>\n  <div id=\"vanilla-box\"></div>\n</html>\n<script>\n  var box = document.getelementbyid('vanilla-box')\n  box.innerhtml = 'hello world! welcome to eb'\n<\/script>\n<style>\n#vanilla-box {\n  color: #11a8cd;   /* 标题颜色 */\n}\n</style>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n:::",charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"技巧 - 排版",frontmatter:{title:"技巧 - 排版",date:"2021-11-13T17:19:20.000Z",permalink:"/about/typesetting/",titleTag:"优质",categories:["关于 - 技巧"],tags:["技巧"],readingShow:"top"},regularPath:"/80.%E5%85%B3%E4%BA%8E/09.%E5%85%B3%E4%BA%8E%20-%20%E6%8A%80%E5%B7%A7/04.%E6%8A%80%E5%B7%A7%20-%20%E6%8E%92%E7%89%88.html",relativePath:"80.关于/09.关于 - 技巧/04.技巧 - 排版.md",key:"v-1a3d1758",path:"/about/typesetting/",headers:[{level:2,title:"空格",slug:"空格",normalizedTitle:"空格",charIndex:62},{level:3,title:"中英文之间需要增加空格",slug:"中英文之间需要增加空格",normalizedTitle:"中英文之间需要增加空格",charIndex:70},{level:3,title:"中文与数字之间需要增加空格",slug:"中文与数字之间需要增加空格",normalizedTitle:"中文与数字之间需要增加空格",charIndex:87},{level:3,title:"数字与单位之间无需增加空格",slug:"数字与单位之间无需增加空格",normalizedTitle:"数字与单位之间无需增加空格",charIndex:106},{level:3,title:"全角标点与其他字符之间不加空格",slug:"全角标点与其他字符之间不加空格",normalizedTitle:"全角标点与其他字符之间不加空格",charIndex:125},{level:3,title:"-ms-text-autospace to the rescue?",slug:"ms-text-autospace-to-the-rescue",normalizedTitle:"-ms-text-autospace to the rescue?",charIndex:146},{level:2,title:"标点符号",slug:"标点符号",normalizedTitle:"标点符号",charIndex:183},{level:3,title:"不重复使用标点符号",slug:"不重复使用标点符号",normalizedTitle:"不重复使用标点符号",charIndex:193},{level:2,title:"全角和半角",slug:"全角和半角",normalizedTitle:"全角和半角",charIndex:206},{level:3,title:"直角符号",slug:"直角符号",normalizedTitle:"直角符号",charIndex:217},{level:3,title:"使用全角中文标点",slug:"使用全角中文标点",normalizedTitle:"使用全角中文标点",charIndex:227},{level:3,title:"数字使用半角字符",slug:"数字使用半角字符",normalizedTitle:"数字使用半角字符",charIndex:241},{level:3,title:"遇到完整的英文整句、特殊名词，其內容使用半角标点",slug:"遇到完整的英文整句、特殊名词-其內容使用半角标点",normalizedTitle:"遇到完整的英文整句、特殊名词，其內容使用半角标点",charIndex:255},{level:2,title:"名词",slug:"名词",normalizedTitle:"名词",charIndex:267},{level:3,title:"专有名词使用正确的大小写",slug:"专有名词使用正确的大小写",normalizedTitle:"专有名词使用正确的大小写",charIndex:291},{level:3,title:"不要使用不地道的缩写",slug:"不要使用不地道的缩写",normalizedTitle:"不要使用不地道的缩写",charIndex:309},{level:2,title:"争议",slug:"争议",normalizedTitle:"争议",charIndex:323},{level:3,title:"链接之间增加空格",slug:"链接之间增加空格",normalizedTitle:"链接之间增加空格",charIndex:331},{level:3,title:"简体中文使用直角引号",slug:"简体中文使用直角引号",normalizedTitle:"简体中文使用直角引号",charIndex:345},{level:2,title:"自我",slug:"自我",normalizedTitle:"自我",charIndex:359},{level:3,title:"文档命名规范",slug:"文档命名规范",normalizedTitle:"文档命名规范",charIndex:367},{level:3,title:"加粗文字增加空格",slug:"加粗文字增加空格",normalizedTitle:"加粗文字增加空格",charIndex:379},{level:3,title:"加粗文字与标点符号",slug:"加粗文字与标点符号",normalizedTitle:"加粗文字与标点符号",charIndex:393},{level:3,title:"加粗标题使用引号（可选）",slug:"加粗标题使用引号-可选",normalizedTitle:"加粗标题使用引号（可选）",charIndex:408},{level:3,title:"体系化文档开头添加目录",slug:"体系化文档开头添加目录",normalizedTitle:"体系化文档开头添加目录",charIndex:426},{level:3,title:"有序/无序列表末尾不加标点符合",slug:"有序-无序列表末尾不加标点符合",normalizedTitle:"有序/无序列表末尾不加标点符合",charIndex:443},{level:2,title:"格式化工具",slug:"格式化工具",normalizedTitle:"格式化工具",charIndex:462},{level:2,title:"谁在这样做？",slug:"谁在这样做",normalizedTitle:"谁在这样做？",charIndex:471},{level:2,title:"本文转载",slug:"本文转载",normalizedTitle:"本文转载",charIndex:481},{level:2,title:"参考文献",slug:"参考文献",normalizedTitle:"参考文献",charIndex:489}],headersStr:"空格 中英文之间需要增加空格 中文与数字之间需要增加空格 数字与单位之间无需增加空格 全角标点与其他字符之间不加空格 -ms-text-autospace to the rescue? 标点符号 不重复使用标点符号 全角和半角 直角符号 使用全角中文标点 数字使用半角字符 遇到完整的英文整句、特殊名词，其內容使用半角标点 名词 专有名词使用正确的大小写 不要使用不地道的缩写 争议 链接之间增加空格 简体中文使用直角引号 自我 文档命名规范 加粗文字增加空格 加粗文字与标点符号 加粗标题使用引号（可选） 体系化文档开头添加目录 有序/无序列表末尾不加标点符合 格式化工具 谁在这样做？ 本文转载 参考文献",content:'序言\n\n统一中文文案、排版的相关用法，降低团队成员之间的沟通成本，增强网站气质\n\n2021-11-13 @村长\n\n\n\n * 空格\n   * 中英文之间需要增加空格\n   * 中文与数字之间需要增加空格\n   * 数字与单位之间无需增加空格\n   * 全角标点与其他字符之间不加空格\n   * -ms-text-autospace to the rescue?\n * 标点符号\n   * 不重复使用标点符号\n * 全角和半角\n   * 直角符号\n   * 使用全角中文标点\n   * 数字使用半角字符\n   * 遇到完整的英文整句、特殊名词，其內容使用半角标点\n * 名词\n   * 专有名词使用正确的大小写\n   * 不要使用不地道的缩写\n * 争议\n   * 链接之间增加空格\n   * 简体中文使用直角引号\n * 自我\n   * 文档命名规范\n   * 加粗文字增加空格\n   * 加粗文字与标点符号\n   * 加粗标题使用引号（可选）\n   * 体系化文档开头添加目录\n   * 有序/无序列表末尾不加标点符合\n * 格式化工具\n * 谁在这样做？\n * 本文转载\n * 参考文献\n\n\n\n\n# 空格\n\n「有研究显示，打字的时候不喜欢在中文和英文之间加空格的人，感情路都走得很辛苦，有七成的比例会在 34 岁的时候跟自己不爱的人结婚，而其余三成的人最后只能把遗产留给自己的猫。毕竟爱情跟书写都需要适时地留白。\n\n与大家共勉之。\n\n来自—— vinta/paranoid-auto-spacing\n\n\n# 中英文之间需要增加空格\n\n正确：\n\n> 在 LeanCloud 上，数据存储是围绕 AVObject 进行的。\n\n错误：\n\n> 在LeanCloud上，数据存储是围绕AVObject进行的。\n\n> 在 LeanCloud上，数据存储是围绕AVObject 进行的。\n\n完整的正确用法：\n\n> 在 LeanCloud 上，数据存储是围绕 AVObject 进行的。每个 AVObject 都包含了与 JSON 兼容的 key-value 对应的数据。数据是 schema-free 的，你不需要在每个 AVObject 上提前指定存在哪些键，只要直接设定对应的 key-value 即可。\n\n例外：「豆瓣FM」等产品名词，按照官方所定义的格式书写。\n\n\n# 中文与数字之间需要增加空格\n\n正确：\n\n> 今天出去买菜花了 5000 元。\n\n错误：\n\n> 今天出去买菜花了 5000元。\n\n> 今天出去买菜花了5000元。\n\n\n# 数字与单位之间无需增加空格\n\n正确：\n\n> 我家的光纤入户宽带有 10Gbps，SSD 一共有 10TB。\n\n错误：\n\n> 我家的光纤入户宽带有 10 Gbps，SSD 一共有 20 TB。\n\n另外，度／百分比与数字之间不需要增加空格：\n\n正确：\n\n> 今天是 233° 的高温。\n\n> 新 MacBook Pro 有 15% 的 CPU 性能提升。\n\n错误：\n\n> 今天是 233 ° 的高温。\n\n> 新 MacBook Pro 有 15 % 的 CPU 性能提升。\n\n\n# 全角标点与其他字符之间不加空格\n\n正确：\n\n> 刚刚买了一部 iPhone，好开心！\n\n错误：\n\n> 刚刚买了一部 iPhone ，好开心！\n\n\n# -ms-text-autospace to the rescue?\n\nMicrosoft 有个 -ms-text-autospace 的 CSS 属性可以实现自动为中英文之间增加空白。不过目前并未普及，另外在其他应用场景，例如 OS X、iOS 的用户界面目前并不存在这个特性，所以请继续保持随手加空格的习惯。\n\n\n# 标点符号\n\n\n# 不重复使用标点符号\n\n正确：\n\n> 德国队竟然战胜了巴西队！\n\n> 她竟然对你说「喵」？！\n\n错误：\n\n> 德国队竟然战胜了巴西队！！\n\n> 德国队竟然战胜了巴西队！！！！！！！！\n\n> 她竟然对你说「喵」？？！！\n\n> 她竟然对你说「喵」？！？！？？！！\n\n\n# 全角和半角\n\n不明白什么是全角（全形）与半角（半形）符号？请查看维基百科词条『全角和半角』或者百度百科词条『全角』和『半角』。\n\n简单介绍：\n\n「全角」指一个字符占用两个标准字符位置的状态，如中文模式下的逗号、句号等：，。？「」\n\n「半角」就是 ASCII 方式的字符，在没有中文输入法起作用的时候输入的字母数字和字符都是半角的，如英文模式下的逗号、句号等: , . ; ? ""\n\n\n# 直角符号\n\n英文单词使用 "" 或者 \'\'；\n\n中文词语使用 「」或者『』，不使用弯角符号 “” 和 ‘’，弯角符号更适用于手写。\n\n其中 "" 对应「」，\'\' 对应『』\n\n\n# 使用全角中文标点\n\n正确：\n\n> 嗨！你知道嘛？今天前台的小妹跟我说「喵」了哎！\n\n> 核磁共振成像（NMRI）是什么原理都不知道？JFGI！\n\n错误：\n\n> 嗨! 你知道嘛? 今天前台的小妹跟我说 "喵" 了哎!\n\n> 嗨!你知道嘛?今天前台的小妹跟我说"喵"了哎!\n\n> 核磁共振成像 (NMRI) 是什么原理都不知道? JFGI!\n\n> 核磁共振成像(NMRI)是什么原理都不知道?JFGI!\n\n\n# 数字使用半角字符\n\n正确：\n\n> 这件蛋糕只卖 1000 元。\n\n错误：\n\n> 这件蛋糕只卖 １０００ 元。\n\n例外：在设计稿、宣传海报中如出现极少量数字的情形时，为方便文字对齐，是可以使用全角数字的。\n\n\n# 遇到完整的英文整句、特殊名词，其內容使用半角标点\n\n正确：\n\n> 乔布斯那句话是怎么说的？「Stay hungry, stay foolish.」\n\n> 推荐你阅读《Hackers & Painters: Big Ideas from the Computer Age》，非常的有趣。\n\n错误：\n\n> 乔布斯那句话是怎么说的？「Stay hungry，stay foolish。」\n\n> 推荐你阅读《Hackers＆Painters：Big Ideas from the Computer Age》，非常的有趣。\n\n\n# 名词\n\n\n# 专有名词使用正确的大小写\n\n大小写相关用法原属于英文书写范畴，不属于本 wiki 讨论內容，在这里只对部分易错用法进行简述。\n\n正确：\n\n> 使用 GitHub 登录\n\n> 我们的客户有 GitHub、Foursquare、Microsoft Corporation、Google、Facebook, Inc.。\n\n错误：\n\n> 使用 github 登录\n\n> 使用 GITHUB 登录\n\n> 使用 Github 登录\n\n> 使用 gitHub 登录\n\n> 使用 gｲんĤЦ8 登录\n\n> 我们的客户有 github、foursquare、microsoft corporation、google、facebook, inc.。\n\n> 我们的客户有 GITHUB、FOURSQUARE、MICROSOFT CORPORATION、GOOGLE、FACEBOOK, INC.。\n\n> 我们的客户有 Github、FourSquare、MicroSoft Corporation、Google、FaceBook, Inc.。\n\n> 我们的客户有 gitHub、fourSquare、microSoft Corporation、google、faceBook, Inc.。\n\n> 我们的客户有 gｲんĤЦ8、ｷouЯƧquﾑгє、๓เςг๏ร๏Ŧt ς๏гק๏гคtเ๏ภn、900913、ƒ4ᄃëв๏๏к, IПᄃ.。\n\n注意：当网页中需要配合整体视觉风格而出现全部大写／小写的情形，HTML 中请使用标准的大小写规范进行书写；并通过 text-transform: uppercase;／text-transform: lowercase; 对表现形式进行定义。\n\n\n# 不要使用不地道的缩写\n\n正确：\n\n> 我们需要一位熟悉 JavaScript、HTML5，至少理解一种框架（如 Backbone.js、AngularJS、React 等）的前端开发者。\n\n错误：\n\n> 我们需要一位熟悉 Js、h5，至少理解一种框架（如 backbone、angular、RJS 等）的 FED。\n\n\n# 争议\n\n以下用法略带有个人色彩，即：无论是否遵循下述规则，从语法的角度来讲都是正确的。\n\n\n# 链接之间增加空格\n\n用法：\n\n> 请 提交一个 issue 并分配给相关同事。\n\n> 访问我们网站的最新动态，请 点击这里 进行订阅！\n\n对比用法：\n\n> 请提交一个 issue 并分配给相关同事。\n\n> 访问我们网站的最新动态，请点击这里进行订阅！\n\n\n# 简体中文使用直角引号\n\n用法：\n\n> 「老师，『有条不紊』的『紊』是什么意思？」\n\n对比用法：\n\n> “老师，‘有条不紊’的‘紊’是什么意思？”\n\n\n# 自我\n\n\n# 文档命名规范\n\n正确：\n\n> 关于 - 技巧\n> \n> 笔记 - 技巧\n> \n> 排版 - 技巧\n\n错误：\n\n> 关于技巧\n> \n> 笔记 技巧\n> \n> 排版 ~ 技巧\n\n\n# 加粗文字增加空格\n\n正确：\n\n> 一个好的 排版 彰显好的文档。\n\n错误：\n\n> 一个好的排版彰显好的文档。\n\n\n# 加粗文字与标点符号\n\n加粗的文字如果是最后一行，或者独处一行，那么加粗范围包括标点符号；\n\n加粗的文字如果后面还有文字，则加粗范围不包括标点符号。\n\n正确：\n\n> 欢迎来到我的博客，请慢慢食用。\n\n> 欢迎来到我的博客，请慢慢食用。\n\n错误：\n\n> 欢迎来到我的博客，请慢慢食用。\n> \n> 欢迎来到我的博客， 请慢慢食用。\n\n可能看不太清楚，这里解释一下：\n\n * 错误的例子中，句号在加粗范围外面，逗号在加粗范围里面\n\n * 正确的例子中，句号在加粗范围里面，逗号在加粗范围外面\n\n\n# 加粗标题使用引号（可选）\n\n加粗的字体在手机端显示失效，阅读的效果与普通文字一样，所以加引号既可以在电脑端双重突出，也可以在手机端突出。\n\n这里的引号指的是 Markdown 的引号，即开头添加的 > 符号，特征是左侧有阴影竖条块，如本内容的例子都是通过引号突出。\n\n正确：\n\n> > 什么是 Young\n> \n> Young 代表年轻、朝气、希望、活力 ......\n\n错误：\n\n> 什么是 Young\n> \n> Young 代表年轻、朝气、希望、活力 ......\n\n\n# 体系化文档开头添加目录\n\n生成可以跳转的目录，方便他人阅读和选择。\n\n如 VuePress 可以解析 [[TOC]] 字符串从而生成目录。\n\n\n# 有序/无序列表末尾不加标点符合\n\n因为开头的符号已经代表句号/感叹号/问号了。\n\n正确：\n\n>  * 欢迎来到我的博客\n>  * 希望能入你法眼\n> \n>  1. 酒菜不多，但都是精华。请慢慢食用\n>  2. 文章内容不恰当，可以在评论区留言\n\n错误：\n\n>  * 欢迎来到我的博客。\n>  * 希望能入你法眼。\n> \n>  1. 酒菜不多，但都是精华。请慢慢食用。\n>  2. 文章内容不恰当，可以在评论区留言。\n\n\n# 格式化工具\n\n使用这些工具，可以一次性把需要的文章按照工具的规定进行格式化，类似于杂乱的代码被格式化有序。\n\n仓库                                               语言\nvinta/paranoid-auto-spacing                      JavaScript\nhuei90/pangu.node                                Node.js\nhuacnlee/auto-correct                            Ruby\nsparanoid/space-lover                            PHP (WordPress)\nnauxliu/auto-correct                             PHP\nricoa/copywriting-correct                        PHP\nhotoo/pangu.vim                                  Vim\nsparanoid/grunt-auto-spacing                     Node.js (Grunt)\nhjiang/scripts/add-space-between-latin-and-cjk   Python\n\n\n# 谁在这样做？\n\n网站             文案    UGC\nApple 中国       Yes   N/A\nApple 香港       Yes   N/A\nApple 台湾       Yes   N/A\nMicrosoft 中国   Yes   N/A\nMicrosoft 香港   Yes   N/A\nMicrosoft 台湾   Yes   N/A\nLeanCloud      Yes   N/A\n知乎             Yes   部分用户达成\nV2EX           Yes   Yes\nSegmentFault   Yes   部分用户达成\nApple4us       Yes   N/A\n豌豆荚            Yes   N/A\nRuby China     Yes   标题达成\nPHPHub         Yes   标题达成\n少数派            Yes   N/A\n力扣 LeetCode    Yes   Yes\n\n\n# 本文转载\n\n添加了一些自己的理解\n\n中文文案排版指北\n\n\n# 参考文献\n\n * Guidelines for Using Capital Letters\n * Letter case - Wikipedia\n * Punctuation - Oxford Dictionaries\n * Punctuation - The Purdue OWL\n * How to Use English Punctuation Corrently - wikiHow\n * 格式 - openSUSE\n * 全角和半角 - 维基百科\n * 引号 - 维基百科\n * 疑问惊叹号 - 维基百科\n * 全角 - 百度百科\n * 半角 - 百度百科',normalizedContent:'序言\n\n统一中文文案、排版的相关用法，降低团队成员之间的沟通成本，增强网站气质\n\n2021-11-13 @村长\n\n\n\n * 空格\n   * 中英文之间需要增加空格\n   * 中文与数字之间需要增加空格\n   * 数字与单位之间无需增加空格\n   * 全角标点与其他字符之间不加空格\n   * -ms-text-autospace to the rescue?\n * 标点符号\n   * 不重复使用标点符号\n * 全角和半角\n   * 直角符号\n   * 使用全角中文标点\n   * 数字使用半角字符\n   * 遇到完整的英文整句、特殊名词，其內容使用半角标点\n * 名词\n   * 专有名词使用正确的大小写\n   * 不要使用不地道的缩写\n * 争议\n   * 链接之间增加空格\n   * 简体中文使用直角引号\n * 自我\n   * 文档命名规范\n   * 加粗文字增加空格\n   * 加粗文字与标点符号\n   * 加粗标题使用引号（可选）\n   * 体系化文档开头添加目录\n   * 有序/无序列表末尾不加标点符合\n * 格式化工具\n * 谁在这样做？\n * 本文转载\n * 参考文献\n\n\n\n\n# 空格\n\n「有研究显示，打字的时候不喜欢在中文和英文之间加空格的人，感情路都走得很辛苦，有七成的比例会在 34 岁的时候跟自己不爱的人结婚，而其余三成的人最后只能把遗产留给自己的猫。毕竟爱情跟书写都需要适时地留白。\n\n与大家共勉之。\n\n来自—— vinta/paranoid-auto-spacing\n\n\n# 中英文之间需要增加空格\n\n正确：\n\n> 在 leancloud 上，数据存储是围绕 avobject 进行的。\n\n错误：\n\n> 在leancloud上，数据存储是围绕avobject进行的。\n\n> 在 leancloud上，数据存储是围绕avobject 进行的。\n\n完整的正确用法：\n\n> 在 leancloud 上，数据存储是围绕 avobject 进行的。每个 avobject 都包含了与 json 兼容的 key-value 对应的数据。数据是 schema-free 的，你不需要在每个 avobject 上提前指定存在哪些键，只要直接设定对应的 key-value 即可。\n\n例外：「豆瓣fm」等产品名词，按照官方所定义的格式书写。\n\n\n# 中文与数字之间需要增加空格\n\n正确：\n\n> 今天出去买菜花了 5000 元。\n\n错误：\n\n> 今天出去买菜花了 5000元。\n\n> 今天出去买菜花了5000元。\n\n\n# 数字与单位之间无需增加空格\n\n正确：\n\n> 我家的光纤入户宽带有 10gbps，ssd 一共有 10tb。\n\n错误：\n\n> 我家的光纤入户宽带有 10 gbps，ssd 一共有 20 tb。\n\n另外，度／百分比与数字之间不需要增加空格：\n\n正确：\n\n> 今天是 233° 的高温。\n\n> 新 macbook pro 有 15% 的 cpu 性能提升。\n\n错误：\n\n> 今天是 233 ° 的高温。\n\n> 新 macbook pro 有 15 % 的 cpu 性能提升。\n\n\n# 全角标点与其他字符之间不加空格\n\n正确：\n\n> 刚刚买了一部 iphone，好开心！\n\n错误：\n\n> 刚刚买了一部 iphone ，好开心！\n\n\n# -ms-text-autospace to the rescue?\n\nmicrosoft 有个 -ms-text-autospace 的 css 属性可以实现自动为中英文之间增加空白。不过目前并未普及，另外在其他应用场景，例如 os x、ios 的用户界面目前并不存在这个特性，所以请继续保持随手加空格的习惯。\n\n\n# 标点符号\n\n\n# 不重复使用标点符号\n\n正确：\n\n> 德国队竟然战胜了巴西队！\n\n> 她竟然对你说「喵」？！\n\n错误：\n\n> 德国队竟然战胜了巴西队！！\n\n> 德国队竟然战胜了巴西队！！！！！！！！\n\n> 她竟然对你说「喵」？？！！\n\n> 她竟然对你说「喵」？！？！？？！！\n\n\n# 全角和半角\n\n不明白什么是全角（全形）与半角（半形）符号？请查看维基百科词条『全角和半角』或者百度百科词条『全角』和『半角』。\n\n简单介绍：\n\n「全角」指一个字符占用两个标准字符位置的状态，如中文模式下的逗号、句号等：，。？「」\n\n「半角」就是 ascii 方式的字符，在没有中文输入法起作用的时候输入的字母数字和字符都是半角的，如英文模式下的逗号、句号等: , . ; ? ""\n\n\n# 直角符号\n\n英文单词使用 "" 或者 \'\'；\n\n中文词语使用 「」或者『』，不使用弯角符号 “” 和 ‘’，弯角符号更适用于手写。\n\n其中 "" 对应「」，\'\' 对应『』\n\n\n# 使用全角中文标点\n\n正确：\n\n> 嗨！你知道嘛？今天前台的小妹跟我说「喵」了哎！\n\n> 核磁共振成像（nmri）是什么原理都不知道？jfgi！\n\n错误：\n\n> 嗨! 你知道嘛? 今天前台的小妹跟我说 "喵" 了哎!\n\n> 嗨!你知道嘛?今天前台的小妹跟我说"喵"了哎!\n\n> 核磁共振成像 (nmri) 是什么原理都不知道? jfgi!\n\n> 核磁共振成像(nmri)是什么原理都不知道?jfgi!\n\n\n# 数字使用半角字符\n\n正确：\n\n> 这件蛋糕只卖 1000 元。\n\n错误：\n\n> 这件蛋糕只卖 １０００ 元。\n\n例外：在设计稿、宣传海报中如出现极少量数字的情形时，为方便文字对齐，是可以使用全角数字的。\n\n\n# 遇到完整的英文整句、特殊名词，其內容使用半角标点\n\n正确：\n\n> 乔布斯那句话是怎么说的？「stay hungry, stay foolish.」\n\n> 推荐你阅读《hackers & painters: big ideas from the computer age》，非常的有趣。\n\n错误：\n\n> 乔布斯那句话是怎么说的？「stay hungry，stay foolish。」\n\n> 推荐你阅读《hackers＆painters：big ideas from the computer age》，非常的有趣。\n\n\n# 名词\n\n\n# 专有名词使用正确的大小写\n\n大小写相关用法原属于英文书写范畴，不属于本 wiki 讨论內容，在这里只对部分易错用法进行简述。\n\n正确：\n\n> 使用 github 登录\n\n> 我们的客户有 github、foursquare、microsoft corporation、google、facebook, inc.。\n\n错误：\n\n> 使用 github 登录\n\n> 使用 github 登录\n\n> 使用 github 登录\n\n> 使用 github 登录\n\n> 使用 gｲんhц8 登录\n\n> 我们的客户有 github、foursquare、microsoft corporation、google、facebook, inc.。\n\n> 我们的客户有 github、foursquare、microsoft corporation、google、facebook, inc.。\n\n> 我们的客户有 github、foursquare、microsoft corporation、google、facebook, inc.。\n\n> 我们的客户有 github、foursquare、microsoft corporation、google、facebook, inc.。\n\n> 我们的客户有 gｲんhц8、ｷouяƨquﾑгє、๓เςг๏ร๏ŧt ς๏гק๏гคtเ๏ภn、900913、ƒ4ᄃeв๏๏к, iпᄃ.。\n\n注意：当网页中需要配合整体视觉风格而出现全部大写／小写的情形，html 中请使用标准的大小写规范进行书写；并通过 text-transform: uppercase;／text-transform: lowercase; 对表现形式进行定义。\n\n\n# 不要使用不地道的缩写\n\n正确：\n\n> 我们需要一位熟悉 javascript、html5，至少理解一种框架（如 backbone.js、angularjs、react 等）的前端开发者。\n\n错误：\n\n> 我们需要一位熟悉 js、h5，至少理解一种框架（如 backbone、angular、rjs 等）的 fed。\n\n\n# 争议\n\n以下用法略带有个人色彩，即：无论是否遵循下述规则，从语法的角度来讲都是正确的。\n\n\n# 链接之间增加空格\n\n用法：\n\n> 请 提交一个 issue 并分配给相关同事。\n\n> 访问我们网站的最新动态，请 点击这里 进行订阅！\n\n对比用法：\n\n> 请提交一个 issue 并分配给相关同事。\n\n> 访问我们网站的最新动态，请点击这里进行订阅！\n\n\n# 简体中文使用直角引号\n\n用法：\n\n> 「老师，『有条不紊』的『紊』是什么意思？」\n\n对比用法：\n\n> “老师，‘有条不紊’的‘紊’是什么意思？”\n\n\n# 自我\n\n\n# 文档命名规范\n\n正确：\n\n> 关于 - 技巧\n> \n> 笔记 - 技巧\n> \n> 排版 - 技巧\n\n错误：\n\n> 关于技巧\n> \n> 笔记 技巧\n> \n> 排版 ~ 技巧\n\n\n# 加粗文字增加空格\n\n正确：\n\n> 一个好的 排版 彰显好的文档。\n\n错误：\n\n> 一个好的排版彰显好的文档。\n\n\n# 加粗文字与标点符号\n\n加粗的文字如果是最后一行，或者独处一行，那么加粗范围包括标点符号；\n\n加粗的文字如果后面还有文字，则加粗范围不包括标点符号。\n\n正确：\n\n> 欢迎来到我的博客，请慢慢食用。\n\n> 欢迎来到我的博客，请慢慢食用。\n\n错误：\n\n> 欢迎来到我的博客，请慢慢食用。\n> \n> 欢迎来到我的博客， 请慢慢食用。\n\n可能看不太清楚，这里解释一下：\n\n * 错误的例子中，句号在加粗范围外面，逗号在加粗范围里面\n\n * 正确的例子中，句号在加粗范围里面，逗号在加粗范围外面\n\n\n# 加粗标题使用引号（可选）\n\n加粗的字体在手机端显示失效，阅读的效果与普通文字一样，所以加引号既可以在电脑端双重突出，也可以在手机端突出。\n\n这里的引号指的是 markdown 的引号，即开头添加的 > 符号，特征是左侧有阴影竖条块，如本内容的例子都是通过引号突出。\n\n正确：\n\n> > 什么是 young\n> \n> young 代表年轻、朝气、希望、活力 ......\n\n错误：\n\n> 什么是 young\n> \n> young 代表年轻、朝气、希望、活力 ......\n\n\n# 体系化文档开头添加目录\n\n生成可以跳转的目录，方便他人阅读和选择。\n\n如 vuepress 可以解析 [[toc]] 字符串从而生成目录。\n\n\n# 有序/无序列表末尾不加标点符合\n\n因为开头的符号已经代表句号/感叹号/问号了。\n\n正确：\n\n>  * 欢迎来到我的博客\n>  * 希望能入你法眼\n> \n>  1. 酒菜不多，但都是精华。请慢慢食用\n>  2. 文章内容不恰当，可以在评论区留言\n\n错误：\n\n>  * 欢迎来到我的博客。\n>  * 希望能入你法眼。\n> \n>  1. 酒菜不多，但都是精华。请慢慢食用。\n>  2. 文章内容不恰当，可以在评论区留言。\n\n\n# 格式化工具\n\n使用这些工具，可以一次性把需要的文章按照工具的规定进行格式化，类似于杂乱的代码被格式化有序。\n\n仓库                                               语言\nvinta/paranoid-auto-spacing                      javascript\nhuei90/pangu.node                                node.js\nhuacnlee/auto-correct                            ruby\nsparanoid/space-lover                            php (wordpress)\nnauxliu/auto-correct                             php\nricoa/copywriting-correct                        php\nhotoo/pangu.vim                                  vim\nsparanoid/grunt-auto-spacing                     node.js (grunt)\nhjiang/scripts/add-space-between-latin-and-cjk   python\n\n\n# 谁在这样做？\n\n网站             文案    ugc\napple 中国       yes   n/a\napple 香港       yes   n/a\napple 台湾       yes   n/a\nmicrosoft 中国   yes   n/a\nmicrosoft 香港   yes   n/a\nmicrosoft 台湾   yes   n/a\nleancloud      yes   n/a\n知乎             yes   部分用户达成\nv2ex           yes   yes\nsegmentfault   yes   部分用户达成\napple4us       yes   n/a\n豌豆荚            yes   n/a\nruby china     yes   标题达成\nphphub         yes   标题达成\n少数派            yes   n/a\n力扣 leetcode    yes   yes\n\n\n# 本文转载\n\n添加了一些自己的理解\n\n中文文案排版指北\n\n\n# 参考文献\n\n * guidelines for using capital letters\n * letter case - wikipedia\n * punctuation - oxford dictionaries\n * punctuation - the purdue owl\n * how to use english punctuation corrently - wikihow\n * 格式 - opensuse\n * 全角和半角 - 维基百科\n * 引号 - 维基百科\n * 疑问惊叹号 - 维基百科\n * 全角 - 百度百科\n * 半角 - 百度百科',charsets:{cyrillic:!0,cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"随笔 - 目录",frontmatter:{title:"随笔 - 目录",date:"2022-01-09T23:35:16.000Z",permalink:"/posts/category/",sidebar:!1,article:!1,comment:!1,editLink:!1,categories:[null],tags:[null],readingShow:"top"},regularPath:"/80.%E5%85%B3%E4%BA%8E/12.%E5%85%B3%E4%BA%8E%20-%20%E9%9A%8F%E7%AC%94/01.%E9%9A%8F%E7%AC%94%20-%20%E7%9B%AE%E5%BD%95.html",relativePath:"80.关于/12.关于 - 随笔/01.随笔 - 目录.md",key:"v-8cf140f8",path:"/posts/category/",headersStr:null,content:"随笔目前有两大类：\n\n技术随笔目录\n\n生活随笔目录",normalizedContent:"随笔目前有两大类：\n\n技术随笔目录\n\n生活随笔目录",charsets:{cjk:!0},lastUpdated:"2022/04/05, 14:44:34"},{title:"全局私密文章测试",frontmatter:{title:"全局私密文章测试",date:"2022-01-07T17:00:36.000Z",permalink:"/private/test1/",private:!0,username:"vdoing",password:123456,expire:6e4,titleTag:"测试",categories:["测试"],tags:[null],readingShow:"top"},regularPath:"/90.%E7%A7%81%E5%AF%86%E6%96%87%E7%AB%A0%E6%B5%8B%E8%AF%95/01.%E5%85%A8%E5%B1%80%E7%A7%81%E5%AF%86%E6%96%87%E7%AB%A0%E6%B5%8B%E8%AF%95.html",relativePath:"90.私密文章测试/01.全局私密文章测试.md",key:"v-3fbab6c4",path:"/private/test1/",headersStr:null,content:"恭喜您，访问成功！！！\n\n全局的私密文章仅需要在 frontmatter 添加如下信息：\n\n---\nprivate: true     # 开启文章私密，必须\n---\n\n\n1\n2\n3\n\n\n此时在 themeConfig 里的用户名和密码生效。\n\n如果您想单独给一个文章设为私密，则请访问 单个私密文章测试\n\n本文章的全部 frontmatter 内容：\n\n---\ntitle: 全局私密文章测试\ndate: 2022-01-07 17:00:36\npermalink: /private/test1/\nprivate: true\ntitleTag: 测试\ncategories: \n  - 测试\ntags: \n  - \n---\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n",normalizedContent:"恭喜您，访问成功！！！\n\n全局的私密文章仅需要在 frontmatter 添加如下信息：\n\n---\nprivate: true     # 开启文章私密，必须\n---\n\n\n1\n2\n3\n\n\n此时在 themeconfig 里的用户名和密码生效。\n\n如果您想单独给一个文章设为私密，则请访问 单个私密文章测试\n\n本文章的全部 frontmatter 内容：\n\n---\ntitle: 全局私密文章测试\ndate: 2022-01-07 17:00:36\npermalink: /private/test1/\nprivate: true\ntitletag: 测试\ncategories: \n  - 测试\ntags: \n  - \n---\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n",charsets:{cjk:!0},lastUpdated:"2022/04/05, 14:44:34"},{title:"单个私密文章测试",frontmatter:{title:"单个私密文章测试",date:"2022-01-07T17:01:37.000Z",permalink:"/private/test2/",titleTag:"测试",private:!0,username:"vdoing",password:123,expire:6e4,categories:["测试"],tags:[null],readingShow:"top"},regularPath:"/90.%E7%A7%81%E5%AF%86%E6%96%87%E7%AB%A0%E6%B5%8B%E8%AF%95/03.%E5%8D%95%E4%B8%AA%E7%A7%81%E5%AF%86%E6%96%87%E7%AB%A0%E6%B5%8B%E8%AF%95.html",relativePath:"90.私密文章测试/03.单个私密文章测试.md",key:"v-fb737192",path:"/private/test2/",headersStr:null,content:"恭喜您，访问成功！！！\n\n单独的私密文章，需要在 frontmatter 额外添加如下信息：\n\n---\nprivate: true     # 开启文章私密，必须\nusername: vdoing  # 用户名，必须\npassword: 123456  # 密码，必须\nexpire: 60000     # 登录状态超时清除时间，可选（不填则以全局超时时间为准，如果全局没有设置，则默认是一天）\n---\n\n\n1\n2\n3\n4\n5\n6\n\n\n此时该文章使用 themeConfig 里的用户名和密码 不会生效。仅仅该 frontmatter 的用户名和密码 生效。\n\n本文章的全部 frontmatter 内容：\n\n---\ntitle: 单独私密文章测试\ndate: 2022-01-07 17:01:37\npermalink: /private/test2/\ntitleTag: 测试\nprivate: true\nusername: vdoing\npassword: 123456\nexpire: 60000\ncategories:\n  - 测试\ntags: \n  - \n---\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n",normalizedContent:"恭喜您，访问成功！！！\n\n单独的私密文章，需要在 frontmatter 额外添加如下信息：\n\n---\nprivate: true     # 开启文章私密，必须\nusername: vdoing  # 用户名，必须\npassword: 123456  # 密码，必须\nexpire: 60000     # 登录状态超时清除时间，可选（不填则以全局超时时间为准，如果全局没有设置，则默认是一天）\n---\n\n\n1\n2\n3\n4\n5\n6\n\n\n此时该文章使用 themeconfig 里的用户名和密码 不会生效。仅仅该 frontmatter 的用户名和密码 生效。\n\n本文章的全部 frontmatter 内容：\n\n---\ntitle: 单独私密文章测试\ndate: 2022-01-07 17:01:37\npermalink: /private/test2/\ntitletag: 测试\nprivate: true\nusername: vdoing\npassword: 123456\nexpire: 60000\ncategories:\n  - 测试\ntags: \n  - \n---\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n",charsets:{cjk:!0},lastUpdated:"2022/04/05, 14:44:34"},{title:"本站 - 留言区",frontmatter:{title:"本站 - 留言区",date:"2022-02-15T22:32:38.000Z",permalink:"/message-area/",categories:[null],tags:[null],sidebar:!1,article:!1,editLink:!1,readingShow:"top"},regularPath:"/90.%E6%9C%AC%E7%AB%99%20-%20%E7%95%99%E8%A8%80%E5%8C%BA.html",relativePath:"90.本站 - 留言区.md",key:"v-3006ad1e",path:"/message-area/",headersStr:null,content:"如果大家遇到了什么问题，欢迎大家留言讨论。\n\n如果 10s 后评论区还在转圈，可以尝试刷新页面。",normalizedContent:"如果大家遇到了什么问题，欢迎大家留言讨论。\n\n如果 10s 后评论区还在转圈，可以尝试刷新页面。",charsets:{cjk:!0},lastUpdated:"2022/04/05, 14:44:34"},{title:"归档",frontmatter:{archivesPage:!0,title:"归档",permalink:"/archives/",article:!1,readingShow:"top"},regularPath:"/@pages/archivesPage.html",relativePath:"@pages/archivesPage.md",key:"v-0f731a6a",path:"/archives/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/04/05, 14:44:34"},{title:"Vdoing私密文章登录",frontmatter:{title:"Vdoing私密文章登录",date:"2022-01-07T14:26:04.000Z",permalink:"/vdoing/login/",sidebar:!1,article:!1,comment:!1,editLink:!1,readingShow:"top"},regularPath:"/99.Vdoing%E7%A7%81%E5%AF%86%E6%96%87%E7%AB%A0%E7%99%BB%E5%BD%95.html",relativePath:"99.Vdoing私密文章登录.md",key:"v-01cbf25d",path:"/vdoing/login/",headersStr:null,content:"您当前访问的是博主的私密文章，请输入有效的用户名和密码，如果没有，请向博主获取。\n\n如果你是 全局私密文章测试 或者 单个私密文章测试 进来的，那么登录信息为：\n\n * 全局私密文章测试：用户名为 vdoing，密码为 123456\n * 单个私密文章测试：用户名为 vdoing，密码为 123\n\n内置五个异步弹窗提示：不输入用户名和密码、只输入两者中的一个、用户名或密码错误、用户名和密码正确。",normalizedContent:"您当前访问的是博主的私密文章，请输入有效的用户名和密码，如果没有，请向博主获取。\n\n如果你是 全局私密文章测试 或者 单个私密文章测试 进来的，那么登录信息为：\n\n * 全局私密文章测试：用户名为 vdoing，密码为 123456\n * 单个私密文章测试：用户名为 vdoing，密码为 123\n\n内置五个异步弹窗提示：不输入用户名和密码、只输入两者中的一个、用户名或密码错误、用户名和密码正确。",charsets:{cjk:!0},lastUpdated:"2022/04/05, 14:44:34"},{title:"Github - 好看的主页",frontmatter:{title:"Github - 好看的主页",date:"2022-01-09T17:35:33.000Z",permalink:"/github/index/",titleTag:"原创",sidebar:"auto",categories:["技术随笔"],tags:[null],readingShow:"top"},regularPath:"/_posts/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/Github%20-%20%E5%A5%BD%E7%9C%8B%E7%9A%84%E4%B8%BB%E9%A1%B5.html",relativePath:"_posts/技术随笔/Github - 好看的主页.md",key:"v-43f170d4",path:"/github/index/",headers:[{level:2,title:"图片",slug:"图片",normalizedTitle:"图片",charIndex:51},{level:2,title:"效果",slug:"效果",normalizedTitle:"效果",charIndex:57},{level:2,title:"如何使用",slug:"如何使用",normalizedTitle:"如何使用",charIndex:63}],headersStr:"图片 效果 如何使用",content:'笔记\n\n介绍我的 GitHub 个人首页的简单卡片设计。\n\n2022-01-09 @村长\n\n\n\n * 图片\n * 效果\n * 如何使用\n\n\n\n\n# 图片\n\n\n# 效果\n\n这是我目前 GitHub 的个人首页，多了一些内容，如卡片统计，仓库的语言统计等。\n\n\n\n你也可以直接去我的主页查看效果：https://github.com/huangguan2001\n\n\n# 如何使用\n\n首先你需要创建一个仓库，而仓库名 必须 是你的用户名，如我的 GitHub 叫做 Kele-Bingtang，则我的仓库名就叫 Kele-Bingtang。\n\n创建仓库的时候，记得公开仓库和创建 README 文件，如图：\n\n\n\n创建好仓库后，不需要克隆仓库到本地，我们直接在仓库里修改 README 文件即可。\n\n这里说明一下：两个卡片内容是第三方提供的，并且第三方提供了很多主题颜色，官方地址：https://github.com/anuraghazra/github-readme-stats。\n\n我的 README 文件内容：\n\n<a href="https://github.com/huangguan2001/">\n  <img align="right" src="https://github-readme-stats.vercel.app/api?username=Kele-Bingtang&theme=algolia&count_private=true&show_icons=true" />\n</a>\n\n<a href="https://github.com/huangguan2001/">\n  <img align="right" src="https://github-readme-stats.vercel.app/api/top-langs/?username=Kele-Bingtang&layout=compact" />\n</a>\n\n## Hello World 👋\n\n- 🔭 I’m currently working on Beijing\n- 💬 You can ask me about java\n- 📫 How to reach me: <https://youngkbt.cn?contact=1>\n- 😄 Pronouns: youngkbt\n- ⚡ Fun fact: 🏀 & 🏃‍ & 💻\n- :meat_on_bone: Meat lover\n\n## My Website\n\n💻：<https://youngkbt.cn>\n  \n## My Blog Websites\n\n- 1️⃣ Main(fast)：<https://notes.youngkbt.cn/>\n- 2️⃣ GitHub Pages(fast)：<https://github.notes.youngkbt.cn/>\n- 3️⃣ Gitee Pages(fast)：<http://gitee.notes.youngkbt.cn/>\n- 4️⃣ My Server(slow)：<https://server.notes.youngkbt.cn/>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n其中 a 标签和 img 标签的 src 就是第三方提供的路径，如果你想直接使用我的效果卡片，那么只需要把第 2 行的 https://github-readme-stats.vercel.app/api?username=Kele-Bingtang&theme=algolia&count_private=true&show_icons=true 的 username 改成你自己的 GitHub 用户名，包括第 6 行的 username。其他不变。\n\n当然，a 标签的 src 也改成你想要跳转的地址。\n\n填好 README 文件后，点击保存，然后去首页刷新，就会看到效果。',normalizedContent:'笔记\n\n介绍我的 github 个人首页的简单卡片设计。\n\n2022-01-09 @村长\n\n\n\n * 图片\n * 效果\n * 如何使用\n\n\n\n\n# 图片\n\n\n# 效果\n\n这是我目前 github 的个人首页，多了一些内容，如卡片统计，仓库的语言统计等。\n\n\n\n你也可以直接去我的主页查看效果：https://github.com/huangguan2001\n\n\n# 如何使用\n\n首先你需要创建一个仓库，而仓库名 必须 是你的用户名，如我的 github 叫做 kele-bingtang，则我的仓库名就叫 kele-bingtang。\n\n创建仓库的时候，记得公开仓库和创建 readme 文件，如图：\n\n\n\n创建好仓库后，不需要克隆仓库到本地，我们直接在仓库里修改 readme 文件即可。\n\n这里说明一下：两个卡片内容是第三方提供的，并且第三方提供了很多主题颜色，官方地址：https://github.com/anuraghazra/github-readme-stats。\n\n我的 readme 文件内容：\n\n<a href="https://github.com/huangguan2001/">\n  <img align="right" src="https://github-readme-stats.vercel.app/api?username=kele-bingtang&theme=algolia&count_private=true&show_icons=true" />\n</a>\n\n<a href="https://github.com/huangguan2001/">\n  <img align="right" src="https://github-readme-stats.vercel.app/api/top-langs/?username=kele-bingtang&layout=compact" />\n</a>\n\n## hello world 👋\n\n- 🔭 i’m currently working on beijing\n- 💬 you can ask me about java\n- 📫 how to reach me: <https://youngkbt.cn?contact=1>\n- 😄 pronouns: youngkbt\n- ⚡ fun fact: 🏀 & 🏃‍ & 💻\n- :meat_on_bone: meat lover\n\n## my website\n\n💻：<https://youngkbt.cn>\n  \n## my blog websites\n\n- 1️⃣ main(fast)：<https://notes.youngkbt.cn/>\n- 2️⃣ github pages(fast)：<https://github.notes.youngkbt.cn/>\n- 3️⃣ gitee pages(fast)：<http://gitee.notes.youngkbt.cn/>\n- 4️⃣ my server(slow)：<https://server.notes.youngkbt.cn/>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n其中 a 标签和 img 标签的 src 就是第三方提供的路径，如果你想直接使用我的效果卡片，那么只需要把第 2 行的 https://github-readme-stats.vercel.app/api?username=kele-bingtang&theme=algolia&count_private=true&show_icons=true 的 username 改成你自己的 github 用户名，包括第 6 行的 username。其他不变。\n\n当然，a 标签的 src 也改成你想要跳转的地址。\n\n填好 readme 文件后，点击保存，然后去首页刷新，就会看到效果。',charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"标签",frontmatter:{tagsPage:!0,title:"标签",permalink:"/tags/",article:!1,readingShow:"top"},regularPath:"/@pages/tagsPage.html",relativePath:"@pages/tagsPage.md",key:"v-48d27e4b",path:"/tags/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/04/05, 14:44:34"},{title:"Maven - 上传中央仓库",frontmatter:{title:"Maven - 上传中央仓库",date:"2022-02-07T21:28:59.000Z",permalink:"/maven/upload/",titleTag:"原创",categories:["Maven"],tags:[null],sidebar:"auto",readingShow:"top"},regularPath:"/_posts/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/Maven%20-%20%E4%B8%8A%E4%BC%A0%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93.html",relativePath:"_posts/技术随笔/Maven - 上传中央仓库.md",key:"v-7e05f2a4",path:"/maven/upload/",headers:[{level:2,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:63},{level:2,title:"使用网址",slug:"使用网址",normalizedTitle:"使用网址",charIndex:69},{level:2,title:"工单管理",slug:"工单管理",normalizedTitle:"工单管理",charIndex:77},{level:3,title:"注册账号",slug:"注册账号",normalizedTitle:"注册账号",charIndex:87},{level:3,title:"创建issue",slug:"创建issue",normalizedTitle:"创建issue",charIndex:97},{level:2,title:"GPG配置",slug:"gpg配置",normalizedTitle:"gpg配置",charIndex:108},{level:3,title:"生成GPG密钥对",slug:"生成gpg密钥对",normalizedTitle:"生成gpg密钥对",charIndex:119},{level:3,title:"上传GPG公钥",slug:"上传gpg公钥",normalizedTitle:"上传gpg公钥",charIndex:133},{level:2,title:"项目配置",slug:"项目配置",normalizedTitle:"项目配置",charIndex:144},{level:3,title:"配置settings.xml",slug:"配置settings-xml",normalizedTitle:"配置settings.xml",charIndex:154},{level:3,title:"配置pom.xml",slug:"配置pom-xml",normalizedTitle:"配置pom.xml",charIndex:174},{level:2,title:"构建仓库",slug:"构建仓库",normalizedTitle:"构建仓库",charIndex:187},{level:3,title:"部署项目",slug:"部署项目",normalizedTitle:"部署项目",charIndex:197},{level:3,title:"上传中央仓库",slug:"上传中央仓库",normalizedTitle:"上传中央仓库",charIndex:207},{level:2,title:"问题",slug:"问题",normalizedTitle:"问题",charIndex:37}],headersStr:"介绍 使用网址 工单管理 注册账号 创建issue GPG配置 生成GPG密钥对 上传GPG公钥 项目配置 配置settings.xml 配置pom.xml 构建仓库 部署项目 上传中央仓库 问题",content:'笔记\n\n记录我上传 jar 包 Maven 中央仓库的过程，以及遇到的一些问题。\n\n2022-02-07 @村长\n\n\n\n * 介绍\n * 使用网址\n * 工单管理\n   * 注册账号\n   * 创建issue\n * GPG配置\n   * 生成GPG密钥对\n   * 上传GPG公钥\n * 项目配置\n   * 配置settings.xml\n   * 配置pom.xml\n * 构建仓库\n   * 部署项目\n   * 上传中央仓库\n * 问题\n\n\n\n\n# 介绍\n\n我上传了我的 dbdtobean.jar 到 Maven 中央仓库，全名是 database data to java bean。\n\n作用：读取数据库的表字段，生成 bean 文件，也就是实体类文件，并且可以选择的生成 MVC 类文件：Controller、Service、Mapper、Dao，其中每一个类文件可以选择生成五种方法：CRUD（增删改查）。\n\n花了半天研究如何上传，期间也踩了一些坑，上传完立马过来记录过程。\n\n\n# 使用网址\n\n * 工单管理：https://issues.sonatype.org\n   \n   这是我们的第一步，在这里面申请上传资格，以及注册自己的 groupId。\n\n * 构建仓库 : https://s01.oss.sonatype.org/#welcome\n   \n   获得上传资格后，我们把 jar 包上传到这里，并管理 jar 包，最终也在这里申请 Release 后，然会同步到 Maven 中央仓库。\n   \n   > 说明，这个网址是官网提供最新的，网上一些旧的教程提供的是另一个网址，那个网址无法登录和上传。\n\n * 仓库镜像: https://mvnrepository.com/\n   \n   同步到 Maven 中央仓库后，等待 1-2 小时，我们就可以在这里面查看我们的 jar 包。\n\n\n# 工单管理\n\n\n# 注册账号\n\n首先我们需要注册 JIRA 账号，也就是 Maven 仓库账号。\n\nJIRA 是一个项目管理服务，类似于国内的 Teambition。Sonatype 通过 JIRA 来管理 OSSRH 仓库。\n\n> 注册地址：https://issues.sonatype.org/secure/Signup!default.jspa\n\n需要填写 Email，Full Name，Username 以及 Password，其中 Username 与 Password 后面的步骤需要用到，请记下来。\n\n\n# 创建issue\n\n这一步就是申请上传 jar 包的资格。\n\n登录成功后，上方有个 Create（中文是创建）的按钮，点击后选择项目 Community Support - Open Source Project Repository Hosting (OSSRH)\n\n\n\n\n\n新建后，稍等几分钟到几个小时，可以看到管理员会提示去进行域名解析，添加提供好的字符串。\n\n\n\n添加成功后，在页面上方点击「回应」，即可让管理员知道你的操作。\n\n当 Issue 的 Status 变为 RESOLVED（中文是已解决，下图的绿色背景）后，就可以进行下一步操作了，否则，就先等待。\n\n\n\n\n# GPG配置\n\n发布到 Maven 仓库中的所有文件都要使用 GPG 签名，以保障完整性。因此，我们需要在本地安装并配置 GPG。\n\n安装 GPG 非常简单，下载并安装 GPG 即可，根据自己的操作系统选择。\n\nPS：必须安装 GPG，不然 Maven 不允许发布到中央仓库。\n\n安装完后在命令行查看版本，验证是否成功：\n\ngpg --version\n\n\n1\n\n\n\n# 生成GPG密钥对\n\n生成 GPG 密钥对，建议在 Git Bash Here 里（其实 Git 自带简易版 GPG，如果不想安装 GPG，则需要去环境变量配置 GPG，路径在 Git 根目录/usr/bin）。\n\n生成 GPG 密钥对命令：\n\ngpg --gen-key\n\n\n1\n\n\n生成密钥时将需要输入 name、email 以及 password。password 在之后的步骤需要用到，请记下来。\n\n\n\n如果忘记了内容，则去 C/Users/用户名/.gnupg/pubring.kbx 查看内容。\n\n\n# 上传GPG公钥\n\n生成密钥后，要将公钥上传到公共的密钥服务器，这样其他人才可以通过公钥来验证 jar 包的完整性。\n\n有三种方式，三选一即可，我选了第一个，因为第二个和第三个上传总是失败。\n\ngpg --keyserver keyserver.ubuntu.com --send-keys 【your public key】\ngpg --keyserver keys.openpgp.org --send-keys 【your public key】\ngpg --keyserver pgp.mit.edu --send-keys 【your public key】\n\n\n1\n2\n3\n\n\n如我的：\n\ngpg --keyserver keyserver.ubuntu.com --send-keys 584EFEEEF72DA6C4A363A032C3ADCE1186852D9B\n\n\n1\n\n\n查询是否上传成功：（对应上面的上传地址）\n\ngpg --keyserver keyserver.ubuntu.com --recv-keys 【your public key】\ngpg --keyserver keys.openpgp.org  --recv-keys 【your public key】\ngpg --keyserver pgp.mit.edu --recv-keys 【your public key】\n\n\n1\n2\n3\n\n\n如图：\n\n\n\n\n# 项目配置\n\n接下来就是项目的配置了：\n\n * 配置上传的 Maven 中央仓库地址\n * 配置上传的项目内容\n * 配置文档生成插件\n * 配置项目的 Git 地址\n\n......\n\n\n# 配置settings.xml\n\n配置 Maven 的 setting.xml，路径在 Maven 根目录下的 conf 目录下。\n\n打开后，找到 servers 节点，添加两个 server 子节点\n\n<servers>\n    <server>\n        <id>sonatype-nexus-snapshots</id>\n        <username>Sonatype 账号</username>\n        <password>Sonatype 密码</password>\n    </server>\n    <server>\n        <id>sonatype-nexus-staging</id>\n        <username>Sonatype 账号</username>\n        <password>Sonatype 密码</password>\n    </server>\n</servers>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n两个 id 不要随便要改，下面的内容需要这两个 id，如果改，则下面的也要改。\n\nSonatype 账号和密码就是在工单管理注册的账号和密码。\n\n\n# 配置pom.xml\n\n> 下面的配置是额外配置，一些基本的 pom 配置如依赖 dependencies，就是你的内容。\n> \n> 前面先介绍一步一步添加，后面我会提供完整版。\n\n配置 groupId，和申请 issue 的一致，配置你的 name、description、url，如我的：\n\n<groupId>cn.youngkbt</groupId>\n<artifactId>dbdtobean-spring-boot-autoconfigure</artifactId>\n<version>1.4</version>\n<name>dbdtobean-spring-boot-autoconfigure</name>\n<description>Read the table fields of the database and generate entity class files and curd class files of controller, service, Dao and mapper layers</description>\n<url>https://github.com/huangguan2001/DBDToBean</url>\n\n\n1\n2\n3\n4\n5\n6\n\n\n配置 licenses，这里直接使用 apache 提供的（无需修改）\n\n<licenses>\n    <license>\n        <name>Server Side Public License</name>\n        <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n        <distribution>repo</distribution>\n    </license>\n</licenses>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n配置 scm，这是你的项目 Git 地址（需要修改）\n\n<scm>\n    <tag>master</tag>\n    \x3c!-- 项目的 Git 地址 --\x3e\n    <url>https://github.com/huangguan2001/dbdtobean-spring-boot-autoconfigure</url>\n    \x3c!-- 项目的 http Git 地址 --\x3e\n    <connection>https://github.com/huangguan2001/dbdtobean-spring-boot-autoconfigure.git</connection>\n</scm>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n配置 repositories，这里的 id 对应配置 settings.xml 的 id（id 可修改，其他无需修改）\n\n<repositories>\n    <repository>\n        <id>sonatype-nexus-snapshots</id>\n        <name>Sonatype Nexus Snapshots</name>\n        <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n        <releases>\n            <enabled>false</enabled>\n        </releases>\n        <snapshots>\n            <enabled>true</enabled>\n        </snapshots>\n    </repository>\n</repositories>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n配置 distributionManagement。这是上传的仓库地址：快照版（Snapshots）和发布版（Release）（无需修改）\n\n<distributionManagement>\n    <snapshotRepository>\n        <id>sonatype-nexus-snapshots</id>\n        <name>Sonatype Nexus Snapshots</name>\n        <url>https://s01.oss.sonatype.org/content/repositories/snapshots/</url>\n    </snapshotRepository>\n    <repository>\n        <id>sonatype-nexus-staging</id>\n        <name>Nexus Release Repository</name>\n        <url>https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/</url>\n    </repository>\n</distributionManagement>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n配置 profiles，里面的插件是 Maven 需要校验用到，如生成文档插件给开发人员看如何使用（无需修改）\n\n> 注意：如果下载失败，则把 groupId、artifactId、version 内容剪切到 dependencies 里下载成功后，再剪切回来。\n\n<profiles>\n    <profile>\n        <id>sonatype-oss-release</id>\n        <activation>\n            <activeByDefault>true</activeByDefault>\n        </activation>\n        <build>\n            <plugins>\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-source-plugin</artifactId>\n                    <version>3.2.1</version>\n                    <executions>\n                        <execution>\n                            <id>package</id>\n                            <goals>\n                                <goal>jar-no-fork</goal>\n                            </goals>\n                        </execution>\n                    </executions>\n                </plugin>\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-javadoc-plugin</artifactId>\n                    <version>3.2.0</version>\n                    <executions>\n                        <execution>\n                            <phase>package</phase>\n                            <goals>\n                                <goal>jar</goal>\n                            </goals>\n                        </execution>\n                    </executions>\n                </plugin>\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-gpg-plugin</artifactId>\n                    <version>1.6</version>\n                    <executions>\n                        <execution>\n                            <id>sign-artifacts</id>\n                            <phase>verify</phase>\n                            <goals>\n                                <goal>sign</goal>\n                            </goals>\n                        </execution>\n                    </executions>\n                </plugin>\n            </plugins>\n        </build>\n    </profile>\n</profiles>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n\n\n最后配置你的 developers 个人信息（需要修改）\n\n<developers>\n    <developer>\n        <name>Kele_Bingtang</name>\n        <id>Kele_Bingtang</id>\n        <email>2456019588@qq.com</email>\n        <roles>\n            <role>Developer</role>\n        </roles>\n        <timezone>+8</timezone>\n    </developer>\n</developers>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n我的 pom 完整版：\n\n<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>cn.youngkbt</groupId>\n    <artifactId>dbdtobean</artifactId>\n    <version>1.4</version>\n    <name>dbdtobean</name>\n    <description>Read the table fields of the database and generate entity class files and curd class files of controller, service, Dao and mapper layers</description>\n    <url>https://github.com/huangguan2001/DBDToBean</url>\n    \n    <properties>\n        <maven.compiler.source>8</maven.compiler.source>\n        <maven.compiler.target>8</maven.compiler.target>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    </properties>\n    \n\n    <licenses>\n        <license>\n            <name>Server Side Public License</name>\n            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n            <distribution>repo</distribution>\n        </license>\n    </licenses>\n\n    <scm>\n        <tag>master</tag>\n        \x3c!-- 项目的 Git 地址 --\x3e\n        <url>https://github.com/huangguan2001/DBDToBean</url>\n        \x3c!-- 项目的 http Git 地址 --\x3e\n        <connection>https://github.com/huangguan2001/DBDToBean.git</connection>\n    </scm>\n\n    <repositories>\n        <repository>\n            <id>sonatype-nexus-snapshots</id>\n            <name>Sonatype Nexus Snapshots</name>\n            <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n            <releases>\n                <enabled>false</enabled>\n            </releases>\n            <snapshots>\n                <enabled>true</enabled>\n            </snapshots>\n        </repository>\n    </repositories>\n\n\n    <distributionManagement>\n        <snapshotRepository>\n            <id>sonatype-nexus-snapshots</id>\n            <name>Sonatype Nexus Snapshots</name>\n            <url>https://s01.oss.sonatype.org/content/repositories/snapshots/</url>\n        </snapshotRepository>\n        <repository>\n            <id>sonatype-nexus-staging</id>\n            <name>Nexus Release Repository</name>\n            <url>https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/</url>\n        </repository>\n    </distributionManagement>\n\n\n    <profiles>\n        <profile>\n            <id>sonatype-oss-release</id>\n            <activation>\n                <activeByDefault>true</activeByDefault>\n            </activation>\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-source-plugin</artifactId>\n                        <version>3.2.1</version>\n                        <executions>\n                            <execution>\n                                <id>package</id>\n                                <goals>\n                                    <goal>jar-no-fork</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-javadoc-plugin</artifactId>\n                        <version>3.2.0</version>\n                        <executions>\n                            <execution>\n                                <phase>package</phase>\n                                <goals>\n                                    <goal>jar</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-gpg-plugin</artifactId>\n                        <version>1.6</version>\n                        <executions>\n                            <execution>\n                                <id>sign-artifacts</id>\n                                <phase>verify</phase>\n                                <goals>\n                                    <goal>sign</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n    </profiles>\n\n    <developers>\n        <developer>\n            <name>Kele_Bingtang</name>\n            <id>Kele_Bingtang</id>\n            <email>2456019588@qq.com</email>\n            <roles>\n                <role>Developer</role>\n            </roles>\n            <timezone>+8</timezone>\n        </developer>\n    </developers>\n    \n</project>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n\n\n\n# 构建仓库\n\n\n# 部署项目\n\n项目配置成功后，开始部署到构建仓库\n\nmvn clean deploy -P sonatype-oss-release -Darguments="gpg.passphrase=密钥密码"\n\n\n1\n\n\n或者使用 IDEA 的界面操作\n\n\n\n然后后弹出密码框，输入 gpg.passphrase，也就是之前生成 GPG 密钥对写的 passphrase。\n\n执行成功的命令行会有 BUILD SUCCESS 提示。\n\n\n# 上传中央仓库\n\nmvn clean deploy 命令执行成功，使用 JIRA 账号登陆（界面右上角的 Login In）：https://s01.oss.sonatype.org/#welcome。\n\n登录成功后，点击左侧的 Staging Repositories 就可以看到你所发布的 jar 包了：\n\n\n\n然后点击上方的 Close，并点击弹出的 Confrim，该按钮将会对上传的 jar 包进行检查校验\n\n * 如果符合 Maven 的标准，则 Release 按钮变亮，点击 Release 并点击 Comfirm 后，等待 1-2 小时，就可以前往 https://mvnrepository.com/ 搜索自己的 jar 包。\n\n * 如果不符合 Maven 的标准，则在下方点击 Activity 选项卡，查看错误信息，并回到项目代码进行修改\n\n\n\n\n# 问题\n\n> Q：mvn clean deploy 时报 Failed to execute goal org.apache.maven.plugins:maven-gpg-plugin:1.5:sign (default) on project xxxx: Exit code: 1 -> [Help 1]\n\nA：没有安装 GPG 或者没有配置 GPG 的环境变量，如果安装了 GPG，则在安装的过程 已经自动 配好环境变量。\n\n> Q：java.lang.IllegalArgumentException\n\nA：环境变量的 Classpath 中把 %JAVA__HOME% 换成 JDK 的绝对路径。\n\n> Q：Failed to execute goal org.apache.maven.plugins:maven-javadoc-plugin:3.2.0\n\n方法的注释必须有@参数，开头的类注释只能是 @author、@version、@since，如下图：\n\n\n\n\n\n> Close 时，找不到 javadoc、source 等错误。\n\nmvn clean deploy 时不能跳过 source、javadoc、gpg 插件。在个人的 maven repository 中要看到如下图文件后缀的文件\n\n',normalizedContent:'笔记\n\n记录我上传 jar 包 maven 中央仓库的过程，以及遇到的一些问题。\n\n2022-02-07 @村长\n\n\n\n * 介绍\n * 使用网址\n * 工单管理\n   * 注册账号\n   * 创建issue\n * gpg配置\n   * 生成gpg密钥对\n   * 上传gpg公钥\n * 项目配置\n   * 配置settings.xml\n   * 配置pom.xml\n * 构建仓库\n   * 部署项目\n   * 上传中央仓库\n * 问题\n\n\n\n\n# 介绍\n\n我上传了我的 dbdtobean.jar 到 maven 中央仓库，全名是 database data to java bean。\n\n作用：读取数据库的表字段，生成 bean 文件，也就是实体类文件，并且可以选择的生成 mvc 类文件：controller、service、mapper、dao，其中每一个类文件可以选择生成五种方法：crud（增删改查）。\n\n花了半天研究如何上传，期间也踩了一些坑，上传完立马过来记录过程。\n\n\n# 使用网址\n\n * 工单管理：https://issues.sonatype.org\n   \n   这是我们的第一步，在这里面申请上传资格，以及注册自己的 groupid。\n\n * 构建仓库 : https://s01.oss.sonatype.org/#welcome\n   \n   获得上传资格后，我们把 jar 包上传到这里，并管理 jar 包，最终也在这里申请 release 后，然会同步到 maven 中央仓库。\n   \n   > 说明，这个网址是官网提供最新的，网上一些旧的教程提供的是另一个网址，那个网址无法登录和上传。\n\n * 仓库镜像: https://mvnrepository.com/\n   \n   同步到 maven 中央仓库后，等待 1-2 小时，我们就可以在这里面查看我们的 jar 包。\n\n\n# 工单管理\n\n\n# 注册账号\n\n首先我们需要注册 jira 账号，也就是 maven 仓库账号。\n\njira 是一个项目管理服务，类似于国内的 teambition。sonatype 通过 jira 来管理 ossrh 仓库。\n\n> 注册地址：https://issues.sonatype.org/secure/signup!default.jspa\n\n需要填写 email，full name，username 以及 password，其中 username 与 password 后面的步骤需要用到，请记下来。\n\n\n# 创建issue\n\n这一步就是申请上传 jar 包的资格。\n\n登录成功后，上方有个 create（中文是创建）的按钮，点击后选择项目 community support - open source project repository hosting (ossrh)\n\n\n\n\n\n新建后，稍等几分钟到几个小时，可以看到管理员会提示去进行域名解析，添加提供好的字符串。\n\n\n\n添加成功后，在页面上方点击「回应」，即可让管理员知道你的操作。\n\n当 issue 的 status 变为 resolved（中文是已解决，下图的绿色背景）后，就可以进行下一步操作了，否则，就先等待。\n\n\n\n\n# gpg配置\n\n发布到 maven 仓库中的所有文件都要使用 gpg 签名，以保障完整性。因此，我们需要在本地安装并配置 gpg。\n\n安装 gpg 非常简单，下载并安装 gpg 即可，根据自己的操作系统选择。\n\nps：必须安装 gpg，不然 maven 不允许发布到中央仓库。\n\n安装完后在命令行查看版本，验证是否成功：\n\ngpg --version\n\n\n1\n\n\n\n# 生成gpg密钥对\n\n生成 gpg 密钥对，建议在 git bash here 里（其实 git 自带简易版 gpg，如果不想安装 gpg，则需要去环境变量配置 gpg，路径在 git 根目录/usr/bin）。\n\n生成 gpg 密钥对命令：\n\ngpg --gen-key\n\n\n1\n\n\n生成密钥时将需要输入 name、email 以及 password。password 在之后的步骤需要用到，请记下来。\n\n\n\n如果忘记了内容，则去 c/users/用户名/.gnupg/pubring.kbx 查看内容。\n\n\n# 上传gpg公钥\n\n生成密钥后，要将公钥上传到公共的密钥服务器，这样其他人才可以通过公钥来验证 jar 包的完整性。\n\n有三种方式，三选一即可，我选了第一个，因为第二个和第三个上传总是失败。\n\ngpg --keyserver keyserver.ubuntu.com --send-keys 【your public key】\ngpg --keyserver keys.openpgp.org --send-keys 【your public key】\ngpg --keyserver pgp.mit.edu --send-keys 【your public key】\n\n\n1\n2\n3\n\n\n如我的：\n\ngpg --keyserver keyserver.ubuntu.com --send-keys 584efeeef72da6c4a363a032c3adce1186852d9b\n\n\n1\n\n\n查询是否上传成功：（对应上面的上传地址）\n\ngpg --keyserver keyserver.ubuntu.com --recv-keys 【your public key】\ngpg --keyserver keys.openpgp.org  --recv-keys 【your public key】\ngpg --keyserver pgp.mit.edu --recv-keys 【your public key】\n\n\n1\n2\n3\n\n\n如图：\n\n\n\n\n# 项目配置\n\n接下来就是项目的配置了：\n\n * 配置上传的 maven 中央仓库地址\n * 配置上传的项目内容\n * 配置文档生成插件\n * 配置项目的 git 地址\n\n......\n\n\n# 配置settings.xml\n\n配置 maven 的 setting.xml，路径在 maven 根目录下的 conf 目录下。\n\n打开后，找到 servers 节点，添加两个 server 子节点\n\n<servers>\n    <server>\n        <id>sonatype-nexus-snapshots</id>\n        <username>sonatype 账号</username>\n        <password>sonatype 密码</password>\n    </server>\n    <server>\n        <id>sonatype-nexus-staging</id>\n        <username>sonatype 账号</username>\n        <password>sonatype 密码</password>\n    </server>\n</servers>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n两个 id 不要随便要改，下面的内容需要这两个 id，如果改，则下面的也要改。\n\nsonatype 账号和密码就是在工单管理注册的账号和密码。\n\n\n# 配置pom.xml\n\n> 下面的配置是额外配置，一些基本的 pom 配置如依赖 dependencies，就是你的内容。\n> \n> 前面先介绍一步一步添加，后面我会提供完整版。\n\n配置 groupid，和申请 issue 的一致，配置你的 name、description、url，如我的：\n\n<groupid>cn.youngkbt</groupid>\n<artifactid>dbdtobean-spring-boot-autoconfigure</artifactid>\n<version>1.4</version>\n<name>dbdtobean-spring-boot-autoconfigure</name>\n<description>read the table fields of the database and generate entity class files and curd class files of controller, service, dao and mapper layers</description>\n<url>https://github.com/huangguan2001/dbdtobean</url>\n\n\n1\n2\n3\n4\n5\n6\n\n\n配置 licenses，这里直接使用 apache 提供的（无需修改）\n\n<licenses>\n    <license>\n        <name>server side public license</name>\n        <url>http://www.apache.org/licenses/license-2.0.txt</url>\n        <distribution>repo</distribution>\n    </license>\n</licenses>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n配置 scm，这是你的项目 git 地址（需要修改）\n\n<scm>\n    <tag>master</tag>\n    \x3c!-- 项目的 git 地址 --\x3e\n    <url>https://github.com/huangguan2001/dbdtobean-spring-boot-autoconfigure</url>\n    \x3c!-- 项目的 http git 地址 --\x3e\n    <connection>https://github.com/huangguan2001/dbdtobean-spring-boot-autoconfigure.git</connection>\n</scm>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n配置 repositories，这里的 id 对应配置 settings.xml 的 id（id 可修改，其他无需修改）\n\n<repositories>\n    <repository>\n        <id>sonatype-nexus-snapshots</id>\n        <name>sonatype nexus snapshots</name>\n        <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n        <releases>\n            <enabled>false</enabled>\n        </releases>\n        <snapshots>\n            <enabled>true</enabled>\n        </snapshots>\n    </repository>\n</repositories>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n配置 distributionmanagement。这是上传的仓库地址：快照版（snapshots）和发布版（release）（无需修改）\n\n<distributionmanagement>\n    <snapshotrepository>\n        <id>sonatype-nexus-snapshots</id>\n        <name>sonatype nexus snapshots</name>\n        <url>https://s01.oss.sonatype.org/content/repositories/snapshots/</url>\n    </snapshotrepository>\n    <repository>\n        <id>sonatype-nexus-staging</id>\n        <name>nexus release repository</name>\n        <url>https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/</url>\n    </repository>\n</distributionmanagement>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n配置 profiles，里面的插件是 maven 需要校验用到，如生成文档插件给开发人员看如何使用（无需修改）\n\n> 注意：如果下载失败，则把 groupid、artifactid、version 内容剪切到 dependencies 里下载成功后，再剪切回来。\n\n<profiles>\n    <profile>\n        <id>sonatype-oss-release</id>\n        <activation>\n            <activebydefault>true</activebydefault>\n        </activation>\n        <build>\n            <plugins>\n                <plugin>\n                    <groupid>org.apache.maven.plugins</groupid>\n                    <artifactid>maven-source-plugin</artifactid>\n                    <version>3.2.1</version>\n                    <executions>\n                        <execution>\n                            <id>package</id>\n                            <goals>\n                                <goal>jar-no-fork</goal>\n                            </goals>\n                        </execution>\n                    </executions>\n                </plugin>\n                <plugin>\n                    <groupid>org.apache.maven.plugins</groupid>\n                    <artifactid>maven-javadoc-plugin</artifactid>\n                    <version>3.2.0</version>\n                    <executions>\n                        <execution>\n                            <phase>package</phase>\n                            <goals>\n                                <goal>jar</goal>\n                            </goals>\n                        </execution>\n                    </executions>\n                </plugin>\n                <plugin>\n                    <groupid>org.apache.maven.plugins</groupid>\n                    <artifactid>maven-gpg-plugin</artifactid>\n                    <version>1.6</version>\n                    <executions>\n                        <execution>\n                            <id>sign-artifacts</id>\n                            <phase>verify</phase>\n                            <goals>\n                                <goal>sign</goal>\n                            </goals>\n                        </execution>\n                    </executions>\n                </plugin>\n            </plugins>\n        </build>\n    </profile>\n</profiles>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n\n\n最后配置你的 developers 个人信息（需要修改）\n\n<developers>\n    <developer>\n        <name>kele_bingtang</name>\n        <id>kele_bingtang</id>\n        <email>2456019588@qq.com</email>\n        <roles>\n            <role>developer</role>\n        </roles>\n        <timezone>+8</timezone>\n    </developer>\n</developers>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n我的 pom 完整版：\n\n<?xml version="1.0" encoding="utf-8"?>\n<project xmlns="http://maven.apache.org/pom/4.0.0"\n         xmlns:xsi="http://www.w3.org/2001/xmlschema-instance"\n         xsi:schemalocation="http://maven.apache.org/pom/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelversion>4.0.0</modelversion>\n\n    <groupid>cn.youngkbt</groupid>\n    <artifactid>dbdtobean</artifactid>\n    <version>1.4</version>\n    <name>dbdtobean</name>\n    <description>read the table fields of the database and generate entity class files and curd class files of controller, service, dao and mapper layers</description>\n    <url>https://github.com/huangguan2001/dbdtobean</url>\n    \n    <properties>\n        <maven.compiler.source>8</maven.compiler.source>\n        <maven.compiler.target>8</maven.compiler.target>\n        <project.build.sourceencoding>utf-8</project.build.sourceencoding>\n    </properties>\n    \n\n    <licenses>\n        <license>\n            <name>server side public license</name>\n            <url>http://www.apache.org/licenses/license-2.0.txt</url>\n            <distribution>repo</distribution>\n        </license>\n    </licenses>\n\n    <scm>\n        <tag>master</tag>\n        \x3c!-- 项目的 git 地址 --\x3e\n        <url>https://github.com/huangguan2001/dbdtobean</url>\n        \x3c!-- 项目的 http git 地址 --\x3e\n        <connection>https://github.com/huangguan2001/dbdtobean.git</connection>\n    </scm>\n\n    <repositories>\n        <repository>\n            <id>sonatype-nexus-snapshots</id>\n            <name>sonatype nexus snapshots</name>\n            <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n            <releases>\n                <enabled>false</enabled>\n            </releases>\n            <snapshots>\n                <enabled>true</enabled>\n            </snapshots>\n        </repository>\n    </repositories>\n\n\n    <distributionmanagement>\n        <snapshotrepository>\n            <id>sonatype-nexus-snapshots</id>\n            <name>sonatype nexus snapshots</name>\n            <url>https://s01.oss.sonatype.org/content/repositories/snapshots/</url>\n        </snapshotrepository>\n        <repository>\n            <id>sonatype-nexus-staging</id>\n            <name>nexus release repository</name>\n            <url>https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/</url>\n        </repository>\n    </distributionmanagement>\n\n\n    <profiles>\n        <profile>\n            <id>sonatype-oss-release</id>\n            <activation>\n                <activebydefault>true</activebydefault>\n            </activation>\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupid>org.apache.maven.plugins</groupid>\n                        <artifactid>maven-source-plugin</artifactid>\n                        <version>3.2.1</version>\n                        <executions>\n                            <execution>\n                                <id>package</id>\n                                <goals>\n                                    <goal>jar-no-fork</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                    <plugin>\n                        <groupid>org.apache.maven.plugins</groupid>\n                        <artifactid>maven-javadoc-plugin</artifactid>\n                        <version>3.2.0</version>\n                        <executions>\n                            <execution>\n                                <phase>package</phase>\n                                <goals>\n                                    <goal>jar</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                    <plugin>\n                        <groupid>org.apache.maven.plugins</groupid>\n                        <artifactid>maven-gpg-plugin</artifactid>\n                        <version>1.6</version>\n                        <executions>\n                            <execution>\n                                <id>sign-artifacts</id>\n                                <phase>verify</phase>\n                                <goals>\n                                    <goal>sign</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n    </profiles>\n\n    <developers>\n        <developer>\n            <name>kele_bingtang</name>\n            <id>kele_bingtang</id>\n            <email>2456019588@qq.com</email>\n            <roles>\n                <role>developer</role>\n            </roles>\n            <timezone>+8</timezone>\n        </developer>\n    </developers>\n    \n</project>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n\n\n\n# 构建仓库\n\n\n# 部署项目\n\n项目配置成功后，开始部署到构建仓库\n\nmvn clean deploy -p sonatype-oss-release -darguments="gpg.passphrase=密钥密码"\n\n\n1\n\n\n或者使用 idea 的界面操作\n\n\n\n然后后弹出密码框，输入 gpg.passphrase，也就是之前生成 gpg 密钥对写的 passphrase。\n\n执行成功的命令行会有 build success 提示。\n\n\n# 上传中央仓库\n\nmvn clean deploy 命令执行成功，使用 jira 账号登陆（界面右上角的 login in）：https://s01.oss.sonatype.org/#welcome。\n\n登录成功后，点击左侧的 staging repositories 就可以看到你所发布的 jar 包了：\n\n\n\n然后点击上方的 close，并点击弹出的 confrim，该按钮将会对上传的 jar 包进行检查校验\n\n * 如果符合 maven 的标准，则 release 按钮变亮，点击 release 并点击 comfirm 后，等待 1-2 小时，就可以前往 https://mvnrepository.com/ 搜索自己的 jar 包。\n\n * 如果不符合 maven 的标准，则在下方点击 activity 选项卡，查看错误信息，并回到项目代码进行修改\n\n\n\n\n# 问题\n\n> q：mvn clean deploy 时报 failed to execute goal org.apache.maven.plugins:maven-gpg-plugin:1.5:sign (default) on project xxxx: exit code: 1 -> [help 1]\n\na：没有安装 gpg 或者没有配置 gpg 的环境变量，如果安装了 gpg，则在安装的过程 已经自动 配好环境变量。\n\n> q：java.lang.illegalargumentexception\n\na：环境变量的 classpath 中把 %java__home% 换成 jdk 的绝对路径。\n\n> q：failed to execute goal org.apache.maven.plugins:maven-javadoc-plugin:3.2.0\n\n方法的注释必须有@参数，开头的类注释只能是 @author、@version、@since，如下图：\n\n\n\n\n\n> close 时，找不到 javadoc、source 等错误。\n\nmvn clean deploy 时不能跳过 source、javadoc、gpg 插件。在个人的 maven repository 中要看到如下图文件后缀的文件\n\n',charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"技术随笔 - 360天擎关闭",frontmatter:{title:"技术随笔 - 360天擎关闭",date:"2022-02-22T09:09:19.000Z",permalink:"/360/system/",titleTag:"原创",sidebar:"auto",categories:[null],tags:[null],readingShow:"top"},regularPath:"/_posts/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94%20-%20360%E5%A4%A9%E6%93%8E%E5%85%B3%E9%97%AD.html",relativePath:"_posts/技术随笔/技术随笔 - 360天擎关闭.md",key:"v-4f99d19e",path:"/360/system/",headers:[{level:2,title:"如何退出360天擎/奇安信天擎",slug:"如何退出360天擎-奇安信天擎",normalizedTitle:"如何退出360天擎/奇安信天擎",charIndex:2}],headersStr:"如何退出360天擎/奇安信天擎",content:"# 如何退出360天擎/奇安信天擎\n\n 1. 进入天擎防护中心-设置（在右下角图标右键也能进入设置）-防护中心-自我保护关闭\n\n 2. 进入安装路径 \\360Safe\\EntClient\\conf\\EntBase.dat，右键记事本打开文件\n\n 3. protect 下面两个 pass 改为空\n\n[protect]\n\nuipass=\n\nqtpass=\n\n\n1\n2\n3\n4\n5\n\n 4. 此时可以退出、卸载 360 天擎",normalizedContent:"# 如何退出360天擎/奇安信天擎\n\n 1. 进入天擎防护中心-设置（在右下角图标右键也能进入设置）-防护中心-自我保护关闭\n\n 2. 进入安装路径 \\360safe\\entclient\\conf\\entbase.dat，右键记事本打开文件\n\n 3. protect 下面两个 pass 改为空\n\n[protect]\n\nuipass=\n\nqtpass=\n\n\n1\n2\n3\n4\n5\n\n 4. 此时可以退出、卸载 360 天擎",charsets:{cjk:!0},lastUpdated:"2022/04/05, 14:44:34"},{title:"技术随笔 - Java启动的-D参数",frontmatter:{title:"技术随笔 - Java启动的-D参数",date:"2022-03-02T09:27:00.000Z",permalink:"/java/d/",sidebar:"auto",categories:[null],tags:[null],readingShow:"top"},regularPath:"/_posts/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94%20-%20Java%E5%90%AF%E5%8A%A8%E7%9A%84-D%E5%8F%82%E6%95%B0.html",relativePath:"_posts/技术随笔/技术随笔 - Java启动的-D参数.md",key:"v-0cf710d9",path:"/java/d/",headersStr:null,content:'Java 程序启动参数 -D 是用来做什么的呢？去查询了一下官方解释：\n\nSet a system property value. If  value  is a string that contains spaces, you must enclose the string in double quotes:\njava -Dfoo="some string" SomeClass\n\n\n1\n2\n\n\n解释说 -D 是用来在启动一个 Java 程序时设置系统属性值的。如果该值是一个字符串且包含空格，那么需要包在一对双引号中。\n\n什么是系统属性值呢？也就是在 System 类中通过 getProperties() 得到的一串系统属性。\n\n测试：\n\npublic class SystemProperty {\n\n    public static void main(String[] args){\n        System.out.print(System.getProperty("java.age"));\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n在运行改程序时加上 JVM 参数 -Djava.age="20" 或者 -Djava.age=20，那么运行之后可以看到控制台输出了 20。\n\n在 CMD 启动命令：\n\njavac SystemProperty.java\njava -Djava.age="20" SystemProperty\n\n\n1\n2\n\n\n如果在 IDEA，则在 VM option 添加 -Djava.age="20" 或者 -Djava.age=20。',normalizedContent:'java 程序启动参数 -d 是用来做什么的呢？去查询了一下官方解释：\n\nset a system property value. if  value  is a string that contains spaces, you must enclose the string in double quotes:\njava -dfoo="some string" someclass\n\n\n1\n2\n\n\n解释说 -d 是用来在启动一个 java 程序时设置系统属性值的。如果该值是一个字符串且包含空格，那么需要包在一对双引号中。\n\n什么是系统属性值呢？也就是在 system 类中通过 getproperties() 得到的一串系统属性。\n\n测试：\n\npublic class systemproperty {\n\n    public static void main(string[] args){\n        system.out.print(system.getproperty("java.age"));\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n在运行改程序时加上 jvm 参数 -djava.age="20" 或者 -djava.age=20，那么运行之后可以看到控制台输出了 20。\n\n在 cmd 启动命令：\n\njavac systemproperty.java\njava -djava.age="20" systemproperty\n\n\n1\n2\n\n\n如果在 idea，则在 vm option 添加 -djava.age="20" 或者 -djava.age=20。',charsets:{cjk:!0},lastUpdated:"2022/04/05, 14:44:34"},{title:"技术随笔 - 域名解析",frontmatter:{title:"技术随笔 - 域名解析",date:"2021-12-01T23:21:36.000Z",permalink:"/domain/name/",titleTag:"原创",sidebar:"auto",categories:["技术随笔"],tags:["域名"],readingShow:"top"},regularPath:"/_posts/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94%20-%20%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90.html",relativePath:"_posts/技术随笔/技术随笔 - 域名解析.md",key:"v-1e3bb131",path:"/domain/name/",headers:[{level:2,title:"主机记录",slug:"主机记录",normalizedTitle:"主机记录",charIndex:392},{level:2,title:"记录类型",slug:"记录类型",normalizedTitle:"记录类型",charIndex:373},{level:2,title:"线路",slug:"线路",normalizedTitle:"线路",charIndex:919},{level:2,title:"记录值",slug:"记录值",normalizedTitle:"记录值",charIndex:1070}],headersStr:"主机记录 记录类型 线路 记录值",content:"说一下购买服务器的流程，这里是阿里云服务器：https://www.aliyun.com/\n\n 1. 前往阿里云搜索「服务器 ECS」，按自己的理想配置和经济购买\n 2. 购买域名，选择自己喜欢的英文名和后缀\n 3. 购买域名时，需要填写自己的信息模板，然后等待十多分钟给阿里云审核成功，才能完成域名购买\n 4. 进行域名解析，阿里云里搜索「域名」，点击进入控制台，右侧有解析按钮，点击解析后进入新的界面，点击添加记录\n 5. 添加记录的选项参数就是本内容的介绍重点，在下方\n 6. 添加完记录后，购买 SSL 证书，有免费版，购买后下载证书到服务器进行配置，具体看 SSL 证书生成\n 7. 购买域名后的两三天左右，记得去备案，否则域名就无法访问，被拦截。在阿里云里面搜索「ICP 备案」，安装流程他们自带\n\n域名解析中点击添加记录后，填入各种记录类型，这里进行详细说明。\n\n\n# 主机记录\n\n主机记录就是域名前缀，比如我的域名是 youngkbt.cn，常见用法有：\n\n * www：解析后的域名为 www.youngkbt.cn，此时就需要加 www. 才能访问域名\n * @：直接解析主域名 youngkbt.cn，也就是直接在地址栏输入域名即可\n * ：泛解析，匹配其他所有域名 *.youngkbt.cn\n\n\n# 记录类型\n\n要指向空间商提供的 IP 地址，选择「类型 A」，要指向一个域名，选择「类型 CNAME」\n\n * A 记录：地址记录，用来指定域名的 IPv4 地址（如：8.8.8.8），如果需要将域名指向一个 IP 地址，就需要添加 A 记录。\n\n * CNAME：如果需要将域名指向另一个域名，再由另一个域名提供 ip 地址，就需要添加 CNAME 记录。\n\n * NS：域名服务器记录，如果需要把子域名交给其他DNS服务商解析，就需要添加NS记录。\n\n * AAA：用来指定主机名（或域名）对应的 IPv6 地址（例如：ff06:0:0:0:0:0:0:c3）记录。\n\n * MX：如果需要设置邮箱，让邮箱能收到邮件，就需要添加 MX 记录。\n\n如果打算绑定自己的服务器 IP，选择 A 记录即可。\n\n\n# 线路\n\n让指定线路的用户访问这个 IP\n\n常见用法有：\n\n * 默认：必须添加，否则只有单独指定的线路才能访问您的网站。如果双线解析，建议「默认」线路填写「电信 IP」\n\n * 联通：单独为「联通用户」指定服务器 IP，其他用户依然访问「默认」\n\n * 搜索引擎：指定一个服务器 IP 让抓取\n\n\n# 记录值\n\n最常见的是将空间商提供的「IP 地址」填写在这里。\n\n比如我填写的是我的服务器 IP，或者如果你的博客部署在 Github 或者 Gitee，可以填写 GitHub Pages 或者 Gitee Pages 的地址。\n\n各类型的记录值一般是这样的：\n\n * A 记录：填写您服务器 IP，如果您不知道，请咨询您的空间商\n\n * CNAME 记录：填写空间商给您提供的域名，例如：2.com\n\n * MX 记录：填写您邮件服务器的IP地址或企业邮局给您提供的域名，如果您不知道，请咨询您的邮件服务提供商\n\n * AAAA：不常用。解析到 IPv6 的地址。\n\n * NS 记录：不常用。系统默认添加的两个NS记录请不要修改。NS向下授权，填写dns域名，例如：ns3.dnsv3.com\n\n * TTL: 我们默认的 600 秒是最常用的，不用修改\n   \n   即 Time To Live，缓存的生存时间。指地方dns缓存您域名记录信息的时间，缓存失效后会再次到DNSPod获取记录值。\n   \n   600（10分钟）：建议正常情况下使用 600。\n   \n   60（1分钟）：如果您经常修改 IP，修改记录一分钟即可生效。长期使用 60，解析速度会略受影响。\n   \n   3600（1小时）：如果您 IP 极少变动（一年几次），建议选择 3600，解析速度快。如果要修改IP，提前一天改为 60，即可快速生效。",normalizedContent:"说一下购买服务器的流程，这里是阿里云服务器：https://www.aliyun.com/\n\n 1. 前往阿里云搜索「服务器 ecs」，按自己的理想配置和经济购买\n 2. 购买域名，选择自己喜欢的英文名和后缀\n 3. 购买域名时，需要填写自己的信息模板，然后等待十多分钟给阿里云审核成功，才能完成域名购买\n 4. 进行域名解析，阿里云里搜索「域名」，点击进入控制台，右侧有解析按钮，点击解析后进入新的界面，点击添加记录\n 5. 添加记录的选项参数就是本内容的介绍重点，在下方\n 6. 添加完记录后，购买 ssl 证书，有免费版，购买后下载证书到服务器进行配置，具体看 ssl 证书生成\n 7. 购买域名后的两三天左右，记得去备案，否则域名就无法访问，被拦截。在阿里云里面搜索「icp 备案」，安装流程他们自带\n\n域名解析中点击添加记录后，填入各种记录类型，这里进行详细说明。\n\n\n# 主机记录\n\n主机记录就是域名前缀，比如我的域名是 youngkbt.cn，常见用法有：\n\n * www：解析后的域名为 www.youngkbt.cn，此时就需要加 www. 才能访问域名\n * @：直接解析主域名 youngkbt.cn，也就是直接在地址栏输入域名即可\n * ：泛解析，匹配其他所有域名 *.youngkbt.cn\n\n\n# 记录类型\n\n要指向空间商提供的 ip 地址，选择「类型 a」，要指向一个域名，选择「类型 cname」\n\n * a 记录：地址记录，用来指定域名的 ipv4 地址（如：8.8.8.8），如果需要将域名指向一个 ip 地址，就需要添加 a 记录。\n\n * cname：如果需要将域名指向另一个域名，再由另一个域名提供 ip 地址，就需要添加 cname 记录。\n\n * ns：域名服务器记录，如果需要把子域名交给其他dns服务商解析，就需要添加ns记录。\n\n * aaa：用来指定主机名（或域名）对应的 ipv6 地址（例如：ff06:0:0:0:0:0:0:c3）记录。\n\n * mx：如果需要设置邮箱，让邮箱能收到邮件，就需要添加 mx 记录。\n\n如果打算绑定自己的服务器 ip，选择 a 记录即可。\n\n\n# 线路\n\n让指定线路的用户访问这个 ip\n\n常见用法有：\n\n * 默认：必须添加，否则只有单独指定的线路才能访问您的网站。如果双线解析，建议「默认」线路填写「电信 ip」\n\n * 联通：单独为「联通用户」指定服务器 ip，其他用户依然访问「默认」\n\n * 搜索引擎：指定一个服务器 ip 让抓取\n\n\n# 记录值\n\n最常见的是将空间商提供的「ip 地址」填写在这里。\n\n比如我填写的是我的服务器 ip，或者如果你的博客部署在 github 或者 gitee，可以填写 github pages 或者 gitee pages 的地址。\n\n各类型的记录值一般是这样的：\n\n * a 记录：填写您服务器 ip，如果您不知道，请咨询您的空间商\n\n * cname 记录：填写空间商给您提供的域名，例如：2.com\n\n * mx 记录：填写您邮件服务器的ip地址或企业邮局给您提供的域名，如果您不知道，请咨询您的邮件服务提供商\n\n * aaaa：不常用。解析到 ipv6 的地址。\n\n * ns 记录：不常用。系统默认添加的两个ns记录请不要修改。ns向下授权，填写dns域名，例如：ns3.dnsv3.com\n\n * ttl: 我们默认的 600 秒是最常用的，不用修改\n   \n   即 time to live，缓存的生存时间。指地方dns缓存您域名记录信息的时间，缓存失效后会再次到dnspod获取记录值。\n   \n   600（10分钟）：建议正常情况下使用 600。\n   \n   60（1分钟）：如果您经常修改 ip，修改记录一分钟即可生效。长期使用 60，解析速度会略受影响。\n   \n   3600（1小时）：如果您 ip 极少变动（一年几次），建议选择 3600，解析速度快。如果要修改ip，提前一天改为 60，即可快速生效。",charsets:{cjk:!0},lastUpdated:"2022/04/05, 14:44:34"},{title:"生活随笔 - 习惯",frontmatter:{title:"生活随笔 - 习惯",date:"2022-02-19T18:46:39.000Z",permalink:"/live-posts/habit/",titleTag:"原创",sidebar:"auto",categories:["技术随笔"],tags:[null],readingShow:"top"},regularPath:"/_posts/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94%20-%20%E4%B9%A0%E6%83%AF.html",relativePath:"_posts/生活随笔/生活随笔 - 习惯.md",key:"v-4f4181da",path:"/live-posts/habit/",headers:[{level:2,title:"习惯（正在路上）",slug:"习惯-正在路上",normalizedTitle:"习惯（正在路上）",charIndex:42},{level:2,title:"鸡汤（经历过）",slug:"鸡汤-经历过",normalizedTitle:"鸡汤（经历过）",charIndex:54}],headersStr:"习惯（正在路上） 鸡汤（经历过）",content:"笔记\n\n记录个人收录的一些习惯或鸡汤。\n\n2022-02-19 @村长\n\n\n\n * 习惯（正在路上）\n * 鸡汤（经历过）\n\n\n\n\n# 习惯（正在路上）\n\n1、熬夜或不规律睡眠比纵欲更可怕，凌晨 2 点到 11 点虽然睡眠时间充足，但不规律。\n\n2、裸睡，可以提高睡眠质量，对皮肤也好。我不是夸张乱说，是有科学案例支撑的「美国睡眠医学会研究发现，人们睡觉时体温会自然下降，如果你在睡觉时穿的衣服厚，便会影响到皮肤的散热，甚至流汗把衣服侵湿，睡眠质量自然很差。相反，裸睡不穿衣服，没有了束缚，那么自然而然也会有好的睡眠质量。」\n\n3、不要把最喜欢听的歌设置成闹铃。\n\n4、学会做一手好菜，不仅能养你的胃，也许某一天，还能养她的胃。\n\n5、在备忘录里，将好朋友的生日记录下来，并设置提醒。不用追求送出什么大礼，只要在那一天给他送上祝福，对方就会很开心。因为生日被别人记住是一件很温暖的事情。\n\n6、事成前不声张，话不说太满。这样成功了会让人眼前一亮，失败了也不会啪啪打脸。\n\n7、平时没事、吃饱了撑着就多站到体重秤上，屏幕上的数据压力是你最好的减肥动力。\n\n8、看到好的答案点个赞或评论，这个回答就会出现在你的主页动态里，不用担心下次找不到了。\n\n9、到楼下拿快递、外卖时，跟对方说谢谢，这样外卖小哥心情会变好，下次给你送外卖也会更用心，比如无意识地把外卖保护得更好，不让汤汁洒出来，快递同理。\n\n10、起床就刷牙、要背单词就马上拿起书、再等一下是能吞噬你的拖延黑洞，而且只会让你的事情变得复杂。杀掉拖延症最好的方法：凡事先做三分钟再说。\n\n11、收到回复是成年人的社交第一课。收到信息第一时间先回复，如果在忙或者不想聊，可以先说有事，稍后再聊，这样下一次聊天时才不会尴尬和难堪。\n\n12、感觉人很燥的时候，可以收拾下房间或者桌子，不需要多久，只要一会，你看看整齐的桌面，心情会慢慢变好。\n\n13、药店买东西时，销售推荐的都不要买，因为都是他提成高的，自己选需要的买，就像之前一些医生科普的，3 块钱一瓶的维生素 C 跟 200 元一瓶的没什么区别。\n\n14、出去玩的时候带个充电宝 + 一根苹果和安卓的数据线，关键时刻可以救你命，有时还能收获异性的赞赏。同时，出门随身携带纸巾，时间久了，人们会发现这个男生其实蛮绅士的，女生的话，人们会觉得你很细心 nice。\n\n15、大量阅读、持续阅读，古今中外、文学小说，都可以多读。不是要让你能在朋友圈发一些文艺矫情的句子，而是当你广泛阅读到一定程度的时候，你的谈吐和气质会自然而然让人感到舒服。只知道刷八卦追星看言情打游戏，这些会腐蚀你，让你变得庸俗，让你跟人聊天时，不知道讲什么，只会点头和傻笑。\n\n16、多坦诚，少说谎。有些面具戴久了，就摘不下来了。\n\n17、不要为了省钱降低自己的生活水平，便宜货在你买的瞬间会爽，但往后几年会给你带来许多懊悔和不舒服。而贵的东西也许买的瞬间会心疼，但你用几年就会爽几年。\n\n18、定期体检，在经济条件允许的条件下，做全面一点的，带你的伴侣和父母也一起去，这能大大降低你们的生活风险。\n\n19、不小心让别人受到伤害，永远要诚心诚意去道歉和补偿对方，长期如此人们会发现你知错能改，反而愿意与你交往，一个死不认错的人，是不会有真心朋友的。\n\n20、戒烟戒酒，男人女人都一样。这件事你能办成，那么以后基本没什么事情能难倒你了，别人眼中的难题，对你而言便是：“就这？”\n\n21、通知消息，最好报喜又报忧，比如你买了一套房子，通知朋友，可能他们会被刺激到觉得难受，但你再说一句，贷款买的，欠了几百万，他们就会好受一些。\n\n22、如果懈怠了就这样激励自己：多学一分钟，老公会不同。\n\n23、一个月清理 1 次微信、知乎、B站的收藏夹，如果有几个月忘记清理，就发现这个功能跟废了一样，现在都坚持清理。\n\n24、千万不要把密码记在手机笔记里，手机丢了或者被破解你就麻烦大了！那怕忘记怎么办？我女朋友是这样教我的，用特定字母 + 固定数字去设置密码，比如用 APP 的英文首字母 + 你女朋友的生日去设置密码就很方便，假设你女朋友生日是 960606，那么 QQ 密码就可以设置为 QQ960606，微信密码就可以设置为 WX960606。学废了吗？男女朋友这边排队领。\n\n25、去做客不要两手空空，就算只是给他们买点零食水果，也会大幅度提升对方的好感。\n\n26、吃饱后，坚持散步 20 分钟以上，一年后，你会发现小肚子没了，马甲线若隐若现。\n\n27、如果你真的想不明白自己要什么，运动健身、早睡早起、三餐规律、多读好书，做这些永远不会错。坚持一年，就算你还是没有目标，也能有一个好的身体、博学的脑袋，这些足以让你超越 80% 的同龄人。\n\n28、学会投资理财和强制储蓄，前者能帮你钱生钱，后者能在关键时候救你命。学会打造你的被动赚钱机器，当你的被动赚钱机器超出你的日常支出，这于你而言便是财务自由。挑水重要，但挖井更重要，投资理财完全可以尝试，别守着一份死工资。\n\n29、找到一样爱好坚持下去，他们能给你无穷无尽的力量，伴你走过大段无聊且难熬的人生。\n\n30、三餐规律，多吃蔬菜和水果。喜欢喝奶茶、油炸食物，是非常不好的。明知道不好但就是嘴巴痒，怎么办？找到食物去替代它们，比如说坚果、水果蔬菜等，坚持一个月，你的皮肤会靓很多，身体气质也会慢慢好起来。\n\n31、学会自我解压。有的人读书很厉害，可是一遇考试就失眠，导致成绩失利。能力很重要，会给自己减压，让能力更好地释放更重要。\n\n32、睡前先问下自己：如果时光能倒流到 24 小时前，我会想让今天重新开始吗？不要自我慰藉，这样简单的每日一小问，能让你反思这一天的收获与不足。\n\n33、定期和父母联系。能定期和父母联系是一项很棒的能力，那些关心家人的人值得深交，而那些把最坏一面留给父母的人，要么远离，要么你不惜一切代价用巴掌打醒他。\n\n34、看见生活里的细碎幸福。中 100 万大奖，月入 10 万，住 200㎡ 大房子，只向往这种爆棚感的快乐，会让你忽视生活中的小确幸。你回家的一桌子热菜，一杯难受时的红糖水，一个你期待已久的机械键盘，这些微小幸福的拼凑，其实是大多数人一生的快乐组成。\n\n35、每天坚持收拾好自己的脸、打扮好自己。得体的着装和精致的形象，会让你自信有气质，眼里藏着小星星，生活才能亮晶晶。\n\n36、大方的认同别人，不要在背后议论、抱怨他人，说人坏话。你也不希望自己被别人这样对待。\n\n\n# 鸡汤（经历过）\n\n如果你感到委屈，证明你还有底线。如果你感到迷茫，证明你还有追求。如果你感到痛苦，证明你还有力气。如果你感到绝望，证明你还有希望。从某种意义上，你永远都不会被打倒，因为你还有你。",normalizedContent:"笔记\n\n记录个人收录的一些习惯或鸡汤。\n\n2022-02-19 @村长\n\n\n\n * 习惯（正在路上）\n * 鸡汤（经历过）\n\n\n\n\n# 习惯（正在路上）\n\n1、熬夜或不规律睡眠比纵欲更可怕，凌晨 2 点到 11 点虽然睡眠时间充足，但不规律。\n\n2、裸睡，可以提高睡眠质量，对皮肤也好。我不是夸张乱说，是有科学案例支撑的「美国睡眠医学会研究发现，人们睡觉时体温会自然下降，如果你在睡觉时穿的衣服厚，便会影响到皮肤的散热，甚至流汗把衣服侵湿，睡眠质量自然很差。相反，裸睡不穿衣服，没有了束缚，那么自然而然也会有好的睡眠质量。」\n\n3、不要把最喜欢听的歌设置成闹铃。\n\n4、学会做一手好菜，不仅能养你的胃，也许某一天，还能养她的胃。\n\n5、在备忘录里，将好朋友的生日记录下来，并设置提醒。不用追求送出什么大礼，只要在那一天给他送上祝福，对方就会很开心。因为生日被别人记住是一件很温暖的事情。\n\n6、事成前不声张，话不说太满。这样成功了会让人眼前一亮，失败了也不会啪啪打脸。\n\n7、平时没事、吃饱了撑着就多站到体重秤上，屏幕上的数据压力是你最好的减肥动力。\n\n8、看到好的答案点个赞或评论，这个回答就会出现在你的主页动态里，不用担心下次找不到了。\n\n9、到楼下拿快递、外卖时，跟对方说谢谢，这样外卖小哥心情会变好，下次给你送外卖也会更用心，比如无意识地把外卖保护得更好，不让汤汁洒出来，快递同理。\n\n10、起床就刷牙、要背单词就马上拿起书、再等一下是能吞噬你的拖延黑洞，而且只会让你的事情变得复杂。杀掉拖延症最好的方法：凡事先做三分钟再说。\n\n11、收到回复是成年人的社交第一课。收到信息第一时间先回复，如果在忙或者不想聊，可以先说有事，稍后再聊，这样下一次聊天时才不会尴尬和难堪。\n\n12、感觉人很燥的时候，可以收拾下房间或者桌子，不需要多久，只要一会，你看看整齐的桌面，心情会慢慢变好。\n\n13、药店买东西时，销售推荐的都不要买，因为都是他提成高的，自己选需要的买，就像之前一些医生科普的，3 块钱一瓶的维生素 c 跟 200 元一瓶的没什么区别。\n\n14、出去玩的时候带个充电宝 + 一根苹果和安卓的数据线，关键时刻可以救你命，有时还能收获异性的赞赏。同时，出门随身携带纸巾，时间久了，人们会发现这个男生其实蛮绅士的，女生的话，人们会觉得你很细心 nice。\n\n15、大量阅读、持续阅读，古今中外、文学小说，都可以多读。不是要让你能在朋友圈发一些文艺矫情的句子，而是当你广泛阅读到一定程度的时候，你的谈吐和气质会自然而然让人感到舒服。只知道刷八卦追星看言情打游戏，这些会腐蚀你，让你变得庸俗，让你跟人聊天时，不知道讲什么，只会点头和傻笑。\n\n16、多坦诚，少说谎。有些面具戴久了，就摘不下来了。\n\n17、不要为了省钱降低自己的生活水平，便宜货在你买的瞬间会爽，但往后几年会给你带来许多懊悔和不舒服。而贵的东西也许买的瞬间会心疼，但你用几年就会爽几年。\n\n18、定期体检，在经济条件允许的条件下，做全面一点的，带你的伴侣和父母也一起去，这能大大降低你们的生活风险。\n\n19、不小心让别人受到伤害，永远要诚心诚意去道歉和补偿对方，长期如此人们会发现你知错能改，反而愿意与你交往，一个死不认错的人，是不会有真心朋友的。\n\n20、戒烟戒酒，男人女人都一样。这件事你能办成，那么以后基本没什么事情能难倒你了，别人眼中的难题，对你而言便是：“就这？”\n\n21、通知消息，最好报喜又报忧，比如你买了一套房子，通知朋友，可能他们会被刺激到觉得难受，但你再说一句，贷款买的，欠了几百万，他们就会好受一些。\n\n22、如果懈怠了就这样激励自己：多学一分钟，老公会不同。\n\n23、一个月清理 1 次微信、知乎、b站的收藏夹，如果有几个月忘记清理，就发现这个功能跟废了一样，现在都坚持清理。\n\n24、千万不要把密码记在手机笔记里，手机丢了或者被破解你就麻烦大了！那怕忘记怎么办？我女朋友是这样教我的，用特定字母 + 固定数字去设置密码，比如用 app 的英文首字母 + 你女朋友的生日去设置密码就很方便，假设你女朋友生日是 960606，那么 qq 密码就可以设置为 qq960606，微信密码就可以设置为 wx960606。学废了吗？男女朋友这边排队领。\n\n25、去做客不要两手空空，就算只是给他们买点零食水果，也会大幅度提升对方的好感。\n\n26、吃饱后，坚持散步 20 分钟以上，一年后，你会发现小肚子没了，马甲线若隐若现。\n\n27、如果你真的想不明白自己要什么，运动健身、早睡早起、三餐规律、多读好书，做这些永远不会错。坚持一年，就算你还是没有目标，也能有一个好的身体、博学的脑袋，这些足以让你超越 80% 的同龄人。\n\n28、学会投资理财和强制储蓄，前者能帮你钱生钱，后者能在关键时候救你命。学会打造你的被动赚钱机器，当你的被动赚钱机器超出你的日常支出，这于你而言便是财务自由。挑水重要，但挖井更重要，投资理财完全可以尝试，别守着一份死工资。\n\n29、找到一样爱好坚持下去，他们能给你无穷无尽的力量，伴你走过大段无聊且难熬的人生。\n\n30、三餐规律，多吃蔬菜和水果。喜欢喝奶茶、油炸食物，是非常不好的。明知道不好但就是嘴巴痒，怎么办？找到食物去替代它们，比如说坚果、水果蔬菜等，坚持一个月，你的皮肤会靓很多，身体气质也会慢慢好起来。\n\n31、学会自我解压。有的人读书很厉害，可是一遇考试就失眠，导致成绩失利。能力很重要，会给自己减压，让能力更好地释放更重要。\n\n32、睡前先问下自己：如果时光能倒流到 24 小时前，我会想让今天重新开始吗？不要自我慰藉，这样简单的每日一小问，能让你反思这一天的收获与不足。\n\n33、定期和父母联系。能定期和父母联系是一项很棒的能力，那些关心家人的人值得深交，而那些把最坏一面留给父母的人，要么远离，要么你不惜一切代价用巴掌打醒他。\n\n34、看见生活里的细碎幸福。中 100 万大奖，月入 10 万，住 200㎡ 大房子，只向往这种爆棚感的快乐，会让你忽视生活中的小确幸。你回家的一桌子热菜，一杯难受时的红糖水，一个你期待已久的机械键盘，这些微小幸福的拼凑，其实是大多数人一生的快乐组成。\n\n35、每天坚持收拾好自己的脸、打扮好自己。得体的着装和精致的形象，会让你自信有气质，眼里藏着小星星，生活才能亮晶晶。\n\n36、大方的认同别人，不要在背后议论、抱怨他人，说人坏话。你也不希望自己被别人这样对待。\n\n\n# 鸡汤（经历过）\n\n如果你感到委屈，证明你还有底线。如果你感到迷茫，证明你还有追求。如果你感到痛苦，证明你还有力气。如果你感到绝望，证明你还有希望。从某种意义上，你永远都不会被打倒，因为你还有你。",charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"生活随笔 - 美词",frontmatter:{title:"生活随笔 - 美词",date:"2022-02-19T18:42:09.000Z",permalink:"/live-posts/beautiful-words/",titleTag:"原创",sidebar:"auto",categories:["技术随笔"],tags:[null],readingShow:"top"},regularPath:"/_posts/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94%20-%20%E7%BE%8E%E8%AF%8D.html",relativePath:"_posts/生活随笔/生活随笔 - 美词.md",key:"v-2c944259",path:"/live-posts/beautiful-words/",headers:[{level:2,title:"巫师三",slug:"巫师三",normalizedTitle:"巫师三",charIndex:39},{level:2,title:"其他",slug:"其他",normalizedTitle:"其他",charIndex:46},{level:2,title:"祝福",slug:"祝福",normalizedTitle:"祝福",charIndex:52}],headersStr:"巫师三 其他 祝福",content:"笔记\n\n记录个人收录的一些词语。\n\n2022-02-19 @村长\n\n\n\n * 巫师三\n * 其他\n * 祝福\n\n\n\n\n# 巫师三\n\n一、从她的漆黑火焰出现在我的瞳仁之间，我便知道，这一生注定沉沦于此。\n\n二、我的情人犹如晨雾氤氲中玫瑰花瓣上的露水，新鲜清冽且随处可撷。\n\n三、我轻轻地念出你的名字，用吻过你的舌尖——你的面容便开始从往日的迷雾浮现，你的名字犹如一句咒语——记忆开始像水仙花一般绽开。\n\n四、踏上前往浮港的船只时，那个熟悉的倩影就站在甲板上，栗红色的头发在海风中飘扬、纤细蜂腰与姣好的面容沉湎在凌晨海面的粼粼波光中，她在静静望着你——一如这双美丽的湛蓝色眼镜经常做的那样。\n\n五、你从血泊中全身而退，转身坐倒时，她在远处陪着你。\n\n六、她转身离开，恍然间就消失在了森林边缘，像一只在薄雾中黯然归家的麋鹿，那样。\n\n七、爱与激情驱使着的身影遮蔽了火光，在漫漫无垠的海上连续闪烁着，根据密码成为了一串字符，被远方船上的船员记录下来。\n\n八、我就坐在门廊的摇椅上，抽着烟斗…听你在屋内调制药剂，瓶身碰撞，叮叮当当。\n\n\n# 其他\n\n * 本能给时间以生命，理性给岁月以文明\n * 人的一生，总是会不停地去你那些已经去过的地方，走曾经走过的路，在记忆里一遍一遍的去临摹当年当时的情景。在这样故地重游的情绪里，获取一种叫做时光倒流的错觉\n * 其实父母一直为我们骄傲，却一直都非常低调的生活着，他们害怕在我们日渐增长的光芒上，投下任何哪怕一点点的微小阴影\n\n\n# 祝福\n\n愿你手捧鲜花，芬芳岁月\n\n愿你脚踏山河，繁华人生\n\n愿你满眼星辰，璀璨无边\n\n愿你以梦为马，不负韶华\n\n愿你平安喜乐，开心幸福\n\n愿你眼里有星辰，身边有微风，心中有暖阳\n\n—— 诸事皆顺",normalizedContent:"笔记\n\n记录个人收录的一些词语。\n\n2022-02-19 @村长\n\n\n\n * 巫师三\n * 其他\n * 祝福\n\n\n\n\n# 巫师三\n\n一、从她的漆黑火焰出现在我的瞳仁之间，我便知道，这一生注定沉沦于此。\n\n二、我的情人犹如晨雾氤氲中玫瑰花瓣上的露水，新鲜清冽且随处可撷。\n\n三、我轻轻地念出你的名字，用吻过你的舌尖——你的面容便开始从往日的迷雾浮现，你的名字犹如一句咒语——记忆开始像水仙花一般绽开。\n\n四、踏上前往浮港的船只时，那个熟悉的倩影就站在甲板上，栗红色的头发在海风中飘扬、纤细蜂腰与姣好的面容沉湎在凌晨海面的粼粼波光中，她在静静望着你——一如这双美丽的湛蓝色眼镜经常做的那样。\n\n五、你从血泊中全身而退，转身坐倒时，她在远处陪着你。\n\n六、她转身离开，恍然间就消失在了森林边缘，像一只在薄雾中黯然归家的麋鹿，那样。\n\n七、爱与激情驱使着的身影遮蔽了火光，在漫漫无垠的海上连续闪烁着，根据密码成为了一串字符，被远方船上的船员记录下来。\n\n八、我就坐在门廊的摇椅上，抽着烟斗…听你在屋内调制药剂，瓶身碰撞，叮叮当当。\n\n\n# 其他\n\n * 本能给时间以生命，理性给岁月以文明\n * 人的一生，总是会不停地去你那些已经去过的地方，走曾经走过的路，在记忆里一遍一遍的去临摹当年当时的情景。在这样故地重游的情绪里，获取一种叫做时光倒流的错觉\n * 其实父母一直为我们骄傲，却一直都非常低调的生活着，他们害怕在我们日渐增长的光芒上，投下任何哪怕一点点的微小阴影\n\n\n# 祝福\n\n愿你手捧鲜花，芬芳岁月\n\n愿你脚踏山河，繁华人生\n\n愿你满眼星辰，璀璨无边\n\n愿你以梦为马，不负韶华\n\n愿你平安喜乐，开心幸福\n\n愿你眼里有星辰，身边有微风，心中有暖阳\n\n—— 诸事皆顺",charsets:{cjk:!0},lastUpdated:"2022/04/05, 19:18:42"},{title:"Home",frontmatter:{home:!0,heroText:"村长的菜鸟驿站",tagline:"你所有的悲伤都是源于技术的不足。",pageClass:"vdoing-index-class",postList:"detailed",readingShow:"top"},regularPath:"/",relativePath:"index.md",key:"v-10497712",path:"/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/04/07, 11:34:57"},{title:"分类",frontmatter:{categoriesPage:!0,title:"分类",permalink:"/categories/",article:!1,readingShow:"top"},regularPath:"/@pages/categoriesPage.html",relativePath:"@pages/categoriesPage.md",key:"v-23695b2b",path:"/categories/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/04/05, 14:44:34"}],themeConfig:{nav:[{text:"首页",link:"/"},{text:"导航站",link:"/navigation/"},{text:"前端",link:"/front/",items:[{text:"基础",items:[{text:"HTML",link:"/html/"},{text:"CSS",link:"/css/"},{text:"JavaScript",link:"/javascript/"}]},{text:"框架",items:[{text:"React",link:"/react/"},{text:"Vue2",link:"/vue2/"},{text:"Vue3",link:"/vue3/"}]}]},{text:"工具",link:"/tool/",items:[{text:"管理",items:[{text:"Maven",link:"/maven/"},{text:"Git",link:"/git/"}]},{text:"部署",items:[{text:"Linux",link:"/linux/"},{text:"Docker",link:"/docker/"}]}]},{text:"更多",items:[{text:"轮子工具",link:"/whells-use/"},{text:"项目工程",link:"/projects/"},{text:"友情链接",link:"/friends/"}]},{text:"索引",link:"/archives/",items:[{text:"本站",items:[{text:"分类",link:"/categories/"},{text:"标签",link:"/tags/"},{text:"归档",link:"/archives/"}]},{text:"我的",items:[{text:"收藏",link:"/whell/web/"},{text:"关于",link:"/about/website/introduce/"}]}]},{text:"留言区",link:"/message-area/"}],sidebarDepth:2,logo:"/img/logo.png",repo:"huangguan2001",searchMaxSuggestions:10,lastUpdated:"更新时间",docsDir:"docs",editLinks:!0,editLinkText:"编辑此页",categoryText:"技术随笔",bodyBgImg:"/img/index/bg.jpg",bodyBgImgOpacity:1,sidebar:{"/00.目录页/":[{title:"导航栏 - 目录页",collapsable:!0,children:[["00.导航栏 - 目录页/00.前端 - 知识体系.md","前端 - 知识体系","/front/"],["00.导航栏 - 目录页/05.工具 - 知识体系.md","工具 - 知识体系","/tool/"],["00.导航栏 - 目录页/15.项目工程 - 知识体系.md","项目工程 - 知识体系","/projects/"]]},{title:"前端 - 目录页",collapsable:!0,children:[["10.前端 - 目录页/01.HTML - 知识体系.md","HTML - 知识体系","/html/"],["10.前端 - 目录页/05.CSS - 知识体系.md","CSS - 知识体系","/css/"],["10.前端 - 目录页/10.JavaScript - 知识体系.md","JavaScript - 知识体系","/javascript/"],["10.前端 - 目录页/15.React - 知识体系.md","React - 知识体系","/react/"],["10.前端 - 目录页/20.Vue2 - 知识体系.md","Vue2 - 知识体系","/vue2/"],["10.前端 - 目录页/25.Vue3 - 知识体系 copy.md","Vue3 - 知识体系","/vue3/"]]},{title:"工具 - 目录页",collapsable:!0,children:[["20.工具 - 目录页/01.Maven - 知识体系.md","Maven - 知识体系","/maven/"],["20.工具 - 目录页/02.Git - 知识体系.md","Git - 知识体系","/git/"],["20.工具 - 目录页/03.Linux - 知识体系.md","Linux - 知识体系","/linux/"],["20.工具 - 目录页/04.Docker - 知识体系.md","Docker - 知识体系","/docker/"]]}],catalogue:{"前端 - 知识体系":"/front/","工具 - 知识体系":"/tool/","项目工程 - 知识体系":"/projects/","HTML - 知识体系":"/html/","CSS - 知识体系":"/css/","JavaScript - 知识体系":"/javascript/","React - 知识体系":"/react/","Vue2 - 知识体系":"/vue2/","Vue3 - 知识体系 copy":"/vue3/","Maven - 知识体系":"/maven/","Git - 知识体系":"/git/","Linux - 知识体系":"/linux/","Docker - 知识体系":"/docker/"},"/10.前端/":[{title:"HTML",collapsable:!0,children:[["05.HTML/00.HTML- 测试.md","HTML - 测试","/html/test/"]]},{title:"CSS",collapsable:!0,children:[["10.CSS/00.CSS- 测试.md","CSS - 测试","/css/test/"]]},{title:"JavaScript",collapsable:!0,children:[["15.JavaScript/00.javaScript - 测试.md","javaScript - 测试","/javascript/test/"]]},{title:"React",collapsable:!0,children:[["50.React/01.React - 基础与核心.md","React - 基础与核心","/react/basics/"],["50.React/03.React - 脚手架及使用.md","React - 脚手架及使用","/react/scaffolding/"],["50.React/05.React - 路由.md","React - 路由","/react/routes/"],["50.React/07.React - Redux.md","React - Redux","/react/redux/"],["50.React/09.React - 函数类型.md","React - 函数类型","/react/function/"],["50.React/11.React - 进阶知识.md","React - 进阶知识","/react/advanced-knowledge/"],["50.React/13.React - 父子传值与循环key.md","React - 父子传值与循环key","/react/parent-circular/"]]},{title:"Vue2",collapsable:!0,children:[["55.Vue2/00.Vue2 - 测试.md","Vue2 - 测试","/vue2/test/"]]},{title:"Vue3",collapsable:!0,children:[["60.Vue3/00.Vue3 - 测试.md","Vue3 - 测试","/vue3/test/"]]}],"/40.工具/":[{title:"版本管理 - Maven",collapsable:!0,children:[["10.版本管理 - Maven/01.Maven - 基础.md","Maven - 基础","/maven/basics/"],["10.版本管理 - Maven/03.Maven - 进阶.md","Maven - 进阶","/maven/advanced/"]]},{title:"开发管理 - Git",collapsable:!0,children:[["20.开发管理 - Git/01.Git - 介绍与安装.md","Git - 介绍与安装","/git/introduce/"],["20.开发管理 - Git/03.Git - 常用命令.md","Git - 常用命令","/git/common-commands"],["20.开发管理 - Git/05.Git - 基本原理.md","Git - 基本原理","/git/basic-principles/"],["20.开发管理 - Git/07.Git - SSH免密登录.md","Git - SSH免密登录","/git/ssh-login/"],["20.开发管理 - Git/09.Git - IDEA集成.md","Git - IDEA集成","/git/idea/"],["20.开发管理 - Git/11.Git - 自建代码托管平台.md","Git - 自建代码托管平台","/git/built-code-platform/"],["20.开发管理 - Git/15.Git - Commit常用表情.md","Git - Commit常用表情","/git/commit-emo/"]]},{title:"操作系统 - Linux",collapsable:!0,children:[["30.操作系统 - Linux/00.Linux - 测试.md","Linux - 测试","/linux/test/"]]},{title:"容器部署 - Docker",collapsable:!0,children:[["40.容器部署 - Docker/03.Docker - 介绍.md","Docker - 介绍","/docker/introduce/"],["40.容器部署 - Docker/06.Docker - 安装.md","Docker - 安装","/docker/install/"],["40.容器部署 - Docker/09.Docker - 常用命令.md","Docker - 常用命令","/docker/commands/"],["40.容器部署 - Docker/11.Docker - 镜像原理.md","Docker - 镜像原理","/docker/images/"],["40.容器部署 - Docker/13.Docker - 网络网桥.md","Docker - 网络网桥","/docker/network/"],["40.容器部署 - Docker/15.Docker - 数据卷.md","Docker - 数据卷","/docker/volume/"],["40.容器部署 - Docker/17.Docker - 软件安装.md","Docker - 软件安装","/dokcer/software-install/"],["40.容器部署 - Docker/19.Docker - Dockerfile.md","Docker - Dockerfile","/docker/dockerfile/"],["40.容器部署 - Docker/21.Docker - Compose.md","Docker - Compose","/docker/compose/"],["40.容器部署 - Docker/23.Docker - Maven插件.md","Docker - Maven插件","/docker/maven-plugin/"]]}],"/55.更多/":[["99.友情连接.md","友情连接","/friends"]],"/57.轮子工具/":[{title:"工具使用",collapsable:!0,children:[["05.工具使用/01.工具介绍.md","工具介绍","/whells-use/"],["05.工具使用/03.Shields - 徽章.md","Shields - 徽章","/shields/"],["05.工具使用/05.DBeaver - SQL连接器.md","DBeaver - SQL连接器","/dbeaver/"],["05.工具使用/07.Log4j - 配置.md","Log4j - 配置","/log4j/"]]},{title:"收藏夹",collapsable:!0,children:[["75.收藏夹/01.网站轮子.md","网站轮子","/whell/web/"],["75.收藏夹/02.前端轮子.md","前端轮子","/whell/front"],["75.收藏夹/03.插件选择.md","插件轮子","/plugins"]]}],"/59.项目工程/":[{title:"tbeam",collapsable:!0,children:[["04.tbeam/01.项目介绍.md","项目介绍","/projects/intro/","项目"],["04.tbeam/02.ADVue3的表格.md","Ant Design Vue 3.x - 表格","/advue3/table/","项目"],["04.tbeam/03.ADVue3的新增.md","Ant Design Vue 3.x - 新增","/advue3/add/","项目"],["04.tbeam/06.tbeam学到的技巧.md","tbeam - 技巧","/advue3/skill/","项目"]]},{title:"报修系统",collapsable:!0,children:[["05.报修系统/02.报修系统 - 详解.md","报修系统 - 详解","/rrs/details/","项目"],["05.报修系统/04.报修系统 - 部署.md","报修系统 - 部署","/rrs/deploy/","项目"],["05.报修系统/06.报修系统 - Tomcat问题.md","报修系统 - Tomcat问题","/rrs/tomcat/","项目"]]},{title:"yonyou",collapsable:!0,children:[["10.yonyou/01.yonyou - 节点配置.md","YonYou - 节点配置","/yonyou/configuration-node/","原创"],["10.yonyou/03.YonYou - NCC节点开发.md","YonYou - NCC节点开发","/yonyou/ncc-metadata/basic/","原创"],["10.yonyou/05.YonYou - 开发流程.md","YonYou - 开发流程","/yonyou/development-process/","原创"],["10.yonyou/07.YonYou - Client端开发.md","YonYou - Client端开发","/yonyou/client-development/","原创"]]}],"/80.关于/":[{title:"关于 - 自我",collapsable:!0,children:[["03.关于 - 自我/02.自我 - 介绍.md","自我 - 介绍","/about/me/introduce","原创"],["03.关于 - 自我/05.自我 - 清单.md","自我 - 清单","/about/list/","原创"],["03.关于 - 自我/07.自我 - 学习线.md","自我 - 学习线","/about/learn-line/","原创"],["03.关于 - 自我/09.自我 - 尊贵公子.md","自我 - 尊贵公子","/about/qin-yu/","原创"],["03.关于 - 自我/11.自我 - 温润少年.md","自我 - 温润少年","/about/liang-shi-bo/","原创"]]},{title:"关于 - 本站",collapsable:!0,children:[["06.关于 - 本站/01.本站 - 介绍.md","本站 - 介绍","/about/website/introduce"],["06.关于 - 本站/02.本站 - 规划.md","本站 - 规划","/about/website/plan/","原创"],["06.关于 - 本站/05.本站 - 搭建.md","本站 - 搭建","/about/website/build/","原创"],["06.关于 - 本站/07.本站 - 主题.md","本站 - 主题","/about/website/theme/","原创"],["06.关于 - 本站/10.本站 - 网站部署.md","本站 - 网站部署","/about/website/deploy/","原创"],["06.关于 - 本站/12.本站 - 服务器部署.md","本站 - 服务器部署","/about/website/server/","原创"],["06.关于 - 本站/14.本站 - 评论模块.md","本站 - 评论模块","/about/website/comment/","原创"],["06.关于 - 本站/16.本站 - 站点信息模块.md","本站 - 站点信息模块","/about/website/info/","原创"],["06.关于 - 本站/18.本站 - 自定义样式.md","本站 - 自定义样式","/about/website/style/","原创"],["06.关于 - 本站/20.本站 - 记录阅读文章模块.md","本站 - 记录曾阅读位置模块","/about/website/lastReading/","原创"],["06.关于 - 本站/22.本站 - 私密文章模块.md","本站 - 私密文章模块","/about/website/private/","原创"],["06.关于 - 本站/24.本站 - 导航站模块.md","本站 - 导航站模块","/about/website/tools/","原创"],["06.关于 - 本站/26.本站 - 首页大图模块.md","本站 - 首页大图模块","/about/website/index-big-img/","原创"],["06.关于 - 本站/28.本站 - 代码块隐藏模块.md","本站 - 代码块隐藏模块","/about/website/code-block-hidden/","原创"],["06.关于 - 本站/30.本站 - 全局时间提示模块.md","本站 - 全局时间提示模块","/about/website/global-tip/","原创"]]},{title:"关于 - 首页",collapsable:!0,children:[["08.关于 - 首页/02.首页 - 部署.md","首页 - 部署","/about/index/younngkbt/","原创"],["08.关于 - 首页/04.首页 - 下载站点.md","首页 - 下载站点","/about/index/download/","原创"]]},{title:"关于 - 技巧",collapsable:!0,children:[["09.关于 - 技巧/02.技巧 - 笔记.md","技巧 - 笔记","/about/mdskill/","优质"],["09.关于 - 技巧/04.技巧 - 排版.md","技巧 - 排版","/about/typesetting/","优质"]]},{title:"关于 - 随笔",collapsable:!0,children:[["12.关于 - 随笔/01.随笔 - 目录.md","随笔 - 目录","/posts/category/"]]}],"/90.私密文章测试/":[["01.全局私密文章测试.md","全局私密文章测试","/private/test1/","测试"],["03.单个私密文章测试.md","单个私密文章测试","/private/test2/","测试"]]},blogInfo:{blogCreate:"2021-12-31",indexView:!0,pageView:!0,readingTime:!0,eachFileWords:[{name:"前端 - 知识体系",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\00.目录页\\00.导航栏 - 目录页\\00.前端 - 知识体系.md",wordsCount:48,readingTime:"1",pageComponent:{name:"Catalogue",data:{key:"10.前端",imgUrl:"/img/index/front.png",description:"JavaScript、ES6、Vue 框架等前端技术。"}},title:"前端 - 知识体系",date:"2021-10-21T16:49:31.000Z",permalink:"/front/",sidebar:!1,article:!1,comment:!1,editLink:!1},{name:"工具 - 知识体系",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\00.目录页\\00.导航栏 - 目录页\\05.工具 - 知识体系.md",wordsCount:57,readingTime:"1",pageComponent:{name:"Catalogue",data:{path:"40.工具",imgUrl:"/img/index/front.png",description:"编程常用管理工具，包括部署工具等相关知识。"}},title:"工具 - 知识体系",date:"2021-10-21T16:48:47.000Z",permalink:"/tool/",sidebar:!1,article:!1,comment:!1,editLink:!1},{name:"项目工程 - 知识体系",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\00.目录页\\00.导航栏 - 目录页\\15.项目工程 - 知识体系.md",wordsCount:63,readingTime:"1",pageComponent:{name:"Catalogue",data:{path:"59.项目工程",imgUrl:"/img/index/front.png",description:"一些项目的经验以及遇到项目的问题与解决过程。"}},title:"项目工程 - 知识体系",date:"2021-10-28T14:29:27.000Z",permalink:"/projects/",sidebar:!1,article:!1,comment:!1,editLink:!1},{name:"HTML - 知识体系",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\00.目录页\\10.前端 - 目录页\\01.HTML - 知识体系.md",wordsCount:50,readingTime:"1",pageComponent:{name:"Catalogue",data:{path:"10.前端/05.HTML",imgUrl:"/img/index/front.png",description:null}},title:"HTML - 知识体系",date:"2021-11-25T19:38:21.000Z",permalink:"/html/",sidebar:!1,article:!1,comment:!1,editLink:!1},{name:"CSS - 知识体系",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\00.目录页\\10.前端 - 目录页\\05.CSS - 知识体系.md",wordsCount:58,readingTime:"1",pageComponent:{name:"Catalogue",data:{path:"10.前端/10.CSS",imgUrl:"/img/index/front.png",description:"设计模式 - 知识体系"}},title:"CSS - 知识体系",date:"2021-11-25T19:41:40.000Z",permalink:"/css/",sidebar:!1,article:!1,comment:!1,editLink:!1},{name:"JavaScript - 知识体系",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\00.目录页\\10.前端 - 目录页\\10.JavaScript - 知识体系.md",wordsCount:55,readingTime:"1",pageComponent:{name:"Catalogue",data:{path:"10.前端/15.JavaScript",imgUrl:"/img/index/front.png",description:"JavaScript - 知识体系"}},title:"JavaScript - 知识体系",date:"2021-11-25T19:39:12.000Z",permalink:"/javascript/",sidebar:!1,article:!1,comment:!1,editLink:!1},{name:"React - 知识体系",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\00.目录页\\10.前端 - 目录页\\15.React - 知识体系.md",wordsCount:44,readingTime:"1",pageComponent:{name:"Catalogue",data:{path:"10.前端/50.React",imgUrl:"/img/index/front.png",description:"React - 知识体系"}},title:"React - 知识体系",date:"2021-11-25T19:40:14.000Z",permalink:"/react/",sidebar:!1,article:!1,comment:!1,editLink:!1},{name:"Vue2 - 知识体系",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\00.目录页\\10.前端 - 目录页\\20.Vue2 - 知识体系.md",wordsCount:55,readingTime:"1",pageComponent:{name:"Catalogue",data:{path:"10.前端/55.Vue2",imgUrl:"/img/index/front.png",description:"Vue2 - 知识体系"}},title:"Vue2 - 知识体系",date:"2021-11-25T19:41:09.000Z",permalink:"/vue2/",sidebar:!1,article:!1,comment:!1,editLink:!1},{name:"Vue3 - 知识体系 copy",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\00.目录页\\10.前端 - 目录页\\25.Vue3 - 知识体系 copy.md",wordsCount:55,readingTime:"1",pageComponent:{name:"Catalogue",data:{path:"10.前端/60.Vue3",imgUrl:"/img/index/front.png",description:"Vue3 - 知识体系"}},title:"Vue3 - 知识体系",date:"2021-11-25T19:41:40.000Z",permalink:"/vue3/",sidebar:!1,article:!1,comment:!1,editLink:!1},{name:"Maven - 知识体系",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\00.目录页\\20.工具 - 目录页\\01.Maven - 知识体系.md",wordsCount:112,readingTime:"1",pageComponent:{name:"Catalogue",data:{path:"40.工具/10.版本管理 - Maven",imgUrl:"/img/index/front.png",description:"Maven 是最流行的 Java 项目构建系统，Maven 项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的软件项目管理工具。"}},title:"Maven - 知识体系",date:"2021-11-25T18:49:44.000Z",permalink:"/maven/",sidebar:!1,article:!1,comment:!1,editLink:!1},{name:"Git - 知识体系",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\00.目录页\\20.工具 - 目录页\\02.Git - 知识体系.md",wordsCount:123,readingTime:"1",pageComponent:{name:"Catalogue",data:{path:"40.工具/20.开发管理 - Git",imgUrl:"/img/index/front.png",description:"Git 是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。也是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。"}},title:"Git - 知识体系",date:"2021-11-25T18:51:10.000Z",permalink:"/git/",sidebar:!1,article:!1,comment:!1,editLink:!1},{name:"Linux - 知识体系",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\00.目录页\\20.工具 - 目录页\\03.Linux - 知识体系.md",wordsCount:94,readingTime:"1",pageComponent:{name:"Catalogue",data:{path:"40.工具/30.操作系统 - Linux",imgUrl:"/img/index/front.png",description:"Linux 是一个开源、免费的操作系统，稳定性、安全性、处理并发著称，企业级项目部署的优先级系统选择。"}},title:"Linux - 知识体系",date:"2021-11-25T18:52:13.000Z",permalink:"/linux/",sidebar:!1,article:!1,comment:!1,editLink:!1},{name:"Docker - 知识体系",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\00.目录页\\20.工具 - 目录页\\04.Docker - 知识体系.md",wordsCount:345,readingTime:"1.5m",pageComponent:{name:"Catalogue",data:{path:"40.工具/40.容器部署 - Docker",imgUrl:"/img/index/front.png",description:"Docker 是一个开源的应用容器引擎，它让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到安装了任何 Linux 发行版本的机器上。Docker 基于 LXC 来实现类似 VM 的功能，可以在更有限的硬件资源上提供给用户更多的计算资源。"}},title:"Docker - 知识体系",date:"2021-11-25T18:47:41.000Z",permalink:"/docker/",sidebar:!1,article:!1,comment:!1,editLink:!1},{name:"HTML- 测试",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\10.前端\\05.HTML\\00.HTML- 测试.md",wordsCount:27,readingTime:"1",title:"HTML - 测试",date:"2021-11-25T21:27:37.000Z",permalink:"/html/test/",article:!1,comment:!1,editLink:!1,categories:[null],tags:[null]},{name:"CSS- 测试",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\10.前端\\10.CSS\\00.CSS- 测试.md",wordsCount:27,readingTime:"1",title:"CSS - 测试",date:"2021-11-25T21:27:37.000Z",permalink:"/css/test/",article:!1,comment:!1,editLink:!1,categories:[null],tags:[null]},{name:"javaScript - 测试",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\10.前端\\15.JavaScript\\00.javaScript - 测试.md",wordsCount:27,readingTime:"1",title:"javaScript - 测试",date:"2021-11-25T21:28:07.000Z",permalink:"/javascript/test/",article:!1,comment:!1,editLink:!1,categories:[null],tags:[null]},{name:"React - 基础与核心",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\10.前端\\50.React\\01.React - 基础与核心.md",wordsCount:"3.5k",readingTime:"14.7m",title:"React - 基础与核心",date:"2022-02-21T11:20:16.000Z",permalink:"/react/basics/",categories:["React"],tags:["React"]},{name:"React - 脚手架及使用",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\10.前端\\50.React\\03.React - 脚手架及使用.md",wordsCount:"1k",readingTime:"4m",title:"React - 脚手架及使用",date:"2022-02-21T12:39:33.000Z",permalink:"/react/scaffolding/",categories:["React"],tags:["React"]},{name:"React - 路由",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\10.前端\\50.React\\05.React - 路由.md",wordsCount:"2.6k",readingTime:"11.1m",title:"React - 路由",date:"2022-02-21T12:41:42.000Z",permalink:"/react/routes/",categories:["React"],tags:["React"]},{name:"React - Redux",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\10.前端\\50.React\\07.React - Redux.md",wordsCount:"3.5k",readingTime:"14.3m",title:"React - Redux",date:"2022-02-21T12:57:29.000Z",permalink:"/react/redux/",categories:["React"],tags:["React"]},{name:"React - 函数类型",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\10.前端\\50.React\\09.React - 函数类型.md",wordsCount:259,readingTime:"1m",title:"React - 函数类型",date:"2022-02-21T12:59:57.000Z",permalink:"/react/function/",categories:["React"],tags:["React"]},{name:"React - 进阶知识",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\10.前端\\50.React\\11.React - 进阶知识.md",wordsCount:"2.8k",readingTime:"11.5m",title:"React - 进阶知识",date:"2022-02-21T13:03:06.000Z",permalink:"/react/advanced-knowledge/",categories:["React"],tags:["React"]},{name:"React - 父子传值与循环key",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\10.前端\\50.React\\13.React - 父子传值与循环key.md",wordsCount:"1k",readingTime:"4m",title:"React - 父子传值与循环key",date:"2022-02-26T19:17:20.000Z",permalink:"/react/parent-circular/",categories:["React"],tags:["React"]},{name:"Vue2 - 测试",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\10.前端\\55.Vue2\\00.Vue2 - 测试.md",wordsCount:27,readingTime:"1",title:"Vue2 - 测试",date:"2021-11-25T21:28:55.000Z",permalink:"/vue2/test/",article:!1,comment:!1,editLink:!1,categories:[null],tags:[null]},{name:"Vue3 - 测试",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\10.前端\\60.Vue3\\00.Vue3 - 测试.md",wordsCount:27,readingTime:"1",title:"Vue3 - 测试",date:"2021-11-25T21:29:12.000Z",permalink:"/vue3/test/",article:!1,comment:!1,editLink:!1,categories:[null],tags:[null]},{name:"Maven - 基础",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\40.工具\\10.版本管理 - Maven\\01.Maven - 基础.md",wordsCount:"3.7k",readingTime:"14.9m",title:"Maven - 基础",date:"2022-02-04T20:17:16.000Z",permalink:"/maven/basics/",categories:["Maven"],tags:["Maven"]},{name:"Maven - 进阶",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\40.工具\\10.版本管理 - Maven\\03.Maven - 进阶.md",wordsCount:"3.4k",readingTime:"13.6m",title:"Maven - 进阶",date:"2022-02-05T17:15:08.000Z",permalink:"/maven/advanced/",titleTag:null,categories:["Maven"],tags:["Maven"]},{name:"Git - 介绍与安装",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\40.工具\\20.开发管理 - Git\\01.Git - 介绍与安装.md",wordsCount:"2k",readingTime:"7.7m",title:"Git - 介绍与安装",date:"2022-02-08T12:52:18.000Z",permalink:"/git/introduce/",categories:["Git"],tags:["Git"]},{name:"Git - 常用命令",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\40.工具\\20.开发管理 - Git\\03.Git - 常用命令.md",wordsCount:"2.5k",readingTime:"9.5m",title:"Git - 常用命令",date:"2022-02-08T13:22:08.000Z",permalink:"/git/common-commands",categories:["Git"],tags:["Git"]},{name:"Git - 基本原理",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\40.工具\\20.开发管理 - Git\\05.Git - 基本原理.md",wordsCount:661,readingTime:"2.7m",title:"Git - 基本原理",date:"2022-02-08T21:01:48.000Z",permalink:"/git/basic-principles/",categories:["Git"],tags:["Git"]},{name:"Git - SSH免密登录",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\40.工具\\20.开发管理 - Git\\07.Git - SSH免密登录.md",wordsCount:528,readingTime:"2.1m",title:"Git - SSH免密登录",date:"2022-02-08T16:49:21.000Z",permalink:"/git/ssh-login/",categories:["Git"],tags:["Git"]},{name:"Git - IDEA集成",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\40.工具\\20.开发管理 - Git\\09.Git - IDEA集成.md",wordsCount:"2.6k",readingTime:"11.9m",title:"Git - IDEA集成",date:"2022-02-08T18:16:29.000Z",permalink:"/git/idea/",categories:["Git"],tags:["Git"]},{name:"Git - 自建代码托管平台",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\40.工具\\20.开发管理 - Git\\11.Git - 自建代码托管平台.md",wordsCount:"1.1k",readingTime:"5.2m",title:"Git - 自建代码托管平台",date:"2022-02-08T18:52:23.000Z",permalink:"/git/built-code-platform/",categories:["Git"],tags:["Git"]},{name:"Git - Commit常用表情",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\40.工具\\20.开发管理 - Git\\15.Git - Commit常用表情.md",wordsCount:"1.3k",readingTime:"7m",title:"Git - Commit常用表情",date:"2022-02-08T21:15:54.000Z",permalink:"/git/commit-emo/",categories:["Git"],tags:["Git"]},{name:"Linux - 测试",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\40.工具\\30.操作系统 - Linux\\00.Linux - 测试.md",wordsCount:27,readingTime:"1",title:"Linux - 测试",date:"2021-11-25T21:39:56.000Z",permalink:"/linux/test/",article:!1,comment:!1,editLink:!1,categories:[null],tags:[null]},{name:"Docker - 介绍",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\40.工具\\40.容器部署 - Docker\\03.Docker - 介绍.md",wordsCount:"8k",readingTime:"28.3m",title:"Docker - 介绍",date:"2021-11-19T12:24:06.000Z",permalink:"/docker/introduce/",categories:["Docker"],tags:["容器部署"]},{name:"Docker - 安装",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\40.工具\\40.容器部署 - Docker\\06.Docker - 安装.md",wordsCount:"3.7k",readingTime:"15.9m",title:"Docker - 安装",date:"2021-11-19T14:34:46.000Z",permalink:"/docker/install/",categories:["Docker"],tags:["容器部署"]},{name:"Docker - 常用命令",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\40.工具\\40.容器部署 - Docker\\09.Docker - 常用命令.md",wordsCount:"10.8k",readingTime:"46.7m",title:"Docker - 常用命令",date:"2021-11-19T17:31:25.000Z",permalink:"/docker/commands/",categories:["Docker"],tags:["容器部署"]},{name:"Docker - 镜像原理",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\40.工具\\40.容器部署 - Docker\\11.Docker - 镜像原理.md",wordsCount:"1.5k",readingTime:"5.9m",title:"Docker - 镜像原理",date:"2021-11-20T17:42:52.000Z",permalink:"/docker/images/",categories:["Docker"],tags:["容器部署"]},{name:"Docker - 网络网桥",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\40.工具\\40.容器部署 - Docker\\13.Docker - 网络网桥.md",wordsCount:"4.2k",readingTime:"18.7m",title:"Docker - 网络网桥",date:"2021-11-20T18:39:06.000Z",permalink:"/docker/network/",categories:["Docker"],tags:["容器部署"]},{name:"Docker - 数据卷",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\40.工具\\40.容器部署 - Docker\\15.Docker - 数据卷.md",wordsCount:"6.7k",readingTime:"26.8m",title:"Docker - 数据卷",date:"2021-11-20T22:48:50.000Z",permalink:"/docker/volume/",categories:["Docker"],tags:["容器部署"]},{name:"Docker - 软件安装",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\40.工具\\40.容器部署 - Docker\\17.Docker - 软件安装.md",wordsCount:"4.7k",readingTime:"19.9m",title:"Docker - 软件安装",date:"2021-11-24T23:49:11.000Z",permalink:"/dokcer/software-install/",categories:["Docker"],tags:["容器部署"]},{name:"Docker - Dockerfile",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\40.工具\\40.容器部署 - Docker\\19.Docker - Dockerfile.md",wordsCount:"8.6k",readingTime:"35.3m",title:"Docker - Dockerfile",date:"2021-11-21T22:42:42.000Z",permalink:"/docker/dockerfile/",categories:["Docker"],tags:["容器部署"]},{name:"Docker - Compose",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\40.工具\\40.容器部署 - Docker\\21.Docker - Compose.md",wordsCount:"7.4k",readingTime:"30.9m",title:"Docker - Compose",date:"2021-11-22T22:29:06.000Z",permalink:"/docker/compose/",categories:["Docker"],tags:["容器部署"]},{name:"Docker - Maven插件",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\40.工具\\40.容器部署 - Docker\\23.Docker - Maven插件.md",wordsCount:"3.6k",readingTime:"15m",title:"Docker - Maven插件",date:"2021-12-10T21:17:19.000Z",permalink:"/docker/maven-plugin/",categories:["Docker"],tags:["容器部署"]},{name:"友情连接",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\55.更多\\99.友情连接.md",wordsCount:329,readingTime:"1.6m",title:"友情连接",date:"2021-10-28T12:52:20.000Z",permalink:"/friends",article:!1,sidebar:!1,comment:!0},{name:"工具介绍",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\57.轮子工具\\05.工具使用\\01.工具介绍.md",wordsCount:254,readingTime:"1",title:"工具介绍",date:"2021-10-29T14:04:17.000Z",permalink:"/whells-use/",categories:["轮子使用"],tags:["轮子"]},{name:"Shields - 徽章",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\57.轮子工具\\05.工具使用\\03.Shields - 徽章.md",wordsCount:"2.4k",readingTime:"9.9m",title:"Shields - 徽章",date:"2021-10-29T14:08:41.000Z",permalink:"/shields/",categories:["轮子使用"],tags:["徽章"]},{name:"DBeaver - SQL连接器",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\57.轮子工具\\05.工具使用\\05.DBeaver - SQL连接器.md",wordsCount:"1.6k",readingTime:"7m",title:"DBeaver - SQL连接器",date:"2021-12-12T00:49:42.000Z",permalink:"/dbeaver/",categories:["轮子使用"],tags:["SQL连接器"]},{name:"Log4j - 配置",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\57.轮子工具\\05.工具使用\\07.Log4j - 配置.md",wordsCount:"5.8k",readingTime:"25.3m",title:"Log4j - 配置",date:"2021-12-24T14:04:35.000Z",permalink:"/log4j/",categories:["轮子使用"],tags:["日志"]},{name:"网站轮子",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\57.轮子工具\\75.收藏夹\\01.网站轮子.md",wordsCount:"2.8k",readingTime:"12.4m",title:"网站轮子",permalink:"/whell/web/",date:"2020-04-19T11:33:04.000Z",article:!1},{name:"前端轮子",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\57.轮子工具\\75.收藏夹\\02.前端轮子.md",wordsCount:272,readingTime:"1.4m",title:"前端轮子",date:"2021-10-09T19:42:02.000Z",permalink:"/whell/front",article:!1},{name:"插件选择",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\57.轮子工具\\75.收藏夹\\03.插件选择.md",wordsCount:265,readingTime:"1.2m",title:"插件轮子",date:"2021-10-28T16:27:50.000Z",permalink:"/plugins",article:!1},{name:"项目介绍",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\59.项目工程\\04.tbeam\\01.项目介绍.md",wordsCount:288,readingTime:"1.2m",title:"项目介绍",date:"2021-10-28T14:29:00.000Z",permalink:"/projects/intro/",titleTag:"项目",categories:["tbeam"],tags:["Vue3UI"]},{name:"ADVue3的表格",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\59.项目工程\\04.tbeam\\02.ADVue3的表格.md",wordsCount:"3.6k",readingTime:"16.1m",title:"Ant Design Vue 3.x - 表格",date:"2021-10-26T23:41:08.000Z",titleTag:"项目",permalink:"/advue3/table/",categories:["tbeam"],tags:["Vue3UI"]},{name:"ADVue3的新增",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\59.项目工程\\04.tbeam\\03.ADVue3的新增.md",wordsCount:"3.7k",readingTime:"17.1m",title:"Ant Design Vue 3.x - 新增",date:"2021-10-28T00:33:06.000Z",titleTag:"项目",permalink:"/advue3/add/",categories:["tbeam"],tags:["Vue3UI"]},{name:"tbeam学到的技巧",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\59.项目工程\\04.tbeam\\06.tbeam学到的技巧.md",wordsCount:366,readingTime:"1.6m",title:"tbeam - 技巧",date:"2021-11-07T15:58:18.000Z",titleTag:"项目",permalink:"/advue3/skill/",categories:["tbeam"],tags:["Vue3UI"]},{name:"报修系统 - 详解",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\59.项目工程\\05.报修系统\\02.报修系统 - 详解.md",wordsCount:"6.2k",readingTime:"22.6m",title:"报修系统 - 详解",date:"2021-10-30T13:49:42.000Z",permalink:"/rrs/details/",titleTag:"项目",categories:["报修系统"],tags:[null]},{name:"报修系统 - 部署",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\59.项目工程\\05.报修系统\\04.报修系统 - 部署.md",wordsCount:"1.1k",readingTime:"4.7m",title:"报修系统 - 部署",date:"2021-11-30T17:36:05.000Z",permalink:"/rrs/deploy/",titleTag:"项目",categories:["报修系统"],tags:[null]},{name:"报修系统 - Tomcat问题",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\59.项目工程\\05.报修系统\\06.报修系统 - Tomcat问题.md",wordsCount:"1.9k",readingTime:"8.2m",title:"报修系统 - Tomcat问题",date:"2021-12-30T15:27:38.000Z",permalink:"/rrs/tomcat/",titleTag:"项目",categories:["报修系统"],tags:[null]},{name:"yonyou - 节点配置",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\59.项目工程\\10.yonyou\\01.yonyou - 节点配置.md",wordsCount:566,readingTime:"2.3m",title:"YonYou - 节点配置",date:"2022-02-22T16:51:22.000Z",permalink:"/yonyou/configuration-node/",titleTag:"原创",categories:["YonYou"],tags:["YonYou"]},{name:"YonYou - NCC节点开发",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\59.项目工程\\10.yonyou\\03.YonYou - NCC节点开发.md",wordsCount:"1.7k",readingTime:"6.5m",title:"YonYou - NCC节点开发",date:"2022-02-23T22:21:47.000Z",permalink:"/yonyou/ncc-metadata/basic/",titleTag:"原创",categories:["YonYou"],tags:["YonYou"]},{name:"YonYou - 开发流程",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\59.项目工程\\10.yonyou\\05.YonYou - 开发流程.md",wordsCount:"1k",readingTime:"4.8m",title:"YonYou - 开发流程",date:"2022-03-02T12:29:47.000Z",permalink:"/yonyou/development-process/",titleTag:"原创",categories:["YonYou"],tags:["YonYou"]},{name:"YonYou - Client端开发",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\59.项目工程\\10.yonyou\\07.YonYou - Client端开发.md",wordsCount:"4k",readingTime:"21.7m",title:"YonYou - Client端开发",date:"2022-03-03T17:38:24.000Z",permalink:"/yonyou/client-development/",titleTag:"原创",categories:["YonYou"],tags:["YonYou"]},{name:"自我 - 介绍",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\80.关于\\03.关于 - 自我\\02.自我 - 介绍.md",wordsCount:250,readingTime:"1",title:"自我 - 介绍",date:"2021-11-03T01:24:12.000Z",permalink:"/about/me/introduce",titleTag:"原创",sticky:1,categories:["关于 - 自我"],tags:["关于"]},{name:"自我 - 清单",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\80.关于\\03.关于 - 自我\\05.自我 - 清单.md",wordsCount:"4.3k",readingTime:"20.9m",title:"自我 - 清单",date:"2021-11-13T12:31:23.000Z",permalink:"/about/list/",titleTag:"原创",categories:["关于 - 自我"],tags:["关于"]},{name:"自我 - 学习线",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\80.关于\\03.关于 - 自我\\07.自我 - 学习线.md",wordsCount:"1.7k",readingTime:"8m",title:"自我 - 学习线",date:"2021-11-13T15:09:47.000Z",permalink:"/about/learn-line/",titleTag:"原创",categories:["关于 - 自我"],tags:["关于"]},{name:"自我 - 尊贵公子",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\80.关于\\03.关于 - 自我\\09.自我 - 尊贵公子.md",wordsCount:592,readingTime:"2m",title:"自我 - 尊贵公子",date:"2022-02-19T19:01:31.000Z",permalink:"/about/qin-yu/",private:!0,titleTag:"原创",categories:["关于 - 自我"],tags:["关于"]},{name:"自我 - 温润少年",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\80.关于\\03.关于 - 自我\\11.自我 - 温润少年.md",wordsCount:711,readingTime:"2.4m",title:"自我 - 温润少年",date:"2022-02-19T19:05:15.000Z",permalink:"/about/liang-shi-bo/",private:!0,titleTag:"原创",categories:["关于 - 自我"],tags:["关于"]},{name:"本站 - 介绍",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\80.关于\\06.关于 - 本站\\01.本站 - 介绍.md",wordsCount:"2.2k",readingTime:"8m",title:"本站 - 介绍",date:"2021-11-01T11:03:34.000Z",permalink:"/about/website/introduce",categories:["关于 - 本站"],tags:["本站"]},{name:"本站 - 规划",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\80.关于\\06.关于 - 本站\\02.本站 - 规划.md",wordsCount:366,readingTime:"1.4m",title:"本站 - 规划",date:"2021-11-01T12:02:37.000Z",permalink:"/about/website/plan/",titleTag:"原创",categories:["关于 - 本站"],tags:["本站"]},{name:"本站 - 搭建",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\80.关于\\06.关于 - 本站\\05.本站 - 搭建.md",wordsCount:"2.8k",readingTime:"11.4m",title:"本站 - 搭建",date:"2021-10-31T14:54:34.000Z",permalink:"/about/website/build/",titleTag:"原创",categories:["关于 - 本站"],tags:["本站"]},{name:"本站 - 主题",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\80.关于\\06.关于 - 本站\\07.本站 - 主题.md",wordsCount:"3.2k",readingTime:"12.2m",title:"本站 - 主题",date:"2021-11-07T17:32:31.000Z",permalink:"/about/website/theme/",titleTag:"原创",categories:["关于 - 本站"],tags:["本站"]},{name:"本站 - 网站部署",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\80.关于\\06.关于 - 本站\\10.本站 - 网站部署.md",wordsCount:"7.6k",readingTime:"31.5m",title:"本站 - 网站部署",date:"2021-11-01T15:32:38.000Z",permalink:"/about/website/deploy/",titleTag:"原创",categories:["关于 - 本站"],tags:["本站"]},{name:"本站 - 服务器部署",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\80.关于\\06.关于 - 本站\\12.本站 - 服务器部署.md",wordsCount:"8.9k",readingTime:"35.9m",title:"本站 - 服务器部署",date:"2021-12-03T12:23:14.000Z",permalink:"/about/website/server/",titleTag:"原创",categories:["关于 - 本站"],tags:["本站"]},{name:"本站 - 评论模块",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\80.关于\\06.关于 - 本站\\14.本站 - 评论模块.md",wordsCount:"3.7k",readingTime:"15.3m",title:"本站 - 评论模块",date:"2021-10-29T16:13:12.000Z",permalink:"/about/website/comment/",titleTag:"原创",categories:["关于 - 本站"],tags:["本站"]},{name:"本站 - 站点信息模块",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\80.关于\\06.关于 - 本站\\16.本站 - 站点信息模块.md",wordsCount:"11.5k",readingTime:"54.4m",title:"本站 - 站点信息模块",date:"2021-12-30T21:44:18.000Z",permalink:"/about/website/info/",titleTag:"原创",categories:["关于 - 本站"],tags:["本站"]},{name:"本站 - 自定义样式",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\80.关于\\06.关于 - 本站\\18.本站 - 自定义样式.md",wordsCount:"1.8k",readingTime:"8.6m",title:"本站 - 自定义样式",date:"2022-01-01T20:15:16.000Z",permalink:"/about/website/style/",titleTag:"原创",categories:["关于 - 本站"],tags:["本站"]},{name:"本站 - 记录阅读文章模块",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\80.关于\\06.关于 - 本站\\20.本站 - 记录阅读文章模块.md",wordsCount:"1k",readingTime:"4.7m",title:"本站 - 记录曾阅读位置模块",date:"2022-01-04T15:44:12.000Z",permalink:"/about/website/lastReading/",titleTag:"原创",categories:["关于 - 本站"],tags:["本站"]},{name:"本站 - 私密文章模块",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\80.关于\\06.关于 - 本站\\22.本站 - 私密文章模块.md",wordsCount:"2.7k",readingTime:"12.2m",title:"本站 - 私密文章模块",date:"2022-01-07T17:05:56.000Z",permalink:"/about/website/private/",titleTag:"原创",categories:["关于 - 本站"],tags:["本站"]},{name:"本站 - 导航站模块",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\80.关于\\06.关于 - 本站\\24.本站 - 导航站模块.md",wordsCount:"1.3k",readingTime:"6.1m",title:"本站 - 导航站模块",date:"2022-01-11T14:03:46.000Z",permalink:"/about/website/tools/",titleTag:"原创",categories:["关于 - 本站"],tags:["本站"]},{name:"本站 - 首页大图模块",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\80.关于\\06.关于 - 本站\\26.本站 - 首页大图模块.md",wordsCount:"6.8k",readingTime:"33.6m",title:"本站 - 首页大图模块",date:"2022-01-12T23:35:41.000Z",permalink:"/about/website/index-big-img/",titleTag:"原创",categories:["关于 - 本站"],tags:["本站"]},{name:"本站 - 代码块隐藏模块",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\80.关于\\06.关于 - 本站\\28.本站 - 代码块隐藏模块.md",wordsCount:"2.3k",readingTime:"10.3m",title:"本站 - 代码块隐藏模块",date:"2022-02-13T19:18:07.000Z",permalink:"/about/website/code-block-hidden/",titleTag:"原创",categories:["关于 - 本站"],tags:["本站"]},{name:"本站 - 全局时间提示模块",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\80.关于\\06.关于 - 本站\\30.本站 - 全局时间提示模块.md",wordsCount:"1.5k",readingTime:"6.9m",title:"本站 - 全局时间提示模块",date:"2022-02-13T21:26:37.000Z",permalink:"/about/website/global-tip/",titleTag:"原创",categories:["关于 - 本站"],tags:["本站"]},{name:"首页 - 部署",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\80.关于\\08.关于 - 首页\\02.首页 - 部署.md",wordsCount:"7.6k",readingTime:"35m",title:"首页 - 部署",date:"2021-12-09T21:57:35.000Z",permalink:"/about/index/younngkbt/",titleTag:"原创",categories:["关于 - 首页"],tags:["首页"]},{name:"首页 - 下载站点",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\80.关于\\08.关于 - 首页\\04.首页 - 下载站点.md",wordsCount:"1.4k",readingTime:"5.6m",title:"首页 - 下载站点",date:"2021-12-14T21:43:11.000Z",permalink:"/about/index/download/",titleTag:"原创",categories:["关于 - 首页"],tags:["首页"]},{name:"技巧 - 笔记",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\80.关于\\09.关于 - 技巧\\02.技巧 - 笔记.md",wordsCount:"3.3k",readingTime:"14.7m",title:"技巧 - 笔记",date:"2021-10-28T18:21:33.000Z",permalink:"/about/mdskill/",titleTag:"优质",categories:["关于 - 技巧"],tags:["技巧"]},{name:"技巧 - 排版",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\80.关于\\09.关于 - 技巧\\04.技巧 - 排版.md",wordsCount:"2.8k",readingTime:"11.2m",title:"技巧 - 排版",date:"2021-11-13T17:19:20.000Z",permalink:"/about/typesetting/",titleTag:"优质",categories:["关于 - 技巧"],tags:["技巧"]},{name:"随笔 - 目录",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\80.关于\\12.关于 - 随笔\\01.随笔 - 目录.md",wordsCount:57,readingTime:"1",title:"随笔 - 目录",date:"2022-01-09T23:35:16.000Z",permalink:"/posts/category/",sidebar:!1,article:!1,comment:!1,editLink:!1,categories:[null],tags:[null]},{name:"全局私密文章测试",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\90.私密文章测试\\01.全局私密文章测试.md",wordsCount:151,readingTime:"1",title:"全局私密文章测试",date:"2022-01-07T17:00:36.000Z",permalink:"/private/test1/",private:!0,username:"vdoing",password:123456,expire:6e4,titleTag:"测试",categories:["测试"],tags:[null]},{name:"单个私密文章测试",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\90.私密文章测试\\03.单个私密文章测试.md",wordsCount:201,readingTime:"1",title:"单个私密文章测试",date:"2022-01-07T17:01:37.000Z",permalink:"/private/test2/",titleTag:"测试",private:!0,username:"vdoing",password:123,expire:6e4,categories:["测试"],tags:[null]},{name:"Github - 好看的主页",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\_posts\\技术随笔\\Github - 好看的主页.md",wordsCount:533,readingTime:"2.4m",title:"Github - 好看的主页",date:"2022-01-09T17:35:33.000Z",permalink:"/github/index/",titleTag:"原创",sidebar:"auto",categories:["技术随笔"],tags:[null]},{name:"Maven - 上传中央仓库",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\_posts\\技术随笔\\Maven - 上传中央仓库.md",wordsCount:"2.8k",readingTime:"12.9m",title:"Maven - 上传中央仓库",date:"2022-02-07T21:28:59.000Z",permalink:"/maven/upload/",titleTag:"原创",categories:["Maven"],tags:[null],sidebar:"auto"},{name:"技术随笔 - 360天擎关闭",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\_posts\\技术随笔\\技术随笔 - 360天擎关闭.md",wordsCount:121,readingTime:"1",title:"技术随笔 - 360天擎关闭",date:"2022-02-22T09:09:19.000Z",permalink:"/360/system/",titleTag:"原创",sidebar:"auto",categories:[null],tags:[null]},{name:"技术随笔 - Java启动的-D参数",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\_posts\\技术随笔\\技术随笔 - Java启动的-D参数.md",wordsCount:247,readingTime:"1m",title:"技术随笔 - Java启动的-D参数",date:"2022-03-02T09:27:00.000Z",permalink:"/java/d/",sidebar:"auto",categories:[null],tags:[null]},{name:"技术随笔 - 域名解析",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\_posts\\技术随笔\\技术随笔 - 域名解析.md",wordsCount:"1.1k",readingTime:"4m",title:"技术随笔 - 域名解析",date:"2021-12-01T23:21:36.000Z",permalink:"/domain/name/",titleTag:"原创",sidebar:"auto",categories:["技术随笔"],tags:["域名"]},{name:"生活随笔 - 习惯",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\_posts\\生活随笔\\生活随笔 - 习惯.md",wordsCount:"2.3k",readingTime:"7.7m",title:"生活随笔 - 习惯",date:"2022-02-19T18:46:39.000Z",permalink:"/live-posts/habit/",titleTag:"原创",sidebar:"auto",categories:["技术随笔"],tags:[null]},{name:"生活随笔 - 美词",filePath:"E:\\my-blog\\huangguan2001.github.io\\docs\\_posts\\生活随笔\\生活随笔 - 美词.md",wordsCount:605,readingTime:"2m",title:"生活随笔 - 美词",date:"2022-02-19T18:42:09.000Z",permalink:"/live-posts/beautiful-words/",titleTag:"原创",sidebar:"auto",categories:["技术随笔"],tags:[null]}],mdFileCountType:"archives",totalWords:"archives",moutedEvent:".tags-wrapper",indexIteration:2500,pageIteration:2500},privatePage:{username:"youngkbt",password:"kbt648621",expire:864e5,loginPath:"/vdoing/login/",loginKey:"vdoing_login",loginSession:!1},indexImg:{navColor:2,switchNavColor:!0,bgTimeColor:!0,bgTimeColorArray:["transparent","transparent","transparent","transparent"],descFade:!0,desc:["你所有的悲伤都是源于技术的不足 —— 来自 村长"],descFontSize:"1.4rem",descFadeInTime:200,descFadeOutTime:100,descNextTime:800,bubble:!0,bubblePosition:0,bubbleNum:66},author:{name:"村长",link:"https://www.haungguanhao.com"},blogger:{avatar:"https://qiniu.image.cq-wnl.com/content/202203306f5a2eb785aa45b2be021bb262e84397_647.jpg",name:"村长的菜鸟驿站",slogan:"永远年轻，永远热泪盈眶"},social:{icons:[{iconClass:"icon-github",title:"GitHub",link:"https://github.com/huangguan2001"},{iconClass:"icon-gitee",title:"Gitee",link:"https://gitee.com/huangguan2001"},{iconClass:"icon-QQ",title:"QQ",link:"tencent://message/?uin=64867944&Site=&Menu=yes"},{iconClass:"icon-youjian",title:"联系我",link:"mailto:64867944@qq.com"},{iconClass:"icon-erji",title:"音乐",link:"https://music.163.com/#/user/home?id=365907246"}]},footer:{createYear:2021,copyrightInfo:"村长 | 菜鸟驿站"}},locales:{"/":{lang:"zh-CN",title:"村长的菜鸟驿站",description:"前端博客,个人技术博客,前端,前端开发,前端框架,web前端,前端面试题,技术文档,学习,面试,JavaScript,js,ES6,TypeScript,vue,python,css3,html5,Node,git,github,markdown",path:"/"}}},xt=(t(105),t(143));function kt(n){var e=document.querySelector(n);e&&e.parentNode.removeChild(e)}function wt(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:".articleInfo-wrap > .articleInfo > .info",t=0,o=setInterval((function(){t++;var r=document.querySelector(e);r?Et(n,r)||(r.appendChild(n),clearInterval(o)):t>10&&clearInterval(o)}),1e3)}function Et(n,e){return n.parentNode==e}t(155),t(107);var Tt=t(223),_t=t(224),jt=(t(237),t(156),t(45));var St={computed:{$filterPosts:function(){return this.$site.pages.filter((function(n){var e=n.frontmatter,t=e.pageComponent,o=e.article,r=e.home;return!(t||!1===o||!0===r)}))},$sortPosts:function(){return(n=this.$filterPosts).sort((function(n,e){var t=n.frontmatter.sticky,o=e.frontmatter.sticky;return t&&o?t==o?Object(jt.a)(n,e):t-o:t&&!o?-1:!t&&o?1:Object(jt.a)(n,e)})),n;var n},$sortPostsByDate:function(){return(n=this.$filterPosts).sort((function(n,e){return Object(jt.a)(n,e)})),n;var n},$groupPosts:function(){return function(n){for(var e={},t={},o=function(o,r){var a=n[o].frontmatter,i=a.categories,s=a.tags;"array"===Object(jt.n)(i)&&i.forEach((function(t){t&&(e[t]||(e[t]=[]),e[t].push(n[o]))})),"array"===Object(jt.n)(s)&&s.forEach((function(e){e&&(t[e]||(t[e]=[]),t[e].push(n[o]))}))},r=0,a=n.length;r<a;r++)o(r);return{categories:e,tags:t}}(this.$sortPosts)},$categoriesAndTags:function(){return function(n){var e=[],t=[];for(var o in n.categories)e.push({key:o,length:n.categories[o].length});for(var r in n.tags)t.push({key:r,length:n.tags[r].length});return{categories:e,tags:t}}(this.$groupPosts)}}};r.default.component(Tt.default),r.default.component(_t.default);function At(n){return n.toString().padStart(2,"0")}t(382);r.default.component("Aplayer",(function(){return t.e(16).then(t.bind(null,509))})),r.default.component("Bubble",(function(){return Promise.all([t.e(0),t.e(5)]).then(t.bind(null,510))})),r.default.component("BlockToggle",(function(){return Promise.all([t.e(0),t.e(4)]).then(t.bind(null,511))})),r.default.component("Card",(function(){return Promise.all([t.e(0),t.e(11)]).then(t.bind(null,512))})),r.default.component("Fantasy",(function(){return Promise.all([t.e(0),t.e(9)]).then(t.bind(null,513))})),r.default.component("GlobalTip",(function(){return Promise.all([t.e(0),t.e(6)]).then(t.bind(null,514))})),r.default.component("IndexBigImg",(function(){return Promise.all([t.e(0),t.e(3)]).then(t.bind(null,515))})),r.default.component("LastReadingPopup",(function(){return Promise.resolve().then(t.bind(null,143))})),r.default.component("Login",(function(){return Promise.all([t.e(0),t.e(7)]).then(t.bind(null,516))})),r.default.component("Twikoo",(function(){return Promise.all([t.e(0),t.e(12)]).then(t.bind(null,517))})),r.default.component("SidebarReverse",(function(){return t.e(15).then(t.bind(null,518))})),r.default.component("WebInfo",(function(){return Promise.all([t.e(0),t.e(8)]).then(t.bind(null,506))})),r.default.component("Badge",(function(){return Promise.all([t.e(0),t.e(13)]).then(t.bind(null,622))})),r.default.component("CodeBlock",(function(){return Promise.resolve().then(t.bind(null,223))})),r.default.component("CodeGroup",(function(){return Promise.resolve().then(t.bind(null,224))}));t(383),t(106),t(229);var Ct={name:"ReadingProgress",data:function(){return{readingTop:0,readingHeight:1,progressStyle:null,transform:void 0,running:!1}},watch:{$readingShow:function(){this.progressStyle=this.getProgressStyle(),this.$readingShow&&window.addEventListener("scroll",this.base)}},mounted:function(){this.transform=this.getTransform(),this.progressStyle=this.getProgressStyle(),this.$readingShow&&window.addEventListener("scroll",this.base)},beforeDestroy:function(){this.$readingShow&&window.removeEventListener("scroll",this.base)},methods:{base:function(){this.running||(this.running=!0,requestAnimationFrame(this.getReadingBase))},getReadingBase:function(){this.readingHeight=this.getReadingHeight()-this.getScreenHeight(),this.readingTop=this.getReadingTop(),this.progressStyle=this.getProgressStyle(),this.running=!1},getReadingHeight:function(){return Math.max(document.body.scrollHeight,document.body.offsetHeight,0)},getScreenHeight:function(){return Math.max(window.innerHeight,document.documentElement.clientHeight,0)},getReadingTop:function(){return Math.max(window.pageYOffset,document.documentElement.scrollTop,0)},getTransform:function(){var n=document.createElement("div");return["transform","-webkit-transform","-moz-transform","-o-transform","-ms-transform"].find((function(e){return e in n.style}))||void 0},getProgressStyle:function(){var n=this.readingTop/this.readingHeight;switch(this.$readingShow){case"top":case"bottom":return this.transform?"".concat(this.transform,": scaleX(").concat(n,")"):"width: ".concat(100*n,"%");case"left":case"right":return this.transform?"".concat(this.transform,": scaleY(").concat(n,")"):"height: ".concat(100*n,"%");default:return null}}}},It=(t(384),Object(ht.a)(Ct,(function(){var n=this.$createElement,e=this._self._c||n;return e("ClientOnly",[this.$readingShow?e("div",{staticClass:"reading-progress",class:this.$readingShow},[e("div",{staticClass:"progress",style:this.progressStyle})]):this._e()])}),[],!1,null,"3640397f",null).exports),Dt=t(53),Pt=(t(239),t(240),{name:"Meting",props:{auto:{required:!1,type:String,default:""},server:{required:!1,type:String,default:""},type:{required:!1,type:String,default:""},mid:{required:!1,type:String,default:""},additionalAudios:{required:!1,type:Array,default:function(){return[]}},fixed:{required:!1,type:Boolean,default:!1},mini:{required:!1,type:Boolean,default:null},autoplay:{required:!1,type:Boolean,default:!1},theme:{required:!1,type:String,default:"#b7daff"},loop:{required:!1,type:String,default:"all"},order:{required:!1,type:String,default:"list"},preload:{required:!1,type:String,default:"auto"},volume:{required:!1,type:Number,default:.7},customAudioType:{required:!1,type:Object,default:void 0},mutex:{required:!1,type:Boolean,default:!0},lrcType:{required:!1,type:Number,default:0},listFolded:{required:!1,type:Boolean,default:!1},listMaxHeight:{required:!1,type:Number,default:250},storageName:{required:!1,type:String,default:"vuepress-plugin-meting"}},data:function(){return{metingApi:"https://api.i-meto.com/meting/api",audio:[]}},mounted:function(){var n,e=this;if(this.auto){var t=this.parse_link(this.auto);n=Object(Dt.a)(Object(Dt.a)({},t),{},{r:Math.random()})}else n={server:this.server,type:this.type,id:this.mid,r:Math.random()};var o=this.metingApi,r=[];Object.keys(n).forEach((function(e){return r.push(e+"="+n[e])})),o+="?"+r.join("&"),fetch(o,{headers:{referer:null}}).then((function(n){return n.json()})).then((function(n){var t=n.map((function(n){return{name:n.name||n.title||"Audio name",artist:n.artist||n.author||"Audio artist",url:n.url,cover:n.cover||n.pic,lrc:n.lrc||n.lyric||"",type:n.type||"auto"}}));e.audio=t.concat(e.additionalAudios)}))},methods:{parse_link:function(n){for(var e=0,t=[["music.163.com.*song.*id=(\\d+)","netease","song"],["music.163.com.*album.*id=(\\d+)","netease","album"],["music.163.com.*artist.*id=(\\d+)","netease","artist"],["music.163.com.*playlist.*id=(\\d+)","netease","playlist"],["music.163.com.*discover/toplist.*id=(\\d+)","netease","playlist"],["y.qq.com.*song/(\\w+).html","tencent","song"],["y.qq.com.*album/(\\w+).html","tencent","album"],["y.qq.com.*singer/(\\w+).html","tencent","artist"],["y.qq.com.*playsquare/(\\w+).html","tencent","playlist"],["y.qq.com.*playlist/(\\w+).html","tencent","playlist"],["xiami.com.*song/(\\w+)","xiami","song"],["xiami.com.*album/(\\w+)","xiami","album"],["xiami.com.*artist/(\\w+)","xiami","artist"],["xiami.com.*collect/(\\w+)","xiami","playlist"]];e<t.length;e++){var o=t[e],r=new RegExp(o[0]).exec(n);if(null!==r)return{server:o[1],type:o[2],id:r[1]}}return console.error("无法解析的链接: ".concat(n,"，请检查链接是否书写正确")),{server:"",type:"",id:""}}}}),zt=Object(ht.a)(Pt,(function(){var n=this,e=n.$createElement;return(n._self._c||e)("APlayer",{attrs:{audio:n.audio,fixed:n.fixed,mini:n.mini,autoplay:n.autoplay,theme:n.theme,loop:n.loop,order:n.order,preload:n.preload,volume:n.volume,"custom-audio-type":n.customAudioType,mutex:n.mutex,"lrc-type":n.lrcType,"list-folded":n.listFolded,"list-max-height":n.listMaxHeight,"storage-name":n.storageName}})}),[],!1,null,null,null).exports,Rt={name:"MetingGlobal",data:function(){return Object(Dt.a)(Object(Dt.a)({},{auto:"",server:"netease",type:"playlist",mid:"2555412439"}),{additionalAudios:[],mini:!0,autoplay:!1,theme:"#b7daff",loop:"all",order:"list",preload:"auto",volume:.7,mutex:!0,lrcType:0,listFolded:!1,listMaxHeight:250,storageName:"vuepress-plugin-meting"})},mounted:function(){/Android|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent)&&this.aplayer_fixed_mobile_switch()},methods:{aplayer_fixed_mobile_switch:function(){var n=document.getElementById("aplayer-fixed");if(null!==n){n.querySelector(".aplayer-body");var e=n.querySelector(".aplayer-miniswitcher"),t=(n.querySelector(".aplayer-lrc"),!1);o(),e.onclick=function(){t?o():t=!0}}function o(){t=!1}}}},Ot=Object(ht.a)(Rt,(function(){var n=this,e=n.$createElement;return(n._self._c||e)("Meting",{attrs:{id:"aplayer-fixed",auto:n.auto,server:n.server,type:n.type,mid:n.mid,"additional-audios":n.additionalAudios,fixed:!0,mini:n.mini,autoplay:n.autoplay,theme:n.theme,loop:n.loop,order:n.order,preload:n.preload,volume:n.volume,mutex:n.mutex,"lrc-type":n.lrcType,"list-folded":n.listFolded,"list-max-height":n.listMaxHeight,"storage-name":n.storageName}})}),[],!1,null,null,null).exports,Mt={name:"DynamicTitle",data:function(){return{originTitle:"",recoverTimeout:null,config:{showIcon:"/favicon.ico",showText:"ヾ(≧▽≦*)o欢迎回来！",hideIcon:"/failure.ico",hideText:"ಥ_ಥ不要走呀！",recoverTime:2e3}}},mounted:function(){var n=this;this.originTitle=document.title,""!==this.config.showIcon&&this.getIconElm().setAttribute("href",this.config.showIcon),document.addEventListener("visibilitychange",(function(){document.hidden?n.hidden():n.visible()}))},methods:{hidden:function(){""!==this.config.hideIcon&&this.getIconElm().setAttribute("href",this.config.hideIcon),document.title=this.config.hideText,clearTimeout(this.recoverTimeout)},visible:function(){var n=this;""!==this.config.showIcon&&this.getIconElm().setAttribute("href",this.config.showIcon),document.title=this.config.showText+this.originTitle,this.recoverTimeout=setTimeout((function(){document.title=n.originTitle}),this.config.recoverTime)},getIconElm:function(){var n=document.querySelector("link[rel=icon]");return null===n&&((n=document.createElement("link")).setAttribute("rel","icon"),document.head.appendChild(n)),n}},watch:{$route:function(n,e){n.path!==e.path&&(this.originTitle=document.title,clearTimeout(this.recoverTimeout))}}},Bt=Object(ht.a)(Mt,(function(){var n=this.$createElement;return(this._self._c||n)("div")}),[],!1,null,null,null).exports,Lt=t(222),$t=t.n(Lt),Nt=[function(n){var e=n.Vue,o=(n.options,n.router),r=n.siteData,a=n.isServer;a||o.beforeEach((function(n,e,t){r.pages.forEach((function(e){if(e.path==n.path&&e.frontmatter.private&&1==e.frontmatter.private&&r.themeConfig.privatePage){var t=r.themeConfig.privatePage,a=t.username,i=t.password,s=t.loginPath,l=t.loginKey,c=t.expire,d=t.loginSession;if(c||(c=864e5),l||(l="vdoing_login"),d&&window.addEventListener("unload",(function(){localStorage.removeItem(l)})),e.frontmatter.username&&e.frontmatter.password){var u=JSON.parse(localStorage.getItem(e.frontmatter.title));(!u||u.username!==e.frontmatter.username&&u.password!==e.frontmatter.password)&&o.push({path:s,query:{toPath:n.path,singlePage:!0}})}else{var p=JSON.parse(localStorage.getItem(l));!p||p.username!==a&&p.password!==i?o.push({path:s,query:{toPath:n.path}}):new Date-p.time>p.expire&&(localStorage.removeItem(l),o.push({path:s,query:{toPath:n.path}}))}}})),t()}));var i=!1;e.component(xt.default.name,xt.default),e.mixin({mounted:function(){i||(window.addEventListener("unload",this.saveLastReading),i=!0)},methods:{saveLastReading:function(){localStorage.setItem("lastReading",JSON.stringify({path:this.$route.path,scrollTop:document.documentElement.scrollTop,timestamp:(new Date).getTime()}))}}}),a||(o.beforeEach((function(n,e,o){o(),"/"!==n.path&&n.path!==e.path&&r.themeConfig.blogInfo&&(kt(".page-view-js"),kt(".page-view"),kt(".book-words"),kt(".reading-time"),r.pages.forEach((function(e){if(e.path==n.path&&(null==e.frontmatter.article||e.frontmatter.article)){var o=r.themeConfig.blogInfo,a=o.eachFileWords,i=o.pageView,s=o.pageIteration,l=o.readingTime;return a&&a.forEach((function(n){var t,o;n.permalink==e.frontmatter.permalink&&(!function(n){if(n){var e=document.createElement("div");e.title="文章字数",e.className="book-words iconfont icon-book",e.style.float="left",e.style.marginLeft="20px",e.style.fontSize="0.8rem",e.innerHTML='<a href="javascript:;" style="margin-left: 3px; color: #888">'.concat(n,"</a>"),wt(e)}}(n.wordsCount),(l||null==l)&&(t=n.readingTime,(o=document.createElement("div")).title="预阅读时长",o.className="reading-time iconfont icon-shijian",o.style.float="left",o.style.marginLeft="20px",o.style.fontSize="0.8rem",o.innerHTML='<a href="javascript:;" style="margin-left: 3px; color: #888">'.concat(t,"</a>"),wt(o)))})),void((i||null==i)&&(!function(){var n=document.createElement("div");n.title="浏览量",n.className="page-view iconfont icon-view",n.style.float="left",n.style.marginLeft="20px",n.style.fontSize="0.8rem",n.innerHTML='<a style="color: #888; margin-left: 3px" href="javascript:;" id="busuanzi_value_page_pv" class="view-data"><i title="正在获取..." class="loading iconfont icon-loading"></i></a>',wt(n);var e=document.createElement("style");e.innerHTML="@keyframes turn {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n  .loading {\n    display: inline-block;\n    animation: turn 1s linear infinite;\n    -webkit-animation: turn 1s linear infinite;\n  }",document.head.appendChild(e)}(),setTimeout((function(){!function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:3e3;bt?bt.fetch():bt=t(236);var e=0,o="9999";setTimeout((function(){var t=setInterval((function(){var r=document.querySelector(".view-data");r?((e+=n)>10*n&&(r.innerText=o,clearInterval(t)),""==r.innerText?bt.fetch():clearInterval(t)):clearInterval(t)}),n)}),n)}(s)}),1500)))}})))})),o.afterEach((function(n,e){"/"===e.path&&e.matched&&e.matched.length})))},function(n){var e=n.Vue,t=(n.options,n.router,n.siteData);t.pages.map((function(n){var e=n.frontmatter,o=e.date,r=e.author;"string"==typeof o&&"Z"===o.charAt(o.length-1)&&(n.frontmatter.date=function(n){n instanceof Date||(n=new Date(n));return"".concat(n.getUTCFullYear(),"-").concat(At(n.getUTCMonth()+1),"-").concat(At(n.getUTCDate())," ").concat(At(n.getUTCHours()),":").concat(At(n.getUTCMinutes()),":").concat(At(n.getUTCSeconds()))}(o)),r?n.author=r:t.themeConfig.author&&(n.author=t.themeConfig.author)})),e.mixin(St)},{},function(n){n.Vue.mixin({computed:{$dataBlock:function(){return this.$options.__data__block__}}})},{},{},function(n){n.router;"undefined"!=typeof window&&function(){var n=document.createElement("script"),e=window.location.protocol.split(":")[0];n.src="https"===e?"https://zz.bdstatic.com/linksubmit/push.js":"http://push.zhanzhang.baidu.com/push.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(n,t)}()},function(n){var e=n.router;"undefined"!=typeof window&&(window._hmt=window._hmt||[],function(){var n=document.createElement("script");n.src="https://hm.baidu.com/hm.js?efdb43e9c4335da1fbabf3840b82c3ed";var e=document.getElementsByTagName("script")[0];e.parentNode.insertBefore(n,e)}(),e.afterEach((function(n){_hmt.push(["_trackPageview",n.fullPath])})))},function(n){var e=n.Vue;e.component(It.name,It),e.mixin({computed:{$readingShow:function(){return this.$page.frontmatter.readingShow}}})},function(n){var e=n.Vue;"undefined"!=typeof window&&(localStorage.setItem("aplayer-setting","[]"),e.use(t(387).default,{defaultCover:"https://github.com/SigureMo.png"})),e.component("Meting",zt),e.component("MetingGlobal",Ot)},function(n){n.Vue.component("DynamicTitle",Bt)},function(n){return n.Vue.use($t.a)}],qt=["LastReadingPopup","BlockToggle","GlobalTip","Aplayer","Twikoo","ReadingProgress","MetingGlobal","DynamicTitle"];t(145);t(216);function Ft(n,e){return(Ft=Object.setPrototypeOf||function(n,e){return n.__proto__=e,n})(n,e)}t(217),t(218);function Gt(n){return(Gt=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)})(n)}function Ht(n,e){if(e&&("object"===Qn(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}(n)}function Vt(n){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(n){return!1}}();return function(){var t,o=Gt(n);if(e){var r=Gt(this).constructor;t=Reflect.construct(o,arguments,r)}else t=o.apply(this,arguments);return Ht(this,t)}}var Ut=function(n){!function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(e&&e.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),Object.defineProperty(n,"prototype",{writable:!1}),e&&Ft(n,e)}(t,n);var e=Vt(t);function t(){return Pe(this,t),e.apply(this,arguments)}return Re(t)}(function(){function n(){Pe(this,n),this.store=new r.default({data:{state:{}}})}return Re(n,[{key:"$get",value:function(n){return this.store.state[n]}},{key:"$set",value:function(n,e){r.default.set(this.store.state,n,e)}},{key:"$emit",value:function(){var n;(n=this.store).$emit.apply(n,arguments)}},{key:"$on",value:function(){var n;(n=this.store).$on.apply(n,arguments)}}]),n}());Object.assign(Ut.prototype,{getPageAsyncComponent:me,getLayoutAsyncComponent:ge,getAsyncComponent:he,getVueComponent:fe});var Wt={install:function(n){var e=new Ut;n.$vuepress=e,n.prototype.$vuepress=e}};function Yt(n){n.beforeEach((function(e,t,o){if(Kt(n,e.path))o();else if(/(\/|\.html)$/.test(e.path))if(/\/$/.test(e.path)){var r=e.path.replace(/\/$/,"")+".html";Kt(n,r)?o(r):o()}else o();else{var a=e.path+"/",i=e.path+".html";Kt(n,i)?o(i):Kt(n,a)?o(a):o()}}))}function Kt(n,e){return n.options.routes.filter((function(n){return n.path.toLowerCase()===e.toLowerCase()})).length>0}var Jt={props:{pageKey:String,slotKey:{type:String,default:"default"}},render:function(n){var e=this.pageKey||this.$parent.$page.key;return ve("pageKey",e),r.default.component(e)||r.default.component(e,me(e)),r.default.component(e)?n(e):n("")}},Qt={functional:!0,props:{slotKey:String,required:!0},render:function(n,e){var t=e.props,o=e.slots;return n("div",{class:["content__".concat(t.slotKey)]},o()[t.slotKey])}},Zt={computed:{openInNewWindowTitle:function(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},Xt=(t(389),t(390),Object(ht.a)(Zt,(function(){var n=this.$createElement,e=this._self._c||n;return e("span",[e("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[e("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),e("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),e("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports);function no(){return(no=Object(o.a)(regeneratorRuntime.mark((function n(e){var t,o,a,i;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:yt.routerBase||yt.base,Yt(o=new Kn({base:t,mode:"history",fallback:!1,routes:vt,scrollBehavior:function(n,e,t){return t||(n.hash?!r.default.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(n.hash)}:{x:0,y:0})}})),a={},n.prev=4,n.next=7,Promise.all(Nt.filter((function(n){return"function"==typeof n})).map((function(n){return n({Vue:r.default,options:a,router:o,siteData:yt,isServer:e})})));case 7:n.next=12;break;case 9:n.prev=9,n.t0=n.catch(4),console.error(n.t0);case 12:return i=new r.default(Object.assign(a,{router:o,render:function(n){return n("div",{attrs:{id:"app"}},[n("RouterView",{ref:"layout"}),n("div",{class:"global-ui"},qt.map((function(e){return n(e)})))])}})),n.abrupt("return",{app:i,router:o});case 14:case"end":return n.stop()}}),n,null,[[4,9]])})))).apply(this,arguments)}r.default.config.productionTip=!1,r.default.use(Kn),r.default.use(Wt),r.default.mixin(function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:r.default;Jn(e),t.$vuepress.$set("siteData",e);var o=n(t.$vuepress.$get("siteData")),a=new o,i=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(a)),s={};return Object.keys(i).reduce((function(n,e){return e.startsWith("$")&&(n[e]=i[e].get),n}),s),{computed:s}}((function(n){return function(){function e(){Pe(this,e)}return Re(e,[{key:"setPage",value:function(n){this.__page=n}},{key:"$site",get:function(){return n}},{key:"$themeConfig",get:function(){return this.$site.themeConfig}},{key:"$frontmatter",get:function(){return this.$page.frontmatter}},{key:"$localeConfig",get:function(){var n,e,t=this.$site.locales,o=void 0===t?{}:t;for(var r in o)"/"===r?e=o[r]:0===this.$page.path.indexOf(r)&&(n=o[r]);return n||e||{}}},{key:"$siteTitle",get:function(){return this.$localeConfig.title||this.$site.title||""}},{key:"$canonicalUrl",get:function(){var n=this.$page.frontmatter.canonicalUrl;return"string"==typeof n&&n}},{key:"$title",get:function(){var n=this.$page,e=this.$page.frontmatter.metaTitle;if("string"==typeof e)return e;var t=this.$siteTitle,o=n.frontmatter.home?null:n.frontmatter.title||n.title;return t?o?o+" | "+t:t:o||"VuePress"}},{key:"$description",get:function(){var n=function(n){if(n){var e=n.filter((function(n){return"description"===n.name}))[0];if(e)return e.content}}(this.$page.frontmatter.meta);return n||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}},{key:"$lang",get:function(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}},{key:"$localePath",get:function(){return this.$localeConfig.path||"/"}},{key:"$themeLocaleConfig",get:function(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}},{key:"$page",get:function(){return this.__page?this.__page:function(n,e){for(var t=0;t<n.length;t++){var o=n[t];if(o.path.toLowerCase()===e.toLowerCase())return o}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}}]),e}()}),yt)),r.default.component("Content",Jt),r.default.component("ContentSlotsDistributor",Qt),r.default.component("OutboundLink",Xt),r.default.component("ClientOnly",{functional:!0,render:function(n,e){var t=e.parent,o=e.children;if(t._isMounted)return o;t.$once("hook:mounted",(function(){t.$forceUpdate()}))}}),r.default.component("Layout",ge("Layout")),r.default.component("NotFound",ge("NotFound")),r.default.prototype.$withBase=function(n){var e=this.$site.base;return"/"===n.charAt(0)?e+n.slice(1):n},window.__VUEPRESS__={version:"1.8.0",hash:"46aa885"},function(n){return no.apply(this,arguments)}(!1).then((function(n){var e=n.app;n.router.onReady((function(){e.$mount("#app")}))}))}]);